(function(e,t){"use strict";if(typeof module==="object"&&typeof module.exports==="object"){module.exports=e.document?t(e,true):function(e){if(!e.document){throw new Error("jQuery requires a window with a document")}return t(e)}}else{t(e)}})(typeof window!=="undefined"?window:this,function(e,t){"use strict";var n=[];var r=e.document;var i=Object.getPrototypeOf;var o=n.slice;var a=n.concat;var s=n.push;var u=n.indexOf;var f={};var l=f.toString;var c=f.hasOwnProperty;var d=c.toString;var p=d.call(Object);var h={};function m(e,t){t=t||r;var n=t.createElement("script");n.text=e;t.head.appendChild(n).parentNode.removeChild(n)}var g="3.2.1",v=function(e,t){return new v.fn.init(e,t)},y=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,x=/^-ms-/,b=/-([a-z])/g,w=function(e,t){return t.toUpperCase()};v.fn=v.prototype={jquery:g,constructor:v,length:0,toArray:function(){return o.call(this)},get:function(e){if(e==null){return o.call(this)}return e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=v.merge(this.constructor(),e);t.prevObject=this;return t},each:function(e){return v.each(this,e)},map:function(e){return this.pushStack(v.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice};v.extend=v.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,f=false;if(typeof a==="boolean"){f=a;a=arguments[s]||{};s++}if(typeof a!=="object"&&!v.isFunction(a)){a={}}if(s===u){a=this;s--}for(;s<u;s++){if((e=arguments[s])!=null){for(t in e){n=a[t];r=e[t];if(a===r){continue}if(f&&r&&(v.isPlainObject(r)||(i=Array.isArray(r)))){if(i){i=false;o=n&&Array.isArray(n)?n:[]}else{o=n&&v.isPlainObject(n)?n:{}}a[t]=v.extend(f,o,r)}else if(r!==undefined){a[t]=r}}}}return a};v.extend({expando:"jQuery"+(g+Math.random()).replace(/\D/g,""),isReady:true,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return v.type(e)==="function"},isWindow:function(e){return e!=null&&e===e.window},isNumeric:function(e){var t=v.type(e);return(t==="number"||t==="string")&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;if(!e||l.call(e)!=="[object Object]"){return false}t=i(e);if(!t){return true}n=c.call(t,"constructor")&&t.constructor;return typeof n==="function"&&d.call(n)===p},isEmptyObject:function(e){var t;for(t in e){return false}return true},type:function(e){if(e==null){return e+""}return typeof e==="object"||typeof e==="function"?f[l.call(e)]||"object":typeof e},globalEval:function(e){m(e)},camelCase:function(e){return e.replace(x,"ms-").replace(b,w)},each:function(e,t){var n,r=0;if(T(e)){n=e.length;for(;r<n;r++){if(t.call(e[r],r,e[r])===false){break}}}else{for(r in e){if(t.call(e[r],r,e[r])===false){break}}}return e},trim:function(e){return e==null?"":(e+"").replace(y,"")},makeArray:function(e,t){var n=t||[];if(e!=null){if(T(Object(e))){v.merge(n,typeof e==="string"?[e]:e)}else{s.call(n,e)}}return n},inArray:function(e,t,n){return t==null?-1:u.call(t,e,n)},merge:function(e,t){var n=+t.length,r=0,i=e.length;for(;r<n;r++){e[i++]=t[r]}e.length=i;return e},grep:function(e,t,n){var r,i=[],o=0,a=e.length,s=!n;for(;o<a;o++){r=!t(e[o],o);if(r!==s){i.push(e[o])}}return i},map:function(e,t,n){var r,i,o=0,s=[];if(T(e)){r=e.length;for(;o<r;o++){i=t(e[o],o,n);if(i!=null){s.push(i)}}}else{for(o in e){i=t(e[o],o,n);if(i!=null){s.push(i)}}}return a.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;if(typeof t==="string"){n=e[t];t=e;e=n}if(!v.isFunction(e)){return undefined}r=o.call(arguments,2);i=function(){return e.apply(t||this,r.concat(o.call(arguments)))};i.guid=e.guid=e.guid||v.guid++;return i},now:Date.now,support:h});if(typeof Symbol==="function"){v.fn[Symbol.iterator]=n[Symbol.iterator]}v.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){f["[object "+t+"]"]=t.toLowerCase()});function T(e){var t=!!e&&"length"in e&&e.length,n=v.type(e);if(n==="function"||v.isWindow(e)){return false}return n==="array"||t===0||typeof t==="number"&&t>0&&t-1 in e}var C=function(e){var t,n,r,i,o,a,s,u,f,l,c,d,p,h,m,g,v,y,x,b="sizzle"+1*new Date,w=e.document,T=0,C=0,k=ae(),S=ae(),j=ae(),E=function(e,t){if(e===t){c=true}return 0},D={}.hasOwnProperty,A=[],N=A.pop,L=A.push,q=A.push,F=A.slice,O=function(e,t){var n=0,r=e.length;for(;n<r;n++){if(e[n]===t){return n}}return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",P="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+M+"*("+P+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+M+"*\\]",I=":("+P+")(?:\\(("+"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|"+"((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|"+".*"+")\\)|)",W=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),$=new RegExp("^"+M+"*,"+M+"*"),_=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),X=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),z=new RegExp(I),U=new RegExp("^"+P+"$"),V={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+I),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,r&1023|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){if(t){if(e==="\0"){return"ï¿½"}return e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" "}return"\\"+e},re=function(){d()},ie=ye(function(e){return e.disabled===true&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{q.apply(A=F.call(w.childNodes),w.childNodes);A[w.childNodes.length].nodeType}catch(e){q={apply:A.length?function(e,t){L.apply(e,F.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]){}e.length=n-1}}}function oe(e,t,r,i){var o,s,f,l,c,h,v,y=t&&t.ownerDocument,T=t?t.nodeType:9;r=r||[];if(typeof e!=="string"||!e||T!==1&&T!==9&&T!==11){return r}if(!i){if((t?t.ownerDocument||t:w)!==p){d(t)}t=t||p;if(m){if(T!==11&&(c=J.exec(e))){if(o=c[1]){if(T===9){if(f=t.getElementById(o)){if(f.id===o){r.push(f);return r}}else{return r}}else{if(y&&(f=y.getElementById(o))&&x(t,f)&&f.id===o){r.push(f);return r}}}else if(c[2]){q.apply(r,t.getElementsByTagName(e));return r}else if((o=c[3])&&n.getElementsByClassName&&t.getElementsByClassName){q.apply(r,t.getElementsByClassName(o));return r}}if(n.qsa&&!j[e+" "]&&(!g||!g.test(e))){if(T!==1){y=t;v=e}else if(t.nodeName.toLowerCase()!=="object"){if(l=t.getAttribute("id")){l=l.replace(te,ne)}else{t.setAttribute("id",l=b)}h=a(e);s=h.length;while(s--){h[s]="#"+l+" "+ve(h[s])}v=h.join(",");y=K.test(e)&&me(t.parentNode)||t}if(v){try{q.apply(r,y.querySelectorAll(v));return r}catch(e){}finally{if(l===b){t.removeAttribute("id")}}}}}}return u(e.replace(B,"$1"),t,r,i)}function ae(){var e=[];function t(n,i){if(e.push(n+" ")>r.cacheLength){delete t[e.shift()]}return t[n+" "]=i}return t}function se(e){e[b]=true;return e}function ue(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return false}finally{if(t.parentNode){t.parentNode.removeChild(t)}t=null}}function fe(e,t){var n=e.split("|"),i=n.length;while(i--){r.attrHandle[n[i]]=t}}function le(e,t){var n=t&&e,r=n&&e.nodeType===1&&t.nodeType===1&&e.sourceIndex-t.sourceIndex;if(r){return r}if(n){while(n=n.nextSibling){if(n===t){return-1}}}return e?1:-1}function ce(e){return function(t){var n=t.nodeName.toLowerCase();return n==="input"&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return(n==="input"||n==="button")&&t.type===e}}function pe(e){return function(t){if("form"in t){if(t.parentNode&&t.disabled===false){if("label"in t){if("label"in t.parentNode){return t.parentNode.disabled===e}else{return t.disabled===e}}return t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e}return t.disabled===e}else if("label"in t){return t.disabled===e}return false}}function he(e){return se(function(t){t=+t;return se(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--){if(n[i=o[a]]){n[i]=!(r[i]=n[i])}}})})}function me(e){return e&&typeof e.getElementsByTagName!=="undefined"&&e}n=oe.support={};o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?t.nodeName!=="HTML":false};d=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;if(a===p||a.nodeType!==9||!a.documentElement){return p}p=a;h=p.documentElement;m=!o(p);if(w!==p&&(i=p.defaultView)&&i.top!==i){if(i.addEventListener){i.addEventListener("unload",re,false)}else if(i.attachEvent){i.attachEvent("onunload",re)}}n.attributes=ue(function(e){e.className="i";return!e.getAttribute("className")});n.getElementsByTagName=ue(function(e){e.appendChild(p.createComment(""));return!e.getElementsByTagName("*").length});n.getElementsByClassName=Q.test(p.getElementsByClassName);n.getById=ue(function(e){h.appendChild(e).id=b;return!p.getElementsByName||!p.getElementsByName(b).length});if(n.getById){r.filter["ID"]=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}};r.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&m){var n=t.getElementById(e);return n?[n]:[]}}}else{r.filter["ID"]=function(e){var t=e.replace(Z,ee);return function(e){var n=typeof e.getAttributeNode!=="undefined"&&e.getAttributeNode("id");return n&&n.value===t}};r.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&m){var n,r,i,o=t.getElementById(e);if(o){n=o.getAttributeNode("id");if(n&&n.value===e){return[o]}i=t.getElementsByName(e);r=0;while(o=i[r++]){n=o.getAttributeNode("id");if(n&&n.value===e){return[o]}}}return[]}}}r.find["TAG"]=n.getElementsByTagName?function(e,t){if(typeof t.getElementsByTagName!=="undefined"){return t.getElementsByTagName(e)}else if(n.qsa){return t.querySelectorAll(e)}}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(e==="*"){while(n=o[i++]){if(n.nodeType===1){r.push(n)}}return r}return o};r.find["CLASS"]=n.getElementsByClassName&&function(e,t){if(typeof t.getElementsByClassName!=="undefined"&&m){return t.getElementsByClassName(e)}};v=[];g=[];if(n.qsa=Q.test(p.querySelectorAll)){ue(function(e){h.appendChild(e).innerHTML="<a id='"+b+"'></a>"+"<select id='"+b+"-\r\\' msallowcapture=''>"+"<option selected=''></option></select>";if(e.querySelectorAll("[msallowcapture^='']").length){g.push("[*^$]="+M+"*(?:''|\"\")")}if(!e.querySelectorAll("[selected]").length){g.push("\\["+M+"*(?:value|"+H+")")}if(!e.querySelectorAll("[id~="+b+"-]").length){g.push("~=")}if(!e.querySelectorAll(":checked").length){g.push(":checked")}if(!e.querySelectorAll("a#"+b+"+*").length){g.push(".#.+[+~]")}});ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a>"+"<select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden");e.appendChild(t).setAttribute("name","D");if(e.querySelectorAll("[name=d]").length){g.push("name"+M+"*[*^$|!~]?=")}if(e.querySelectorAll(":enabled").length!==2){g.push(":enabled",":disabled")}h.appendChild(e).disabled=true;if(e.querySelectorAll(":disabled").length!==2){g.push(":enabled",":disabled")}e.querySelectorAll("*,:x");g.push(",.*:")})}if(n.matchesSelector=Q.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector)){ue(function(e){n.disconnectedMatch=y.call(e,"*");y.call(e,"[s!='']:x");v.push("!=",I)})}g=g.length&&new RegExp(g.join("|"));v=v.length&&new RegExp(v.join("|"));t=Q.test(h.compareDocumentPosition);x=t||Q.test(h.contains)?function(e,t){var n=e.nodeType===9?e.documentElement:e,r=t&&t.parentNode;return e===r||!!(r&&r.nodeType===1&&(n.contains?n.contains(r):e.compareDocumentPosition&&e.compareDocumentPosition(r)&16))}:function(e,t){if(t){while(t=t.parentNode){if(t===e){return true}}}return false};E=t?function(e,t){if(e===t){c=true;return 0}var r=!e.compareDocumentPosition-!t.compareDocumentPosition;if(r){return r}r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1;if(r&1||!n.sortDetached&&t.compareDocumentPosition(e)===r){if(e===p||e.ownerDocument===w&&x(w,e)){return-1}if(t===p||t.ownerDocument===w&&x(w,t)){return 1}return l?O(l,e)-O(l,t):0}return r&4?-1:1}:function(e,t){if(e===t){c=true;return 0}var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o){return e===p?-1:t===p?1:i?-1:o?1:l?O(l,e)-O(l,t):0}else if(i===o){return le(e,t)}n=e;while(n=n.parentNode){a.unshift(n)}n=t;while(n=n.parentNode){s.unshift(n)}while(a[r]===s[r]){r++}return r?le(a[r],s[r]):a[r]===w?-1:s[r]===w?1:0};return p};oe.matches=function(e,t){return oe(e,null,null,t)};oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p){d(e)}t=t.replace(X,"='$1']");if(n.matchesSelector&&m&&!j[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t))){try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&e.document.nodeType!==11){return r}}catch(e){}}return oe(t,p,null,[e]).length>0};oe.contains=function(e,t){if((e.ownerDocument||e)!==p){d(e)}return x(e,t)};oe.attr=function(e,t){if((e.ownerDocument||e)!==p){d(e)}var i=r.attrHandle[t.toLowerCase()],o=i&&D.call(r.attrHandle,t.toLowerCase())?i(e,t,!m):undefined;return o!==undefined?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null};oe.escape=function(e){return(e+"").replace(te,ne)};oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)};oe.uniqueSort=function(e){var t,r=[],i=0,o=0;c=!n.detectDuplicates;l=!n.sortStable&&e.slice(0);e.sort(E);if(c){while(t=e[o++]){if(t===e[o]){i=r.push(o)}}while(i--){e.splice(r[i],1)}}l=null;return e};i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(!o){while(t=e[r++]){n+=i(t)}}else if(o===1||o===9||o===11){if(typeof e.textContent==="string"){return e.textContent}else{for(e=e.firstChild;e;e=e.nextSibling){n+=i(e)}}}else if(o===3||o===4){return e.nodeValue}return n};r=oe.selectors={cacheLength:50,createPseudo:se,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){e[1]=e[1].replace(Z,ee);e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee);if(e[2]==="~="){e[3]=" "+e[3]+" "}return e.slice(0,4)},CHILD:function(e){e[1]=e[1].toLowerCase();if(e[1].slice(0,3)==="nth"){if(!e[3]){oe.error(e[0])}e[4]=+(e[4]?e[5]+(e[6]||1):2*(e[3]==="even"||e[3]==="odd"));e[5]=+(e[7]+e[8]||e[3]==="odd")}else if(e[3]){oe.error(e[0])}return e},PSEUDO:function(e){var t,n=!e[6]&&e[2];if(V["CHILD"].test(e[0])){return null}if(e[3]){e[2]=e[4]||e[5]||""}else if(n&&z.test(n)&&(t=a(n,true))&&(t=n.indexOf(")",n.length-t)-n.length)){e[0]=e[0].slice(0,t);e[2]=n.slice(0,t)}return e.slice(0,3)}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return e==="*"?function(){return true}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&k(e,function(e){return t.test(typeof e.className==="string"&&e.className||typeof e.getAttribute!=="undefined"&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);if(i==null){return t==="!="}if(!t){return true}i+="";return t==="="?i===n:t==="!="?i!==n:t==="^="?n&&i.indexOf(n)===0:t==="*="?n&&i.indexOf(n)>-1:t==="$="?n&&i.slice(-n.length)===n:t==="~="?(" "+i.replace(W," ")+" ").indexOf(n)>-1:t==="|="?i===n||i.slice(0,n.length+1)===n+"-":false}},CHILD:function(e,t,n,r,i){var o=e.slice(0,3)!=="nth",a=e.slice(-4)!=="last",s=t==="of-type";return r===1&&i===0?function(e){return!!e.parentNode}:function(t,n,u){var f,l,c,d,p,h,m=o!==a?"nextSibling":"previousSibling",g=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!u&&!s,x=false;if(g){if(o){while(m){d=t;while(d=d[m]){if(s?d.nodeName.toLowerCase()===v:d.nodeType===1){return false}}h=m=e==="only"&&!h&&"nextSibling"}return true}h=[a?g.firstChild:g.lastChild];if(a&&y){d=g;c=d[b]||(d[b]={});l=c[d.uniqueID]||(c[d.uniqueID]={});f=l[e]||[];p=f[0]===T&&f[1];x=p&&f[2];d=p&&g.childNodes[p];while(d=++p&&d&&d[m]||(x=p=0)||h.pop()){if(d.nodeType===1&&++x&&d===t){l[e]=[T,p,x];break}}}else{if(y){d=t;c=d[b]||(d[b]={});l=c[d.uniqueID]||(c[d.uniqueID]={});f=l[e]||[];p=f[0]===T&&f[1];x=p}if(x===false){while(d=++p&&d&&d[m]||(x=p=0)||h.pop()){if((s?d.nodeName.toLowerCase()===v:d.nodeType===1)&&++x){if(y){c=d[b]||(d[b]={});l=c[d.uniqueID]||(c[d.uniqueID]={});l[e]=[T,x]}if(d===t){break}}}}}x-=i;return x===r||x%r===0&&x/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);if(i[b]){return i(t)}if(i.length>1){n=[e,e,"",t];return r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var r,o=i(e,t),a=o.length;while(a--){r=O(e,o[a]);e[r]=!(n[r]=o[a])}}):function(e){return i(e,0,n)}}return i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(B,"$1"));return r[b]?se(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--){if(o=a[s]){e[s]=!(t[s]=o)}}}):function(e,i,o){t[0]=e;r(t,null,o,n);t[0]=null;return!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){e=e.replace(Z,ee);return function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){if(!U.test(e||"")){oe.error("unsupported lang: "+e)}e=e.replace(Z,ee).toLowerCase();return function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang")){n=n.toLowerCase();return n===e||n.indexOf(e+"-")===0}}while((t=t.parentNode)&&t.nodeType===1);return false}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(false),disabled:pe(true),checked:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&!!e.checked||t==="option"&&!!e.selected},selected:function(e){if(e.parentNode){e.parentNode.selectedIndex}return e.selected===true},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling){if(e.nodeType<6){return false}}return true},parent:function(e){return!r.pseudos["empty"](e)},header:function(e){return G.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&e.type==="button"||t==="button"},text:function(e){var t;return e.nodeName.toLowerCase()==="input"&&e.type==="text"&&((t=e.getAttribute("type"))==null||t.toLowerCase()==="text")},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){var n=0;for(;n<t;n+=2){e.push(n)}return e}),odd:he(function(e,t){var n=1;for(;n<t;n+=2){e.push(n)}return e}),lt:he(function(e,t,n){var r=n<0?n+t:n;for(;--r>=0;){e.push(r)}return e}),gt:he(function(e,t,n){var r=n<0?n+t:n;for(;++r<t;){e.push(r)}return e})}};r.pseudos["nth"]=r.pseudos["eq"];for(t in{radio:true,checkbox:true,file:true,password:true,image:true}){r.pseudos[t]=ce(t)}for(t in{submit:true,reset:true}){r.pseudos[t]=de(t)}function ge(){}ge.prototype=r.filters=r.pseudos;r.setFilters=new ge;a=oe.tokenize=function(e,t){var n,i,o,a,s,u,f,l=S[e+" "];if(l){return t?0:l.slice(0)}s=e;u=[];f=r.preFilter;while(s){if(!n||(i=$.exec(s))){if(i){s=s.slice(i[0].length)||s}u.push(o=[])}n=false;if(i=_.exec(s)){n=i.shift();o.push({value:n,type:i[0].replace(B," ")});s=s.slice(n.length)}for(a in r.filter){if((i=V[a].exec(s))&&(!f[a]||(i=f[a](i)))){n=i.shift();o.push({value:n,type:a,matches:i});s=s.slice(n.length)}}if(!n){break}}return t?s.length:s?oe.error(e):S(e,u).slice(0)};function ve(e){var t=0,n=e.length,r="";for(;t<n;t++){r+=e[t].value}return r}function ye(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&o==="parentNode",s=C++;return t.first?function(t,n,i){while(t=t[r]){if(t.nodeType===1||a){return e(t,n,i)}}return false}:function(t,n,u){var f,l,c,d=[T,s];if(u){while(t=t[r]){if(t.nodeType===1||a){if(e(t,n,u)){return true}}}}else{while(t=t[r]){if(t.nodeType===1||a){c=t[b]||(t[b]={});l=c[t.uniqueID]||(c[t.uniqueID]={});if(i&&i===t.nodeName.toLowerCase()){t=t[r]||t}else if((f=l[o])&&f[0]===T&&f[1]===s){return d[2]=f[2]}else{l[o]=d;if(d[2]=e(t,n,u)){return true}}}}}return false}}function xe(e){return e.length>1?function(t,n,r){var i=e.length;while(i--){if(!e[i](t,n,r)){return false}}return true}:e[0]}function be(e,t,n){var r=0,i=t.length;for(;r<i;r++){oe(e,t[r],n)}return n}function we(e,t,n,r,i){var o,a=[],s=0,u=e.length,f=t!=null;for(;s<u;s++){if(o=e[s]){if(!n||n(o,r,i)){a.push(o);if(f){t.push(s)}}}}return a}function Te(e,t,n,r,i,o){if(r&&!r[b]){r=Te(r)}if(i&&!i[b]){i=Te(i,o)}return se(function(o,a,s,u){var f,l,c,d=[],p=[],h=a.length,m=o||be(t||"*",s.nodeType?[s]:s,[]),g=e&&(o||!t)?we(m,d,e,s,u):m,v=n?i||(o?e:h||r)?[]:a:g;if(n){n(g,v,s,u)}if(r){f=we(v,p);r(f,[],s,u);l=f.length;while(l--){if(c=f[l]){v[p[l]]=!(g[p[l]]=c)}}}if(o){if(i||e){if(i){f=[];l=v.length;while(l--){if(c=v[l]){f.push(g[l]=c)}}i(null,v=[],f,u)}l=v.length;while(l--){if((c=v[l])&&(f=i?O(o,c):d[l])>-1){o[f]=!(a[f]=c)}}}}else{v=we(v===a?v.splice(h,v.length):v);if(i){i(null,a,v,u)}else{q.apply(a,v)}}})}function Ce(e){var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,l=ye(function(e){return e===t},s,true),c=ye(function(e){return O(t,e)>-1},s,true),d=[function(e,n,r){var i=!a&&(r||n!==f)||((t=n).nodeType?l(e,n,r):c(e,n,r));t=null;return i}];for(;u<o;u++){if(n=r.relative[e[u].type]){d=[ye(xe(d),n)]}else{n=r.filter[e[u].type].apply(null,e[u].matches);if(n[b]){i=++u;for(;i<o;i++){if(r.relative[e[i].type]){break}}return Te(u>1&&xe(d),u>1&&ve(e.slice(0,u-1).concat({value:e[u-2].type===" "?"*":""})).replace(B,"$1"),n,u<i&&Ce(e.slice(u,i)),i<o&&Ce(e=e.slice(i)),i<o&&ve(e))}d.push(n)}}return xe(d)}function ke(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,l){var c,h,g,v=0,y="0",x=o&&[],b=[],w=f,C=o||i&&r.find["TAG"]("*",l),k=T+=w==null?1:Math.random()||.1,S=C.length;if(l){f=a===p||a||l}for(;y!==S&&(c=C[y])!=null;y++){if(i&&c){h=0;if(!a&&c.ownerDocument!==p){d(c);s=!m}while(g=e[h++]){if(g(c,a||p,s)){u.push(c);break}}if(l){T=k}}if(n){if(c=!g&&c){v--}if(o){x.push(c)}}}v+=y;if(n&&y!==v){h=0;while(g=t[h++]){g(x,b,a,s)}if(o){if(v>0){while(y--){if(!(x[y]||b[y])){b[y]=N.call(u)}}}b=we(b)}q.apply(u,b);if(l&&!o&&b.length>0&&v+t.length>1){oe.uniqueSort(u)}}if(l){T=k;f=w}return x};return n?se(o):o}s=oe.compile=function(e,t){var n,r=[],i=[],o=j[e+" "];if(!o){if(!t){t=a(e)}n=t.length;while(n--){o=Ce(t[n]);if(o[b]){r.push(o)}else{i.push(o)}}o=j(e,ke(i,r));o.selector=e}return o};u=oe.select=function(e,t,n,i){var o,u,f,l,c,d=typeof e==="function"&&e,p=!i&&a(e=d.selector||e);n=n||[];if(p.length===1){u=p[0]=p[0].slice(0);if(u.length>2&&(f=u[0]).type==="ID"&&t.nodeType===9&&m&&r.relative[u[1].type]){t=(r.find["ID"](f.matches[0].replace(Z,ee),t)||[])[0];if(!t){return n}else if(d){t=t.parentNode}e=e.slice(u.shift().value.length)}o=V["needsContext"].test(e)?0:u.length;while(o--){f=u[o];if(r.relative[l=f.type]){break}if(c=r.find[l]){if(i=c(f.matches[0].replace(Z,ee),K.test(u[0].type)&&me(t.parentNode)||t)){u.splice(o,1);e=i.length&&ve(u);if(!e){q.apply(n,i);return n}break}}}}(d||s(e,p))(i,t,!m,n,!t||K.test(e)&&me(t.parentNode)||t);return n};n.sortStable=b.split("").sort(E).join("")===b;n.detectDuplicates=!!c;d();n.sortDetached=ue(function(e){return e.compareDocumentPosition(p.createElement("fieldset"))&1});if(!ue(function(e){e.innerHTML="<a href='#'></a>";return e.firstChild.getAttribute("href")==="#"})){fe("type|href|height|width",function(e,t,n){if(!n){return e.getAttribute(t,t.toLowerCase()==="type"?1:2)}})}if(!n.attributes||!ue(function(e){e.innerHTML="<input/>";e.firstChild.setAttribute("value","");return e.firstChild.getAttribute("value")===""})){fe("value",function(e,t,n){if(!n&&e.nodeName.toLowerCase()==="input"){return e.defaultValue}})}if(!ue(function(e){return e.getAttribute("disabled")==null})){fe(H,function(e,t,n){var r;if(!n){return e[t]===true?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}})}return oe}(e);v.find=C;v.expr=C.selectors;v.expr[":"]=v.expr.pseudos;v.uniqueSort=v.unique=C.uniqueSort;v.text=C.getText;v.isXMLDoc=C.isXML;v.contains=C.contains;v.escapeSelector=C.escape;var k=function(e,t,n){var r=[],i=n!==undefined;while((e=e[t])&&e.nodeType!==9){if(e.nodeType===1){if(i&&v(e).is(n)){break}r.push(e)}}return r};var S=function(e,t){var n=[];for(;e;e=e.nextSibling){if(e.nodeType===1&&e!==t){n.push(e)}}return n};var j=v.expr.match.needsContext;function E(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;var A=/^.[^:#\[\.,]*$/;function N(e,t,n){if(v.isFunction(t)){return v.grep(e,function(e,r){return!!t.call(e,r,e)!==n})}if(t.nodeType){return v.grep(e,function(e){return e===t!==n})}if(typeof t!=="string"){return v.grep(e,function(e){return u.call(t,e)>-1!==n})}if(A.test(t)){return v.filter(t,e,n)}t=v.filter(t,e);return v.grep(e,function(e){return u.call(t,e)>-1!==n&&e.nodeType===1})}v.filter=function(e,t,n){var r=t[0];if(n){e=":not("+e+")"}if(t.length===1&&r.nodeType===1){return v.find.matchesSelector(r,e)?[r]:[]}return v.find.matches(e,v.grep(t,function(e){return e.nodeType===1}))};v.fn.extend({find:function(e){var t,n,r=this.length,i=this;if(typeof e!=="string"){return this.pushStack(v(e).filter(function(){for(t=0;t<r;t++){if(v.contains(i[t],this)){return true}}}))}n=this.pushStack([]);for(t=0;t<r;t++){v.find(e,i[t],n)}return r>1?v.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],false))},not:function(e){return this.pushStack(N(this,e||[],true))},is:function(e){return!!N(this,typeof e==="string"&&j.test(e)?v(e):e||[],false).length}});var L,q=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,F=v.fn.init=function(e,t,n){var i,o;if(!e){return this}n=n||L;if(typeof e==="string"){if(e[0]==="<"&&e[e.length-1]===">"&&e.length>=3){i=[null,e,null]}else{i=q.exec(e)}if(i&&(i[1]||!t)){if(i[1]){t=t instanceof v?t[0]:t;v.merge(this,v.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,true));if(D.test(i[1])&&v.isPlainObject(t)){for(i in t){if(v.isFunction(this[i])){this[i](t[i])}else{this.attr(i,t[i])}}}return this}else{o=r.getElementById(i[2]);if(o){this[0]=o;this.length=1}return this}}else if(!t||t.jquery){return(t||n).find(e)}else{return this.constructor(t).find(e)}}else if(e.nodeType){this[0]=e;this.length=1;return this}else if(v.isFunction(e)){return n.ready!==undefined?n.ready(e):e(v)}return v.makeArray(e,this)};F.prototype=v.fn;L=v(r);var O=/^(?:parents|prev(?:Until|All))/,H={children:true,contents:true,next:true,prev:true};v.fn.extend({has:function(e){var t=v(e,this),n=t.length;return this.filter(function(){var e=0;for(;e<n;e++){if(v.contains(this,t[e])){return true}}})},closest:function(e,t){var n,r=0,i=this.length,o=[],a=typeof e!=="string"&&v(e);if(!j.test(e)){for(;r<i;r++){for(n=this[r];n&&n!==t;n=n.parentNode){if(n.nodeType<11&&(a?a.index(n)>-1:n.nodeType===1&&v.find.matchesSelector(n,e))){o.push(n);break}}}}return this.pushStack(o.length>1?v.uniqueSort(o):o)},index:function(e){if(!e){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1}if(typeof e==="string"){return u.call(v(e),this[0])}return u.call(this,e.jquery?e[0]:e)},add:function(e,t){return this.pushStack(v.uniqueSort(v.merge(this.get(),v(e,t))))},addBack:function(e){return this.add(e==null?this.prevObject:this.prevObject.filter(e))}});function M(e,t){while((e=e[t])&&e.nodeType!==1){}return e}v.each({parent:function(e){var t=e.parentNode;return t&&t.nodeType!==11?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){if(E(e,"iframe")){return e.contentDocument}if(E(e,"template")){e=e.content||e}return v.merge([],e.childNodes)}},function(e,t){v.fn[e]=function(n,r){var i=v.map(this,t,n);if(e.slice(-5)!=="Until"){r=n}if(r&&typeof r==="string"){i=v.filter(r,i)}if(this.length>1){if(!H[e]){v.uniqueSort(i)}if(O.test(e)){i.reverse()}}return this.pushStack(i)}});var P=/[^\x20\t\r\n\f]+/g;function R(e){var t={};v.each(e.match(P)||[],function(e,n){t[n]=true});return t}v.Callbacks=function(e){e=typeof e==="string"?R(e):v.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){i=i||e.once;r=t=true;for(;a.length;s=-1){n=a.shift();while(++s<o.length){if(o[s].apply(n[0],n[1])===false&&e.stopOnFalse){s=o.length;n=false}}}if(!e.memory){n=false}t=false;if(i){if(n){o=[]}else{o=""}}},f={add:function(){if(o){if(n&&!t){s=o.length-1;a.push(n)}(function t(n){v.each(n,function(n,r){if(v.isFunction(r)){if(!e.unique||!f.has(r)){o.push(r)}}else if(r&&r.length&&v.type(r)!=="string"){t(r)}})})(arguments);if(n&&!t){u()}}return this},remove:function(){v.each(arguments,function(e,t){var n;while((n=v.inArray(t,o,n))>-1){o.splice(n,1);if(n<=s){s--}}});return this},has:function(e){return e?v.inArray(e,o)>-1:o.length>0},empty:function(){if(o){o=[]}return this},disable:function(){i=a=[];o=n="";return this},disabled:function(){return!o},lock:function(){i=a=[];if(!n&&!t){o=n=""}return this},locked:function(){return!!i},fireWith:function(e,n){if(!i){n=n||[];n=[e,n.slice?n.slice():n];a.push(n);if(!t){u()}}return this},fire:function(){f.fireWith(this,arguments);return this},fired:function(){return!!r}};return f};function I(e){return e}function W(e){throw e}function B(e,t,n,r){var i;try{if(e&&v.isFunction(i=e.promise)){i.call(e).done(t).fail(n)}else if(e&&v.isFunction(i=e.then)){i.call(e,t,n)}else{t.apply(undefined,[e].slice(r))}}catch(e){n.apply(undefined,[e])}}v.extend({Deferred:function(t){var n=[["notify","progress",v.Callbacks("memory"),v.Callbacks("memory"),2],["resolve","done",v.Callbacks("once memory"),v.Callbacks("once memory"),0,"resolved"],["reject","fail",v.Callbacks("once memory"),v.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){o.done(arguments).fail(arguments);return this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return v.Deferred(function(t){v.each(n,function(n,r){var i=v.isFunction(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);if(e&&v.isFunction(e.promise)){e.promise().progress(t.notify).done(t.resolve).fail(t.reject)}else{t[r[0]+"With"](this,i?[e]:arguments)}})});e=null}).promise()},then:function(t,r,i){var o=0;function a(t,n,r,i){return function(){var s=this,u=arguments,f=function(){var e,f;if(t<o){return}e=r.apply(s,u);if(e===n.promise()){throw new TypeError("Thenable self-resolution")}f=e&&(typeof e==="object"||typeof e==="function")&&e.then;if(v.isFunction(f)){if(i){f.call(e,a(o,n,I,i),a(o,n,W,i))}else{o++;f.call(e,a(o,n,I,i),a(o,n,W,i),a(o,n,I,n.notifyWith))}}else{if(r!==I){s=undefined;u=[e]}(i||n.resolveWith)(s,u)}},l=i?f:function(){try{f()}catch(e){if(v.Deferred.exceptionHook){v.Deferred.exceptionHook(e,l.stackTrace)}if(t+1>=o){if(r!==W){s=undefined;u=[e]}n.rejectWith(s,u)}}};if(t){l()}else{if(v.Deferred.getStackHook){l.stackTrace=v.Deferred.getStackHook()}e.setTimeout(l)}}}return v.Deferred(function(e){n[0][3].add(a(0,e,v.isFunction(i)?i:I,e.notifyWith));n[1][3].add(a(0,e,v.isFunction(t)?t:I));n[2][3].add(a(0,e,v.isFunction(r)?r:W))}).promise()},promise:function(e){return e!=null?v.extend(e,i):i}},o={};v.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add;if(s){a.add(function(){r=s},n[3-e][2].disable,n[0][2].lock)}a.add(t[3].fire);o[t[0]]=function(){o[t[0]+"With"](this===o?undefined:this,arguments);return this};o[t[0]+"With"]=a.fireWith});i.promise(o);if(t){t.call(o,o)}return o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=o.call(arguments),a=v.Deferred(),s=function(e){return function(n){r[e]=this;i[e]=arguments.length>1?o.call(arguments):n;if(!--t){a.resolveWith(r,i)}}};if(t<=1){B(e,a.done(s(n)).resolve,a.reject,!t);if(a.state()==="pending"||v.isFunction(i[n]&&i[n].then)){return a.then()}}while(n--){B(i[n],s(n),a.reject)}return a.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;v.Deferred.exceptionHook=function(t,n){if(e.console&&e.console.warn&&t&&$.test(t.name)){e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)}};v.readyException=function(t){e.setTimeout(function(){throw t})};var _=v.Deferred();v.fn.ready=function(e){_.then(e).catch(function(e){v.readyException(e)});return this};v.extend({isReady:false,readyWait:1,ready:function(e){if(e===true?--v.readyWait:v.isReady){return}v.isReady=true;if(e!==true&&--v.readyWait>0){return}_.resolveWith(r,[v])}});v.ready.then=_.then;function X(){r.removeEventListener("DOMContentLoaded",X);e.removeEventListener("load",X);v.ready()}if(r.readyState==="complete"||r.readyState!=="loading"&&!r.documentElement.doScroll){e.setTimeout(v.ready)}else{r.addEventListener("DOMContentLoaded",X);e.addEventListener("load",X)}var z=function(e,t,n,r,i,o,a){var s=0,u=e.length,f=n==null;if(v.type(n)==="object"){i=true;for(s in n){z(e,t,s,n[s],true,o,a)}}else if(r!==undefined){i=true;if(!v.isFunction(r)){a=true}if(f){if(a){t.call(e,r);t=null}else{f=t;t=function(e,t,n){return f.call(v(e),n)}}}if(t){for(;s<u;s++){t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)))}}}if(i){return e}if(f){return t.call(e)}return u?t(e[0],n):o};var U=function(e){return e.nodeType===1||e.nodeType===9||!+e.nodeType};function V(){this.expando=v.expando+V.uid++}V.uid=1;V.prototype={cache:function(e){var t=e[this.expando];if(!t){t={};if(U(e)){if(e.nodeType){e[this.expando]=t}else{Object.defineProperty(e,this.expando,{value:t,configurable:true})}}}return t},set:function(e,t,n){var r,i=this.cache(e);if(typeof t==="string"){i[v.camelCase(t)]=n}else{for(r in t){i[v.camelCase(r)]=t[r]}}return i},get:function(e,t){return t===undefined?this.cache(e):e[this.expando]&&e[this.expando][v.camelCase(t)]},access:function(e,t,n){if(t===undefined||t&&typeof t==="string"&&n===undefined){return this.get(e,t)}this.set(e,t,n);return n!==undefined?n:t},remove:function(e,t){var n,r=e[this.expando];if(r===undefined){return}if(t!==undefined){if(Array.isArray(t)){t=t.map(v.camelCase)}else{t=v.camelCase(t);t=t in r?[t]:t.match(P)||[]}n=t.length;while(n--){delete r[t[n]]}}if(t===undefined||v.isEmptyObject(r)){if(e.nodeType){e[this.expando]=undefined}else{delete e[this.expando]}}},hasData:function(e){var t=e[this.expando];return t!==undefined&&!v.isEmptyObject(t)}};var Y=new V;var G=new V;var Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function K(e){if(e==="true"){return true}if(e==="false"){return false}if(e==="null"){return null}if(e===+e+""){return+e}if(Q.test(e)){return JSON.parse(e)}return e}function Z(e,t,n){var r;if(n===undefined&&e.nodeType===1){r="data-"+t.replace(J,"-$&").toLowerCase();n=e.getAttribute(r);if(typeof n==="string"){try{n=K(n)}catch(e){}G.set(e,t,n)}else{n=undefined}}return n}v.extend({hasData:function(e){return G.hasData(e)||Y.hasData(e)},data:function(e,t,n){return G.access(e,t,n)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}});v.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(e===undefined){if(this.length){i=G.get(o);if(o.nodeType===1&&!Y.get(o,"hasDataAttrs")){n=a.length;while(n--){if(a[n]){r=a[n].name;if(r.indexOf("data-")===0){r=v.camelCase(r.slice(5));Z(o,r,i[r])}}}Y.set(o,"hasDataAttrs",true)}}return i}if(typeof e==="object"){return this.each(function(){G.set(this,e)})}return z(this,function(t){var n;if(o&&t===undefined){n=G.get(o,e);if(n!==undefined){return n}n=Z(o,e);if(n!==undefined){return n}return}this.each(function(){G.set(this,e,t)})},null,t,arguments.length>1,null,true)},removeData:function(e){return this.each(function(){G.remove(this,e)})}});v.extend({queue:function(e,t,n){var r;if(e){t=(t||"fx")+"queue";r=Y.get(e,t);if(n){if(!r||Array.isArray(n)){r=Y.access(e,t,v.makeArray(n))}else{r.push(n)}}return r||[]}},dequeue:function(e,t){t=t||"fx";var n=v.queue(e,t),r=n.length,i=n.shift(),o=v._queueHooks(e,t),a=function(){v.dequeue(e,t)};if(i==="inprogress"){i=n.shift();r--}if(i){if(t==="fx"){n.unshift("inprogress")}delete o.stop;i.call(e,a,o)}if(!r&&o){o.empty.fire()}},_queueHooks:function(e,t){var n=t+"queueHooks";return Y.get(e,n)||Y.access(e,n,{empty:v.Callbacks("once memory").add(function(){Y.remove(e,[t+"queue",n])})})}});v.fn.extend({queue:function(e,t){var n=2;if(typeof e!=="string"){t=e;e="fx";n--}if(arguments.length<n){return v.queue(this[0],e)}return t===undefined?this:this.each(function(){var n=v.queue(this,e,t);v._queueHooks(this,e);if(e==="fx"&&n[0]!=="inprogress"){v.dequeue(this,e)}})},dequeue:function(e){return this.each(function(){v.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=v.Deferred(),o=this,a=this.length,s=function(){if(!--r){i.resolveWith(o,[o])}};if(typeof e!=="string"){t=e;e=undefined}e=e||"fx";while(a--){n=Y.get(o[a],e+"queueHooks");if(n&&n.empty){r++;n.empty.add(s)}}s();return i.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i");var ne=["Top","Right","Bottom","Left"];var re=function(e,t){e=t||e;return e.style.display==="none"||e.style.display===""&&v.contains(e.ownerDocument,e)&&v.css(e,"display")==="none"};var ie=function(e,t,n,r){var i,o,a={};for(o in t){a[o]=e.style[o];e.style[o]=t[o]}i=n.apply(e,r||[]);for(o in t){e.style[o]=a[o]}return i};function oe(e,t,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return v.css(e,t,"")},u=s(),f=n&&n[3]||(v.cssNumber[t]?"":"px"),l=(v.cssNumber[t]||f!=="px"&&+u)&&te.exec(v.css(e,t));if(l&&l[3]!==f){f=f||l[3];n=n||[];l=+u||1;do{o=o||".5";l=l/o;v.style(e,t,l+f)}while(o!==(o=s()/u)&&o!==1&&--a)}if(n){l=+l||+u||0;i=n[1]?l+(n[1]+1)*n[2]:+n[2];if(r){r.unit=f;r.start=l;r.end=i}}return i}var ae={};function se(e){var t,n=e.ownerDocument,r=e.nodeName,i=ae[r];if(i){return i}t=n.body.appendChild(n.createElement(r));i=v.css(t,"display");t.parentNode.removeChild(t);if(i==="none"){i="block"}ae[r]=i;return i}function ue(e,t){var n,r,i=[],o=0,a=e.length;for(;o<a;o++){r=e[o];if(!r.style){continue}n=r.style.display;if(t){if(n==="none"){i[o]=Y.get(r,"display")||null;if(!i[o]){r.style.display=""}}if(r.style.display===""&&re(r)){i[o]=se(r)}}else{if(n!=="none"){i[o]="none";Y.set(r,"display",n)}}}for(o=0;o<a;o++){if(i[o]!=null){e[o].style.display=i[o]}}return e}v.fn.extend({show:function(){return ue(this,true)},hide:function(){return ue(this)},toggle:function(e){if(typeof e==="boolean"){return e?this.show():this.hide()}return this.each(function(){if(re(this)){v(this).show()}else{v(this).hide()}})}});var fe=/^(?:checkbox|radio)$/i;var le=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i;var ce=/^$|\/(?:java|ecma)script/i;var de={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};de.optgroup=de.option;de.tbody=de.tfoot=de.colgroup=de.caption=de.thead;de.th=de.td;function pe(e,t){var n;if(typeof e.getElementsByTagName!=="undefined"){n=e.getElementsByTagName(t||"*")}else if(typeof e.querySelectorAll!=="undefined"){n=e.querySelectorAll(t||"*")}else{n=[]}if(t===undefined||t&&E(e,t)){return v.merge([e],n)}return n}function he(e,t){var n=0,r=e.length;for(;n<r;n++){Y.set(e[n],"globalEval",!t||Y.get(t[n],"globalEval"))}}var me=/<|&#?\w+;/;function ge(e,t,n,r,i){var o,a,s,u,f,l,c=t.createDocumentFragment(),d=[],p=0,h=e.length;for(;p<h;p++){o=e[p];if(o||o===0){if(v.type(o)==="object"){v.merge(d,o.nodeType?[o]:o)}else if(!me.test(o)){d.push(t.createTextNode(o))}else{a=a||c.appendChild(t.createElement("div"));s=(le.exec(o)||["",""])[1].toLowerCase();u=de[s]||de._default;a.innerHTML=u[1]+v.htmlPrefilter(o)+u[2];l=u[0];while(l--){a=a.lastChild}v.merge(d,a.childNodes);a=c.firstChild;a.textContent=""}}}c.textContent="";p=0;while(o=d[p++]){if(r&&v.inArray(o,r)>-1){if(i){i.push(o)}continue}f=v.contains(o.ownerDocument,o);a=pe(c.appendChild(o),"script");if(f){he(a)}if(n){l=0;while(o=a[l++]){if(ce.test(o.type||"")){n.push(o)}}}}return c}(function(){var e=r.createDocumentFragment(),t=e.appendChild(r.createElement("div")),n=r.createElement("input");n.setAttribute("type","radio");n.setAttribute("checked","checked");n.setAttribute("name","t");t.appendChild(n);h.checkClone=t.cloneNode(true).cloneNode(true).lastChild.checked;t.innerHTML="<textarea>x</textarea>";h.noCloneChecked=!!t.cloneNode(true).lastChild.defaultValue})();var ve=r.documentElement;var ye=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,be=/^([^.]*)(?:\.(.+)|)/;function we(){return true}function Te(){return false}function Ce(){try{return r.activeElement}catch(e){}}function ke(e,t,n,r,i,o){var a,s;if(typeof t==="object"){if(typeof n!=="string"){r=r||n;n=undefined}for(s in t){ke(e,s,n,r,t[s],o)}return e}if(r==null&&i==null){i=n;r=n=undefined}else if(i==null){if(typeof n==="string"){i=r;r=undefined}else{i=r;r=n;n=undefined}}if(i===false){i=Te}else if(!i){return e}if(o===1){a=i;i=function(e){v().off(e);return a.apply(this,arguments)};i.guid=a.guid||(a.guid=v.guid++)}return e.each(function(){v.event.add(this,t,i,r,n)})}v.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,f,l,c,d,p,h,m,g=Y.get(e);if(!g){return}if(n.handler){o=n;n=o.handler;i=o.selector}if(i){v.find.matchesSelector(ve,i)}if(!n.guid){n.guid=v.guid++}if(!(u=g.events)){u=g.events={}}if(!(a=g.handle)){a=g.handle=function(t){return typeof v!=="undefined"&&v.event.triggered!==t.type?v.event.dispatch.apply(e,arguments):undefined}}t=(t||"").match(P)||[""];f=t.length;while(f--){s=be.exec(t[f])||[];p=m=s[1];h=(s[2]||"").split(".").sort();if(!p){continue}c=v.event.special[p]||{};p=(i?c.delegateType:c.bindType)||p;c=v.event.special[p]||{};l=v.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&v.expr.match.needsContext.test(i),namespace:h.join(".")},o);if(!(d=u[p])){d=u[p]=[];d.delegateCount=0;if(!c.setup||c.setup.call(e,r,h,a)===false){if(e.addEventListener){e.addEventListener(p,a)}}}if(c.add){c.add.call(e,l);if(!l.handler.guid){l.handler.guid=n.guid}}if(i){d.splice(d.delegateCount++,0,l)}else{d.push(l)}v.event.global[p]=true}},remove:function(e,t,n,r,i){var o,a,s,u,f,l,c,d,p,h,m,g=Y.hasData(e)&&Y.get(e);if(!g||!(u=g.events)){return}t=(t||"").match(P)||[""];f=t.length;while(f--){s=be.exec(t[f])||[];p=m=s[1];h=(s[2]||"").split(".").sort();if(!p){for(p in u){v.event.remove(e,p+t[f],n,r,true)}continue}c=v.event.special[p]||{};p=(r?c.delegateType:c.bindType)||p;d=u[p]||[];s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)");a=o=d.length;while(o--){l=d[o];if((i||m===l.origType)&&(!n||n.guid===l.guid)&&(!s||s.test(l.namespace))&&(!r||r===l.selector||r==="**"&&l.selector)){d.splice(o,1);if(l.selector){d.delegateCount--}if(c.remove){c.remove.call(e,l)}}}if(a&&!d.length){if(!c.teardown||c.teardown.call(e,h,g.handle)===false){v.removeEvent(e,p,g.handle)}delete u[p]}}if(v.isEmptyObject(u)){Y.remove(e,"handle events")}},dispatch:function(e){var t=v.event.fix(e);var n,r,i,o,a,s,u=new Array(arguments.length),f=(Y.get(this,"events")||{})[t.type]||[],l=v.event.special[t.type]||{};u[0]=t;for(n=1;n<arguments.length;n++){u[n]=arguments[n]}t.delegateTarget=this;if(l.preDispatch&&l.preDispatch.call(this,t)===false){return}s=v.event.handlers.call(this,t,f);n=0;while((o=s[n++])&&!t.isPropagationStopped()){t.currentTarget=o.elem;r=0;while((a=o.handlers[r++])&&!t.isImmediatePropagationStopped()){if(!t.rnamespace||t.rnamespace.test(a.namespace)){t.handleObj=a;t.data=a.data;i=((v.event.special[a.origType]||{}).handle||a.handler).apply(o.elem,u);if(i!==undefined){if((t.result=i)===false){t.preventDefault();t.stopPropagation()}}}}}if(l.postDispatch){l.postDispatch.call(this,t)}return t.result},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,f=e.target;if(u&&f.nodeType&&!(e.type==="click"&&e.button>=1)){for(;f!==this;f=f.parentNode||this){if(f.nodeType===1&&!(e.type==="click"&&f.disabled===true)){o=[];a={};for(n=0;n<u;n++){r=t[n];i=r.selector+" ";if(a[i]===undefined){a[i]=r.needsContext?v(i,this).index(f)>-1:v.find(i,this,null,[f]).length}if(a[i]){o.push(r)}}if(o.length){s.push({elem:f,handlers:o})}}}}f=this;if(u<t.length){s.push({elem:f,handlers:t.slice(u)})}return s},addProp:function(e,t){Object.defineProperty(v.Event.prototype,e,{enumerable:true,configurable:true,get:v.isFunction(t)?function(){if(this.originalEvent){return t(this.originalEvent)}}:function(){if(this.originalEvent){return this.originalEvent[e]}},set:function(t){Object.defineProperty(this,e,{enumerable:true,configurable:true,writable:true,value:t})}})},fix:function(e){return e[v.expando]?e:new v.Event(e)},special:{load:{noBubble:true},focus:{trigger:function(){if(this!==Ce()&&this.focus){this.focus();return false}},delegateType:"focusin"},blur:{trigger:function(){if(this===Ce()&&this.blur){this.blur();return false}},delegateType:"focusout"},click:{trigger:function(){if(this.type==="checkbox"&&this.click&&E(this,"input")){this.click();return false}},_default:function(e){return E(e.target,"a")}},beforeunload:{postDispatch:function(e){if(e.result!==undefined&&e.originalEvent){e.originalEvent.returnValue=e.result}}}}};v.removeEvent=function(e,t,n){if(e.removeEventListener){e.removeEventListener(t,n)}};v.Event=function(e,t){if(!(this instanceof v.Event)){return new v.Event(e,t)}if(e&&e.type){this.originalEvent=e;this.type=e.type;this.isDefaultPrevented=e.defaultPrevented||e.defaultPrevented===undefined&&e.returnValue===false?we:Te;this.target=e.target&&e.target.nodeType===3?e.target.parentNode:e.target;this.currentTarget=e.currentTarget;this.relatedTarget=e.relatedTarget}else{this.type=e}if(t){v.extend(this,t)}this.timeStamp=e&&e.timeStamp||v.now();this[v.expando]=true};v.Event.prototype={constructor:v.Event,isDefaultPrevented:Te,isPropagationStopped:Te,isImmediatePropagationStopped:Te,isSimulated:false,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=we;if(e&&!this.isSimulated){e.preventDefault()}},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=we;if(e&&!this.isSimulated){e.stopPropagation()}},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=we;if(e&&!this.isSimulated){e.stopImmediatePropagation()}this.stopPropagation()}};v.each({altKey:true,bubbles:true,cancelable:true,changedTouches:true,ctrlKey:true,detail:true,eventPhase:true,metaKey:true,pageX:true,pageY:true,shiftKey:true,view:true,char:true,charCode:true,key:true,keyCode:true,button:true,buttons:true,clientX:true,clientY:true,offsetX:true,offsetY:true,pointerId:true,pointerType:true,screenX:true,screenY:true,targetTouches:true,toElement:true,touches:true,which:function(e){var t=e.button;if(e.which==null&&ye.test(e.type)){return e.charCode!=null?e.charCode:e.keyCode}if(!e.which&&t!==undefined&&xe.test(e.type)){if(t&1){return 1}if(t&2){return 3}if(t&4){return 2}return 0}return e.which}},v.event.addProp);v.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){v.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;if(!i||i!==r&&!v.contains(r,i)){e.type=o.origType;n=o.handler.apply(this,arguments);e.type=t}return n}}});v.fn.extend({on:function(e,t,n,r){return ke(this,e,t,n,r)},one:function(e,t,n,r){return ke(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj){r=e.handleObj;v(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler);return this}if(typeof e==="object"){for(i in e){this.off(i,t,e[i])}return this}if(t===false||typeof t==="function"){n=t;t=undefined}if(n===false){n=Te}return this.each(function(){v.event.remove(this,e,n,t)})}});var Se=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,je=/<script|<style|<link/i,Ee=/checked\s*(?:[^=]|=\s*.checked.)/i,De=/^true\/(.*)/,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ne(e,t){if(E(e,"table")&&E(t.nodeType!==11?t:t.firstChild,"tr")){return v(">tbody",e)[0]||e}return e}function Le(e){e.type=(e.getAttribute("type")!==null)+"/"+e.type;return e}function qe(e){var t=De.exec(e.type);if(t){e.type=t[1]}else{e.removeAttribute("type")}return e}function Fe(e,t){var n,r,i,o,a,s,u,f;if(t.nodeType!==1){return}if(Y.hasData(e)){o=Y.access(e);a=Y.set(t,o);f=o.events;if(f){delete a.handle;a.events={};for(i in f){for(n=0,r=f[i].length;n<r;n++){v.event.add(t,i,f[i][n])}}}}if(G.hasData(e)){s=G.access(e);u=v.extend({},s);G.set(t,u)}}function Oe(e,t){var n=t.nodeName.toLowerCase();if(n==="input"&&fe.test(e.type)){t.checked=e.checked}else if(n==="input"||n==="textarea"){t.defaultValue=e.defaultValue}}function He(e,t,n,r){t=a.apply([],t);var i,o,s,u,f,l,c=0,d=e.length,p=d-1,g=t[0],y=v.isFunction(g);if(y||d>1&&typeof g==="string"&&!h.checkClone&&Ee.test(g)){return e.each(function(i){var o=e.eq(i);if(y){t[0]=g.call(this,i,o.html())}He(o,t,n,r)})}if(d){i=ge(t,e[0].ownerDocument,false,e,r);o=i.firstChild;if(i.childNodes.length===1){i=o}if(o||r){s=v.map(pe(i,"script"),Le);u=s.length;for(;c<d;c++){f=i;if(c!==p){f=v.clone(f,true,true);if(u){v.merge(s,pe(f,"script"))}}n.call(e[c],f,c)}if(u){l=s[s.length-1].ownerDocument;v.map(s,qe);for(c=0;c<u;c++){f=s[c];if(ce.test(f.type||"")&&!Y.access(f,"globalEval")&&v.contains(l,f)){if(f.src){if(v._evalUrl){v._evalUrl(f.src)}}else{m(f.textContent.replace(Ae,""),l)}}}}}}return e}function Me(e,t,n){var r,i=t?v.filter(t,e):e,o=0;for(;(r=i[o])!=null;o++){if(!n&&r.nodeType===1){v.cleanData(pe(r))}if(r.parentNode){if(n&&v.contains(r.ownerDocument,r)){he(pe(r,"script"))}r.parentNode.removeChild(r)}}return e}v.extend({htmlPrefilter:function(e){return e.replace(Se,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(true),u=v.contains(e.ownerDocument,e);if(!h.noCloneChecked&&(e.nodeType===1||e.nodeType===11)&&!v.isXMLDoc(e)){a=pe(s);o=pe(e);for(r=0,i=o.length;r<i;r++){Oe(o[r],a[r])}}if(t){if(n){o=o||pe(e);a=a||pe(s);for(r=0,i=o.length;r<i;r++){Fe(o[r],a[r])}}else{Fe(e,s)}}a=pe(s,"script");if(a.length>0){he(a,!u&&pe(e,"script"))}return s},cleanData:function(e){var t,n,r,i=v.event.special,o=0;for(;(n=e[o])!==undefined;o++){if(U(n)){if(t=n[Y.expando]){if(t.events){for(r in t.events){if(i[r]){v.event.remove(n,r)}else{v.removeEvent(n,r,t.handle)}}}n[Y.expando]=undefined}if(n[G.expando]){n[G.expando]=undefined}}}}});v.fn.extend({detach:function(e){return Me(this,e,true)},remove:function(e){return Me(this,e)},text:function(e){return z(this,function(e){return e===undefined?v.text(this):this.empty().each(function(){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){this.textContent=e}})},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Ne(this,e);t.appendChild(e)}})},prepend:function(){return He(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Ne(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return He(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this)}})},after:function(){return He(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this.nextSibling)}})},empty:function(){var e,t=0;for(;(e=this[t])!=null;t++){if(e.nodeType===1){v.cleanData(pe(e,false));e.textContent=""}}return this},clone:function(e,t){e=e==null?false:e;t=t==null?e:t;return this.map(function(){return v.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,r=this.length;if(e===undefined&&t.nodeType===1){return t.innerHTML}if(typeof e==="string"&&!je.test(e)&&!de[(le.exec(e)||["",""])[1].toLowerCase()]){e=v.htmlPrefilter(e);try{for(;n<r;n++){t=this[n]||{};if(t.nodeType===1){v.cleanData(pe(t,false));t.innerHTML=e}}t=0}catch(e){}}if(t){this.empty().append(e)}},null,e,arguments.length)},replaceWith:function(){var e=[];return He(this,arguments,function(t){var n=this.parentNode;if(v.inArray(this,e)<0){v.cleanData(pe(this));if(n){n.replaceChild(t,this)}}},e)}});v.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){v.fn[e]=function(e){var n,r=[],i=v(e),o=i.length-1,a=0;for(;a<=o;a++){n=a===o?this:this.clone(true);v(i[a])[t](n);s.apply(r,n.get())}return this.pushStack(r)}});var Pe=/^margin/;var Re=new RegExp("^("+ee+")(?!px)[a-z%]+$","i");var Ie=function(t){var n=t.ownerDocument.defaultView;if(!n||!n.opener){n=e}return n.getComputedStyle(t)};(function(){function t(){if(!u){return}u.style.cssText="box-sizing:border-box;"+"position:relative;display:block;"+"margin:auto;border:1px;padding:1px;"+"top:1%;width:50%";u.innerHTML="";ve.appendChild(s);var t=e.getComputedStyle(u);n=t.top!=="1%";a=t.marginLeft==="2px";i=t.width==="4px";u.style.marginRight="50%";o=t.marginRight==="4px";ve.removeChild(s);u=null}var n,i,o,a,s=r.createElement("div"),u=r.createElement("div");if(!u.style){return}u.style.backgroundClip="content-box";u.cloneNode(true).style.backgroundClip="";h.clearCloneStyle=u.style.backgroundClip==="content-box";s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;"+"padding:0;margin-top:1px;position:absolute";s.appendChild(u);v.extend(h,{pixelPosition:function(){t();return n},boxSizingReliable:function(){t();return i},pixelMarginRight:function(){t();return o},reliableMarginLeft:function(){t();return a}})})();function We(e,t,n){var r,i,o,a,s=e.style;n=n||Ie(e);if(n){a=n.getPropertyValue(t)||n[t];if(a===""&&!v.contains(e.ownerDocument,e)){a=v.style(e,t)}if(!h.pixelMarginRight()&&Re.test(a)&&Pe.test(t)){r=s.width;i=s.minWidth;o=s.maxWidth;s.minWidth=s.maxWidth=s.width=a;a=n.width;s.width=r;s.minWidth=i;s.maxWidth=o}}return a!==undefined?a+"":a}function Be(e,t){return{get:function(){if(e()){delete this.get;return}return(this.get=t).apply(this,arguments)}}}var $e=/^(none|table(?!-c[ea]).+)/,_e=/^--/,Xe={position:"absolute",visibility:"hidden",display:"block"},ze={letterSpacing:"0",fontWeight:"400"},Ue=["Webkit","Moz","ms"],Ve=r.createElement("div").style;function Ye(e){if(e in Ve){return e}var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;while(n--){e=Ue[n]+t;if(e in Ve){return e}}}function Ge(e){var t=v.cssProps[e];if(!t){t=v.cssProps[e]=Ye(e)||e}return t}function Qe(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Je(e,t,n,r,i){var o,a=0;if(n===(r?"border":"content")){o=4}else{o=t==="width"?1:0}for(;o<4;o+=2){if(n==="margin"){a+=v.css(e,n+ne[o],true,i)}if(r){if(n==="content"){a-=v.css(e,"padding"+ne[o],true,i)}if(n!=="margin"){a-=v.css(e,"border"+ne[o]+"Width",true,i)}}else{a+=v.css(e,"padding"+ne[o],true,i);if(n!=="padding"){a+=v.css(e,"border"+ne[o]+"Width",true,i)}}}return a}function Ke(e,t,n){var r,i=Ie(e),o=We(e,t,i),a=v.css(e,"boxSizing",false,i)==="border-box";if(Re.test(o)){return o}r=a&&(h.boxSizingReliable()||o===e.style[t]);if(o==="auto"){o=e["offset"+t[0].toUpperCase()+t.slice(1)]}o=parseFloat(o)||0;return o+Je(e,t,n||(a?"border":"content"),r,i)+"px"}v.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return n===""?"1":n}}}},cssNumber:{animationIterationCount:true,columnCount:true,fillOpacity:true,flexGrow:true,flexShrink:true,fontWeight:true,lineHeight:true,opacity:true,order:true,orphans:true,widows:true,zIndex:true,zoom:true},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(!e||e.nodeType===3||e.nodeType===8||!e.style){return}var i,o,a,s=v.camelCase(t),u=_e.test(t),f=e.style;if(!u){t=Ge(s)}a=v.cssHooks[t]||v.cssHooks[s];if(n!==undefined){o=typeof n;if(o==="string"&&(i=te.exec(n))&&i[1]){n=oe(e,t,i);o="number"}if(n==null||n!==n){return}if(o==="number"){n+=i&&i[3]||(v.cssNumber[s]?"":"px")}if(!h.clearCloneStyle&&n===""&&t.indexOf("background")===0){f[t]="inherit"}if(!a||!("set"in a)||(n=a.set(e,n,r))!==undefined){if(u){f.setProperty(t,n)}else{f[t]=n}}}else{if(a&&"get"in a&&(i=a.get(e,false,r))!==undefined){return i}return f[t]}},css:function(e,t,n,r){var i,o,a,s=v.camelCase(t),u=_e.test(t);if(!u){t=Ge(s)}a=v.cssHooks[t]||v.cssHooks[s];if(a&&"get"in a){i=a.get(e,true,n)}if(i===undefined){i=We(e,t,r)}if(i==="normal"&&t in ze){i=ze[t]}if(n===""||n){o=parseFloat(i);return n===true||isFinite(o)?o||0:i}return i}});v.each(["height","width"],function(e,t){v.cssHooks[t]={get:function(e,n,r){if(n){return $e.test(v.css(e,"display"))&&(!e.getClientRects().length||!e.getBoundingClientRect().width)?ie(e,Xe,function(){return Ke(e,t,r)}):Ke(e,t,r)}},set:function(e,n,r){var i,o=r&&Ie(e),a=r&&Je(e,t,r,v.css(e,"boxSizing",false,o)==="border-box",o);if(a&&(i=te.exec(n))&&(i[3]||"px")!=="px"){e.style[t]=n;n=v.css(e,t)}return Qe(e,n,a)}}});v.cssHooks.marginLeft=Be(h.reliableMarginLeft,function(e,t){if(t){return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-ie(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}});v.each({margin:"",padding:"",border:"Width"},function(e,t){v.cssHooks[e+t]={expand:function(n){var r=0,i={},o=typeof n==="string"?n.split(" "):[n];for(;r<4;r++){i[e+ne[r]+t]=o[r]||o[r-2]||o[0]}return i}};if(!Pe.test(e)){v.cssHooks[e+t].set=Qe}});v.fn.extend({css:function(e,t){return z(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){r=Ie(e);i=t.length;for(;a<i;a++){o[t[a]]=v.css(e,t[a],false,r)}return o}return n!==undefined?v.style(e,t,n):v.css(e,t)},e,t,arguments.length>1)}});function Ze(e,t,n,r,i){return new Ze.prototype.init(e,t,n,r,i)}v.Tween=Ze;Ze.prototype={constructor:Ze,init:function(e,t,n,r,i,o){this.elem=e;this.prop=n;this.easing=i||v.easing._default;this.options=t;this.start=this.now=this.cur();this.end=r;this.unit=o||(v.cssNumber[n]?"":"px")},cur:function(){var e=Ze.propHooks[this.prop];return e&&e.get?e.get(this):Ze.propHooks._default.get(this)},run:function(e){var t,n=Ze.propHooks[this.prop];if(this.options.duration){this.pos=t=v.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration)}else{this.pos=t=e}this.now=(this.end-this.start)*t+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this)}if(n&&n.set){n.set(this)}else{Ze.propHooks._default.set(this)}return this}};Ze.prototype.init.prototype=Ze.prototype;Ze.propHooks={_default:{get:function(e){var t;if(e.elem.nodeType!==1||e.elem[e.prop]!=null&&e.elem.style[e.prop]==null){return e.elem[e.prop]}t=v.css(e.elem,e.prop,"");return!t||t==="auto"?0:t},set:function(e){if(v.fx.step[e.prop]){v.fx.step[e.prop](e)}else if(e.elem.nodeType===1&&(e.elem.style[v.cssProps[e.prop]]!=null||v.cssHooks[e.prop])){v.style(e.elem,e.prop,e.now+e.unit)}else{e.elem[e.prop]=e.now}}}};Ze.propHooks.scrollTop=Ze.propHooks.scrollLeft={set:function(e){if(e.elem.nodeType&&e.elem.parentNode){e.elem[e.prop]=e.now}}};v.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"};v.fx=Ze.prototype.init;v.fx.step={};var et,tt,nt=/^(?:toggle|show|hide)$/,rt=/queueHooks$/;function it(){if(tt){if(r.hidden===false&&e.requestAnimationFrame){e.requestAnimationFrame(it)}else{e.setTimeout(it,v.fx.interval)}v.fx.tick()}}function ot(){e.setTimeout(function(){et=undefined});return et=v.now()}function at(e,t){var n,r=0,i={height:e};t=t?1:0;for(;r<4;r+=2-t){n=ne[r];i["margin"+n]=i["padding"+n]=e}if(t){i.opacity=i.width=e}return i}function st(e,t,n){var r,i=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),o=0,a=i.length;for(;o<a;o++){if(r=i[o].call(n,t,e)){return r}}}function ut(e,t,n){var r,i,o,a,s,u,f,l,c="width"in t||"height"in t,d=this,p={},h=e.style,m=e.nodeType&&re(e),g=Y.get(e,"fxshow");if(!n.queue){a=v._queueHooks(e,"fx");if(a.unqueued==null){a.unqueued=0;s=a.empty.fire;a.empty.fire=function(){if(!a.unqueued){s()}}}a.unqueued++;d.always(function(){d.always(function(){a.unqueued--;if(!v.queue(e,"fx").length){a.empty.fire()}})})}for(r in t){i=t[r];if(nt.test(i)){delete t[r];o=o||i==="toggle";if(i===(m?"hide":"show")){if(i==="show"&&g&&g[r]!==undefined){m=true}else{continue}}p[r]=g&&g[r]||v.style(e,r)}}u=!v.isEmptyObject(t);if(!u&&v.isEmptyObject(p)){return}if(c&&e.nodeType===1){n.overflow=[h.overflow,h.overflowX,h.overflowY];f=g&&g.display;if(f==null){f=Y.get(e,"display")}l=v.css(e,"display");if(l==="none"){if(f){l=f}else{ue([e],true);f=e.style.display||f;l=v.css(e,"display");ue([e])}}if(l==="inline"||l==="inline-block"&&f!=null){if(v.css(e,"float")==="none"){if(!u){d.done(function(){h.display=f});if(f==null){l=h.display;f=l==="none"?"":l}}h.display="inline-block"}}}if(n.overflow){h.overflow="hidden";d.always(function(){h.overflow=n.overflow[0];h.overflowX=n.overflow[1];h.overflowY=n.overflow[2]})}u=false;for(r in p){if(!u){if(g){if("hidden"in g){m=g.hidden}}else{g=Y.access(e,"fxshow",{display:f})}if(o){g.hidden=!m}if(m){ue([e],true)}d.done(function(){if(!m){ue([e])}Y.remove(e,"fxshow");for(r in p){v.style(e,r,p[r])}})}u=st(m?g[r]:0,r,d);if(!(r in g)){g[r]=u.start;if(m){u.end=u.start;u.start=0}}}}function ft(e,t){var n,r,i,o,a;for(n in e){r=v.camelCase(n);i=t[r];o=e[n];if(Array.isArray(o)){i=o[1];o=e[n]=o[0]}if(n!==r){e[r]=o;delete e[n]}a=v.cssHooks[r];if(a&&"expand"in a){o=a.expand(o);delete e[r];for(n in o){if(!(n in e)){e[n]=o[n];t[n]=i}}}else{t[r]=i}}}function lt(e,t,n){var r,i,o=0,a=lt.prefilters.length,s=v.Deferred().always(function(){delete u.elem}),u=function(){if(i){return false}var t=et||ot(),n=Math.max(0,f.startTime+f.duration-t),r=n/f.duration||0,o=1-r,a=0,u=f.tweens.length;for(;a<u;a++){f.tweens[a].run(o)}s.notifyWith(e,[f,o,n]);if(o<1&&u){return n}if(!u){s.notifyWith(e,[f,1,0])}s.resolveWith(e,[f]);return false},f=s.promise({elem:e,props:v.extend({},t),opts:v.extend(true,{specialEasing:{},easing:v.easing._default},n),originalProperties:t,originalOptions:n,startTime:et||ot(),duration:n.duration,tweens:[],createTween:function(t,n){var r=v.Tween(e,f.opts,t,n,f.opts.specialEasing[t]||f.opts.easing);f.tweens.push(r);return r},stop:function(t){var n=0,r=t?f.tweens.length:0;if(i){return this}i=true;for(;n<r;n++){f.tweens[n].run(1)}if(t){s.notifyWith(e,[f,1,0]);s.resolveWith(e,[f,t])}else{s.rejectWith(e,[f,t])}return this}}),l=f.props;ft(l,f.opts.specialEasing);for(;o<a;o++){r=lt.prefilters[o].call(f,e,l,f.opts);if(r){if(v.isFunction(r.stop)){v._queueHooks(f.elem,f.opts.queue).stop=v.proxy(r.stop,r)}return r}}v.map(l,st,f);if(v.isFunction(f.opts.start)){f.opts.start.call(e,f)}f.progress(f.opts.progress).done(f.opts.done,f.opts.complete).fail(f.opts.fail).always(f.opts.always);v.fx.timer(v.extend(u,{elem:e,anim:f,queue:f.opts.queue}));return f}v.Animation=v.extend(lt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);oe(n.elem,e,te.exec(t),n);return n}]},tweener:function(e,t){if(v.isFunction(e)){t=e;e=["*"]}else{e=e.match(P)}var n,r=0,i=e.length;for(;r<i;r++){n=e[r];lt.tweeners[n]=lt.tweeners[n]||[];lt.tweeners[n].unshift(t)}},prefilters:[ut],prefilter:function(e,t){if(t){lt.prefilters.unshift(e)}else{lt.prefilters.push(e)}}});v.speed=function(e,t,n){var r=e&&typeof e==="object"?v.extend({},e):{complete:n||!n&&t||v.isFunction(e)&&e,duration:e,easing:n&&t||t&&!v.isFunction(t)&&t};if(v.fx.off){r.duration=0}else{if(typeof r.duration!=="number"){if(r.duration in v.fx.speeds){r.duration=v.fx.speeds[r.duration]}else{r.duration=v.fx.speeds._default}}}if(r.queue==null||r.queue===true){r.queue="fx"}r.old=r.complete;r.complete=function(){if(v.isFunction(r.old)){r.old.call(this)}if(r.queue){v.dequeue(this,r.queue)}};return r};v.fn.extend({fadeTo:function(e,t,n,r){return this.filter(re).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=v.isEmptyObject(e),o=v.speed(t,n,r),a=function(){var t=lt(this,v.extend({},e),o);if(i||Y.get(this,"finish")){t.stop(true)}};a.finish=a;return i||o.queue===false?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop;t(n)};if(typeof e!=="string"){n=t;t=e;e=undefined}if(t&&e!==false){this.queue(e||"fx",[])}return this.each(function(){var t=true,i=e!=null&&e+"queueHooks",o=v.timers,a=Y.get(this);if(i){if(a[i]&&a[i].stop){r(a[i])}}else{for(i in a){if(a[i]&&a[i].stop&&rt.test(i)){r(a[i])}}}for(i=o.length;i--;){if(o[i].elem===this&&(e==null||o[i].queue===e)){o[i].anim.stop(n);t=false;o.splice(i,1)}}if(t||!n){v.dequeue(this,e)}})},finish:function(e){if(e!==false){e=e||"fx"}return this.each(function(){var t,n=Y.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=v.timers,a=r?r.length:0;n.finish=true;v.queue(this,e,[]);if(i&&i.stop){i.stop.call(this,true)}for(t=o.length;t--;){if(o[t].elem===this&&o[t].queue===e){o[t].anim.stop(true);o.splice(t,1)}}for(t=0;t<a;t++){if(r[t]&&r[t].finish){r[t].finish.call(this)}}delete n.finish})}});v.each(["toggle","show","hide"],function(e,t){var n=v.fn[t];v.fn[t]=function(e,r,i){return e==null||typeof e==="boolean"?n.apply(this,arguments):this.animate(at(t,true),e,r,i)}});v.each({slideDown:at("show"),slideUp:at("hide"),slideToggle:at("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){v.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}});v.timers=[];v.fx.tick=function(){var e,t=0,n=v.timers;et=v.now();for(;t<n.length;t++){e=n[t];if(!e()&&n[t]===e){n.splice(t--,1)}}if(!n.length){v.fx.stop()}et=undefined};v.fx.timer=function(e){v.timers.push(e);v.fx.start()};v.fx.interval=13;v.fx.start=function(){if(tt){return}tt=true;it()};v.fx.stop=function(){tt=null};v.fx.speeds={slow:600,fast:200,_default:400};v.fn.delay=function(t,n){t=v.fx?v.fx.speeds[t]||t:t;n=n||"fx";return this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})};(function(){var e=r.createElement("input"),t=r.createElement("select"),n=t.appendChild(r.createElement("option"));e.type="checkbox";h.checkOn=e.value!=="";h.optSelected=n.selected;e=r.createElement("input");e.value="t";e.type="radio";h.radioValue=e.value==="t"})();var ct,dt=v.expr.attrHandle;v.fn.extend({attr:function(e,t){return z(this,v.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){v.removeAttr(this,e)})}});v.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(o===3||o===8||o===2){return}if(typeof e.getAttribute==="undefined"){return v.prop(e,t,n)}if(o!==1||!v.isXMLDoc(e)){i=v.attrHooks[t.toLowerCase()]||(v.expr.match.bool.test(t)?ct:undefined)}if(n!==undefined){if(n===null){v.removeAttr(e,t);return}if(i&&"set"in i&&(r=i.set(e,n,t))!==undefined){return r}e.setAttribute(t,n+"");return n}if(i&&"get"in i&&(r=i.get(e,t))!==null){return r}r=v.find.attr(e,t);return r==null?undefined:r},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&t==="radio"&&E(e,"input")){var n=e.value;e.setAttribute("type",t);if(n){e.value=n}return t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(P);if(i&&e.nodeType===1){while(n=i[r++]){e.removeAttribute(n)}}}});ct={set:function(e,t,n){if(t===false){v.removeAttr(e,n)}else{e.setAttribute(n,n)}return n}};v.each(v.expr.match.bool.source.match(/\w+/g),function(e,t){var n=dt[t]||v.find.attr;dt[t]=function(e,t,r){var i,o,a=t.toLowerCase();if(!r){o=dt[a];dt[a]=i;i=n(e,t,r)!=null?a:null;dt[a]=o}return i}});var pt=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;v.fn.extend({prop:function(e,t){return z(this,v.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[v.propFix[e]||e]})}});v.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(o===3||o===8||o===2){return}if(o!==1||!v.isXMLDoc(e)){t=v.propFix[t]||t;i=v.propHooks[t]}if(n!==undefined){if(i&&"set"in i&&(r=i.set(e,n,t))!==undefined){return r}return e[t]=n}if(i&&"get"in i&&(r=i.get(e,t))!==null){return r}return e[t]},propHooks:{tabIndex:{get:function(e){var t=v.find.attr(e,"tabindex");if(t){return parseInt(t,10)}if(pt.test(e.nodeName)||ht.test(e.nodeName)&&e.href){return 0}return-1}}},propFix:{for:"htmlFor",class:"className"}});if(!h.optSelected){v.propHooks.selected={get:function(e){var t=e.parentNode;if(t&&t.parentNode){t.parentNode.selectedIndex}return null},set:function(e){var t=e.parentNode;if(t){t.selectedIndex;if(t.parentNode){t.parentNode.selectedIndex}}}}}v.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){v.propFix[this.toLowerCase()]=this});function mt(e){var t=e.match(P)||[];return t.join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}v.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(v.isFunction(e)){return this.each(function(t){v(this).addClass(e.call(this,t,gt(this)))})}if(typeof e==="string"&&e){t=e.match(P)||[];while(n=this[u++]){i=gt(n);r=n.nodeType===1&&" "+mt(i)+" ";if(r){a=0;while(o=t[a++]){if(r.indexOf(" "+o+" ")<0){r+=o+" "}}s=mt(r);if(i!==s){n.setAttribute("class",s)}}}}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(v.isFunction(e)){return this.each(function(t){v(this).removeClass(e.call(this,t,gt(this)))})}if(!arguments.length){return this.attr("class","")}if(typeof e==="string"&&e){t=e.match(P)||[];while(n=this[u++]){i=gt(n);r=n.nodeType===1&&" "+mt(i)+" ";if(r){a=0;while(o=t[a++]){while(r.indexOf(" "+o+" ")>-1){r=r.replace(" "+o+" "," ")}}s=mt(r);if(i!==s){n.setAttribute("class",s)}}}}return this},toggleClass:function(e,t){var n=typeof e;if(typeof t==="boolean"&&n==="string"){return t?this.addClass(e):this.removeClass(e)}if(v.isFunction(e)){return this.each(function(n){v(this).toggleClass(e.call(this,n,gt(this),t),t)})}return this.each(function(){var t,r,i,o;if(n==="string"){r=0;i=v(this);o=e.match(P)||[];while(t=o[r++]){if(i.hasClass(t)){i.removeClass(t)}else{i.addClass(t)}}}else if(e===undefined||n==="boolean"){t=gt(this);if(t){Y.set(this,"__className__",t)}if(this.setAttribute){this.setAttribute("class",t||e===false?"":Y.get(this,"__className__")||"")}}})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++]){if(n.nodeType===1&&(" "+mt(gt(n))+" ").indexOf(t)>-1){return true}}return false}});var vt=/\r/g;v.fn.extend({val:function(e){var t,n,r,i=this[0];if(!arguments.length){if(i){t=v.valHooks[i.type]||v.valHooks[i.nodeName.toLowerCase()];if(t&&"get"in t&&(n=t.get(i,"value"))!==undefined){return n}n=i.value;if(typeof n==="string"){return n.replace(vt,"")}return n==null?"":n}return}r=v.isFunction(e);return this.each(function(n){var i;if(this.nodeType!==1){return}if(r){i=e.call(this,n,v(this).val())}else{i=e}if(i==null){i=""}else if(typeof i==="number"){i+=""}else if(Array.isArray(i)){i=v.map(i,function(e){return e==null?"":e+""})}t=v.valHooks[this.type]||v.valHooks[this.nodeName.toLowerCase()];if(!t||!("set"in t)||t.set(this,i,"value")===undefined){this.value=i}})}});v.extend({valHooks:{option:{get:function(e){var t=v.find.attr(e,"value");return t!=null?t:mt(v.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a=e.type==="select-one",s=a?null:[],u=a?o+1:i.length;if(o<0){r=u}else{r=a?o:0}for(;r<u;r++){n=i[r];if((n.selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!E(n.parentNode,"optgroup"))){t=v(n).val();if(a){return t}s.push(t)}}return s},set:function(e,t){var n,r,i=e.options,o=v.makeArray(t),a=i.length;while(a--){r=i[a];if(r.selected=v.inArray(v.valHooks.option.get(r),o)>-1){n=true}}if(!n){e.selectedIndex=-1}return o}}}});v.each(["radio","checkbox"],function(){v.valHooks[this]={set:function(e,t){if(Array.isArray(t)){return e.checked=v.inArray(v(e).val(),t)>-1}}};if(!h.checkOn){v.valHooks[this].get=function(e){return e.getAttribute("value")===null?"on":e.value}}});var yt=/^(?:focusinfocus|focusoutblur)$/;v.extend(v.event,{trigger:function(t,n,i,o){var a,s,u,f,l,d,p,h=[i||r],m=c.call(t,"type")?t.type:t,g=c.call(t,"namespace")?t.namespace.split("."):[];s=u=i=i||r;if(i.nodeType===3||i.nodeType===8){return}if(yt.test(m+v.event.triggered)){return}if(m.indexOf(".")>-1){g=m.split(".");m=g.shift();g.sort()}l=m.indexOf(":")<0&&"on"+m;t=t[v.expando]?t:new v.Event(m,typeof t==="object"&&t);t.isTrigger=o?2:3;t.namespace=g.join(".");t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;t.result=undefined;if(!t.target){t.target=i}n=n==null?[t]:v.makeArray(n,[t]);p=v.event.special[m]||{};if(!o&&p.trigger&&p.trigger.apply(i,n)===false){return}if(!o&&!p.noBubble&&!v.isWindow(i)){f=p.delegateType||m;if(!yt.test(f+m)){s=s.parentNode}for(;s;s=s.parentNode){h.push(s);u=s}if(u===(i.ownerDocument||r)){h.push(u.defaultView||u.parentWindow||e)}}a=0;while((s=h[a++])&&!t.isPropagationStopped()){t.type=a>1?f:p.bindType||m;d=(Y.get(s,"events")||{})[t.type]&&Y.get(s,"handle");if(d){d.apply(s,n)}d=l&&s[l];if(d&&d.apply&&U(s)){t.result=d.apply(s,n);if(t.result===false){t.preventDefault()}}}t.type=m;if(!o&&!t.isDefaultPrevented()){if((!p._default||p._default.apply(h.pop(),n)===false)&&U(i)){if(l&&v.isFunction(i[m])&&!v.isWindow(i)){u=i[l];if(u){i[l]=null}v.event.triggered=m;i[m]();v.event.triggered=undefined;if(u){i[l]=u}}}}return t.result},simulate:function(e,t,n){var r=v.extend(new v.Event,n,{type:e,isSimulated:true});v.event.trigger(r,null,t)}});v.fn.extend({trigger:function(e,t){return this.each(function(){v.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n){return v.event.trigger(e,t,n,true)}}});v.each(("blur focus focusin focusout resize scroll click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select submit keydown keypress keyup contextmenu").split(" "),function(e,t){v.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}});v.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});h.focusin="onfocusin"in e;if(!h.focusin){v.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){v.event.simulate(t,e.target,v.event.fix(e))};v.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Y.access(r,t);if(!i){r.addEventListener(e,n,true)}Y.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Y.access(r,t)-1;if(!i){r.removeEventListener(e,n,true);Y.remove(r,t)}else{Y.access(r,t,i)}}}})}var xt=e.location;var bt=v.now();var wt=/\?/;v.parseXML=function(t){var n;if(!t||typeof t!=="string"){return null}try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=undefined}if(!n||n.getElementsByTagName("parsererror").length){v.error("Invalid XML: "+t)}return n};var Tt=/\[\]$/,Ct=/\r?\n/g,kt=/^(?:submit|button|image|reset|file)$/i,St=/^(?:input|select|textarea|keygen)/i;function jt(e,t,n,r){var i;if(Array.isArray(t)){v.each(t,function(t,i){if(n||Tt.test(e)){r(e,i)}else{jt(e+"["+(typeof i==="object"&&i!=null?t:"")+"]",i,n,r)}})}else if(!n&&v.type(t)==="object"){for(i in t){jt(e+"["+i+"]",t[i],n,r)}}else{r(e,t)}}v.param=function(e,t){var n,r=[],i=function(e,t){var n=v.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(n==null?"":n)};if(Array.isArray(e)||e.jquery&&!v.isPlainObject(e)){v.each(e,function(){i(this.name,this.value)})}else{for(n in e){jt(n,e[n],t,i)}}return r.join("&")};v.fn.extend({serialize:function(){return v.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=v.prop(this,"elements");return e?v.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!v(this).is(":disabled")&&St.test(this.nodeName)&&!kt.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=v(this).val();if(n==null){return null}if(Array.isArray(n)){return v.map(n,function(e){return{name:t.name,value:e.replace(Ct,"\r\n")}})}return{name:t.name,value:n.replace(Ct,"\r\n")}}).get()}});var Et=/%20/g,Dt=/#.*$/,At=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Lt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,qt=/^(?:GET|HEAD)$/,Ft=/^\/\//,Ot={},Ht={},Mt="*/".concat("*"),Pt=r.createElement("a");Pt.href=xt.href;function Rt(e){return function(t,n){if(typeof t!=="string"){n=t;t="*"}var r,i=0,o=t.toLowerCase().match(P)||[];if(v.isFunction(n)){while(r=o[i++]){if(r[0]==="+"){r=r.slice(1)||"*";(e[r]=e[r]||[]).unshift(n)}else{(e[r]=e[r]||[]).push(n)}}}}}function It(e,t,n,r){var i={},o=e===Ht;function a(s){var u;i[s]=true;v.each(e[s]||[],function(e,s){var f=s(t,n,r);if(typeof f==="string"&&!o&&!i[f]){t.dataTypes.unshift(f);a(f);return false}else if(o){return!(u=f)}});return u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function Wt(e,t){var n,r,i=v.ajaxSettings.flatOptions||{};for(n in t){if(t[n]!==undefined){(i[n]?e:r||(r={}))[n]=t[n]}}if(r){v.extend(true,e,r)}return e}function Bt(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while(u[0]==="*"){u.shift();if(r===undefined){r=e.mimeType||t.getResponseHeader("Content-Type")}}if(r){for(i in s){if(s[i]&&s[i].test(r)){u.unshift(i);break}}}if(u[0]in n){o=u[0]}else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}if(!a){a=i}}o=o||a}if(o){if(o!==u[0]){u.unshift(o)}return n[o]}}function $t(e,t,n,r){var i,o,a,s,u,f={},l=e.dataTypes.slice();if(l[1]){for(a in e.converters){f[a.toLowerCase()]=e.converters[a]}}o=l.shift();while(o){if(e.responseFields[o]){n[e.responseFields[o]]=t}if(!u&&r&&e.dataFilter){t=e.dataFilter(t,e.dataType)}u=o;o=l.shift();if(o){if(o==="*"){o=u}else if(u!=="*"&&u!==o){a=f[u+" "+o]||f["* "+o];if(!a){for(i in f){s=i.split(" ");if(s[1]===o){a=f[u+" "+s[0]]||f["* "+s[0]];if(a){if(a===true){a=f[i]}else if(f[i]!==true){o=s[0];l.unshift(s[1])}break}}}}if(a!==true){if(a&&e.throws){t=a(t)}else{try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}}}}}return{state:"success",data:t}}v.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xt.href,type:"GET",isLocal:Lt.test(xt.protocol),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Mt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":true,"text json":JSON.parse,"text xml":v.parseXML},flatOptions:{url:true,context:true}},ajaxSetup:function(e,t){return t?Wt(Wt(e,v.ajaxSettings),t):Wt(v.ajaxSettings,e)},ajaxPrefilter:Rt(Ot),ajaxTransport:Rt(Ht),ajax:function(t,n){if(typeof t==="object"){n=t;t=undefined}n=n||{};var i,o,a,s,u,f,l,c,d,p,h=v.ajaxSetup({},n),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?v(m):v.event,y=v.Deferred(),x=v.Callbacks("once memory"),b=h.statusCode||{},w={},T={},C="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s){s={};while(t=Nt.exec(a)){s[t[1].toLowerCase()]=t[2]}}t=s[e.toLowerCase()]}return t==null?null:t},getAllResponseHeaders:function(){return l?a:null},setRequestHeader:function(e,t){if(l==null){e=T[e.toLowerCase()]=T[e.toLowerCase()]||e;w[e]=t}return this},overrideMimeType:function(e){if(l==null){h.mimeType=e}return this},statusCode:function(e){var t;if(e){if(l){k.always(e[k.status])}else{for(t in e){b[t]=[b[t],e[t]]}}}return this},abort:function(e){var t=e||C;if(i){i.abort(t)}S(0,t);return this}};y.promise(k);h.url=((t||h.url||xt.href)+"").replace(Ft,xt.protocol+"//");h.type=n.method||n.type||h.method||h.type;h.dataTypes=(h.dataType||"*").toLowerCase().match(P)||[""];if(h.crossDomain==null){f=r.createElement("a");try{f.href=h.url;f.href=f.href;h.crossDomain=Pt.protocol+"//"+Pt.host!==f.protocol+"//"+f.host}catch(e){h.crossDomain=true}}if(h.data&&h.processData&&typeof h.data!=="string"){h.data=v.param(h.data,h.traditional)}It(Ot,h,n,k);if(l){return k}c=v.event&&h.global;if(c&&v.active++===0){v.event.trigger("ajaxStart")}h.type=h.type.toUpperCase();h.hasContent=!qt.test(h.type);o=h.url.replace(Dt,"");if(!h.hasContent){p=h.url.slice(o.length);if(h.data){o+=(wt.test(o)?"&":"?")+h.data;delete h.data}if(h.cache===false){o=o.replace(At,"$1");p=(wt.test(o)?"&":"?")+"_="+bt+++p}h.url=o+p}else if(h.data&&h.processData&&(h.contentType||"").indexOf("application/x-www-form-urlencoded")===0){h.data=h.data.replace(Et,"+")}if(h.ifModified){if(v.lastModified[o]){k.setRequestHeader("If-Modified-Since",v.lastModified[o])}if(v.etag[o]){k.setRequestHeader("If-None-Match",v.etag[o])}}if(h.data&&h.hasContent&&h.contentType!==false||n.contentType){k.setRequestHeader("Content-Type",h.contentType)}k.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+(h.dataTypes[0]!=="*"?", "+Mt+"; q=0.01":""):h.accepts["*"]);for(d in h.headers){k.setRequestHeader(d,h.headers[d])}if(h.beforeSend&&(h.beforeSend.call(m,k,h)===false||l)){return k.abort()}C="abort";x.add(h.complete);k.done(h.success);k.fail(h.error);i=It(Ht,h,n,k);if(!i){S(-1,"No Transport")}else{k.readyState=1;if(c){g.trigger("ajaxSend",[k,h])}if(l){return k}if(h.async&&h.timeout>0){u=e.setTimeout(function(){k.abort("timeout")},h.timeout)}try{l=false;i.send(w,S)}catch(e){if(l){throw e}S(-1,e)}}function S(t,n,r,s){var f,d,p,w,T,C=n;if(l){return}l=true;if(u){e.clearTimeout(u)}i=undefined;a=s||"";k.readyState=t>0?4:0;f=t>=200&&t<300||t===304;if(r){w=Bt(h,k,r)}w=$t(h,w,k,f);if(f){if(h.ifModified){T=k.getResponseHeader("Last-Modified");if(T){v.lastModified[o]=T}T=k.getResponseHeader("etag");if(T){v.etag[o]=T}}if(t===204||h.type==="HEAD"){C="nocontent"}else if(t===304){C="notmodified"}else{C=w.state;d=w.data;p=w.error;f=!p}}else{p=C;if(t||!C){C="error";if(t<0){t=0}}}k.status=t;k.statusText=(n||C)+"";if(f){y.resolveWith(m,[d,C,k])}else{y.rejectWith(m,[k,C,p])}k.statusCode(b);b=undefined;if(c){g.trigger(f?"ajaxSuccess":"ajaxError",[k,h,f?d:p])}x.fireWith(m,[k,C]);if(c){g.trigger("ajaxComplete",[k,h]);if(!--v.active){v.event.trigger("ajaxStop")}}}return k},getJSON:function(e,t,n){return v.get(e,t,n,"json")},getScript:function(e,t){return v.get(e,undefined,t,"script")}});v.each(["get","post"],function(e,t){v[t]=function(e,n,r,i){if(v.isFunction(n)){i=i||r;r=n;n=undefined}return v.ajax(v.extend({url:e,type:t,dataType:i,data:n,success:r},v.isPlainObject(e)&&e))}});v._evalUrl=function(e){return v.ajax({url:e,type:"GET",dataType:"script",cache:true,async:false,global:false,throws:true})};v.fn.extend({wrapAll:function(e){var t;if(this[0]){if(v.isFunction(e)){e=e.call(this[0])}t=v(e,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){t.insertBefore(this[0])}t.map(function(){var e=this;while(e.firstElementChild){e=e.firstElementChild}return e}).append(this)}return this},wrapInner:function(e){if(v.isFunction(e)){return this.each(function(t){v(this).wrapInner(e.call(this,t))})}return this.each(function(){var t=v(this),n=t.contents();if(n.length){n.wrapAll(e)}else{t.append(e)}})},wrap:function(e){var t=v.isFunction(e);return this.each(function(n){v(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){this.parent(e).not("body").each(function(){v(this).replaceWith(this.childNodes)});return this}});v.expr.pseudos.hidden=function(e){return!v.expr.pseudos.visible(e)};v.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)};v.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var _t={0:200,1223:204},Xt=v.ajaxSettings.xhr();h.cors=!!Xt&&"withCredentials"in Xt;h.ajax=Xt=!!Xt;v.ajaxTransport(function(t){var n,r;if(h.cors||Xt&&!t.crossDomain){return{send:function(i,o){var a,s=t.xhr();s.open(t.type,t.url,t.async,t.username,t.password);if(t.xhrFields){for(a in t.xhrFields){s[a]=t.xhrFields[a]}}if(t.mimeType&&s.overrideMimeType){s.overrideMimeType(t.mimeType)}if(!t.crossDomain&&!i["X-Requested-With"]){i["X-Requested-With"]="XMLHttpRequest"}for(a in i){s.setRequestHeader(a,i[a])}n=function(e){return function(){if(n){n=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null;if(e==="abort"){s.abort()}else if(e==="error"){if(typeof s.status!=="number"){o(0,"error")}else{o(s.status,s.statusText)}}else{o(_t[s.status]||s.status,s.statusText,(s.responseType||"text")!=="text"||typeof s.responseText!=="string"?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders())}}}};s.onload=n();r=s.onerror=n("error");if(s.onabort!==undefined){s.onabort=r}else{s.onreadystatechange=function(){if(s.readyState===4){e.setTimeout(function(){if(n){r()}})}}}n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n){throw e}}},abort:function(){if(n){n()}}}}});v.ajaxPrefilter(function(e){if(e.crossDomain){e.contents.script=false}});v.ajaxSetup({accepts:{script:"text/javascript, application/javascript, "+"application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){v.globalEval(e);return e}}});v.ajaxPrefilter("script",function(e){if(e.cache===undefined){e.cache=false}if(e.crossDomain){e.type="GET"}});v.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,o){t=v("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove();n=null;if(e){o(e.type==="error"?404:200,e.type)}});r.head.appendChild(t[0])},abort:function(){if(n){n()}}}}});var zt=[],Ut=/(=)\?(?=&|$)|\?\?/;v.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=zt.pop()||v.expando+"_"+bt++;this[e]=true;return e}});v.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=t.jsonp!==false&&(Ut.test(t.url)?"url":typeof t.data==="string"&&(t.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&Ut.test(t.data)&&"data");if(s||t.dataTypes[0]==="jsonp"){i=t.jsonpCallback=v.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback;if(s){t[s]=t[s].replace(Ut,"$1"+i)}else if(t.jsonp!==false){t.url+=(wt.test(t.url)?"&":"?")+t.jsonp+"="+i}t.converters["script json"]=function(){if(!a){v.error(i+" was not called")}return a[0]};t.dataTypes[0]="json";o=e[i];e[i]=function(){a=arguments};r.always(function(){if(o===undefined){v(e).removeProp(i)}else{e[i]=o}if(t[i]){t.jsonpCallback=n.jsonpCallback;zt.push(i)}if(a&&v.isFunction(o)){o(a[0])}a=o=undefined});return"script"}});h.createHTMLDocument=function(){var e=r.implementation.createHTMLDocument("").body;e.innerHTML="<form></form><form></form>";return e.childNodes.length===2}();v.parseHTML=function(e,t,n){if(typeof e!=="string"){return[]}if(typeof t==="boolean"){n=t;t=false}var i,o,a;if(!t){if(h.createHTMLDocument){t=r.implementation.createHTMLDocument("");i=t.createElement("base");i.href=r.location.href;t.head.appendChild(i)}else{t=r}}o=D.exec(e);a=!n&&[];if(o){return[t.createElement(o[1])]}o=ge([e],t,a);if(a&&a.length){v(a).remove()}return v.merge([],o.childNodes)};v.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");if(s>-1){r=mt(e.slice(s));e=e.slice(0,s)}if(v.isFunction(t)){n=t;t=undefined}else if(t&&typeof t==="object"){i="POST"}if(a.length>0){v.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments;a.html(r?v("<div>").append(v.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})})}return this};v.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){v.fn[t]=function(e){return this.on(t,e)}});v.expr.pseudos.animated=function(e){return v.grep(v.timers,function(t){return e===t.elem}).length};v.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,f,l=v.css(e,"position"),c=v(e),d={};if(l==="static"){e.style.position="relative"}s=c.offset();o=v.css(e,"top");u=v.css(e,"left");f=(l==="absolute"||l==="fixed")&&(o+u).indexOf("auto")>-1;if(f){r=c.position();a=r.top;i=r.left}else{a=parseFloat(o)||0;i=parseFloat(u)||0}if(v.isFunction(t)){t=t.call(e,n,v.extend({},s))}if(t.top!=null){d.top=t.top-s.top+a}if(t.left!=null){d.left=t.left-s.left+i}if("using"in t){t.using.call(e,d)}else{c.css(d)}}};v.fn.extend({offset:function(e){if(arguments.length){return e===undefined?this:this.each(function(t){v.offset.setOffset(this,e,t)})}var t,n,r,i,o=this[0];if(!o){return}if(!o.getClientRects().length){return{top:0,left:0}}r=o.getBoundingClientRect();t=o.ownerDocument;n=t.documentElement;i=t.defaultView;return{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}},position:function(){if(!this[0]){return}var e,t,n=this[0],r={top:0,left:0};if(v.css(n,"position")==="fixed"){t=n.getBoundingClientRect()}else{e=this.offsetParent();t=this.offset();if(!E(e[0],"html")){r=e.offset()}r={top:r.top+v.css(e[0],"borderTopWidth",true),left:r.left+v.css(e[0],"borderLeftWidth",true)}}return{top:t.top-r.top-v.css(n,"marginTop",true),left:t.left-r.left-v.css(n,"marginLeft",true)}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&v.css(e,"position")==="static"){e=e.offsetParent}return e||ve})}});v.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;v.fn[e]=function(r){return z(this,function(e,r,i){var o;if(v.isWindow(e)){o=e}else if(e.nodeType===9){o=e.defaultView}if(i===undefined){return o?o[t]:e[r]}if(o){o.scrollTo(!n?i:o.pageXOffset,n?i:o.pageYOffset)}else{e[r]=i}},e,r,arguments.length)}});v.each(["top","left"],function(e,t){v.cssHooks[t]=Be(h.pixelPosition,function(e,n){if(n){n=We(e,t);return Re.test(n)?v(e).position()[t]+"px":n}})});v.each({Height:"height",Width:"width"},function(e,t){v.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){v.fn[r]=function(i,o){var a=arguments.length&&(n||typeof i!=="boolean"),s=n||(i===true||o===true?"margin":"border");return z(this,function(t,n,i){var o;if(v.isWindow(t)){return r.indexOf("outer")===0?t["inner"+e]:t.document.documentElement["client"+e]}if(t.nodeType===9){o=t.documentElement;return Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])}return i===undefined?v.css(t,n,s):v.style(t,n,i,s)},t,a?i:undefined,a)}})});v.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return arguments.length===1?this.off(e,"**"):this.off(t,e||"**",n)}});v.holdReady=function(e){if(e){v.readyWait++}else{v.ready(true)}};v.isArray=Array.isArray;v.parseJSON=JSON.parse;v.nodeName=E;if(typeof define==="function"&&define.amd){define("jquery",[],function(){return v})}var Vt=e.jQuery,Yt=e.$;v.noConflict=function(t){if(e.$===v){e.$=Yt}if(t&&e.jQuery===v){e.jQuery=Vt}return v};if(!t){e.jQuery=e.$=v}return v});(function(e){if(typeof define==="function"&&define.amd){define(["jquery"],e)}else if(typeof module==="object"&&module.exports){module.exports=function(t,n){if(typeof n==="undefined"){if(typeof window!=="undefined"){n=require("jquery")}else{n=require("jquery")(t)}}e(n);return n}}else{e(jQuery)}})(function(e){"use strict";var t=/\r?\n/g;var n={};n.fileapi=e('<input type="file">').get(0).files!==undefined;n.formdata=typeof window.FormData!=="undefined";var r=!!e.fn.prop;e.fn.attr2=function(){if(!r){return this.attr.apply(this,arguments)}var e=this.prop.apply(this,arguments);if(e&&e.jquery||typeof e==="string"){return e}return this.attr.apply(this,arguments)};e.fn.ajaxSubmit=function(t,i,o,s){if(!this.length){a("ajaxSubmit: skipping submit process - no element selected");return this}var u,f,l,c=this;if(typeof t==="function"){t={success:t}}else if(typeof t==="string"||t===false&&arguments.length>0){t={url:t,data:i,dataType:o};if(typeof s==="function"){t.success=s}}else if(typeof t==="undefined"){t={}}u=t.method||t.type||this.attr2("method");f=t.url||this.attr2("action");l=typeof f==="string"?e.trim(f):"";l=l||window.location.href||"";if(l){l=(l.match(/^([^#]+)/)||[])[1]}t=e.extend(true,{url:l,success:e.ajaxSettings.success,type:u||e.ajaxSettings.type,iframeSrc:/^https/i.test(window.location.href||"")?"javascript:false":"about:blank"},t);var d={};this.trigger("form-pre-serialize",[this,t,d]);if(d.veto){a("ajaxSubmit: submit vetoed via form-pre-serialize trigger");return this}if(t.beforeSerialize&&t.beforeSerialize(this,t)===false){a("ajaxSubmit: submit aborted via beforeSerialize callback");return this}var p=t.traditional;if(typeof p==="undefined"){p=e.ajaxSettings.traditional}var h=[];var m,g=this.formToArray(t.semantic,h,t.filtering);if(t.data){var v=e.isFunction(t.data)?t.data(g):t.data;t.extraData=v;m=e.param(v,p)}if(t.beforeSubmit&&t.beforeSubmit(g,this,t)===false){a("ajaxSubmit: submit aborted via beforeSubmit callback");return this}this.trigger("form-submit-validate",[g,this,t,d]);if(d.veto){a("ajaxSubmit: submit vetoed via form-submit-validate trigger");return this}var y=e.param(g,p);if(m){y=y?y+"&"+m:m}if(t.type.toUpperCase()==="GET"){t.url+=(t.url.indexOf("?")>=0?"&":"?")+y;t.data=null}else{t.data=y}var x=[];if(t.resetForm){x.push(function(){c.resetForm()})}if(t.clearForm){x.push(function(){c.clearForm(t.includeHidden)})}if(!t.dataType&&t.target){var b=t.success||function(){};x.push(function(n,r,i){var o=arguments,a=t.replaceTarget?"replaceWith":"html";e(t.target)[a](n).each(function(){b.apply(this,o)})})}else if(t.success){if(e.isArray(t.success)){e.merge(x,t.success)}else{x.push(t.success)}}t.success=function(e,n,r){var i=t.context||this;for(var o=0,a=x.length;o<a;o++){x[o].apply(i,[e,n,r||c,c])}};if(t.error){var w=t.error;t.error=function(e,n,r){var i=t.context||this;w.apply(i,[e,n,r,c])}}if(t.complete){var T=t.complete;t.complete=function(e,n){var r=t.context||this;T.apply(r,[e,n,c])}}var C=e("input[type=file]:enabled",this).filter(function(){return e(this).val()!==""});var k=C.length>0;var S="multipart/form-data";var j=c.attr("enctype")===S||c.attr("encoding")===S;var E=n.fileapi&&n.formdata;a("fileAPI :"+E);var D=(k||j)&&!E;var A;if(t.iframe!==false&&(t.iframe||D)){if(t.closeKeepAlive){e.get(t.closeKeepAlive,function(){A=F(g)})}else{A=F(g)}}else if((k||j)&&E){A=q(g)}else{A=e.ajax(t)}c.removeData("jqxhr").data("jqxhr",A);for(var N=0;N<h.length;N++){h[N]=null}this.trigger("form-submit-notify",[this,t]);return this;function L(n){var r=e.param(n,t.traditional).split("&");var i=r.length;var o=[];var a,s;for(a=0;a<i;a++){r[a]=r[a].replace(/\+/g," ");s=r[a].split("=");o.push([decodeURIComponent(s[0]),decodeURIComponent(s[1])])}return o}function q(n){var r=new FormData;for(var i=0;i<n.length;i++){r.append(n[i].name,n[i].value)}if(t.extraData){var o=L(t.extraData);for(i=0;i<o.length;i++){if(o[i]){r.append(o[i][0],o[i][1])}}}t.data=null;var a=e.extend(true,{},e.ajaxSettings,t,{contentType:false,processData:false,cache:false,type:u||"POST"});if(t.uploadProgress){a.xhr=function(){var n=e.ajaxSettings.xhr();if(n.upload){n.upload.addEventListener("progress",function(e){var n=0;var r=e.loaded||e.position;var i=e.total;if(e.lengthComputable){n=Math.ceil(r/i*100)}t.uploadProgress(e,r,i,n)},false)}return n}}a.data=null;var s=a.beforeSend;a.beforeSend=function(e,n){if(t.formData){n.data=t.formData}else{n.data=r}if(s){s.call(this,e,n)}};return e.ajax(a)}function F(n){var i=c[0],o,s,f,l,d,p,m,g,v,y,x,b;var w=e.Deferred();w.abort=function(e){g.abort(e)};if(n){for(s=0;s<h.length;s++){o=e(h[s]);if(r){o.prop("disabled",false)}else{o.removeAttr("disabled")}}}f=e.extend(true,{},e.ajaxSettings,t);f.context=f.context||f;d="jqFormIO"+(new Date).getTime();var T=i.ownerDocument;var C=c.closest("body");if(f.iframeTarget){p=e(f.iframeTarget,T);y=p.attr2("name");if(!y){p.attr2("name",d)}else{d=y}}else{p=e('<iframe name="'+d+'" src="'+f.iframeSrc+'" />',T);p.css({position:"absolute",top:"-1000px",left:"-1000px"})}m=p[0];g={aborted:0,responseText:null,responseXML:null,status:0,statusText:"n/a",getAllResponseHeaders:function(){},getResponseHeader:function(){},setRequestHeader:function(){},abort:function(t){var n=t==="timeout"?"timeout":"aborted";a("aborting upload... "+n);this.aborted=1;try{if(m.contentWindow.document.execCommand){m.contentWindow.document.execCommand("Stop")}}catch(e){}p.attr("src",f.iframeSrc);g.error=n;if(f.error){f.error.call(f.context,g,n,t)}if(l){e.event.trigger("ajaxError",[g,f,n])}if(f.complete){f.complete.call(f.context,g,n)}}};l=f.global;if(l&&e.active++===0){e.event.trigger("ajaxStart")}if(l){e.event.trigger("ajaxSend",[g,f])}if(f.beforeSend&&f.beforeSend.call(f.context,g,f)===false){if(f.global){e.active--}w.reject();return w}if(g.aborted){w.reject();return w}v=i.clk;if(v){y=v.name;if(y&&!v.disabled){f.extraData=f.extraData||{};f.extraData[y]=v.value;if(v.type==="image"){f.extraData[y+".x"]=i.clk_x;f.extraData[y+".y"]=i.clk_y}}}var k=1;var S=2;function j(e){var t=null;try{if(e.contentWindow){t=e.contentWindow.document}}catch(e){a("cannot get iframe.contentWindow document: "+e)}if(t){return t}try{t=e.contentDocument?e.contentDocument:e.document}catch(n){a("cannot get iframe.contentDocument: "+n);t=e.document}return t}var E=e("meta[name=csrf-token]").attr("content");var D=e("meta[name=csrf-param]").attr("content");if(D&&E){f.extraData=f.extraData||{};f.extraData[D]=E}function A(){var t=c.attr2("target"),n=c.attr2("action"),r="multipart/form-data",o=c.attr("enctype")||c.attr("encoding")||r;i.setAttribute("target",d);if(!u||/post/i.test(u)){i.setAttribute("method","POST")}if(n!==f.url){i.setAttribute("action",f.url)}if(!f.skipEncodingOverride&&(!u||/post/i.test(u))){c.attr({encoding:"multipart/form-data",enctype:"multipart/form-data"})}if(f.timeout){b=setTimeout(function(){x=true;O(k)},f.timeout)}function s(){try{var e=j(m).readyState;a("state = "+e);if(e&&e.toLowerCase()==="uninitialized"){setTimeout(s,50)}}catch(e){a("Server abort: ",e," (",e.name,")");O(S);if(b){clearTimeout(b)}b=undefined}}var l=[];try{if(f.extraData){for(var h in f.extraData){if(f.extraData.hasOwnProperty(h)){if(e.isPlainObject(f.extraData[h])&&f.extraData[h].hasOwnProperty("name")&&f.extraData[h].hasOwnProperty("value")){l.push(e('<input type="hidden" name="'+f.extraData[h].name+'">',T).val(f.extraData[h].value).appendTo(i)[0])}else{l.push(e('<input type="hidden" name="'+h+'">',T).val(f.extraData[h]).appendTo(i)[0])}}}}if(!f.iframeTarget){p.appendTo(C)}if(m.attachEvent){m.attachEvent("onload",O)}else{m.addEventListener("load",O,false)}setTimeout(s,15);try{i.submit()}catch(e){var g=document.createElement("form").submit;g.apply(i)}}finally{i.setAttribute("action",n);i.setAttribute("enctype",o);if(t){i.setAttribute("target",t)}else{c.removeAttr("target")}e(l).remove()}}if(f.forceSync){A()}else{setTimeout(A,10)}var N,L,q=50,F;function O(t){if(g.aborted||F){return}L=j(m);if(!L){a("cannot access response document");t=S}if(t===k&&g){g.abort("timeout");w.reject(g,"timeout");return}else if(t===S&&g){g.abort("server abort");w.reject(g,"error","server abort");return}if(!L||L.location.href===f.iframeSrc){if(!x){return}}if(m.detachEvent){m.detachEvent("onload",O)}else{m.removeEventListener("load",O,false)}var n="success",r;try{if(x){throw"timeout"}var i=f.dataType==="xml"||L.XMLDocument||e.isXMLDoc(L);a("isXml="+i);if(!i&&window.opera&&(L.body===null||!L.body.innerHTML)){if(--q){a("requeing onLoad callback, DOM not available");setTimeout(O,250);return}}var o=L.body?L.body:L.documentElement;g.responseText=o?o.innerHTML:null;g.responseXML=L.XMLDocument?L.XMLDocument:L;if(i){f.dataType="xml"}g.getResponseHeader=function(e){var t={"content-type":f.dataType};return t[e.toLowerCase()]};if(o){g.status=Number(o.getAttribute("status"))||g.status;g.statusText=o.getAttribute("statusText")||g.statusText}var s=(f.dataType||"").toLowerCase();var u=/(json|script|text)/.test(s);if(u||f.textarea){var c=L.getElementsByTagName("textarea")[0];if(c){g.responseText=c.value;g.status=Number(c.getAttribute("status"))||g.status;g.statusText=c.getAttribute("statusText")||g.statusText}else if(u){var d=L.getElementsByTagName("pre")[0];var h=L.getElementsByTagName("body")[0];if(d){g.responseText=d.textContent?d.textContent:d.innerText}else if(h){g.responseText=h.textContent?h.textContent:h.innerText}}}else if(s==="xml"&&!g.responseXML&&g.responseText){g.responseXML=H(g.responseText)}try{N=P(g,s,f)}catch(e){n="parsererror";g.error=r=e||n}}catch(e){a("error caught: ",e);n="error";g.error=r=e||n}if(g.aborted){a("upload aborted");n=null}if(g.status){n=g.status>=200&&g.status<300||g.status===304?"success":"error"}if(n==="success"){if(f.success){f.success.call(f.context,N,"success",g)}w.resolve(g.responseText,"success",g);if(l){e.event.trigger("ajaxSuccess",[g,f])}}else if(n){if(typeof r==="undefined"){r=g.statusText}if(f.error){f.error.call(f.context,g,n,r)}w.reject(g,"error",r);if(l){e.event.trigger("ajaxError",[g,f,r])}}if(l){e.event.trigger("ajaxComplete",[g,f])}if(l&&!--e.active){e.event.trigger("ajaxStop")}if(f.complete){f.complete.call(f.context,g,n)}F=true;if(f.timeout){clearTimeout(b)}setTimeout(function(){if(!f.iframeTarget){p.remove()}else{p.attr("src",f.iframeSrc)}g.responseXML=null},100)}var H=e.parseXML||function(e,t){if(window.ActiveXObject){t=new ActiveXObject("Microsoft.XMLDOM");t.async="false";t.loadXML(e)}else{t=(new DOMParser).parseFromString(e,"text/xml")}return t&&t.documentElement&&t.documentElement.nodeName!=="parsererror"?t:null};var M=e.parseJSON||function(e){return window["eval"]("("+e+")")};var P=function(t,n,r){var i=t.getResponseHeader("content-type")||"",o=(n==="xml"||!n)&&i.indexOf("xml")>=0,a=o?t.responseXML:t.responseText;if(o&&a.documentElement.nodeName==="parsererror"){if(e.error){e.error("parsererror")}}if(r&&r.dataFilter){a=r.dataFilter(a,n)}if(typeof a==="string"){if((n==="json"||!n)&&i.indexOf("json")>=0){a=M(a)}else if((n==="script"||!n)&&i.indexOf("javascript")>=0){e.globalEval(a)}}return a};return w}};e.fn.ajaxForm=function(t,n,r,s){if(typeof t==="string"||t===false&&arguments.length>0){t={url:t,data:n,dataType:r};if(typeof s==="function"){t.success=s}}t=t||{};t.delegation=t.delegation&&e.isFunction(e.fn.on);if(!t.delegation&&this.length===0){var u={s:this.selector,c:this.context};if(!e.isReady&&u.s){a("DOM not ready, queuing ajaxForm");e(function(){e(u.s,u.c).ajaxForm(t)});return this}a("terminating; zero elements found by selector"+(e.isReady?"":" (DOM not ready)"));return this}if(t.delegation){e(document).off("submit.form-plugin",this.selector,i).off("click.form-plugin",this.selector,o).on("submit.form-plugin",this.selector,t,i).on("click.form-plugin",this.selector,t,o);return this}return this.ajaxFormUnbind().on("submit.form-plugin",t,i).on("click.form-plugin",t,o)};function i(t){var n=t.data;if(!t.isDefaultPrevented()){t.preventDefault();e(t.target).closest("form").ajaxSubmit(n)}}function o(t){var n=t.target;var r=e(n);if(!r.is("[type=submit],[type=image]")){var i=r.closest("[type=submit]");if(i.length===0){return}n=i[0]}var o=n.form;o.clk=n;if(n.type==="image"){if(typeof t.offsetX!=="undefined"){o.clk_x=t.offsetX;o.clk_y=t.offsetY}else if(typeof e.fn.offset==="function"){var a=r.offset();o.clk_x=t.pageX-a.left;o.clk_y=t.pageY-a.top}else{o.clk_x=t.pageX-n.offsetLeft;o.clk_y=t.pageY-n.offsetTop}}setTimeout(function(){o.clk=o.clk_x=o.clk_y=null},100)}e.fn.ajaxFormUnbind=function(){return this.off("submit.form-plugin click.form-plugin")};e.fn.formToArray=function(t,r,i){var o=[];if(this.length===0){return o}var a=this[0];var s=this.attr("id");var u=t||typeof a.elements==="undefined"?a.getElementsByTagName("*"):a.elements;var f;if(u){u=e.makeArray(u)}if(s&&(t||/(Edge|Trident)\//.test(navigator.userAgent))){f=e(':input[form="'+s+'"]').get();if(f.length){u=(u||[]).concat(f)}}if(!u||!u.length){return o}if(e.isFunction(i)){u=e.map(u,i)}var l,c,d,p,h,m,g;for(l=0,m=u.length;l<m;l++){h=u[l];d=h.name;if(!d||h.disabled){continue}if(t&&a.clk&&h.type==="image"){if(a.clk===h){o.push({name:d,value:e(h).val(),type:h.type});o.push({name:d+".x",value:a.clk_x},{name:d+".y",value:a.clk_y})}continue}p=e.fieldValue(h,true);if(p&&p.constructor===Array){if(r){r.push(h)}for(c=0,g=p.length;c<g;c++){o.push({name:d,value:p[c]})}}else if(n.fileapi&&h.type==="file"){if(r){r.push(h)}var v=h.files;if(v.length){for(c=0;c<v.length;c++){o.push({name:d,value:v[c],type:h.type})}}else{o.push({name:d,value:"",type:h.type})}}else if(p!==null&&typeof p!=="undefined"){if(r){r.push(h)}o.push({name:d,value:p,type:h.type,required:h.required})}}if(!t&&a.clk){var y=e(a.clk),x=y[0];d=x.name;if(d&&!x.disabled&&x.type==="image"){o.push({name:d,value:y.val()});o.push({name:d+".x",value:a.clk_x},{name:d+".y",value:a.clk_y})}}return o};e.fn.formSerialize=function(t){return e.param(this.formToArray(t))};e.fn.fieldSerialize=function(t){var n=[];this.each(function(){var r=this.name;if(!r){return}var i=e.fieldValue(this,t);if(i&&i.constructor===Array){for(var o=0,a=i.length;o<a;o++){n.push({name:r,value:i[o]})}}else if(i!==null&&typeof i!=="undefined"){n.push({name:this.name,value:i})}});return e.param(n)};e.fn.fieldValue=function(t){for(var n=[],r=0,i=this.length;r<i;r++){var o=this[r];var a=e.fieldValue(o,t);if(a===null||typeof a==="undefined"||a.constructor===Array&&!a.length){continue}if(a.constructor===Array){e.merge(n,a)}else{n.push(a)}}return n};e.fieldValue=function(n,r){var i=n.name,o=n.type,a=n.tagName.toLowerCase();if(typeof r==="undefined"){r=true}if(r&&(!i||n.disabled||o==="reset"||o==="button"||(o==="checkbox"||o==="radio")&&!n.checked||(o==="submit"||o==="image")&&n.form&&n.form.clk!==n||a==="select"&&n.selectedIndex===-1)){return null}if(a==="select"){var s=n.selectedIndex;if(s<0){return null}var u=[],f=n.options;var l=o==="select-one";var c=l?s+1:f.length;for(var d=l?s:0;d<c;d++){var p=f[d];if(p.selected&&!p.disabled){var h=p.value;if(!h){h=p.attributes&&p.attributes.value&&!p.attributes.value.specified?p.text:p.value}if(l){return h}u.push(h)}}return u}return e(n).val().replace(t,"\r\n")};e.fn.clearForm=function(t){return this.each(function(){e("input,select,textarea",this).clearFields(t)})};e.fn.clearFields=e.fn.clearInputs=function(t){var n=/^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each(function(){var r=this.type,i=this.tagName.toLowerCase();if(n.test(r)||i==="textarea"){this.value=""}else if(r==="checkbox"||r==="radio"){this.checked=false}else if(i==="select"){this.selectedIndex=-1}else if(r==="file"){if(/MSIE/.test(navigator.userAgent)){e(this).replaceWith(e(this).clone(true))}else{e(this).val("")}}else if(t){if(t===true&&/hidden/.test(r)||typeof t==="string"&&e(this).is(t)){this.value=""}}})};e.fn.resetForm=function(){return this.each(function(){var t=e(this);var n=this.tagName.toLowerCase();switch(n){case"input":this.checked=this.defaultChecked;case"textarea":this.value=this.defaultValue;return true;case"option":case"optgroup":var r=t.parents("select");if(r.length&&r[0].multiple){if(n==="option"){this.selected=this.defaultSelected}else{t.find("option").resetForm()}}else{r.resetForm()}return true;case"select":t.find("option").each(function(e){this.selected=this.defaultSelected;if(this.defaultSelected&&!t[0].multiple){t[0].selectedIndex=e;return false}});return true;case"label":var i=e(t.attr("for"));var o=t.find("input,select,textarea");if(i[0]){o.unshift(i[0])}o.resetForm();return true;case"form":if(typeof this.reset==="function"||typeof this.reset==="object"&&!this.reset.nodeType){this.reset()}return true;default:t.find("form,input,label,select,textarea").resetForm();return true}})};e.fn.enable=function(e){if(typeof e==="undefined"){e=true}return this.each(function(){this.disabled=!e})};e.fn.selected=function(t){if(typeof t==="undefined"){t=true}return this.each(function(){var n=this.type;if(n==="checkbox"||n==="radio"){this.checked=t}else if(this.tagName.toLowerCase()==="option"){var r=e(this).parent("select");if(t&&r[0]&&r[0].type==="select-one"){r.find("option").selected(false)}this.selected=t}})};e.fn.ajaxSubmit.debug=false;function a(){if(!e.fn.ajaxSubmit.debug){return}var t="[jquery.form] "+Array.prototype.join.call(arguments,"");if(window.console&&window.console.log){window.console.log(t)}else if(window.opera&&window.opera.postError){window.opera.postError(t)}}});var Router=function(){var e="";var t=[];var n=function e(t,n){n=n===undefined?[]:n;this.base=this.base===undefined?"":this.base;var r=this.routes[t];if(r===undefined){return undefined}var i=this.base+r.path;for(var o in n){if(n.hasOwnProperty(o)){i=i.replace("{"+o+"}",n[o])}}return i};var r=function e(t){this.base=t};var i=function e(t){this.routes=t};return{generatePath:n,setBasePath:r,setRoutes:i}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
