(function(e,t){"use strict";if(typeof module==="object"&&typeof module.exports==="object"){module.exports=e.document?t(e,true):function(e){if(!e.document){throw new Error("jQuery requires a window with a document")}return t(e)}}else{t(e)}})(typeof window!=="undefined"?window:this,function(e,t){"use strict";var n=[];var i=e.document;var o=Object.getPrototypeOf;var r=n.slice;var a=n.concat;var s=n.push;var l=n.indexOf;var u={};var c=u.toString;var f=u.hasOwnProperty;var d=f.toString;var h=d.call(Object);var p={};var v=function e(t){return typeof t==="function"&&typeof t.nodeType!=="number"};var m=function e(t){return t!=null&&t===t.window};var g={type:true,src:true,noModule:true};function b(e,t,n){t=t||i;var o,r=t.createElement("script");r.text=e;if(n){for(o in g){if(n[o]){r[o]=n[o]}}}t.head.appendChild(r).parentNode.removeChild(r)}function y(e){if(e==null){return e+""}return typeof e==="object"||typeof e==="function"?u[c.call(e)]||"object":typeof e}var w="3.3.1",x=function(e,t){return new x.fn.init(e,t)},C=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.fn=x.prototype={jquery:w,constructor:x,length:0,toArray:function(){return r.call(this)},get:function(e){if(e==null){return r.call(this)}return e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);t.prevObject=this;return t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(r.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice};x.extend=x.fn.extend=function(){var e,t,n,i,o,r,a=arguments[0]||{},s=1,l=arguments.length,u=false;if(typeof a==="boolean"){u=a;a=arguments[s]||{};s++}if(typeof a!=="object"&&!v(a)){a={}}if(s===l){a=this;s--}for(;s<l;s++){if((e=arguments[s])!=null){for(t in e){n=a[t];i=e[t];if(a===i){continue}if(u&&i&&(x.isPlainObject(i)||(o=Array.isArray(i)))){if(o){o=false;r=n&&Array.isArray(n)?n:[]}else{r=n&&x.isPlainObject(n)?n:{}}a[t]=x.extend(u,r,i)}else if(i!==undefined){a[t]=i}}}}return a};x.extend({expando:"jQuery"+(w+Math.random()).replace(/\D/g,""),isReady:true,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;if(!e||c.call(e)!=="[object Object]"){return false}t=o(e);if(!t){return true}n=f.call(t,"constructor")&&t.constructor;return typeof n==="function"&&d.call(n)===h},isEmptyObject:function(e){var t;for(t in e){return false}return true},globalEval:function(e){b(e)},each:function(e,t){var n,i=0;if(k(e)){n=e.length;for(;i<n;i++){if(t.call(e[i],i,e[i])===false){break}}}else{for(i in e){if(t.call(e[i],i,e[i])===false){break}}}return e},trim:function(e){return e==null?"":(e+"").replace(C,"")},makeArray:function(e,t){var n=t||[];if(e!=null){if(k(Object(e))){x.merge(n,typeof e==="string"?[e]:e)}else{s.call(n,e)}}return n},inArray:function(e,t,n){return t==null?-1:l.call(t,e,n)},merge:function(e,t){var n=+t.length,i=0,o=e.length;for(;i<n;i++){e[o++]=t[i]}e.length=o;return e},grep:function(e,t,n){var i,o=[],r=0,a=e.length,s=!n;for(;r<a;r++){i=!t(e[r],r);if(i!==s){o.push(e[r])}}return o},map:function(e,t,n){var i,o,r=0,s=[];if(k(e)){i=e.length;for(;r<i;r++){o=t(e[r],r,n);if(o!=null){s.push(o)}}}else{for(r in e){o=t(e[r],r,n);if(o!=null){s.push(o)}}}return a.apply([],s)},guid:1,support:p});if(typeof Symbol==="function"){x.fn[Symbol.iterator]=n[Symbol.iterator]}x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){u["[object "+t+"]"]=t.toLowerCase()});function k(e){var t=!!e&&"length"in e&&e.length,n=y(e);if(v(e)||m(e)){return false}return n==="array"||t===0||typeof t==="number"&&t>0&&t-1 in e}var T=function(e){var t,n,i,o,r,a,s,l,u,c,f,d,h,p,v,m,g,b,y,w="sizzle"+1*new Date,x=e.document,C=0,k=0,T=ae(),S=ae(),E=ae(),N=function(e,t){if(e===t){f=true}return 0},$={}.hasOwnProperty,A=[],I=A.pop,D=A.push,R=A.push,L=A.slice,O=function(e,t){var n=0,i=e.length;for(;n<i;n++){if(e[n]===t){return n}}return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",j="\\["+H+"*("+F+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+H+"*\\]",M=":("+F+")(?:\\(("+"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|"+"((?:\\\\.|[^\\\\()[\\]]|"+j+")*)|"+".*"+")\\)|)",B=new RegExp(H+"+","g"),z=new RegExp("^"+H+"+|((?:^|[^\\\\])(?:\\\\.)*)"+H+"+$","g"),q=new RegExp("^"+H+"*,"+H+"*"),U=new RegExp("^"+H+"*([>+~]|"+H+")"+H+"*"),K=new RegExp("="+H+"*([^\\]'\"]*?)"+H+"*\\]","g"),W=new RegExp(M),_=new RegExp("^"+F+"$"),V={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+j),PSEUDO:new RegExp("^"+M),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+H+"*(even|odd|(([+-]|)(\\d*)n|)"+H+"*(?:([+-]|)"+H+"*(\\d+)|))"+H+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+H+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+H+"*((?:-\\d)?\\d*)"+H+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,X=/^[^{]+\{\s*\[native \w/,Y=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+H+"?|("+H+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,i&1023|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){if(t){if(e==="\0"){return"ï¿½"}return e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" "}return"\\"+e},ie=function(){d()},oe=be(function(e){return e.disabled===true&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{R.apply(A=L.call(x.childNodes),x.childNodes);A[x.childNodes.length].nodeType}catch(e){R={apply:A.length?function(e,t){D.apply(e,L.call(t))}:function(e,t){var n=e.length,i=0;while(e[n++]=t[i++]){}e.length=n-1}}}function re(e,t,i,o){var r,s,u,c,f,p,g,b=t&&t.ownerDocument,C=t?t.nodeType:9;i=i||[];if(typeof e!=="string"||!e||C!==1&&C!==9&&C!==11){return i}if(!o){if((t?t.ownerDocument||t:x)!==h){d(t)}t=t||h;if(v){if(C!==11&&(f=Y.exec(e))){if(r=f[1]){if(C===9){if(u=t.getElementById(r)){if(u.id===r){i.push(u);return i}}else{return i}}else{if(b&&(u=b.getElementById(r))&&y(t,u)&&u.id===r){i.push(u);return i}}}else if(f[2]){R.apply(i,t.getElementsByTagName(e));return i}else if((r=f[3])&&n.getElementsByClassName&&t.getElementsByClassName){R.apply(i,t.getElementsByClassName(r));return i}}if(n.qsa&&!E[e+" "]&&(!m||!m.test(e))){if(C!==1){b=t;g=e}else if(t.nodeName.toLowerCase()!=="object"){if(c=t.getAttribute("id")){c=c.replace(te,ne)}else{t.setAttribute("id",c=w)}p=a(e);s=p.length;while(s--){p[s]="#"+c+" "+ge(p[s])}g=p.join(",");b=J.test(e)&&ve(t.parentNode)||t}if(g){try{R.apply(i,b.querySelectorAll(g));return i}catch(e){}finally{if(c===w){t.removeAttribute("id")}}}}}}return l(e.replace(z,"$1"),t,i,o)}function ae(){var e=[];function t(n,o){if(e.push(n+" ")>i.cacheLength){delete t[e.shift()]}return t[n+" "]=o}return t}function se(e){e[w]=true;return e}function le(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return false}finally{if(t.parentNode){t.parentNode.removeChild(t)}t=null}}function ue(e,t){var n=e.split("|"),o=n.length;while(o--){i.attrHandle[n[o]]=t}}function ce(e,t){var n=t&&e,i=n&&e.nodeType===1&&t.nodeType===1&&e.sourceIndex-t.sourceIndex;if(i){return i}if(n){while(n=n.nextSibling){if(n===t){return-1}}}return e?1:-1}function fe(e){return function(t){var n=t.nodeName.toLowerCase();return n==="input"&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return(n==="input"||n==="button")&&t.type===e}}function he(e){return function(t){if("form"in t){if(t.parentNode&&t.disabled===false){if("label"in t){if("label"in t.parentNode){return t.parentNode.disabled===e}else{return t.disabled===e}}return t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e}return t.disabled===e}else if("label"in t){return t.disabled===e}return false}}function pe(e){return se(function(t){t=+t;return se(function(n,i){var o,r=e([],n.length,t),a=r.length;while(a--){if(n[o=r[a]]){n[o]=!(i[o]=n[o])}}})})}function ve(e){return e&&typeof e.getElementsByTagName!=="undefined"&&e}n=re.support={};r=re.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?t.nodeName!=="HTML":false};d=re.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:x;if(a===h||a.nodeType!==9||!a.documentElement){return h}h=a;p=h.documentElement;v=!r(h);if(x!==h&&(o=h.defaultView)&&o.top!==o){if(o.addEventListener){o.addEventListener("unload",ie,false)}else if(o.attachEvent){o.attachEvent("onunload",ie)}}n.attributes=le(function(e){e.className="i";return!e.getAttribute("className")});n.getElementsByTagName=le(function(e){e.appendChild(h.createComment(""));return!e.getElementsByTagName("*").length});n.getElementsByClassName=X.test(h.getElementsByClassName);n.getById=le(function(e){p.appendChild(e).id=w;return!h.getElementsByName||!h.getElementsByName(w).length});if(n.getById){i.filter["ID"]=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}};i.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&v){var n=t.getElementById(e);return n?[n]:[]}}}else{i.filter["ID"]=function(e){var t=e.replace(Z,ee);return function(e){var n=typeof e.getAttributeNode!=="undefined"&&e.getAttributeNode("id");return n&&n.value===t}};i.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&v){var n,i,o,r=t.getElementById(e);if(r){n=r.getAttributeNode("id");if(n&&n.value===e){return[r]}o=t.getElementsByName(e);i=0;while(r=o[i++]){n=r.getAttributeNode("id");if(n&&n.value===e){return[r]}}}return[]}}}i.find["TAG"]=n.getElementsByTagName?function(e,t){if(typeof t.getElementsByTagName!=="undefined"){return t.getElementsByTagName(e)}else if(n.qsa){return t.querySelectorAll(e)}}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if(e==="*"){while(n=r[o++]){if(n.nodeType===1){i.push(n)}}return i}return r};i.find["CLASS"]=n.getElementsByClassName&&function(e,t){if(typeof t.getElementsByClassName!=="undefined"&&v){return t.getElementsByClassName(e)}};g=[];m=[];if(n.qsa=X.test(h.querySelectorAll)){le(function(e){p.appendChild(e).innerHTML="<a id='"+w+"'></a>"+"<select id='"+w+"-\r\\' msallowcapture=''>"+"<option selected=''></option></select>";if(e.querySelectorAll("[msallowcapture^='']").length){m.push("[*^$]="+H+"*(?:''|\"\")")}if(!e.querySelectorAll("[selected]").length){m.push("\\["+H+"*(?:value|"+P+")")}if(!e.querySelectorAll("[id~="+w+"-]").length){m.push("~=")}if(!e.querySelectorAll(":checked").length){m.push(":checked")}if(!e.querySelectorAll("a#"+w+"+*").length){m.push(".#.+[+~]")}});le(function(e){e.innerHTML="<a href='' disabled='disabled'></a>"+"<select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden");e.appendChild(t).setAttribute("name","D");if(e.querySelectorAll("[name=d]").length){m.push("name"+H+"*[*^$|!~]?=")}if(e.querySelectorAll(":enabled").length!==2){m.push(":enabled",":disabled")}p.appendChild(e).disabled=true;if(e.querySelectorAll(":disabled").length!==2){m.push(":enabled",":disabled")}e.querySelectorAll("*,:x");m.push(",.*:")})}if(n.matchesSelector=X.test(b=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector)){le(function(e){n.disconnectedMatch=b.call(e,"*");b.call(e,"[s!='']:x");g.push("!=",M)})}m=m.length&&new RegExp(m.join("|"));g=g.length&&new RegExp(g.join("|"));t=X.test(p.compareDocumentPosition);y=t||X.test(p.contains)?function(e,t){var n=e.nodeType===9?e.documentElement:e,i=t&&t.parentNode;return e===i||!!(i&&i.nodeType===1&&(n.contains?n.contains(i):e.compareDocumentPosition&&e.compareDocumentPosition(i)&16))}:function(e,t){if(t){while(t=t.parentNode){if(t===e){return true}}}return false};N=t?function(e,t){if(e===t){f=true;return 0}var i=!e.compareDocumentPosition-!t.compareDocumentPosition;if(i){return i}i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1;if(i&1||!n.sortDetached&&t.compareDocumentPosition(e)===i){if(e===h||e.ownerDocument===x&&y(x,e)){return-1}if(t===h||t.ownerDocument===x&&y(x,t)){return 1}return c?O(c,e)-O(c,t):0}return i&4?-1:1}:function(e,t){if(e===t){f=true;return 0}var n,i=0,o=e.parentNode,r=t.parentNode,a=[e],s=[t];if(!o||!r){return e===h?-1:t===h?1:o?-1:r?1:c?O(c,e)-O(c,t):0}else if(o===r){return ce(e,t)}n=e;while(n=n.parentNode){a.unshift(n)}n=t;while(n=n.parentNode){s.unshift(n)}while(a[i]===s[i]){i++}return i?ce(a[i],s[i]):a[i]===x?-1:s[i]===x?1:0};return h};re.matches=function(e,t){return re(e,null,null,t)};re.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h){d(e)}t=t.replace(K,"='$1']");if(n.matchesSelector&&v&&!E[t+" "]&&(!g||!g.test(t))&&(!m||!m.test(t))){try{var i=b.call(e,t);if(i||n.disconnectedMatch||e.document&&e.document.nodeType!==11){return i}}catch(e){}}return re(t,h,null,[e]).length>0};re.contains=function(e,t){if((e.ownerDocument||e)!==h){d(e)}return y(e,t)};re.attr=function(e,t){if((e.ownerDocument||e)!==h){d(e)}var o=i.attrHandle[t.toLowerCase()],r=o&&$.call(i.attrHandle,t.toLowerCase())?o(e,t,!v):undefined;return r!==undefined?r:n.attributes||!v?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null};re.escape=function(e){return(e+"").replace(te,ne)};re.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)};re.uniqueSort=function(e){var t,i=[],o=0,r=0;f=!n.detectDuplicates;c=!n.sortStable&&e.slice(0);e.sort(N);if(f){while(t=e[r++]){if(t===e[r]){o=i.push(r)}}while(o--){e.splice(i[o],1)}}c=null;return e};o=re.getText=function(e){var t,n="",i=0,r=e.nodeType;if(!r){while(t=e[i++]){n+=o(t)}}else if(r===1||r===9||r===11){if(typeof e.textContent==="string"){return e.textContent}else{for(e=e.firstChild;e;e=e.nextSibling){n+=o(e)}}}else if(r===3||r===4){return e.nodeValue}return n};i=re.selectors={cacheLength:50,createPseudo:se,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){e[1]=e[1].replace(Z,ee);e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee);if(e[2]==="~="){e[3]=" "+e[3]+" "}return e.slice(0,4)},CHILD:function(e){e[1]=e[1].toLowerCase();if(e[1].slice(0,3)==="nth"){if(!e[3]){re.error(e[0])}e[4]=+(e[4]?e[5]+(e[6]||1):2*(e[3]==="even"||e[3]==="odd"));e[5]=+(e[7]+e[8]||e[3]==="odd")}else if(e[3]){re.error(e[0])}return e},PSEUDO:function(e){var t,n=!e[6]&&e[2];if(V["CHILD"].test(e[0])){return null}if(e[3]){e[2]=e[4]||e[5]||""}else if(n&&W.test(n)&&(t=a(n,true))&&(t=n.indexOf(")",n.length-t)-n.length)){e[0]=e[0].slice(0,t);e[2]=n.slice(0,t)}return e.slice(0,3)}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return e==="*"?function(){return true}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+H+")"+e+"("+H+"|$)"))&&T(e,function(e){return t.test(typeof e.className==="string"&&e.className||typeof e.getAttribute!=="undefined"&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var o=re.attr(i,e);if(o==null){return t==="!="}if(!t){return true}o+="";return t==="="?o===n:t==="!="?o!==n:t==="^="?n&&o.indexOf(n)===0:t==="*="?n&&o.indexOf(n)>-1:t==="$="?n&&o.slice(-n.length)===n:t==="~="?(" "+o.replace(B," ")+" ").indexOf(n)>-1:t==="|="?o===n||o.slice(0,n.length+1)===n+"-":false}},CHILD:function(e,t,n,i,o){var r=e.slice(0,3)!=="nth",a=e.slice(-4)!=="last",s=t==="of-type";return i===1&&o===0?function(e){return!!e.parentNode}:function(t,n,l){var u,c,f,d,h,p,v=r!==a?"nextSibling":"previousSibling",m=t.parentNode,g=s&&t.nodeName.toLowerCase(),b=!l&&!s,y=false;if(m){if(r){while(v){d=t;while(d=d[v]){if(s?d.nodeName.toLowerCase()===g:d.nodeType===1){return false}}p=v=e==="only"&&!p&&"nextSibling"}return true}p=[a?m.firstChild:m.lastChild];if(a&&b){d=m;f=d[w]||(d[w]={});c=f[d.uniqueID]||(f[d.uniqueID]={});u=c[e]||[];h=u[0]===C&&u[1];y=h&&u[2];d=h&&m.childNodes[h];while(d=++h&&d&&d[v]||(y=h=0)||p.pop()){if(d.nodeType===1&&++y&&d===t){c[e]=[C,h,y];break}}}else{if(b){d=t;f=d[w]||(d[w]={});c=f[d.uniqueID]||(f[d.uniqueID]={});u=c[e]||[];h=u[0]===C&&u[1];y=h}if(y===false){while(d=++h&&d&&d[v]||(y=h=0)||p.pop()){if((s?d.nodeName.toLowerCase()===g:d.nodeType===1)&&++y){if(b){f=d[w]||(d[w]={});c=f[d.uniqueID]||(f[d.uniqueID]={});c[e]=[C,y]}if(d===t){break}}}}}y-=o;return y===i||y%i===0&&y/i>=0}}},PSEUDO:function(e,t){var n,o=i.pseudos[e]||i.setFilters[e.toLowerCase()]||re.error("unsupported pseudo: "+e);if(o[w]){return o(t)}if(o.length>1){n=[e,e,"",t];return i.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var i,r=o(e,t),a=r.length;while(a--){i=O(e,r[a]);e[i]=!(n[i]=r[a])}}):function(e){return o(e,0,n)}}return o}},pseudos:{not:se(function(e){var t=[],n=[],i=s(e.replace(z,"$1"));return i[w]?se(function(e,t,n,o){var r,a=i(e,null,o,[]),s=e.length;while(s--){if(r=a[s]){e[s]=!(t[s]=r)}}}):function(e,o,r){t[0]=e;i(t,null,r,n);t[0]=null;return!n.pop()}}),has:se(function(e){return function(t){return re(e,t).length>0}}),contains:se(function(e){e=e.replace(Z,ee);return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:se(function(e){if(!_.test(e||"")){re.error("unsupported lang: "+e)}e=e.replace(Z,ee).toLowerCase();return function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang")){n=n.toLowerCase();return n===e||n.indexOf(e+"-")===0}}while((t=t.parentNode)&&t.nodeType===1);return false}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(false),disabled:he(true),checked:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&!!e.checked||t==="option"&&!!e.selected},selected:function(e){if(e.parentNode){e.parentNode.selectedIndex}return e.selected===true},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling){if(e.nodeType<6){return false}}return true},parent:function(e){return!i.pseudos["empty"](e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&e.type==="button"||t==="button"},text:function(e){var t;return e.nodeName.toLowerCase()==="input"&&e.type==="text"&&((t=e.getAttribute("type"))==null||t.toLowerCase()==="text")},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,n){return[n<0?n+t:n]}),even:pe(function(e,t){var n=0;for(;n<t;n+=2){e.push(n)}return e}),odd:pe(function(e,t){var n=1;for(;n<t;n+=2){e.push(n)}return e}),lt:pe(function(e,t,n){var i=n<0?n+t:n;for(;--i>=0;){e.push(i)}return e}),gt:pe(function(e,t,n){var i=n<0?n+t:n;for(;++i<t;){e.push(i)}return e})}};i.pseudos["nth"]=i.pseudos["eq"];for(t in{radio:true,checkbox:true,file:true,password:true,image:true}){i.pseudos[t]=fe(t)}for(t in{submit:true,reset:true}){i.pseudos[t]=de(t)}function me(){}me.prototype=i.filters=i.pseudos;i.setFilters=new me;a=re.tokenize=function(e,t){var n,o,r,a,s,l,u,c=S[e+" "];if(c){return t?0:c.slice(0)}s=e;l=[];u=i.preFilter;while(s){if(!n||(o=q.exec(s))){if(o){s=s.slice(o[0].length)||s}l.push(r=[])}n=false;if(o=U.exec(s)){n=o.shift();r.push({value:n,type:o[0].replace(z," ")});s=s.slice(n.length)}for(a in i.filter){if((o=V[a].exec(s))&&(!u[a]||(o=u[a](o)))){n=o.shift();r.push({value:n,type:a,matches:o});s=s.slice(n.length)}}if(!n){break}}return t?s.length:s?re.error(e):S(e,l).slice(0)};function ge(e){var t=0,n=e.length,i="";for(;t<n;t++){i+=e[t].value}return i}function be(e,t,n){var i=t.dir,o=t.next,r=o||i,a=n&&r==="parentNode",s=k++;return t.first?function(t,n,o){while(t=t[i]){if(t.nodeType===1||a){return e(t,n,o)}}return false}:function(t,n,l){var u,c,f,d=[C,s];if(l){while(t=t[i]){if(t.nodeType===1||a){if(e(t,n,l)){return true}}}}else{while(t=t[i]){if(t.nodeType===1||a){f=t[w]||(t[w]={});c=f[t.uniqueID]||(f[t.uniqueID]={});if(o&&o===t.nodeName.toLowerCase()){t=t[i]||t}else if((u=c[r])&&u[0]===C&&u[1]===s){return d[2]=u[2]}else{c[r]=d;if(d[2]=e(t,n,l)){return true}}}}}return false}}function ye(e){return e.length>1?function(t,n,i){var o=e.length;while(o--){if(!e[o](t,n,i)){return false}}return true}:e[0]}function we(e,t,n){var i=0,o=t.length;for(;i<o;i++){re(e,t[i],n)}return n}function xe(e,t,n,i,o){var r,a=[],s=0,l=e.length,u=t!=null;for(;s<l;s++){if(r=e[s]){if(!n||n(r,i,o)){a.push(r);if(u){t.push(s)}}}}return a}function Ce(e,t,n,i,o,r){if(i&&!i[w]){i=Ce(i)}if(o&&!o[w]){o=Ce(o,r)}return se(function(r,a,s,l){var u,c,f,d=[],h=[],p=a.length,v=r||we(t||"*",s.nodeType?[s]:s,[]),m=e&&(r||!t)?xe(v,d,e,s,l):v,g=n?o||(r?e:p||i)?[]:a:m;if(n){n(m,g,s,l)}if(i){u=xe(g,h);i(u,[],s,l);c=u.length;while(c--){if(f=u[c]){g[h[c]]=!(m[h[c]]=f)}}}if(r){if(o||e){if(o){u=[];c=g.length;while(c--){if(f=g[c]){u.push(m[c]=f)}}o(null,g=[],u,l)}c=g.length;while(c--){if((f=g[c])&&(u=o?O(r,f):d[c])>-1){r[u]=!(a[u]=f)}}}}else{g=xe(g===a?g.splice(p,g.length):g);if(o){o(null,a,g,l)}else{R.apply(a,g)}}})}function ke(e){var t,n,o,r=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,c=be(function(e){return e===t},s,true),f=be(function(e){return O(t,e)>-1},s,true),d=[function(e,n,i){var o=!a&&(i||n!==u)||((t=n).nodeType?c(e,n,i):f(e,n,i));t=null;return o}];for(;l<r;l++){if(n=i.relative[e[l].type]){d=[be(ye(d),n)]}else{n=i.filter[e[l].type].apply(null,e[l].matches);if(n[w]){o=++l;for(;o<r;o++){if(i.relative[e[o].type]){break}}return Ce(l>1&&ye(d),l>1&&ge(e.slice(0,l-1).concat({value:e[l-2].type===" "?"*":""})).replace(z,"$1"),n,l<o&&ke(e.slice(l,o)),o<r&&ke(e=e.slice(o)),o<r&&ge(e))}d.push(n)}}return ye(d)}function Te(e,t){var n=t.length>0,o=e.length>0,r=function(r,a,s,l,c){var f,p,m,g=0,b="0",y=r&&[],w=[],x=u,k=r||o&&i.find["TAG"]("*",c),T=C+=x==null?1:Math.random()||.1,S=k.length;if(c){u=a===h||a||c}for(;b!==S&&(f=k[b])!=null;b++){if(o&&f){p=0;if(!a&&f.ownerDocument!==h){d(f);s=!v}while(m=e[p++]){if(m(f,a||h,s)){l.push(f);break}}if(c){C=T}}if(n){if(f=!m&&f){g--}if(r){y.push(f)}}}g+=b;if(n&&b!==g){p=0;while(m=t[p++]){m(y,w,a,s)}if(r){if(g>0){while(b--){if(!(y[b]||w[b])){w[b]=I.call(l)}}}w=xe(w)}R.apply(l,w);if(c&&!r&&w.length>0&&g+t.length>1){re.uniqueSort(l)}}if(c){C=T;u=x}return y};return n?se(r):r}s=re.compile=function(e,t){var n,i=[],o=[],r=E[e+" "];if(!r){if(!t){t=a(e)}n=t.length;while(n--){r=ke(t[n]);if(r[w]){i.push(r)}else{o.push(r)}}r=E(e,Te(o,i));r.selector=e}return r};l=re.select=function(e,t,n,o){var r,l,u,c,f,d=typeof e==="function"&&e,h=!o&&a(e=d.selector||e);n=n||[];if(h.length===1){l=h[0]=h[0].slice(0);if(l.length>2&&(u=l[0]).type==="ID"&&t.nodeType===9&&v&&i.relative[l[1].type]){t=(i.find["ID"](u.matches[0].replace(Z,ee),t)||[])[0];if(!t){return n}else if(d){t=t.parentNode}e=e.slice(l.shift().value.length)}r=V["needsContext"].test(e)?0:l.length;while(r--){u=l[r];if(i.relative[c=u.type]){break}if(f=i.find[c]){if(o=f(u.matches[0].replace(Z,ee),J.test(l[0].type)&&ve(t.parentNode)||t)){l.splice(r,1);e=o.length&&ge(l);if(!e){R.apply(n,o);return n}break}}}}(d||s(e,h))(o,t,!v,n,!t||J.test(e)&&ve(t.parentNode)||t);return n};n.sortStable=w.split("").sort(N).join("")===w;n.detectDuplicates=!!f;d();n.sortDetached=le(function(e){return e.compareDocumentPosition(h.createElement("fieldset"))&1});if(!le(function(e){e.innerHTML="<a href='#'></a>";return e.firstChild.getAttribute("href")==="#"})){ue("type|href|height|width",function(e,t,n){if(!n){return e.getAttribute(t,t.toLowerCase()==="type"?1:2)}})}if(!n.attributes||!le(function(e){e.innerHTML="<input/>";e.firstChild.setAttribute("value","");return e.firstChild.getAttribute("value")===""})){ue("value",function(e,t,n){if(!n&&e.nodeName.toLowerCase()==="input"){return e.defaultValue}})}if(!le(function(e){return e.getAttribute("disabled")==null})){ue(P,function(e,t,n){var i;if(!n){return e[t]===true?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}})}return re}(e);x.find=T;x.expr=T.selectors;x.expr[":"]=x.expr.pseudos;x.uniqueSort=x.unique=T.uniqueSort;x.text=T.getText;x.isXMLDoc=T.isXML;x.contains=T.contains;x.escapeSelector=T.escape;var S=function(e,t,n){var i=[],o=n!==undefined;while((e=e[t])&&e.nodeType!==9){if(e.nodeType===1){if(o&&x(e).is(n)){break}i.push(e)}}return i};var E=function(e,t){var n=[];for(;e;e=e.nextSibling){if(e.nodeType===1&&e!==t){n.push(e)}}return n};var N=x.expr.match.needsContext;function $(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(e,t,n){if(v(t)){return x.grep(e,function(e,i){return!!t.call(e,i,e)!==n})}if(t.nodeType){return x.grep(e,function(e){return e===t!==n})}if(typeof t!=="string"){return x.grep(e,function(e){return l.call(t,e)>-1!==n})}return x.filter(t,e,n)}x.filter=function(e,t,n){var i=t[0];if(n){e=":not("+e+")"}if(t.length===1&&i.nodeType===1){return x.find.matchesSelector(i,e)?[i]:[]}return x.find.matches(e,x.grep(t,function(e){return e.nodeType===1}))};x.fn.extend({find:function(e){var t,n,i=this.length,o=this;if(typeof e!=="string"){return this.pushStack(x(e).filter(function(){for(t=0;t<i;t++){if(x.contains(o[t],this)){return true}}}))}n=this.pushStack([]);for(t=0;t<i;t++){x.find(e,o[t],n)}return i>1?x.uniqueSort(n):n},filter:function(e){return this.pushStack(I(this,e||[],false))},not:function(e){return this.pushStack(I(this,e||[],true))},is:function(e){return!!I(this,typeof e==="string"&&N.test(e)?x(e):e||[],false).length}});var D,R=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,L=x.fn.init=function(e,t,n){var o,r;if(!e){return this}n=n||D;if(typeof e==="string"){if(e[0]==="<"&&e[e.length-1]===">"&&e.length>=3){o=[null,e,null]}else{o=R.exec(e)}if(o&&(o[1]||!t)){if(o[1]){t=t instanceof x?t[0]:t;x.merge(this,x.parseHTML(o[1],t&&t.nodeType?t.ownerDocument||t:i,true));if(A.test(o[1])&&x.isPlainObject(t)){for(o in t){if(v(this[o])){this[o](t[o])}else{this.attr(o,t[o])}}}return this}else{r=i.getElementById(o[2]);if(r){this[0]=r;this.length=1}return this}}else if(!t||t.jquery){return(t||n).find(e)}else{return this.constructor(t).find(e)}}else if(e.nodeType){this[0]=e;this.length=1;return this}else if(v(e)){return n.ready!==undefined?n.ready(e):e(x)}return x.makeArray(e,this)};L.prototype=x.fn;D=x(i);var O=/^(?:parents|prev(?:Until|All))/,P={children:true,contents:true,next:true,prev:true};x.fn.extend({has:function(e){var t=x(e,this),n=t.length;return this.filter(function(){var e=0;for(;e<n;e++){if(x.contains(this,t[e])){return true}}})},closest:function(e,t){var n,i=0,o=this.length,r=[],a=typeof e!=="string"&&x(e);if(!N.test(e)){for(;i<o;i++){for(n=this[i];n&&n!==t;n=n.parentNode){if(n.nodeType<11&&(a?a.index(n)>-1:n.nodeType===1&&x.find.matchesSelector(n,e))){r.push(n);break}}}}return this.pushStack(r.length>1?x.uniqueSort(r):r)},index:function(e){if(!e){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1}if(typeof e==="string"){return l.call(x(e),this[0])}return l.call(this,e.jquery?e[0]:e)},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(e==null?this.prevObject:this.prevObject.filter(e))}});function H(e,t){while((e=e[t])&&e.nodeType!==1){}return e}x.each({parent:function(e){var t=e.parentNode;return t&&t.nodeType!==11?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){if($(e,"iframe")){return e.contentDocument}if($(e,"template")){e=e.content||e}return x.merge([],e.childNodes)}},function(e,t){x.fn[e]=function(n,i){var o=x.map(this,t,n);if(e.slice(-5)!=="Until"){i=n}if(i&&typeof i==="string"){o=x.filter(i,o)}if(this.length>1){if(!P[e]){x.uniqueSort(o)}if(O.test(e)){o.reverse()}}return this.pushStack(o)}});var F=/[^\x20\t\r\n\f]+/g;function j(e){var t={};x.each(e.match(F)||[],function(e,n){t[n]=true});return t}x.Callbacks=function(e){e=typeof e==="string"?j(e):x.extend({},e);var t,n,i,o,r=[],a=[],s=-1,l=function(){o=o||e.once;i=t=true;for(;a.length;s=-1){n=a.shift();while(++s<r.length){if(r[s].apply(n[0],n[1])===false&&e.stopOnFalse){s=r.length;n=false}}}if(!e.memory){n=false}t=false;if(o){if(n){r=[]}else{r=""}}},u={add:function(){if(r){if(n&&!t){s=r.length-1;a.push(n)}(function t(n){x.each(n,function(n,i){if(v(i)){if(!e.unique||!u.has(i)){r.push(i)}}else if(i&&i.length&&y(i)!=="string"){t(i)}})})(arguments);if(n&&!t){l()}}return this},remove:function(){x.each(arguments,function(e,t){var n;while((n=x.inArray(t,r,n))>-1){r.splice(n,1);if(n<=s){s--}}});return this},has:function(e){return e?x.inArray(e,r)>-1:r.length>0},empty:function(){if(r){r=[]}return this},disable:function(){o=a=[];r=n="";return this},disabled:function(){return!r},lock:function(){o=a=[];if(!n&&!t){r=n=""}return this},locked:function(){return!!o},fireWith:function(e,n){if(!o){n=n||[];n=[e,n.slice?n.slice():n];a.push(n);if(!t){l()}}return this},fire:function(){u.fireWith(this,arguments);return this},fired:function(){return!!i}};return u};function M(e){return e}function B(e){throw e}function z(e,t,n,i){var o;try{if(e&&v(o=e.promise)){o.call(e).done(t).fail(n)}else if(e&&v(o=e.then)){o.call(e,t,n)}else{t.apply(undefined,[e].slice(i))}}catch(e){n.apply(undefined,[e])}}x.extend({Deferred:function(t){var n=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){r.done(arguments).fail(arguments);return this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return x.Deferred(function(t){x.each(n,function(n,i){var o=v(e[i[4]])&&e[i[4]];r[i[1]](function(){var e=o&&o.apply(this,arguments);if(e&&v(e.promise)){e.promise().progress(t.notify).done(t.resolve).fail(t.reject)}else{t[i[0]+"With"](this,o?[e]:arguments)}})});e=null}).promise()},then:function(t,i,o){var r=0;function a(t,n,i,o){return function(){var s=this,l=arguments,u=function(){var e,u;if(t<r){return}e=i.apply(s,l);if(e===n.promise()){throw new TypeError("Thenable self-resolution")}u=e&&(typeof e==="object"||typeof e==="function")&&e.then;if(v(u)){if(o){u.call(e,a(r,n,M,o),a(r,n,B,o))}else{r++;u.call(e,a(r,n,M,o),a(r,n,B,o),a(r,n,M,n.notifyWith))}}else{if(i!==M){s=undefined;l=[e]}(o||n.resolveWith)(s,l)}},c=o?u:function(){try{u()}catch(e){if(x.Deferred.exceptionHook){x.Deferred.exceptionHook(e,c.stackTrace)}if(t+1>=r){if(i!==B){s=undefined;l=[e]}n.rejectWith(s,l)}}};if(t){c()}else{if(x.Deferred.getStackHook){c.stackTrace=x.Deferred.getStackHook()}e.setTimeout(c)}}}return x.Deferred(function(e){n[0][3].add(a(0,e,v(o)?o:M,e.notifyWith));n[1][3].add(a(0,e,v(t)?t:M));n[2][3].add(a(0,e,v(i)?i:B))}).promise()},promise:function(e){return e!=null?x.extend(e,o):o}},r={};x.each(n,function(e,t){var a=t[2],s=t[5];o[t[1]]=a.add;if(s){a.add(function(){i=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock)}a.add(t[3].fire);r[t[0]]=function(){r[t[0]+"With"](this===r?undefined:this,arguments);return this};r[t[0]+"With"]=a.fireWith});o.promise(r);if(t){t.call(r,r)}return r},when:function(e){var t=arguments.length,n=t,i=Array(n),o=r.call(arguments),a=x.Deferred(),s=function(e){return function(n){i[e]=this;o[e]=arguments.length>1?r.call(arguments):n;if(!--t){a.resolveWith(i,o)}}};if(t<=1){z(e,a.done(s(n)).resolve,a.reject,!t);if(a.state()==="pending"||v(o[n]&&o[n].then)){return a.then()}}while(n--){z(o[n],s(n),a.reject)}return a.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(t,n){if(e.console&&e.console.warn&&t&&q.test(t.name)){e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)}};x.readyException=function(t){e.setTimeout(function(){throw t})};var U=x.Deferred();x.fn.ready=function(e){U.then(e).catch(function(e){x.readyException(e)});return this};x.extend({isReady:false,readyWait:1,ready:function(e){if(e===true?--x.readyWait:x.isReady){return}x.isReady=true;if(e!==true&&--x.readyWait>0){return}U.resolveWith(i,[x])}});x.ready.then=U.then;function K(){i.removeEventListener("DOMContentLoaded",K);e.removeEventListener("load",K);x.ready()}if(i.readyState==="complete"||i.readyState!=="loading"&&!i.documentElement.doScroll){e.setTimeout(x.ready)}else{i.addEventListener("DOMContentLoaded",K);e.addEventListener("load",K)}var W=function(e,t,n,i,o,r,a){var s=0,l=e.length,u=n==null;if(y(n)==="object"){o=true;for(s in n){W(e,t,s,n[s],true,r,a)}}else if(i!==undefined){o=true;if(!v(i)){a=true}if(u){if(a){t.call(e,i);t=null}else{u=t;t=function(e,t,n){return u.call(x(e),n)}}}if(t){for(;s<l;s++){t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)))}}}if(o){return e}if(u){return t.call(e)}return l?t(e[0],n):r};var _=/^-ms-/,V=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function Q(e){return e.replace(_,"ms-").replace(V,G)}var X=function(e){return e.nodeType===1||e.nodeType===9||!+e.nodeType};function Y(){this.expando=x.expando+Y.uid++}Y.uid=1;Y.prototype={cache:function(e){var t=e[this.expando];if(!t){t={};if(X(e)){if(e.nodeType){e[this.expando]=t}else{Object.defineProperty(e,this.expando,{value:t,configurable:true})}}}return t},set:function(e,t,n){var i,o=this.cache(e);if(typeof t==="string"){o[Q(t)]=n}else{for(i in t){o[Q(i)]=t[i]}}return o},get:function(e,t){return t===undefined?this.cache(e):e[this.expando]&&e[this.expando][Q(t)]},access:function(e,t,n){if(t===undefined||t&&typeof t==="string"&&n===undefined){return this.get(e,t)}this.set(e,t,n);return n!==undefined?n:t},remove:function(e,t){var n,i=e[this.expando];if(i===undefined){return}if(t!==undefined){if(Array.isArray(t)){t=t.map(Q)}else{t=Q(t);t=t in i?[t]:t.match(F)||[]}n=t.length;while(n--){delete i[t[n]]}}if(t===undefined||x.isEmptyObject(i)){if(e.nodeType){e[this.expando]=undefined}else{delete e[this.expando]}}},hasData:function(e){var t=e[this.expando];return t!==undefined&&!x.isEmptyObject(t)}};var J=new Y;var Z=new Y;var ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e){if(e==="true"){return true}if(e==="false"){return false}if(e==="null"){return null}if(e===+e+""){return+e}if(ee.test(e)){return JSON.parse(e)}return e}function ie(e,t,n){var i;if(n===undefined&&e.nodeType===1){i="data-"+t.replace(te,"-$&").toLowerCase();n=e.getAttribute(i);if(typeof n==="string"){try{n=ne(n)}catch(e){}Z.set(e,t,n)}else{n=undefined}}return n}x.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}});x.fn.extend({data:function(e,t){var n,i,o,r=this[0],a=r&&r.attributes;if(e===undefined){if(this.length){o=Z.get(r);if(r.nodeType===1&&!J.get(r,"hasDataAttrs")){n=a.length;while(n--){if(a[n]){i=a[n].name;if(i.indexOf("data-")===0){i=Q(i.slice(5));ie(r,i,o[i])}}}J.set(r,"hasDataAttrs",true)}}return o}if(typeof e==="object"){return this.each(function(){Z.set(this,e)})}return W(this,function(t){var n;if(r&&t===undefined){n=Z.get(r,e);if(n!==undefined){return n}n=ie(r,e);if(n!==undefined){return n}return}this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,true)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}});x.extend({queue:function(e,t,n){var i;if(e){t=(t||"fx")+"queue";i=J.get(e,t);if(n){if(!i||Array.isArray(n)){i=J.access(e,t,x.makeArray(n))}else{i.push(n)}}return i||[]}},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),i=n.length,o=n.shift(),r=x._queueHooks(e,t),a=function(){x.dequeue(e,t)};if(o==="inprogress"){o=n.shift();i--}if(o){if(t==="fx"){n.unshift("inprogress")}delete r.stop;o.call(e,a,r)}if(!i&&r){r.empty.fire()}},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:x.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}});x.fn.extend({queue:function(e,t){var n=2;if(typeof e!=="string"){t=e;e="fx";n--}if(arguments.length<n){return x.queue(this[0],e)}return t===undefined?this:this.each(function(){var n=x.queue(this,e,t);x._queueHooks(this,e);if(e==="fx"&&n[0]!=="inprogress"){x.dequeue(this,e)}})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=x.Deferred(),r=this,a=this.length,s=function(){if(!--i){o.resolveWith(r,[r])}};if(typeof e!=="string"){t=e;e=undefined}e=e||"fx";while(a--){n=J.get(r[a],e+"queueHooks");if(n&&n.empty){i++;n.empty.add(s)}}s();return o.promise(t)}});var oe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var re=new RegExp("^(?:([+-])=|)("+oe+")([a-z%]*)$","i");var ae=["Top","Right","Bottom","Left"];var se=function(e,t){e=t||e;return e.style.display==="none"||e.style.display===""&&x.contains(e.ownerDocument,e)&&x.css(e,"display")==="none"};var le=function(e,t,n,i){var o,r,a={};for(r in t){a[r]=e.style[r];e.style[r]=t[r]}o=n.apply(e,i||[]);for(r in t){e.style[r]=a[r]}return o};function ue(e,t,n,i){var o,r,a=20,s=i?function(){return i.cur()}:function(){return x.css(e,t,"")},l=s(),u=n&&n[3]||(x.cssNumber[t]?"":"px"),c=(x.cssNumber[t]||u!=="px"&&+l)&&re.exec(x.css(e,t));if(c&&c[3]!==u){l=l/2;u=u||c[3];c=+l||1;while(a--){x.style(e,t,c+u);if((1-r)*(1-(r=s()/l||.5))<=0){a=0}c=c/r}c=c*2;x.style(e,t,c+u);n=n||[]}if(n){c=+c||+l||0;o=n[1]?c+(n[1]+1)*n[2]:+n[2];if(i){i.unit=u;i.start=c;i.end=o}}return o}var ce={};function fe(e){var t,n=e.ownerDocument,i=e.nodeName,o=ce[i];if(o){return o}t=n.body.appendChild(n.createElement(i));o=x.css(t,"display");t.parentNode.removeChild(t);if(o==="none"){o="block"}ce[i]=o;return o}function de(e,t){var n,i,o=[],r=0,a=e.length;for(;r<a;r++){i=e[r];if(!i.style){continue}n=i.style.display;if(t){if(n==="none"){o[r]=J.get(i,"display")||null;if(!o[r]){i.style.display=""}}if(i.style.display===""&&se(i)){o[r]=fe(i)}}else{if(n!=="none"){o[r]="none";J.set(i,"display",n)}}}for(r=0;r<a;r++){if(o[r]!=null){e[r].style.display=o[r]}}return e}x.fn.extend({show:function(){return de(this,true)},hide:function(){return de(this)},toggle:function(e){if(typeof e==="boolean"){return e?this.show():this.hide()}return this.each(function(){if(se(this)){x(this).show()}else{x(this).hide()}})}});var he=/^(?:checkbox|radio)$/i;var pe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i;var ve=/^$|^module$|\/(?:java|ecma)script/i;var me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};me.optgroup=me.option;me.tbody=me.tfoot=me.colgroup=me.caption=me.thead;me.th=me.td;function ge(e,t){var n;if(typeof e.getElementsByTagName!=="undefined"){n=e.getElementsByTagName(t||"*")}else if(typeof e.querySelectorAll!=="undefined"){n=e.querySelectorAll(t||"*")}else{n=[]}if(t===undefined||t&&$(e,t)){return x.merge([e],n)}return n}function be(e,t){var n=0,i=e.length;for(;n<i;n++){J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}}var ye=/<|&#?\w+;/;function we(e,t,n,i,o){var r,a,s,l,u,c,f=t.createDocumentFragment(),d=[],h=0,p=e.length;for(;h<p;h++){r=e[h];if(r||r===0){if(y(r)==="object"){x.merge(d,r.nodeType?[r]:r)}else if(!ye.test(r)){d.push(t.createTextNode(r))}else{a=a||f.appendChild(t.createElement("div"));s=(pe.exec(r)||["",""])[1].toLowerCase();l=me[s]||me._default;a.innerHTML=l[1]+x.htmlPrefilter(r)+l[2];c=l[0];while(c--){a=a.lastChild}x.merge(d,a.childNodes);a=f.firstChild;a.textContent=""}}}f.textContent="";h=0;while(r=d[h++]){if(i&&x.inArray(r,i)>-1){if(o){o.push(r)}continue}u=x.contains(r.ownerDocument,r);a=ge(f.appendChild(r),"script");if(u){be(a)}if(n){c=0;while(r=a[c++]){if(ve.test(r.type||"")){n.push(r)}}}}return f}(function(){var e=i.createDocumentFragment(),t=e.appendChild(i.createElement("div")),n=i.createElement("input");n.setAttribute("type","radio");n.setAttribute("checked","checked");n.setAttribute("name","t");t.appendChild(n);p.checkClone=t.cloneNode(true).cloneNode(true).lastChild.checked;t.innerHTML="<textarea>x</textarea>";p.noCloneChecked=!!t.cloneNode(true).lastChild.defaultValue})();var xe=i.documentElement;var Ce=/^key/,ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Se(){return true}function Ee(){return false}function Ne(){try{return i.activeElement}catch(e){}}function $e(e,t,n,i,o,r){var a,s;if(typeof t==="object"){if(typeof n!=="string"){i=i||n;n=undefined}for(s in t){$e(e,s,n,i,t[s],r)}return e}if(i==null&&o==null){o=n;i=n=undefined}else if(o==null){if(typeof n==="string"){o=i;i=undefined}else{o=i;i=n;n=undefined}}if(o===false){o=Ee}else if(!o){return e}if(r===1){a=o;o=function(e){x().off(e);return a.apply(this,arguments)};o.guid=a.guid||(a.guid=x.guid++)}return e.each(function(){x.event.add(this,t,o,i,n)})}x.event={global:{},add:function(e,t,n,i,o){var r,a,s,l,u,c,f,d,h,p,v,m=J.get(e);if(!m){return}if(n.handler){r=n;n=r.handler;o=r.selector}if(o){x.find.matchesSelector(xe,o)}if(!n.guid){n.guid=x.guid++}if(!(l=m.events)){l=m.events={}}if(!(a=m.handle)){a=m.handle=function(t){return typeof x!=="undefined"&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):undefined}}t=(t||"").match(F)||[""];u=t.length;while(u--){s=Te.exec(t[u])||[];h=v=s[1];p=(s[2]||"").split(".").sort();if(!h){continue}f=x.event.special[h]||{};h=(o?f.delegateType:f.bindType)||h;f=x.event.special[h]||{};c=x.extend({type:h,origType:v,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&x.expr.match.needsContext.test(o),namespace:p.join(".")},r);if(!(d=l[h])){d=l[h]=[];d.delegateCount=0;if(!f.setup||f.setup.call(e,i,p,a)===false){if(e.addEventListener){e.addEventListener(h,a)}}}if(f.add){f.add.call(e,c);if(!c.handler.guid){c.handler.guid=n.guid}}if(o){d.splice(d.delegateCount++,0,c)}else{d.push(c)}x.event.global[h]=true}},remove:function(e,t,n,i,o){var r,a,s,l,u,c,f,d,h,p,v,m=J.hasData(e)&&J.get(e);if(!m||!(l=m.events)){return}t=(t||"").match(F)||[""];u=t.length;while(u--){s=Te.exec(t[u])||[];h=v=s[1];p=(s[2]||"").split(".").sort();if(!h){for(h in l){x.event.remove(e,h+t[u],n,i,true)}continue}f=x.event.special[h]||{};h=(i?f.delegateType:f.bindType)||h;d=l[h]||[];s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)");a=r=d.length;while(r--){c=d[r];if((o||v===c.origType)&&(!n||n.guid===c.guid)&&(!s||s.test(c.namespace))&&(!i||i===c.selector||i==="**"&&c.selector)){d.splice(r,1);if(c.selector){d.delegateCount--}if(f.remove){f.remove.call(e,c)}}}if(a&&!d.length){if(!f.teardown||f.teardown.call(e,p,m.handle)===false){x.removeEvent(e,h,m.handle)}delete l[h]}}if(x.isEmptyObject(l)){J.remove(e,"handle events")}},dispatch:function(e){var t=x.event.fix(e);var n,i,o,r,a,s,l=new Array(arguments.length),u=(J.get(this,"events")||{})[t.type]||[],c=x.event.special[t.type]||{};l[0]=t;for(n=1;n<arguments.length;n++){l[n]=arguments[n]}t.delegateTarget=this;if(c.preDispatch&&c.preDispatch.call(this,t)===false){return}s=x.event.handlers.call(this,t,u);n=0;while((r=s[n++])&&!t.isPropagationStopped()){t.currentTarget=r.elem;i=0;while((a=r.handlers[i++])&&!t.isImmediatePropagationStopped()){if(!t.rnamespace||t.rnamespace.test(a.namespace)){t.handleObj=a;t.data=a.data;o=((x.event.special[a.origType]||{}).handle||a.handler).apply(r.elem,l);if(o!==undefined){if((t.result=o)===false){t.preventDefault();t.stopPropagation()}}}}}if(c.postDispatch){c.postDispatch.call(this,t)}return t.result},handlers:function(e,t){var n,i,o,r,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!(e.type==="click"&&e.button>=1)){for(;u!==this;u=u.parentNode||this){if(u.nodeType===1&&!(e.type==="click"&&u.disabled===true)){r=[];a={};for(n=0;n<l;n++){i=t[n];o=i.selector+" ";if(a[o]===undefined){a[o]=i.needsContext?x(o,this).index(u)>-1:x.find(o,this,null,[u]).length}if(a[o]){r.push(i)}}if(r.length){s.push({elem:u,handlers:r})}}}}u=this;if(l<t.length){s.push({elem:u,handlers:t.slice(l)})}return s},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:true,configurable:true,get:v(t)?function(){if(this.originalEvent){return t(this.originalEvent)}}:function(){if(this.originalEvent){return this.originalEvent[e]}},set:function(t){Object.defineProperty(this,e,{enumerable:true,configurable:true,writable:true,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:true},focus:{trigger:function(){if(this!==Ne()&&this.focus){this.focus();return false}},delegateType:"focusin"},blur:{trigger:function(){if(this===Ne()&&this.blur){this.blur();return false}},delegateType:"focusout"},click:{trigger:function(){if(this.type==="checkbox"&&this.click&&$(this,"input")){this.click();return false}},_default:function(e){return $(e.target,"a")}},beforeunload:{postDispatch:function(e){if(e.result!==undefined&&e.originalEvent){e.originalEvent.returnValue=e.result}}}}};x.removeEvent=function(e,t,n){if(e.removeEventListener){e.removeEventListener(t,n)}};x.Event=function(e,t){if(!(this instanceof x.Event)){return new x.Event(e,t)}if(e&&e.type){this.originalEvent=e;this.type=e.type;this.isDefaultPrevented=e.defaultPrevented||e.defaultPrevented===undefined&&e.returnValue===false?Se:Ee;this.target=e.target&&e.target.nodeType===3?e.target.parentNode:e.target;this.currentTarget=e.currentTarget;this.relatedTarget=e.relatedTarget}else{this.type=e}if(t){x.extend(this,t)}this.timeStamp=e&&e.timeStamp||Date.now();this[x.expando]=true};x.Event.prototype={constructor:x.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:false,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se;if(e&&!this.isSimulated){e.preventDefault()}},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se;if(e&&!this.isSimulated){e.stopPropagation()}},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se;if(e&&!this.isSimulated){e.stopImmediatePropagation()}this.stopPropagation()}};x.each({altKey:true,bubbles:true,cancelable:true,changedTouches:true,ctrlKey:true,detail:true,eventPhase:true,metaKey:true,pageX:true,pageY:true,shiftKey:true,view:true,char:true,charCode:true,key:true,keyCode:true,button:true,buttons:true,clientX:true,clientY:true,offsetX:true,offsetY:true,pointerId:true,pointerType:true,screenX:true,screenY:true,targetTouches:true,toElement:true,touches:true,which:function(e){var t=e.button;if(e.which==null&&Ce.test(e.type)){return e.charCode!=null?e.charCode:e.keyCode}if(!e.which&&t!==undefined&&ke.test(e.type)){if(t&1){return 1}if(t&2){return 3}if(t&4){return 2}return 0}return e.which}},x.event.addProp);x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,o=e.relatedTarget,r=e.handleObj;if(!o||o!==i&&!x.contains(i,o)){e.type=r.origType;n=r.handler.apply(this,arguments);e.type=t}return n}}});x.fn.extend({on:function(e,t,n,i){return $e(this,e,t,n,i)},one:function(e,t,n,i){return $e(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj){i=e.handleObj;x(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler);return this}if(typeof e==="object"){for(o in e){this.off(o,t,e[o])}return this}if(t===false||typeof t==="function"){n=t;t=undefined}if(n===false){n=Ee}return this.each(function(){x.event.remove(this,e,n,t)})}});var Ae=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ie=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Re=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e,t){if($(e,"table")&&$(t.nodeType!==11?t:t.firstChild,"tr")){return x(e).children("tbody")[0]||e}return e}function Oe(e){e.type=(e.getAttribute("type")!==null)+"/"+e.type;return e}function Pe(e){if((e.type||"").slice(0,5)==="true/"){e.type=e.type.slice(5)}else{e.removeAttribute("type")}return e}function He(e,t){var n,i,o,r,a,s,l,u;if(t.nodeType!==1){return}if(J.hasData(e)){r=J.access(e);a=J.set(t,r);u=r.events;if(u){delete a.handle;a.events={};for(o in u){for(n=0,i=u[o].length;n<i;n++){x.event.add(t,o,u[o][n])}}}}if(Z.hasData(e)){s=Z.access(e);l=x.extend({},s);Z.set(t,l)}}function Fe(e,t){var n=t.nodeName.toLowerCase();if(n==="input"&&he.test(e.type)){t.checked=e.checked}else if(n==="input"||n==="textarea"){t.defaultValue=e.defaultValue}}function je(e,t,n,i){t=a.apply([],t);var o,r,s,l,u,c,f=0,d=e.length,h=d-1,m=t[0],g=v(m);if(g||d>1&&typeof m==="string"&&!p.checkClone&&De.test(m)){return e.each(function(o){var r=e.eq(o);if(g){t[0]=m.call(this,o,r.html())}je(r,t,n,i)})}if(d){o=we(t,e[0].ownerDocument,false,e,i);r=o.firstChild;if(o.childNodes.length===1){o=r}if(r||i){s=x.map(ge(o,"script"),Oe);l=s.length;for(;f<d;f++){u=o;if(f!==h){u=x.clone(u,true,true);if(l){x.merge(s,ge(u,"script"))}}n.call(e[f],u,f)}if(l){c=s[s.length-1].ownerDocument;x.map(s,Pe);for(f=0;f<l;f++){u=s[f];if(ve.test(u.type||"")&&!J.access(u,"globalEval")&&x.contains(c,u)){if(u.src&&(u.type||"").toLowerCase()!=="module"){if(x._evalUrl){x._evalUrl(u.src)}}else{b(u.textContent.replace(Re,""),c,u)}}}}}}return e}function Me(e,t,n){var i,o=t?x.filter(t,e):e,r=0;for(;(i=o[r])!=null;r++){if(!n&&i.nodeType===1){x.cleanData(ge(i))}if(i.parentNode){if(n&&x.contains(i.ownerDocument,i)){be(ge(i,"script"))}i.parentNode.removeChild(i)}}return e}x.extend({htmlPrefilter:function(e){return e.replace(Ae,"<$1></$2>")},clone:function(e,t,n){var i,o,r,a,s=e.cloneNode(true),l=x.contains(e.ownerDocument,e);if(!p.noCloneChecked&&(e.nodeType===1||e.nodeType===11)&&!x.isXMLDoc(e)){a=ge(s);r=ge(e);for(i=0,o=r.length;i<o;i++){Fe(r[i],a[i])}}if(t){if(n){r=r||ge(e);a=a||ge(s);for(i=0,o=r.length;i<o;i++){He(r[i],a[i])}}else{He(e,s)}}a=ge(s,"script");if(a.length>0){be(a,!l&&ge(e,"script"))}return s},cleanData:function(e){var t,n,i,o=x.event.special,r=0;for(;(n=e[r])!==undefined;r++){if(X(n)){if(t=n[J.expando]){if(t.events){for(i in t.events){if(o[i]){x.event.remove(n,i)}else{x.removeEvent(n,i,t.handle)}}}n[J.expando]=undefined}if(n[Z.expando]){n[Z.expando]=undefined}}}}});x.fn.extend({detach:function(e){return Me(this,e,true)},remove:function(e){return Me(this,e)},text:function(e){return W(this,function(e){return e===undefined?x.text(this):this.empty().each(function(){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){this.textContent=e}})},null,e,arguments.length)},append:function(){return je(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Le(this,e);t.appendChild(e)}})},prepend:function(){return je(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return je(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this)}})},after:function(){return je(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this.nextSibling)}})},empty:function(){var e,t=0;for(;(e=this[t])!=null;t++){if(e.nodeType===1){x.cleanData(ge(e,false));e.textContent=""}}return this},clone:function(e,t){e=e==null?false:e;t=t==null?e:t;return this.map(function(){return x.clone(this,e,t)})},html:function(e){return W(this,function(e){var t=this[0]||{},n=0,i=this.length;if(e===undefined&&t.nodeType===1){return t.innerHTML}if(typeof e==="string"&&!Ie.test(e)&&!me[(pe.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;n<i;n++){t=this[n]||{};if(t.nodeType===1){x.cleanData(ge(t,false));t.innerHTML=e}}t=0}catch(e){}}if(t){this.empty().append(e)}},null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,function(t){var n=this.parentNode;if(x.inArray(this,e)<0){x.cleanData(ge(this));if(n){n.replaceChild(t,this)}}},e)}});x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){x.fn[e]=function(e){var n,i=[],o=x(e),r=o.length-1,a=0;for(;a<=r;a++){n=a===r?this:this.clone(true);x(o[a])[t](n);s.apply(i,n.get())}return this.pushStack(i)}});var Be=new RegExp("^("+oe+")(?!px)[a-z%]+$","i");var ze=function(t){var n=t.ownerDocument.defaultView;if(!n||!n.opener){n=e}return n.getComputedStyle(t)};var qe=new RegExp(ae.join("|"),"i");(function(){function t(){if(!c){return}u.style.cssText="position:absolute;left:-11111px;width:60px;"+"margin-top:1px;padding:0;border:0";c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;"+"margin:auto;border:1px;padding:1px;"+"width:60%;top:1%";xe.appendChild(u).appendChild(c);var t=e.getComputedStyle(c);o=t.top!=="1%";l=n(t.marginLeft)===12;c.style.right="60%";s=n(t.right)===36;r=n(t.width)===36;c.style.position="absolute";a=c.offsetWidth===36||"absolute";xe.removeChild(u);c=null}function n(e){return Math.round(parseFloat(e))}var o,r,a,s,l,u=i.createElement("div"),c=i.createElement("div");if(!c.style){return}c.style.backgroundClip="content-box";c.cloneNode(true).style.backgroundClip="";p.clearCloneStyle=c.style.backgroundClip==="content-box";x.extend(p,{boxSizingReliable:function(){t();return r},pixelBoxStyles:function(){t();return s},pixelPosition:function(){t();return o},reliableMarginLeft:function(){t();return l},scrollboxSize:function(){t();return a}})})();function Ue(e,t,n){var i,o,r,a,s=e.style;n=n||ze(e);if(n){a=n.getPropertyValue(t)||n[t];if(a===""&&!x.contains(e.ownerDocument,e)){a=x.style(e,t)}if(!p.pixelBoxStyles()&&Be.test(a)&&qe.test(t)){i=s.width;o=s.minWidth;r=s.maxWidth;s.minWidth=s.maxWidth=s.width=a;a=n.width;s.width=i;s.minWidth=o;s.maxWidth=r}}return a!==undefined?a+"":a}function Ke(e,t){return{get:function(){if(e()){delete this.get;return}return(this.get=t).apply(this,arguments)}}}var We=/^(none|table(?!-c[ea]).+)/,_e=/^--/,Ve={position:"absolute",visibility:"hidden",display:"block"},Ge={letterSpacing:"0",fontWeight:"400"},Qe=["Webkit","Moz","ms"],Xe=i.createElement("div").style;function Ye(e){if(e in Xe){return e}var t=e[0].toUpperCase()+e.slice(1),n=Qe.length;while(n--){e=Qe[n]+t;if(e in Xe){return e}}}function Je(e){var t=x.cssProps[e];if(!t){t=x.cssProps[e]=Ye(e)||e}return t}function Ze(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function et(e,t,n,i,o,r){var a=t==="width"?1:0,s=0,l=0;if(n===(i?"border":"content")){return 0}for(;a<4;a+=2){if(n==="margin"){l+=x.css(e,n+ae[a],true,o)}if(!i){l+=x.css(e,"padding"+ae[a],true,o);if(n!=="padding"){l+=x.css(e,"border"+ae[a]+"Width",true,o)}else{s+=x.css(e,"border"+ae[a]+"Width",true,o)}}else{if(n==="content"){l-=x.css(e,"padding"+ae[a],true,o)}if(n!=="margin"){l-=x.css(e,"border"+ae[a]+"Width",true,o)}}}if(!i&&r>=0){l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-s-.5))}return l}function tt(e,t,n){var i=ze(e),o=Ue(e,t,i),r=x.css(e,"boxSizing",false,i)==="border-box",a=r;if(Be.test(o)){if(!n){return o}o="auto"}a=a&&(p.boxSizingReliable()||o===e.style[t]);if(o==="auto"||!parseFloat(o)&&x.css(e,"display",false,i)==="inline"){o=e["offset"+t[0].toUpperCase()+t.slice(1)];a=true}o=parseFloat(o)||0;return o+et(e,t,n||(r?"border":"content"),a,i,o)+"px"}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ue(e,"opacity");return n===""?"1":n}}}},cssNumber:{animationIterationCount:true,columnCount:true,fillOpacity:true,flexGrow:true,flexShrink:true,fontWeight:true,lineHeight:true,opacity:true,order:true,orphans:true,widows:true,zIndex:true,zoom:true},cssProps:{},style:function(e,t,n,i){if(!e||e.nodeType===3||e.nodeType===8||!e.style){return}var o,r,a,s=Q(t),l=_e.test(t),u=e.style;if(!l){t=Je(s)}a=x.cssHooks[t]||x.cssHooks[s];if(n!==undefined){r=typeof n;if(r==="string"&&(o=re.exec(n))&&o[1]){n=ue(e,t,o);r="number"}if(n==null||n!==n){return}if(r==="number"){n+=o&&o[3]||(x.cssNumber[s]?"":"px")}if(!p.clearCloneStyle&&n===""&&t.indexOf("background")===0){u[t]="inherit"}if(!a||!("set"in a)||(n=a.set(e,n,i))!==undefined){if(l){u.setProperty(t,n)}else{u[t]=n}}}else{if(a&&"get"in a&&(o=a.get(e,false,i))!==undefined){return o}return u[t]}},css:function(e,t,n,i){var o,r,a,s=Q(t),l=_e.test(t);if(!l){t=Je(s)}a=x.cssHooks[t]||x.cssHooks[s];if(a&&"get"in a){o=a.get(e,true,n)}if(o===undefined){o=Ue(e,t,i)}if(o==="normal"&&t in Ge){o=Ge[t]}if(n===""||n){r=parseFloat(o);return n===true||isFinite(r)?r||0:o}return o}});x.each(["height","width"],function(e,t){x.cssHooks[t]={get:function(e,n,i){if(n){return We.test(x.css(e,"display"))&&(!e.getClientRects().length||!e.getBoundingClientRect().width)?le(e,Ve,function(){return tt(e,t,i)}):tt(e,t,i)}},set:function(e,n,i){var o,r=ze(e),a=x.css(e,"boxSizing",false,r)==="border-box",s=i&&et(e,t,i,a,r);if(a&&p.scrollboxSize()===r.position){s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(r[t])-et(e,t,"border",false,r)-.5)}if(s&&(o=re.exec(n))&&(o[3]||"px")!=="px"){e.style[t]=n;n=x.css(e,t)}return Ze(e,n,s)}}});x.cssHooks.marginLeft=Ke(p.reliableMarginLeft,function(e,t){if(t){return(parseFloat(Ue(e,"marginLeft"))||e.getBoundingClientRect().left-le(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}});x.each({margin:"",padding:"",border:"Width"},function(e,t){x.cssHooks[e+t]={expand:function(n){var i=0,o={},r=typeof n==="string"?n.split(" "):[n];for(;i<4;i++){o[e+ae[i]+t]=r[i]||r[i-2]||r[0]}return o}};if(e!=="margin"){x.cssHooks[e+t].set=Ze}});x.fn.extend({css:function(e,t){return W(this,function(e,t,n){var i,o,r={},a=0;if(Array.isArray(t)){i=ze(e);o=t.length;for(;a<o;a++){r[t[a]]=x.css(e,t[a],false,i)}return r}return n!==undefined?x.style(e,t,n):x.css(e,t)},e,t,arguments.length>1)}});function nt(e,t,n,i,o){return new nt.prototype.init(e,t,n,i,o)}x.Tween=nt;nt.prototype={constructor:nt,init:function(e,t,n,i,o,r){this.elem=e;this.prop=n;this.easing=o||x.easing._default;this.options=t;this.start=this.now=this.cur();this.end=i;this.unit=r||(x.cssNumber[n]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,n=nt.propHooks[this.prop];if(this.options.duration){this.pos=t=x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration)}else{this.pos=t=e}this.now=(this.end-this.start)*t+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this)}if(n&&n.set){n.set(this)}else{nt.propHooks._default.set(this)}return this}};nt.prototype.init.prototype=nt.prototype;nt.propHooks={_default:{get:function(e){var t;if(e.elem.nodeType!==1||e.elem[e.prop]!=null&&e.elem.style[e.prop]==null){return e.elem[e.prop]}t=x.css(e.elem,e.prop,"");return!t||t==="auto"?0:t},set:function(e){if(x.fx.step[e.prop]){x.fx.step[e.prop](e)}else if(e.elem.nodeType===1&&(e.elem.style[x.cssProps[e.prop]]!=null||x.cssHooks[e.prop])){x.style(e.elem,e.prop,e.now+e.unit)}else{e.elem[e.prop]=e.now}}}};nt.propHooks.scrollTop=nt.propHooks.scrollLeft={set:function(e){if(e.elem.nodeType&&e.elem.parentNode){e.elem[e.prop]=e.now}}};x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"};x.fx=nt.prototype.init;x.fx.step={};var it,ot,rt=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function st(){if(ot){if(i.hidden===false&&e.requestAnimationFrame){e.requestAnimationFrame(st)}else{e.setTimeout(st,x.fx.interval)}x.fx.tick()}}function lt(){e.setTimeout(function(){it=undefined});return it=Date.now()}function ut(e,t){var n,i=0,o={height:e};t=t?1:0;for(;i<4;i+=2-t){n=ae[i];o["margin"+n]=o["padding"+n]=e}if(t){o.opacity=o.width=e}return o}function ct(e,t,n){var i,o=(ht.tweeners[t]||[]).concat(ht.tweeners["*"]),r=0,a=o.length;for(;r<a;r++){if(i=o[r].call(n,t,e)){return i}}}function ft(e,t,n){var i,o,r,a,s,l,u,c,f="width"in t||"height"in t,d=this,h={},p=e.style,v=e.nodeType&&se(e),m=J.get(e,"fxshow");if(!n.queue){a=x._queueHooks(e,"fx");if(a.unqueued==null){a.unqueued=0;s=a.empty.fire;a.empty.fire=function(){if(!a.unqueued){s()}}}a.unqueued++;d.always(function(){d.always(function(){a.unqueued--;if(!x.queue(e,"fx").length){a.empty.fire()}})})}for(i in t){o=t[i];if(rt.test(o)){delete t[i];r=r||o==="toggle";if(o===(v?"hide":"show")){if(o==="show"&&m&&m[i]!==undefined){v=true}else{continue}}h[i]=m&&m[i]||x.style(e,i)}}l=!x.isEmptyObject(t);if(!l&&x.isEmptyObject(h)){return}if(f&&e.nodeType===1){n.overflow=[p.overflow,p.overflowX,p.overflowY];u=m&&m.display;if(u==null){u=J.get(e,"display")}c=x.css(e,"display");if(c==="none"){if(u){c=u}else{de([e],true);u=e.style.display||u;c=x.css(e,"display");de([e])}}if(c==="inline"||c==="inline-block"&&u!=null){if(x.css(e,"float")==="none"){if(!l){d.done(function(){p.display=u});if(u==null){c=p.display;u=c==="none"?"":c}}p.display="inline-block"}}}if(n.overflow){p.overflow="hidden";d.always(function(){p.overflow=n.overflow[0];p.overflowX=n.overflow[1];p.overflowY=n.overflow[2]})}l=false;for(i in h){if(!l){if(m){if("hidden"in m){v=m.hidden}}else{m=J.access(e,"fxshow",{display:u})}if(r){m.hidden=!v}if(v){de([e],true)}d.done(function(){if(!v){de([e])}J.remove(e,"fxshow");for(i in h){x.style(e,i,h[i])}})}l=ct(v?m[i]:0,i,d);if(!(i in m)){m[i]=l.start;if(v){l.end=l.start;l.start=0}}}}function dt(e,t){var n,i,o,r,a;for(n in e){i=Q(n);o=t[i];r=e[n];if(Array.isArray(r)){o=r[1];r=e[n]=r[0]}if(n!==i){e[i]=r;delete e[n]}a=x.cssHooks[i];if(a&&"expand"in a){r=a.expand(r);delete e[i];for(n in r){if(!(n in e)){e[n]=r[n];t[n]=o}}}else{t[i]=o}}}function ht(e,t,n){var i,o,r=0,a=ht.prefilters.length,s=x.Deferred().always(function(){delete l.elem}),l=function(){if(o){return false}var t=it||lt(),n=Math.max(0,u.startTime+u.duration-t),i=n/u.duration||0,r=1-i,a=0,l=u.tweens.length;for(;a<l;a++){u.tweens[a].run(r)}s.notifyWith(e,[u,r,n]);if(r<1&&l){return n}if(!l){s.notifyWith(e,[u,1,0])}s.resolveWith(e,[u]);return false},u=s.promise({elem:e,props:x.extend({},t),opts:x.extend(true,{specialEasing:{},easing:x.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var i=x.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);u.tweens.push(i);return i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(o){return this}o=true;for(;n<i;n++){u.tweens[n].run(1)}if(t){s.notifyWith(e,[u,1,0]);s.resolveWith(e,[u,t])}else{s.rejectWith(e,[u,t])}return this}}),c=u.props;dt(c,u.opts.specialEasing);for(;r<a;r++){i=ht.prefilters[r].call(u,e,c,u.opts);if(i){if(v(i.stop)){x._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)}return i}}x.map(c,ct,u);if(v(u.opts.start)){u.opts.start.call(e,u)}u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always);x.fx.timer(x.extend(l,{elem:e,anim:u,queue:u.opts.queue}));return u}x.Animation=x.extend(ht,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);ue(n.elem,e,re.exec(t),n);return n}]},tweener:function(e,t){if(v(e)){t=e;e=["*"]}else{e=e.match(F)}var n,i=0,o=e.length;for(;i<o;i++){n=e[i];ht.tweeners[n]=ht.tweeners[n]||[];ht.tweeners[n].unshift(t)}},prefilters:[ft],prefilter:function(e,t){if(t){ht.prefilters.unshift(e)}else{ht.prefilters.push(e)}}});x.speed=function(e,t,n){var i=e&&typeof e==="object"?x.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};if(x.fx.off){i.duration=0}else{if(typeof i.duration!=="number"){if(i.duration in x.fx.speeds){i.duration=x.fx.speeds[i.duration]}else{i.duration=x.fx.speeds._default}}}if(i.queue==null||i.queue===true){i.queue="fx"}i.old=i.complete;i.complete=function(){if(v(i.old)){i.old.call(this)}if(i.queue){x.dequeue(this,i.queue)}};return i};x.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=x.isEmptyObject(e),r=x.speed(t,n,i),a=function(){var t=ht(this,x.extend({},e),r);if(o||J.get(this,"finish")){t.stop(true)}};a.finish=a;return o||r.queue===false?this.each(a):this.queue(r.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop;t(n)};if(typeof e!=="string"){n=t;t=e;e=undefined}if(t&&e!==false){this.queue(e||"fx",[])}return this.each(function(){var t=true,o=e!=null&&e+"queueHooks",r=x.timers,a=J.get(this);if(o){if(a[o]&&a[o].stop){i(a[o])}}else{for(o in a){if(a[o]&&a[o].stop&&at.test(o)){i(a[o])}}}for(o=r.length;o--;){if(r[o].elem===this&&(e==null||r[o].queue===e)){r[o].anim.stop(n);t=false;r.splice(o,1)}}if(t||!n){x.dequeue(this,e)}})},finish:function(e){if(e!==false){e=e||"fx"}return this.each(function(){var t,n=J.get(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=x.timers,a=i?i.length:0;n.finish=true;x.queue(this,e,[]);if(o&&o.stop){o.stop.call(this,true)}for(t=r.length;t--;){if(r[t].elem===this&&r[t].queue===e){r[t].anim.stop(true);r.splice(t,1)}}for(t=0;t<a;t++){if(i[t]&&i[t].finish){i[t].finish.call(this)}}delete n.finish})}});x.each(["toggle","show","hide"],function(e,t){var n=x.fn[t];x.fn[t]=function(e,i,o){return e==null||typeof e==="boolean"?n.apply(this,arguments):this.animate(ut(t,true),e,i,o)}});x.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){x.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}});x.timers=[];x.fx.tick=function(){var e,t=0,n=x.timers;it=Date.now();for(;t<n.length;t++){e=n[t];if(!e()&&n[t]===e){n.splice(t--,1)}}if(!n.length){x.fx.stop()}it=undefined};x.fx.timer=function(e){x.timers.push(e);x.fx.start()};x.fx.interval=13;x.fx.start=function(){if(ot){return}ot=true;st()};x.fx.stop=function(){ot=null};x.fx.speeds={slow:600,fast:200,_default:400};x.fn.delay=function(t,n){t=x.fx?x.fx.speeds[t]||t:t;n=n||"fx";return this.queue(n,function(n,i){var o=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(o)}})};(function(){var e=i.createElement("input"),t=i.createElement("select"),n=t.appendChild(i.createElement("option"));e.type="checkbox";p.checkOn=e.value!=="";p.optSelected=n.selected;e=i.createElement("input");e.value="t";e.type="radio";p.radioValue=e.value==="t"})();var pt,vt=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return W(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})}});x.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(r===3||r===8||r===2){return}if(typeof e.getAttribute==="undefined"){return x.prop(e,t,n)}if(r!==1||!x.isXMLDoc(e)){o=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?pt:undefined)}if(n!==undefined){if(n===null){x.removeAttr(e,t);return}if(o&&"set"in o&&(i=o.set(e,n,t))!==undefined){return i}e.setAttribute(t,n+"");return n}if(o&&"get"in o&&(i=o.get(e,t))!==null){return i}i=x.find.attr(e,t);return i==null?undefined:i},attrHooks:{type:{set:function(e,t){if(!p.radioValue&&t==="radio"&&$(e,"input")){var n=e.value;e.setAttribute("type",t);if(n){e.value=n}return t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(F);if(o&&e.nodeType===1){while(n=o[i++]){e.removeAttribute(n)}}}});pt={set:function(e,t,n){if(t===false){x.removeAttr(e,n)}else{e.setAttribute(n,n)}return n}};x.each(x.expr.match.bool.source.match(/\w+/g),function(e,t){var n=vt[t]||x.find.attr;vt[t]=function(e,t,i){var o,r,a=t.toLowerCase();if(!i){r=vt[a];vt[a]=o;o=n(e,t,i)!=null?a:null;vt[a]=r}return o}});var mt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;x.fn.extend({prop:function(e,t){return W(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[x.propFix[e]||e]})}});x.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(r===3||r===8||r===2){return}if(r!==1||!x.isXMLDoc(e)){t=x.propFix[t]||t;o=x.propHooks[t]}if(n!==undefined){if(o&&"set"in o&&(i=o.set(e,n,t))!==undefined){return i}return e[t]=n}if(o&&"get"in o&&(i=o.get(e,t))!==null){return i}return e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");if(t){return parseInt(t,10)}if(mt.test(e.nodeName)||gt.test(e.nodeName)&&e.href){return 0}return-1}}},propFix:{for:"htmlFor",class:"className"}});if(!p.optSelected){x.propHooks.selected={get:function(e){var t=e.parentNode;if(t&&t.parentNode){t.parentNode.selectedIndex}return null},set:function(e){var t=e.parentNode;if(t){t.selectedIndex;if(t.parentNode){t.parentNode.selectedIndex}}}}}x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this});function bt(e){var t=e.match(F)||[];return t.join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function wt(e){if(Array.isArray(e)){return e}if(typeof e==="string"){return e.match(F)||[]}return[]}x.fn.extend({addClass:function(e){var t,n,i,o,r,a,s,l=0;if(v(e)){return this.each(function(t){x(this).addClass(e.call(this,t,yt(this)))})}t=wt(e);if(t.length){while(n=this[l++]){o=yt(n);i=n.nodeType===1&&" "+bt(o)+" ";if(i){a=0;while(r=t[a++]){if(i.indexOf(" "+r+" ")<0){i+=r+" "}}s=bt(i);if(o!==s){n.setAttribute("class",s)}}}}return this},removeClass:function(e){var t,n,i,o,r,a,s,l=0;if(v(e)){return this.each(function(t){x(this).removeClass(e.call(this,t,yt(this)))})}if(!arguments.length){return this.attr("class","")}t=wt(e);if(t.length){while(n=this[l++]){o=yt(n);i=n.nodeType===1&&" "+bt(o)+" ";if(i){a=0;while(r=t[a++]){while(i.indexOf(" "+r+" ")>-1){i=i.replace(" "+r+" "," ")}}s=bt(i);if(o!==s){n.setAttribute("class",s)}}}}return this},toggleClass:function(e,t){var n=typeof e,i=n==="string"||Array.isArray(e);if(typeof t==="boolean"&&i){return t?this.addClass(e):this.removeClass(e)}if(v(e)){return this.each(function(n){x(this).toggleClass(e.call(this,n,yt(this),t),t)})}return this.each(function(){var t,o,r,a;if(i){o=0;r=x(this);a=wt(e);while(t=a[o++]){if(r.hasClass(t)){r.removeClass(t)}else{r.addClass(t)}}}else if(e===undefined||n==="boolean"){t=yt(this);if(t){J.set(this,"__className__",t)}if(this.setAttribute){this.setAttribute("class",t||e===false?"":J.get(this,"__className__")||"")}}})},hasClass:function(e){var t,n,i=0;t=" "+e+" ";while(n=this[i++]){if(n.nodeType===1&&(" "+bt(yt(n))+" ").indexOf(t)>-1){return true}}return false}});var xt=/\r/g;x.fn.extend({val:function(e){var t,n,i,o=this[0];if(!arguments.length){if(o){t=x.valHooks[o.type]||x.valHooks[o.nodeName.toLowerCase()];if(t&&"get"in t&&(n=t.get(o,"value"))!==undefined){return n}n=o.value;if(typeof n==="string"){return n.replace(xt,"")}return n==null?"":n}return}i=v(e);return this.each(function(n){var o;if(this.nodeType!==1){return}if(i){o=e.call(this,n,x(this).val())}else{o=e}if(o==null){o=""}else if(typeof o==="number"){o+=""}else if(Array.isArray(o)){o=x.map(o,function(e){return e==null?"":e+""})}t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()];if(!t||!("set"in t)||t.set(this,o,"value")===undefined){this.value=o}})}});x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return t!=null?t:bt(x.text(e))}},select:{get:function(e){var t,n,i,o=e.options,r=e.selectedIndex,a=e.type==="select-one",s=a?null:[],l=a?r+1:o.length;if(r<0){i=l}else{i=a?r:0}for(;i<l;i++){n=o[i];if((n.selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!$(n.parentNode,"optgroup"))){t=x(n).val();if(a){return t}s.push(t)}}return s},set:function(e,t){var n,i,o=e.options,r=x.makeArray(t),a=o.length;while(a--){i=o[a];if(i.selected=x.inArray(x.valHooks.option.get(i),r)>-1){n=true}}if(!n){e.selectedIndex=-1}return r}}}});x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t)){return e.checked=x.inArray(x(e).val(),t)>-1}}};if(!p.checkOn){x.valHooks[this].get=function(e){return e.getAttribute("value")===null?"on":e.value}}});p.focusin="onfocusin"in e;var Ct=/^(?:focusinfocus|focusoutblur)$/,kt=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(t,n,o,r){var a,s,l,u,c,d,h,p,g=[o||i],b=f.call(t,"type")?t.type:t,y=f.call(t,"namespace")?t.namespace.split("."):[];s=p=l=o=o||i;if(o.nodeType===3||o.nodeType===8){return}if(Ct.test(b+x.event.triggered)){return}if(b.indexOf(".")>-1){y=b.split(".");b=y.shift();y.sort()}c=b.indexOf(":")<0&&"on"+b;t=t[x.expando]?t:new x.Event(b,typeof t==="object"&&t);t.isTrigger=r?2:3;t.namespace=y.join(".");t.rnamespace=t.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;t.result=undefined;if(!t.target){t.target=o}n=n==null?[t]:x.makeArray(n,[t]);h=x.event.special[b]||{};if(!r&&h.trigger&&h.trigger.apply(o,n)===false){return}if(!r&&!h.noBubble&&!m(o)){u=h.delegateType||b;if(!Ct.test(u+b)){s=s.parentNode}for(;s;s=s.parentNode){g.push(s);l=s}if(l===(o.ownerDocument||i)){g.push(l.defaultView||l.parentWindow||e)}}a=0;while((s=g[a++])&&!t.isPropagationStopped()){p=s;t.type=a>1?u:h.bindType||b;d=(J.get(s,"events")||{})[t.type]&&J.get(s,"handle");if(d){d.apply(s,n)}d=c&&s[c];if(d&&d.apply&&X(s)){t.result=d.apply(s,n);if(t.result===false){t.preventDefault()}}}t.type=b;if(!r&&!t.isDefaultPrevented()){if((!h._default||h._default.apply(g.pop(),n)===false)&&X(o)){if(c&&v(o[b])&&!m(o)){l=o[c];if(l){o[c]=null}x.event.triggered=b;if(t.isPropagationStopped()){p.addEventListener(b,kt)}o[b]();if(t.isPropagationStopped()){p.removeEventListener(b,kt)}x.event.triggered=undefined;if(l){o[c]=l}}}}return t.result},simulate:function(e,t,n){var i=x.extend(new x.Event,n,{type:e,isSimulated:true});x.event.trigger(i,null,t)}});x.fn.extend({trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n){return x.event.trigger(e,t,n,true)}}});if(!p.focusin){x.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var i=this.ownerDocument||this,o=J.access(i,t);if(!o){i.addEventListener(e,n,true)}J.access(i,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=J.access(i,t)-1;if(!o){i.removeEventListener(e,n,true);J.remove(i,t)}else{J.access(i,t,o)}}}})}var Tt=e.location;var St=Date.now();var Et=/\?/;x.parseXML=function(t){var n;if(!t||typeof t!=="string"){return null}try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=undefined}if(!n||n.getElementsByTagName("parsererror").length){x.error("Invalid XML: "+t)}return n};var Nt=/\[\]$/,$t=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,It=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,i){var o;if(Array.isArray(t)){x.each(t,function(t,o){if(n||Nt.test(e)){i(e,o)}else{Dt(e+"["+(typeof o==="object"&&o!=null?t:"")+"]",o,n,i)}})}else if(!n&&y(t)==="object"){for(o in t){Dt(e+"["+o+"]",t[o],n,i)}}else{i(e,t)}}x.param=function(e,t){var n,i=[],o=function(e,t){var n=v(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(n==null?"":n)};if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e)){x.each(e,function(){o(this.name,this.value)})}else{for(n in e){Dt(n,e[n],t,o)}}return i.join("&")};x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&It.test(this.nodeName)&&!At.test(e)&&(this.checked||!he.test(e))}).map(function(e,t){var n=x(this).val();if(n==null){return null}if(Array.isArray(n)){return x.map(n,function(e){return{name:t.name,value:e.replace($t,"\r\n")}})}return{name:t.name,value:n.replace($t,"\r\n")}}).get()}});var Rt=/%20/g,Lt=/#.*$/,Ot=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ht=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ft=/^(?:GET|HEAD)$/,jt=/^\/\//,Mt={},Bt={},zt="*/".concat("*"),qt=i.createElement("a");qt.href=Tt.href;function Ut(e){return function(t,n){if(typeof t!=="string"){n=t;t="*"}var i,o=0,r=t.toLowerCase().match(F)||[];if(v(n)){while(i=r[o++]){if(i[0]==="+"){i=i.slice(1)||"*";(e[i]=e[i]||[]).unshift(n)}else{(e[i]=e[i]||[]).push(n)}}}}}function Kt(e,t,n,i){var o={},r=e===Bt;function a(s){var l;o[s]=true;x.each(e[s]||[],function(e,s){var u=s(t,n,i);if(typeof u==="string"&&!r&&!o[u]){t.dataTypes.unshift(u);a(u);return false}else if(r){return!(l=u)}});return l}return a(t.dataTypes[0])||!o["*"]&&a("*")}function Wt(e,t){var n,i,o=x.ajaxSettings.flatOptions||{};for(n in t){if(t[n]!==undefined){(o[n]?e:i||(i={}))[n]=t[n]}}if(i){x.extend(true,e,i)}return e}function _t(e,t,n){var i,o,r,a,s=e.contents,l=e.dataTypes;while(l[0]==="*"){l.shift();if(i===undefined){i=e.mimeType||t.getResponseHeader("Content-Type")}}if(i){for(o in s){if(s[o]&&s[o].test(i)){l.unshift(o);break}}}if(l[0]in n){r=l[0]}else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}if(!a){a=o}}r=r||a}if(r){if(r!==l[0]){l.unshift(r)}return n[r]}}function Vt(e,t,n,i){var o,r,a,s,l,u={},c=e.dataTypes.slice();if(c[1]){for(a in e.converters){u[a.toLowerCase()]=e.converters[a]}}r=c.shift();while(r){if(e.responseFields[r]){n[e.responseFields[r]]=t}if(!l&&i&&e.dataFilter){t=e.dataFilter(t,e.dataType)}l=r;r=c.shift();if(r){if(r==="*"){r=l}else if(l!=="*"&&l!==r){a=u[l+" "+r]||u["* "+r];if(!a){for(o in u){s=o.split(" ");if(s[1]===r){a=u[l+" "+s[0]]||u["* "+s[0]];if(a){if(a===true){a=u[o]}else if(u[o]!==true){r=s[0];c.unshift(s[1])}break}}}}if(a!==true){if(a&&e.throws){t=a(t)}else{try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+r}}}}}}}return{state:"success",data:t}}x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:"GET",isLocal:Ht.test(Tt.protocol),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":zt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":true,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:true,context:true}},ajaxSetup:function(e,t){return t?Wt(Wt(e,x.ajaxSettings),t):Wt(x.ajaxSettings,e)},ajaxPrefilter:Ut(Mt),ajaxTransport:Ut(Bt),ajax:function(t,n){if(typeof t==="object"){n=t;t=undefined}n=n||{};var o,r,a,s,l,u,c,f,d,h,p=x.ajaxSetup({},n),v=p.context||p,m=p.context&&(v.nodeType||v.jquery)?x(v):x.event,g=x.Deferred(),b=x.Callbacks("once memory"),y=p.statusCode||{},w={},C={},k="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s){s={};while(t=Pt.exec(a)){s[t[1].toLowerCase()]=t[2]}}t=s[e.toLowerCase()]}return t==null?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){if(c==null){e=C[e.toLowerCase()]=C[e.toLowerCase()]||e;w[e]=t}return this},overrideMimeType:function(e){if(c==null){p.mimeType=e}return this},statusCode:function(e){var t;if(e){if(c){T.always(e[T.status])}else{for(t in e){y[t]=[y[t],e[t]]}}}return this},abort:function(e){var t=e||k;if(o){o.abort(t)}S(0,t);return this}};g.promise(T);p.url=((t||p.url||Tt.href)+"").replace(jt,Tt.protocol+"//");p.type=n.method||n.type||p.method||p.type;p.dataTypes=(p.dataType||"*").toLowerCase().match(F)||[""];if(p.crossDomain==null){u=i.createElement("a");try{u.href=p.url;u.href=u.href;p.crossDomain=qt.protocol+"//"+qt.host!==u.protocol+"//"+u.host}catch(e){p.crossDomain=true}}if(p.data&&p.processData&&typeof p.data!=="string"){p.data=x.param(p.data,p.traditional)}Kt(Mt,p,n,T);if(c){return T}f=x.event&&p.global;if(f&&x.active++===0){x.event.trigger("ajaxStart")}p.type=p.type.toUpperCase();p.hasContent=!Ft.test(p.type);r=p.url.replace(Lt,"");if(!p.hasContent){h=p.url.slice(r.length);if(p.data&&(p.processData||typeof p.data==="string")){r+=(Et.test(r)?"&":"?")+p.data;delete p.data}if(p.cache===false){r=r.replace(Ot,"$1");h=(Et.test(r)?"&":"?")+"_="+St+++h}p.url=r+h}else if(p.data&&p.processData&&(p.contentType||"").indexOf("application/x-www-form-urlencoded")===0){p.data=p.data.replace(Rt,"+")}if(p.ifModified){if(x.lastModified[r]){T.setRequestHeader("If-Modified-Since",x.lastModified[r])}if(x.etag[r]){T.setRequestHeader("If-None-Match",x.etag[r])}}if(p.data&&p.hasContent&&p.contentType!==false||n.contentType){T.setRequestHeader("Content-Type",p.contentType)}T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+(p.dataTypes[0]!=="*"?", "+zt+"; q=0.01":""):p.accepts["*"]);for(d in p.headers){T.setRequestHeader(d,p.headers[d])}if(p.beforeSend&&(p.beforeSend.call(v,T,p)===false||c)){return T.abort()}k="abort";b.add(p.complete);T.done(p.success);T.fail(p.error);o=Kt(Bt,p,n,T);if(!o){S(-1,"No Transport")}else{T.readyState=1;if(f){m.trigger("ajaxSend",[T,p])}if(c){return T}if(p.async&&p.timeout>0){l=e.setTimeout(function(){T.abort("timeout")},p.timeout)}try{c=false;o.send(w,S)}catch(e){if(c){throw e}S(-1,e)}}function S(t,n,i,s){var u,d,h,w,C,k=n;if(c){return}c=true;if(l){e.clearTimeout(l)}o=undefined;a=s||"";T.readyState=t>0?4:0;u=t>=200&&t<300||t===304;if(i){w=_t(p,T,i)}w=Vt(p,w,T,u);if(u){if(p.ifModified){C=T.getResponseHeader("Last-Modified");if(C){x.lastModified[r]=C}C=T.getResponseHeader("etag");if(C){x.etag[r]=C}}if(t===204||p.type==="HEAD"){k="nocontent"}else if(t===304){k="notmodified"}else{k=w.state;d=w.data;h=w.error;u=!h}}else{h=k;if(t||!k){k="error";if(t<0){t=0}}}T.status=t;T.statusText=(n||k)+"";if(u){g.resolveWith(v,[d,k,T])}else{g.rejectWith(v,[T,k,h])}T.statusCode(y);y=undefined;if(f){m.trigger(u?"ajaxSuccess":"ajaxError",[T,p,u?d:h])}b.fireWith(v,[T,k]);if(f){m.trigger("ajaxComplete",[T,p]);if(!--x.active){x.event.trigger("ajaxStop")}}}return T},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,undefined,t,"script")}});x.each(["get","post"],function(e,t){x[t]=function(e,n,i,o){if(v(n)){o=o||i;i=n;n=undefined}return x.ajax(x.extend({url:e,type:t,dataType:o,data:n,success:i},x.isPlainObject(e)&&e))}});x._evalUrl=function(e){return x.ajax({url:e,type:"GET",dataType:"script",cache:true,async:false,global:false,throws:true})};x.fn.extend({wrapAll:function(e){var t;if(this[0]){if(v(e)){e=e.call(this[0])}t=x(e,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){t.insertBefore(this[0])}t.map(function(){var e=this;while(e.firstElementChild){e=e.firstElementChild}return e}).append(this)}return this},wrapInner:function(e){if(v(e)){return this.each(function(t){x(this).wrapInner(e.call(this,t))})}return this.each(function(){var t=x(this),n=t.contents();if(n.length){n.wrapAll(e)}else{t.append(e)}})},wrap:function(e){var t=v(e);return this.each(function(n){x(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){this.parent(e).not("body").each(function(){x(this).replaceWith(this.childNodes)});return this}});x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)};x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)};x.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Gt={0:200,1223:204},Qt=x.ajaxSettings.xhr();p.cors=!!Qt&&"withCredentials"in Qt;p.ajax=Qt=!!Qt;x.ajaxTransport(function(t){var n,i;if(p.cors||Qt&&!t.crossDomain){return{send:function(o,r){var a,s=t.xhr();s.open(t.type,t.url,t.async,t.username,t.password);if(t.xhrFields){for(a in t.xhrFields){s[a]=t.xhrFields[a]}}if(t.mimeType&&s.overrideMimeType){s.overrideMimeType(t.mimeType)}if(!t.crossDomain&&!o["X-Requested-With"]){o["X-Requested-With"]="XMLHttpRequest"}for(a in o){s.setRequestHeader(a,o[a])}n=function(e){return function(){if(n){n=i=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null;if(e==="abort"){s.abort()}else if(e==="error"){if(typeof s.status!=="number"){r(0,"error")}else{r(s.status,s.statusText)}}else{r(Gt[s.status]||s.status,s.statusText,(s.responseType||"text")!=="text"||typeof s.responseText!=="string"?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders())}}}};s.onload=n();i=s.onerror=s.ontimeout=n("error");if(s.onabort!==undefined){s.onabort=i}else{s.onreadystatechange=function(){if(s.readyState===4){e.setTimeout(function(){if(n){i()}})}}}n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n){throw e}}},abort:function(){if(n){n()}}}}});x.ajaxPrefilter(function(e){if(e.crossDomain){e.contents.script=false}});x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, "+"application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){x.globalEval(e);return e}}});x.ajaxPrefilter("script",function(e){if(e.cache===undefined){e.cache=false}if(e.crossDomain){e.type="GET"}});x.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(o,r){t=x("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove();n=null;if(e){r(e.type==="error"?404:200,e.type)}});i.head.appendChild(t[0])},abort:function(){if(n){n()}}}}});var Xt=[],Yt=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||x.expando+"_"+St++;this[e]=true;return e}});x.ajaxPrefilter("json jsonp",function(t,n,i){var o,r,a,s=t.jsonp!==false&&(Yt.test(t.url)?"url":typeof t.data==="string"&&(t.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&Yt.test(t.data)&&"data");if(s||t.dataTypes[0]==="jsonp"){o=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback;if(s){t[s]=t[s].replace(Yt,"$1"+o)}else if(t.jsonp!==false){t.url+=(Et.test(t.url)?"&":"?")+t.jsonp+"="+o}t.converters["script json"]=function(){if(!a){x.error(o+" was not called")}return a[0]};t.dataTypes[0]="json";r=e[o];e[o]=function(){a=arguments};i.always(function(){if(r===undefined){x(e).removeProp(o)}else{e[o]=r}if(t[o]){t.jsonpCallback=n.jsonpCallback;Xt.push(o)}if(a&&v(r)){r(a[0])}a=r=undefined});return"script"}});p.createHTMLDocument=function(){var e=i.implementation.createHTMLDocument("").body;e.innerHTML="<form></form><form></form>";return e.childNodes.length===2}();x.parseHTML=function(e,t,n){if(typeof e!=="string"){return[]}if(typeof t==="boolean"){n=t;t=false}var o,r,a;if(!t){if(p.createHTMLDocument){t=i.implementation.createHTMLDocument("");o=t.createElement("base");o.href=i.location.href;t.head.appendChild(o)}else{t=i}}r=A.exec(e);a=!n&&[];if(r){return[t.createElement(r[1])]}r=we([e],t,a);if(a&&a.length){x(a).remove()}return x.merge([],r.childNodes)};x.fn.load=function(e,t,n){var i,o,r,a=this,s=e.indexOf(" ");if(s>-1){i=bt(e.slice(s));e=e.slice(0,s)}if(v(t)){n=t;t=undefined}else if(t&&typeof t==="object"){o="POST"}if(a.length>0){x.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments;a.html(i?x("<div>").append(x.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,r||[e.responseText,t,e])})})}return this};x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){x.fn[t]=function(e){return this.on(t,e)}});x.expr.pseudos.animated=function(e){return x.grep(x.timers,function(t){return e===t.elem}).length};x.offset={setOffset:function(e,t,n){var i,o,r,a,s,l,u,c=x.css(e,"position"),f=x(e),d={};if(c==="static"){e.style.position="relative"}s=f.offset();r=x.css(e,"top");l=x.css(e,"left");u=(c==="absolute"||c==="fixed")&&(r+l).indexOf("auto")>-1;if(u){i=f.position();a=i.top;o=i.left}else{a=parseFloat(r)||0;o=parseFloat(l)||0}if(v(t)){t=t.call(e,n,x.extend({},s))}if(t.top!=null){d.top=t.top-s.top+a}if(t.left!=null){d.left=t.left-s.left+o}if("using"in t){t.using.call(e,d)}else{f.css(d)}}};x.fn.extend({offset:function(e){if(arguments.length){return e===undefined?this:this.each(function(t){x.offset.setOffset(this,e,t)})}var t,n,i=this[0];if(!i){return}if(!i.getClientRects().length){return{top:0,left:0}}t=i.getBoundingClientRect();n=i.ownerDocument.defaultView;return{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}},position:function(){if(!this[0]){return}var e,t,n,i=this[0],o={top:0,left:0};if(x.css(i,"position")==="fixed"){t=i.getBoundingClientRect()}else{t=this.offset();n=i.ownerDocument;e=i.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&x.css(e,"position")==="static"){e=e.parentNode}if(e&&e!==i&&e.nodeType===1){o=x(e).offset();o.top+=x.css(e,"borderTopWidth",true);o.left+=x.css(e,"borderLeftWidth",true)}}return{top:t.top-o.top-x.css(i,"marginTop",true),left:t.left-o.left-x.css(i,"marginLeft",true)}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&x.css(e,"position")==="static"){e=e.offsetParent}return e||xe})}});x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;x.fn[e]=function(i){return W(this,function(e,i,o){var r;if(m(e)){r=e}else if(e.nodeType===9){r=e.defaultView}if(o===undefined){return r?r[t]:e[i]}if(r){r.scrollTo(!n?o:r.pageXOffset,n?o:r.pageYOffset)}else{e[i]=o}},e,i,arguments.length)}});x.each(["top","left"],function(e,t){x.cssHooks[t]=Ke(p.pixelPosition,function(e,n){if(n){n=Ue(e,t);return Be.test(n)?x(e).position()[t]+"px":n}})});x.each({Height:"height",Width:"width"},function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){x.fn[i]=function(o,r){var a=arguments.length&&(n||typeof o!=="boolean"),s=n||(o===true||r===true?"margin":"border");return W(this,function(t,n,o){var r;if(m(t)){return i.indexOf("outer")===0?t["inner"+e]:t.document.documentElement["client"+e]}if(t.nodeType===9){r=t.documentElement;return Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])}return o===undefined?x.css(t,n,s):x.style(t,n,o,s)},t,a?o:undefined,a)}})});x.each(("blur focus focusin focusout resize scroll click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select submit keydown keypress keyup contextmenu").split(" "),function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}});x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});x.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return arguments.length===1?this.off(e,"**"):this.off(t,e||"**",n)}});x.proxy=function(e,t){var n,i,o;if(typeof t==="string"){n=e[t];t=e;e=n}if(!v(e)){return undefined}i=r.call(arguments,2);o=function(){return e.apply(t||this,i.concat(r.call(arguments)))};o.guid=e.guid=e.guid||x.guid++;return o};x.holdReady=function(e){if(e){x.readyWait++}else{x.ready(true)}};x.isArray=Array.isArray;x.parseJSON=JSON.parse;x.nodeName=$;x.isFunction=v;x.isWindow=m;x.camelCase=Q;x.type=y;x.now=Date.now;x.isNumeric=function(e){var t=x.type(e);return(t==="number"||t==="string")&&!isNaN(e-parseFloat(e))};if(typeof define==="function"&&define.amd){define("jquery",[],function(){return x})}var Jt=e.jQuery,Zt=e.$;x.noConflict=function(t){if(e.$===x){e.$=Zt}if(t&&e.jQuery===x){e.jQuery=Jt}return x};if(!t){e.jQuery=e.$=x}return x});(function(e,t){if(typeof define==="function"&&define.amd){define("Translator",t)}else if(typeof module==="object"&&module.exports){module.exports=t()}else{e.Translator=t()}})(this,function(){"use strict";var e={},t="en",n=[],i=new RegExp(/^\w+\: +(.+)$/),o=new RegExp(/^\s*((\{\s*(\-?\d+[\s*,\s*\-?\d+]*)\s*\})|([\[\]])\s*(-Inf|\-?\d+)\s*,\s*(\+?Inf|\-?\d+)\s*([\[\]]))\s?(.+?)$/),r=new RegExp(/^\s*(\{\s*(\-?\d+[\s*,\s*\-?\d+]*)\s*\})|([\[\]])\s*(-Inf|\-?\d+)\s*,\s*(\+?Inf|\-?\d+)\s*([\[\]])/);var a={locale:p(),fallback:t,placeHolderPrefix:"%",placeHolderSuffix:"%",defaultDomain:"messages",pluralSeparator:"|",add:function(t,i,o,r){var a=r||this.locale||this.fallback,s=o||this.defaultDomain;if(!e[a]){e[a]={}}if(!e[a][s]){e[a][s]={}}e[a][s][t]=i;if(false===h(n,s)){n.push(s)}return this},trans:function(e,t,n,i){var o=l(e,n,i,this.locale,this.fallback);return s(o,t||{})},transChoice:function(e,t,n,i,o){var r=l(e,i,o,this.locale,this.fallback);var a=parseInt(t,10);n=n||{};if(n.count===undefined){n.count=t}if(typeof r!=="undefined"&&!isNaN(a)){r=c(r,a,o||this.locale||this.fallback)}return s(r,n)},fromJSON:function(e){if(typeof e==="string"){e=JSON.parse(e)}if(e.locale){this.locale=e.locale}if(e.fallback){this.fallback=e.fallback}if(e.defaultDomain){this.defaultDomain=e.defaultDomain}if(e.translations){for(var t in e.translations){for(var n in e.translations[t]){for(var i in e.translations[t][n]){this.add(i,e.translations[t][n][i],n,t)}}}}return this},reset:function(){e={};n=[];this.locale=p()}};function s(e,t){var n,i=a.placeHolderPrefix,o=a.placeHolderSuffix;for(n in t){var r=new RegExp(i+n+o,"g");if(r.test(e)){var s=String(t[n]).replace(new RegExp("\\$","g"),"$$$$");e=e.replace(r,s)}}return e}function l(t,i,o,r,a){var s=o||r||a,l=i;var c=s.split("_")[0];if(!(s in e)){if(!(c in e)){if(!(a in e)){return t}s=a}else{s=c}}if(typeof l==="undefined"||null===l){for(var f=0;f<n.length;f++){if(u(s,n[f],t)||u(c,n[f],t)||u(a,n[f],t)){l=n[f];break}}}if(u(s,l,t)){return e[s][l][t]}var d,h,p,v;while(s.length>2){d=s.length;h=s.split(/[\s_]+/);p=h[h.length-1];v=p.length;if(1===h.length){break}s=s.substring(0,d-(v+1));if(u(s,l,t)){return e[s][l][t]}}if(u(a,l,t)){return e[a][l][t]}return t}function u(t,n,i){if(!(t in e)){return false}if(!(n in e[t])){return false}if(!(i in e[t][n])){return false}return true}function c(e,t,n){var s,l,u=[],c=[],h=e.split(a.pluralSeparator),p=[];for(s=0;s<h.length;s++){var v=h[s];if(o.test(v)){p=v.match(o);u[p[0]]=p[p.length-1]}else if(i.test(v)){p=v.match(i);c.push(p[1])}else{c.push(v)}}for(l in u){if(r.test(l)){p=l.match(r);if(p[1]){var m=p[2].split(","),g;for(g in m){if(t==m[g]){return u[l]}}}else{var b=f(p[4]);var y=f(p[5]);if(("["===p[3]?t>=b:t>b)&&("]"===p[6]?t<=y:t<y)){return u[l]}}}}return c[d(t,n)]||c[0]||undefined}function f(e){if("-Inf"===e){return Number.NEGATIVE_INFINITY}else if("+Inf"===e||"Inf"===e){return Number.POSITIVE_INFINITY}return parseInt(e,10)}function d(e,t){var n=t;if("pt_BR"===n){n="xbr"}if(n.length>3){n=n.split("_")[0]}switch(n){case"bo":case"dz":case"id":case"ja":case"jv":case"ka":case"km":case"kn":case"ko":case"ms":case"th":case"tr":case"vi":case"zh":return 0;case"af":case"az":case"bn":case"bg":case"ca":case"da":case"de":case"el":case"en":case"eo":case"es":case"et":case"eu":case"fa":case"fi":case"fo":case"fur":case"fy":case"gl":case"gu":case"ha":case"he":case"hu":case"is":case"it":case"ku":case"lb":case"ml":case"mn":case"mr":case"nah":case"nb":case"ne":case"nl":case"nn":case"no":case"om":case"or":case"pa":case"pap":case"ps":case"pt":case"so":case"sq":case"sv":case"sw":case"ta":case"te":case"tk":case"ur":case"zu":return e==1?0:1;case"am":case"bh":case"fil":case"fr":case"gun":case"hi":case"ln":case"mg":case"nso":case"xbr":case"ti":case"wa":return e===0||e==1?0:1;case"be":case"bs":case"hr":case"ru":case"sr":case"uk":return e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2;case"cs":case"sk":return e==1?0:e>=2&&e<=4?1:2;case"ga":return e==1?0:e==2?1:2;case"lt":return e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2;case"sl":return e%100==1?0:e%100==2?1:e%100==3||e%100==4?2:3;case"mk":return e%10==1?0:1;case"mt":return e==1?0:e===0||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3;case"lv":return e===0?0:e%10==1&&e%100!=11?1:2;case"pl":return e==1?0:e%10>=2&&e%10<=4&&(e%100<12||e%100>14)?1:2;case"cy":return e==1?0:e==2?1:e==8||e==11?2:3;case"ro":return e==1?0:e===0||e%100>0&&e%100<20?1:2;case"ar":return e===0?0:e==1?1:e==2?2:e>=3&&e<=10?3:e>=11&&e<=99?4:5;default:return 0}}function h(e,t){for(var n=0;n<e.length;n++){if(t===e[n]){return true}}return false}function p(){if(typeof document!=="undefined"){return document.documentElement.lang.replace("-","_")}else{return t}}return a});if(typeof jQuery==="undefined"){throw new Error("Bootstrap's JavaScript requires jQuery")}+function(e){"use strict";var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||t[0]==1&&t[1]==9&&t[2]<1||t[0]>3){throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}}(jQuery);+function(e){"use strict";function t(){var e=document.createElement("bootstrap");var t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in t){if(e.style[n]!==undefined){return{end:t[n]}}}return false}e.fn.emulateTransitionEnd=function(t){var n=false;var i=this;e(this).one("bsTransitionEnd",function(){n=true});var o=function(){if(!n)e(i).trigger(e.support.transition.end)};setTimeout(o,t);return this};e(function(){e.support.transition=t();if(!e.support.transition)return;e.event.special.bsTransitionEnd={bindType:e.support.transition.end,delegateType:e.support.transition.end,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}})}(jQuery);+function(e){"use strict";var t='[data-dismiss="alert"]';var n=function(n){e(n).on("click",t,this.close)};n.VERSION="3.3.7";n.TRANSITION_DURATION=150;n.prototype.close=function(t){var i=e(this);var o=i.attr("data-target");if(!o){o=i.attr("href");o=o&&o.replace(/.*(?=#[^\s]*$)/,"")}var r=e(o==="#"?[]:o);if(t)t.preventDefault();if(!r.length){r=i.closest(".alert")}r.trigger(t=e.Event("close.bs.alert"));if(t.isDefaultPrevented())return;r.removeClass("in");function a(){r.detach().trigger("closed.bs.alert").remove()}e.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",a).emulateTransitionEnd(n.TRANSITION_DURATION):a()};function i(t){return this.each(function(){var i=e(this);var o=i.data("bs.alert");if(!o)i.data("bs.alert",o=new n(this));if(typeof t=="string")o[t].call(i)})}var o=e.fn.alert;e.fn.alert=i;e.fn.alert.Constructor=n;e.fn.alert.noConflict=function(){e.fn.alert=o;return this};e(document).on("click.bs.alert.data-api",t,n.prototype.close)}(jQuery);+function(e){"use strict";var t=function(n,i){this.$element=e(n);this.options=e.extend({},t.DEFAULTS,i);this.isLoading=false};t.VERSION="3.3.7";t.DEFAULTS={loadingText:"loading..."};t.prototype.setState=function(t){var n="disabled";var i=this.$element;var o=i.is("input")?"val":"html";var r=i.data();t+="Text";if(r.resetText==null)i.data("resetText",i[o]());setTimeout(e.proxy(function(){i[o](r[t]==null?this.options[t]:r[t]);if(t=="loadingText"){this.isLoading=true;i.addClass(n).attr(n,n).prop(n,true)}else if(this.isLoading){this.isLoading=false;i.removeClass(n).removeAttr(n).prop(n,false)}},this),0)};t.prototype.toggle=function(){var e=true;var t=this.$element.closest('[data-toggle="buttons"]');if(t.length){var n=this.$element.find("input");if(n.prop("type")=="radio"){if(n.prop("checked"))e=false;t.find(".active").removeClass("active");this.$element.addClass("active")}else if(n.prop("type")=="checkbox"){if(n.prop("checked")!==this.$element.hasClass("active"))e=false;this.$element.toggleClass("active")}n.prop("checked",this.$element.hasClass("active"));if(e)n.trigger("change")}else{this.$element.attr("aria-pressed",!this.$element.hasClass("active"));this.$element.toggleClass("active")}};function n(n){return this.each(function(){var i=e(this);var o=i.data("bs.button");var r=typeof n=="object"&&n;if(!o)i.data("bs.button",o=new t(this,r));if(n=="toggle")o.toggle();else if(n)o.setState(n)})}var i=e.fn.button;e.fn.button=n;e.fn.button.Constructor=t;e.fn.button.noConflict=function(){e.fn.button=i;return this};e(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(t){var i=e(t.target).closest(".btn");n.call(i,"toggle");if(!e(t.target).is('input[type="radio"], input[type="checkbox"]')){t.preventDefault();if(i.is("input,button"))i.trigger("focus");else i.find("input:visible,button:visible").first().trigger("focus")}}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(t){e(t.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(t.type))})}(jQuery);+function(e){"use strict";var t=function(t,n){this.$element=e(t);this.$indicators=this.$element.find(".carousel-indicators");this.options=n;this.paused=null;this.sliding=null;this.interval=null;this.$active=null;this.$items=null;this.options.keyboard&&this.$element.on("keydown.bs.carousel",e.proxy(this.keydown,this));this.options.pause=="hover"&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",e.proxy(this.pause,this)).on("mouseleave.bs.carousel",e.proxy(this.cycle,this))};t.VERSION="3.3.7";t.TRANSITION_DURATION=600;t.DEFAULTS={interval:5e3,pause:"hover",wrap:true,keyboard:true};t.prototype.keydown=function(e){if(/input|textarea/i.test(e.target.tagName))return;switch(e.which){case 37:this.prev();break;case 39:this.next();break;default:return}e.preventDefault()};t.prototype.cycle=function(t){t||(this.paused=false);this.interval&&clearInterval(this.interval);this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval));return this};t.prototype.getItemIndex=function(e){this.$items=e.parent().children(".item");return this.$items.index(e||this.$active)};t.prototype.getItemForDirection=function(e,t){var n=this.getItemIndex(t);var i=e=="prev"&&n===0||e=="next"&&n==this.$items.length-1;if(i&&!this.options.wrap)return t;var o=e=="prev"?-1:1;var r=(n+o)%this.$items.length;return this.$items.eq(r)};t.prototype.to=function(e){var t=this;var n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(e>this.$items.length-1||e<0)return;if(this.sliding)return this.$element.one("slid.bs.carousel",function(){t.to(e)});if(n==e)return this.pause().cycle();return this.slide(e>n?"next":"prev",this.$items.eq(e))};t.prototype.pause=function(t){t||(this.paused=true);if(this.$element.find(".next, .prev").length&&e.support.transition){this.$element.trigger(e.support.transition.end);this.cycle(true)}this.interval=clearInterval(this.interval);return this};t.prototype.next=function(){if(this.sliding)return;return this.slide("next")};t.prototype.prev=function(){if(this.sliding)return;return this.slide("prev")};t.prototype.slide=function(n,i){var o=this.$element.find(".item.active");var r=i||this.getItemForDirection(n,o);var a=this.interval;var s=n=="next"?"left":"right";var l=this;if(r.hasClass("active"))return this.sliding=false;var u=r[0];var c=e.Event("slide.bs.carousel",{relatedTarget:u,direction:s});this.$element.trigger(c);if(c.isDefaultPrevented())return;this.sliding=true;a&&this.pause();if(this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=e(this.$indicators.children()[this.getItemIndex(r)]);f&&f.addClass("active")}var d=e.Event("slid.bs.carousel",{relatedTarget:u,direction:s});if(e.support.transition&&this.$element.hasClass("slide")){r.addClass(n);r[0].offsetWidth;o.addClass(s);r.addClass(s);o.one("bsTransitionEnd",function(){r.removeClass([n,s].join(" ")).addClass("active");o.removeClass(["active",s].join(" "));l.sliding=false;setTimeout(function(){l.$element.trigger(d)},0)}).emulateTransitionEnd(t.TRANSITION_DURATION)}else{o.removeClass("active");r.addClass("active");this.sliding=false;this.$element.trigger(d)}a&&this.cycle();return this};function n(n){return this.each(function(){var i=e(this);var o=i.data("bs.carousel");var r=e.extend({},t.DEFAULTS,i.data(),typeof n=="object"&&n);var a=typeof n=="string"?n:r.slide;if(!o)i.data("bs.carousel",o=new t(this,r));if(typeof n=="number")o.to(n);else if(a)o[a]();else if(r.interval)o.pause().cycle()})}var i=e.fn.carousel;e.fn.carousel=n;e.fn.carousel.Constructor=t;e.fn.carousel.noConflict=function(){e.fn.carousel=i;return this};var o=function(t){var i;var o=e(this);var r=e(o.attr("data-target")||(i=o.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""));if(!r.hasClass("carousel"))return;var a=e.extend({},r.data(),o.data());var s=o.attr("data-slide-to");if(s)a.interval=false;n.call(r,a);if(s){r.data("bs.carousel").to(s)}t.preventDefault()};e(document).on("click.bs.carousel.data-api","[data-slide]",o).on("click.bs.carousel.data-api","[data-slide-to]",o);e(window).on("load",function(){e('[data-ride="carousel"]').each(function(){var t=e(this);n.call(t,t.data())})})}(jQuery);+function(e){"use strict";var t=function(n,i){this.$element=e(n);this.options=e.extend({},t.DEFAULTS,i);this.$trigger=e('[data-toggle="collapse"][href="#'+n.id+'"],'+'[data-toggle="collapse"][data-target="#'+n.id+'"]');this.transitioning=null;if(this.options.parent){this.$parent=this.getParent()}else{this.addAriaAndCollapsedClass(this.$element,this.$trigger)}if(this.options.toggle)this.toggle()};t.VERSION="3.3.7";t.TRANSITION_DURATION=350;t.DEFAULTS={toggle:true};t.prototype.dimension=function(){var e=this.$element.hasClass("width");return e?"width":"height"};t.prototype.show=function(){if(this.transitioning||this.$element.hasClass("in"))return;var n;var o=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(o&&o.length){n=o.data("bs.collapse");if(n&&n.transitioning)return}var r=e.Event("show.bs.collapse");this.$element.trigger(r);if(r.isDefaultPrevented())return;if(o&&o.length){i.call(o,"hide");n||o.data("bs.collapse",null)}var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",true);this.$trigger.removeClass("collapsed").attr("aria-expanded",true);this.transitioning=1;var s=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a]("");this.transitioning=0;this.$element.trigger("shown.bs.collapse")};if(!e.support.transition)return s.call(this);var l=e.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",e.proxy(s,this)).emulateTransitionEnd(t.TRANSITION_DURATION)[a](this.$element[0][l])};t.prototype.hide=function(){if(this.transitioning||!this.$element.hasClass("in"))return;var n=e.Event("hide.bs.collapse");this.$element.trigger(n);if(n.isDefaultPrevented())return;var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight;this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",false);this.$trigger.addClass("collapsed").attr("aria-expanded",false);this.transitioning=1;var o=function(){this.transitioning=0;this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!e.support.transition)return o.call(this);this.$element[i](0).one("bsTransitionEnd",e.proxy(o,this)).emulateTransitionEnd(t.TRANSITION_DURATION)};t.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};t.prototype.getParent=function(){return e(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(e.proxy(function(t,i){var o=e(i);this.addAriaAndCollapsedClass(n(o),o)},this)).end()};t.prototype.addAriaAndCollapsedClass=function(e,t){var n=e.hasClass("in");e.attr("aria-expanded",n);t.toggleClass("collapsed",!n).attr("aria-expanded",n)};function n(t){var n;var i=t.attr("data-target")||(n=t.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return e(i)}function i(n){return this.each(function(){var i=e(this);var o=i.data("bs.collapse");var r=e.extend({},t.DEFAULTS,i.data(),typeof n=="object"&&n);if(!o&&r.toggle&&/show|hide/.test(n))r.toggle=false;if(!o)i.data("bs.collapse",o=new t(this,r));if(typeof n=="string")o[n]()})}var o=e.fn.collapse;e.fn.collapse=i;e.fn.collapse.Constructor=t;e.fn.collapse.noConflict=function(){e.fn.collapse=o;return this};e(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var o=e(this);if(!o.attr("data-target"))t.preventDefault();var r=n(o);var a=r.data("bs.collapse");var s=a?"toggle":o.data();i.call(r,s)})}(jQuery);+function(e){"use strict";var t=".dropdown-backdrop";var n='[data-toggle="dropdown"]';var i=function(t){e(t).on("click.bs.dropdown",this.toggle)};i.VERSION="3.3.7";function o(t){var n=t.attr("data-target");if(!n){n=t.attr("href");n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,"")}var i=n&&e(n);return i&&i.length?i:t.parent()}function r(i){if(i&&i.which===3)return;e(t).remove();e(n).each(function(){var t=e(this);var n=o(t);var r={relatedTarget:this};if(!n.hasClass("open"))return;if(i&&i.type=="click"&&/input|textarea/i.test(i.target.tagName)&&e.contains(n[0],i.target))return;n.trigger(i=e.Event("hide.bs.dropdown",r));if(i.isDefaultPrevented())return;t.attr("aria-expanded","false");n.removeClass("open").trigger(e.Event("hidden.bs.dropdown",r))})}i.prototype.toggle=function(t){var n=e(this);if(n.is(".disabled, :disabled"))return;var i=o(n);var a=i.hasClass("open");r();if(!a){if("ontouchstart"in document.documentElement&&!i.closest(".navbar-nav").length){e(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(e(this)).on("click",r)}var s={relatedTarget:this};i.trigger(t=e.Event("show.bs.dropdown",s));if(t.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true");i.toggleClass("open").trigger(e.Event("shown.bs.dropdown",s))}return false};i.prototype.keydown=function(t){if(!/(38|40|27|32)/.test(t.which)||/input|textarea/i.test(t.target.tagName))return;var i=e(this);t.preventDefault();t.stopPropagation();if(i.is(".disabled, :disabled"))return;var r=o(i);var a=r.hasClass("open");if(!a&&t.which!=27||a&&t.which==27){if(t.which==27)r.find(n).trigger("focus");return i.trigger("click")}var s=" li:not(.disabled):visible a";var l=r.find(".dropdown-menu"+s);if(!l.length)return;var u=l.index(t.target);if(t.which==38&&u>0)u--;if(t.which==40&&u<l.length-1)u++;if(!~u)u=0;l.eq(u).trigger("focus")};function a(t){return this.each(function(){var n=e(this);var o=n.data("bs.dropdown");if(!o)n.data("bs.dropdown",o=new i(this));if(typeof t=="string")o[t].call(n)})}var s=e.fn.dropdown;e.fn.dropdown=a;e.fn.dropdown.Constructor=i;e.fn.dropdown.noConflict=function(){e.fn.dropdown=s;return this};e(document).on("click.bs.dropdown.data-api",r).on("click.bs.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.bs.dropdown.data-api",n,i.prototype.toggle).on("keydown.bs.dropdown.data-api",n,i.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",i.prototype.keydown)}(jQuery);+function(e){"use strict";var t=function(t,n){this.options=n;this.$body=e(document.body);this.$element=e(t);this.$dialog=this.$element.find(".modal-dialog");this.$backdrop=null;this.isShown=null;this.originalBodyPad=null;this.scrollbarWidth=0;this.ignoreBackdropClick=false;if(this.options.remote){this.$element.find(".modal-content").load(this.options.remote,e.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))}};t.VERSION="3.3.7";t.TRANSITION_DURATION=300;t.BACKDROP_TRANSITION_DURATION=150;t.DEFAULTS={backdrop:true,keyboard:true,show:true};t.prototype.toggle=function(e){return this.isShown?this.hide():this.show(e)};t.prototype.show=function(n){var i=this;var o=e.Event("show.bs.modal",{relatedTarget:n});this.$element.trigger(o);if(this.isShown||o.isDefaultPrevented())return;this.isShown=true;this.checkScrollbar();this.setScrollbar();this.$body.addClass("modal-open");this.escape();this.resize();this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',e.proxy(this.hide,this));this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(t){if(e(t.target).is(i.$element))i.ignoreBackdropClick=true})});this.backdrop(function(){var o=e.support.transition&&i.$element.hasClass("fade");if(!i.$element.parent().length){i.$element.appendTo(i.$body)}i.$element.show().scrollTop(0);i.adjustDialog();if(o){i.$element[0].offsetWidth}i.$element.addClass("in");i.enforceFocus();var r=e.Event("shown.bs.modal",{relatedTarget:n});o?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(r)}).emulateTransitionEnd(t.TRANSITION_DURATION):i.$element.trigger("focus").trigger(r)})};t.prototype.hide=function(n){if(n)n.preventDefault();n=e.Event("hide.bs.modal");this.$element.trigger(n);if(!this.isShown||n.isDefaultPrevented())return;this.isShown=false;this.escape();this.resize();e(document).off("focusin.bs.modal");this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal");this.$dialog.off("mousedown.dismiss.bs.modal");e.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",e.proxy(this.hideModal,this)).emulateTransitionEnd(t.TRANSITION_DURATION):this.hideModal()};t.prototype.enforceFocus=function(){e(document).off("focusin.bs.modal").on("focusin.bs.modal",e.proxy(function(e){if(document!==e.target&&this.$element[0]!==e.target&&!this.$element.has(e.target).length){this.$element.trigger("focus")}},this))};t.prototype.escape=function(){if(this.isShown&&this.options.keyboard){this.$element.on("keydown.dismiss.bs.modal",e.proxy(function(e){e.which==27&&this.hide()},this))}else if(!this.isShown){this.$element.off("keydown.dismiss.bs.modal")}};t.prototype.resize=function(){if(this.isShown){e(window).on("resize.bs.modal",e.proxy(this.handleUpdate,this))}else{e(window).off("resize.bs.modal")}};t.prototype.hideModal=function(){var e=this;this.$element.hide();this.backdrop(function(){e.$body.removeClass("modal-open");e.resetAdjustments();e.resetScrollbar();e.$element.trigger("hidden.bs.modal")})};t.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove();this.$backdrop=null};t.prototype.backdrop=function(n){var i=this;var o=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var r=e.support.transition&&o;this.$backdrop=e(document.createElement("div")).addClass("modal-backdrop "+o).appendTo(this.$body);this.$element.on("click.dismiss.bs.modal",e.proxy(function(e){if(this.ignoreBackdropClick){this.ignoreBackdropClick=false;return}if(e.target!==e.currentTarget)return;this.options.backdrop=="static"?this.$element[0].focus():this.hide()},this));if(r)this.$backdrop[0].offsetWidth;this.$backdrop.addClass("in");if(!n)return;r?this.$backdrop.one("bsTransitionEnd",n).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):n()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){i.removeBackdrop();n&&n()};e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):a()}else if(n){n()}};t.prototype.handleUpdate=function(){this.adjustDialog()};t.prototype.adjustDialog=function(){var e=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&e?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!e?this.scrollbarWidth:""})};t.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})};t.prototype.checkScrollbar=function(){var e=window.innerWidth;if(!e){var t=document.documentElement.getBoundingClientRect();e=t.right-Math.abs(t.left)}this.bodyIsOverflowing=document.body.clientWidth<e;this.scrollbarWidth=this.measureScrollbar()};t.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"";if(this.bodyIsOverflowing)this.$body.css("padding-right",e+this.scrollbarWidth)};t.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)};t.prototype.measureScrollbar=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure";this.$body.append(e);var t=e.offsetWidth-e.clientWidth;this.$body[0].removeChild(e);return t};function n(n,i){return this.each(function(){var o=e(this);var r=o.data("bs.modal");var a=e.extend({},t.DEFAULTS,o.data(),typeof n=="object"&&n);if(!r)o.data("bs.modal",r=new t(this,a));if(typeof n=="string")r[n](i);else if(a.show)r.show(i)})}var i=e.fn.modal;e.fn.modal=n;e.fn.modal.Constructor=t;e.fn.modal.noConflict=function(){e.fn.modal=i;return this};e(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var i=e(this);var o=i.attr("href");var r=e(i.attr("data-target")||o&&o.replace(/.*(?=#[^\s]+$)/,""));var a=r.data("bs.modal")?"toggle":e.extend({remote:!/#/.test(o)&&o},r.data(),i.data());if(i.is("a"))t.preventDefault();r.one("show.bs.modal",function(e){if(e.isDefaultPrevented())return;r.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})});n.call(r,a,this)})}(jQuery);+function(e){"use strict";var t=function(e,t){this.type=null;this.options=null;this.enabled=null;this.timeout=null;this.hoverState=null;this.$element=null;this.inState=null;this.init("tooltip",e,t)};t.VERSION="3.3.7";t.TRANSITION_DURATION=150;t.DEFAULTS={animation:true,placement:"top",selector:false,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:false,container:false,viewport:{selector:"body",padding:0}};t.prototype.init=function(t,n,i){this.enabled=true;this.type=t;this.$element=e(n);this.options=this.getOptions(i);this.$viewport=this.options.viewport&&e(e.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport);this.inState={click:false,hover:false,focus:false};if(this.$element[0]instanceof document.constructor&&!this.options.selector){throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!")}var o=this.options.trigger.split(" ");for(var r=o.length;r--;){var a=o[r];if(a=="click"){this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this))}else if(a!="manual"){var s=a=="hover"?"mouseenter":"focusin";var l=a=="hover"?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,e.proxy(this.enter,this));this.$element.on(l+"."+this.type,this.options.selector,e.proxy(this.leave,this))}}this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()};t.prototype.getDefaults=function(){return t.DEFAULTS};t.prototype.getOptions=function(t){t=e.extend({},this.getDefaults(),this.$element.data(),t);if(t.delay&&typeof t.delay=="number"){t.delay={show:t.delay,hide:t.delay}}return t};t.prototype.getDelegateOptions=function(){var t={};var n=this.getDefaults();this._options&&e.each(this._options,function(e,i){if(n[e]!=i)t[e]=i});return t};t.prototype.enter=function(t){var n=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);if(!n){n=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,n)}if(t instanceof e.Event){n.inState[t.type=="focusin"?"focus":"hover"]=true}if(n.tip().hasClass("in")||n.hoverState=="in"){n.hoverState="in";return}clearTimeout(n.timeout);n.hoverState="in";if(!n.options.delay||!n.options.delay.show)return n.show();n.timeout=setTimeout(function(){if(n.hoverState=="in")n.show()},n.options.delay.show)};t.prototype.isInStateTrue=function(){for(var e in this.inState){if(this.inState[e])return true}return false};t.prototype.leave=function(t){var n=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);if(!n){n=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,n)}if(t instanceof e.Event){n.inState[t.type=="focusout"?"focus":"hover"]=false}if(n.isInStateTrue())return;clearTimeout(n.timeout);n.hoverState="out";if(!n.options.delay||!n.options.delay.hide)return n.hide();n.timeout=setTimeout(function(){if(n.hoverState=="out")n.hide()},n.options.delay.hide)};t.prototype.show=function(){var n=e.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(n);var i=e.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(n.isDefaultPrevented()||!i)return;var o=this;var r=this.tip();var a=this.getUID(this.type);this.setContent();r.attr("id",a);this.$element.attr("aria-describedby",a);if(this.options.animation)r.addClass("fade");var s=typeof this.options.placement=="function"?this.options.placement.call(this,r[0],this.$element[0]):this.options.placement;var l=/\s?auto?\s?/i;var u=l.test(s);if(u)s=s.replace(l,"")||"top";r.detach().css({top:0,left:0,display:"block"}).addClass(s).data("bs."+this.type,this);this.options.container?r.appendTo(this.options.container):r.insertAfter(this.$element);this.$element.trigger("inserted.bs."+this.type);var c=this.getPosition();var f=r[0].offsetWidth;var d=r[0].offsetHeight;if(u){var h=s;var p=this.getPosition(this.$viewport);s=s=="bottom"&&c.bottom+d>p.bottom?"top":s=="top"&&c.top-d<p.top?"bottom":s=="right"&&c.right+f>p.width?"left":s=="left"&&c.left-f<p.left?"right":s;r.removeClass(h).addClass(s)}var v=this.getCalculatedOffset(s,c,f,d);this.applyPlacement(v,s);var m=function(){var e=o.hoverState;o.$element.trigger("shown.bs."+o.type);o.hoverState=null;if(e=="out")o.leave(o)};e.support.transition&&this.$tip.hasClass("fade")?r.one("bsTransitionEnd",m).emulateTransitionEnd(t.TRANSITION_DURATION):m()}};t.prototype.applyPlacement=function(t,n){var i=this.tip();var o=i[0].offsetWidth;var r=i[0].offsetHeight;var a=parseInt(i.css("margin-top"),10);var s=parseInt(i.css("margin-left"),10);if(isNaN(a))a=0;if(isNaN(s))s=0;t.top+=a;t.left+=s;e.offset.setOffset(i[0],e.extend({using:function(e){i.css({top:Math.round(e.top),left:Math.round(e.left)})}},t),0);i.addClass("in");var l=i[0].offsetWidth;var u=i[0].offsetHeight;if(n=="top"&&u!=r){t.top=t.top+r-u}var c=this.getViewportAdjustedDelta(n,t,l,u);if(c.left)t.left+=c.left;else t.top+=c.top;var f=/top|bottom/.test(n);var d=f?c.left*2-o+l:c.top*2-r+u;var h=f?"offsetWidth":"offsetHeight";i.offset(t);this.replaceArrow(d,i[0][h],f)};t.prototype.replaceArrow=function(e,t,n){this.arrow().css(n?"left":"top",50*(1-e/t)+"%").css(n?"top":"left","")};t.prototype.setContent=function(){var e=this.tip();var t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t);e.removeClass("fade in top bottom left right")};t.prototype.hide=function(n){var i=this;var o=e(this.$tip);var r=e.Event("hide.bs."+this.type);function a(){if(i.hoverState!="in")o.detach();if(i.$element){i.$element.removeAttr("aria-describedby").trigger("hidden.bs."+i.type)}n&&n()}this.$element.trigger(r);if(r.isDefaultPrevented())return;o.removeClass("in");e.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",a).emulateTransitionEnd(t.TRANSITION_DURATION):a();this.hoverState=null;return this};t.prototype.fixTitle=function(){var e=this.$element;if(e.attr("title")||typeof e.attr("data-original-title")!="string"){e.attr("data-original-title",e.attr("title")||"").attr("title","")}};t.prototype.hasContent=function(){return this.getTitle()};t.prototype.getPosition=function(t){t=t||this.$element;var n=t[0];var i=n.tagName=="BODY";var o=n.getBoundingClientRect();if(o.width==null){o=e.extend({},o,{width:o.right-o.left,height:o.bottom-o.top})}var r=window.SVGElement&&n instanceof window.SVGElement;var a=i?{top:0,left:0}:r?null:t.offset();var s={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop()};var l=i?{width:e(window).width(),height:e(window).height()}:null;return e.extend({},o,s,l,a)};t.prototype.getCalculatedOffset=function(e,t,n,i){return e=="bottom"?{top:t.top+t.height,left:t.left+t.width/2-n/2}:e=="top"?{top:t.top-i,left:t.left+t.width/2-n/2}:e=="left"?{top:t.top+t.height/2-i/2,left:t.left-n}:{top:t.top+t.height/2-i/2,left:t.left+t.width}};t.prototype.getViewportAdjustedDelta=function(e,t,n,i){var o={top:0,left:0};if(!this.$viewport)return o;var r=this.options.viewport&&this.options.viewport.padding||0;var a=this.getPosition(this.$viewport);if(/right|left/.test(e)){var s=t.top-r-a.scroll;var l=t.top+r-a.scroll+i;if(s<a.top){o.top=a.top-s}else if(l>a.top+a.height){o.top=a.top+a.height-l}}else{var u=t.left-r;var c=t.left+r+n;if(u<a.left){o.left=a.left-u}else if(c>a.right){o.left=a.left+a.width-c}}return o};t.prototype.getTitle=function(){var e;var t=this.$element;var n=this.options;e=t.attr("data-original-title")||(typeof n.title=="function"?n.title.call(t[0]):n.title);return e};t.prototype.getUID=function(e){do{e+=~~(Math.random()*1e6)}while(document.getElementById(e));return e};t.prototype.tip=function(){if(!this.$tip){this.$tip=e(this.options.template);if(this.$tip.length!=1){throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!")}}return this.$tip};t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")};t.prototype.enable=function(){this.enabled=true};t.prototype.disable=function(){this.enabled=false};t.prototype.toggleEnabled=function(){this.enabled=!this.enabled};t.prototype.toggle=function(t){var n=this;if(t){n=e(t.currentTarget).data("bs."+this.type);if(!n){n=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,n)}}if(t){n.inState.click=!n.inState.click;if(n.isInStateTrue())n.enter(n);else n.leave(n)}else{n.tip().hasClass("in")?n.leave(n):n.enter(n)}};t.prototype.destroy=function(){var e=this;clearTimeout(this.timeout);this.hide(function(){e.$element.off("."+e.type).removeData("bs."+e.type);if(e.$tip){e.$tip.detach()}e.$tip=null;e.$arrow=null;e.$viewport=null;e.$element=null})};function n(n){return this.each(function(){var i=e(this);var o=i.data("bs.tooltip");var r=typeof n=="object"&&n;if(!o&&/destroy|hide/.test(n))return;if(!o)i.data("bs.tooltip",o=new t(this,r));if(typeof n=="string")o[n]()})}var i=e.fn.tooltip;e.fn.tooltip=n;e.fn.tooltip.Constructor=t;e.fn.tooltip.noConflict=function(){e.fn.tooltip=i;return this}}(jQuery);+function(e){"use strict";var t=function(e,t){this.init("popover",e,t)};if(!e.fn.tooltip)throw new Error("Popover requires tooltip.js");t.VERSION="3.3.7";t.DEFAULTS=e.extend({},e.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'});t.prototype=e.extend({},e.fn.tooltip.Constructor.prototype);t.prototype.constructor=t;t.prototype.getDefaults=function(){return t.DEFAULTS};t.prototype.setContent=function(){var e=this.tip();var t=this.getTitle();var n=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t);e.find(".popover-content").children().detach().end()[this.options.html?typeof n=="string"?"html":"append":"text"](n);e.removeClass("fade top bottom left right in");if(!e.find(".popover-title").html())e.find(".popover-title").hide()};t.prototype.hasContent=function(){return this.getTitle()||this.getContent()};t.prototype.getContent=function(){var e=this.$element;var t=this.options;return e.attr("data-content")||(typeof t.content=="function"?t.content.call(e[0]):t.content)};t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};function n(n){return this.each(function(){var i=e(this);var o=i.data("bs.popover");var r=typeof n=="object"&&n;if(!o&&/destroy|hide/.test(n))return;if(!o)i.data("bs.popover",o=new t(this,r));if(typeof n=="string")o[n]()})}var i=e.fn.popover;e.fn.popover=n;e.fn.popover.Constructor=t;e.fn.popover.noConflict=function(){e.fn.popover=i;return this}}(jQuery);+function(e){"use strict";function t(n,i){this.$body=e(document.body);this.$scrollElement=e(n).is(document.body)?e(window):e(n);this.options=e.extend({},t.DEFAULTS,i);this.selector=(this.options.target||"")+" .nav li > a";this.offsets=[];this.targets=[];this.activeTarget=null;this.scrollHeight=0;this.$scrollElement.on("scroll.bs.scrollspy",e.proxy(this.process,this));this.refresh();this.process()}t.VERSION="3.3.7";t.DEFAULTS={offset:10};t.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)};t.prototype.refresh=function(){var t=this;var n="offset";var i=0;this.offsets=[];this.targets=[];this.scrollHeight=this.getScrollHeight();if(!e.isWindow(this.$scrollElement[0])){n="position";i=this.$scrollElement.scrollTop()}this.$body.find(this.selector).map(function(){var t=e(this);var o=t.data("target")||t.attr("href");var r=/^#./.test(o)&&e(o);return r&&r.length&&r.is(":visible")&&[[r[n]().top+i,o]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){t.offsets.push(this[0]);t.targets.push(this[1])})};t.prototype.process=function(){var e=this.$scrollElement.scrollTop()+this.options.offset;var t=this.getScrollHeight();var n=this.options.offset+t-this.$scrollElement.height();var i=this.offsets;var o=this.targets;var r=this.activeTarget;var a;if(this.scrollHeight!=t){this.refresh()}if(e>=n){return r!=(a=o[o.length-1])&&this.activate(a)}if(r&&e<i[0]){this.activeTarget=null;return this.clear()}for(a=i.length;a--;){r!=o[a]&&e>=i[a]&&(i[a+1]===undefined||e<i[a+1])&&this.activate(o[a])}};t.prototype.activate=function(t){this.activeTarget=t;this.clear();var n=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]';var i=e(n).parents("li").addClass("active");if(i.parent(".dropdown-menu").length){i=i.closest("li.dropdown").addClass("active")}i.trigger("activate.bs.scrollspy")};t.prototype.clear=function(){e(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};function n(n){return this.each(function(){var i=e(this);var o=i.data("bs.scrollspy");var r=typeof n=="object"&&n;if(!o)i.data("bs.scrollspy",o=new t(this,r));if(typeof n=="string")o[n]()})}var i=e.fn.scrollspy;e.fn.scrollspy=n;e.fn.scrollspy.Constructor=t;e.fn.scrollspy.noConflict=function(){e.fn.scrollspy=i;return this};e(window).on("load.bs.scrollspy.data-api",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);n.call(t,t.data())})})}(jQuery);+function(e){"use strict";var t=function(t){this.element=e(t)};t.VERSION="3.3.7";t.TRANSITION_DURATION=150;t.prototype.show=function(){var t=this.element;var n=t.closest("ul:not(.dropdown-menu)");var i=t.data("target");if(!i){i=t.attr("href");i=i&&i.replace(/.*(?=#[^\s]*$)/,"")}if(t.parent("li").hasClass("active"))return;var o=n.find(".active:last a");var r=e.Event("hide.bs.tab",{relatedTarget:t[0]});var a=e.Event("show.bs.tab",{relatedTarget:o[0]});o.trigger(r);t.trigger(a);if(a.isDefaultPrevented()||r.isDefaultPrevented())return;var s=e(i);this.activate(t.closest("li"),n);this.activate(s,s.parent(),function(){o.trigger({type:"hidden.bs.tab",relatedTarget:t[0]});t.trigger({type:"shown.bs.tab",relatedTarget:o[0]})})};t.prototype.activate=function(n,i,o){var r=i.find("> .active");var a=o&&e.support.transition&&(r.length&&r.hasClass("fade")||!!i.find("> .fade").length);function s(){r.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",false);n.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",true);if(a){n[0].offsetWidth;n.addClass("in")}else{n.removeClass("fade")}if(n.parent(".dropdown-menu").length){n.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",true)}o&&o()}r.length&&a?r.one("bsTransitionEnd",s).emulateTransitionEnd(t.TRANSITION_DURATION):s();r.removeClass("in")};function n(n){return this.each(function(){var i=e(this);var o=i.data("bs.tab");if(!o)i.data("bs.tab",o=new t(this));if(typeof n=="string")o[n]()})}var i=e.fn.tab;e.fn.tab=n;e.fn.tab.Constructor=t;e.fn.tab.noConflict=function(){e.fn.tab=i;return this};var o=function(t){t.preventDefault();n.call(e(this),"show")};e(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',o).on("click.bs.tab.data-api",'[data-toggle="pill"]',o)}(jQuery);+function(e){"use strict";var t=function(n,i){this.options=e.extend({},t.DEFAULTS,i);this.$target=e(this.options.target).on("scroll.bs.affix.data-api",e.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",e.proxy(this.checkPositionWithEventLoop,this));this.$element=e(n);this.affixed=null;this.unpin=null;this.pinnedOffset=null;this.checkPosition()};t.VERSION="3.3.7";t.RESET="affix affix-top affix-bottom";t.DEFAULTS={offset:0,target:window};t.prototype.getState=function(e,t,n,i){var o=this.$target.scrollTop();var r=this.$element.offset();var a=this.$target.height();if(n!=null&&this.affixed=="top")return o<n?"top":false;if(this.affixed=="bottom"){if(n!=null)return o+this.unpin<=r.top?false:"bottom";return o+a<=e-i?false:"bottom"}var s=this.affixed==null;var l=s?o:r.top;var u=s?a:t;if(n!=null&&o<=n)return"top";if(i!=null&&l+u>=e-i)return"bottom";return false};t.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(t.RESET).addClass("affix");var e=this.$target.scrollTop();var n=this.$element.offset();return this.pinnedOffset=n.top-e};t.prototype.checkPositionWithEventLoop=function(){setTimeout(e.proxy(this.checkPosition,this),1)};t.prototype.checkPosition=function(){if(!this.$element.is(":visible"))return;var n=this.$element.height();var i=this.options.offset;var o=i.top;var r=i.bottom;var a=Math.max(e(document).height(),e(document.body).height());if(typeof i!="object")r=o=i;if(typeof o=="function")o=i.top(this.$element);if(typeof r=="function")r=i.bottom(this.$element);var s=this.getState(a,n,o,r);if(this.affixed!=s){if(this.unpin!=null)this.$element.css("top","");var l="affix"+(s?"-"+s:"");var u=e.Event(l+".bs.affix");this.$element.trigger(u);if(u.isDefaultPrevented())return;this.affixed=s;this.unpin=s=="bottom"?this.getPinnedOffset():null;this.$element.removeClass(t.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}if(s=="bottom"){this.$element.offset({top:a-n-r})}};function n(n){return this.each(function(){var i=e(this);var o=i.data("bs.affix");var r=typeof n=="object"&&n;if(!o)i.data("bs.affix",o=new t(this,r));if(typeof n=="string")o[n]()})}var i=e.fn.affix;e.fn.affix=n;e.fn.affix.Constructor=t;e.fn.affix.noConflict=function(){e.fn.affix=i;return this};e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var t=e(this);var i=t.data();i.offset=i.offset||{};if(i.offsetBottom!=null)i.offset.bottom=i.offsetBottom;if(i.offsetTop!=null)i.offset.top=i.offsetTop;n.call(t,i)})})}(jQuery);(function(e,t){"use strict";if(typeof define==="function"&&define.amd){define(["jquery"],t)}else if(typeof exports==="object"){module.exports=t(require("jquery"))}else{e.bootbox=t(e.jQuery)}})(this,function e(t,n){"use strict";var i={dialog:"<div class='bootbox modal' tabindex='-1' role='dialog'>"+"<div class='modal-dialog'>"+"<div class='modal-content'>"+"<div class='modal-body'><div class='bootbox-body'></div></div>"+"</div>"+"</div>"+"</div>",header:"<div class='modal-header'>"+"<h4 class='modal-title'></h4>"+"</div>",footer:"<div class='modal-footer'></div>",closeButton:"<button type='button' class='bootbox-close-button close' data-dismiss='modal' aria-hidden='true'>&times;</button>",form:"<form class='bootbox-form'></form>",inputs:{text:"<input class='bootbox-input bootbox-input-text form-control' autocomplete=off type=text />",textarea:"<textarea class='bootbox-input bootbox-input-textarea form-control'></textarea>",email:"<input class='bootbox-input bootbox-input-email form-control' autocomplete='off' type='email' />",select:"<select class='bootbox-input bootbox-input-select form-control'></select>",checkbox:"<div class='checkbox'><label><input class='bootbox-input bootbox-input-checkbox' type='checkbox' /></label></div>",date:"<input class='bootbox-input bootbox-input-date form-control' autocomplete=off type='date' />",time:"<input class='bootbox-input bootbox-input-time form-control' autocomplete=off type='time' />",number:"<input class='bootbox-input bootbox-input-number form-control' autocomplete=off type='number' />",password:"<input class='bootbox-input bootbox-input-password form-control' autocomplete='off' type='password' />"}};var o={locale:"en",backdrop:"static",animate:true,className:null,closeButton:true,show:true,container:"body"};var r={};function a(e){var t=m[o.locale];return t?t[e]:m.en[e]}function s(e,n,i){e.stopPropagation();e.preventDefault();var o=t.isFunction(i)&&i.call(n,e)===false;if(!o){n.modal("hide")}}function l(e){var t,n=0;for(t in e){n++}return n}function u(e,n){var i=0;t.each(e,function(e,t){n(e,t,i++)})}function c(e){var n;var i;if(typeof e!=="object"){throw new Error("Please supply an object of options")}if(!e.message){throw new Error("Please specify a message")}e=t.extend({},o,e);if(!e.buttons){e.buttons={}}n=e.buttons;i=l(n);u(n,function(e,o,r){if(t.isFunction(o)){o=n[e]={callback:o}}if(t.type(o)!=="object"){throw new Error("button with key "+e+" must be an object")}if(!o.label){o.label=e}if(!o.className){if(i<=2&&r===i-1){o.className="btn-primary"}else{o.className="btn-default"}}});return e}function f(e,t){var n=e.length;var i={};if(n<1||n>2){throw new Error("Invalid argument length")}if(n===2||typeof e[0]==="string"){i[t[0]]=e[0];i[t[1]]=e[1]}else{i=e[0]}return i}function d(e,n,i){return t.extend(true,{},e,f(n,i))}function h(e,t,n,i){var o={className:"bootbox-"+e,buttons:p.apply(null,t)};return v(d(o,i,n),t)}function p(){var e={};for(var t=0,n=arguments.length;t<n;t++){var i=arguments[t];var o=i.toLowerCase();var r=i.toUpperCase();e[o]={label:a(r)}}return e}function v(e,t){var i={};u(t,function(e,t){i[t]=true});u(e.buttons,function(e){if(i[e]===n){throw new Error("button key "+e+" is not allowed (options are "+t.join("\n")+")")}});return e}r.alert=function(){var e;e=h("alert",["ok"],["message","callback"],arguments);if(e.callback&&!t.isFunction(e.callback)){throw new Error("alert requires callback property to be a function when provided")}e.buttons.ok.callback=e.onEscape=function(){if(t.isFunction(e.callback)){return e.callback.call(this)}return true};return r.dialog(e)};r.confirm=function(){var e;e=h("confirm",["cancel","confirm"],["message","callback"],arguments);e.buttons.cancel.callback=e.onEscape=function(){return e.callback.call(this,false)};e.buttons.confirm.callback=function(){return e.callback.call(this,true)};if(!t.isFunction(e.callback)){throw new Error("confirm requires a callback")}return r.dialog(e)};r.prompt=function(){var e;var o;var a;var s;var l;var c;var f;s=t(i.form);o={className:"bootbox-prompt",buttons:p("cancel","confirm"),value:"",inputType:"text"};e=v(d(o,arguments,["title","callback"]),["cancel","confirm"]);c=e.show===n?true:e.show;e.message=s;e.buttons.cancel.callback=e.onEscape=function(){return e.callback.call(this,null)};e.buttons.confirm.callback=function(){var n;switch(e.inputType){case"text":case"textarea":case"email":case"select":case"date":case"time":case"number":case"password":n=l.val();break;case"checkbox":var i=l.find("input:checked");n=[];u(i,function(e,i){n.push(t(i).val())});break}return e.callback.call(this,n)};e.show=false;if(!e.title){throw new Error("prompt requires a title")}if(!t.isFunction(e.callback)){throw new Error("prompt requires a callback")}if(!i.inputs[e.inputType]){throw new Error("invalid prompt type")}l=t(i.inputs[e.inputType]);switch(e.inputType){case"text":case"textarea":case"email":case"date":case"time":case"number":case"password":l.val(e.value);break;case"select":var h={};f=e.inputOptions||[];if(!t.isArray(f)){throw new Error("Please pass an array of input options")}if(!f.length){throw new Error("prompt with select requires options")}u(f,function(e,i){var o=l;if(i.value===n||i.text===n){throw new Error("given options in wrong format")}if(i.group){if(!h[i.group]){h[i.group]=t("<optgroup/>").attr("label",i.group)}o=h[i.group]}o.append("<option value='"+i.value+"'>"+i.text+"</option>")});u(h,function(e,t){l.append(t)});l.val(e.value);break;case"checkbox":var m=t.isArray(e.value)?e.value:[e.value];f=e.inputOptions||[];if(!f.length){throw new Error("prompt with checkbox requires options")}if(!f[0].value||!f[0].text){throw new Error("given options in wrong format")}l=t("<div/>");u(f,function(n,o){var r=t(i.inputs[e.inputType]);r.find("input").attr("value",o.value);r.find("label").append(o.text);u(m,function(e,t){if(t===o.value){r.find("input").prop("checked",true)}});l.append(r)});break}if(e.placeholder){l.attr("placeholder",e.placeholder)}if(e.pattern){l.attr("pattern",e.pattern)}if(e.maxlength){l.attr("maxlength",e.maxlength)}s.append(l);s.on("submit",function(e){e.preventDefault();e.stopPropagation();a.find(".btn-primary").click()});a=r.dialog(e);a.off("shown.bs.modal");a.on("shown.bs.modal",function(){l.focus()});if(c===true){a.modal("show")}return a};r.dialog=function(e){e=c(e);var o=t(i.dialog);var r=o.find(".modal-dialog");var a=o.find(".modal-body");var l=e.buttons;var f="";var d={onEscape:e.onEscape};if(t.fn.modal===n){throw new Error("$.fn.modal is not defined; please double check you have included "+"the Bootstrap JavaScript library. See http://getbootstrap.com/javascript/ "+"for more details.")}u(l,function(e,t){f+="<button data-bb-handler='"+e+"' type='button' class='btn "+t.className+"'>"+t.label+"</button>";d[e]=t.callback});a.find(".bootbox-body").html(e.message);if(e.animate===true){o.addClass("fade")}if(e.className){o.addClass(e.className)}if(e.size==="large"){r.addClass("modal-lg")}else if(e.size==="small"){r.addClass("modal-sm")}if(e.title){a.before(i.header)}if(e.closeButton){var h=t(i.closeButton);if(e.title){o.find(".modal-header").prepend(h)}else{h.css("margin-top","-10px").prependTo(a)}}if(e.title){o.find(".modal-title").html(e.title)}if(f.length){a.after(i.footer);o.find(".modal-footer").html(f)}o.on("hidden.bs.modal",function(e){if(e.target===this){o.remove()}});o.on("shown.bs.modal",function(){o.find(".btn-primary:first").focus()});if(e.backdrop!=="static"){o.on("click.dismiss.bs.modal",function(e){if(o.children(".modal-backdrop").length){e.currentTarget=o.children(".modal-backdrop").get(0)}if(e.target!==e.currentTarget){return}o.trigger("escape.close.bb")})}o.on("escape.close.bb",function(e){if(d.onEscape){s(e,o,d.onEscape)}});o.on("click",".modal-footer button",function(e){var n=t(this).data("bb-handler");s(e,o,d[n])});o.on("click",".bootbox-close-button",function(e){s(e,o,d.onEscape)});o.on("keyup",function(e){if(e.which===27){o.trigger("escape.close.bb")}});t(e.container).append(o);o.modal({backdrop:e.backdrop?"static":false,keyboard:false,show:false});if(e.show){o.modal("show")}return o};r.setDefaults=function(){var e={};if(arguments.length===2){e[arguments[0]]=arguments[1]}else{e=arguments[0]}t.extend(o,e)};r.hideAll=function(){t(".bootbox").modal("hide");return r};var m={bg_BG:{OK:"ÐÐº",CANCEL:"ÐÑÐºÐ°Ð·",CONFIRM:"ÐÐ¾ÑÐ²ÑÑÐ¶Ð´Ð°Ð²Ð°Ð¼"},br:{OK:"OK",CANCEL:"Cancelar",CONFIRM:"Sim"},cs:{OK:"OK",CANCEL:"ZruÅ¡it",CONFIRM:"Potvrdit"},da:{OK:"OK",CANCEL:"Annuller",CONFIRM:"Accepter"},de:{OK:"OK",CANCEL:"Abbrechen",CONFIRM:"Akzeptieren"},el:{OK:"ÎÎ½ÏÎ¬Î¾ÎµÎ¹",CANCEL:"ÎÎºÏÏÏÏÎ·",CONFIRM:"ÎÏÎ¹Î²ÎµÎ²Î±Î¯ÏÏÎ·"},en:{OK:"OK",CANCEL:"Cancel",CONFIRM:"OK"},es:{OK:"OK",CANCEL:"Cancelar",CONFIRM:"Aceptar"},et:{OK:"OK",CANCEL:"Katkesta",CONFIRM:"OK"},fa:{OK:"ÙØ¨ÙÙ",CANCEL:"ÙØºÙ",CONFIRM:"ØªØ§ÛÛØ¯"},fi:{OK:"OK",CANCEL:"Peruuta",CONFIRM:"OK"},fr:{OK:"OK",CANCEL:"Annuler",CONFIRM:"D'accord"},he:{OK:"×××©××¨",CANCEL:"×××××",CONFIRM:"×××©××¨"},hu:{OK:"OK",CANCEL:"MÃ©gsem",CONFIRM:"MegerÅsÃ­t"},hr:{OK:"OK",CANCEL:"Odustani",CONFIRM:"Potvrdi"},id:{OK:"OK",CANCEL:"Batal",CONFIRM:"OK"},it:{OK:"OK",CANCEL:"Annulla",CONFIRM:"Conferma"},ja:{OK:"OK",CANCEL:"ã­ã£ã³ã»ã«",CONFIRM:"ç¢ºèª"},lt:{OK:"Gerai",CANCEL:"AtÅ¡aukti",CONFIRM:"Patvirtinti"},lv:{OK:"Labi",CANCEL:"Atcelt",CONFIRM:"ApstiprinÄt"},nl:{OK:"OK",CANCEL:"Annuleren",CONFIRM:"Accepteren"},no:{OK:"OK",CANCEL:"Avbryt",CONFIRM:"OK"},pl:{OK:"OK",CANCEL:"Anuluj",CONFIRM:"PotwierdÅº"},pt:{OK:"OK",CANCEL:"Cancelar",CONFIRM:"Confirmar"},ru:{OK:"OK",CANCEL:"ÐÑÐ¼ÐµÐ½Ð°",CONFIRM:"ÐÑÐ¸Ð¼ÐµÐ½Ð¸ÑÑ"},sq:{OK:"OK",CANCEL:"Anulo",CONFIRM:"Prano"},sv:{OK:"OK",CANCEL:"Avbryt",CONFIRM:"OK"},th:{OK:"à¸à¸à¸¥à¸",CANCEL:"à¸¢à¸à¹à¸¥à¸´à¸",CONFIRM:"à¸¢à¸·à¸à¸¢à¸±à¸"},tr:{OK:"Tamam",CANCEL:"Ä°ptal",CONFIRM:"Onayla"},zh_CN:{OK:"OK",CANCEL:"åæ¶",CONFIRM:"ç¡®è®¤"},zh_TW:{OK:"OK",CANCEL:"åæ¶",CONFIRM:"ç¢ºèª"}};r.addLocale=function(e,n){t.each(["OK","CANCEL","CONFIRM"],function(e,t){if(!n[t]){throw new Error("Please supply a translation for '"+t+"'")}});m[e]={OK:n.OK,CANCEL:n.CANCEL,CONFIRM:n.CONFIRM};return r};r.removeLocale=function(e){delete m[e];return r};r.setLocale=function(e){return r.setDefaults("locale",e)};r.init=function(n){return e(n||t)};return r});(function(e,t){typeof exports==="object"&&typeof module!=="undefined"?t(require("jquery")):typeof define==="function"&&define.amd?define(["jquery"],t):t(e.jQuery)})(this,function(e){"use strict";e=e&&e.hasOwnProperty("default")?e["default"]:e;var t=function(){function t(e,t,n,i){this.markup=e;this.children=t;this.options=n;this.callback=i}t.prototype.render=function(t){var n=e(this.markup);if(this.options&&this.options.contents){n.html(this.options.contents)}if(this.options&&this.options.className){n.addClass(this.options.className)}if(this.options&&this.options.data){e.each(this.options.data,function(e,t){n.attr("data-"+e,t)})}if(this.options&&this.options.click){n.on("click",this.options.click)}if(this.children){var i=n.find(".note-children-container");this.children.forEach(function(e){e.render(i.length?i:n)})}if(this.callback){this.callback(n,this.options)}if(this.options&&this.options.callback){this.options.callback(n)}if(t){t.append(n)}return n};return t}();var n={create:function(n,i){return function(){var o=typeof arguments[1]==="object"?arguments[1]:arguments[0];var r=e.isArray(arguments[0])?arguments[0]:[];if(o&&o.children){r=o.children}return new t(n,r,o,i)}}};var i=n.create('<div class="note-editor note-frame panel"/>');var o=n.create('<div class="note-toolbar-wrapper panel-default"><div class="note-toolbar panel-heading"></div></div>');var r=n.create('<div class="note-editing-area"/>');var a=n.create('<textarea class="note-codable"/>');var s=n.create('<div class="note-editable" contentEditable="true"/>');var l=n.create(['<div class="note-statusbar">','  <div class="note-resizebar">','    <div class="note-icon-bar"/>','    <div class="note-icon-bar"/>','    <div class="note-icon-bar"/>',"  </div>","</div>"].join(""));var u=n.create('<div class="note-editor"/>');var c=n.create('<div class="note-editable" contentEditable="true"/>');var f=n.create('<div class="note-btn-group btn-group">');var d=n.create('<div class="dropdown-menu">',function(t,n){var i=e.isArray(n.items)?n.items.map(function(e){var t=typeof e==="string"?e:e.value||"";var i=n.template?n.template(e):e;var o=typeof e==="object"?e.option:undefined;var r='data-value="'+t+'"';var a=o!==undefined?' data-option="'+o+'"':"";return'<li><a href="#" '+(r+a)+">"+i+"</a></li>"}).join(""):n.items;t.html(i)});var h=function(e,t){return e+" "+y(t.icons.caret,"span")};var p=n.create('<div class="dropdown-menu note-check">',function(t,n){var i=e.isArray(n.items)?n.items.map(function(e){var t=typeof e==="string"?e:e.value||"";var i=n.template?n.template(e):e;return'<li><a href="#" data-value="'+t+'">'+y(n.checkClassName)+" "+i+"</a></li>"}).join(""):n.items;t.html(i)});var v=n.create('<div class="note-color-palette"/>',function(e,t){var n=[];for(var i=0,o=t.colors.length;i<o;i++){var r=t.eventName;var a=t.colors[i];var s=[];for(var l=0,u=a.length;l<u;l++){var c=a[l];s.push(['<button type="button" class="note-color-btn"','style="background-color:',c,'" ','data-event="',r,'" ','data-value="',c,'" ','title="',c,'" ','data-toggle="button" tabindex="-1"></button>'].join(""))}n.push('<div class="note-color-row">'+s.join("")+"</div>")}e.html(n.join(""));if(t.tooltip){e.find(".note-color-btn").tooltip({container:t.container,trigger:"hover",placement:"bottom"})}});var m=n.create('<div class="modal" aria-hidden="false" tabindex="-1"/>',function(e,t){if(t.fade){e.addClass("fade")}e.html(['<div class="modal-dialog">','  <div class="modal-content">',t.title?'    <div class="modal-header">'+'      <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+'      <h4 class="modal-title">'+t.title+"</h4>"+"    </div>":"",'    <div class="modal-body">'+t.body+"</div>",t.footer?'    <div class="modal-footer">'+t.footer+"</div>":"","  </div>","</div>"].join(""))});var g=n.create(['<div class="note-popover popover in">','  <div class="arrow"/>','  <div class="popover-content note-children-container"/>',"</div>"].join(""),function(e,t){var n=typeof t.direction!=="undefined"?t.direction:"bottom";e.addClass(n);if(t.hideArrow){e.find(".arrow").hide()}});var b=n.create('<div class="checkbox"></div>',function(e,t){e.html([" <label"+(t.id?' for="'+t.id+'"':"")+">",' <input type="checkbox"'+(t.id?' id="'+t.id+'"':""),(t.checked?" checked":"")+"/>",t.text?t.text:"","</label>"].join(""))});var y=function(e,t){t=t||"i";return"<"+t+' class="'+e+'"/>'};var w={editor:i,toolbar:o,editingArea:r,codable:a,editable:s,statusbar:l,airEditor:u,airEditable:c,buttonGroup:f,dropdown:d,dropdownButtonContents:h,dropdownCheck:p,palette:v,dialog:m,popover:g,checkbox:b,icon:y,options:{},button:function(e,t){return n.create('<button type="button" class="note-btn btn btn-default btn-sm" tabindex="-1">',function(e,t){if(t&&t.tooltip){e.attr({title:t.tooltip}).tooltip({container:t.container,trigger:"hover",placement:"bottom"})}})(e,t)},toggleBtn:function(e,t){e.toggleClass("disabled",!t);e.attr("disabled",!t)},toggleBtnActive:function(e,t){e.toggleClass("active",t)},onDialogShown:function(e,t){e.one("shown.bs.modal",t)},onDialogHidden:function(e,t){e.one("hidden.bs.modal",t)},showDialog:function(e){e.modal("show")},hideDialog:function(e){e.modal("hide")},createLayout:function(e,t){var n=(t.airMode?w.airEditor([w.editingArea([w.airEditable()])]):w.editor([w.toolbar(),w.editingArea([w.codable(),w.editable()]),w.statusbar()])).render();n.insertAfter(e);return{note:e,editor:n,toolbar:n.find(".note-toolbar"),editingArea:n.find(".note-editing-area"),editable:n.find(".note-editable"),codable:n.find(".note-codable"),statusbar:n.find(".note-statusbar")}},removeLayout:function(e,t){e.html(t.editable.html());t.editor.remove();e.show()}};function x(e){return function(t){return e===t}}function C(e,t){return e===t}function k(e){return function(t,n){return t[e]===n[e]}}function T(){return true}function S(){return false}function E(e){return function(){return!e.apply(e,arguments)}}function N(e,t){return function(n){return e(n)&&t(n)}}function A(e){return e}function I(e,t){return function(){return e[t].apply(e,arguments)}}var D=0;function R(e){var t=++D+"";return e?e+t:t}function L(e){var t=$(document);return{top:e.top+t.scrollTop(),left:e.left+t.scrollLeft(),width:e.right-e.left,height:e.bottom-e.top}}function O(e){var t={};for(var n in e){if(e.hasOwnProperty(n)){t[e[n]]=n}}return t}function P(e,t){t=t||"";return t+e.split(".").map(function(e){return e.substring(0,1).toUpperCase()+e.substring(1)}).join("")}function H(e,t,n){var i=this;var o;return function(){var r=i;var a=arguments;var s=function(){o=null;if(!n){e.apply(r,a)}};var l=n&&!o;clearTimeout(o);o=setTimeout(s,t);if(l){e.apply(r,a)}}}var F={eq:x,eq2:C,peq2:k,ok:T,fail:S,self:A,not:E,and:N,invoke:I,uniqueId:R,rect2bnd:L,invertObject:O,namespaceToCamel:P,debounce:H};function j(e){return e[0]}function M(e){return e[e.length-1]}function B(e){return e.slice(0,e.length-1)}function z(e){return e.slice(1)}function q(e,t){for(var n=0,i=e.length;n<i;n++){var o=e[n];if(t(o)){return o}}}function U(e,t){for(var n=0,i=e.length;n<i;n++){if(!t(e[n])){return false}}return true}function K(t,n){return e.inArray(n,t)}function W(e,t){return K(e,t)!==-1}function _(e,t){t=t||F.self;return e.reduce(function(e,n){return e+t(n)},0)}function V(e){var t=[];var n=e.length;var i=-1;while(++i<n){t[i]=e[i]}return t}function G(e){return!e||!e.length}function Q(e,t){if(!e.length){return[]}var n=z(e);return n.reduce(function(e,n){var i=M(e);if(t(M(i),n)){i[i.length]=n}else{e[e.length]=[n]}return e},[[j(e)]])}function X(e){var t=[];for(var n=0,i=e.length;n<i;n++){if(e[n]){t.push(e[n])}}return t}function Y(e){var t=[];for(var n=0,i=e.length;n<i;n++){if(!W(t,e[n])){t.push(e[n])}}return t}function J(e,t){var n=K(e,t);if(n===-1){return null}return e[n+1]}function Z(e,t){var n=K(e,t);if(n===-1){return null}return e[n-1]}var ee={head:j,last:M,initial:B,tail:z,prev:Z,next:J,find:q,contains:W,all:U,sum:_,from:V,isEmpty:G,clusterBy:Q,compact:X,unique:Y};var te=typeof define==="function"&&define.amd;function ne(t){var n=t==="Comic Sans MS"?"Courier New":"Comic Sans MS";var i=e("<div>").css({position:"absolute",left:"-9999px",top:"-9999px",fontSize:"200px"}).text("mmmmmmmmmwwwwwww").appendTo(document.body);var o=i.css("fontFamily",n).width();var r=i.css("fontFamily",t+","+n).width();i.remove();return o!==r}var ie=navigator.userAgent;var oe=/MSIE|Trident/i.test(ie);var re;if(oe){var ae=/MSIE (\d+[.]\d+)/.exec(ie);if(ae){re=parseFloat(ae[1])}ae=/Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(ie);if(ae){re=parseFloat(ae[1])}}var se=/Edge\/\d+/.test(ie);var le=!!window.CodeMirror;if(!le&&te){if(typeof __webpack_require__==="function"){try{require.resolve("codemirror");le=true}catch(e){}}else if(typeof require!=="undefined"){if(typeof require.resolve!=="undefined"){try{require.resolve("codemirror");le=true}catch(e){}}else if(typeof require.specified!=="undefined"){le=require.specified("codemirror")}}}var ue="ontouchstart"in window||navigator.MaxTouchPoints>0||navigator.msMaxTouchPoints>0;var ce=oe||se?"DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted":"input";var fe={isMac:navigator.appVersion.indexOf("Mac")>-1,isMSIE:oe,isEdge:se,isFF:!se&&/firefox/i.test(ie),isPhantom:/PhantomJS/i.test(ie),isWebkit:!se&&/webkit/i.test(ie),isChrome:!se&&/chrome/i.test(ie),isSafari:!se&&/safari/i.test(ie),browserVersion:re,jqueryVersion:parseFloat(e.fn.jquery),isSupportAmd:te,isSupportTouch:ue,hasCodeMirror:le,isFontInstalled:ne,isW3CRangeSupport:!!document.createRange,inputEventName:ce};var de=String.fromCharCode(160);var he="\ufeff";function pe(t){return t&&e(t).hasClass("note-editable")}function ve(t){return t&&e(t).hasClass("note-control-sizing")}function me(e){e=e.toUpperCase();return function(t){return t&&t.nodeName.toUpperCase()===e}}function ge(e){return e&&e.nodeType===3}function be(e){return e&&e.nodeType===1}function ye(e){return e&&/^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT/.test(e.nodeName.toUpperCase())}function we(e){if(pe(e)){return false}return e&&/^DIV|^P|^LI|^H[1-7]/.test(e.nodeName.toUpperCase())}function xe(e){return e&&/^H[1-7]/.test(e.nodeName.toUpperCase())}var Ce=me("PRE");var ke=me("LI");function Te(e){return we(e)&&!ke(e)}var Se=me("TABLE");var Ee=me("DATA");function Ne(e){return!Re(e)&&!$e(e)&&!Ae(e)&&!we(e)&&!Se(e)&&!De(e)&&!Ee(e)}function $e(e){return e&&/^UL|^OL/.test(e.nodeName.toUpperCase())}var Ae=me("HR");function Ie(e){return e&&/^TD|^TH/.test(e.nodeName.toUpperCase())}var De=me("BLOCKQUOTE");function Re(e){return Ie(e)||De(e)||pe(e)}var Le=me("A");function Oe(e){return Ne(e)&&!!Ue(e,we)}function Pe(e){return Ne(e)&&!Ue(e,we)}var He=me("BODY");function Fe(e,t){return e.nextSibling===t||e.previousSibling===t}function je(e,t){t=t||F.ok;var n=[];if(e.previousSibling&&t(e.previousSibling)){n.push(e.previousSibling)}n.push(e);if(e.nextSibling&&t(e.nextSibling)){n.push(e.nextSibling)}return n}var Me=fe.isMSIE&&fe.browserVersion<11?"&nbsp;":"<br>";function Be(e){if(ge(e)){return e.nodeValue.length}if(e){return e.childNodes.length}return 0}function ze(e){var t=Be(e);if(t===0){return true}else if(!ge(e)&&t===1&&e.innerHTML===Me){return true}else if(ee.all(e.childNodes,ge)&&e.innerHTML===""){return true}return false}function qe(e){if(!ye(e)&&!Be(e)){e.innerHTML=Me}}function Ue(e,t){while(e){if(t(e)){return e}if(pe(e)){break}e=e.parentNode}return null}function Ke(e,t){e=e.parentNode;while(e){if(Be(e)!==1){break}if(t(e)){return e}if(pe(e)){break}e=e.parentNode}return null}function We(e,t){t=t||F.fail;var n=[];Ue(e,function(e){if(!pe(e)){n.push(e)}return t(e)});return n}function _e(e,t){var n=We(e);return ee.last(n.filter(t))}function Ve(t,n){var i=We(t);for(var o=n;o;o=o.parentNode){if(e.inArray(o,i)>-1){return o}}return null}function Ge(e,t){t=t||F.fail;var n=[];while(e){if(t(e)){break}n.push(e);e=e.previousSibling}return n}function Qe(e,t){t=t||F.fail;var n=[];while(e){if(t(e)){break}n.push(e);e=e.nextSibling}return n}function Xe(e,t){var n=[];t=t||F.ok;(function i(o){if(e!==o&&t(o)){n.push(o)}for(var r=0,a=o.childNodes.length;r<a;r++){i(o.childNodes[r])}})(e);return n}function Ye(t,n){var i=t.parentNode;var o=e("<"+n+">")[0];i.insertBefore(o,t);o.appendChild(t);return o}function Je(e,t){var n=t.nextSibling;var i=t.parentNode;if(n){i.insertBefore(e,n)}else{i.appendChild(e)}return e}function Ze(t,n){e.each(n,function(e,n){t.appendChild(n)});return t}function et(e){return e.offset===0}function tt(e){return e.offset===Be(e.node)}function nt(e){return et(e)||tt(e)}function it(e,t){while(e&&e!==t){if(st(e)!==0){return false}e=e.parentNode}return true}function ot(e,t){if(!t){return false}while(e&&e!==t){if(st(e)!==Be(e.parentNode)-1){return false}e=e.parentNode}return true}function rt(e,t){return et(e)&&it(e.node,t)}function at(e,t){return tt(e)&&ot(e.node,t)}function st(e){var t=0;while(e=e.previousSibling){t+=1}return t}function lt(e){return!!(e&&e.childNodes&&e.childNodes.length)}function ut(e,t){var n;var i;if(e.offset===0){if(pe(e.node)){return null}n=e.node.parentNode;i=st(e.node)}else if(lt(e.node)){n=e.node.childNodes[e.offset-1];i=Be(n)}else{n=e.node;i=t?0:e.offset-1}return{node:n,offset:i}}function ct(e,t){var n,i;if(Be(e.node)===e.offset){if(pe(e.node)){return null}n=e.node.parentNode;i=st(e.node)+1}else if(lt(e.node)){n=e.node.childNodes[e.offset];i=0}else{n=e.node;i=t?Be(e.node):e.offset+1}return{node:n,offset:i}}function ft(e,t){return e.node===t.node&&e.offset===t.offset}function dt(e){if(ge(e.node)||!lt(e.node)||ze(e.node)){return true}var t=e.node.childNodes[e.offset-1];var n=e.node.childNodes[e.offset];if((!t||ye(t))&&(!n||ye(n))){return true}return false}function ht(e,t){while(e){if(t(e)){return e}e=ut(e)}return null}function pt(e,t){while(e){if(t(e)){return e}e=ct(e)}return null}function vt(e){if(!ge(e.node)){return false}var t=e.node.nodeValue.charAt(e.offset-1);return t&&(t!==" "&&t!==de)}function mt(e,t,n,i){var o=e;while(o){n(o);if(ft(o,t)){break}var r=i&&e.node!==o.node&&t.node!==o.node;o=ct(o,r)}}function gt(e,t){var n=We(t,F.eq(e));return n.map(st).reverse()}function bt(e,t){var n=e;for(var i=0,o=t.length;i<o;i++){if(n.childNodes.length<=t[i]){n=n.childNodes[n.childNodes.length-1]}else{n=n.childNodes[t[i]]}}return n}function yt(e,t){var n=t&&t.isSkipPaddingBlankHTML;var i=t&&t.isNotSplitEdgePoint;if(nt(e)&&(ge(e.node)||i)){if(et(e)){return e.node}else if(tt(e)){return e.node.nextSibling}}if(ge(e.node)){return e.node.splitText(e.offset)}else{var o=e.node.childNodes[e.offset];var r=Je(e.node.cloneNode(false),e.node);Ze(r,Qe(o));if(!n){qe(e.node);qe(r)}return r}}function wt(e,t,n){var i=We(t.node,F.eq(e));if(!i.length){return null}else if(i.length===1){return yt(t,n)}return i.reduce(function(e,i){if(e===t.node){e=yt(t,n)}return yt({node:i,offset:e?st(e):Be(i)},n)})}function xt(e,t){var n=t?we:Re;var i=We(e.node,n);var o=ee.last(i)||e.node;var r,a;if(n(o)){r=i[i.length-2];a=o}else{r=o;a=r.parentNode}var s=r&&wt(r,e,{isSkipPaddingBlankHTML:t,isNotSplitEdgePoint:t});if(!s&&a===e.node){s=e.node.childNodes[e.offset]}return{rightNode:s,container:a}}function Ct(e){return document.createElement(e)}function kt(e){return document.createTextNode(e)}function Tt(e,t){if(!e||!e.parentNode){return}if(e.removeNode){return e.removeNode(t)}var n=e.parentNode;if(!t){var i=[];for(var o=0,r=e.childNodes.length;o<r;o++){i.push(e.childNodes[o])}for(var o=0,r=i.length;o<r;o++){n.insertBefore(i[o],e)}}n.removeChild(e)}function St(e,t){while(e){if(pe(e)||!t(e)){break}var n=e.parentNode;Tt(e);e=n}}function Et(e,t){if(e.nodeName.toUpperCase()===t.toUpperCase()){return e}var n=Ct(t);if(e.style.cssText){n.style.cssText=e.style.cssText}Ze(n,ee.from(e.childNodes));Je(n,e);Tt(e);return n}var Nt=me("TEXTAREA");function $t(e,t){var n=Nt(e[0])?e.val():e.html();if(t){return n.replace(/[\n\r]/g,"")}return n}function At(t,n){var i=$t(t);if(n){var o=/<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g;i=i.replace(o,function(e,t,n){n=n.toUpperCase();var i=/^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(n)&&!!t;var o=/^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(n);return e+(i||o?"\n":"")});i=e.trim(i)}return i}function It(t){var n=e(t);var i=n.offset();var o=n.outerHeight(true);return{left:i.left,top:i.top+o}}function Dt(e,t){Object.keys(t).forEach(function(n){e.on(n,t[n])})}function Rt(e,t){Object.keys(t).forEach(function(n){e.off(n,t[n])})}function Lt(e){return e&&!ge(e)&&ee.contains(e.classList,"note-styletag")}var Ot={NBSP_CHAR:de,ZERO_WIDTH_NBSP_CHAR:he,blank:Me,emptyPara:"<p>"+Me+"</p>",makePredByNodeName:me,isEditable:pe,isControlSizing:ve,isText:ge,isElement:be,isVoid:ye,isPara:we,isPurePara:Te,isHeading:xe,isInline:Ne,isBlock:F.not(Ne),isBodyInline:Pe,isBody:He,isParaInline:Oe,isPre:Ce,isList:$e,isTable:Se,isData:Ee,isCell:Ie,isBlockquote:De,isBodyContainer:Re,isAnchor:Le,isDiv:me("DIV"),isLi:ke,isBR:me("BR"),isSpan:me("SPAN"),isB:me("B"),isU:me("U"),isS:me("S"),isI:me("I"),isImg:me("IMG"),isTextarea:Nt,isEmpty:ze,isEmptyAnchor:F.and(Le,ze),isClosestSibling:Fe,withClosestSiblings:je,nodeLength:Be,isLeftEdgePoint:et,isRightEdgePoint:tt,isEdgePoint:nt,isLeftEdgeOf:it,isRightEdgeOf:ot,isLeftEdgePointOf:rt,isRightEdgePointOf:at,prevPoint:ut,nextPoint:ct,isSamePoint:ft,isVisiblePoint:dt,prevPointUntil:ht,nextPointUntil:pt,isCharPoint:vt,walkPoint:mt,ancestor:Ue,singleChildAncestor:Ke,listAncestor:We,lastAncestor:_e,listNext:Qe,listPrev:Ge,listDescendant:Xe,commonAncestor:Ve,wrap:Ye,insertAfter:Je,appendChildNodes:Ze,position:st,hasChildren:lt,makeOffsetPath:gt,fromOffsetPath:bt,splitTree:wt,splitPoint:xt,create:Ct,createText:kt,remove:Tt,removeWhile:St,replace:Et,html:At,value:$t,posFromPlaceholder:It,attachEvents:Dt,detachEvents:Rt,isCustomStyleTag:Lt};e.summernote=e.summernote||{lang:{}};e.extend(e.summernote.lang,{"en-US":{font:{bold:"Bold",italic:"Italic",underline:"Underline",clear:"Remove Font Style",height:"Line Height",name:"Font Family",strikethrough:"Strikethrough",subscript:"Subscript",superscript:"Superscript",size:"Font Size"},image:{image:"Picture",insert:"Insert Image",resizeFull:"Resize Full",resizeHalf:"Resize Half",resizeQuarter:"Resize Quarter",floatLeft:"Float Left",floatRight:"Float Right",floatNone:"Float None",shapeRounded:"Shape: Rounded",shapeCircle:"Shape: Circle",shapeThumbnail:"Shape: Thumbnail",shapeNone:"Shape: None",dragImageHere:"Drag image or text here",dropImage:"Drop image or Text",selectFromFiles:"Select from files",maximumFileSize:"Maximum file size",maximumFileSizeError:"Maximum file size exceeded.",url:"Image URL",remove:"Remove Image",original:"Original"},video:{video:"Video",videoLink:"Video Link",insert:"Insert Video",url:"Video URL",providers:"(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)"},link:{link:"Link",insert:"Insert Link",unlink:"Unlink",edit:"Edit",textToDisplay:"Text to display",url:"To what URL should this link go?",openInNewWindow:"Open in new window"},table:{table:"Table",addRowAbove:"Add row above",addRowBelow:"Add row below",addColLeft:"Add column left",addColRight:"Add column right",delRow:"Delete row",delCol:"Delete column",delTable:"Delete table"},hr:{insert:"Insert Horizontal Rule"},style:{style:"Style",p:"Normal",blockquote:"Quote",pre:"Code",h1:"Header 1",h2:"Header 2",h3:"Header 3",h4:"Header 4",h5:"Header 5",h6:"Header 6"},lists:{unordered:"Unordered list",ordered:"Ordered list"},options:{help:"Help",fullscreen:"Full Screen",codeview:"Code View"},paragraph:{paragraph:"Paragraph",outdent:"Outdent",indent:"Indent",left:"Align left",center:"Align center",right:"Align right",justify:"Justify full"},color:{recent:"Recent Color",more:"More Color",background:"Background Color",foreground:"Foreground Color",transparent:"Transparent",setTransparent:"Set transparent",reset:"Reset",resetToDefault:"Reset to default"},shortcut:{shortcuts:"Keyboard shortcuts",close:"Close",textFormatting:"Text formatting",action:"Action",paragraphFormatting:"Paragraph formatting",documentStyle:"Document Style",extraKeys:"Extra keys"},help:{insertParagraph:"Insert Paragraph",undo:"Undoes the last command",redo:"Redoes the last command",tab:"Tab",untab:"Untab",bold:"Set a bold style",italic:"Set a italic style",underline:"Set a underline style",strikethrough:"Set a strikethrough style",removeFormat:"Clean a style",justifyLeft:"Set left align",justifyCenter:"Set center align",justifyRight:"Set right align",justifyFull:"Set full align",insertUnorderedList:"Toggle unordered list",insertOrderedList:"Toggle ordered list",outdent:"Outdent on current paragraph",indent:"Indent on current paragraph",formatPara:"Change current block's format as a paragraph(P tag)",formatH1:"Change current block's format as H1",formatH2:"Change current block's format as H2",formatH3:"Change current block's format as H3",formatH4:"Change current block's format as H4",formatH5:"Change current block's format as H5",formatH6:"Change current block's format as H6",insertHorizontalRule:"Insert horizontal rule","linkDialog.show":"Show Link Dialog"},history:{undo:"Undo",redo:"Redo"},specialChar:{specialChar:"SPECIAL CHARACTERS",select:"Select Special characters"}}});var Pt={BACKSPACE:8,TAB:9,ENTER:13,SPACE:32,DELETE:46,LEFT:37,UP:38,RIGHT:39,DOWN:40,NUM0:48,NUM1:49,NUM2:50,NUM3:51,NUM4:52,NUM5:53,NUM6:54,NUM7:55,NUM8:56,B:66,E:69,I:73,J:74,K:75,L:76,R:82,S:83,U:85,V:86,Y:89,Z:90,SLASH:191,LEFTBRACKET:219,BACKSLASH:220,RIGHTBRACKET:221};var Ht={isEdit:function(e){return ee.contains([Pt.BACKSPACE,Pt.TAB,Pt.ENTER,Pt.SPACE,Pt.DELETE],e)},isMove:function(e){return ee.contains([Pt.LEFT,Pt.UP,Pt.RIGHT,Pt.DOWN],e)},nameFromCode:F.invertObject(Pt),code:Pt};function Ft(e,t){var n=e.parentElement();var i;var o=document.body.createTextRange();var r;var a=ee.from(n.childNodes);for(i=0;i<a.length;i++){if(Ot.isText(a[i])){continue}o.moveToElementText(a[i]);if(o.compareEndPoints("StartToStart",e)>=0){break}r=a[i]}if(i!==0&&Ot.isText(a[i-1])){var s=document.body.createTextRange();var l=null;s.moveToElementText(r||n);s.collapse(!r);l=r?r.nextSibling:n.firstChild;var u=e.duplicate();u.setEndPoint("StartToStart",s);var c=u.text.replace(/[\r\n]/g,"").length;while(c>l.nodeValue.length&&l.nextSibling){c-=l.nodeValue.length;l=l.nextSibling}var f=l.nodeValue;if(t&&l.nextSibling&&Ot.isText(l.nextSibling)&&c===l.nodeValue.length){c-=l.nodeValue.length;l=l.nextSibling}n=l;i=c}return{cont:n,offset:i}}function jt(e){var t=function(e,n){var i,o;if(Ot.isText(e)){var r=Ot.listPrev(e,F.not(Ot.isText));var a=ee.last(r).previousSibling;i=a||e.parentNode;n+=ee.sum(ee.tail(r),Ot.nodeLength);o=!a}else{i=e.childNodes[n]||e;if(Ot.isText(i)){return t(i,0)}n=0;o=false}return{node:i,collapseToStart:o,offset:n}};var n=document.body.createTextRange();var i=t(e.node,e.offset);n.moveToElementText(i.node);n.collapse(i.collapseToStart);n.moveStart("character",i.offset);return n}var Mt=function(){function t(e,t,n,i){this.sc=e;this.so=t;this.ec=n;this.eo=i;this.isOnEditable=this.makeIsOn(Ot.isEditable);this.isOnList=this.makeIsOn(Ot.isList);this.isOnAnchor=this.makeIsOn(Ot.isAnchor);this.isOnCell=this.makeIsOn(Ot.isCell);this.isOnData=this.makeIsOn(Ot.isData)}t.prototype.nativeRange=function(){if(fe.isW3CRangeSupport){var e=document.createRange();e.setStart(this.sc,this.so);e.setEnd(this.ec,this.eo);return e}else{var t=jt({node:this.sc,offset:this.so});t.setEndPoint("EndToEnd",jt({node:this.ec,offset:this.eo}));return t}};t.prototype.getPoints=function(){return{sc:this.sc,so:this.so,ec:this.ec,eo:this.eo}};t.prototype.getStartPoint=function(){return{node:this.sc,offset:this.so}};t.prototype.getEndPoint=function(){return{node:this.ec,offset:this.eo}};t.prototype.select=function(){var e=this.nativeRange();if(fe.isW3CRangeSupport){var t=document.getSelection();if(t.rangeCount>0){t.removeAllRanges()}t.addRange(e)}else{e.select()}return this};t.prototype.scrollIntoView=function(t){var n=e(t).height();if(t.scrollTop+n<this.sc.offsetTop){t.scrollTop+=Math.abs(t.scrollTop+n-this.sc.offsetTop)}return this};t.prototype.normalize=function(){var e=function(e,t){if(Ot.isVisiblePoint(e)&&!Ot.isEdgePoint(e)||Ot.isVisiblePoint(e)&&Ot.isRightEdgePoint(e)&&!t||Ot.isVisiblePoint(e)&&Ot.isLeftEdgePoint(e)&&t||Ot.isVisiblePoint(e)&&Ot.isBlock(e.node)&&Ot.isEmpty(e.node)){return e}var n=Ot.ancestor(e.node,Ot.isBlock);if((Ot.isLeftEdgePointOf(e,n)||Ot.isVoid(Ot.prevPoint(e).node))&&!t||(Ot.isRightEdgePointOf(e,n)||Ot.isVoid(Ot.nextPoint(e).node))&&t){if(Ot.isVisiblePoint(e)){return e}t=!t}var i=t?Ot.nextPointUntil(Ot.nextPoint(e),Ot.isVisiblePoint):Ot.prevPointUntil(Ot.prevPoint(e),Ot.isVisiblePoint);return i||e};var n=e(this.getEndPoint(),false);var i=this.isCollapsed()?n:e(this.getStartPoint(),true);return new t(i.node,i.offset,n.node,n.offset)};t.prototype.nodes=function(e,t){e=e||F.ok;var n=t&&t.includeAncestor;var i=t&&t.fullyContains;var o=this.getStartPoint();var r=this.getEndPoint();var a=[];var s=[];Ot.walkPoint(o,r,function(t){if(Ot.isEditable(t.node)){return}var o;if(i){if(Ot.isLeftEdgePoint(t)){s.push(t.node)}if(Ot.isRightEdgePoint(t)&&ee.contains(s,t.node)){o=t.node}}else if(n){o=Ot.ancestor(t.node,e)}else{o=t.node}if(o&&e(o)){a.push(o)}},true);return ee.unique(a)};t.prototype.commonAncestor=function(){return Ot.commonAncestor(this.sc,this.ec)};t.prototype.expand=function(e){var n=Ot.ancestor(this.sc,e);var i=Ot.ancestor(this.ec,e);if(!n&&!i){return new t(this.sc,this.so,this.ec,this.eo)}var o=this.getPoints();if(n){o.sc=n;o.so=0}if(i){o.ec=i;o.eo=Ot.nodeLength(i)}return new t(o.sc,o.so,o.ec,o.eo)};t.prototype.collapse=function(e){if(e){return new t(this.sc,this.so,this.sc,this.so)}else{return new t(this.ec,this.eo,this.ec,this.eo)}};t.prototype.splitText=function(){var e=this.sc===this.ec;var n=this.getPoints();if(Ot.isText(this.ec)&&!Ot.isEdgePoint(this.getEndPoint())){this.ec.splitText(this.eo)}if(Ot.isText(this.sc)&&!Ot.isEdgePoint(this.getStartPoint())){n.sc=this.sc.splitText(this.so);n.so=0;if(e){n.ec=n.sc;n.eo=this.eo-this.so}}return new t(n.sc,n.so,n.ec,n.eo)};t.prototype.deleteContents=function(){if(this.isCollapsed()){return this}var n=this.splitText();var i=n.nodes(null,{fullyContains:true});var o=Ot.prevPointUntil(n.getStartPoint(),function(e){return!ee.contains(i,e.node)});var r=[];e.each(i,function(e,t){var n=t.parentNode;if(o.node!==n&&Ot.nodeLength(n)===1){r.push(n)}Ot.remove(t,false)});e.each(r,function(e,t){Ot.remove(t,false)});return new t(o.node,o.offset,o.node,o.offset).normalize()};t.prototype.makeIsOn=function(e){return function(){var t=Ot.ancestor(this.sc,e);return!!t&&t===Ot.ancestor(this.ec,e)}};t.prototype.isLeftEdgeOf=function(e){if(!Ot.isLeftEdgePoint(this.getStartPoint())){return false}var t=Ot.ancestor(this.sc,e);return t&&Ot.isLeftEdgeOf(this.sc,t)};t.prototype.isCollapsed=function(){return this.sc===this.ec&&this.so===this.eo};t.prototype.wrapBodyInlineWithPara=function(){if(Ot.isBodyContainer(this.sc)&&Ot.isEmpty(this.sc)){this.sc.innerHTML=Ot.emptyPara;return new t(this.sc.firstChild,0,this.sc.firstChild,0)}var e=this.normalize();if(Ot.isParaInline(this.sc)||Ot.isPara(this.sc)){return e}var n;if(Ot.isInline(e.sc)){var i=Ot.listAncestor(e.sc,F.not(Ot.isInline));n=ee.last(i);if(!Ot.isInline(n)){n=i[i.length-2]||e.sc.childNodes[e.so]}}else{n=e.sc.childNodes[e.so>0?e.so-1:0]}var o=Ot.listPrev(n,Ot.isParaInline).reverse();o=o.concat(Ot.listNext(n.nextSibling,Ot.isParaInline));if(o.length){var r=Ot.wrap(ee.head(o),"p");Ot.appendChildNodes(r,ee.tail(o))}return this.normalize()};t.prototype.insertNode=function(e){var t=this.wrapBodyInlineWithPara().deleteContents();var n=Ot.splitPoint(t.getStartPoint(),Ot.isInline(e));if(n.rightNode){n.rightNode.parentNode.insertBefore(e,n.rightNode)}else{n.container.appendChild(e)}return e};t.prototype.pasteHTML=function(t){var n=e("<div></div>").html(t)[0];var i=ee.from(n.childNodes);var o=this.wrapBodyInlineWithPara().deleteContents();return i.reverse().map(function(e){return o.insertNode(e)}).reverse()};t.prototype.toString=function(){var e=this.nativeRange();return fe.isW3CRangeSupport?e.toString():e.text};t.prototype.getWordRange=function(e){var n=this.getEndPoint();if(!Ot.isCharPoint(n)){return this}var i=Ot.prevPointUntil(n,function(e){return!Ot.isCharPoint(e)});if(e){n=Ot.nextPointUntil(n,function(e){return!Ot.isCharPoint(e)})}return new t(i.node,i.offset,n.node,n.offset)};t.prototype.bookmark=function(e){return{s:{path:Ot.makeOffsetPath(e,this.sc),offset:this.so},e:{path:Ot.makeOffsetPath(e,this.ec),offset:this.eo}}};t.prototype.paraBookmark=function(e){return{s:{path:ee.tail(Ot.makeOffsetPath(ee.head(e),this.sc)),offset:this.so},e:{path:ee.tail(Ot.makeOffsetPath(ee.last(e),this.ec)),offset:this.eo}}};t.prototype.getClientRects=function(){var e=this.nativeRange();return e.getClientRects()};return t}();var Bt={create:function(e,t,n,i){if(arguments.length===4){return new Mt(e,t,n,i)}else if(arguments.length===2){n=e;i=t;return new Mt(e,t,n,i)}else{var o=this.createFromSelection();if(!o&&arguments.length===1){o=this.createFromNode(arguments[0]);return o.collapse(Ot.emptyPara===arguments[0].innerHTML)}return o}},createFromSelection:function(){var e,t,n,i;if(fe.isW3CRangeSupport){var o=document.getSelection();if(!o||o.rangeCount===0){return null}else if(Ot.isBody(o.anchorNode)){return null}var r=o.getRangeAt(0);e=r.startContainer;t=r.startOffset;n=r.endContainer;i=r.endOffset}else{var a=document.selection.createRange();var s=a.duplicate();s.collapse(false);var l=a;l.collapse(true);var u=Ft(l,true);var c=Ft(s,false);if(Ot.isText(u.node)&&Ot.isLeftEdgePoint(u)&&Ot.isTextNode(c.node)&&Ot.isRightEdgePoint(c)&&c.node.nextSibling===u.node){u=c}e=u.cont;t=u.offset;n=c.cont;i=c.offset}return new Mt(e,t,n,i)},createFromNode:function(e){var t=e;var n=0;var i=e;var o=Ot.nodeLength(i);if(Ot.isVoid(t)){n=Ot.listPrev(t).length-1;t=t.parentNode}if(Ot.isBR(i)){o=Ot.listPrev(i).length-1;i=i.parentNode}else if(Ot.isVoid(i)){o=Ot.listPrev(i).length;i=i.parentNode}return this.create(t,n,i,o)},createFromNodeBefore:function(e){return this.createFromNode(e).collapse(true)},createFromNodeAfter:function(e){return this.createFromNode(e).collapse()},createFromBookmark:function(e,t){var n=Ot.fromOffsetPath(e,t.s.path);var i=t.s.offset;var o=Ot.fromOffsetPath(e,t.e.path);var r=t.e.offset;return new Mt(n,i,o,r)},createFromParaBookmark:function(e,t){var n=e.s.offset;var i=e.e.offset;var o=Ot.fromOffsetPath(ee.head(t),e.s.path);var r=Ot.fromOffsetPath(ee.last(t),e.e.path);return new Mt(o,n,r,i)}};function zt(t){return e.Deferred(function(n){e.extend(new FileReader,{onload:function(e){var t=e.target.result;n.resolve(t)},onerror:function(e){n.reject(e)}}).readAsDataURL(t)}).promise()}function qt(t){return e.Deferred(function(n){var i=e("<img>");i.one("load",function(){i.off("error abort");n.resolve(i)}).one("error abort",function(){i.off("load").detach();n.reject(i)}).css({display:"none"}).appendTo(document.body).attr("src",t)}).promise()}var Ut=function(){function e(e){this.stack=[];this.stackOffset=-1;this.$editable=e;this.editable=e[0]}e.prototype.makeSnapshot=function(){var e=Bt.create(this.editable);var t={s:{path:[],offset:0},e:{path:[],offset:0}};return{contents:this.$editable.html(),bookmark:e?e.bookmark(this.editable):t}};e.prototype.applySnapshot=function(e){if(e.contents!==null){this.$editable.html(e.contents)}if(e.bookmark!==null){Bt.createFromBookmark(this.editable,e.bookmark).select()}};e.prototype.rewind=function(){if(this.$editable.html()!==this.stack[this.stackOffset].contents){this.recordUndo()}this.stackOffset=0;this.applySnapshot(this.stack[this.stackOffset])};e.prototype.reset=function(){this.stack=[];this.stackOffset=-1;this.$editable.html("");this.recordUndo()};e.prototype.undo=function(){if(this.$editable.html()!==this.stack[this.stackOffset].contents){this.recordUndo()}if(this.stackOffset>0){this.stackOffset--;this.applySnapshot(this.stack[this.stackOffset])}};e.prototype.redo=function(){if(this.stack.length-1>this.stackOffset){this.stackOffset++;this.applySnapshot(this.stack[this.stackOffset])}};e.prototype.recordUndo=function(){this.stackOffset++;if(this.stack.length>this.stackOffset){this.stack=this.stack.slice(0,this.stackOffset)}this.stack.push(this.makeSnapshot())};return e}();var Kt=function(){function t(){}t.prototype.jQueryCSS=function(t,n){if(fe.jqueryVersion<1.9){var i={};e.each(n,function(e,n){i[n]=t.css(n)});return i}return t.css(n)};t.prototype.fromNode=function(e){var t=["font-family","font-size","text-align","list-style-type","line-height"];var n=this.jQueryCSS(e,t)||{};n["font-size"]=parseInt(n["font-size"],10);return n};t.prototype.stylePara=function(t,n){e.each(t.nodes(Ot.isPara,{includeAncestor:true}),function(t,i){e(i).css(n)})};t.prototype.styleNodes=function(t,n){t=t.splitText();var i=n&&n.nodeName||"SPAN";var o=!!(n&&n.expandClosestSibling);var r=!!(n&&n.onlyPartialContains);if(t.isCollapsed()){return[t.insertNode(Ot.create(i))]}var a=Ot.makePredByNodeName(i);var s=t.nodes(Ot.isText,{fullyContains:true}).map(function(e){return Ot.singleChildAncestor(e,a)||Ot.wrap(e,i)});if(o){if(r){var l=t.nodes();a=F.and(a,function(e){return ee.contains(l,e)})}return s.map(function(t){var n=Ot.withClosestSiblings(t,a);var i=ee.head(n);var o=ee.tail(n);e.each(o,function(e,t){Ot.appendChildNodes(i,t.childNodes);Ot.remove(t)});return ee.head(n)})}else{return s}};t.prototype.current=function(t){var n=e(!Ot.isElement(t.sc)?t.sc.parentNode:t.sc);var i=this.fromNode(n);try{i=e.extend(i,{"font-bold":document.queryCommandState("bold")?"bold":"normal","font-italic":document.queryCommandState("italic")?"italic":"normal","font-underline":document.queryCommandState("underline")?"underline":"normal","font-subscript":document.queryCommandState("subscript")?"subscript":"normal","font-superscript":document.queryCommandState("superscript")?"superscript":"normal","font-strikethrough":document.queryCommandState("strikethrough")?"strikethrough":"normal","font-family":document.queryCommandValue("fontname")||i["font-family"]})}catch(e){}if(!t.isOnList()){i["list-style"]="none"}else{var o=["circle","disc","disc-leading-zero","square"];var r=e.inArray(i["list-style-type"],o)>-1;i["list-style"]=r?"unordered":"ordered"}var a=Ot.ancestor(t.sc,Ot.isPara);if(a&&a.style["line-height"]){i["line-height"]=a.style.lineHeight}else{var s=parseInt(i["line-height"],10)/parseInt(i["font-size"],10);i["line-height"]=s.toFixed(1)}i.anchor=t.isOnAnchor()&&Ot.ancestor(t.sc,Ot.isAnchor);i.ancestors=Ot.listAncestor(t.sc,Ot.isEditable);i.range=t;return i};return t}();var Wt=function(){function t(){}t.prototype.insertOrderedList=function(e){this.toggleList("OL",e)};t.prototype.insertUnorderedList=function(e){this.toggleList("UL",e)};t.prototype.indent=function(t){var n=this;var i=Bt.create(t).wrapBodyInlineWithPara();var o=i.nodes(Ot.isPara,{includeAncestor:true});var r=ee.clusterBy(o,F.peq2("parentNode"));e.each(r,function(t,i){var o=ee.head(i);if(Ot.isLi(o)){n.wrapList(i,o.parentNode.nodeName)}else{e.each(i,function(t,n){e(n).css("marginLeft",function(e,t){return(parseInt(t,10)||0)+25})})}});i.select()};t.prototype.outdent=function(t){var n=this;var i=Bt.create(t).wrapBodyInlineWithPara();var o=i.nodes(Ot.isPara,{includeAncestor:true});var r=ee.clusterBy(o,F.peq2("parentNode"));e.each(r,function(t,i){var o=ee.head(i);if(Ot.isLi(o)){n.releaseList([i])}else{e.each(i,function(t,n){e(n).css("marginLeft",function(e,t){t=parseInt(t,10)||0;return t>25?t-25:""})})}});i.select()};t.prototype.toggleList=function(t,n){var i=this;var o=Bt.create(n).wrapBodyInlineWithPara();var r=o.nodes(Ot.isPara,{includeAncestor:true});var a=o.paraBookmark(r);var s=ee.clusterBy(r,F.peq2("parentNode"));if(ee.find(r,Ot.isPurePara)){var l=[];e.each(s,function(e,n){l=l.concat(i.wrapList(n,t))});r=l}else{var u=o.nodes(Ot.isList,{includeAncestor:true}).filter(function(n){return!e.nodeName(n,t)});if(u.length){e.each(u,function(e,n){Ot.replace(n,t)})}else{r=this.releaseList(s,true)}}Bt.createFromParaBookmark(a,r).select()};t.prototype.wrapList=function(e,t){var n=ee.head(e);var i=ee.last(e);var o=Ot.isList(n.previousSibling)&&n.previousSibling;var r=Ot.isList(i.nextSibling)&&i.nextSibling;var a=o||Ot.insertAfter(Ot.create(t||"UL"),i);e=e.map(function(e){return Ot.isPurePara(e)?Ot.replace(e,"LI"):e});Ot.appendChildNodes(a,e);if(r){Ot.appendChildNodes(a,ee.from(r.childNodes));Ot.remove(r)}return e};t.prototype.releaseList=function(t,n){var i=[];e.each(t,function(t,o){var r=ee.head(o);var a=ee.last(o);var s=n?Ot.lastAncestor(r,Ot.isList):r.parentNode;var l=s.childNodes.length>1?Ot.splitTree(s,{node:a.parentNode,offset:Ot.position(a)+1},{isSkipPaddingBlankHTML:true}):null;var u=Ot.splitTree(s,{node:r.parentNode,offset:Ot.position(r)},{isSkipPaddingBlankHTML:true});o=n?Ot.listDescendant(u,Ot.isLi):ee.from(u.childNodes).filter(Ot.isLi);if(n||!Ot.isList(s.parentNode)){o=o.map(function(e){return Ot.replace(e,"P")})}e.each(ee.from(o).reverse(),function(e,t){Ot.insertAfter(t,s)});var c=ee.compact([s,u,l]);e.each(c,function(t,n){var i=[n].concat(Ot.listDescendant(n,Ot.isList));e.each(i.reverse(),function(e,t){if(!Ot.nodeLength(t)){Ot.remove(t,true)}})});i=i.concat(o)});return i};return t}();var _t=function(){function t(){this.bullet=new Wt}t.prototype.insertTab=function(e,t){var n=Ot.createText(new Array(t+1).join(Ot.NBSP_CHAR));e=e.deleteContents();e.insertNode(n,true);e=Bt.create(n,t);e.select()};t.prototype.insertParagraph=function(t){var n=Bt.create(t);n=n.deleteContents();n=n.wrapBodyInlineWithPara();var i=Ot.ancestor(n.sc,Ot.isPara);var o;if(i){if(Ot.isEmpty(i)&&Ot.isLi(i)){this.bullet.toggleList(i.parentNode.nodeName);return}else if(Ot.isEmpty(i)&&Ot.isPara(i)&&Ot.isBlockquote(i.parentNode)){Ot.insertAfter(i,i.parentNode);o=i}else{o=Ot.splitTree(i,n.getStartPoint());var r=Ot.listDescendant(i,Ot.isEmptyAnchor);r=r.concat(Ot.listDescendant(o,Ot.isEmptyAnchor));e.each(r,function(e,t){Ot.remove(t)});if((Ot.isHeading(o)||Ot.isPre(o)||Ot.isCustomStyleTag(o))&&Ot.isEmpty(o)){o=Ot.replace(o,"p")}}}else{var a=n.sc.childNodes[n.so];o=e(Ot.emptyPara)[0];if(a){n.sc.insertBefore(o,a)}else{n.sc.appendChild(o)}}Bt.create(o,0).normalize().select().scrollIntoView(t)};return t}();var Vt=function(e,t,n,i){var o={colPos:0,rowPos:0};var r=[];var a=[];function s(){if(!e||!e.tagName||e.tagName.toLowerCase()!=="td"&&e.tagName.toLowerCase()!=="th"){console.error("Impossible to identify start Cell point.",e);return}o.colPos=e.cellIndex;if(!e.parentElement||!e.parentElement.tagName||e.parentElement.tagName.toLowerCase()!=="tr"){console.error("Impossible to identify start Row point.",e);return}o.rowPos=e.parentElement.rowIndex}function l(e,t,n,i,o,a,s){var l={baseRow:n,baseCell:i,isRowSpan:o,isColSpan:a,isVirtual:s};if(!r[e]){r[e]=[]}r[e][t]=l}function u(e,t,n,i){return{baseCell:e.baseCell,action:t,virtualTable:{rowIndex:n,cellIndex:i}}}function c(e,t){if(!r[e]){return t}if(!r[e][t]){return t}var n=t;while(r[e][n]){n++;if(!r[e][n]){return n}}}function f(e,t){var n=c(e.rowIndex,t.cellIndex);var i=t.colSpan>1;var r=t.rowSpan>1;var a=e.rowIndex===o.rowPos&&t.cellIndex===o.colPos;l(e.rowIndex,n,e,t,r,i,false);var s=t.attributes.rowSpan?parseInt(t.attributes.rowSpan.value,10):0;if(s>1){for(var u=1;u<s;u++){var f=e.rowIndex+u;d(f,n,t,a);l(f,n,e,t,true,i,true)}}var h=t.attributes.colSpan?parseInt(t.attributes.colSpan.value,10):0;if(h>1){for(var p=1;p<h;p++){var v=c(e.rowIndex,n+p);d(e.rowIndex,v,t,a);l(e.rowIndex,v,e,t,r,true,true)}}}function d(e,t,n,i){if(e===o.rowPos&&o.colPos>=n.cellIndex&&n.cellIndex<=t&&!i){o.colPos++}}function h(){var e=i.rows;for(var t=0;t<e.length;t++){var n=e[t].cells;for(var o=0;o<n.length;o++){f(e[t],n[o])}}}function p(e){switch(t){case Vt.where.Column:if(e.isColSpan){return Vt.resultAction.SubtractSpanCount}break;case Vt.where.Row:if(!e.isVirtual&&e.isRowSpan){return Vt.resultAction.AddCell}else if(e.isRowSpan){return Vt.resultAction.SubtractSpanCount}break}return Vt.resultAction.RemoveCell}function v(e){switch(t){case Vt.where.Column:if(e.isColSpan){return Vt.resultAction.SumSpanCount}else if(e.isRowSpan&&e.isVirtual){return Vt.resultAction.Ignore}break;case Vt.where.Row:if(e.isRowSpan){return Vt.resultAction.SumSpanCount}else if(e.isColSpan&&e.isVirtual){return Vt.resultAction.Ignore}break}return Vt.resultAction.AddCell}function m(){s();h()}this.getActionList=function(){var e=t===Vt.where.Row?o.rowPos:-1;var i=t===Vt.where.Column?o.colPos:-1;var s=0;var l=true;while(l){var c=e>=0?e:s;var f=i>=0?i:s;var d=r[c];if(!d){l=false;return a}var h=d[f];if(!h){l=false;return a}var m=Vt.resultAction.Ignore;switch(n){case Vt.requestAction.Add:m=v(h);break;case Vt.requestAction.Delete:m=p(h);break}a.push(u(h,m,c,f));s++}return a};m()};Vt.where={Row:0,Column:1};Vt.requestAction={Add:0,Delete:1};Vt.resultAction={Ignore:0,SubtractSpanCount:1,RemoveCell:2,AddCell:3,SumSpanCount:4};var Gt=function(){function t(){}t.prototype.tab=function(e,t){var n=Ot.ancestor(e.commonAncestor(),Ot.isCell);var i=Ot.ancestor(n,Ot.isTable);var o=Ot.listDescendant(i,Ot.isCell);var r=ee[t?"prev":"next"](o,n);if(r){Bt.create(r,0).select()}};t.prototype.addRow=function(t,n){var i=Ot.ancestor(t.commonAncestor(),Ot.isCell);var o=e(i).closest("tr");var r=this.recoverAttributes(o);var a=e("<tr"+r+"></tr>");var s=new Vt(i,Vt.where.Row,Vt.requestAction.Add,e(o).closest("table")[0]);var l=s.getActionList();for(var u=0;u<l.length;u++){var c=l[u];var f=this.recoverAttributes(c.baseCell);switch(c.action){case Vt.resultAction.AddCell:a.append("<td"+f+">"+Ot.blank+"</td>");break;case Vt.resultAction.SumSpanCount:if(n==="top"){var d=c.baseCell.parent;var h=(!d?0:c.baseCell.closest("tr").rowIndex)<=o[0].rowIndex;if(h){var p=e("<div></div>").append(e("<td"+f+">"+Ot.blank+"</td>").removeAttr("rowspan")).html();a.append(p);break}}var v=parseInt(c.baseCell.rowSpan,10);v++;c.baseCell.setAttribute("rowSpan",v);break}}if(n==="top"){o.before(a)}else{var m=i.rowSpan>1;if(m){var g=o[0].rowIndex+(i.rowSpan-2);e(e(o).parent().find("tr")[g]).after(e(a));return}o.after(a)}};t.prototype.addCol=function(t,n){var i=Ot.ancestor(t.commonAncestor(),Ot.isCell);var o=e(i).closest("tr");var r=e(o).siblings();r.push(o);var a=new Vt(i,Vt.where.Column,Vt.requestAction.Add,e(o).closest("table")[0]);var s=a.getActionList();for(var l=0;l<s.length;l++){var u=s[l];var c=this.recoverAttributes(u.baseCell);switch(u.action){case Vt.resultAction.AddCell:if(n==="right"){e(u.baseCell).after("<td"+c+">"+Ot.blank+"</td>")}else{e(u.baseCell).before("<td"+c+">"+Ot.blank+"</td>")}break;case Vt.resultAction.SumSpanCount:if(n==="right"){var f=parseInt(u.baseCell.colSpan,10);f++;u.baseCell.setAttribute("colSpan",f)}else{e(u.baseCell).before("<td"+c+">"+Ot.blank+"</td>")}break}}};t.prototype.recoverAttributes=function(e){var t="";if(!e){return t}var n=e.attributes||[];for(var i=0;i<n.length;i++){if(n[i].name.toLowerCase()==="id"){continue}if(n[i].specified){t+=" "+n[i].name+"='"+n[i].value+"'"}}return t};t.prototype.deleteRow=function(t){var n=Ot.ancestor(t.commonAncestor(),Ot.isCell);var i=e(n).closest("tr");var o=i.children("td, th").index(e(n));var r=i[0].rowIndex;var a=new Vt(n,Vt.where.Row,Vt.requestAction.Delete,e(i).closest("table")[0]);var s=a.getActionList();for(var l=0;l<s.length;l++){if(!s[l]){continue}var u=s[l].baseCell;var c=s[l].virtualTable;var f=u.rowSpan&&u.rowSpan>1;var d=f?parseInt(u.rowSpan,10):0;switch(s[l].action){case Vt.resultAction.Ignore:continue;case Vt.resultAction.AddCell:var h=i.next("tr")[0];if(!h){continue}var p=i[0].cells[o];if(f){if(d>2){d--;h.insertBefore(p,h.cells[o]);h.cells[o].setAttribute("rowSpan",d);h.cells[o].innerHTML=""}else if(d===2){h.insertBefore(p,h.cells[o]);h.cells[o].removeAttribute("rowSpan");h.cells[o].innerHTML=""}}continue;case Vt.resultAction.SubtractSpanCount:if(f){if(d>2){d--;u.setAttribute("rowSpan",d);if(c.rowIndex!==r&&u.cellIndex===o){u.innerHTML=""}}else if(d===2){u.removeAttribute("rowSpan");if(c.rowIndex!==r&&u.cellIndex===o){u.innerHTML=""}}}continue;case Vt.resultAction.RemoveCell:continue}}i.remove()};t.prototype.deleteCol=function(t){var n=Ot.ancestor(t.commonAncestor(),Ot.isCell);var i=e(n).closest("tr");var o=i.children("td, th").index(e(n));var r=new Vt(n,Vt.where.Column,Vt.requestAction.Delete,e(i).closest("table")[0]);var a=r.getActionList();for(var s=0;s<a.length;s++){if(!a[s]){continue}switch(a[s].action){case Vt.resultAction.Ignore:continue;case Vt.resultAction.SubtractSpanCount:var l=a[s].baseCell;var u=l.colSpan&&l.colSpan>1;if(u){var c=l.colSpan?parseInt(l.colSpan,10):0;if(c>2){c--;l.setAttribute("colSpan",c);if(l.cellIndex===o){l.innerHTML=""}}else if(c===2){l.removeAttribute("colSpan");if(l.cellIndex===o){l.innerHTML=""}}}continue;case Vt.resultAction.RemoveCell:Ot.remove(a[s].baseCell,true);continue}}};t.prototype.createTable=function(t,n,i){var o=[];var r;for(var a=0;a<t;a++){o.push("<td>"+Ot.blank+"</td>")}r=o.join("");var s=[];var l;for(var u=0;u<n;u++){s.push("<tr>"+r+"</tr>")}l=s.join("");var c=e("<table>"+l+"</table>");if(i&&i.tableClassName){c.addClass(i.tableClassName)}return c[0]};t.prototype.deleteTable=function(t){var n=Ot.ancestor(t.commonAncestor(),Ot.isCell);e(n).closest("table").remove()};return t}();var Qt="bogus";var Xt=function(){function t(t){var n=this;this.context=t;this.$note=t.layoutInfo.note;this.$editor=t.layoutInfo.editor;this.$editable=t.layoutInfo.editable;this.options=t.options;this.lang=this.options.langInfo;this.editable=this.$editable[0];this.lastRange=null;this.style=new Kt;this.table=new Gt;this.typing=new _t;this.bullet=new Wt;this.history=new Ut(this.$editable);this.context.memo("help.undo",this.lang.help.undo);this.context.memo("help.redo",this.lang.help.redo);this.context.memo("help.tab",this.lang.help.tab);this.context.memo("help.untab",this.lang.help.untab);this.context.memo("help.insertParagraph",this.lang.help.insertParagraph);this.context.memo("help.insertOrderedList",this.lang.help.insertOrderedList);this.context.memo("help.insertUnorderedList",this.lang.help.insertUnorderedList);this.context.memo("help.indent",this.lang.help.indent);this.context.memo("help.outdent",this.lang.help.outdent);this.context.memo("help.formatPara",this.lang.help.formatPara);this.context.memo("help.insertHorizontalRule",this.lang.help.insertHorizontalRule);this.context.memo("help.fontName",this.lang.help.fontName);var i=["bold","italic","underline","strikethrough","superscript","subscript","justifyLeft","justifyCenter","justifyRight","justifyFull","formatBlock","removeFormat","backColor"];for(var o=0,r=i.length;o<r;o++){this[i[o]]=function(e){return function(t){n.beforeCommand();document.execCommand(e,false,t);n.afterCommand(true)}}(i[o]);this.context.memo("help."+i[o],this.lang.help[i[o]])}this.fontName=this.wrapCommand(function(e){return n.fontStyling("font-family","'"+e+"'")});this.fontSize=this.wrapCommand(function(e){return n.fontStyling("font-size",e+"px")});for(var o=1;o<=6;o++){this["formatH"+o]=function(e){return function(){n.formatBlock("H"+e)}}(o);this.context.memo("help.formatH"+o,this.lang.help["formatH"+o])}this.insertParagraph=this.wrapCommand(function(){n.typing.insertParagraph(n.editable)});this.insertOrderedList=this.wrapCommand(function(){n.bullet.insertOrderedList(n.editable)});this.insertUnorderedList=this.wrapCommand(function(){n.bullet.insertUnorderedList(n.editable)});this.indent=this.wrapCommand(function(){n.bullet.indent(n.editable)});this.outdent=this.wrapCommand(function(){n.bullet.outdent(n.editable)});this.insertNode=this.wrapCommand(function(t){if(n.isLimited(e(t).text().length)){return}var i=n.createRange();i.insertNode(t);Bt.createFromNodeAfter(t).select()});this.insertText=this.wrapCommand(function(e){if(n.isLimited(e.length)){return}var t=n.createRange();var i=t.insertNode(Ot.createText(e));Bt.create(i,Ot.nodeLength(i)).select()});this.pasteHTML=this.wrapCommand(function(e){if(n.isLimited(e.length)){return}var t=n.createRange().pasteHTML(e);Bt.createFromNodeAfter(ee.last(t)).select()});this.formatBlock=this.wrapCommand(function(e,t){var i=n.options.callbacks.onApplyCustomStyle;if(i){i.call(n,t,n.context,n.onFormatBlock)}else{n.onFormatBlock(e,t)}});this.insertHorizontalRule=this.wrapCommand(function(){var e=n.createRange().insertNode(Ot.create("HR"));if(e.nextSibling){Bt.create(e.nextSibling,0).normalize().select()}});this.lineHeight=this.wrapCommand(function(e){n.style.stylePara(n.createRange(),{lineHeight:e})});this.createLink=this.wrapCommand(function(t){var i=t.url;var o=t.text;var r=t.isNewWindow;var a=t.range||n.createRange();var s=a.toString()!==o;if(typeof i==="string"){i=i.trim()}if(n.options.onCreateLink){i=n.options.onCreateLink(i)}else{i=/^[A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?/.test(i)?i:"http://"+i}var l=[];if(s){a=a.deleteContents();var u=a.insertNode(e("<A>"+o+"</A>")[0]);l.push(u)}else{l=n.style.styleNodes(a,{nodeName:"A",expandClosestSibling:true,onlyPartialContains:true})}e.each(l,function(t,n){e(n).attr("href",i);if(r){e(n).attr("target","_blank")}else{e(n).removeAttr("target")}});var c=Bt.createFromNodeBefore(ee.head(l));var f=c.getStartPoint();var d=Bt.createFromNodeAfter(ee.last(l));var h=d.getEndPoint();Bt.create(f.node,f.offset,h.node,h.offset).select()});this.color=this.wrapCommand(function(e){var t=e.foreColor;var n=e.backColor;if(t){document.execCommand("foreColor",false,t)}if(n){document.execCommand("backColor",false,n)}});this.foreColor=this.wrapCommand(function(e){document.execCommand("styleWithCSS",false,true);document.execCommand("foreColor",false,e)});this.insertTable=this.wrapCommand(function(e){var t=e.split("x");var i=n.createRange().deleteContents();i.insertNode(n.table.createTable(t[0],t[1],n.options))});this.removeMedia=this.wrapCommand(function(){var t=e(n.restoreTarget()).parent();if(t.parent("figure").length){t.parent("figure").remove()}else{t=e(n.restoreTarget()).detach()}n.context.triggerEvent("media.delete",t,n.$editable)});this.floatMe=this.wrapCommand(function(t){var i=e(n.restoreTarget());i.toggleClass("note-float-left",t==="left");i.toggleClass("note-float-right",t==="right");i.css("float",t)});this.resize=this.wrapCommand(function(t){var i=e(n.restoreTarget());i.css({width:t*100+"%",height:""})})}t.prototype.initialize=function(){var e=this;this.$editable.on("keydown",function(t){if(t.keyCode===Ht.code.ENTER){e.context.triggerEvent("enter",t)}e.context.triggerEvent("keydown",t);if(!t.isDefaultPrevented()){if(e.options.shortcuts){e.handleKeyMap(t)}else{e.preventDefaultEditableShortCuts(t)}}if(e.isLimited(1,t)){return false}}).on("keyup",function(t){e.context.triggerEvent("keyup",t)}).on("focus",function(t){e.context.triggerEvent("focus",t)}).on("blur",function(t){e.context.triggerEvent("blur",t)}).on("mousedown",function(t){e.context.triggerEvent("mousedown",t)}).on("mouseup",function(t){e.context.triggerEvent("mouseup",t)}).on("scroll",function(t){e.context.triggerEvent("scroll",t)}).on("paste",function(t){e.context.triggerEvent("paste",t)});this.$editable.html(Ot.html(this.$note)||Ot.emptyPara);this.$editable.on(fe.inputEventName,F.debounce(function(){e.context.triggerEvent("change",e.$editable.html())},100));this.$editor.on("focusin",function(t){e.context.triggerEvent("focusin",t)}).on("focusout",function(t){e.context.triggerEvent("focusout",t)});if(!this.options.airMode){if(this.options.width){this.$editor.outerWidth(this.options.width)}if(this.options.height){this.$editable.outerHeight(this.options.height)}if(this.options.maxHeight){this.$editable.css("max-height",this.options.maxHeight)}if(this.options.minHeight){this.$editable.css("min-height",this.options.minHeight)}}this.history.recordUndo()};t.prototype.destroy=function(){this.$editable.off()};t.prototype.handleKeyMap=function(e){var t=this.options.keyMap[fe.isMac?"mac":"pc"];var n=[];if(e.metaKey){n.push("CMD")}if(e.ctrlKey&&!e.altKey){n.push("CTRL")}if(e.shiftKey){n.push("SHIFT")}var i=Ht.nameFromCode[e.keyCode];if(i){n.push(i)}var o=t[n.join("+")];if(o){if(this.context.invoke(o)!==false){e.preventDefault()}}else if(Ht.isEdit(e.keyCode)){this.afterCommand()}};t.prototype.preventDefaultEditableShortCuts=function(e){if((e.ctrlKey||e.metaKey)&&ee.contains([66,73,85],e.keyCode)){e.preventDefault()}};t.prototype.isLimited=function(e,t){e=e||0;if(typeof t!=="undefined"){if(Ht.isMove(t.keyCode)||(t.ctrlKey||t.metaKey)||ee.contains([Ht.code.BACKSPACE,Ht.code.DELETE],t.keyCode)){return false}}if(this.options.maxTextLength>0){if(this.$editable.text().length+e>=this.options.maxTextLength){return true}}return false};t.prototype.createRange=function(){this.focus();return Bt.create(this.editable)};t.prototype.saveRange=function(e){this.lastRange=this.createRange();if(e){this.lastRange.collapse().select()}};t.prototype.restoreRange=function(){if(this.lastRange){this.lastRange.select();this.focus()}};t.prototype.saveTarget=function(e){this.$editable.data("target",e)};t.prototype.clearTarget=function(){this.$editable.removeData("target")};t.prototype.restoreTarget=function(){return this.$editable.data("target")};t.prototype.currentStyle=function(){var e=Bt.create();if(e){e=e.normalize()}return e?this.style.current(e):this.style.fromNode(this.$editable)};t.prototype.styleFromNode=function(e){return this.style.fromNode(e)};t.prototype.undo=function(){this.context.triggerEvent("before.command",this.$editable.html());this.history.undo();this.context.triggerEvent("change",this.$editable.html())};t.prototype.redo=function(){this.context.triggerEvent("before.command",this.$editable.html());this.history.redo();this.context.triggerEvent("change",this.$editable.html())};t.prototype.beforeCommand=function(){this.context.triggerEvent("before.command",this.$editable.html());this.focus()};t.prototype.afterCommand=function(e){this.history.recordUndo();if(!e){this.context.triggerEvent("change",this.$editable.html())}};t.prototype.tab=function(){var e=this.createRange();if(e.isCollapsed()&&e.isOnCell()){this.table.tab(e)}else{if(this.options.tabSize===0){return false}if(!this.isLimited(this.options.tabSize)){this.beforeCommand();this.typing.insertTab(e,this.options.tabSize);this.afterCommand()}}};t.prototype.untab=function(){var e=this.createRange();if(e.isCollapsed()&&e.isOnCell()){this.table.tab(e,true)}else{if(this.options.tabSize===0){return false}}};t.prototype.wrapCommand=function(e){var t=this;return function(){t.beforeCommand();e.apply(t,arguments);t.afterCommand()}};t.prototype.insertImage=function(e,t){var n=this;return qt(e,t).then(function(e){n.beforeCommand();if(typeof t==="function"){t(e)}else{if(typeof t==="string"){e.attr("data-filename",t)}e.css("width",Math.min(n.$editable.width(),e.width()))}e.show();Bt.create(n.editable).insertNode(e[0]);Bt.createFromNodeAfter(e[0]).select();n.afterCommand()}).fail(function(e){n.context.triggerEvent("image.upload.error",e)})};t.prototype.insertImages=function(t){var n=this;e.each(t,function(e,t){var i=t.name;if(n.options.maximumImageFileSize&&n.options.maximumImageFileSize<t.size){n.context.triggerEvent("image.upload.error",n.lang.image.maximumFileSizeError)}else{zt(t).then(function(e){return n.insertImage(e,i)}).fail(function(){n.context.triggerEvent("image.upload.error")})}})};t.prototype.insertImagesOrCallback=function(e){var t=this.options.callbacks;if(t.onImageUpload){this.context.triggerEvent("image.upload",e)}else{this.insertImages(e)}};t.prototype.getSelectedText=function(){var e=this.createRange();if(e.isOnAnchor()){e=Bt.createFromNode(Ot.ancestor(e.sc,Ot.isAnchor))}return e.toString()};t.prototype.onFormatBlock=function(t,n){t=fe.isMSIE?"<"+t+">":t;document.execCommand("FormatBlock",false,t);if(n&&n.length){var i=n[0].className||"";if(i){var o=this.createRange();var r=e([o.sc,o.ec]).closest(t);r.addClass(i)}}};t.prototype.formatPara=function(){this.formatBlock("P")};t.prototype.fontStyling=function(t,n){var i=this.createRange();if(i){var o=this.style.styleNodes(i);e(o).css(t,n);if(i.isCollapsed()){var r=ee.head(o);if(r&&!Ot.nodeLength(r)){r.innerHTML=Ot.ZERO_WIDTH_NBSP_CHAR;Bt.createFromNodeAfter(r.firstChild).select();this.$editable.data(Qt,r)}}}};t.prototype.unlink=function(){var e=this.createRange();if(e.isOnAnchor()){var t=Ot.ancestor(e.sc,Ot.isAnchor);e=Bt.createFromNode(t);e.select();this.beforeCommand();document.execCommand("unlink");this.afterCommand()}};t.prototype.getLinkInfo=function(){var t=this.createRange().expand(Ot.isAnchor);var n=e(ee.head(t.nodes(Ot.isAnchor)));var i={range:t,text:t.toString(),url:n.length?n.attr("href"):""};if(n.length){i.isNewWindow=n.attr("target")==="_blank"}return i};t.prototype.addRow=function(e){var t=this.createRange(this.$editable);if(t.isCollapsed()&&t.isOnCell()){this.beforeCommand();this.table.addRow(t,e);this.afterCommand()}};t.prototype.addCol=function(e){var t=this.createRange(this.$editable);if(t.isCollapsed()&&t.isOnCell()){this.beforeCommand();this.table.addCol(t,e);this.afterCommand()}};t.prototype.deleteRow=function(){var e=this.createRange(this.$editable);if(e.isCollapsed()&&e.isOnCell()){this.beforeCommand();this.table.deleteRow(e);this.afterCommand()}};t.prototype.deleteCol=function(){var e=this.createRange(this.$editable);if(e.isCollapsed()&&e.isOnCell()){this.beforeCommand();this.table.deleteCol(e);this.afterCommand()}};t.prototype.deleteTable=function(){var e=this.createRange(this.$editable);if(e.isCollapsed()&&e.isOnCell()){this.beforeCommand();this.table.deleteTable(e);this.afterCommand()}};t.prototype.resizeTo=function(e,t,n){var i;if(n){var o=e.y/e.x;var r=t.data("ratio");i={width:r>o?e.x:e.y/r,height:r>o?e.x*r:e.y}}else{i={width:e.x,height:e.y}}t.css(i)};t.prototype.hasFocus=function(){return this.$editable.is(":focus")};t.prototype.focus=function(){if(!this.hasFocus()){this.$editable.focus()}};t.prototype.isEmpty=function(){return Ot.isEmpty(this.$editable[0])||Ot.emptyPara===this.$editable.html()};t.prototype.empty=function(){this.context.invoke("code",Ot.emptyPara)};return t}();var Yt=function(){function e(e){this.context=e;this.$editable=e.layoutInfo.editable}e.prototype.initialize=function(){this.$editable.on("paste",this.pasteByEvent.bind(this))};e.prototype.pasteByEvent=function(e){var t=e.originalEvent.clipboardData;if(t&&t.items&&t.items.length){var n=ee.head(t.items);if(n.kind==="file"&&n.type.indexOf("image/")!==-1){this.context.invoke("editor.insertImagesOrCallback",[n.getAsFile()])}this.context.invoke("editor.afterCommand")}};return e}();var Jt=function(){function t(t){this.context=t;this.$eventListener=e(document);this.$editor=t.layoutInfo.editor;this.$editable=t.layoutInfo.editable;this.options=t.options;this.lang=this.options.langInfo;this.documentEventHandlers={};this.$dropzone=e(['<div class="note-dropzone">','  <div class="note-dropzone-message"/>',"</div>"].join("")).prependTo(this.$editor)}t.prototype.initialize=function(){if(this.options.disableDragAndDrop){this.documentEventHandlers.onDrop=function(e){e.preventDefault()};this.$eventListener=this.$dropzone;this.$eventListener.on("drop",this.documentEventHandlers.onDrop)}else{this.attachDragAndDropEvent()}};t.prototype.attachDragAndDropEvent=function(){var t=this;var n=e();var i=this.$dropzone.find(".note-dropzone-message");this.documentEventHandlers.onDragenter=function(e){var o=t.context.invoke("codeview.isActivated");var r=t.$editor.width()>0&&t.$editor.height()>0;if(!o&&!n.length&&r){t.$editor.addClass("dragover");t.$dropzone.width(t.$editor.width());t.$dropzone.height(t.$editor.height());i.text(t.lang.image.dragImageHere)}n=n.add(e.target)};this.documentEventHandlers.onDragleave=function(e){n=n.not(e.target);if(!n.length){t.$editor.removeClass("dragover")}};this.documentEventHandlers.onDrop=function(){n=e();t.$editor.removeClass("dragover")};this.$eventListener.on("dragenter",this.documentEventHandlers.onDragenter).on("dragleave",this.documentEventHandlers.onDragleave).on("drop",this.documentEventHandlers.onDrop);this.$dropzone.on("dragenter",function(){t.$dropzone.addClass("hover");i.text(t.lang.image.dropImage)}).on("dragleave",function(){t.$dropzone.removeClass("hover");i.text(t.lang.image.dragImageHere)});this.$dropzone.on("drop",function(n){var i=n.originalEvent.dataTransfer;n.preventDefault();if(i&&i.files&&i.files.length){t.$editable.focus();t.context.invoke("editor.insertImagesOrCallback",i.files)}else{e.each(i.types,function(n,o){var r=i.getData(o);if(o.toLowerCase().indexOf("text")>-1){t.context.invoke("editor.pasteHTML",r)}else{e(r).each(function(e,n){t.context.invoke("editor.insertNode",n)})}})}}).on("dragover",false)};t.prototype.destroy=function(){var e=this;Object.keys(this.documentEventHandlers).forEach(function(t){e.$eventListener.off(t.substr(2).toLowerCase(),e.documentEventHandlers[t])});this.documentEventHandlers={}};return t}();var Zt;if(fe.hasCodeMirror){if(fe.isSupportAmd){require(["codemirror"],function(e){Zt=e})}else{Zt=window.CodeMirror}}var en=function(){function e(e){this.context=e;this.$editor=e.layoutInfo.editor;this.$editable=e.layoutInfo.editable;this.$codable=e.layoutInfo.codable;this.options=e.options}e.prototype.sync=function(){var e=this.isActivated();if(e&&fe.hasCodeMirror){this.$codable.data("cmEditor").save()}};e.prototype.isActivated=function(){return this.$editor.hasClass("codeview")};e.prototype.toggle=function(){if(this.isActivated()){this.deactivate()}else{this.activate()}this.context.triggerEvent("codeview.toggled")};e.prototype.activate=function(){var e=this;this.$codable.val(Ot.html(this.$editable,this.options.prettifyHtml));this.$codable.height(this.$editable.height());this.context.invoke("toolbar.updateCodeview",true);this.$editor.addClass("codeview");this.$codable.focus();if(fe.hasCodeMirror){var t=Zt.fromTextArea(this.$codable[0],this.options.codemirror);if(this.options.codemirror.tern){var n=new Zt.TernServer(this.options.codemirror.tern);t.ternServer=n;t.on("cursorActivity",function(e){n.updateArgHints(e)})}t.on("blur",function(n){e.context.triggerEvent("blur.codeview",t.getValue(),n)});t.setSize(null,this.$editable.outerHeight());this.$codable.data("cmEditor",t)}else{this.$codable.on("blur",function(t){e.context.triggerEvent("blur.codeview",e.$codable.val(),t)})}};e.prototype.deactivate=function(){if(fe.hasCodeMirror){var e=this.$codable.data("cmEditor");this.$codable.val(e.getValue());e.toTextArea()}var t=Ot.value(this.$codable,this.options.prettifyHtml)||Ot.emptyPara;var n=this.$editable.html()!==t;this.$editable.html(t);this.$editable.height(this.options.height?this.$codable.height():"auto");this.$editor.removeClass("codeview");if(n){this.context.triggerEvent("change",this.$editable.html(),this.$editable)}this.$editable.focus();this.context.invoke("toolbar.updateCodeview",false)};e.prototype.destroy=function(){if(this.isActivated()){this.deactivate()}};return e}();var tn=24;var nn=function(){function t(t){this.$document=e(document);this.$statusbar=t.layoutInfo.statusbar;this.$editable=t.layoutInfo.editable;this.options=t.options}t.prototype.initialize=function(){var e=this;if(this.options.airMode||this.options.disableResizeEditor){this.destroy();return}this.$statusbar.on("mousedown",function(t){t.preventDefault();t.stopPropagation();var n=e.$editable.offset().top-e.$document.scrollTop();var i=function(t){var i=t.clientY-(n+tn);i=e.options.minheight>0?Math.max(i,e.options.minheight):i;i=e.options.maxHeight>0?Math.min(i,e.options.maxHeight):i;e.$editable.height(i)};e.$document.on("mousemove",i).one("mouseup",function(){e.$document.off("mousemove",i)})})};t.prototype.destroy=function(){this.$statusbar.off()};return t}();var on=function(){function t(t){var n=this;this.context=t;this.$editor=t.layoutInfo.editor;this.$toolbar=t.layoutInfo.toolbar;this.$editable=t.layoutInfo.editable;this.$codable=t.layoutInfo.codable;this.$window=e(window);this.$scrollbar=e("html, body");this.onResize=function(){n.resizeTo({h:n.$window.height()-n.$toolbar.outerHeight()})}}t.prototype.resizeTo=function(e){this.$editable.css("height",e.h);this.$codable.css("height",e.h);if(this.$codable.data("cmeditor")){this.$codable.data("cmeditor").setsize(null,e.h)}};t.prototype.toggle=function(){this.$editor.toggleClass("fullscreen");if(this.isFullscreen()){this.$editable.data("orgHeight",this.$editable.css("height"));this.$window.on("resize",this.onResize).trigger("resize");this.$scrollbar.css("overflow","hidden")}else{this.$window.off("resize",this.onResize);this.resizeTo({h:this.$editable.data("orgHeight")});this.$scrollbar.css("overflow","visible")}this.context.invoke("toolbar.updateFullscreen",this.isFullscreen())};t.prototype.isFullscreen=function(){return this.$editor.hasClass("fullscreen")};return t}();var rn=function(){function t(t){var n=this;this.context=t;this.$document=e(document);this.$editingArea=t.layoutInfo.editingArea;this.options=t.options;this.lang=this.options.langInfo;this.events={"summernote.mousedown":function(e,t){if(n.update(t.target)){t.preventDefault()}},"summernote.keyup summernote.scroll summernote.change summernote.dialog.shown":function(){n.update()},"summernote.disable":function(){n.hide()},"summernote.codeview.toggled":function(){n.update()}}}t.prototype.initialize=function(){var t=this;this.$handle=e(['<div class="note-handle">','<div class="note-control-selection">','<div class="note-control-selection-bg"></div>','<div class="note-control-holder note-control-nw"></div>','<div class="note-control-holder note-control-ne"></div>','<div class="note-control-holder note-control-sw"></div>','<div class="',this.options.disableResizeImage?"note-control-holder":"note-control-sizing",' note-control-se"></div>',this.options.disableResizeImage?"":'<div class="note-control-selection-info"></div>',"</div>","</div>"].join("")).prependTo(this.$editingArea);this.$handle.on("mousedown",function(e){if(Ot.isControlSizing(e.target)){e.preventDefault();e.stopPropagation();var n=t.$handle.find(".note-control-selection").data("target");var i=n.offset();var o=t.$document.scrollTop();var r=function(e){t.context.invoke("editor.resizeTo",{x:e.clientX-i.left,y:e.clientY-(i.top-o)},n,!e.shiftKey);t.update(n[0])};t.$document.on("mousemove",r).one("mouseup",function(e){e.preventDefault();t.$document.off("mousemove",r);t.context.invoke("editor.afterCommand")});if(!n.data("ratio")){n.data("ratio",n.height()/n.width())}}});this.$handle.on("wheel",function(e){e.preventDefault();t.update()})};t.prototype.destroy=function(){this.$handle.remove()};t.prototype.update=function(t){if(this.context.isDisabled()){return false}var n=Ot.isImg(t);var i=this.$handle.find(".note-control-selection");this.context.invoke("imagePopover.update",t);if(n){var o=e(t);var r=o.position();var a={left:r.left+parseInt(o.css("marginLeft"),10),top:r.top+parseInt(o.css("marginTop"),10)};var s={w:o.outerWidth(false),h:o.outerHeight(false)};i.css({display:"block",left:a.left,top:a.top,width:s.w,height:s.h}).data("target",o);var l=new Image;l.src=o.attr("src");var u=s.w+"x"+s.h+" ("+this.lang.image.original+": "+l.width+"x"+l.height+")";i.find(".note-control-selection-info").text(u);this.context.invoke("editor.saveTarget",t)}else{this.hide()}return n};t.prototype.hide=function(){this.context.invoke("editor.clearTarget");this.$handle.children().hide()};return t}();var an="http://";var sn=/^([A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?|mailto:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i;var ln=function(){function t(e){var t=this;this.context=e;this.events={"summernote.keyup":function(e,n){if(!n.isDefaultPrevented()){t.handleKeyup(n)}},"summernote.keydown":function(e,n){t.handleKeydown(n)}}}t.prototype.initialize=function(){this.lastWordRange=null};t.prototype.destroy=function(){this.lastWordRange=null};t.prototype.replace=function(){if(!this.lastWordRange){return}var t=this.lastWordRange.toString();var n=t.match(sn);if(n&&(n[1]||n[2])){var i=n[1]?t:an+t;var o=e("<a />").html(t).attr("href",i)[0];this.lastWordRange.insertNode(o);this.lastWordRange=null;this.context.invoke("editor.focus")}};t.prototype.handleKeydown=function(e){if(ee.contains([Ht.code.ENTER,Ht.code.SPACE],e.keyCode)){var t=this.context.invoke("editor.createRange").getWordRange();this.lastWordRange=t}};t.prototype.handleKeyup=function(e){if(ee.contains([Ht.code.ENTER,Ht.code.SPACE],e.keyCode)){this.replace()}};return t}();var un=function(){function e(e){var t=this;this.$note=e.layoutInfo.note;this.events={"summernote.change":function(){t.$note.val(e.invoke("code"))}}}e.prototype.shouldInitialize=function(){return Ot.isTextarea(this.$note[0])};return e}();var cn=function(){function t(e){var t=this;this.context=e;this.$editingArea=e.layoutInfo.editingArea;this.options=e.options;this.events={"summernote.init summernote.change":function(){t.update()},"summernote.codeview.toggled":function(){t.update()}}}t.prototype.shouldInitialize=function(){return!!this.options.placeholder};t.prototype.initialize=function(){var t=this;this.$placeholder=e('<div class="note-placeholder">');this.$placeholder.on("click",function(){t.context.invoke("focus")}).text(this.options.placeholder).prependTo(this.$editingArea);this.update()};t.prototype.destroy=function(){this.$placeholder.remove()};t.prototype.update=function(){var e=!this.context.invoke("codeview.isActivated")&&this.context.invoke("editor.isEmpty");this.$placeholder.toggle(e)};return t}();var fn=function(){function t(t){this.ui=e.summernote.ui;this.context=t;this.$toolbar=t.layoutInfo.toolbar;this.options=t.options;this.lang=this.options.langInfo;this.invertedKeyMap=F.invertObject(this.options.keyMap[fe.isMac?"mac":"pc"])}t.prototype.representShortcut=function(e){var t=this.invertedKeyMap[e];if(!this.options.shortcuts||!t){return""}if(fe.isMac){t=t.replace("CMD","â").replace("SHIFT","â§")}t=t.replace("BACKSLASH","\\").replace("SLASH","/").replace("LEFTBRACKET","[").replace("RIGHTBRACKET","]");return" ("+t+")"};t.prototype.button=function(e){if(!this.options.tooltip&&e.tooltip){delete e.tooltip}e.container=this.options.container;return this.ui.button(e)};t.prototype.initialize=function(){this.addToolbarButtons();this.addImagePopoverButtons();this.addLinkPopoverButtons();this.addTablePopoverButtons();this.fontInstalledMap={}};t.prototype.destroy=function(){delete this.fontInstalledMap};t.prototype.isFontInstalled=function(e){if(!this.fontInstalledMap.hasOwnProperty(e)){this.fontInstalledMap[e]=fe.isFontInstalled(e)||ee.contains(this.options.fontNamesIgnoreCheck,e)}return this.fontInstalledMap[e]};t.prototype.isFontDeservedToAdd=function(t){var n=["sans-serif","serif","monospace","cursive","fantasy"];t=t.toLowerCase();return t!==""&&this.isFontInstalled(t)&&e.inArray(t,n)===-1};t.prototype.addToolbarButtons=function(){var t=this;this.context.memo("button.style",function(){return t.ui.buttonGroup([t.button({className:"dropdown-toggle",contents:t.ui.dropdownButtonContents(t.ui.icon(t.options.icons.magic),t.options),tooltip:t.lang.style.style,data:{toggle:"dropdown"}}),t.ui.dropdown({className:"dropdown-style",items:t.options.styleTags,template:function(e){if(typeof e==="string"){e={tag:e,title:t.lang.style.hasOwnProperty(e)?t.lang.style[e]:e}}var n=e.tag;var i=e.title;var o=e.style?' style="'+e.style+'" ':"";var r=e.className?' class="'+e.className+'"':"";return"<"+n+o+r+">"+i+"</"+n+">"},click:t.context.createInvokeHandler("editor.formatBlock")})]).render()});var n=function(e,n){var o=i.options.styleTags[e];i.context.memo("button.style."+o,function(){return t.button({className:"note-btn-style-"+o,contents:'<div data-value="'+o+'">'+o.toUpperCase()+"</div>",tooltip:o.toUpperCase(),click:t.context.createInvokeHandler("editor.formatBlock")}).render()})};var i=this;for(var o=0,r=this.options.styleTags.length;o<r;o++){n(o,r)}this.context.memo("button.bold",function(){return t.button({className:"note-btn-bold",contents:t.ui.icon(t.options.icons.bold),tooltip:t.lang.font.bold+t.representShortcut("bold"),click:t.context.createInvokeHandlerAndUpdateState("editor.bold")}).render()});this.context.memo("button.italic",function(){return t.button({className:"note-btn-italic",contents:t.ui.icon(t.options.icons.italic),tooltip:t.lang.font.italic+t.representShortcut("italic"),click:t.context.createInvokeHandlerAndUpdateState("editor.italic")}).render()});this.context.memo("button.underline",function(){return t.button({className:"note-btn-underline",contents:t.ui.icon(t.options.icons.underline),tooltip:t.lang.font.underline+t.representShortcut("underline"),click:t.context.createInvokeHandlerAndUpdateState("editor.underline")}).render()});this.context.memo("button.clear",function(){return t.button({contents:t.ui.icon(t.options.icons.eraser),tooltip:t.lang.font.clear+t.representShortcut("removeFormat"),click:t.context.createInvokeHandler("editor.removeFormat")}).render()});this.context.memo("button.strikethrough",function(){return t.button({className:"note-btn-strikethrough",contents:t.ui.icon(t.options.icons.strikethrough),tooltip:t.lang.font.strikethrough+t.representShortcut("strikethrough"),click:t.context.createInvokeHandlerAndUpdateState("editor.strikethrough")}).render()});this.context.memo("button.superscript",function(){return t.button({className:"note-btn-superscript",contents:t.ui.icon(t.options.icons.superscript),tooltip:t.lang.font.superscript,click:t.context.createInvokeHandlerAndUpdateState("editor.superscript")}).render()});this.context.memo("button.subscript",function(){return t.button({className:"note-btn-subscript",contents:t.ui.icon(t.options.icons.subscript),tooltip:t.lang.font.subscript,click:t.context.createInvokeHandlerAndUpdateState("editor.subscript")}).render()});this.context.memo("button.fontname",function(){var n=t.context.invoke("editor.currentStyle");e.each(n["font-family"].split(","),function(n,i){i=i.trim().replace(/['"]+/g,"");if(t.isFontDeservedToAdd(i)){if(e.inArray(i,t.options.fontNames)===-1){t.options.fontNames.push(i)}}});return t.ui.buttonGroup([t.button({className:"dropdown-toggle",contents:t.ui.dropdownButtonContents('<span class="note-current-fontname"/>',t.options),tooltip:t.lang.font.name,data:{toggle:"dropdown"}}),t.ui.dropdownCheck({className:"dropdown-fontname",checkClassName:t.options.icons.menuCheck,items:t.options.fontNames.filter(t.isFontInstalled.bind(t)),template:function(e){return"<span style=\"font-family: '"+e+"'\">"+e+"</span>"},click:t.context.createInvokeHandlerAndUpdateState("editor.fontName")})]).render()});this.context.memo("button.fontsize",function(){return t.ui.buttonGroup([t.button({className:"dropdown-toggle",contents:t.ui.dropdownButtonContents('<span class="note-current-fontsize"/>',t.options),tooltip:t.lang.font.size,data:{toggle:"dropdown"}}),t.ui.dropdownCheck({className:"dropdown-fontsize",checkClassName:t.options.icons.menuCheck,items:t.options.fontSizes,click:t.context.createInvokeHandlerAndUpdateState("editor.fontSize")})]).render()});this.context.memo("button.color",function(){return t.ui.buttonGroup({className:"note-color",children:[t.button({className:"note-current-color-button",contents:t.ui.icon(t.options.icons.font+" note-recent-color"),tooltip:t.lang.color.recent,click:function(n){var i=e(n.currentTarget);t.context.invoke("editor.color",{backColor:i.attr("data-backColor"),foreColor:i.attr("data-foreColor")})},callback:function(e){var t=e.find(".note-recent-color");t.css("background-color","#FFFF00");e.attr("data-backColor","#FFFF00")}}),t.button({className:"dropdown-toggle",contents:t.ui.dropdownButtonContents("",t.options),tooltip:t.lang.color.more,data:{toggle:"dropdown"}}),t.ui.dropdown({items:['<div class="note-palette">','  <div class="note-palette-title">'+t.lang.color.background+"</div>","  <div>",'    <button type="button" class="note-color-reset btn btn-light" data-event="backColor" data-value="inherit">',t.lang.color.transparent,"    </button>","  </div>",'  <div class="note-holder" data-event="backColor"/>',"</div>",'<div class="note-palette">','  <div class="note-palette-title">'+t.lang.color.foreground+"</div>","  <div>",'    <button type="button" class="note-color-reset btn btn-light" data-event="removeFormat" data-value="foreColor">',t.lang.color.resetToDefault,"    </button>","  </div>",'  <div class="note-holder" data-event="foreColor"/>',"</div>"].join(""),callback:function(n){n.find(".note-holder").each(function(n,i){var o=e(i);o.append(t.ui.palette({colors:t.options.colors,eventName:o.data("event"),container:t.options.container,tooltip:t.options.tooltip}).render())})},click:function(n){var i=e(n.target);var o=i.data("event");var r=i.data("value");if(o&&r){var a=o==="backColor"?"background-color":"color";var s=i.closest(".note-color").find(".note-recent-color");var l=i.closest(".note-color").find(".note-current-color-button");s.css(a,r);l.attr("data-"+o,r);t.context.invoke("editor."+o,r)}}})]}).render()});this.context.memo("button.ul",function(){return t.button({contents:t.ui.icon(t.options.icons.unorderedlist),tooltip:t.lang.lists.unordered+t.representShortcut("insertUnorderedList"),click:t.context.createInvokeHandler("editor.insertUnorderedList")}).render()});this.context.memo("button.ol",function(){return t.button({contents:t.ui.icon(t.options.icons.orderedlist),tooltip:t.lang.lists.ordered+t.representShortcut("insertOrderedList"),click:t.context.createInvokeHandler("editor.insertOrderedList")}).render()});var a=this.button({contents:this.ui.icon(this.options.icons.alignLeft),tooltip:this.lang.paragraph.left+this.representShortcut("justifyLeft"),click:this.context.createInvokeHandler("editor.justifyLeft")});var s=this.button({contents:this.ui.icon(this.options.icons.alignCenter),tooltip:this.lang.paragraph.center+this.representShortcut("justifyCenter"),click:this.context.createInvokeHandler("editor.justifyCenter")});var l=this.button({contents:this.ui.icon(this.options.icons.alignRight),tooltip:this.lang.paragraph.right+this.representShortcut("justifyRight"),click:this.context.createInvokeHandler("editor.justifyRight")});var u=this.button({contents:this.ui.icon(this.options.icons.alignJustify),tooltip:this.lang.paragraph.justify+this.representShortcut("justifyFull"),click:this.context.createInvokeHandler("editor.justifyFull")});var c=this.button({contents:this.ui.icon(this.options.icons.outdent),tooltip:this.lang.paragraph.outdent+this.representShortcut("outdent"),click:this.context.createInvokeHandler("editor.outdent")});var f=this.button({contents:this.ui.icon(this.options.icons.indent),tooltip:this.lang.paragraph.indent+this.representShortcut("indent"),click:this.context.createInvokeHandler("editor.indent")});this.context.memo("button.justifyLeft",F.invoke(a,"render"));this.context.memo("button.justifyCenter",F.invoke(s,"render"));this.context.memo("button.justifyRight",F.invoke(l,"render"));this.context.memo("button.justifyFull",F.invoke(u,"render"));this.context.memo("button.outdent",F.invoke(c,"render"));this.context.memo("button.indent",F.invoke(f,"render"));this.context.memo("button.paragraph",function(){return t.ui.buttonGroup([t.button({className:"dropdown-toggle",contents:t.ui.dropdownButtonContents(t.ui.icon(t.options.icons.alignLeft),t.options),tooltip:t.lang.paragraph.paragraph,data:{toggle:"dropdown"}}),t.ui.dropdown([t.ui.buttonGroup({className:"note-align",children:[a,s,l,u]}),t.ui.buttonGroup({className:"note-list",children:[c,f]})])]).render()});this.context.memo("button.height",function(){return t.ui.buttonGroup([t.button({className:"dropdown-toggle",contents:t.ui.dropdownButtonContents(t.ui.icon(t.options.icons.textHeight),t.options),tooltip:t.lang.font.height,data:{toggle:"dropdown"}}),t.ui.dropdownCheck({items:t.options.lineHeights,checkClassName:t.options.icons.menuCheck,className:"dropdown-line-height",click:t.context.createInvokeHandler("editor.lineHeight")})]).render()});this.context.memo("button.table",function(){return t.ui.buttonGroup([t.button({className:"dropdown-toggle",contents:t.ui.dropdownButtonContents(t.ui.icon(t.options.icons.table),t.options),tooltip:t.lang.table.table,data:{toggle:"dropdown"}}),t.ui.dropdown({className:"note-table",items:['<div class="note-dimension-picker">','  <div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>','  <div class="note-dimension-picker-highlighted"/>','  <div class="note-dimension-picker-unhighlighted"/>',"</div>",'<div class="note-dimension-display">1 x 1</div>'].join("")})],{callback:function(e){var n=e.find(".note-dimension-picker-mousecatcher");n.css({width:t.options.insertTableMaxSize.col+"em",height:t.options.insertTableMaxSize.row+"em"}).mousedown(t.context.createInvokeHandler("editor.insertTable")).on("mousemove",t.tableMoveHandler.bind(t))}}).render()});this.context.memo("button.link",function(){return t.button({contents:t.ui.icon(t.options.icons.link),tooltip:t.lang.link.link+t.representShortcut("linkDialog.show"),click:t.context.createInvokeHandler("linkDialog.show")}).render()});this.context.memo("button.picture",function(){return t.button({contents:t.ui.icon(t.options.icons.picture),tooltip:t.lang.image.image,click:t.context.createInvokeHandler("imageDialog.show")}).render()});this.context.memo("button.video",function(){return t.button({contents:t.ui.icon(t.options.icons.video),tooltip:t.lang.video.video,click:t.context.createInvokeHandler("videoDialog.show")}).render()});this.context.memo("button.hr",function(){return t.button({contents:t.ui.icon(t.options.icons.minus),tooltip:t.lang.hr.insert+t.representShortcut("insertHorizontalRule"),click:t.context.createInvokeHandler("editor.insertHorizontalRule")}).render()});this.context.memo("button.fullscreen",function(){return t.button({className:"btn-fullscreen",contents:t.ui.icon(t.options.icons.arrowsAlt),tooltip:t.options.fullscreen,click:t.context.createInvokeHandler("fullscreen.toggle")}).render()});this.context.memo("button.codeview",function(){return t.button({className:"btn-codeview",contents:t.ui.icon(t.options.icons.code),tooltip:t.options.codeview,click:t.context.createInvokeHandler("codeview.toggle")}).render()});this.context.memo("button.redo",function(){return t.button({contents:t.ui.icon(t.options.icons.redo),tooltip:t.lang.history.redo+t.representShortcut("redo"),click:t.context.createInvokeHandler("editor.redo")}).render()});this.context.memo("button.undo",function(){return t.button({contents:t.ui.icon(t.options.icons.undo),tooltip:t.lang.history.undo+t.representShortcut("undo"),click:t.context.createInvokeHandler("editor.undo")}).render()});this.context.memo("button.help",function(){return t.button({contents:t.ui.icon(t.options.icons.question),tooltip:t.options.help,click:t.context.createInvokeHandler("helpDialog.show")}).render()})};t.prototype.addImagePopoverButtons=function(){var e=this;this.context.memo("button.imageSize100",function(){return e.button({contents:'<span class="note-fontsize-10">100%</span>',tooltip:e.lang.image.resizeFull,click:e.context.createInvokeHandler("editor.resize","1")}).render()});this.context.memo("button.imageSize50",function(){return e.button({contents:'<span class="note-fontsize-10">50%</span>',tooltip:e.lang.image.resizeHalf,click:e.context.createInvokeHandler("editor.resize","0.5")}).render()});this.context.memo("button.imageSize25",function(){return e.button({contents:'<span class="note-fontsize-10">25%</span>',tooltip:e.lang.image.resizeQuarter,click:e.context.createInvokeHandler("editor.resize","0.25")}).render()});this.context.memo("button.floatLeft",function(){return e.button({contents:e.ui.icon(e.options.icons.alignLeft),tooltip:e.lang.image.floatLeft,click:e.context.createInvokeHandler("editor.floatMe","left")}).render()});this.context.memo("button.floatRight",function(){return e.button({contents:e.ui.icon(e.options.icons.alignRight),tooltip:e.lang.image.floatRight,click:e.context.createInvokeHandler("editor.floatMe","right")}).render()});this.context.memo("button.floatNone",function(){return e.button({contents:e.ui.icon(e.options.icons.alignJustify),tooltip:e.lang.image.floatNone,click:e.context.createInvokeHandler("editor.floatMe","none")}).render()});this.context.memo("button.removeMedia",function(){return e.button({contents:e.ui.icon(e.options.icons.trash),tooltip:e.lang.image.remove,click:e.context.createInvokeHandler("editor.removeMedia")}).render()})};t.prototype.addLinkPopoverButtons=function(){var e=this;this.context.memo("button.linkDialogShow",function(){return e.button({contents:e.ui.icon(e.options.icons.link),tooltip:e.lang.link.edit,click:e.context.createInvokeHandler("linkDialog.show")}).render()});this.context.memo("button.unlink",function(){return e.button({contents:e.ui.icon(e.options.icons.unlink),tooltip:e.lang.link.unlink,click:e.context.createInvokeHandler("editor.unlink")}).render()})};t.prototype.addTablePopoverButtons=function(){var e=this;this.context.memo("button.addRowUp",function(){return e.button({className:"btn-md",contents:e.ui.icon(e.options.icons.rowAbove),tooltip:e.lang.table.addRowAbove,click:e.context.createInvokeHandler("editor.addRow","top")}).render()});this.context.memo("button.addRowDown",function(){return e.button({className:"btn-md",contents:e.ui.icon(e.options.icons.rowBelow),tooltip:e.lang.table.addRowBelow,click:e.context.createInvokeHandler("editor.addRow","bottom")}).render()});this.context.memo("button.addColLeft",function(){return e.button({className:"btn-md",contents:e.ui.icon(e.options.icons.colBefore),tooltip:e.lang.table.addColLeft,click:e.context.createInvokeHandler("editor.addCol","left")}).render()});this.context.memo("button.addColRight",function(){return e.button({className:"btn-md",contents:e.ui.icon(e.options.icons.colAfter),tooltip:e.lang.table.addColRight,click:e.context.createInvokeHandler("editor.addCol","right")}).render()});this.context.memo("button.deleteRow",function(){return e.button({className:"btn-md",contents:e.ui.icon(e.options.icons.rowRemove),tooltip:e.lang.table.delRow,click:e.context.createInvokeHandler("editor.deleteRow")}).render()});this.context.memo("button.deleteCol",function(){return e.button({className:"btn-md",contents:e.ui.icon(e.options.icons.colRemove),tooltip:e.lang.table.delCol,click:e.context.createInvokeHandler("editor.deleteCol")}).render()});this.context.memo("button.deleteTable",function(){return e.button({className:"btn-md",contents:e.ui.icon(e.options.icons.trash),tooltip:e.lang.table.delTable,click:e.context.createInvokeHandler("editor.deleteTable")}).render()})};t.prototype.build=function(t,n){for(var i=0,o=n.length;i<o;i++){var r=n[i];var a=e.isArray(r)?r[0]:r;var s=e.isArray(r)?r.length===1?[r[0]]:r[1]:[r];var l=this.ui.buttonGroup({className:"note-"+a}).render();for(var u=0,c=s.length;u<c;u++){var f=this.context.memo("button."+s[u]);if(f){l.append(typeof f==="function"?f(this.context):f)}}l.appendTo(t)}};t.prototype.updateCurrentStyle=function(t){var n=this;var i=t||this.$toolbar;var o=this.context.invoke("editor.currentStyle");this.updateBtnStates(i,{".note-btn-bold":function(){return o["font-bold"]==="bold"},".note-btn-italic":function(){return o["font-italic"]==="italic"},".note-btn-underline":function(){return o["font-underline"]==="underline"},".note-btn-subscript":function(){return o["font-subscript"]==="subscript"},".note-btn-superscript":function(){return o["font-superscript"]==="superscript"},".note-btn-strikethrough":function(){return o["font-strikethrough"]==="strikethrough"}});if(o["font-family"]){var r=o["font-family"].split(",").map(function(e){return e.replace(/[\'\"]/g,"").replace(/\s+$/,"").replace(/^\s+/,"")});var a=ee.find(r,this.isFontInstalled.bind(this));i.find(".dropdown-fontname a").each(function(t,n){var i=e(n);var o=i.data("value")+""===a+"";i.toggleClass("checked",o)});i.find(".note-current-fontname").text(a).css("font-family",a)}if(o["font-size"]){var s=o["font-size"];i.find(".dropdown-fontsize a").each(function(t,n){var i=e(n);var o=i.data("value")+""===s+"";i.toggleClass("checked",o)});i.find(".note-current-fontsize").text(s)}if(o["line-height"]){var l=o["line-height"];i.find(".dropdown-line-height li a").each(function(t,i){var o=e(i).data("value")+""===l+"";n.className=o?"checked":""})}};t.prototype.updateBtnStates=function(t,n){var i=this;e.each(n,function(e,n){i.ui.toggleBtnActive(t.find(e),n())})};t.prototype.tableMoveHandler=function(t){var n=18;var i=e(t.target.parentNode);var o=i.next();var r=i.find(".note-dimension-picker-mousecatcher");var a=i.find(".note-dimension-picker-highlighted");var s=i.find(".note-dimension-picker-unhighlighted");var l;if(t.offsetX===undefined){var u=e(t.target).offset();l={x:t.pageX-u.left,y:t.pageY-u.top}}else{l={x:t.offsetX,y:t.offsetY}}var c={c:Math.ceil(l.x/n)||1,r:Math.ceil(l.y/n)||1};a.css({width:c.c+"em",height:c.r+"em"});r.data("value",c.c+"x"+c.r);if(c.c>3&&c.c<this.options.insertTableMaxSize.col){s.css({width:c.c+1+"em"})}if(c.r>3&&c.r<this.options.insertTableMaxSize.row){s.css({height:c.r+1+"em"})}o.html(c.c+" x "+c.r)};return t}();var dn=function(){function t(t){this.context=t;this.$window=e(window);this.$document=e(document);this.ui=e.summernote.ui;this.$note=t.layoutInfo.note;this.$editor=t.layoutInfo.editor;this.$toolbar=t.layoutInfo.toolbar;this.options=t.options;this.followScroll=this.followScroll.bind(this)}t.prototype.shouldInitialize=function(){return!this.options.airMode};t.prototype.initialize=function(){var e=this;this.options.toolbar=this.options.toolbar||[];if(!this.options.toolbar.length){this.$toolbar.hide()}else{this.context.invoke("buttons.build",this.$toolbar,this.options.toolbar)}if(this.options.toolbarContainer){this.$toolbar.appendTo(this.options.toolbarContainer)}this.changeContainer(false);this.$note.on("summernote.keyup summernote.mouseup summernote.change",function(){e.context.invoke("buttons.updateCurrentStyle")});this.context.invoke("buttons.updateCurrentStyle");if(this.options.followingToolbar){this.$window.on("scroll resize",this.followScroll)}};t.prototype.destroy=function(){this.$toolbar.children().remove();if(this.options.followingToolbar){this.$window.off("scroll resize",this.followScroll)}};t.prototype.followScroll=function(){if(this.$editor.hasClass("fullscreen")){return false}var t=this.$toolbar.parent(".note-toolbar-wrapper");var n=this.$editor.outerHeight();var i=this.$editor.width();var o=this.$toolbar.height();t.css({height:o});var r=0;if(this.options.otherStaticBar){r=e(this.options.otherStaticBar).outerHeight()}var a=this.$document.scrollTop();var s=this.$editor.offset().top;var l=s+n;var u=s-r;var c=l-r-o;if(a>u&&a<c){this.$toolbar.css({position:"fixed",top:r,width:i})}else{this.$toolbar.css({position:"relative",top:0,width:"100%"})}};t.prototype.changeContainer=function(e){if(e){this.$toolbar.prependTo(this.$editor)}else{if(this.options.toolbarContainer){this.$toolbar.appendTo(this.options.toolbarContainer)}}};t.prototype.updateFullscreen=function(e){this.ui.toggleBtnActive(this.$toolbar.find(".btn-fullscreen"),e);this.changeContainer(e)};t.prototype.updateCodeview=function(e){this.ui.toggleBtnActive(this.$toolbar.find(".btn-codeview"),e);if(e){this.deactivate()}else{this.activate()}};t.prototype.activate=function(e){var t=this.$toolbar.find("button");if(!e){t=t.not(".btn-codeview")}this.ui.toggleBtn(t,true)};t.prototype.deactivate=function(e){var t=this.$toolbar.find("button");if(!e){t=t.not(".btn-codeview")}this.ui.toggleBtn(t,false)};return t}();var hn=function(){function t(t){this.context=t;this.ui=e.summernote.ui;this.$body=e(document.body);this.$editor=t.layoutInfo.editor;this.options=t.options;this.lang=this.options.langInfo;t.memo("help.linkDialog.show",this.options.langInfo.help["linkDialog.show"])}t.prototype.initialize=function(){var t=this.options.dialogsInBody?this.$body:this.$editor;var n=['<div class="form-group note-form-group">','<label class="note-form-label">'+this.lang.link.textToDisplay+"</label>",'<input class="note-link-text form-control note-form-control  note-input" type="text" />',"</div>",'<div class="form-group note-form-group">','<label class="note-form-label">'+this.lang.link.url+"</label>",'<input class="note-link-url form-control note-form-control note-input" type="text" value="http://" />',"</div>",!this.options.disableLinkTarget?e("<div/>").append(this.ui.checkbox({id:"sn-checkbox-open-in-new-window",text:this.lang.link.openInNewWindow,checked:true}).render()).html():""].join("");var i="btn btn-primary note-btn note-btn-primary note-link-btn";var o='<button type="submit" href="#" class="'+i+'" disabled>'+this.lang.link.insert+"</button>";this.$dialog=this.ui.dialog({className:"link-dialog",title:this.lang.link.insert,fade:this.options.dialogsFade,body:n,footer:o}).render().appendTo(t)};t.prototype.destroy=function(){this.ui.hideDialog(this.$dialog);this.$dialog.remove()};t.prototype.bindEnterKey=function(e,t){e.on("keypress",function(e){if(e.keyCode===Ht.code.ENTER){e.preventDefault();t.trigger("click")}})};t.prototype.toggleLinkBtn=function(e,t,n){this.ui.toggleBtn(e,t.val()&&n.val())};t.prototype.showLinkDialog=function(t){var n=this;return e.Deferred(function(e){var i=n.$dialog.find(".note-link-text");var o=n.$dialog.find(".note-link-url");var r=n.$dialog.find(".note-link-btn");var a=n.$dialog.find("input[type=checkbox]");n.ui.onDialogShown(n.$dialog,function(){n.context.triggerEvent("dialog.shown");if(!t.url){t.url=t.text}i.val(t.text);var s=function(){n.toggleLinkBtn(r,i,o);t.text=i.val()};i.on("input",s).on("paste",function(){setTimeout(s,0)});var l=function(){n.toggleLinkBtn(r,i,o);if(!t.text){i.val(o.val())}};o.on("input",l).on("paste",function(){setTimeout(l,0)}).val(t.url);if(!fe.isSupportTouch){o.trigger("focus")}n.toggleLinkBtn(r,i,o);n.bindEnterKey(o,r);n.bindEnterKey(i,r);var u=t.isNewWindow!==undefined?t.isNewWindow:n.context.options.linkTargetBlank;a.prop("checked",u);r.one("click",function(r){r.preventDefault();e.resolve({range:t.range,url:o.val(),text:i.val(),isNewWindow:a.is(":checked")});n.ui.hideDialog(n.$dialog)})});n.ui.onDialogHidden(n.$dialog,function(){i.off("input paste keypress");o.off("input paste keypress");r.off("click");if(e.state()==="pending"){e.reject()}});n.ui.showDialog(n.$dialog)}).promise()};t.prototype.show=function(){var e=this;var t=this.context.invoke("editor.getLinkInfo");this.context.invoke("editor.saveRange");this.showLinkDialog(t).then(function(t){e.context.invoke("editor.restoreRange");e.context.invoke("editor.createLink",t)}).fail(function(){e.context.invoke("editor.restoreRange")})};return t}();var pn=function(){function t(t){var n=this;this.context=t;this.ui=e.summernote.ui;this.options=t.options;this.events={"summernote.keyup summernote.mouseup summernote.change summernote.scroll":function(){n.update()},"summernote.disable summernote.dialog.shown":function(){n.hide()}}}t.prototype.shouldInitialize=function(){return!ee.isEmpty(this.options.popover.link)};t.prototype.initialize=function(){this.$popover=this.ui.popover({className:"note-link-popover",callback:function(e){var t=e.find(".popover-content,.note-popover-content");t.prepend('<span><a target="_blank"></a>&nbsp;</span>')}}).render().appendTo(this.options.container);var e=this.$popover.find(".popover-content,.note-popover-content");this.context.invoke("buttons.build",e,this.options.popover.link)};t.prototype.destroy=function(){this.$popover.remove()};t.prototype.update=function(){if(!this.context.invoke("editor.hasFocus")){this.hide();return}var t=this.context.invoke("editor.createRange");if(t.isCollapsed()&&t.isOnAnchor()){var n=Ot.ancestor(t.sc,Ot.isAnchor);var i=e(n).attr("href");this.$popover.find("a").attr("href",i).html(i);var o=Ot.posFromPlaceholder(n);this.$popover.css({display:"block",left:o.left,top:o.top})}else{this.hide()}};t.prototype.hide=function(){this.$popover.hide()};return t}();var vn=function(){function t(t){this.context=t;this.ui=e.summernote.ui;this.$body=e(document.body);this.$editor=t.layoutInfo.editor;this.options=t.options;this.lang=this.options.langInfo}t.prototype.initialize=function(){var e=this.options.dialogsInBody?this.$body:this.$editor;var t="";if(this.options.maximumImageFileSize){var n=Math.floor(Math.log(this.options.maximumImageFileSize)/Math.log(1024));var i=(this.options.maximumImageFileSize/Math.pow(1024,n)).toFixed(2)*1+" "+" KMGTP"[n]+"B";t="<small>"+(this.lang.image.maximumFileSize+" : "+i)+"</small>"}var o=['<div class="form-group note-form-group note-group-select-from-files">','<label class="note-form-label">'+this.lang.image.selectFromFiles+"</label>",'<input class="note-image-input note-form-control note-input" ',' type="file" name="files" accept="image/*" multiple="multiple" />',t,"</div>",'<div class="form-group note-group-image-url" style="overflow:auto;">','<label class="note-form-label">'+this.lang.image.url+"</label>",'<input class="note-image-url form-control note-form-control note-input ',' col-md-12" type="text" />',"</div>"].join("");var r="btn btn-primary note-btn note-btn-primary note-image-btn";var a='<button type="submit" href="#" class="'+r+'" disabled>'+this.lang.image.insert+"</button>";this.$dialog=this.ui.dialog({title:this.lang.image.insert,fade:this.options.dialogsFade,body:o,footer:a}).render().appendTo(e)};t.prototype.destroy=function(){this.ui.hideDialog(this.$dialog);this.$dialog.remove()};t.prototype.bindEnterKey=function(e,t){e.on("keypress",function(e){if(e.keyCode===Ht.code.ENTER){e.preventDefault();t.trigger("click")}})};t.prototype.show=function(){var e=this;this.context.invoke("editor.saveRange");this.showImageDialog().then(function(t){e.ui.hideDialog(e.$dialog);e.context.invoke("editor.restoreRange");if(typeof t==="string"){e.context.invoke("editor.insertImage",t)}else{e.context.invoke("editor.insertImagesOrCallback",t)}}).fail(function(){e.context.invoke("editor.restoreRange")})};t.prototype.showImageDialog=function(){var t=this;return e.Deferred(function(e){var n=t.$dialog.find(".note-image-input");var i=t.$dialog.find(".note-image-url");var o=t.$dialog.find(".note-image-btn");t.ui.onDialogShown(t.$dialog,function(){t.context.triggerEvent("dialog.shown");n.replaceWith(n.clone().on("change",function(t){e.resolve(t.target.files||t.target.value)}).val(""));o.click(function(t){t.preventDefault();e.resolve(i.val())});i.on("keyup paste",function(){var e=i.val();t.ui.toggleBtn(o,e)}).val("");if(!fe.isSupportTouch){i.trigger("focus")}t.bindEnterKey(i,o)});t.ui.onDialogHidden(t.$dialog,function(){n.off("change");i.off("keyup paste keypress");o.off("click");if(e.state()==="pending"){e.reject()}});t.ui.showDialog(t.$dialog)})};return t}();var mn=function(){function t(t){var n=this;this.context=t;this.ui=e.summernote.ui;this.editable=t.layoutInfo.editable[0];this.options=t.options;this.events={"summernote.disable":function(){n.hide()}}}t.prototype.shouldInitialize=function(){return!ee.isEmpty(this.options.popover.image)};t.prototype.initialize=function(){this.$popover=this.ui.popover({className:"note-image-popover"}).render().appendTo(this.options.container);var e=this.$popover.find(".popover-content,.note-popover-content");this.context.invoke("buttons.build",e,this.options.popover.image)};t.prototype.destroy=function(){this.$popover.remove()};t.prototype.update=function(e){if(Ot.isImg(e)){var t=Ot.posFromPlaceholder(e);var n=Ot.posFromPlaceholder(this.editable);this.$popover.css({display:"block",left:this.options.popatmouse?event.pageX-20:t.left,top:this.options.popatmouse?event.pageY:Math.min(t.top,n.top)})}else{this.hide()}};t.prototype.hide=function(){this.$popover.hide()};return t}();var gn=function(){function t(t){var n=this;this.context=t;this.ui=e.summernote.ui;this.options=t.options;this.events={"summernote.mousedown":function(e,t){n.update(t.target)},"summernote.keyup summernote.scroll summernote.change":function(){n.update()},"summernote.disable":function(){n.hide()}}}t.prototype.shouldInitialize=function(){return!ee.isEmpty(this.options.popover.table)};t.prototype.initialize=function(){this.$popover=this.ui.popover({className:"note-table-popover"}).render().appendTo(this.options.container);var e=this.$popover.find(".popover-content,.note-popover-content");this.context.invoke("buttons.build",e,this.options.popover.table);if(fe.isFF){document.execCommand("enableInlineTableEditing",false,false)}};t.prototype.destroy=function(){this.$popover.remove()};t.prototype.update=function(e){if(this.context.isDisabled()){return false}var t=Ot.isCell(e);if(t){var n=Ot.posFromPlaceholder(e);this.$popover.css({display:"block",left:n.left,top:n.top})}else{this.hide()}return t};t.prototype.hide=function(){this.$popover.hide()};return t}();var bn=function(){function t(t){this.context=t;this.ui=e.summernote.ui;this.$body=e(document.body);this.$editor=t.layoutInfo.editor;this.options=t.options;this.lang=this.options.langInfo}t.prototype.initialize=function(){var e=this.options.dialogsInBody?this.$body:this.$editor;var t=['<div class="form-group note-form-group row-fluid">','<label class="note-form-label">'+this.lang.video.url+' <small class="text-muted">'+this.lang.video.providers+"</small></label>",'<input class="note-video-url form-control note-form-control note-input" type="text" />',"</div>"].join("");var n="btn btn-primary note-btn note-btn-primary note-video-btn";var i='<button type="submit" href="#" class="'+n+'" disabled>'+this.lang.video.insert+"</button>";this.$dialog=this.ui.dialog({title:this.lang.video.insert,fade:this.options.dialogsFade,body:t,footer:i}).render().appendTo(e)};t.prototype.destroy=function(){this.ui.hideDialog(this.$dialog);this.$dialog.remove()};t.prototype.bindEnterKey=function(e,t){e.on("keypress",function(e){if(e.keyCode===Ht.code.ENTER){e.preventDefault();t.trigger("click")}})};t.prototype.createVideoNode=function(t){var n=/^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;var i=t.match(n);var o=/(?:www\.|\/\/)instagram\.com\/p\/(.[a-zA-Z0-9_-]*)/;var r=t.match(o);var a=/\/\/vine\.co\/v\/([a-zA-Z0-9]+)/;var s=t.match(a);var l=/\/\/(player\.)?vimeo\.com\/([a-z]*\/)*(\d+)[?]?.*/;var u=t.match(l);var c=/.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/;var f=t.match(c);var d=/\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/;var h=t.match(d);var p=/\/\/v\.qq\.com.*?vid=(.+)/;var v=t.match(p);var m=/\/\/v\.qq\.com\/x?\/?(page|cover).*?\/([^\/]+)\.html\??.*/;var g=t.match(m);var b=/^.+.(mp4|m4v)$/;var y=t.match(b);var w=/^.+.(ogg|ogv)$/;var x=t.match(w);var C=/^.+.(webm)$/;var k=t.match(C);var T;if(i&&i[1].length===11){var S=i[1];T=e("<iframe>").attr("frameborder",0).attr("src","//www.youtube.com/embed/"+S).attr("width","640").attr("height","360")}else if(r&&r[0].length){T=e("<iframe>").attr("frameborder",0).attr("src","https://instagram.com/p/"+r[1]+"/embed/").attr("width","612").attr("height","710").attr("scrolling","no").attr("allowtransparency","true")}else if(s&&s[0].length){T=e("<iframe>").attr("frameborder",0).attr("src",s[0]+"/embed/simple").attr("width","600").attr("height","600").attr("class","vine-embed")}else if(u&&u[3].length){T=e("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder",0).attr("src","//player.vimeo.com/video/"+u[3]).attr("width","640").attr("height","360")}else if(f&&f[2].length){T=e("<iframe>").attr("frameborder",0).attr("src","//www.dailymotion.com/embed/video/"+f[2]).attr("width","640").attr("height","360")}else if(h&&h[1].length){T=e("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder",0).attr("height","498").attr("width","510").attr("src","//player.youku.com/embed/"+h[1])}else if(v&&v[1].length||g&&g[2].length){var E=v&&v[1].length?v[1]:g[2];T=e("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder",0).attr("height","310").attr("width","500").attr("src","http://v.qq.com/iframe/player.html?vid="+E+"&amp;auto=0")}else if(y||x||k){T=e("<video controls>").attr("src",t).attr("width","640").attr("height","360")}else{return false}T.addClass("note-video-clip");return T[0]};t.prototype.show=function(){var e=this;var t=this.context.invoke("editor.getSelectedText");this.context.invoke("editor.saveRange");this.showVideoDialog(t).then(function(t){e.ui.hideDialog(e.$dialog);e.context.invoke("editor.restoreRange");var n=e.createVideoNode(t);if(n){e.context.invoke("editor.insertNode",n)}}).fail(function(){e.context.invoke("editor.restoreRange")})};t.prototype.showVideoDialog=function(t){var n=this;return e.Deferred(function(e){var i=n.$dialog.find(".note-video-url");var o=n.$dialog.find(".note-video-btn");n.ui.onDialogShown(n.$dialog,function(){n.context.triggerEvent("dialog.shown");i.val(t).on("input",function(){n.ui.toggleBtn(o,i.val())});if(!fe.isSupportTouch){i.trigger("focus")}o.click(function(t){t.preventDefault();e.resolve(i.val())});n.bindEnterKey(i,o)});n.ui.onDialogHidden(n.$dialog,function(){i.off("input");o.off("click");if(e.state()==="pending"){e.reject()}});n.ui.showDialog(n.$dialog)})};return t}();var yn=function(){function t(t){this.context=t;this.ui=e.summernote.ui;this.$body=e(document.body);this.$editor=t.layoutInfo.editor;this.options=t.options;this.lang=this.options.langInfo}t.prototype.initialize=function(){var e=this.options.dialogsInBody?this.$body:this.$editor;var t=['<p class="text-center">','<a href="http://summernote.org/" target="_blank">Summernote 0.8.9</a> Â· ','<a href="https://github.com/summernote/summernote" target="_blank">Project</a> Â· ','<a href="https://github.com/summernote/summernote/issues" target="_blank">Issues</a>',"</p>"].join("");this.$dialog=this.ui.dialog({title:this.lang.options.help,fade:this.options.dialogsFade,body:this.createShortcutList(),footer:t,callback:function(e){e.find(".modal-body,.note-modal-body").css({"max-height":300,overflow:"scroll"})}}).render().appendTo(e)};t.prototype.destroy=function(){this.ui.hideDialog(this.$dialog);this.$dialog.remove()};t.prototype.createShortcutList=function(){var t=this;var n=this.options.keyMap[fe.isMac?"mac":"pc"];return Object.keys(n).map(function(i){var o=n[i];var r=e('<div><div class="help-list-item"/></div>');r.append(e("<label><kbd>"+i+"</kdb></label>").css({width:180,"margin-right":10})).append(e("<span/>").html(t.context.memo("help."+o)||o));return r.html()}).join("")};t.prototype.showHelpDialog=function(){var t=this;return e.Deferred(function(e){t.ui.onDialogShown(t.$dialog,function(){t.context.triggerEvent("dialog.shown");e.resolve()});t.ui.showDialog(t.$dialog)}).promise()};t.prototype.show=function(){var e=this;this.context.invoke("editor.saveRange");this.showHelpDialog().then(function(){e.context.invoke("editor.restoreRange")})};return t}();var wn=20;var xn=function(){function t(t){var n=this;this.context=t;this.ui=e.summernote.ui;this.options=t.options;this.events={"summernote.keyup summernote.mouseup summernote.scroll":function(){n.update()},"summernote.disable summernote.change summernote.dialog.shown":function(){n.hide()},"summernote.focusout":function(e,t){if(fe.isFF){return}if(!t.relatedTarget||!Ot.ancestor(t.relatedTarget,F.eq(n.$popover[0]))){n.hide()}}}}t.prototype.shouldInitialize=function(){return this.options.airMode&&!ee.isEmpty(this.options.popover.air)};t.prototype.initialize=function(){this.$popover=this.ui.popover({className:"note-air-popover"}).render().appendTo(this.options.container);var e=this.$popover.find(".popover-content");this.context.invoke("buttons.build",e,this.options.popover.air)};t.prototype.destroy=function(){this.$popover.remove()};t.prototype.update=function(){var e=this.context.invoke("editor.currentStyle");if(e.range&&!e.range.isCollapsed()){var t=ee.last(e.range.getClientRects());if(t){var n=F.rect2bnd(t);this.$popover.css({display:"block",left:Math.max(n.left+n.width/2,0)-wn,top:n.top+n.height});this.context.invoke("buttons.updateCurrentStyle",this.$popover)}}else{this.hide()}};t.prototype.hide=function(){this.$popover.hide()};return t}();var Cn=5;var kn=function(){function t(t){var n=this;this.context=t;this.ui=e.summernote.ui;this.$editable=t.layoutInfo.editable;this.options=t.options;this.hint=this.options.hint||[];this.direction=this.options.hintDirection||"bottom";this.hints=e.isArray(this.hint)?this.hint:[this.hint];this.events={"summernote.keyup":function(e,t){if(!t.isDefaultPrevented()){n.handleKeyup(t)}},"summernote.keydown":function(e,t){n.handleKeydown(t)},"summernote.disable summernote.dialog.shown":function(){n.hide()}}}t.prototype.shouldInitialize=function(){return this.hints.length>0};t.prototype.initialize=function(){var t=this;this.lastWordRange=null;this.$popover=this.ui.popover({className:"note-hint-popover",hideArrow:true,direction:""}).render().appendTo(this.options.container);this.$popover.hide();this.$content=this.$popover.find(".popover-content,.note-popover-content");this.$content.on("click",".note-hint-item",function(){t.$content.find(".active").removeClass("active");e(t).addClass("active");t.replace()})};t.prototype.destroy=function(){this.$popover.remove()};t.prototype.selectItem=function(e){this.$content.find(".active").removeClass("active");e.addClass("active");this.$content[0].scrollTop=e[0].offsetTop-this.$content.innerHeight()/2};t.prototype.moveDown=function(){var e=this.$content.find(".note-hint-item.active");var t=e.next();if(t.length){this.selectItem(t)}else{var n=e.parent().next();if(!n.length){n=this.$content.find(".note-hint-group").first()}this.selectItem(n.find(".note-hint-item").first())}};t.prototype.moveUp=function(){var e=this.$content.find(".note-hint-item.active");var t=e.prev();if(t.length){this.selectItem(t)}else{var n=e.parent().prev();if(!n.length){n=this.$content.find(".note-hint-group").last()}this.selectItem(n.find(".note-hint-item").last())}};t.prototype.replace=function(){var e=this.$content.find(".note-hint-item.active");if(e.length){var t=this.nodeFromItem(e);this.lastWordRange.insertNode(t);Bt.createFromNode(t).collapse().select();this.lastWordRange=null;this.hide();this.context.triggerEvent("change",this.$editable.html(),this.$editable[0]);this.context.invoke("editor.focus")}};t.prototype.nodeFromItem=function(e){var t=this.hints[e.data("index")];var n=e.data("item");var i=t.content?t.content(n):n;if(typeof i==="string"){i=Ot.createText(i)}return i};t.prototype.createItemTemplates=function(t,n){var i=this.hints[t];return n.map(function(n,o){var r=e('<div class="note-hint-item"/>');r.append(i.template?i.template(n):n+"");r.data({index:t,item:n});return r})};t.prototype.handleKeydown=function(e){if(!this.$popover.is(":visible")){return}if(e.keyCode===Ht.code.ENTER){e.preventDefault();this.replace()}else if(e.keyCode===Ht.code.UP){e.preventDefault();this.moveUp()}else if(e.keyCode===Ht.code.DOWN){e.preventDefault();this.moveDown()}};t.prototype.searchKeyword=function(e,t,n){var i=this.hints[e];if(i&&i.match.test(t)&&i.search){var o=i.match.exec(t);i.search(o[1],n)}else{n()}};t.prototype.createGroup=function(t,n){var i=this;var o=e('<div class="note-hint-group note-hint-group-'+t+'"/>');this.searchKeyword(t,n,function(e){e=e||[];if(e.length){o.html(i.createItemTemplates(t,e));i.show()}});return o};t.prototype.handleKeyup=function(e){var t=this;if(!ee.contains([Ht.code.ENTER,Ht.code.UP,Ht.code.DOWN],e.keyCode)){var n=this.context.invoke("editor.createRange").getWordRange();var i=n.toString();if(this.hints.length&&i){this.$content.empty();var o=F.rect2bnd(ee.last(n.getClientRects()));if(o){this.$popover.hide();this.lastWordRange=n;this.hints.forEach(function(e,n){if(e.match.test(i)){t.createGroup(n,i).appendTo(t.$content)}});this.$content.find(".note-hint-item:first").addClass("active");if(this.direction==="top"){this.$popover.css({left:o.left,top:o.top-this.$popover.outerHeight()-Cn})}else{this.$popover.css({left:o.left,top:o.top+o.height+Cn})}}}else{this.hide()}}};t.prototype.show=function(){this.$popover.show()};t.prototype.hide=function(){this.$popover.hide()};return t}();var Tn=function(){function t(t,n){this.ui=e.summernote.ui;this.$note=t;this.memos={};this.modules={};this.layoutInfo={};this.options=n;this.initialize()}t.prototype.initialize=function(){this.layoutInfo=this.ui.createLayout(this.$note,this.options);this._initialize();this.$note.hide();return this};t.prototype.destroy=function(){this._destroy();this.$note.removeData("summernote");this.ui.removeLayout(this.$note,this.layoutInfo)};t.prototype.reset=function(){var e=this.isDisabled();this.code(Ot.emptyPara);this._destroy();this._initialize();if(e){this.disable()}};t.prototype._initialize=function(){var t=this;var n=e.extend({},this.options.buttons);Object.keys(n).forEach(function(e){t.memo("button."+e,n[e])});var i=e.extend({},this.options.modules,e.summernote.plugins||{});Object.keys(i).forEach(function(e){t.module(e,i[e],true)});Object.keys(this.modules).forEach(function(e){t.initializeModule(e)})};t.prototype._destroy=function(){var e=this;Object.keys(this.modules).reverse().forEach(function(t){e.removeModule(t)});Object.keys(this.memos).forEach(function(t){e.removeMemo(t)});this.triggerEvent("destroy",this)};t.prototype.code=function(e){var t=this.invoke("codeview.isActivated");if(e===undefined){this.invoke("codeview.sync");return t?this.layoutInfo.codable.val():this.layoutInfo.editable.html()}else{if(t){this.layoutInfo.codable.val(e)}else{this.layoutInfo.editable.html(e)}this.$note.val(e);this.triggerEvent("change",e)}};t.prototype.isDisabled=function(){return this.layoutInfo.editable.attr("contenteditable")==="false"};t.prototype.enable=function(){this.layoutInfo.editable.attr("contenteditable",true);this.invoke("toolbar.activate",true);this.triggerEvent("disable",false)};t.prototype.disable=function(){if(this.invoke("codeview.isActivated")){this.invoke("codeview.deactivate")}this.layoutInfo.editable.attr("contenteditable",false);this.invoke("toolbar.deactivate",true);this.triggerEvent("disable",true)};t.prototype.triggerEvent=function(){var e=ee.head(arguments);var t=ee.tail(ee.from(arguments));var n=this.options.callbacks[F.namespaceToCamel(e,"on")];if(n){n.apply(this.$note[0],t)}this.$note.trigger("summernote."+e,t)};t.prototype.initializeModule=function(e){var t=this.modules[e];t.shouldInitialize=t.shouldInitialize||F.ok;if(!t.shouldInitialize()){return}if(t.initialize){t.initialize()}if(t.events){Ot.attachEvents(this.$note,t.events)}};t.prototype.module=function(e,t,n){if(arguments.length===1){return this.modules[e]}this.modules[e]=new t(this);if(!n){this.initializeModule(e)}};t.prototype.removeModule=function(e){var t=this.modules[e];if(t.shouldInitialize()){if(t.events){Ot.detachEvents(this.$note,t.events)}if(t.destroy){t.destroy()}}delete this.modules[e]};t.prototype.memo=function(e,t){if(arguments.length===1){return this.memos[e]}this.memos[e]=t};t.prototype.removeMemo=function(e){if(this.memos[e]&&this.memos[e].destroy){this.memos[e].destroy()}delete this.memos[e]};t.prototype.createInvokeHandlerAndUpdateState=function(e,t){var n=this;return function(i){n.createInvokeHandler(e,t)(i);n.invoke("buttons.updateCurrentStyle")}};t.prototype.createInvokeHandler=function(t,n){var i=this;return function(o){o.preventDefault();var r=e(o.target);i.invoke(t,n||r.closest("[data-value]").data("value"),r)}};t.prototype.invoke=function(){var e=ee.head(arguments);var t=ee.tail(ee.from(arguments));var n=e.split(".");var i=n.length>1;var o=i&&ee.head(n);var r=i?ee.last(n):ee.head(n);var a=this.modules[o||"editor"];if(!o&&this[r]){return this[r].apply(this,t)}else if(a&&a[r]&&a.shouldInitialize()){return a[r].apply(a,t)}};return t}();e.fn.extend({summernote:function(){var t=e.type(ee.head(arguments));var n=t==="string";var i=t==="object";var o=e.extend({},e.summernote.options,i?ee.head(arguments):{});o.langInfo=e.extend(true,{},e.summernote.lang["en-US"],e.summernote.lang[o.lang]);o.icons=e.extend(true,{},e.summernote.options.icons,o.icons);o.tooltip=o.tooltip==="auto"?!fe.isSupportTouch:o.tooltip;this.each(function(t,n){var i=e(n);if(!i.data("summernote")){var r=new Tn(i,o);i.data("summernote",r);i.data("summernote").triggerEvent("init",r.layoutInfo)}});var r=this.first();if(r.length){var a=r.data("summernote");if(n){return a.invoke.apply(a,ee.from(arguments))}else if(o.focus){a.invoke("editor.focus")}}return this}});e.summernote=e.extend(e.summernote,{version:"0.8.9",ui:w,dom:Ot,plugins:{},options:{modules:{editor:Xt,clipboard:Yt,dropzone:Jt,codeview:en,statusbar:nn,fullscreen:on,handle:rn,hintPopover:kn,autoLink:ln,autoSync:un,placeholder:cn,buttons:fn,toolbar:dn,linkDialog:hn,linkPopover:pn,imageDialog:vn,imagePopover:mn,tablePopover:gn,videoDialog:bn,helpDialog:yn,airPopover:xn},buttons:{},lang:"en-US",followingToolbar:true,otherStaticBar:"",toolbar:[["style",["style"]],["font",["bold","underline","clear"]],["fontname",["fontname"]],["color",["color"]],["para",["ul","ol","paragraph"]],["table",["table"]],["insert",["link","picture","video"]],["view",["fullscreen","codeview","help"]]],popatmouse:true,popover:{image:[["imagesize",["imageSize100","imageSize50","imageSize25"]],["float",["floatLeft","floatRight","floatNone"]],["remove",["removeMedia"]]],link:[["link",["linkDialogShow","unlink"]]],table:[["add",["addRowDown","addRowUp","addColLeft","addColRight"]],["delete",["deleteRow","deleteCol","deleteTable"]]],air:[["color",["color"]],["font",["bold","underline","clear"]],["para",["ul","paragraph"]],["table",["table"]],["insert",["link","picture"]]]},airMode:false,width:null,height:null,linkTargetBlank:true,focus:false,tabSize:4,styleWithSpan:true,shortcuts:true,textareaAutoSync:true,hintDirection:"bottom",tooltip:"auto",container:"body",maxTextLength:0,styleTags:["p","blockquote","pre","h1","h2","h3","h4","h5","h6"],fontNames:["Arial","Arial Black","Comic Sans MS","Courier New","Helvetica Neue","Helvetica","Impact","Lucida Grande","Tahoma","Times New Roman","Verdana"],fontSizes:["8","9","10","11","12","14","18","24","36"],colors:[["#000000","#424242","#636363","#9C9C94","#CEC6CE","#EFEFEF","#F7F7F7","#FFFFFF"],["#FF0000","#FF9C00","#FFFF00","#00FF00","#00FFFF","#0000FF","#9C00FF","#FF00FF"],["#F7C6CE","#FFE7CE","#FFEFC6","#D6EFD6","#CEDEE7","#CEE7F7","#D6D6E7","#E7D6DE"],["#E79C9C","#FFC69C","#FFE79C","#B5D6A5","#A5C6CE","#9CC6EF","#B5A5D6","#D6A5BD"],["#E76363","#F7AD6B","#FFD663","#94BD7B","#73A5AD","#6BADDE","#8C7BC6","#C67BA5"],["#CE0000","#E79439","#EFC631","#6BA54A","#4A7B8C","#3984C6","#634AA5","#A54A7B"],["#9C0000","#B56308","#BD9400","#397B21","#104A5A","#085294","#311873","#731842"],["#630000","#7B3900","#846300","#295218","#083139","#003163","#21104A","#4A1031"]],lineHeights:["1.0","1.2","1.4","1.5","1.6","1.8","2.0","3.0"],tableClassName:"table table-bordered",insertTableMaxSize:{col:10,row:10},dialogsInBody:false,dialogsFade:false,maximumImageFileSize:null,callbacks:{onInit:null,onFocus:null,onBlur:null,onBlurCodeview:null,onEnter:null,onKeyup:null,onKeydown:null,onImageUpload:null,onImageUploadError:null},codemirror:{mode:"text/html",htmlMode:true,lineNumbers:true},keyMap:{pc:{ENTER:"insertParagraph","CTRL+Z":"undo","CTRL+Y":"redo",TAB:"tab","SHIFT+TAB":"untab","CTRL+B":"bold","CTRL+I":"italic","CTRL+U":"underline","CTRL+SHIFT+S":"strikethrough","CTRL+BACKSLASH":"removeFormat","CTRL+SHIFT+L":"justifyLeft","CTRL+SHIFT+E":"justifyCenter","CTRL+SHIFT+R":"justifyRight","CTRL+SHIFT+J":"justifyFull","CTRL+SHIFT+NUM7":"insertUnorderedList","CTRL+SHIFT+NUM8":"insertOrderedList","CTRL+LEFTBRACKET":"outdent","CTRL+RIGHTBRACKET":"indent","CTRL+NUM0":"formatPara","CTRL+NUM1":"formatH1","CTRL+NUM2":"formatH2","CTRL+NUM3":"formatH3","CTRL+NUM4":"formatH4","CTRL+NUM5":"formatH5","CTRL+NUM6":"formatH6","CTRL+ENTER":"insertHorizontalRule","CTRL+K":"linkDialog.show"},mac:{ENTER:"insertParagraph","CMD+Z":"undo","CMD+SHIFT+Z":"redo",TAB:"tab","SHIFT+TAB":"untab","CMD+B":"bold","CMD+I":"italic","CMD+U":"underline","CMD+SHIFT+S":"strikethrough","CMD+BACKSLASH":"removeFormat","CMD+SHIFT+L":"justifyLeft","CMD+SHIFT+E":"justifyCenter","CMD+SHIFT+R":"justifyRight","CMD+SHIFT+J":"justifyFull","CMD+SHIFT+NUM7":"insertUnorderedList","CMD+SHIFT+NUM8":"insertOrderedList","CMD+LEFTBRACKET":"outdent","CMD+RIGHTBRACKET":"indent","CMD+NUM0":"formatPara","CMD+NUM1":"formatH1","CMD+NUM2":"formatH2","CMD+NUM3":"formatH3","CMD+NUM4":"formatH4","CMD+NUM5":"formatH5","CMD+NUM6":"formatH6","CMD+ENTER":"insertHorizontalRule","CMD+K":"linkDialog.show"}},icons:{align:"note-icon-align",alignCenter:"note-icon-align-center",alignJustify:"note-icon-align-justify",alignLeft:"note-icon-align-left",alignRight:"note-icon-align-right",rowBelow:"note-icon-row-below",colBefore:"note-icon-col-before",colAfter:"note-icon-col-after",rowAbove:"note-icon-row-above",rowRemove:"note-icon-row-remove",colRemove:"note-icon-col-remove",indent:"note-icon-align-indent",outdent:"note-icon-align-outdent",arrowsAlt:"note-icon-arrows-alt",bold:"note-icon-bold",caret:"note-icon-caret",circle:"note-icon-circle",close:"note-icon-close",code:"note-icon-code",eraser:"note-icon-eraser",font:"note-icon-font",frame:"note-icon-frame",italic:"note-icon-italic",link:"note-icon-link",unlink:"note-icon-chain-broken",magic:"note-icon-magic",menuCheck:"note-icon-menu-check",minus:"note-icon-minus",orderedlist:"note-icon-orderedlist",pencil:"note-icon-pencil",picture:"note-icon-picture",question:"note-icon-question",redo:"note-icon-redo",square:"note-icon-square",strikethrough:"note-icon-strikethrough",subscript:"note-icon-subscript",superscript:"note-icon-superscript",table:"note-icon-table",textHeight:"note-icon-text-height",trash:"note-icon-trash",underline:"note-icon-underline",undo:"note-icon-undo",unorderedlist:"note-icon-unorderedlist",video:"note-icon-video"}}})});(function(e){e.extend(e.summernote.lang,{"da-DK":{font:{bold:"Fed",italic:"Kursiv",underline:"Understreget",clear:"Fjern formatering",height:"HÃ¸jde",name:"Skrifttype",strikethrough:"Gennemstreget",subscript:"SÃ¦nket skrift",superscript:"HÃ¦vet skrift",size:"SkriftstÃ¸rrelse"},image:{image:"Billede",insert:"IndsÃ¦t billede",resizeFull:"Original stÃ¸rrelse",resizeHalf:"Halv stÃ¸rrelse",resizeQuarter:"Kvart stÃ¸rrelse",floatLeft:"Venstrestillet",floatRight:"HÃ¸jrestillet",floatNone:"Fjern formatering",shapeRounded:"Form: Runde kanter",shapeCircle:"Form: Cirkel",shapeThumbnail:"Form: Miniature",shapeNone:"Form: Ingen",dragImageHere:"TrÃ¦k billede hertil",dropImage:"Slip billede",selectFromFiles:"VÃ¦lg billed-fil",maximumFileSize:"Maks fil stÃ¸rrelse",maximumFileSizeError:"Filen er stÃ¸rre end maks tilladte fil stÃ¸rrelse!",url:"Billede URL",remove:"Fjern billede",original:"Original"},video:{video:"Video",videoLink:"Video Link",insert:"IndsÃ¦t Video",url:"Video URL?",providers:"(YouTube, Vimeo, Vine, Instagram, DailyMotion eller Youku)"},link:{link:"Link",insert:"IndsÃ¦t link",unlink:"Fjern link",edit:"Rediger",textToDisplay:"Visningstekst",url:"Hvor skal linket pege hen?",openInNewWindow:"Ãbn i nyt vindue"},table:{table:"Tabel",addRowAbove:"Add row above",addRowBelow:"Add row below",addColLeft:"Add column left",addColRight:"Add column right",delRow:"Delete row",delCol:"Delete column",delTable:"Delete table"},hr:{insert:"IndsÃ¦t horisontal linje"},style:{style:"Stil",p:"p",blockquote:"Citat",pre:"Kode",h1:"Overskrift 1",h2:"Overskrift 2",h3:"Overskrift 3",h4:"Overskrift 4",h5:"Overskrift 5",h6:"Overskrift 6"},lists:{unordered:"Punktopstillet liste",ordered:"Nummereret liste"},options:{help:"HjÃ¦lp",fullscreen:"Fuld skÃ¦rm",codeview:"HTML-Visning"},paragraph:{paragraph:"Afsnit",outdent:"Formindsk indryk",indent:"ForÃ¸g indryk",left:"Venstrestillet",center:"Centreret",right:"HÃ¸jrestillet",justify:"Blokjuster"},color:{recent:"Nyligt valgt farve",more:"Flere farver",background:"Baggrund",foreground:"Forgrund",transparent:"Transparent",setTransparent:"SÃ¦t transparent",reset:"Nulstil",resetToDefault:"Gendan standardindstillinger"},shortcut:{shortcuts:"Genveje",close:"Luk",textFormatting:"Tekstformatering",action:"Handling",paragraphFormatting:"Afsnitsformatering",documentStyle:"Dokumentstil",extraKeys:"Extra keys"},help:{insertParagraph:"Insert Paragraph",undo:"Undoes the last command",redo:"Redoes the last command",tab:"Tab",untab:"Untab",bold:"Set a bold style",italic:"Set a italic style",underline:"Set a underline style",strikethrough:"Set a strikethrough style",removeFormat:"Clean a style",justifyLeft:"Set left align",justifyCenter:"Set center align",justifyRight:"Set right align",justifyFull:"Set full align",insertUnorderedList:"Toggle unordered list",insertOrderedList:"Toggle ordered list",outdent:"Outdent on current paragraph",indent:"Indent on current paragraph",formatPara:"Change current block's format as a paragraph(P tag)",formatH1:"Change current block's format as H1",formatH2:"Change current block's format as H2",formatH3:"Change current block's format as H3",formatH4:"Change current block's format as H4",formatH5:"Change current block's format as H5",formatH6:"Change current block's format as H6",insertHorizontalRule:"Insert horizontal rule","linkDialog.show":"Show Link Dialog"},history:{undo:"Fortryd",redo:"Annuller fortryd"},specialChar:{specialChar:"SPECIAL CHARACTERS",select:"Select Special characters"}}})})(jQuery);var NoteSaveButton=function(e){var t=$.summernote.ui;var n=t.button({contents:'<i class="fa fa-child"/>Save',tooltip:"save",click:function(){var t={route:pageRoute,content:e.invoke("code")};var n=Router.generatePath("dime.api.page.content",{});$.post(n,JSON.stringify(t),function(e){})}});return n.render()};$("#pageedit").on("click",function(){if($(this).hasClass("active")){$(".inlineedit").summernote("destroy")}else{$(".inlineedit").summernote({lang:lang,focus:true,buttons:{save:NoteSaveButton},toolbar:[["style",["style"]],["font",["fontname","fontsize"]],["textstyle",["bold","italic","underline","strikethrough","superscript","subscript","clear"]],["color",["color"]],["para",["ul","ol","paragraph","height"]],["insert",["picture","link","video"]],["table",["table"]],["hr",["hr"]],["view",["fullscreen","codeview"]],["edit",["undo","redo"]],["help",["help"]],["save",["save"]]]})}});var Router=function(){var e="";var t=[];var n=function e(t,n){n=n===undefined?[]:n;this.base=this.base===undefined?"":this.base;var i=this.routes[t];if(i===undefined){return undefined}var o=this.base+i.path;for(var r in n){if(n.hasOwnProperty(r)){o=o.replace("{"+r+"}",n[r])}}return o};var i=function e(t){this.base=t};var o=function e(t){this.routes=t};return{generatePath:n,setBasePath:i,setRoutes:o}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
