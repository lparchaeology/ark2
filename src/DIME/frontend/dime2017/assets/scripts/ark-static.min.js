(function(e,t){"use strict";if(typeof module==="object"&&typeof module.exports==="object"){module.exports=e.document?t(e,true):function(e){if(!e.document){throw new Error("jQuery requires a window with a document")}return t(e)}}else{t(e)}})(typeof window!=="undefined"?window:this,function(e,t){"use strict";var n=[];var i=e.document;var r=Object.getPrototypeOf;var o=n.slice;var a=n.concat;var s=n.push;var l=n.indexOf;var u={};var c=u.toString;var f=u.hasOwnProperty;var d=f.toString;var h=d.call(Object);var p={};function v(e,t){t=t||i;var n=t.createElement("script");n.text=e;t.head.appendChild(n).parentNode.removeChild(n)}var m="3.2.1",g=function(e,t){return new g.fn.init(e,t)},b=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,y=/^-ms-/,w=/-([a-z])/g,C=function(e,t){return t.toUpperCase()};g.fn=g.prototype={jquery:m,constructor:g,length:0,toArray:function(){return o.call(this)},get:function(e){if(e==null){return o.call(this)}return e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=g.merge(this.constructor(),e);t.prevObject=this;return t},each:function(e){return g.each(this,e)},map:function(e){return this.pushStack(g.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice};g.extend=g.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,u=false;if(typeof a==="boolean"){u=a;a=arguments[s]||{};s++}if(typeof a!=="object"&&!g.isFunction(a)){a={}}if(s===l){a=this;s--}for(;s<l;s++){if((e=arguments[s])!=null){for(t in e){n=a[t];i=e[t];if(a===i){continue}if(u&&i&&(g.isPlainObject(i)||(r=Array.isArray(i)))){if(r){r=false;o=n&&Array.isArray(n)?n:[]}else{o=n&&g.isPlainObject(n)?n:{}}a[t]=g.extend(u,o,i)}else if(i!==undefined){a[t]=i}}}}return a};g.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:true,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return g.type(e)==="function"},isWindow:function(e){return e!=null&&e===e.window},isNumeric:function(e){var t=g.type(e);return(t==="number"||t==="string")&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;if(!e||c.call(e)!=="[object Object]"){return false}t=r(e);if(!t){return true}n=f.call(t,"constructor")&&t.constructor;return typeof n==="function"&&d.call(n)===h},isEmptyObject:function(e){var t;for(t in e){return false}return true},type:function(e){if(e==null){return e+""}return typeof e==="object"||typeof e==="function"?u[c.call(e)]||"object":typeof e},globalEval:function(e){v(e)},camelCase:function(e){return e.replace(y,"ms-").replace(w,C)},each:function(e,t){var n,i=0;if(k(e)){n=e.length;for(;i<n;i++){if(t.call(e[i],i,e[i])===false){break}}}else{for(i in e){if(t.call(e[i],i,e[i])===false){break}}}return e},trim:function(e){return e==null?"":(e+"").replace(b,"")},makeArray:function(e,t){var n=t||[];if(e!=null){if(k(Object(e))){g.merge(n,typeof e==="string"?[e]:e)}else{s.call(n,e)}}return n},inArray:function(e,t,n){return t==null?-1:l.call(t,e,n)},merge:function(e,t){var n=+t.length,i=0,r=e.length;for(;i<n;i++){e[r++]=t[i]}e.length=r;return e},grep:function(e,t,n){var i,r=[],o=0,a=e.length,s=!n;for(;o<a;o++){i=!t(e[o],o);if(i!==s){r.push(e[o])}}return r},map:function(e,t,n){var i,r,o=0,s=[];if(k(e)){i=e.length;for(;o<i;o++){r=t(e[o],o,n);if(r!=null){s.push(r)}}}else{for(o in e){r=t(e[o],o,n);if(r!=null){s.push(r)}}}return a.apply([],s)},guid:1,proxy:function(e,t){var n,i,r;if(typeof t==="string"){n=e[t];t=e;e=n}if(!g.isFunction(e)){return undefined}i=o.call(arguments,2);r=function(){return e.apply(t||this,i.concat(o.call(arguments)))};r.guid=e.guid=e.guid||g.guid++;return r},now:Date.now,support:p});if(typeof Symbol==="function"){g.fn[Symbol.iterator]=n[Symbol.iterator]}g.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){u["[object "+t+"]"]=t.toLowerCase()});function k(e){var t=!!e&&"length"in e&&e.length,n=g.type(e);if(n==="function"||g.isWindow(e)){return false}return n==="array"||t===0||typeof t==="number"&&t>0&&t-1 in e}var x=function(e){var t,n,i,r,o,a,s,l,u,c,f,d,h,p,v,m,g,b,y,w="sizzle"+1*new Date,C=e.document,k=0,x=0,T=ae(),S=ae(),E=ae(),N=function(e,t){if(e===t){f=true}return 0},A={}.hasOwnProperty,I=[],D=I.pop,R=I.push,$=I.push,L=I.slice,P=function(e,t){var n=0,i=e.length;for(;n<i;n++){if(e[n]===t){return n}}return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",j="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",O="\\["+F+"*("+j+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+F+"*\\]",M=":("+j+")(?:\\(("+"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|"+"((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|"+".*"+")\\)|)",B=new RegExp(F+"+","g"),z=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),q=new RegExp("^"+F+"*,"+F+"*"),U=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),W=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),V=new RegExp(M),_=new RegExp("^"+j+"$"),K={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+M),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,X=/^[^{]+\{\s*\[native \w/,Y=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,i&1023|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){if(t){if(e==="\0"){return"ï¿½"}return e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" "}return"\\"+e},ie=function(){d()},re=be(function(e){return e.disabled===true&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{$.apply(I=L.call(C.childNodes),C.childNodes);I[C.childNodes.length].nodeType}catch(e){$={apply:I.length?function(e,t){R.apply(e,L.call(t))}:function(e,t){var n=e.length,i=0;while(e[n++]=t[i++]){}e.length=n-1}}}function oe(e,t,i,r){var o,s,u,c,f,p,g,b=t&&t.ownerDocument,k=t?t.nodeType:9;i=i||[];if(typeof e!=="string"||!e||k!==1&&k!==9&&k!==11){return i}if(!r){if((t?t.ownerDocument||t:C)!==h){d(t)}t=t||h;if(v){if(k!==11&&(f=Y.exec(e))){if(o=f[1]){if(k===9){if(u=t.getElementById(o)){if(u.id===o){i.push(u);return i}}else{return i}}else{if(b&&(u=b.getElementById(o))&&y(t,u)&&u.id===o){i.push(u);return i}}}else if(f[2]){$.apply(i,t.getElementsByTagName(e));return i}else if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName){$.apply(i,t.getElementsByClassName(o));return i}}if(n.qsa&&!E[e+" "]&&(!m||!m.test(e))){if(k!==1){b=t;g=e}else if(t.nodeName.toLowerCase()!=="object"){if(c=t.getAttribute("id")){c=c.replace(te,ne)}else{t.setAttribute("id",c=w)}p=a(e);s=p.length;while(s--){p[s]="#"+c+" "+ge(p[s])}g=p.join(",");b=J.test(e)&&ve(t.parentNode)||t}if(g){try{$.apply(i,b.querySelectorAll(g));return i}catch(e){}finally{if(c===w){t.removeAttribute("id")}}}}}}return l(e.replace(z,"$1"),t,i,r)}function ae(){var e=[];function t(n,r){if(e.push(n+" ")>i.cacheLength){delete t[e.shift()]}return t[n+" "]=r}return t}function se(e){e[w]=true;return e}function le(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return false}finally{if(t.parentNode){t.parentNode.removeChild(t)}t=null}}function ue(e,t){var n=e.split("|"),r=n.length;while(r--){i.attrHandle[n[r]]=t}}function ce(e,t){var n=t&&e,i=n&&e.nodeType===1&&t.nodeType===1&&e.sourceIndex-t.sourceIndex;if(i){return i}if(n){while(n=n.nextSibling){if(n===t){return-1}}}return e?1:-1}function fe(e){return function(t){var n=t.nodeName.toLowerCase();return n==="input"&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return(n==="input"||n==="button")&&t.type===e}}function he(e){return function(t){if("form"in t){if(t.parentNode&&t.disabled===false){if("label"in t){if("label"in t.parentNode){return t.parentNode.disabled===e}else{return t.disabled===e}}return t.isDisabled===e||t.isDisabled!==!e&&re(t)===e}return t.disabled===e}else if("label"in t){return t.disabled===e}return false}}function pe(e){return se(function(t){t=+t;return se(function(n,i){var r,o=e([],n.length,t),a=o.length;while(a--){if(n[r=o[a]]){n[r]=!(i[r]=n[r])}}})})}function ve(e){return e&&typeof e.getElementsByTagName!=="undefined"&&e}n=oe.support={};o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?t.nodeName!=="HTML":false};d=oe.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:C;if(a===h||a.nodeType!==9||!a.documentElement){return h}h=a;p=h.documentElement;v=!o(h);if(C!==h&&(r=h.defaultView)&&r.top!==r){if(r.addEventListener){r.addEventListener("unload",ie,false)}else if(r.attachEvent){r.attachEvent("onunload",ie)}}n.attributes=le(function(e){e.className="i";return!e.getAttribute("className")});n.getElementsByTagName=le(function(e){e.appendChild(h.createComment(""));return!e.getElementsByTagName("*").length});n.getElementsByClassName=X.test(h.getElementsByClassName);n.getById=le(function(e){p.appendChild(e).id=w;return!h.getElementsByName||!h.getElementsByName(w).length});if(n.getById){i.filter["ID"]=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}};i.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&v){var n=t.getElementById(e);return n?[n]:[]}}}else{i.filter["ID"]=function(e){var t=e.replace(Z,ee);return function(e){var n=typeof e.getAttributeNode!=="undefined"&&e.getAttributeNode("id");return n&&n.value===t}};i.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&v){var n,i,r,o=t.getElementById(e);if(o){n=o.getAttributeNode("id");if(n&&n.value===e){return[o]}r=t.getElementsByName(e);i=0;while(o=r[i++]){n=o.getAttributeNode("id");if(n&&n.value===e){return[o]}}}return[]}}}i.find["TAG"]=n.getElementsByTagName?function(e,t){if(typeof t.getElementsByTagName!=="undefined"){return t.getElementsByTagName(e)}else if(n.qsa){return t.querySelectorAll(e)}}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if(e==="*"){while(n=o[r++]){if(n.nodeType===1){i.push(n)}}return i}return o};i.find["CLASS"]=n.getElementsByClassName&&function(e,t){if(typeof t.getElementsByClassName!=="undefined"&&v){return t.getElementsByClassName(e)}};g=[];m=[];if(n.qsa=X.test(h.querySelectorAll)){le(function(e){p.appendChild(e).innerHTML="<a id='"+w+"'></a>"+"<select id='"+w+"-\r\\' msallowcapture=''>"+"<option selected=''></option></select>";if(e.querySelectorAll("[msallowcapture^='']").length){m.push("[*^$]="+F+"*(?:''|\"\")")}if(!e.querySelectorAll("[selected]").length){m.push("\\["+F+"*(?:value|"+H+")")}if(!e.querySelectorAll("[id~="+w+"-]").length){m.push("~=")}if(!e.querySelectorAll(":checked").length){m.push(":checked")}if(!e.querySelectorAll("a#"+w+"+*").length){m.push(".#.+[+~]")}});le(function(e){e.innerHTML="<a href='' disabled='disabled'></a>"+"<select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden");e.appendChild(t).setAttribute("name","D");if(e.querySelectorAll("[name=d]").length){m.push("name"+F+"*[*^$|!~]?=")}if(e.querySelectorAll(":enabled").length!==2){m.push(":enabled",":disabled")}p.appendChild(e).disabled=true;if(e.querySelectorAll(":disabled").length!==2){m.push(":enabled",":disabled")}e.querySelectorAll("*,:x");m.push(",.*:")})}if(n.matchesSelector=X.test(b=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector)){le(function(e){n.disconnectedMatch=b.call(e,"*");b.call(e,"[s!='']:x");g.push("!=",M)})}m=m.length&&new RegExp(m.join("|"));g=g.length&&new RegExp(g.join("|"));t=X.test(p.compareDocumentPosition);y=t||X.test(p.contains)?function(e,t){var n=e.nodeType===9?e.documentElement:e,i=t&&t.parentNode;return e===i||!!(i&&i.nodeType===1&&(n.contains?n.contains(i):e.compareDocumentPosition&&e.compareDocumentPosition(i)&16))}:function(e,t){if(t){while(t=t.parentNode){if(t===e){return true}}}return false};N=t?function(e,t){if(e===t){f=true;return 0}var i=!e.compareDocumentPosition-!t.compareDocumentPosition;if(i){return i}i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1;if(i&1||!n.sortDetached&&t.compareDocumentPosition(e)===i){if(e===h||e.ownerDocument===C&&y(C,e)){return-1}if(t===h||t.ownerDocument===C&&y(C,t)){return 1}return c?P(c,e)-P(c,t):0}return i&4?-1:1}:function(e,t){if(e===t){f=true;return 0}var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!r||!o){return e===h?-1:t===h?1:r?-1:o?1:c?P(c,e)-P(c,t):0}else if(r===o){return ce(e,t)}n=e;while(n=n.parentNode){a.unshift(n)}n=t;while(n=n.parentNode){s.unshift(n)}while(a[i]===s[i]){i++}return i?ce(a[i],s[i]):a[i]===C?-1:s[i]===C?1:0};return h};oe.matches=function(e,t){return oe(e,null,null,t)};oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h){d(e)}t=t.replace(W,"='$1']");if(n.matchesSelector&&v&&!E[t+" "]&&(!g||!g.test(t))&&(!m||!m.test(t))){try{var i=b.call(e,t);if(i||n.disconnectedMatch||e.document&&e.document.nodeType!==11){return i}}catch(e){}}return oe(t,h,null,[e]).length>0};oe.contains=function(e,t){if((e.ownerDocument||e)!==h){d(e)}return y(e,t)};oe.attr=function(e,t){if((e.ownerDocument||e)!==h){d(e)}var r=i.attrHandle[t.toLowerCase()],o=r&&A.call(i.attrHandle,t.toLowerCase())?r(e,t,!v):undefined;return o!==undefined?o:n.attributes||!v?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null};oe.escape=function(e){return(e+"").replace(te,ne)};oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)};oe.uniqueSort=function(e){var t,i=[],r=0,o=0;f=!n.detectDuplicates;c=!n.sortStable&&e.slice(0);e.sort(N);if(f){while(t=e[o++]){if(t===e[o]){r=i.push(o)}}while(r--){e.splice(i[r],1)}}c=null;return e};r=oe.getText=function(e){var t,n="",i=0,o=e.nodeType;if(!o){while(t=e[i++]){n+=r(t)}}else if(o===1||o===9||o===11){if(typeof e.textContent==="string"){return e.textContent}else{for(e=e.firstChild;e;e=e.nextSibling){n+=r(e)}}}else if(o===3||o===4){return e.nodeValue}return n};i=oe.selectors={cacheLength:50,createPseudo:se,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){e[1]=e[1].replace(Z,ee);e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee);if(e[2]==="~="){e[3]=" "+e[3]+" "}return e.slice(0,4)},CHILD:function(e){e[1]=e[1].toLowerCase();if(e[1].slice(0,3)==="nth"){if(!e[3]){oe.error(e[0])}e[4]=+(e[4]?e[5]+(e[6]||1):2*(e[3]==="even"||e[3]==="odd"));e[5]=+(e[7]+e[8]||e[3]==="odd")}else if(e[3]){oe.error(e[0])}return e},PSEUDO:function(e){var t,n=!e[6]&&e[2];if(K["CHILD"].test(e[0])){return null}if(e[3]){e[2]=e[4]||e[5]||""}else if(n&&V.test(n)&&(t=a(n,true))&&(t=n.indexOf(")",n.length-t)-n.length)){e[0]=e[0].slice(0,t);e[2]=n.slice(0,t)}return e.slice(0,3)}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return e==="*"?function(){return true}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+F+")"+e+"("+F+"|$)"))&&T(e,function(e){return t.test(typeof e.className==="string"&&e.className||typeof e.getAttribute!=="undefined"&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=oe.attr(i,e);if(r==null){return t==="!="}if(!t){return true}r+="";return t==="="?r===n:t==="!="?r!==n:t==="^="?n&&r.indexOf(n)===0:t==="*="?n&&r.indexOf(n)>-1:t==="$="?n&&r.slice(-n.length)===n:t==="~="?(" "+r.replace(B," ")+" ").indexOf(n)>-1:t==="|="?r===n||r.slice(0,n.length+1)===n+"-":false}},CHILD:function(e,t,n,i,r){var o=e.slice(0,3)!=="nth",a=e.slice(-4)!=="last",s=t==="of-type";return i===1&&r===0?function(e){return!!e.parentNode}:function(t,n,l){var u,c,f,d,h,p,v=o!==a?"nextSibling":"previousSibling",m=t.parentNode,g=s&&t.nodeName.toLowerCase(),b=!l&&!s,y=false;if(m){if(o){while(v){d=t;while(d=d[v]){if(s?d.nodeName.toLowerCase()===g:d.nodeType===1){return false}}p=v=e==="only"&&!p&&"nextSibling"}return true}p=[a?m.firstChild:m.lastChild];if(a&&b){d=m;f=d[w]||(d[w]={});c=f[d.uniqueID]||(f[d.uniqueID]={});u=c[e]||[];h=u[0]===k&&u[1];y=h&&u[2];d=h&&m.childNodes[h];while(d=++h&&d&&d[v]||(y=h=0)||p.pop()){if(d.nodeType===1&&++y&&d===t){c[e]=[k,h,y];break}}}else{if(b){d=t;f=d[w]||(d[w]={});c=f[d.uniqueID]||(f[d.uniqueID]={});u=c[e]||[];h=u[0]===k&&u[1];y=h}if(y===false){while(d=++h&&d&&d[v]||(y=h=0)||p.pop()){if((s?d.nodeName.toLowerCase()===g:d.nodeType===1)&&++y){if(b){f=d[w]||(d[w]={});c=f[d.uniqueID]||(f[d.uniqueID]={});c[e]=[k,y]}if(d===t){break}}}}}y-=r;return y===i||y%i===0&&y/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);if(r[w]){return r(t)}if(r.length>1){n=[e,e,"",t];return i.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var i,o=r(e,t),a=o.length;while(a--){i=P(e,o[a]);e[i]=!(n[i]=o[a])}}):function(e){return r(e,0,n)}}return r}},pseudos:{not:se(function(e){var t=[],n=[],i=s(e.replace(z,"$1"));return i[w]?se(function(e,t,n,r){var o,a=i(e,null,r,[]),s=e.length;while(s--){if(o=a[s]){e[s]=!(t[s]=o)}}}):function(e,r,o){t[0]=e;i(t,null,o,n);t[0]=null;return!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){e=e.replace(Z,ee);return function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:se(function(e){if(!_.test(e||"")){oe.error("unsupported lang: "+e)}e=e.replace(Z,ee).toLowerCase();return function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang")){n=n.toLowerCase();return n===e||n.indexOf(e+"-")===0}}while((t=t.parentNode)&&t.nodeType===1);return false}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(false),disabled:he(true),checked:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&!!e.checked||t==="option"&&!!e.selected},selected:function(e){if(e.parentNode){e.parentNode.selectedIndex}return e.selected===true},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling){if(e.nodeType<6){return false}}return true},parent:function(e){return!i.pseudos["empty"](e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&e.type==="button"||t==="button"},text:function(e){var t;return e.nodeName.toLowerCase()==="input"&&e.type==="text"&&((t=e.getAttribute("type"))==null||t.toLowerCase()==="text")},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,n){return[n<0?n+t:n]}),even:pe(function(e,t){var n=0;for(;n<t;n+=2){e.push(n)}return e}),odd:pe(function(e,t){var n=1;for(;n<t;n+=2){e.push(n)}return e}),lt:pe(function(e,t,n){var i=n<0?n+t:n;for(;--i>=0;){e.push(i)}return e}),gt:pe(function(e,t,n){var i=n<0?n+t:n;for(;++i<t;){e.push(i)}return e})}};i.pseudos["nth"]=i.pseudos["eq"];for(t in{radio:true,checkbox:true,file:true,password:true,image:true}){i.pseudos[t]=fe(t)}for(t in{submit:true,reset:true}){i.pseudos[t]=de(t)}function me(){}me.prototype=i.filters=i.pseudos;i.setFilters=new me;a=oe.tokenize=function(e,t){var n,r,o,a,s,l,u,c=S[e+" "];if(c){return t?0:c.slice(0)}s=e;l=[];u=i.preFilter;while(s){if(!n||(r=q.exec(s))){if(r){s=s.slice(r[0].length)||s}l.push(o=[])}n=false;if(r=U.exec(s)){n=r.shift();o.push({value:n,type:r[0].replace(z," ")});s=s.slice(n.length)}for(a in i.filter){if((r=K[a].exec(s))&&(!u[a]||(r=u[a](r)))){n=r.shift();o.push({value:n,type:a,matches:r});s=s.slice(n.length)}}if(!n){break}}return t?s.length:s?oe.error(e):S(e,l).slice(0)};function ge(e){var t=0,n=e.length,i="";for(;t<n;t++){i+=e[t].value}return i}function be(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&o==="parentNode",s=x++;return t.first?function(t,n,r){while(t=t[i]){if(t.nodeType===1||a){return e(t,n,r)}}return false}:function(t,n,l){var u,c,f,d=[k,s];if(l){while(t=t[i]){if(t.nodeType===1||a){if(e(t,n,l)){return true}}}}else{while(t=t[i]){if(t.nodeType===1||a){f=t[w]||(t[w]={});c=f[t.uniqueID]||(f[t.uniqueID]={});if(r&&r===t.nodeName.toLowerCase()){t=t[i]||t}else if((u=c[o])&&u[0]===k&&u[1]===s){return d[2]=u[2]}else{c[o]=d;if(d[2]=e(t,n,l)){return true}}}}}return false}}function ye(e){return e.length>1?function(t,n,i){var r=e.length;while(r--){if(!e[r](t,n,i)){return false}}return true}:e[0]}function we(e,t,n){var i=0,r=t.length;for(;i<r;i++){oe(e,t[i],n)}return n}function Ce(e,t,n,i,r){var o,a=[],s=0,l=e.length,u=t!=null;for(;s<l;s++){if(o=e[s]){if(!n||n(o,i,r)){a.push(o);if(u){t.push(s)}}}}return a}function ke(e,t,n,i,r,o){if(i&&!i[w]){i=ke(i)}if(r&&!r[w]){r=ke(r,o)}return se(function(o,a,s,l){var u,c,f,d=[],h=[],p=a.length,v=o||we(t||"*",s.nodeType?[s]:s,[]),m=e&&(o||!t)?Ce(v,d,e,s,l):v,g=n?r||(o?e:p||i)?[]:a:m;if(n){n(m,g,s,l)}if(i){u=Ce(g,h);i(u,[],s,l);c=u.length;while(c--){if(f=u[c]){g[h[c]]=!(m[h[c]]=f)}}}if(o){if(r||e){if(r){u=[];c=g.length;while(c--){if(f=g[c]){u.push(m[c]=f)}}r(null,g=[],u,l)}c=g.length;while(c--){if((f=g[c])&&(u=r?P(o,f):d[c])>-1){o[u]=!(a[u]=f)}}}}else{g=Ce(g===a?g.splice(p,g.length):g);if(r){r(null,a,g,l)}else{$.apply(a,g)}}})}function xe(e){var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,c=be(function(e){return e===t},s,true),f=be(function(e){return P(t,e)>-1},s,true),d=[function(e,n,i){var r=!a&&(i||n!==u)||((t=n).nodeType?c(e,n,i):f(e,n,i));t=null;return r}];for(;l<o;l++){if(n=i.relative[e[l].type]){d=[be(ye(d),n)]}else{n=i.filter[e[l].type].apply(null,e[l].matches);if(n[w]){r=++l;for(;r<o;r++){if(i.relative[e[r].type]){break}}return ke(l>1&&ye(d),l>1&&ge(e.slice(0,l-1).concat({value:e[l-2].type===" "?"*":""})).replace(z,"$1"),n,l<r&&xe(e.slice(l,r)),r<o&&xe(e=e.slice(r)),r<o&&ge(e))}d.push(n)}}return ye(d)}function Te(e,t){var n=t.length>0,r=e.length>0,o=function(o,a,s,l,c){var f,p,m,g=0,b="0",y=o&&[],w=[],C=u,x=o||r&&i.find["TAG"]("*",c),T=k+=C==null?1:Math.random()||.1,S=x.length;if(c){u=a===h||a||c}for(;b!==S&&(f=x[b])!=null;b++){if(r&&f){p=0;if(!a&&f.ownerDocument!==h){d(f);s=!v}while(m=e[p++]){if(m(f,a||h,s)){l.push(f);break}}if(c){k=T}}if(n){if(f=!m&&f){g--}if(o){y.push(f)}}}g+=b;if(n&&b!==g){p=0;while(m=t[p++]){m(y,w,a,s)}if(o){if(g>0){while(b--){if(!(y[b]||w[b])){w[b]=D.call(l)}}}w=Ce(w)}$.apply(l,w);if(c&&!o&&w.length>0&&g+t.length>1){oe.uniqueSort(l)}}if(c){k=T;u=C}return y};return n?se(o):o}s=oe.compile=function(e,t){var n,i=[],r=[],o=E[e+" "];if(!o){if(!t){t=a(e)}n=t.length;while(n--){o=xe(t[n]);if(o[w]){i.push(o)}else{r.push(o)}}o=E(e,Te(r,i));o.selector=e}return o};l=oe.select=function(e,t,n,r){var o,l,u,c,f,d=typeof e==="function"&&e,h=!r&&a(e=d.selector||e);n=n||[];if(h.length===1){l=h[0]=h[0].slice(0);if(l.length>2&&(u=l[0]).type==="ID"&&t.nodeType===9&&v&&i.relative[l[1].type]){t=(i.find["ID"](u.matches[0].replace(Z,ee),t)||[])[0];if(!t){return n}else if(d){t=t.parentNode}e=e.slice(l.shift().value.length)}o=K["needsContext"].test(e)?0:l.length;while(o--){u=l[o];if(i.relative[c=u.type]){break}if(f=i.find[c]){if(r=f(u.matches[0].replace(Z,ee),J.test(l[0].type)&&ve(t.parentNode)||t)){l.splice(o,1);e=r.length&&ge(l);if(!e){$.apply(n,r);return n}break}}}}(d||s(e,h))(r,t,!v,n,!t||J.test(e)&&ve(t.parentNode)||t);return n};n.sortStable=w.split("").sort(N).join("")===w;n.detectDuplicates=!!f;d();n.sortDetached=le(function(e){return e.compareDocumentPosition(h.createElement("fieldset"))&1});if(!le(function(e){e.innerHTML="<a href='#'></a>";return e.firstChild.getAttribute("href")==="#"})){ue("type|href|height|width",function(e,t,n){if(!n){return e.getAttribute(t,t.toLowerCase()==="type"?1:2)}})}if(!n.attributes||!le(function(e){e.innerHTML="<input/>";e.firstChild.setAttribute("value","");return e.firstChild.getAttribute("value")===""})){ue("value",function(e,t,n){if(!n&&e.nodeName.toLowerCase()==="input"){return e.defaultValue}})}if(!le(function(e){return e.getAttribute("disabled")==null})){ue(H,function(e,t,n){var i;if(!n){return e[t]===true?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}})}return oe}(e);g.find=x;g.expr=x.selectors;g.expr[":"]=g.expr.pseudos;g.uniqueSort=g.unique=x.uniqueSort;g.text=x.getText;g.isXMLDoc=x.isXML;g.contains=x.contains;g.escapeSelector=x.escape;var T=function(e,t,n){var i=[],r=n!==undefined;while((e=e[t])&&e.nodeType!==9){if(e.nodeType===1){if(r&&g(e).is(n)){break}i.push(e)}}return i};var S=function(e,t){var n=[];for(;e;e=e.nextSibling){if(e.nodeType===1&&e!==t){n.push(e)}}return n};var E=g.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;var I=/^.[^:#\[\.,]*$/;function D(e,t,n){if(g.isFunction(t)){return g.grep(e,function(e,i){return!!t.call(e,i,e)!==n})}if(t.nodeType){return g.grep(e,function(e){return e===t!==n})}if(typeof t!=="string"){return g.grep(e,function(e){return l.call(t,e)>-1!==n})}if(I.test(t)){return g.filter(t,e,n)}t=g.filter(t,e);return g.grep(e,function(e){return l.call(t,e)>-1!==n&&e.nodeType===1})}g.filter=function(e,t,n){var i=t[0];if(n){e=":not("+e+")"}if(t.length===1&&i.nodeType===1){return g.find.matchesSelector(i,e)?[i]:[]}return g.find.matches(e,g.grep(t,function(e){return e.nodeType===1}))};g.fn.extend({find:function(e){var t,n,i=this.length,r=this;if(typeof e!=="string"){return this.pushStack(g(e).filter(function(){for(t=0;t<i;t++){if(g.contains(r[t],this)){return true}}}))}n=this.pushStack([]);for(t=0;t<i;t++){g.find(e,r[t],n)}return i>1?g.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],false))},not:function(e){return this.pushStack(D(this,e||[],true))},is:function(e){return!!D(this,typeof e==="string"&&E.test(e)?g(e):e||[],false).length}});var R,$=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,L=g.fn.init=function(e,t,n){var r,o;if(!e){return this}n=n||R;if(typeof e==="string"){if(e[0]==="<"&&e[e.length-1]===">"&&e.length>=3){r=[null,e,null]}else{r=$.exec(e)}if(r&&(r[1]||!t)){if(r[1]){t=t instanceof g?t[0]:t;g.merge(this,g.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:i,true));if(A.test(r[1])&&g.isPlainObject(t)){for(r in t){if(g.isFunction(this[r])){this[r](t[r])}else{this.attr(r,t[r])}}}return this}else{o=i.getElementById(r[2]);if(o){this[0]=o;this.length=1}return this}}else if(!t||t.jquery){return(t||n).find(e)}else{return this.constructor(t).find(e)}}else if(e.nodeType){this[0]=e;this.length=1;return this}else if(g.isFunction(e)){return n.ready!==undefined?n.ready(e):e(g)}return g.makeArray(e,this)};L.prototype=g.fn;R=g(i);var P=/^(?:parents|prev(?:Until|All))/,H={children:true,contents:true,next:true,prev:true};g.fn.extend({has:function(e){var t=g(e,this),n=t.length;return this.filter(function(){var e=0;for(;e<n;e++){if(g.contains(this,t[e])){return true}}})},closest:function(e,t){var n,i=0,r=this.length,o=[],a=typeof e!=="string"&&g(e);if(!E.test(e)){for(;i<r;i++){for(n=this[i];n&&n!==t;n=n.parentNode){if(n.nodeType<11&&(a?a.index(n)>-1:n.nodeType===1&&g.find.matchesSelector(n,e))){o.push(n);break}}}}return this.pushStack(o.length>1?g.uniqueSort(o):o)},index:function(e){if(!e){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1}if(typeof e==="string"){return l.call(g(e),this[0])}return l.call(this,e.jquery?e[0]:e)},add:function(e,t){return this.pushStack(g.uniqueSort(g.merge(this.get(),g(e,t))))},addBack:function(e){return this.add(e==null?this.prevObject:this.prevObject.filter(e))}});function F(e,t){while((e=e[t])&&e.nodeType!==1){}return e}g.each({parent:function(e){var t=e.parentNode;return t&&t.nodeType!==11?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return F(e,"nextSibling")},prev:function(e){return F(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){if(N(e,"iframe")){return e.contentDocument}if(N(e,"template")){e=e.content||e}return g.merge([],e.childNodes)}},function(e,t){g.fn[e]=function(n,i){var r=g.map(this,t,n);if(e.slice(-5)!=="Until"){i=n}if(i&&typeof i==="string"){r=g.filter(i,r)}if(this.length>1){if(!H[e]){g.uniqueSort(r)}if(P.test(e)){r.reverse()}}return this.pushStack(r)}});var j=/[^\x20\t\r\n\f]+/g;function O(e){var t={};g.each(e.match(j)||[],function(e,n){t[n]=true});return t}g.Callbacks=function(e){e=typeof e==="string"?O(e):g.extend({},e);var t,n,i,r,o=[],a=[],s=-1,l=function(){r=r||e.once;i=t=true;for(;a.length;s=-1){n=a.shift();while(++s<o.length){if(o[s].apply(n[0],n[1])===false&&e.stopOnFalse){s=o.length;n=false}}}if(!e.memory){n=false}t=false;if(r){if(n){o=[]}else{o=""}}},u={add:function(){if(o){if(n&&!t){s=o.length-1;a.push(n)}(function t(n){g.each(n,function(n,i){if(g.isFunction(i)){if(!e.unique||!u.has(i)){o.push(i)}}else if(i&&i.length&&g.type(i)!=="string"){t(i)}})})(arguments);if(n&&!t){l()}}return this},remove:function(){g.each(arguments,function(e,t){var n;while((n=g.inArray(t,o,n))>-1){o.splice(n,1);if(n<=s){s--}}});return this},has:function(e){return e?g.inArray(e,o)>-1:o.length>0},empty:function(){if(o){o=[]}return this},disable:function(){r=a=[];o=n="";return this},disabled:function(){return!o},lock:function(){r=a=[];if(!n&&!t){o=n=""}return this},locked:function(){return!!r},fireWith:function(e,n){if(!r){n=n||[];n=[e,n.slice?n.slice():n];a.push(n);if(!t){l()}}return this},fire:function(){u.fireWith(this,arguments);return this},fired:function(){return!!i}};return u};function M(e){return e}function B(e){throw e}function z(e,t,n,i){var r;try{if(e&&g.isFunction(r=e.promise)){r.call(e).done(t).fail(n)}else if(e&&g.isFunction(r=e.then)){r.call(e,t,n)}else{t.apply(undefined,[e].slice(i))}}catch(e){n.apply(undefined,[e])}}g.extend({Deferred:function(t){var n=[["notify","progress",g.Callbacks("memory"),g.Callbacks("memory"),2],["resolve","done",g.Callbacks("once memory"),g.Callbacks("once memory"),0,"resolved"],["reject","fail",g.Callbacks("once memory"),g.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){o.done(arguments).fail(arguments);return this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return g.Deferred(function(t){g.each(n,function(n,i){var r=g.isFunction(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);if(e&&g.isFunction(e.promise)){e.promise().progress(t.notify).done(t.resolve).fail(t.reject)}else{t[i[0]+"With"](this,r?[e]:arguments)}})});e=null}).promise()},then:function(t,i,r){var o=0;function a(t,n,i,r){return function(){var s=this,l=arguments,u=function(){var e,u;if(t<o){return}e=i.apply(s,l);if(e===n.promise()){throw new TypeError("Thenable self-resolution")}u=e&&(typeof e==="object"||typeof e==="function")&&e.then;if(g.isFunction(u)){if(r){u.call(e,a(o,n,M,r),a(o,n,B,r))}else{o++;u.call(e,a(o,n,M,r),a(o,n,B,r),a(o,n,M,n.notifyWith))}}else{if(i!==M){s=undefined;l=[e]}(r||n.resolveWith)(s,l)}},c=r?u:function(){try{u()}catch(e){if(g.Deferred.exceptionHook){g.Deferred.exceptionHook(e,c.stackTrace)}if(t+1>=o){if(i!==B){s=undefined;l=[e]}n.rejectWith(s,l)}}};if(t){c()}else{if(g.Deferred.getStackHook){c.stackTrace=g.Deferred.getStackHook()}e.setTimeout(c)}}}return g.Deferred(function(e){n[0][3].add(a(0,e,g.isFunction(r)?r:M,e.notifyWith));n[1][3].add(a(0,e,g.isFunction(t)?t:M));n[2][3].add(a(0,e,g.isFunction(i)?i:B))}).promise()},promise:function(e){return e!=null?g.extend(e,r):r}},o={};g.each(n,function(e,t){var a=t[2],s=t[5];r[t[1]]=a.add;if(s){a.add(function(){i=s},n[3-e][2].disable,n[0][2].lock)}a.add(t[3].fire);o[t[0]]=function(){o[t[0]+"With"](this===o?undefined:this,arguments);return this};o[t[0]+"With"]=a.fireWith});r.promise(o);if(t){t.call(o,o)}return o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=o.call(arguments),a=g.Deferred(),s=function(e){return function(n){i[e]=this;r[e]=arguments.length>1?o.call(arguments):n;if(!--t){a.resolveWith(i,r)}}};if(t<=1){z(e,a.done(s(n)).resolve,a.reject,!t);if(a.state()==="pending"||g.isFunction(r[n]&&r[n].then)){return a.then()}}while(n--){z(r[n],s(n),a.reject)}return a.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;g.Deferred.exceptionHook=function(t,n){if(e.console&&e.console.warn&&t&&q.test(t.name)){e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)}};g.readyException=function(t){e.setTimeout(function(){throw t})};var U=g.Deferred();g.fn.ready=function(e){U.then(e).catch(function(e){g.readyException(e)});return this};g.extend({isReady:false,readyWait:1,ready:function(e){if(e===true?--g.readyWait:g.isReady){return}g.isReady=true;if(e!==true&&--g.readyWait>0){return}U.resolveWith(i,[g])}});g.ready.then=U.then;function W(){i.removeEventListener("DOMContentLoaded",W);e.removeEventListener("load",W);g.ready()}if(i.readyState==="complete"||i.readyState!=="loading"&&!i.documentElement.doScroll){e.setTimeout(g.ready)}else{i.addEventListener("DOMContentLoaded",W);e.addEventListener("load",W)}var V=function(e,t,n,i,r,o,a){var s=0,l=e.length,u=n==null;if(g.type(n)==="object"){r=true;for(s in n){V(e,t,s,n[s],true,o,a)}}else if(i!==undefined){r=true;if(!g.isFunction(i)){a=true}if(u){if(a){t.call(e,i);t=null}else{u=t;t=function(e,t,n){return u.call(g(e),n)}}}if(t){for(;s<l;s++){t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)))}}}if(r){return e}if(u){return t.call(e)}return l?t(e[0],n):o};var _=function(e){return e.nodeType===1||e.nodeType===9||!+e.nodeType};function K(){this.expando=g.expando+K.uid++}K.uid=1;K.prototype={cache:function(e){var t=e[this.expando];if(!t){t={};if(_(e)){if(e.nodeType){e[this.expando]=t}else{Object.defineProperty(e,this.expando,{value:t,configurable:true})}}}return t},set:function(e,t,n){var i,r=this.cache(e);if(typeof t==="string"){r[g.camelCase(t)]=n}else{for(i in t){r[g.camelCase(i)]=t[i]}}return r},get:function(e,t){return t===undefined?this.cache(e):e[this.expando]&&e[this.expando][g.camelCase(t)]},access:function(e,t,n){if(t===undefined||t&&typeof t==="string"&&n===undefined){return this.get(e,t)}this.set(e,t,n);return n!==undefined?n:t},remove:function(e,t){var n,i=e[this.expando];if(i===undefined){return}if(t!==undefined){if(Array.isArray(t)){t=t.map(g.camelCase)}else{t=g.camelCase(t);t=t in i?[t]:t.match(j)||[]}n=t.length;while(n--){delete i[t[n]]}}if(t===undefined||g.isEmptyObject(i)){if(e.nodeType){e[this.expando]=undefined}else{delete e[this.expando]}}},hasData:function(e){var t=e[this.expando];return t!==undefined&&!g.isEmptyObject(t)}};var G=new K;var Q=new K;var X=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Y=/[A-Z]/g;function J(e){if(e==="true"){return true}if(e==="false"){return false}if(e==="null"){return null}if(e===+e+""){return+e}if(X.test(e)){return JSON.parse(e)}return e}function Z(e,t,n){var i;if(n===undefined&&e.nodeType===1){i="data-"+t.replace(Y,"-$&").toLowerCase();n=e.getAttribute(i);if(typeof n==="string"){try{n=J(n)}catch(e){}Q.set(e,t,n)}else{n=undefined}}return n}g.extend({hasData:function(e){return Q.hasData(e)||G.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return G.access(e,t,n)},_removeData:function(e,t){G.remove(e,t)}});g.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(e===undefined){if(this.length){r=Q.get(o);if(o.nodeType===1&&!G.get(o,"hasDataAttrs")){n=a.length;while(n--){if(a[n]){i=a[n].name;if(i.indexOf("data-")===0){i=g.camelCase(i.slice(5));Z(o,i,r[i])}}}G.set(o,"hasDataAttrs",true)}}return r}if(typeof e==="object"){return this.each(function(){Q.set(this,e)})}return V(this,function(t){var n;if(o&&t===undefined){n=Q.get(o,e);if(n!==undefined){return n}n=Z(o,e);if(n!==undefined){return n}return}this.each(function(){Q.set(this,e,t)})},null,t,arguments.length>1,null,true)},removeData:function(e){return this.each(function(){Q.remove(this,e)})}});g.extend({queue:function(e,t,n){var i;if(e){t=(t||"fx")+"queue";i=G.get(e,t);if(n){if(!i||Array.isArray(n)){i=G.access(e,t,g.makeArray(n))}else{i.push(n)}}return i||[]}},dequeue:function(e,t){t=t||"fx";var n=g.queue(e,t),i=n.length,r=n.shift(),o=g._queueHooks(e,t),a=function(){g.dequeue(e,t)};if(r==="inprogress"){r=n.shift();i--}if(r){if(t==="fx"){n.unshift("inprogress")}delete o.stop;r.call(e,a,o)}if(!i&&o){o.empty.fire()}},_queueHooks:function(e,t){var n=t+"queueHooks";return G.get(e,n)||G.access(e,n,{empty:g.Callbacks("once memory").add(function(){G.remove(e,[t+"queue",n])})})}});g.fn.extend({queue:function(e,t){var n=2;if(typeof e!=="string"){t=e;e="fx";n--}if(arguments.length<n){return g.queue(this[0],e)}return t===undefined?this:this.each(function(){var n=g.queue(this,e,t);g._queueHooks(this,e);if(e==="fx"&&n[0]!=="inprogress"){g.dequeue(this,e)}})},dequeue:function(e){return this.each(function(){g.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=g.Deferred(),o=this,a=this.length,s=function(){if(!--i){r.resolveWith(o,[o])}};if(typeof e!=="string"){t=e;e=undefined}e=e||"fx";while(a--){n=G.get(o[a],e+"queueHooks");if(n&&n.empty){i++;n.empty.add(s)}}s();return r.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i");var ne=["Top","Right","Bottom","Left"];var ie=function(e,t){e=t||e;return e.style.display==="none"||e.style.display===""&&g.contains(e.ownerDocument,e)&&g.css(e,"display")==="none"};var re=function(e,t,n,i){var r,o,a={};for(o in t){a[o]=e.style[o];e.style[o]=t[o]}r=n.apply(e,i||[]);for(o in t){e.style[o]=a[o]}return r};function oe(e,t,n,i){var r,o=1,a=20,s=i?function(){return i.cur()}:function(){return g.css(e,t,"")},l=s(),u=n&&n[3]||(g.cssNumber[t]?"":"px"),c=(g.cssNumber[t]||u!=="px"&&+l)&&te.exec(g.css(e,t));if(c&&c[3]!==u){u=u||c[3];n=n||[];c=+l||1;do{o=o||".5";c=c/o;g.style(e,t,c+u)}while(o!==(o=s()/l)&&o!==1&&--a)}if(n){c=+c||+l||0;r=n[1]?c+(n[1]+1)*n[2]:+n[2];if(i){i.unit=u;i.start=c;i.end=r}}return r}var ae={};function se(e){var t,n=e.ownerDocument,i=e.nodeName,r=ae[i];if(r){return r}t=n.body.appendChild(n.createElement(i));r=g.css(t,"display");t.parentNode.removeChild(t);if(r==="none"){r="block"}ae[i]=r;return r}function le(e,t){var n,i,r=[],o=0,a=e.length;for(;o<a;o++){i=e[o];if(!i.style){continue}n=i.style.display;if(t){if(n==="none"){r[o]=G.get(i,"display")||null;if(!r[o]){i.style.display=""}}if(i.style.display===""&&ie(i)){r[o]=se(i)}}else{if(n!=="none"){r[o]="none";G.set(i,"display",n)}}}for(o=0;o<a;o++){if(r[o]!=null){e[o].style.display=r[o]}}return e}g.fn.extend({show:function(){return le(this,true)},hide:function(){return le(this)},toggle:function(e){if(typeof e==="boolean"){return e?this.show():this.hide()}return this.each(function(){if(ie(this)){g(this).show()}else{g(this).hide()}})}});var ue=/^(?:checkbox|radio)$/i;var ce=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i;var fe=/^$|\/(?:java|ecma)script/i;var de={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};de.optgroup=de.option;de.tbody=de.tfoot=de.colgroup=de.caption=de.thead;de.th=de.td;function he(e,t){var n;if(typeof e.getElementsByTagName!=="undefined"){n=e.getElementsByTagName(t||"*")}else if(typeof e.querySelectorAll!=="undefined"){n=e.querySelectorAll(t||"*")}else{n=[]}if(t===undefined||t&&N(e,t)){return g.merge([e],n)}return n}function pe(e,t){var n=0,i=e.length;for(;n<i;n++){G.set(e[n],"globalEval",!t||G.get(t[n],"globalEval"))}}var ve=/<|&#?\w+;/;function me(e,t,n,i,r){var o,a,s,l,u,c,f=t.createDocumentFragment(),d=[],h=0,p=e.length;for(;h<p;h++){o=e[h];if(o||o===0){if(g.type(o)==="object"){g.merge(d,o.nodeType?[o]:o)}else if(!ve.test(o)){d.push(t.createTextNode(o))}else{a=a||f.appendChild(t.createElement("div"));s=(ce.exec(o)||["",""])[1].toLowerCase();l=de[s]||de._default;a.innerHTML=l[1]+g.htmlPrefilter(o)+l[2];c=l[0];while(c--){a=a.lastChild}g.merge(d,a.childNodes);a=f.firstChild;a.textContent=""}}}f.textContent="";h=0;while(o=d[h++]){if(i&&g.inArray(o,i)>-1){if(r){r.push(o)}continue}u=g.contains(o.ownerDocument,o);a=he(f.appendChild(o),"script");if(u){pe(a)}if(n){c=0;while(o=a[c++]){if(fe.test(o.type||"")){n.push(o)}}}}return f}(function(){var e=i.createDocumentFragment(),t=e.appendChild(i.createElement("div")),n=i.createElement("input");n.setAttribute("type","radio");n.setAttribute("checked","checked");n.setAttribute("name","t");t.appendChild(n);p.checkClone=t.cloneNode(true).cloneNode(true).lastChild.checked;t.innerHTML="<textarea>x</textarea>";p.noCloneChecked=!!t.cloneNode(true).lastChild.defaultValue})();var ge=i.documentElement;var be=/^key/,ye=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,we=/^([^.]*)(?:\.(.+)|)/;function Ce(){return true}function ke(){return false}function xe(){try{return i.activeElement}catch(e){}}function Te(e,t,n,i,r,o){var a,s;if(typeof t==="object"){if(typeof n!=="string"){i=i||n;n=undefined}for(s in t){Te(e,s,n,i,t[s],o)}return e}if(i==null&&r==null){r=n;i=n=undefined}else if(r==null){if(typeof n==="string"){r=i;i=undefined}else{r=i;i=n;n=undefined}}if(r===false){r=ke}else if(!r){return e}if(o===1){a=r;r=function(e){g().off(e);return a.apply(this,arguments)};r.guid=a.guid||(a.guid=g.guid++)}return e.each(function(){g.event.add(this,t,r,i,n)})}g.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,u,c,f,d,h,p,v,m=G.get(e);if(!m){return}if(n.handler){o=n;n=o.handler;r=o.selector}if(r){g.find.matchesSelector(ge,r)}if(!n.guid){n.guid=g.guid++}if(!(l=m.events)){l=m.events={}}if(!(a=m.handle)){a=m.handle=function(t){return typeof g!=="undefined"&&g.event.triggered!==t.type?g.event.dispatch.apply(e,arguments):undefined}}t=(t||"").match(j)||[""];u=t.length;while(u--){s=we.exec(t[u])||[];h=v=s[1];p=(s[2]||"").split(".").sort();if(!h){continue}f=g.event.special[h]||{};h=(r?f.delegateType:f.bindType)||h;f=g.event.special[h]||{};c=g.extend({type:h,origType:v,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&g.expr.match.needsContext.test(r),namespace:p.join(".")},o);if(!(d=l[h])){d=l[h]=[];d.delegateCount=0;if(!f.setup||f.setup.call(e,i,p,a)===false){if(e.addEventListener){e.addEventListener(h,a)}}}if(f.add){f.add.call(e,c);if(!c.handler.guid){c.handler.guid=n.guid}}if(r){d.splice(d.delegateCount++,0,c)}else{d.push(c)}g.event.global[h]=true}},remove:function(e,t,n,i,r){var o,a,s,l,u,c,f,d,h,p,v,m=G.hasData(e)&&G.get(e);if(!m||!(l=m.events)){return}t=(t||"").match(j)||[""];u=t.length;while(u--){s=we.exec(t[u])||[];h=v=s[1];p=(s[2]||"").split(".").sort();if(!h){for(h in l){g.event.remove(e,h+t[u],n,i,true)}continue}f=g.event.special[h]||{};h=(i?f.delegateType:f.bindType)||h;d=l[h]||[];s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)");a=o=d.length;while(o--){c=d[o];if((r||v===c.origType)&&(!n||n.guid===c.guid)&&(!s||s.test(c.namespace))&&(!i||i===c.selector||i==="**"&&c.selector)){d.splice(o,1);if(c.selector){d.delegateCount--}if(f.remove){f.remove.call(e,c)}}}if(a&&!d.length){if(!f.teardown||f.teardown.call(e,p,m.handle)===false){g.removeEvent(e,h,m.handle)}delete l[h]}}if(g.isEmptyObject(l)){G.remove(e,"handle events")}},dispatch:function(e){var t=g.event.fix(e);var n,i,r,o,a,s,l=new Array(arguments.length),u=(G.get(this,"events")||{})[t.type]||[],c=g.event.special[t.type]||{};l[0]=t;for(n=1;n<arguments.length;n++){l[n]=arguments[n]}t.delegateTarget=this;if(c.preDispatch&&c.preDispatch.call(this,t)===false){return}s=g.event.handlers.call(this,t,u);n=0;while((o=s[n++])&&!t.isPropagationStopped()){t.currentTarget=o.elem;i=0;while((a=o.handlers[i++])&&!t.isImmediatePropagationStopped()){if(!t.rnamespace||t.rnamespace.test(a.namespace)){t.handleObj=a;t.data=a.data;r=((g.event.special[a.origType]||{}).handle||a.handler).apply(o.elem,l);if(r!==undefined){if((t.result=r)===false){t.preventDefault();t.stopPropagation()}}}}}if(c.postDispatch){c.postDispatch.call(this,t)}return t.result},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!(e.type==="click"&&e.button>=1)){for(;u!==this;u=u.parentNode||this){if(u.nodeType===1&&!(e.type==="click"&&u.disabled===true)){o=[];a={};for(n=0;n<l;n++){i=t[n];r=i.selector+" ";if(a[r]===undefined){a[r]=i.needsContext?g(r,this).index(u)>-1:g.find(r,this,null,[u]).length}if(a[r]){o.push(i)}}if(o.length){s.push({elem:u,handlers:o})}}}}u=this;if(l<t.length){s.push({elem:u,handlers:t.slice(l)})}return s},addProp:function(e,t){Object.defineProperty(g.Event.prototype,e,{enumerable:true,configurable:true,get:g.isFunction(t)?function(){if(this.originalEvent){return t(this.originalEvent)}}:function(){if(this.originalEvent){return this.originalEvent[e]}},set:function(t){Object.defineProperty(this,e,{enumerable:true,configurable:true,writable:true,value:t})}})},fix:function(e){return e[g.expando]?e:new g.Event(e)},special:{load:{noBubble:true},focus:{trigger:function(){if(this!==xe()&&this.focus){this.focus();return false}},delegateType:"focusin"},blur:{trigger:function(){if(this===xe()&&this.blur){this.blur();return false}},delegateType:"focusout"},click:{trigger:function(){if(this.type==="checkbox"&&this.click&&N(this,"input")){this.click();return false}},_default:function(e){return N(e.target,"a")}},beforeunload:{postDispatch:function(e){if(e.result!==undefined&&e.originalEvent){e.originalEvent.returnValue=e.result}}}}};g.removeEvent=function(e,t,n){if(e.removeEventListener){e.removeEventListener(t,n)}};g.Event=function(e,t){if(!(this instanceof g.Event)){return new g.Event(e,t)}if(e&&e.type){this.originalEvent=e;this.type=e.type;this.isDefaultPrevented=e.defaultPrevented||e.defaultPrevented===undefined&&e.returnValue===false?Ce:ke;this.target=e.target&&e.target.nodeType===3?e.target.parentNode:e.target;this.currentTarget=e.currentTarget;this.relatedTarget=e.relatedTarget}else{this.type=e}if(t){g.extend(this,t)}this.timeStamp=e&&e.timeStamp||g.now();this[g.expando]=true};g.Event.prototype={constructor:g.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:false,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce;if(e&&!this.isSimulated){e.preventDefault()}},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce;if(e&&!this.isSimulated){e.stopPropagation()}},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce;if(e&&!this.isSimulated){e.stopImmediatePropagation()}this.stopPropagation()}};g.each({altKey:true,bubbles:true,cancelable:true,changedTouches:true,ctrlKey:true,detail:true,eventPhase:true,metaKey:true,pageX:true,pageY:true,shiftKey:true,view:true,char:true,charCode:true,key:true,keyCode:true,button:true,buttons:true,clientX:true,clientY:true,offsetX:true,offsetY:true,pointerId:true,pointerType:true,screenX:true,screenY:true,targetTouches:true,toElement:true,touches:true,which:function(e){var t=e.button;if(e.which==null&&be.test(e.type)){return e.charCode!=null?e.charCode:e.keyCode}if(!e.which&&t!==undefined&&ye.test(e.type)){if(t&1){return 1}if(t&2){return 3}if(t&4){return 2}return 0}return e.which}},g.event.addProp);g.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){g.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;if(!r||r!==i&&!g.contains(i,r)){e.type=o.origType;n=o.handler.apply(this,arguments);e.type=t}return n}}});g.fn.extend({on:function(e,t,n,i){return Te(this,e,t,n,i)},one:function(e,t,n,i){return Te(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj){i=e.handleObj;g(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler);return this}if(typeof e==="object"){for(r in e){this.off(r,t,e[r])}return this}if(t===false||typeof t==="function"){n=t;t=undefined}if(n===false){n=ke}return this.each(function(){g.event.remove(this,e,n,t)})}});var Se=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ee=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,Ae=/^true\/(.*)/,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function De(e,t){if(N(e,"table")&&N(t.nodeType!==11?t:t.firstChild,"tr")){return g(">tbody",e)[0]||e}return e}function Re(e){e.type=(e.getAttribute("type")!==null)+"/"+e.type;return e}function $e(e){var t=Ae.exec(e.type);if(t){e.type=t[1]}else{e.removeAttribute("type")}return e}function Le(e,t){var n,i,r,o,a,s,l,u;if(t.nodeType!==1){return}if(G.hasData(e)){o=G.access(e);a=G.set(t,o);u=o.events;if(u){delete a.handle;a.events={};for(r in u){for(n=0,i=u[r].length;n<i;n++){g.event.add(t,r,u[r][n])}}}}if(Q.hasData(e)){s=Q.access(e);l=g.extend({},s);Q.set(t,l)}}function Pe(e,t){var n=t.nodeName.toLowerCase();if(n==="input"&&ue.test(e.type)){t.checked=e.checked}else if(n==="input"||n==="textarea"){t.defaultValue=e.defaultValue}}function He(e,t,n,i){t=a.apply([],t);var r,o,s,l,u,c,f=0,d=e.length,h=d-1,m=t[0],b=g.isFunction(m);if(b||d>1&&typeof m==="string"&&!p.checkClone&&Ne.test(m)){return e.each(function(r){var o=e.eq(r);if(b){t[0]=m.call(this,r,o.html())}He(o,t,n,i)})}if(d){r=me(t,e[0].ownerDocument,false,e,i);o=r.firstChild;if(r.childNodes.length===1){r=o}if(o||i){s=g.map(he(r,"script"),Re);l=s.length;for(;f<d;f++){u=r;if(f!==h){u=g.clone(u,true,true);if(l){g.merge(s,he(u,"script"))}}n.call(e[f],u,f)}if(l){c=s[s.length-1].ownerDocument;g.map(s,$e);for(f=0;f<l;f++){u=s[f];if(fe.test(u.type||"")&&!G.access(u,"globalEval")&&g.contains(c,u)){if(u.src){if(g._evalUrl){g._evalUrl(u.src)}}else{v(u.textContent.replace(Ie,""),c)}}}}}}return e}function Fe(e,t,n){var i,r=t?g.filter(t,e):e,o=0;for(;(i=r[o])!=null;o++){if(!n&&i.nodeType===1){g.cleanData(he(i))}if(i.parentNode){if(n&&g.contains(i.ownerDocument,i)){pe(he(i,"script"))}i.parentNode.removeChild(i)}}return e}g.extend({htmlPrefilter:function(e){return e.replace(Se,"<$1></$2>")},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(true),l=g.contains(e.ownerDocument,e);if(!p.noCloneChecked&&(e.nodeType===1||e.nodeType===11)&&!g.isXMLDoc(e)){a=he(s);o=he(e);for(i=0,r=o.length;i<r;i++){Pe(o[i],a[i])}}if(t){if(n){o=o||he(e);a=a||he(s);for(i=0,r=o.length;i<r;i++){Le(o[i],a[i])}}else{Le(e,s)}}a=he(s,"script");if(a.length>0){pe(a,!l&&he(e,"script"))}return s},cleanData:function(e){var t,n,i,r=g.event.special,o=0;for(;(n=e[o])!==undefined;o++){if(_(n)){if(t=n[G.expando]){if(t.events){for(i in t.events){if(r[i]){g.event.remove(n,i)}else{g.removeEvent(n,i,t.handle)}}}n[G.expando]=undefined}if(n[Q.expando]){n[Q.expando]=undefined}}}}});g.fn.extend({detach:function(e){return Fe(this,e,true)},remove:function(e){return Fe(this,e)},text:function(e){return V(this,function(e){return e===undefined?g.text(this):this.empty().each(function(){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){this.textContent=e}})},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=De(this,e);t.appendChild(e)}})},prepend:function(){return He(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=De(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return He(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this)}})},after:function(){return He(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this.nextSibling)}})},empty:function(){var e,t=0;for(;(e=this[t])!=null;t++){if(e.nodeType===1){g.cleanData(he(e,false));e.textContent=""}}return this},clone:function(e,t){e=e==null?false:e;t=t==null?e:t;return this.map(function(){return g.clone(this,e,t)})},html:function(e){return V(this,function(e){var t=this[0]||{},n=0,i=this.length;if(e===undefined&&t.nodeType===1){return t.innerHTML}if(typeof e==="string"&&!Ee.test(e)&&!de[(ce.exec(e)||["",""])[1].toLowerCase()]){e=g.htmlPrefilter(e);try{for(;n<i;n++){t=this[n]||{};if(t.nodeType===1){g.cleanData(he(t,false));t.innerHTML=e}}t=0}catch(e){}}if(t){this.empty().append(e)}},null,e,arguments.length)},replaceWith:function(){var e=[];return He(this,arguments,function(t){var n=this.parentNode;if(g.inArray(this,e)<0){g.cleanData(he(this));if(n){n.replaceChild(t,this)}}},e)}});g.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){g.fn[e]=function(e){var n,i=[],r=g(e),o=r.length-1,a=0;for(;a<=o;a++){n=a===o?this:this.clone(true);g(r[a])[t](n);s.apply(i,n.get())}return this.pushStack(i)}});var je=/^margin/;var Oe=new RegExp("^("+ee+")(?!px)[a-z%]+$","i");var Me=function(t){var n=t.ownerDocument.defaultView;if(!n||!n.opener){n=e}return n.getComputedStyle(t)};(function(){function t(){if(!l){return}l.style.cssText="box-sizing:border-box;"+"position:relative;display:block;"+"margin:auto;border:1px;padding:1px;"+"top:1%;width:50%";l.innerHTML="";ge.appendChild(s);var t=e.getComputedStyle(l);n=t.top!=="1%";a=t.marginLeft==="2px";r=t.width==="4px";l.style.marginRight="50%";o=t.marginRight==="4px";ge.removeChild(s);l=null}var n,r,o,a,s=i.createElement("div"),l=i.createElement("div");if(!l.style){return}l.style.backgroundClip="content-box";l.cloneNode(true).style.backgroundClip="";p.clearCloneStyle=l.style.backgroundClip==="content-box";s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;"+"padding:0;margin-top:1px;position:absolute";s.appendChild(l);g.extend(p,{pixelPosition:function(){t();return n},boxSizingReliable:function(){t();return r},pixelMarginRight:function(){t();return o},reliableMarginLeft:function(){t();return a}})})();function Be(e,t,n){var i,r,o,a,s=e.style;n=n||Me(e);if(n){a=n.getPropertyValue(t)||n[t];if(a===""&&!g.contains(e.ownerDocument,e)){a=g.style(e,t)}if(!p.pixelMarginRight()&&Oe.test(a)&&je.test(t)){i=s.width;r=s.minWidth;o=s.maxWidth;s.minWidth=s.maxWidth=s.width=a;a=n.width;s.width=i;s.minWidth=r;s.maxWidth=o}}return a!==undefined?a+"":a}function ze(e,t){return{get:function(){if(e()){delete this.get;return}return(this.get=t).apply(this,arguments)}}}var qe=/^(none|table(?!-c[ea]).+)/,Ue=/^--/,We={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"},_e=["Webkit","Moz","ms"],Ke=i.createElement("div").style;function Ge(e){if(e in Ke){return e}var t=e[0].toUpperCase()+e.slice(1),n=_e.length;while(n--){e=_e[n]+t;if(e in Ke){return e}}}function Qe(e){var t=g.cssProps[e];if(!t){t=g.cssProps[e]=Ge(e)||e}return t}function Xe(e,t,n){var i=te.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Ye(e,t,n,i,r){var o,a=0;if(n===(i?"border":"content")){o=4}else{o=t==="width"?1:0}for(;o<4;o+=2){if(n==="margin"){a+=g.css(e,n+ne[o],true,r)}if(i){if(n==="content"){a-=g.css(e,"padding"+ne[o],true,r)}if(n!=="margin"){a-=g.css(e,"border"+ne[o]+"Width",true,r)}}else{a+=g.css(e,"padding"+ne[o],true,r);if(n!=="padding"){a+=g.css(e,"border"+ne[o]+"Width",true,r)}}}return a}function Je(e,t,n){var i,r=Me(e),o=Be(e,t,r),a=g.css(e,"boxSizing",false,r)==="border-box";if(Oe.test(o)){return o}i=a&&(p.boxSizingReliable()||o===e.style[t]);if(o==="auto"){o=e["offset"+t[0].toUpperCase()+t.slice(1)]}o=parseFloat(o)||0;return o+Ye(e,t,n||(a?"border":"content"),i,r)+"px"}g.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Be(e,"opacity");return n===""?"1":n}}}},cssNumber:{animationIterationCount:true,columnCount:true,fillOpacity:true,flexGrow:true,flexShrink:true,fontWeight:true,lineHeight:true,opacity:true,order:true,orphans:true,widows:true,zIndex:true,zoom:true},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(!e||e.nodeType===3||e.nodeType===8||!e.style){return}var r,o,a,s=g.camelCase(t),l=Ue.test(t),u=e.style;if(!l){t=Qe(s)}a=g.cssHooks[t]||g.cssHooks[s];if(n!==undefined){o=typeof n;if(o==="string"&&(r=te.exec(n))&&r[1]){n=oe(e,t,r);o="number"}if(n==null||n!==n){return}if(o==="number"){n+=r&&r[3]||(g.cssNumber[s]?"":"px")}if(!p.clearCloneStyle&&n===""&&t.indexOf("background")===0){u[t]="inherit"}if(!a||!("set"in a)||(n=a.set(e,n,i))!==undefined){if(l){u.setProperty(t,n)}else{u[t]=n}}}else{if(a&&"get"in a&&(r=a.get(e,false,i))!==undefined){return r}return u[t]}},css:function(e,t,n,i){var r,o,a,s=g.camelCase(t),l=Ue.test(t);if(!l){t=Qe(s)}a=g.cssHooks[t]||g.cssHooks[s];if(a&&"get"in a){r=a.get(e,true,n)}if(r===undefined){r=Be(e,t,i)}if(r==="normal"&&t in Ve){r=Ve[t]}if(n===""||n){o=parseFloat(r);return n===true||isFinite(o)?o||0:r}return r}});g.each(["height","width"],function(e,t){g.cssHooks[t]={get:function(e,n,i){if(n){return qe.test(g.css(e,"display"))&&(!e.getClientRects().length||!e.getBoundingClientRect().width)?re(e,We,function(){return Je(e,t,i)}):Je(e,t,i)}},set:function(e,n,i){var r,o=i&&Me(e),a=i&&Ye(e,t,i,g.css(e,"boxSizing",false,o)==="border-box",o);if(a&&(r=te.exec(n))&&(r[3]||"px")!=="px"){e.style[t]=n;n=g.css(e,t)}return Xe(e,n,a)}}});g.cssHooks.marginLeft=ze(p.reliableMarginLeft,function(e,t){if(t){return(parseFloat(Be(e,"marginLeft"))||e.getBoundingClientRect().left-re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}});g.each({margin:"",padding:"",border:"Width"},function(e,t){g.cssHooks[e+t]={expand:function(n){var i=0,r={},o=typeof n==="string"?n.split(" "):[n];for(;i<4;i++){r[e+ne[i]+t]=o[i]||o[i-2]||o[0]}return r}};if(!je.test(e)){g.cssHooks[e+t].set=Xe}});g.fn.extend({css:function(e,t){return V(this,function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){i=Me(e);r=t.length;for(;a<r;a++){o[t[a]]=g.css(e,t[a],false,i)}return o}return n!==undefined?g.style(e,t,n):g.css(e,t)},e,t,arguments.length>1)}});function Ze(e,t,n,i,r){return new Ze.prototype.init(e,t,n,i,r)}g.Tween=Ze;Ze.prototype={constructor:Ze,init:function(e,t,n,i,r,o){this.elem=e;this.prop=n;this.easing=r||g.easing._default;this.options=t;this.start=this.now=this.cur();this.end=i;this.unit=o||(g.cssNumber[n]?"":"px")},cur:function(){var e=Ze.propHooks[this.prop];return e&&e.get?e.get(this):Ze.propHooks._default.get(this)},run:function(e){var t,n=Ze.propHooks[this.prop];if(this.options.duration){this.pos=t=g.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration)}else{this.pos=t=e}this.now=(this.end-this.start)*t+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this)}if(n&&n.set){n.set(this)}else{Ze.propHooks._default.set(this)}return this}};Ze.prototype.init.prototype=Ze.prototype;Ze.propHooks={_default:{get:function(e){var t;if(e.elem.nodeType!==1||e.elem[e.prop]!=null&&e.elem.style[e.prop]==null){return e.elem[e.prop]}t=g.css(e.elem,e.prop,"");return!t||t==="auto"?0:t},set:function(e){if(g.fx.step[e.prop]){g.fx.step[e.prop](e)}else if(e.elem.nodeType===1&&(e.elem.style[g.cssProps[e.prop]]!=null||g.cssHooks[e.prop])){g.style(e.elem,e.prop,e.now+e.unit)}else{e.elem[e.prop]=e.now}}}};Ze.propHooks.scrollTop=Ze.propHooks.scrollLeft={set:function(e){if(e.elem.nodeType&&e.elem.parentNode){e.elem[e.prop]=e.now}}};g.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"};g.fx=Ze.prototype.init;g.fx.step={};var et,tt,nt=/^(?:toggle|show|hide)$/,it=/queueHooks$/;function rt(){if(tt){if(i.hidden===false&&e.requestAnimationFrame){e.requestAnimationFrame(rt)}else{e.setTimeout(rt,g.fx.interval)}g.fx.tick()}}function ot(){e.setTimeout(function(){et=undefined});return et=g.now()}function at(e,t){var n,i=0,r={height:e};t=t?1:0;for(;i<4;i+=2-t){n=ne[i];r["margin"+n]=r["padding"+n]=e}if(t){r.opacity=r.width=e}return r}function st(e,t,n){var i,r=(ct.tweeners[t]||[]).concat(ct.tweeners["*"]),o=0,a=r.length;for(;o<a;o++){if(i=r[o].call(n,t,e)){return i}}}function lt(e,t,n){var i,r,o,a,s,l,u,c,f="width"in t||"height"in t,d=this,h={},p=e.style,v=e.nodeType&&ie(e),m=G.get(e,"fxshow");if(!n.queue){a=g._queueHooks(e,"fx");if(a.unqueued==null){a.unqueued=0;s=a.empty.fire;a.empty.fire=function(){if(!a.unqueued){s()}}}a.unqueued++;d.always(function(){d.always(function(){a.unqueued--;if(!g.queue(e,"fx").length){a.empty.fire()}})})}for(i in t){r=t[i];if(nt.test(r)){delete t[i];o=o||r==="toggle";if(r===(v?"hide":"show")){if(r==="show"&&m&&m[i]!==undefined){v=true}else{continue}}h[i]=m&&m[i]||g.style(e,i)}}l=!g.isEmptyObject(t);if(!l&&g.isEmptyObject(h)){return}if(f&&e.nodeType===1){n.overflow=[p.overflow,p.overflowX,p.overflowY];u=m&&m.display;if(u==null){u=G.get(e,"display")}c=g.css(e,"display");if(c==="none"){if(u){c=u}else{le([e],true);u=e.style.display||u;c=g.css(e,"display");le([e])}}if(c==="inline"||c==="inline-block"&&u!=null){if(g.css(e,"float")==="none"){if(!l){d.done(function(){p.display=u});if(u==null){c=p.display;u=c==="none"?"":c}}p.display="inline-block"}}}if(n.overflow){p.overflow="hidden";d.always(function(){p.overflow=n.overflow[0];p.overflowX=n.overflow[1];p.overflowY=n.overflow[2]})}l=false;for(i in h){if(!l){if(m){if("hidden"in m){v=m.hidden}}else{m=G.access(e,"fxshow",{display:u})}if(o){m.hidden=!v}if(v){le([e],true)}d.done(function(){if(!v){le([e])}G.remove(e,"fxshow");for(i in h){g.style(e,i,h[i])}})}l=st(v?m[i]:0,i,d);if(!(i in m)){m[i]=l.start;if(v){l.end=l.start;l.start=0}}}}function ut(e,t){var n,i,r,o,a;for(n in e){i=g.camelCase(n);r=t[i];o=e[n];if(Array.isArray(o)){r=o[1];o=e[n]=o[0]}if(n!==i){e[i]=o;delete e[n]}a=g.cssHooks[i];if(a&&"expand"in a){o=a.expand(o);delete e[i];for(n in o){if(!(n in e)){e[n]=o[n];t[n]=r}}}else{t[i]=r}}}function ct(e,t,n){var i,r,o=0,a=ct.prefilters.length,s=g.Deferred().always(function(){delete l.elem}),l=function(){if(r){return false}var t=et||ot(),n=Math.max(0,u.startTime+u.duration-t),i=n/u.duration||0,o=1-i,a=0,l=u.tweens.length;for(;a<l;a++){u.tweens[a].run(o)}s.notifyWith(e,[u,o,n]);if(o<1&&l){return n}if(!l){s.notifyWith(e,[u,1,0])}s.resolveWith(e,[u]);return false},u=s.promise({elem:e,props:g.extend({},t),opts:g.extend(true,{specialEasing:{},easing:g.easing._default},n),originalProperties:t,originalOptions:n,startTime:et||ot(),duration:n.duration,tweens:[],createTween:function(t,n){var i=g.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);u.tweens.push(i);return i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r){return this}r=true;for(;n<i;n++){u.tweens[n].run(1)}if(t){s.notifyWith(e,[u,1,0]);s.resolveWith(e,[u,t])}else{s.rejectWith(e,[u,t])}return this}}),c=u.props;ut(c,u.opts.specialEasing);for(;o<a;o++){i=ct.prefilters[o].call(u,e,c,u.opts);if(i){if(g.isFunction(i.stop)){g._queueHooks(u.elem,u.opts.queue).stop=g.proxy(i.stop,i)}return i}}g.map(c,st,u);if(g.isFunction(u.opts.start)){u.opts.start.call(e,u)}u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always);g.fx.timer(g.extend(l,{elem:e,anim:u,queue:u.opts.queue}));return u}g.Animation=g.extend(ct,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);oe(n.elem,e,te.exec(t),n);return n}]},tweener:function(e,t){if(g.isFunction(e)){t=e;e=["*"]}else{e=e.match(j)}var n,i=0,r=e.length;for(;i<r;i++){n=e[i];ct.tweeners[n]=ct.tweeners[n]||[];ct.tweeners[n].unshift(t)}},prefilters:[lt],prefilter:function(e,t){if(t){ct.prefilters.unshift(e)}else{ct.prefilters.push(e)}}});g.speed=function(e,t,n){var i=e&&typeof e==="object"?g.extend({},e):{complete:n||!n&&t||g.isFunction(e)&&e,duration:e,easing:n&&t||t&&!g.isFunction(t)&&t};if(g.fx.off){i.duration=0}else{if(typeof i.duration!=="number"){if(i.duration in g.fx.speeds){i.duration=g.fx.speeds[i.duration]}else{i.duration=g.fx.speeds._default}}}if(i.queue==null||i.queue===true){i.queue="fx"}i.old=i.complete;i.complete=function(){if(g.isFunction(i.old)){i.old.call(this)}if(i.queue){g.dequeue(this,i.queue)}};return i};g.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ie).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=g.isEmptyObject(e),o=g.speed(t,n,i),a=function(){var t=ct(this,g.extend({},e),o);if(r||G.get(this,"finish")){t.stop(true)}};a.finish=a;return r||o.queue===false?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop;t(n)};if(typeof e!=="string"){n=t;t=e;e=undefined}if(t&&e!==false){this.queue(e||"fx",[])}return this.each(function(){var t=true,r=e!=null&&e+"queueHooks",o=g.timers,a=G.get(this);if(r){if(a[r]&&a[r].stop){i(a[r])}}else{for(r in a){if(a[r]&&a[r].stop&&it.test(r)){i(a[r])}}}for(r=o.length;r--;){if(o[r].elem===this&&(e==null||o[r].queue===e)){o[r].anim.stop(n);t=false;o.splice(r,1)}}if(t||!n){g.dequeue(this,e)}})},finish:function(e){if(e!==false){e=e||"fx"}return this.each(function(){var t,n=G.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=g.timers,a=i?i.length:0;n.finish=true;g.queue(this,e,[]);if(r&&r.stop){r.stop.call(this,true)}for(t=o.length;t--;){if(o[t].elem===this&&o[t].queue===e){o[t].anim.stop(true);o.splice(t,1)}}for(t=0;t<a;t++){if(i[t]&&i[t].finish){i[t].finish.call(this)}}delete n.finish})}});g.each(["toggle","show","hide"],function(e,t){var n=g.fn[t];g.fn[t]=function(e,i,r){return e==null||typeof e==="boolean"?n.apply(this,arguments):this.animate(at(t,true),e,i,r)}});g.each({slideDown:at("show"),slideUp:at("hide"),slideToggle:at("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){g.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}});g.timers=[];g.fx.tick=function(){var e,t=0,n=g.timers;et=g.now();for(;t<n.length;t++){e=n[t];if(!e()&&n[t]===e){n.splice(t--,1)}}if(!n.length){g.fx.stop()}et=undefined};g.fx.timer=function(e){g.timers.push(e);g.fx.start()};g.fx.interval=13;g.fx.start=function(){if(tt){return}tt=true;rt()};g.fx.stop=function(){tt=null};g.fx.speeds={slow:600,fast:200,_default:400};g.fn.delay=function(t,n){t=g.fx?g.fx.speeds[t]||t:t;n=n||"fx";return this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})};(function(){var e=i.createElement("input"),t=i.createElement("select"),n=t.appendChild(i.createElement("option"));e.type="checkbox";p.checkOn=e.value!=="";p.optSelected=n.selected;e=i.createElement("input");e.value="t";e.type="radio";p.radioValue=e.value==="t"})();var ft,dt=g.expr.attrHandle;g.fn.extend({attr:function(e,t){return V(this,g.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){g.removeAttr(this,e)})}});g.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(o===3||o===8||o===2){return}if(typeof e.getAttribute==="undefined"){return g.prop(e,t,n)}if(o!==1||!g.isXMLDoc(e)){r=g.attrHooks[t.toLowerCase()]||(g.expr.match.bool.test(t)?ft:undefined)}if(n!==undefined){if(n===null){g.removeAttr(e,t);return}if(r&&"set"in r&&(i=r.set(e,n,t))!==undefined){return i}e.setAttribute(t,n+"");return n}if(r&&"get"in r&&(i=r.get(e,t))!==null){return i}i=g.find.attr(e,t);return i==null?undefined:i},attrHooks:{type:{set:function(e,t){if(!p.radioValue&&t==="radio"&&N(e,"input")){var n=e.value;e.setAttribute("type",t);if(n){e.value=n}return t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(j);if(r&&e.nodeType===1){while(n=r[i++]){e.removeAttribute(n)}}}});ft={set:function(e,t,n){if(t===false){g.removeAttr(e,n)}else{e.setAttribute(n,n)}return n}};g.each(g.expr.match.bool.source.match(/\w+/g),function(e,t){var n=dt[t]||g.find.attr;dt[t]=function(e,t,i){var r,o,a=t.toLowerCase();if(!i){o=dt[a];dt[a]=r;r=n(e,t,i)!=null?a:null;dt[a]=o}return r}});var ht=/^(?:input|select|textarea|button)$/i,pt=/^(?:a|area)$/i;g.fn.extend({prop:function(e,t){return V(this,g.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[g.propFix[e]||e]})}});g.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(o===3||o===8||o===2){return}if(o!==1||!g.isXMLDoc(e)){t=g.propFix[t]||t;r=g.propHooks[t]}if(n!==undefined){if(r&&"set"in r&&(i=r.set(e,n,t))!==undefined){return i}return e[t]=n}if(r&&"get"in r&&(i=r.get(e,t))!==null){return i}return e[t]},propHooks:{tabIndex:{get:function(e){var t=g.find.attr(e,"tabindex");if(t){return parseInt(t,10)}if(ht.test(e.nodeName)||pt.test(e.nodeName)&&e.href){return 0}return-1}}},propFix:{for:"htmlFor",class:"className"}});if(!p.optSelected){g.propHooks.selected={get:function(e){var t=e.parentNode;if(t&&t.parentNode){t.parentNode.selectedIndex}return null},set:function(e){var t=e.parentNode;if(t){t.selectedIndex;if(t.parentNode){t.parentNode.selectedIndex}}}}}g.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){g.propFix[this.toLowerCase()]=this});function vt(e){var t=e.match(j)||[];return t.join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}g.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(g.isFunction(e)){return this.each(function(t){g(this).addClass(e.call(this,t,mt(this)))})}if(typeof e==="string"&&e){t=e.match(j)||[];while(n=this[l++]){r=mt(n);i=n.nodeType===1&&" "+vt(r)+" ";if(i){a=0;while(o=t[a++]){if(i.indexOf(" "+o+" ")<0){i+=o+" "}}s=vt(i);if(r!==s){n.setAttribute("class",s)}}}}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(g.isFunction(e)){return this.each(function(t){g(this).removeClass(e.call(this,t,mt(this)))})}if(!arguments.length){return this.attr("class","")}if(typeof e==="string"&&e){t=e.match(j)||[];while(n=this[l++]){r=mt(n);i=n.nodeType===1&&" "+vt(r)+" ";if(i){a=0;while(o=t[a++]){while(i.indexOf(" "+o+" ")>-1){i=i.replace(" "+o+" "," ")}}s=vt(i);if(r!==s){n.setAttribute("class",s)}}}}return this},toggleClass:function(e,t){var n=typeof e;if(typeof t==="boolean"&&n==="string"){return t?this.addClass(e):this.removeClass(e)}if(g.isFunction(e)){return this.each(function(n){g(this).toggleClass(e.call(this,n,mt(this),t),t)})}return this.each(function(){var t,i,r,o;if(n==="string"){i=0;r=g(this);o=e.match(j)||[];while(t=o[i++]){if(r.hasClass(t)){r.removeClass(t)}else{r.addClass(t)}}}else if(e===undefined||n==="boolean"){t=mt(this);if(t){G.set(this,"__className__",t)}if(this.setAttribute){this.setAttribute("class",t||e===false?"":G.get(this,"__className__")||"")}}})},hasClass:function(e){var t,n,i=0;t=" "+e+" ";while(n=this[i++]){if(n.nodeType===1&&(" "+vt(mt(n))+" ").indexOf(t)>-1){return true}}return false}});var gt=/\r/g;g.fn.extend({val:function(e){var t,n,i,r=this[0];if(!arguments.length){if(r){t=g.valHooks[r.type]||g.valHooks[r.nodeName.toLowerCase()];if(t&&"get"in t&&(n=t.get(r,"value"))!==undefined){return n}n=r.value;if(typeof n==="string"){return n.replace(gt,"")}return n==null?"":n}return}i=g.isFunction(e);return this.each(function(n){var r;if(this.nodeType!==1){return}if(i){r=e.call(this,n,g(this).val())}else{r=e}if(r==null){r=""}else if(typeof r==="number"){r+=""}else if(Array.isArray(r)){r=g.map(r,function(e){return e==null?"":e+""})}t=g.valHooks[this.type]||g.valHooks[this.nodeName.toLowerCase()];if(!t||!("set"in t)||t.set(this,r,"value")===undefined){this.value=r}})}});g.extend({valHooks:{option:{get:function(e){var t=g.find.attr(e,"value");return t!=null?t:vt(g.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,a=e.type==="select-one",s=a?null:[],l=a?o+1:r.length;if(o<0){i=l}else{i=a?o:0}for(;i<l;i++){n=r[i];if((n.selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){t=g(n).val();if(a){return t}s.push(t)}}return s},set:function(e,t){var n,i,r=e.options,o=g.makeArray(t),a=r.length;while(a--){i=r[a];if(i.selected=g.inArray(g.valHooks.option.get(i),o)>-1){n=true}}if(!n){e.selectedIndex=-1}return o}}}});g.each(["radio","checkbox"],function(){g.valHooks[this]={set:function(e,t){if(Array.isArray(t)){return e.checked=g.inArray(g(e).val(),t)>-1}}};if(!p.checkOn){g.valHooks[this].get=function(e){return e.getAttribute("value")===null?"on":e.value}}});var bt=/^(?:focusinfocus|focusoutblur)$/;g.extend(g.event,{trigger:function(t,n,r,o){var a,s,l,u,c,d,h,p=[r||i],v=f.call(t,"type")?t.type:t,m=f.call(t,"namespace")?t.namespace.split("."):[];s=l=r=r||i;if(r.nodeType===3||r.nodeType===8){return}if(bt.test(v+g.event.triggered)){return}if(v.indexOf(".")>-1){m=v.split(".");v=m.shift();m.sort()}c=v.indexOf(":")<0&&"on"+v;t=t[g.expando]?t:new g.Event(v,typeof t==="object"&&t);t.isTrigger=o?2:3;t.namespace=m.join(".");t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;t.result=undefined;if(!t.target){t.target=r}n=n==null?[t]:g.makeArray(n,[t]);h=g.event.special[v]||{};if(!o&&h.trigger&&h.trigger.apply(r,n)===false){return}if(!o&&!h.noBubble&&!g.isWindow(r)){u=h.delegateType||v;if(!bt.test(u+v)){s=s.parentNode}for(;s;s=s.parentNode){p.push(s);l=s}if(l===(r.ownerDocument||i)){p.push(l.defaultView||l.parentWindow||e)}}a=0;while((s=p[a++])&&!t.isPropagationStopped()){t.type=a>1?u:h.bindType||v;d=(G.get(s,"events")||{})[t.type]&&G.get(s,"handle");if(d){d.apply(s,n)}d=c&&s[c];if(d&&d.apply&&_(s)){t.result=d.apply(s,n);if(t.result===false){t.preventDefault()}}}t.type=v;if(!o&&!t.isDefaultPrevented()){if((!h._default||h._default.apply(p.pop(),n)===false)&&_(r)){if(c&&g.isFunction(r[v])&&!g.isWindow(r)){l=r[c];if(l){r[c]=null}g.event.triggered=v;r[v]();g.event.triggered=undefined;if(l){r[c]=l}}}}return t.result},simulate:function(e,t,n){var i=g.extend(new g.Event,n,{type:e,isSimulated:true});g.event.trigger(i,null,t)}});g.fn.extend({trigger:function(e,t){return this.each(function(){g.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n){return g.event.trigger(e,t,n,true)}}});g.each(("blur focus focusin focusout resize scroll click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select submit keydown keypress keyup contextmenu").split(" "),function(e,t){g.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}});g.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});p.focusin="onfocusin"in e;if(!p.focusin){g.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){g.event.simulate(t,e.target,g.event.fix(e))};g.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=G.access(i,t);if(!r){i.addEventListener(e,n,true)}G.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=G.access(i,t)-1;if(!r){i.removeEventListener(e,n,true);G.remove(i,t)}else{G.access(i,t,r)}}}})}var yt=e.location;var wt=g.now();var Ct=/\?/;g.parseXML=function(t){var n;if(!t||typeof t!=="string"){return null}try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=undefined}if(!n||n.getElementsByTagName("parsererror").length){g.error("Invalid XML: "+t)}return n};var kt=/\[\]$/,xt=/\r?\n/g,Tt=/^(?:submit|button|image|reset|file)$/i,St=/^(?:input|select|textarea|keygen)/i;function Et(e,t,n,i){var r;if(Array.isArray(t)){g.each(t,function(t,r){if(n||kt.test(e)){i(e,r)}else{Et(e+"["+(typeof r==="object"&&r!=null?t:"")+"]",r,n,i)}})}else if(!n&&g.type(t)==="object"){for(r in t){Et(e+"["+r+"]",t[r],n,i)}}else{i(e,t)}}g.param=function(e,t){var n,i=[],r=function(e,t){var n=g.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(n==null?"":n)};if(Array.isArray(e)||e.jquery&&!g.isPlainObject(e)){g.each(e,function(){r(this.name,this.value)})}else{for(n in e){Et(n,e[n],t,r)}}return i.join("&")};g.fn.extend({serialize:function(){return g.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=g.prop(this,"elements");return e?g.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!g(this).is(":disabled")&&St.test(this.nodeName)&&!Tt.test(e)&&(this.checked||!ue.test(e))}).map(function(e,t){var n=g(this).val();if(n==null){return null}if(Array.isArray(n)){return g.map(n,function(e){return{name:t.name,value:e.replace(xt,"\r\n")}})}return{name:t.name,value:n.replace(xt,"\r\n")}}).get()}});var Nt=/%20/g,At=/#.*$/,It=/([?&])_=[^&]*/,Dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,$t=/^(?:GET|HEAD)$/,Lt=/^\/\//,Pt={},Ht={},Ft="*/".concat("*"),jt=i.createElement("a");jt.href=yt.href;function Ot(e){return function(t,n){if(typeof t!=="string"){n=t;t="*"}var i,r=0,o=t.toLowerCase().match(j)||[];if(g.isFunction(n)){while(i=o[r++]){if(i[0]==="+"){i=i.slice(1)||"*";(e[i]=e[i]||[]).unshift(n)}else{(e[i]=e[i]||[]).push(n)}}}}}function Mt(e,t,n,i){var r={},o=e===Ht;function a(s){var l;r[s]=true;g.each(e[s]||[],function(e,s){var u=s(t,n,i);if(typeof u==="string"&&!o&&!r[u]){t.dataTypes.unshift(u);a(u);return false}else if(o){return!(l=u)}});return l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Bt(e,t){var n,i,r=g.ajaxSettings.flatOptions||{};for(n in t){if(t[n]!==undefined){(r[n]?e:i||(i={}))[n]=t[n]}}if(i){g.extend(true,e,i)}return e}function zt(e,t,n){var i,r,o,a,s=e.contents,l=e.dataTypes;while(l[0]==="*"){l.shift();if(i===undefined){i=e.mimeType||t.getResponseHeader("Content-Type")}}if(i){for(r in s){if(s[r]&&s[r].test(i)){l.unshift(r);break}}}if(l[0]in n){o=l[0]}else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}if(!a){a=r}}o=o||a}if(o){if(o!==l[0]){l.unshift(o)}return n[o]}}function qt(e,t,n,i){var r,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1]){for(a in e.converters){u[a.toLowerCase()]=e.converters[a]}}o=c.shift();while(o){if(e.responseFields[o]){n[e.responseFields[o]]=t}if(!l&&i&&e.dataFilter){t=e.dataFilter(t,e.dataType)}l=o;o=c.shift();if(o){if(o==="*"){o=l}else if(l!=="*"&&l!==o){a=u[l+" "+o]||u["* "+o];if(!a){for(r in u){s=r.split(" ");if(s[1]===o){a=u[l+" "+s[0]]||u["* "+s[0]];if(a){if(a===true){a=u[r]}else if(u[r]!==true){o=s[0];c.unshift(s[1])}break}}}}if(a!==true){if(a&&e.throws){t=a(t)}else{try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}}}}}return{state:"success",data:t}}g.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yt.href,type:"GET",isLocal:Rt.test(yt.protocol),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ft,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":true,"text json":JSON.parse,"text xml":g.parseXML},flatOptions:{url:true,context:true}},ajaxSetup:function(e,t){return t?Bt(Bt(e,g.ajaxSettings),t):Bt(g.ajaxSettings,e)},ajaxPrefilter:Ot(Pt),ajaxTransport:Ot(Ht),ajax:function(t,n){if(typeof t==="object"){n=t;t=undefined}n=n||{};var r,o,a,s,l,u,c,f,d,h,p=g.ajaxSetup({},n),v=p.context||p,m=p.context&&(v.nodeType||v.jquery)?g(v):g.event,b=g.Deferred(),y=g.Callbacks("once memory"),w=p.statusCode||{},C={},k={},x="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s){s={};while(t=Dt.exec(a)){s[t[1].toLowerCase()]=t[2]}}t=s[e.toLowerCase()]}return t==null?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){if(c==null){e=k[e.toLowerCase()]=k[e.toLowerCase()]||e;C[e]=t}return this},overrideMimeType:function(e){if(c==null){p.mimeType=e}return this},statusCode:function(e){var t;if(e){if(c){T.always(e[T.status])}else{for(t in e){w[t]=[w[t],e[t]]}}}return this},abort:function(e){var t=e||x;if(r){r.abort(t)}S(0,t);return this}};b.promise(T);p.url=((t||p.url||yt.href)+"").replace(Lt,yt.protocol+"//");p.type=n.method||n.type||p.method||p.type;p.dataTypes=(p.dataType||"*").toLowerCase().match(j)||[""];if(p.crossDomain==null){u=i.createElement("a");try{u.href=p.url;u.href=u.href;p.crossDomain=jt.protocol+"//"+jt.host!==u.protocol+"//"+u.host}catch(e){p.crossDomain=true}}if(p.data&&p.processData&&typeof p.data!=="string"){p.data=g.param(p.data,p.traditional)}Mt(Pt,p,n,T);if(c){return T}f=g.event&&p.global;if(f&&g.active++===0){g.event.trigger("ajaxStart")}p.type=p.type.toUpperCase();p.hasContent=!$t.test(p.type);o=p.url.replace(At,"");if(!p.hasContent){h=p.url.slice(o.length);if(p.data){o+=(Ct.test(o)?"&":"?")+p.data;delete p.data}if(p.cache===false){o=o.replace(It,"$1");h=(Ct.test(o)?"&":"?")+"_="+wt+++h}p.url=o+h}else if(p.data&&p.processData&&(p.contentType||"").indexOf("application/x-www-form-urlencoded")===0){p.data=p.data.replace(Nt,"+")}if(p.ifModified){if(g.lastModified[o]){T.setRequestHeader("If-Modified-Since",g.lastModified[o])}if(g.etag[o]){T.setRequestHeader("If-None-Match",g.etag[o])}}if(p.data&&p.hasContent&&p.contentType!==false||n.contentType){T.setRequestHeader("Content-Type",p.contentType)}T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+(p.dataTypes[0]!=="*"?", "+Ft+"; q=0.01":""):p.accepts["*"]);for(d in p.headers){T.setRequestHeader(d,p.headers[d])}if(p.beforeSend&&(p.beforeSend.call(v,T,p)===false||c)){return T.abort()}x="abort";y.add(p.complete);T.done(p.success);T.fail(p.error);r=Mt(Ht,p,n,T);if(!r){S(-1,"No Transport")}else{T.readyState=1;if(f){m.trigger("ajaxSend",[T,p])}if(c){return T}if(p.async&&p.timeout>0){l=e.setTimeout(function(){T.abort("timeout")},p.timeout)}try{c=false;r.send(C,S)}catch(e){if(c){throw e}S(-1,e)}}function S(t,n,i,s){var u,d,h,C,k,x=n;if(c){return}c=true;if(l){e.clearTimeout(l)}r=undefined;a=s||"";T.readyState=t>0?4:0;u=t>=200&&t<300||t===304;if(i){C=zt(p,T,i)}C=qt(p,C,T,u);if(u){if(p.ifModified){k=T.getResponseHeader("Last-Modified");if(k){g.lastModified[o]=k}k=T.getResponseHeader("etag");if(k){g.etag[o]=k}}if(t===204||p.type==="HEAD"){x="nocontent"}else if(t===304){x="notmodified"}else{x=C.state;d=C.data;h=C.error;u=!h}}else{h=x;if(t||!x){x="error";if(t<0){t=0}}}T.status=t;T.statusText=(n||x)+"";if(u){b.resolveWith(v,[d,x,T])}else{b.rejectWith(v,[T,x,h])}T.statusCode(w);w=undefined;if(f){m.trigger(u?"ajaxSuccess":"ajaxError",[T,p,u?d:h])}y.fireWith(v,[T,x]);if(f){m.trigger("ajaxComplete",[T,p]);if(!--g.active){g.event.trigger("ajaxStop")}}}return T},getJSON:function(e,t,n){return g.get(e,t,n,"json")},getScript:function(e,t){return g.get(e,undefined,t,"script")}});g.each(["get","post"],function(e,t){g[t]=function(e,n,i,r){if(g.isFunction(n)){r=r||i;i=n;n=undefined}return g.ajax(g.extend({url:e,type:t,dataType:r,data:n,success:i},g.isPlainObject(e)&&e))}});g._evalUrl=function(e){return g.ajax({url:e,type:"GET",dataType:"script",cache:true,async:false,global:false,throws:true})};g.fn.extend({wrapAll:function(e){var t;if(this[0]){if(g.isFunction(e)){e=e.call(this[0])}t=g(e,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){t.insertBefore(this[0])}t.map(function(){var e=this;while(e.firstElementChild){e=e.firstElementChild}return e}).append(this)}return this},wrapInner:function(e){if(g.isFunction(e)){return this.each(function(t){g(this).wrapInner(e.call(this,t))})}return this.each(function(){var t=g(this),n=t.contents();if(n.length){n.wrapAll(e)}else{t.append(e)}})},wrap:function(e){var t=g.isFunction(e);return this.each(function(n){g(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){this.parent(e).not("body").each(function(){g(this).replaceWith(this.childNodes)});return this}});g.expr.pseudos.hidden=function(e){return!g.expr.pseudos.visible(e)};g.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)};g.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Wt=g.ajaxSettings.xhr();p.cors=!!Wt&&"withCredentials"in Wt;p.ajax=Wt=!!Wt;g.ajaxTransport(function(t){var n,i;if(p.cors||Wt&&!t.crossDomain){return{send:function(r,o){var a,s=t.xhr();s.open(t.type,t.url,t.async,t.username,t.password);if(t.xhrFields){for(a in t.xhrFields){s[a]=t.xhrFields[a]}}if(t.mimeType&&s.overrideMimeType){s.overrideMimeType(t.mimeType)}if(!t.crossDomain&&!r["X-Requested-With"]){r["X-Requested-With"]="XMLHttpRequest"}for(a in r){s.setRequestHeader(a,r[a])}n=function(e){return function(){if(n){n=i=s.onload=s.onerror=s.onabort=s.onreadystatechange=null;if(e==="abort"){s.abort()}else if(e==="error"){if(typeof s.status!=="number"){o(0,"error")}else{o(s.status,s.statusText)}}else{o(Ut[s.status]||s.status,s.statusText,(s.responseType||"text")!=="text"||typeof s.responseText!=="string"?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders())}}}};s.onload=n();i=s.onerror=n("error");if(s.onabort!==undefined){s.onabort=i}else{s.onreadystatechange=function(){if(s.readyState===4){e.setTimeout(function(){if(n){i()}})}}}n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n){throw e}}},abort:function(){if(n){n()}}}}});g.ajaxPrefilter(function(e){if(e.crossDomain){e.contents.script=false}});g.ajaxSetup({accepts:{script:"text/javascript, application/javascript, "+"application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){g.globalEval(e);return e}}});g.ajaxPrefilter("script",function(e){if(e.cache===undefined){e.cache=false}if(e.crossDomain){e.type="GET"}});g.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,o){t=g("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove();n=null;if(e){o(e.type==="error"?404:200,e.type)}});i.head.appendChild(t[0])},abort:function(){if(n){n()}}}}});var Vt=[],_t=/(=)\?(?=&|$)|\?\?/;g.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||g.expando+"_"+wt++;this[e]=true;return e}});g.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,a,s=t.jsonp!==false&&(_t.test(t.url)?"url":typeof t.data==="string"&&(t.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&_t.test(t.data)&&"data");if(s||t.dataTypes[0]==="jsonp"){r=t.jsonpCallback=g.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback;if(s){t[s]=t[s].replace(_t,"$1"+r)}else if(t.jsonp!==false){t.url+=(Ct.test(t.url)?"&":"?")+t.jsonp+"="+r}t.converters["script json"]=function(){if(!a){g.error(r+" was not called")}return a[0]};t.dataTypes[0]="json";o=e[r];e[r]=function(){a=arguments};i.always(function(){if(o===undefined){g(e).removeProp(r)}else{e[r]=o}if(t[r]){t.jsonpCallback=n.jsonpCallback;Vt.push(r)}if(a&&g.isFunction(o)){o(a[0])}a=o=undefined});return"script"}});p.createHTMLDocument=function(){var e=i.implementation.createHTMLDocument("").body;e.innerHTML="<form></form><form></form>";return e.childNodes.length===2}();g.parseHTML=function(e,t,n){if(typeof e!=="string"){return[]}if(typeof t==="boolean"){n=t;t=false}var r,o,a;if(!t){if(p.createHTMLDocument){t=i.implementation.createHTMLDocument("");r=t.createElement("base");r.href=i.location.href;t.head.appendChild(r)}else{t=i}}o=A.exec(e);a=!n&&[];if(o){return[t.createElement(o[1])]}o=me([e],t,a);if(a&&a.length){g(a).remove()}return g.merge([],o.childNodes)};g.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");if(s>-1){i=vt(e.slice(s));e=e.slice(0,s)}if(g.isFunction(t)){n=t;t=undefined}else if(t&&typeof t==="object"){r="POST"}if(a.length>0){g.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments;a.html(i?g("<div>").append(g.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})})}return this};g.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){g.fn[t]=function(e){return this.on(t,e)}});g.expr.pseudos.animated=function(e){return g.grep(g.timers,function(t){return e===t.elem}).length};g.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,u,c=g.css(e,"position"),f=g(e),d={};if(c==="static"){e.style.position="relative"}s=f.offset();o=g.css(e,"top");l=g.css(e,"left");u=(c==="absolute"||c==="fixed")&&(o+l).indexOf("auto")>-1;if(u){i=f.position();a=i.top;r=i.left}else{a=parseFloat(o)||0;r=parseFloat(l)||0}if(g.isFunction(t)){t=t.call(e,n,g.extend({},s))}if(t.top!=null){d.top=t.top-s.top+a}if(t.left!=null){d.left=t.left-s.left+r}if("using"in t){t.using.call(e,d)}else{f.css(d)}}};g.fn.extend({offset:function(e){if(arguments.length){return e===undefined?this:this.each(function(t){g.offset.setOffset(this,e,t)})}var t,n,i,r,o=this[0];if(!o){return}if(!o.getClientRects().length){return{top:0,left:0}}i=o.getBoundingClientRect();t=o.ownerDocument;n=t.documentElement;r=t.defaultView;return{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}},position:function(){if(!this[0]){return}var e,t,n=this[0],i={top:0,left:0};if(g.css(n,"position")==="fixed"){t=n.getBoundingClientRect()}else{e=this.offsetParent();t=this.offset();if(!N(e[0],"html")){i=e.offset()}i={top:i.top+g.css(e[0],"borderTopWidth",true),left:i.left+g.css(e[0],"borderLeftWidth",true)}}return{top:t.top-i.top-g.css(n,"marginTop",true),left:t.left-i.left-g.css(n,"marginLeft",true)}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&g.css(e,"position")==="static"){e=e.offsetParent}return e||ge})}});g.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;g.fn[e]=function(i){return V(this,function(e,i,r){var o;if(g.isWindow(e)){o=e}else if(e.nodeType===9){o=e.defaultView}if(r===undefined){return o?o[t]:e[i]}if(o){o.scrollTo(!n?r:o.pageXOffset,n?r:o.pageYOffset)}else{e[i]=r}},e,i,arguments.length)}});g.each(["top","left"],function(e,t){g.cssHooks[t]=ze(p.pixelPosition,function(e,n){if(n){n=Be(e,t);return Oe.test(n)?g(e).position()[t]+"px":n}})});g.each({Height:"height",Width:"width"},function(e,t){g.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){g.fn[i]=function(r,o){var a=arguments.length&&(n||typeof r!=="boolean"),s=n||(r===true||o===true?"margin":"border");return V(this,function(t,n,r){var o;if(g.isWindow(t)){return i.indexOf("outer")===0?t["inner"+e]:t.document.documentElement["client"+e]}if(t.nodeType===9){o=t.documentElement;return Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])}return r===undefined?g.css(t,n,s):g.style(t,n,r,s)},t,a?r:undefined,a)}})});g.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return arguments.length===1?this.off(e,"**"):this.off(t,e||"**",n)}});g.holdReady=function(e){if(e){g.readyWait++}else{g.ready(true)}};g.isArray=Array.isArray;g.parseJSON=JSON.parse;g.nodeName=N;if(typeof define==="function"&&define.amd){define("jquery",[],function(){return g})}var Kt=e.jQuery,Gt=e.$;g.noConflict=function(t){if(e.$===g){e.$=Gt}if(t&&e.jQuery===g){e.jQuery=Kt}return g};if(!t){e.jQuery=e.$=g}return g});if(typeof jQuery==="undefined"){throw new Error("Bootstrap's JavaScript requires jQuery")}+function(e){"use strict";var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||t[0]==1&&t[1]==9&&t[2]<1||t[0]>3){throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}}(jQuery);+function(e){"use strict";function t(){var e=document.createElement("bootstrap");var t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in t){if(e.style[n]!==undefined){return{end:t[n]}}}return false}e.fn.emulateTransitionEnd=function(t){var n=false;var i=this;e(this).one("bsTransitionEnd",function(){n=true});var r=function(){if(!n)e(i).trigger(e.support.transition.end)};setTimeout(r,t);return this};e(function(){e.support.transition=t();if(!e.support.transition)return;e.event.special.bsTransitionEnd={bindType:e.support.transition.end,delegateType:e.support.transition.end,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}})}(jQuery);+function(e){"use strict";var t='[data-dismiss="alert"]';var n=function(n){e(n).on("click",t,this.close)};n.VERSION="3.3.7";n.TRANSITION_DURATION=150;n.prototype.close=function(t){var i=e(this);var r=i.attr("data-target");if(!r){r=i.attr("href");r=r&&r.replace(/.*(?=#[^\s]*$)/,"")}var o=e(r==="#"?[]:r);if(t)t.preventDefault();if(!o.length){o=i.closest(".alert")}o.trigger(t=e.Event("close.bs.alert"));if(t.isDefaultPrevented())return;o.removeClass("in");function a(){o.detach().trigger("closed.bs.alert").remove()}e.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",a).emulateTransitionEnd(n.TRANSITION_DURATION):a()};function i(t){return this.each(function(){var i=e(this);var r=i.data("bs.alert");if(!r)i.data("bs.alert",r=new n(this));if(typeof t=="string")r[t].call(i)})}var r=e.fn.alert;e.fn.alert=i;e.fn.alert.Constructor=n;e.fn.alert.noConflict=function(){e.fn.alert=r;return this};e(document).on("click.bs.alert.data-api",t,n.prototype.close)}(jQuery);+function(e){"use strict";var t=function(n,i){this.$element=e(n);this.options=e.extend({},t.DEFAULTS,i);this.isLoading=false};t.VERSION="3.3.7";t.DEFAULTS={loadingText:"loading..."};t.prototype.setState=function(t){var n="disabled";var i=this.$element;var r=i.is("input")?"val":"html";var o=i.data();t+="Text";if(o.resetText==null)i.data("resetText",i[r]());setTimeout(e.proxy(function(){i[r](o[t]==null?this.options[t]:o[t]);if(t=="loadingText"){this.isLoading=true;i.addClass(n).attr(n,n).prop(n,true)}else if(this.isLoading){this.isLoading=false;i.removeClass(n).removeAttr(n).prop(n,false)}},this),0)};t.prototype.toggle=function(){var e=true;var t=this.$element.closest('[data-toggle="buttons"]');if(t.length){var n=this.$element.find("input");if(n.prop("type")=="radio"){if(n.prop("checked"))e=false;t.find(".active").removeClass("active");this.$element.addClass("active")}else if(n.prop("type")=="checkbox"){if(n.prop("checked")!==this.$element.hasClass("active"))e=false;this.$element.toggleClass("active")}n.prop("checked",this.$element.hasClass("active"));if(e)n.trigger("change")}else{this.$element.attr("aria-pressed",!this.$element.hasClass("active"));this.$element.toggleClass("active")}};function n(n){return this.each(function(){var i=e(this);var r=i.data("bs.button");var o=typeof n=="object"&&n;if(!r)i.data("bs.button",r=new t(this,o));if(n=="toggle")r.toggle();else if(n)r.setState(n)})}var i=e.fn.button;e.fn.button=n;e.fn.button.Constructor=t;e.fn.button.noConflict=function(){e.fn.button=i;return this};e(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(t){var i=e(t.target).closest(".btn");n.call(i,"toggle");if(!e(t.target).is('input[type="radio"], input[type="checkbox"]')){t.preventDefault();if(i.is("input,button"))i.trigger("focus");else i.find("input:visible,button:visible").first().trigger("focus")}}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(t){e(t.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(t.type))})}(jQuery);+function(e){"use strict";var t=function(t,n){this.$element=e(t);this.$indicators=this.$element.find(".carousel-indicators");this.options=n;this.paused=null;this.sliding=null;this.interval=null;this.$active=null;this.$items=null;this.options.keyboard&&this.$element.on("keydown.bs.carousel",e.proxy(this.keydown,this));this.options.pause=="hover"&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",e.proxy(this.pause,this)).on("mouseleave.bs.carousel",e.proxy(this.cycle,this))};t.VERSION="3.3.7";t.TRANSITION_DURATION=600;t.DEFAULTS={interval:5e3,pause:"hover",wrap:true,keyboard:true};t.prototype.keydown=function(e){if(/input|textarea/i.test(e.target.tagName))return;switch(e.which){case 37:this.prev();break;case 39:this.next();break;default:return}e.preventDefault()};t.prototype.cycle=function(t){t||(this.paused=false);this.interval&&clearInterval(this.interval);this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval));return this};t.prototype.getItemIndex=function(e){this.$items=e.parent().children(".item");return this.$items.index(e||this.$active)};t.prototype.getItemForDirection=function(e,t){var n=this.getItemIndex(t);var i=e=="prev"&&n===0||e=="next"&&n==this.$items.length-1;if(i&&!this.options.wrap)return t;var r=e=="prev"?-1:1;var o=(n+r)%this.$items.length;return this.$items.eq(o)};t.prototype.to=function(e){var t=this;var n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(e>this.$items.length-1||e<0)return;if(this.sliding)return this.$element.one("slid.bs.carousel",function(){t.to(e)});if(n==e)return this.pause().cycle();return this.slide(e>n?"next":"prev",this.$items.eq(e))};t.prototype.pause=function(t){t||(this.paused=true);if(this.$element.find(".next, .prev").length&&e.support.transition){this.$element.trigger(e.support.transition.end);this.cycle(true)}this.interval=clearInterval(this.interval);return this};t.prototype.next=function(){if(this.sliding)return;return this.slide("next")};t.prototype.prev=function(){if(this.sliding)return;return this.slide("prev")};t.prototype.slide=function(n,i){var r=this.$element.find(".item.active");var o=i||this.getItemForDirection(n,r);var a=this.interval;var s=n=="next"?"left":"right";var l=this;if(o.hasClass("active"))return this.sliding=false;var u=o[0];var c=e.Event("slide.bs.carousel",{relatedTarget:u,direction:s});this.$element.trigger(c);if(c.isDefaultPrevented())return;this.sliding=true;a&&this.pause();if(this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=e(this.$indicators.children()[this.getItemIndex(o)]);f&&f.addClass("active")}var d=e.Event("slid.bs.carousel",{relatedTarget:u,direction:s});if(e.support.transition&&this.$element.hasClass("slide")){o.addClass(n);o[0].offsetWidth;r.addClass(s);o.addClass(s);r.one("bsTransitionEnd",function(){o.removeClass([n,s].join(" ")).addClass("active");r.removeClass(["active",s].join(" "));l.sliding=false;setTimeout(function(){l.$element.trigger(d)},0)}).emulateTransitionEnd(t.TRANSITION_DURATION)}else{r.removeClass("active");o.addClass("active");this.sliding=false;this.$element.trigger(d)}a&&this.cycle();return this};function n(n){return this.each(function(){var i=e(this);var r=i.data("bs.carousel");var o=e.extend({},t.DEFAULTS,i.data(),typeof n=="object"&&n);var a=typeof n=="string"?n:o.slide;if(!r)i.data("bs.carousel",r=new t(this,o));if(typeof n=="number")r.to(n);else if(a)r[a]();else if(o.interval)r.pause().cycle()})}var i=e.fn.carousel;e.fn.carousel=n;e.fn.carousel.Constructor=t;e.fn.carousel.noConflict=function(){e.fn.carousel=i;return this};var r=function(t){var i;var r=e(this);var o=e(r.attr("data-target")||(i=r.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""));if(!o.hasClass("carousel"))return;var a=e.extend({},o.data(),r.data());var s=r.attr("data-slide-to");if(s)a.interval=false;n.call(o,a);if(s){o.data("bs.carousel").to(s)}t.preventDefault()};e(document).on("click.bs.carousel.data-api","[data-slide]",r).on("click.bs.carousel.data-api","[data-slide-to]",r);e(window).on("load",function(){e('[data-ride="carousel"]').each(function(){var t=e(this);n.call(t,t.data())})})}(jQuery);+function(e){"use strict";var t=function(n,i){this.$element=e(n);this.options=e.extend({},t.DEFAULTS,i);this.$trigger=e('[data-toggle="collapse"][href="#'+n.id+'"],'+'[data-toggle="collapse"][data-target="#'+n.id+'"]');this.transitioning=null;if(this.options.parent){this.$parent=this.getParent()}else{this.addAriaAndCollapsedClass(this.$element,this.$trigger)}if(this.options.toggle)this.toggle()};t.VERSION="3.3.7";t.TRANSITION_DURATION=350;t.DEFAULTS={toggle:true};t.prototype.dimension=function(){var e=this.$element.hasClass("width");return e?"width":"height"};t.prototype.show=function(){if(this.transitioning||this.$element.hasClass("in"))return;var n;var r=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(r&&r.length){n=r.data("bs.collapse");if(n&&n.transitioning)return}var o=e.Event("show.bs.collapse");this.$element.trigger(o);if(o.isDefaultPrevented())return;if(r&&r.length){i.call(r,"hide");n||r.data("bs.collapse",null)}var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",true);this.$trigger.removeClass("collapsed").attr("aria-expanded",true);this.transitioning=1;var s=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a]("");this.transitioning=0;this.$element.trigger("shown.bs.collapse")};if(!e.support.transition)return s.call(this);var l=e.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",e.proxy(s,this)).emulateTransitionEnd(t.TRANSITION_DURATION)[a](this.$element[0][l])};t.prototype.hide=function(){if(this.transitioning||!this.$element.hasClass("in"))return;var n=e.Event("hide.bs.collapse");this.$element.trigger(n);if(n.isDefaultPrevented())return;var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight;this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",false);this.$trigger.addClass("collapsed").attr("aria-expanded",false);this.transitioning=1;var r=function(){this.transitioning=0;this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!e.support.transition)return r.call(this);this.$element[i](0).one("bsTransitionEnd",e.proxy(r,this)).emulateTransitionEnd(t.TRANSITION_DURATION)};t.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};t.prototype.getParent=function(){return e(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(e.proxy(function(t,i){var r=e(i);this.addAriaAndCollapsedClass(n(r),r)},this)).end()};t.prototype.addAriaAndCollapsedClass=function(e,t){var n=e.hasClass("in");e.attr("aria-expanded",n);t.toggleClass("collapsed",!n).attr("aria-expanded",n)};function n(t){var n;var i=t.attr("data-target")||(n=t.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return e(i)}function i(n){return this.each(function(){var i=e(this);var r=i.data("bs.collapse");var o=e.extend({},t.DEFAULTS,i.data(),typeof n=="object"&&n);if(!r&&o.toggle&&/show|hide/.test(n))o.toggle=false;if(!r)i.data("bs.collapse",r=new t(this,o));if(typeof n=="string")r[n]()})}var r=e.fn.collapse;e.fn.collapse=i;e.fn.collapse.Constructor=t;e.fn.collapse.noConflict=function(){e.fn.collapse=r;return this};e(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var r=e(this);if(!r.attr("data-target"))t.preventDefault();var o=n(r);var a=o.data("bs.collapse");var s=a?"toggle":r.data();i.call(o,s)})}(jQuery);+function(e){"use strict";var t=".dropdown-backdrop";var n='[data-toggle="dropdown"]';var i=function(t){e(t).on("click.bs.dropdown",this.toggle)};i.VERSION="3.3.7";function r(t){var n=t.attr("data-target");if(!n){n=t.attr("href");n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,"")}var i=n&&e(n);return i&&i.length?i:t.parent()}function o(i){if(i&&i.which===3)return;e(t).remove();e(n).each(function(){var t=e(this);var n=r(t);var o={relatedTarget:this};if(!n.hasClass("open"))return;if(i&&i.type=="click"&&/input|textarea/i.test(i.target.tagName)&&e.contains(n[0],i.target))return;n.trigger(i=e.Event("hide.bs.dropdown",o));if(i.isDefaultPrevented())return;t.attr("aria-expanded","false");n.removeClass("open").trigger(e.Event("hidden.bs.dropdown",o))})}i.prototype.toggle=function(t){var n=e(this);if(n.is(".disabled, :disabled"))return;var i=r(n);var a=i.hasClass("open");o();if(!a){if("ontouchstart"in document.documentElement&&!i.closest(".navbar-nav").length){e(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(e(this)).on("click",o)}var s={relatedTarget:this};i.trigger(t=e.Event("show.bs.dropdown",s));if(t.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true");i.toggleClass("open").trigger(e.Event("shown.bs.dropdown",s))}return false};i.prototype.keydown=function(t){if(!/(38|40|27|32)/.test(t.which)||/input|textarea/i.test(t.target.tagName))return;var i=e(this);t.preventDefault();t.stopPropagation();if(i.is(".disabled, :disabled"))return;var o=r(i);var a=o.hasClass("open");if(!a&&t.which!=27||a&&t.which==27){if(t.which==27)o.find(n).trigger("focus");return i.trigger("click")}var s=" li:not(.disabled):visible a";var l=o.find(".dropdown-menu"+s);if(!l.length)return;var u=l.index(t.target);if(t.which==38&&u>0)u--;if(t.which==40&&u<l.length-1)u++;if(!~u)u=0;l.eq(u).trigger("focus")};function a(t){return this.each(function(){var n=e(this);var r=n.data("bs.dropdown");if(!r)n.data("bs.dropdown",r=new i(this));if(typeof t=="string")r[t].call(n)})}var s=e.fn.dropdown;e.fn.dropdown=a;e.fn.dropdown.Constructor=i;e.fn.dropdown.noConflict=function(){e.fn.dropdown=s;return this};e(document).on("click.bs.dropdown.data-api",o).on("click.bs.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.bs.dropdown.data-api",n,i.prototype.toggle).on("keydown.bs.dropdown.data-api",n,i.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",i.prototype.keydown)}(jQuery);+function(e){"use strict";var t=function(t,n){this.options=n;this.$body=e(document.body);this.$element=e(t);this.$dialog=this.$element.find(".modal-dialog");this.$backdrop=null;this.isShown=null;this.originalBodyPad=null;this.scrollbarWidth=0;this.ignoreBackdropClick=false;if(this.options.remote){this.$element.find(".modal-content").load(this.options.remote,e.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))}};t.VERSION="3.3.7";t.TRANSITION_DURATION=300;t.BACKDROP_TRANSITION_DURATION=150;t.DEFAULTS={backdrop:true,keyboard:true,show:true};t.prototype.toggle=function(e){return this.isShown?this.hide():this.show(e)};t.prototype.show=function(n){var i=this;var r=e.Event("show.bs.modal",{relatedTarget:n});this.$element.trigger(r);if(this.isShown||r.isDefaultPrevented())return;this.isShown=true;this.checkScrollbar();this.setScrollbar();this.$body.addClass("modal-open");this.escape();this.resize();this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',e.proxy(this.hide,this));this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(t){if(e(t.target).is(i.$element))i.ignoreBackdropClick=true})});this.backdrop(function(){var r=e.support.transition&&i.$element.hasClass("fade");if(!i.$element.parent().length){i.$element.appendTo(i.$body)}i.$element.show().scrollTop(0);i.adjustDialog();if(r){i.$element[0].offsetWidth}i.$element.addClass("in");i.enforceFocus();var o=e.Event("shown.bs.modal",{relatedTarget:n});r?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(t.TRANSITION_DURATION):i.$element.trigger("focus").trigger(o)})};t.prototype.hide=function(n){if(n)n.preventDefault();n=e.Event("hide.bs.modal");this.$element.trigger(n);if(!this.isShown||n.isDefaultPrevented())return;this.isShown=false;this.escape();this.resize();e(document).off("focusin.bs.modal");this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal");this.$dialog.off("mousedown.dismiss.bs.modal");e.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",e.proxy(this.hideModal,this)).emulateTransitionEnd(t.TRANSITION_DURATION):this.hideModal()};t.prototype.enforceFocus=function(){e(document).off("focusin.bs.modal").on("focusin.bs.modal",e.proxy(function(e){if(document!==e.target&&this.$element[0]!==e.target&&!this.$element.has(e.target).length){this.$element.trigger("focus")}},this))};t.prototype.escape=function(){if(this.isShown&&this.options.keyboard){this.$element.on("keydown.dismiss.bs.modal",e.proxy(function(e){e.which==27&&this.hide()},this))}else if(!this.isShown){this.$element.off("keydown.dismiss.bs.modal")}};t.prototype.resize=function(){if(this.isShown){e(window).on("resize.bs.modal",e.proxy(this.handleUpdate,this))}else{e(window).off("resize.bs.modal")}};t.prototype.hideModal=function(){var e=this;this.$element.hide();this.backdrop(function(){e.$body.removeClass("modal-open");e.resetAdjustments();e.resetScrollbar();e.$element.trigger("hidden.bs.modal")})};t.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove();this.$backdrop=null};t.prototype.backdrop=function(n){var i=this;var r=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=e.support.transition&&r;this.$backdrop=e(document.createElement("div")).addClass("modal-backdrop "+r).appendTo(this.$body);this.$element.on("click.dismiss.bs.modal",e.proxy(function(e){if(this.ignoreBackdropClick){this.ignoreBackdropClick=false;return}if(e.target!==e.currentTarget)return;this.options.backdrop=="static"?this.$element[0].focus():this.hide()},this));if(o)this.$backdrop[0].offsetWidth;this.$backdrop.addClass("in");if(!n)return;o?this.$backdrop.one("bsTransitionEnd",n).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):n()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){i.removeBackdrop();n&&n()};e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):a()}else if(n){n()}};t.prototype.handleUpdate=function(){this.adjustDialog()};t.prototype.adjustDialog=function(){var e=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&e?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!e?this.scrollbarWidth:""})};t.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})};t.prototype.checkScrollbar=function(){var e=window.innerWidth;if(!e){var t=document.documentElement.getBoundingClientRect();e=t.right-Math.abs(t.left)}this.bodyIsOverflowing=document.body.clientWidth<e;this.scrollbarWidth=this.measureScrollbar()};t.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"";if(this.bodyIsOverflowing)this.$body.css("padding-right",e+this.scrollbarWidth)};t.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)};t.prototype.measureScrollbar=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure";this.$body.append(e);var t=e.offsetWidth-e.clientWidth;this.$body[0].removeChild(e);return t};function n(n,i){return this.each(function(){var r=e(this);var o=r.data("bs.modal");var a=e.extend({},t.DEFAULTS,r.data(),typeof n=="object"&&n);if(!o)r.data("bs.modal",o=new t(this,a));if(typeof n=="string")o[n](i);else if(a.show)o.show(i)})}var i=e.fn.modal;e.fn.modal=n;e.fn.modal.Constructor=t;e.fn.modal.noConflict=function(){e.fn.modal=i;return this};e(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var i=e(this);var r=i.attr("href");var o=e(i.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,""));var a=o.data("bs.modal")?"toggle":e.extend({remote:!/#/.test(r)&&r},o.data(),i.data());if(i.is("a"))t.preventDefault();o.one("show.bs.modal",function(e){if(e.isDefaultPrevented())return;o.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})});n.call(o,a,this)})}(jQuery);+function(e){"use strict";var t=function(e,t){this.type=null;this.options=null;this.enabled=null;this.timeout=null;this.hoverState=null;this.$element=null;this.inState=null;this.init("tooltip",e,t)};t.VERSION="3.3.7";t.TRANSITION_DURATION=150;t.DEFAULTS={animation:true,placement:"top",selector:false,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:false,container:false,viewport:{selector:"body",padding:0}};t.prototype.init=function(t,n,i){this.enabled=true;this.type=t;this.$element=e(n);this.options=this.getOptions(i);this.$viewport=this.options.viewport&&e(e.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport);this.inState={click:false,hover:false,focus:false};if(this.$element[0]instanceof document.constructor&&!this.options.selector){throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!")}var r=this.options.trigger.split(" ");for(var o=r.length;o--;){var a=r[o];if(a=="click"){this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this))}else if(a!="manual"){var s=a=="hover"?"mouseenter":"focusin";var l=a=="hover"?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,e.proxy(this.enter,this));this.$element.on(l+"."+this.type,this.options.selector,e.proxy(this.leave,this))}}this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()};t.prototype.getDefaults=function(){return t.DEFAULTS};t.prototype.getOptions=function(t){t=e.extend({},this.getDefaults(),this.$element.data(),t);if(t.delay&&typeof t.delay=="number"){t.delay={show:t.delay,hide:t.delay}}return t};t.prototype.getDelegateOptions=function(){var t={};var n=this.getDefaults();this._options&&e.each(this._options,function(e,i){if(n[e]!=i)t[e]=i});return t};t.prototype.enter=function(t){var n=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);if(!n){n=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,n)}if(t instanceof e.Event){n.inState[t.type=="focusin"?"focus":"hover"]=true}if(n.tip().hasClass("in")||n.hoverState=="in"){n.hoverState="in";return}clearTimeout(n.timeout);n.hoverState="in";if(!n.options.delay||!n.options.delay.show)return n.show();n.timeout=setTimeout(function(){if(n.hoverState=="in")n.show()},n.options.delay.show)};t.prototype.isInStateTrue=function(){for(var e in this.inState){if(this.inState[e])return true}return false};t.prototype.leave=function(t){var n=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);if(!n){n=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,n)}if(t instanceof e.Event){n.inState[t.type=="focusout"?"focus":"hover"]=false}if(n.isInStateTrue())return;clearTimeout(n.timeout);n.hoverState="out";if(!n.options.delay||!n.options.delay.hide)return n.hide();n.timeout=setTimeout(function(){if(n.hoverState=="out")n.hide()},n.options.delay.hide)};t.prototype.show=function(){var n=e.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(n);var i=e.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(n.isDefaultPrevented()||!i)return;var r=this;var o=this.tip();var a=this.getUID(this.type);this.setContent();o.attr("id",a);this.$element.attr("aria-describedby",a);if(this.options.animation)o.addClass("fade");var s=typeof this.options.placement=="function"?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement;var l=/\s?auto?\s?/i;var u=l.test(s);if(u)s=s.replace(l,"")||"top";o.detach().css({top:0,left:0,display:"block"}).addClass(s).data("bs."+this.type,this);this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element);this.$element.trigger("inserted.bs."+this.type);var c=this.getPosition();var f=o[0].offsetWidth;var d=o[0].offsetHeight;if(u){var h=s;var p=this.getPosition(this.$viewport);s=s=="bottom"&&c.bottom+d>p.bottom?"top":s=="top"&&c.top-d<p.top?"bottom":s=="right"&&c.right+f>p.width?"left":s=="left"&&c.left-f<p.left?"right":s;o.removeClass(h).addClass(s)}var v=this.getCalculatedOffset(s,c,f,d);this.applyPlacement(v,s);var m=function(){var e=r.hoverState;r.$element.trigger("shown.bs."+r.type);r.hoverState=null;if(e=="out")r.leave(r)};e.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",m).emulateTransitionEnd(t.TRANSITION_DURATION):m()}};t.prototype.applyPlacement=function(t,n){var i=this.tip();var r=i[0].offsetWidth;var o=i[0].offsetHeight;var a=parseInt(i.css("margin-top"),10);var s=parseInt(i.css("margin-left"),10);if(isNaN(a))a=0;if(isNaN(s))s=0;t.top+=a;t.left+=s;e.offset.setOffset(i[0],e.extend({using:function(e){i.css({top:Math.round(e.top),left:Math.round(e.left)})}},t),0);i.addClass("in");var l=i[0].offsetWidth;var u=i[0].offsetHeight;if(n=="top"&&u!=o){t.top=t.top+o-u}var c=this.getViewportAdjustedDelta(n,t,l,u);if(c.left)t.left+=c.left;else t.top+=c.top;var f=/top|bottom/.test(n);var d=f?c.left*2-r+l:c.top*2-o+u;var h=f?"offsetWidth":"offsetHeight";i.offset(t);this.replaceArrow(d,i[0][h],f)};t.prototype.replaceArrow=function(e,t,n){this.arrow().css(n?"left":"top",50*(1-e/t)+"%").css(n?"top":"left","")};t.prototype.setContent=function(){var e=this.tip();var t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t);e.removeClass("fade in top bottom left right")};t.prototype.hide=function(n){var i=this;var r=e(this.$tip);var o=e.Event("hide.bs."+this.type);function a(){if(i.hoverState!="in")r.detach();if(i.$element){i.$element.removeAttr("aria-describedby").trigger("hidden.bs."+i.type)}n&&n()}this.$element.trigger(o);if(o.isDefaultPrevented())return;r.removeClass("in");e.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",a).emulateTransitionEnd(t.TRANSITION_DURATION):a();this.hoverState=null;return this};t.prototype.fixTitle=function(){var e=this.$element;if(e.attr("title")||typeof e.attr("data-original-title")!="string"){e.attr("data-original-title",e.attr("title")||"").attr("title","")}};t.prototype.hasContent=function(){return this.getTitle()};t.prototype.getPosition=function(t){t=t||this.$element;var n=t[0];var i=n.tagName=="BODY";var r=n.getBoundingClientRect();if(r.width==null){r=e.extend({},r,{width:r.right-r.left,height:r.bottom-r.top})}var o=window.SVGElement&&n instanceof window.SVGElement;var a=i?{top:0,left:0}:o?null:t.offset();var s={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop()};var l=i?{width:e(window).width(),height:e(window).height()}:null;return e.extend({},r,s,l,a)};t.prototype.getCalculatedOffset=function(e,t,n,i){return e=="bottom"?{top:t.top+t.height,left:t.left+t.width/2-n/2}:e=="top"?{top:t.top-i,left:t.left+t.width/2-n/2}:e=="left"?{top:t.top+t.height/2-i/2,left:t.left-n}:{top:t.top+t.height/2-i/2,left:t.left+t.width}};t.prototype.getViewportAdjustedDelta=function(e,t,n,i){var r={top:0,left:0};if(!this.$viewport)return r;var o=this.options.viewport&&this.options.viewport.padding||0;var a=this.getPosition(this.$viewport);if(/right|left/.test(e)){var s=t.top-o-a.scroll;var l=t.top+o-a.scroll+i;if(s<a.top){r.top=a.top-s}else if(l>a.top+a.height){r.top=a.top+a.height-l}}else{var u=t.left-o;var c=t.left+o+n;if(u<a.left){r.left=a.left-u}else if(c>a.right){r.left=a.left+a.width-c}}return r};t.prototype.getTitle=function(){var e;var t=this.$element;var n=this.options;e=t.attr("data-original-title")||(typeof n.title=="function"?n.title.call(t[0]):n.title);return e};t.prototype.getUID=function(e){do{e+=~~(Math.random()*1e6)}while(document.getElementById(e));return e};t.prototype.tip=function(){if(!this.$tip){this.$tip=e(this.options.template);if(this.$tip.length!=1){throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!")}}return this.$tip};t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")};t.prototype.enable=function(){this.enabled=true};t.prototype.disable=function(){this.enabled=false};t.prototype.toggleEnabled=function(){this.enabled=!this.enabled};t.prototype.toggle=function(t){var n=this;if(t){n=e(t.currentTarget).data("bs."+this.type);if(!n){n=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,n)}}if(t){n.inState.click=!n.inState.click;if(n.isInStateTrue())n.enter(n);else n.leave(n)}else{n.tip().hasClass("in")?n.leave(n):n.enter(n)}};t.prototype.destroy=function(){var e=this;clearTimeout(this.timeout);this.hide(function(){e.$element.off("."+e.type).removeData("bs."+e.type);if(e.$tip){e.$tip.detach()}e.$tip=null;e.$arrow=null;e.$viewport=null;e.$element=null})};function n(n){return this.each(function(){var i=e(this);var r=i.data("bs.tooltip");var o=typeof n=="object"&&n;if(!r&&/destroy|hide/.test(n))return;if(!r)i.data("bs.tooltip",r=new t(this,o));if(typeof n=="string")r[n]()})}var i=e.fn.tooltip;e.fn.tooltip=n;e.fn.tooltip.Constructor=t;e.fn.tooltip.noConflict=function(){e.fn.tooltip=i;return this}}(jQuery);+function(e){"use strict";var t=function(e,t){this.init("popover",e,t)};if(!e.fn.tooltip)throw new Error("Popover requires tooltip.js");t.VERSION="3.3.7";t.DEFAULTS=e.extend({},e.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'});t.prototype=e.extend({},e.fn.tooltip.Constructor.prototype);t.prototype.constructor=t;t.prototype.getDefaults=function(){return t.DEFAULTS};t.prototype.setContent=function(){var e=this.tip();var t=this.getTitle();var n=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t);e.find(".popover-content").children().detach().end()[this.options.html?typeof n=="string"?"html":"append":"text"](n);e.removeClass("fade top bottom left right in");if(!e.find(".popover-title").html())e.find(".popover-title").hide()};t.prototype.hasContent=function(){return this.getTitle()||this.getContent()};t.prototype.getContent=function(){var e=this.$element;var t=this.options;return e.attr("data-content")||(typeof t.content=="function"?t.content.call(e[0]):t.content)};t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};function n(n){return this.each(function(){var i=e(this);var r=i.data("bs.popover");var o=typeof n=="object"&&n;if(!r&&/destroy|hide/.test(n))return;if(!r)i.data("bs.popover",r=new t(this,o));if(typeof n=="string")r[n]()})}var i=e.fn.popover;e.fn.popover=n;e.fn.popover.Constructor=t;e.fn.popover.noConflict=function(){e.fn.popover=i;return this}}(jQuery);+function(e){"use strict";function t(n,i){this.$body=e(document.body);this.$scrollElement=e(n).is(document.body)?e(window):e(n);this.options=e.extend({},t.DEFAULTS,i);this.selector=(this.options.target||"")+" .nav li > a";this.offsets=[];this.targets=[];this.activeTarget=null;this.scrollHeight=0;this.$scrollElement.on("scroll.bs.scrollspy",e.proxy(this.process,this));this.refresh();this.process()}t.VERSION="3.3.7";t.DEFAULTS={offset:10};t.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)};t.prototype.refresh=function(){var t=this;var n="offset";var i=0;this.offsets=[];this.targets=[];this.scrollHeight=this.getScrollHeight();if(!e.isWindow(this.$scrollElement[0])){n="position";i=this.$scrollElement.scrollTop()}this.$body.find(this.selector).map(function(){var t=e(this);var r=t.data("target")||t.attr("href");var o=/^#./.test(r)&&e(r);return o&&o.length&&o.is(":visible")&&[[o[n]().top+i,r]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){t.offsets.push(this[0]);t.targets.push(this[1])})};t.prototype.process=function(){var e=this.$scrollElement.scrollTop()+this.options.offset;var t=this.getScrollHeight();var n=this.options.offset+t-this.$scrollElement.height();var i=this.offsets;var r=this.targets;var o=this.activeTarget;var a;if(this.scrollHeight!=t){this.refresh()}if(e>=n){return o!=(a=r[r.length-1])&&this.activate(a)}if(o&&e<i[0]){this.activeTarget=null;return this.clear()}for(a=i.length;a--;){o!=r[a]&&e>=i[a]&&(i[a+1]===undefined||e<i[a+1])&&this.activate(r[a])}};t.prototype.activate=function(t){this.activeTarget=t;this.clear();var n=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]';var i=e(n).parents("li").addClass("active");if(i.parent(".dropdown-menu").length){i=i.closest("li.dropdown").addClass("active")}i.trigger("activate.bs.scrollspy")};t.prototype.clear=function(){e(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};function n(n){return this.each(function(){var i=e(this);var r=i.data("bs.scrollspy");var o=typeof n=="object"&&n;if(!r)i.data("bs.scrollspy",r=new t(this,o));if(typeof n=="string")r[n]()})}var i=e.fn.scrollspy;e.fn.scrollspy=n;e.fn.scrollspy.Constructor=t;e.fn.scrollspy.noConflict=function(){e.fn.scrollspy=i;return this};e(window).on("load.bs.scrollspy.data-api",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);n.call(t,t.data())})})}(jQuery);+function(e){"use strict";var t=function(t){this.element=e(t)};t.VERSION="3.3.7";t.TRANSITION_DURATION=150;t.prototype.show=function(){var t=this.element;var n=t.closest("ul:not(.dropdown-menu)");var i=t.data("target");if(!i){i=t.attr("href");i=i&&i.replace(/.*(?=#[^\s]*$)/,"")}if(t.parent("li").hasClass("active"))return;var r=n.find(".active:last a");var o=e.Event("hide.bs.tab",{relatedTarget:t[0]});var a=e.Event("show.bs.tab",{relatedTarget:r[0]});r.trigger(o);t.trigger(a);if(a.isDefaultPrevented()||o.isDefaultPrevented())return;var s=e(i);this.activate(t.closest("li"),n);this.activate(s,s.parent(),function(){r.trigger({type:"hidden.bs.tab",relatedTarget:t[0]});t.trigger({type:"shown.bs.tab",relatedTarget:r[0]})})};t.prototype.activate=function(n,i,r){var o=i.find("> .active");var a=r&&e.support.transition&&(o.length&&o.hasClass("fade")||!!i.find("> .fade").length);function s(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",false);n.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",true);if(a){n[0].offsetWidth;n.addClass("in")}else{n.removeClass("fade")}if(n.parent(".dropdown-menu").length){n.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",true)}r&&r()}o.length&&a?o.one("bsTransitionEnd",s).emulateTransitionEnd(t.TRANSITION_DURATION):s();o.removeClass("in")};function n(n){return this.each(function(){var i=e(this);var r=i.data("bs.tab");if(!r)i.data("bs.tab",r=new t(this));if(typeof n=="string")r[n]()})}var i=e.fn.tab;e.fn.tab=n;e.fn.tab.Constructor=t;e.fn.tab.noConflict=function(){e.fn.tab=i;return this};var r=function(t){t.preventDefault();n.call(e(this),"show")};e(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',r).on("click.bs.tab.data-api",'[data-toggle="pill"]',r)}(jQuery);+function(e){"use strict";var t=function(n,i){this.options=e.extend({},t.DEFAULTS,i);this.$target=e(this.options.target).on("scroll.bs.affix.data-api",e.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",e.proxy(this.checkPositionWithEventLoop,this));this.$element=e(n);this.affixed=null;this.unpin=null;this.pinnedOffset=null;this.checkPosition()};t.VERSION="3.3.7";t.RESET="affix affix-top affix-bottom";t.DEFAULTS={offset:0,target:window};t.prototype.getState=function(e,t,n,i){var r=this.$target.scrollTop();var o=this.$element.offset();var a=this.$target.height();if(n!=null&&this.affixed=="top")return r<n?"top":false;if(this.affixed=="bottom"){if(n!=null)return r+this.unpin<=o.top?false:"bottom";return r+a<=e-i?false:"bottom"}var s=this.affixed==null;var l=s?r:o.top;var u=s?a:t;if(n!=null&&r<=n)return"top";if(i!=null&&l+u>=e-i)return"bottom";return false};t.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(t.RESET).addClass("affix");var e=this.$target.scrollTop();var n=this.$element.offset();return this.pinnedOffset=n.top-e};t.prototype.checkPositionWithEventLoop=function(){setTimeout(e.proxy(this.checkPosition,this),1)};t.prototype.checkPosition=function(){if(!this.$element.is(":visible"))return;var n=this.$element.height();var i=this.options.offset;var r=i.top;var o=i.bottom;var a=Math.max(e(document).height(),e(document.body).height());if(typeof i!="object")o=r=i;if(typeof r=="function")r=i.top(this.$element);if(typeof o=="function")o=i.bottom(this.$element);var s=this.getState(a,n,r,o);if(this.affixed!=s){if(this.unpin!=null)this.$element.css("top","");var l="affix"+(s?"-"+s:"");var u=e.Event(l+".bs.affix");this.$element.trigger(u);if(u.isDefaultPrevented())return;this.affixed=s;this.unpin=s=="bottom"?this.getPinnedOffset():null;this.$element.removeClass(t.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}if(s=="bottom"){this.$element.offset({top:a-n-o})}};function n(n){return this.each(function(){var i=e(this);var r=i.data("bs.affix");var o=typeof n=="object"&&n;if(!r)i.data("bs.affix",r=new t(this,o));if(typeof n=="string")r[n]()})}var i=e.fn.affix;e.fn.affix=n;e.fn.affix.Constructor=t;e.fn.affix.noConflict=function(){e.fn.affix=i;return this};e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var t=e(this);var i=t.data();i.offset=i.offset||{};if(i.offsetBottom!=null)i.offset.bottom=i.offsetBottom;if(i.offsetTop!=null)i.offset.top=i.offsetTop;n.call(t,i)})})}(jQuery);(function(e){if(typeof define==="function"&&define.amd){define(["jquery"],e)}else if(typeof module==="object"&&module.exports){module.exports=e(require("jquery"))}else{e(window.jQuery)}})(function(e){"use strict";var t=typeof define==="function"&&define.amd;var n=function(t){var n=t==="Comic Sans MS"?"Courier New":"Comic Sans MS";var i=e("<div>").css({position:"absolute",left:"-9999px",top:"-9999px",fontSize:"200px"}).text("mmmmmmmmmwwwwwww").appendTo(document.body);var r=i.css("fontFamily",n).width();var o=i.css("fontFamily",t+","+n).width();i.remove();return r!==o};var i=navigator.userAgent;var r=/MSIE|Trident/i.test(i);var o;if(r){var a=/MSIE (\d+[.]\d+)/.exec(i);if(a){o=parseFloat(a[1])}a=/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(i);if(a){o=parseFloat(a[1])}}var s=/Edge\/\d+/.test(i);var l=!!window.CodeMirror;if(!l&&t){if(typeof __webpack_require__==="function"){try{require.resolve("codemirror");l=true}catch(e){}}else if(typeof require!=="undefined"){if(typeof require.resolve!=="undefined"){try{require.resolve("codemirror");l=true}catch(e){}}else if(typeof require.specified!=="undefined"){l=require.specified("codemirror")}}}var u="ontouchstart"in window||navigator.MaxTouchPoints>0||navigator.msMaxTouchPoints>0;var c={isMac:navigator.appVersion.indexOf("Mac")>-1,isMSIE:r,isEdge:s,isFF:!s&&/firefox/i.test(i),isPhantom:/PhantomJS/i.test(i),isWebkit:!s&&/webkit/i.test(i),isChrome:!s&&/chrome/i.test(i),isSafari:!s&&/safari/i.test(i),browserVersion:o,jqueryVersion:parseFloat(e.fn.jquery),isSupportAmd:t,isSupportTouch:u,hasCodeMirror:l,isFontInstalled:n,isW3CRangeSupport:!!document.createRange};var f=function(){var t=function(e){return function(t){return e===t}};var n=function(e,t){return e===t};var i=function(e){return function(t,n){return t[e]===n[e]}};var r=function(){return true};var o=function(){return false};var a=function(e){return function(){return!e.apply(e,arguments)}};var s=function(e,t){return function(n){return e(n)&&t(n)}};var l=function(e){return e};var u=function(e,t){return function(){return e[t].apply(e,arguments)}};var c=0;var f=function(e){var t=++c+"";return e?e+t:t};var d=function(t){var n=e(document);return{top:t.top+n.scrollTop(),left:t.left+n.scrollLeft(),width:t.right-t.left,height:t.bottom-t.top}};var h=function(e){var t={};for(var n in e){if(e.hasOwnProperty(n)){t[e[n]]=n}}return t};var p=function(e,t){t=t||"";return t+e.split(".").map(function(e){return e.substring(0,1).toUpperCase()+e.substring(1)}).join("")};var v=function(e,t,n){var i;return function(){var r=this,o=arguments;var a=function(){i=null;if(!n){e.apply(r,o)}};var s=n&&!i;clearTimeout(i);i=setTimeout(a,t);if(s){e.apply(r,o)}}};return{eq:t,eq2:n,peq2:i,ok:r,fail:o,self:l,not:a,and:s,invoke:u,uniqueId:f,rect2bnd:d,invertObject:h,namespaceToCamel:p,debounce:v}}();var d=function(){var t=function(e){return e[0]};var n=function(e){return e[e.length-1]};var i=function(e){return e.slice(0,e.length-1)};var r=function(e){return e.slice(1)};var o=function(e,t){for(var n=0,i=e.length;n<i;n++){var r=e[n];if(t(r)){return r}}};var a=function(e,t){for(var n=0,i=e.length;n<i;n++){if(!t(e[n])){return false}}return true};var s=function(t,n){return e.inArray(n,t)};var l=function(e,t){return s(e,t)!==-1};var u=function(e,t){t=t||f.self;return e.reduce(function(e,n){return e+t(n)},0)};var c=function(e){var t=[],n=-1,i=e.length;while(++n<i){t[n]=e[n]}return t};var d=function(e){return!e||!e.length};var h=function(e,i){if(!e.length){return[]}var o=r(e);return o.reduce(function(e,t){var r=n(e);if(i(n(r),t)){r[r.length]=t}else{e[e.length]=[t]}return e},[[t(e)]])};var p=function(e){var t=[];for(var n=0,i=e.length;n<i;n++){if(e[n]){t.push(e[n])}}return t};var v=function(e){var t=[];for(var n=0,i=e.length;n<i;n++){if(!l(t,e[n])){t.push(e[n])}}return t};var m=function(e,t){var n=s(e,t);if(n===-1){return null}return e[n+1]};var g=function(e,t){var n=s(e,t);if(n===-1){return null}return e[n-1]};return{head:t,last:n,initial:i,tail:r,prev:g,next:m,find:o,contains:l,all:a,sum:u,from:c,isEmpty:d,clusterBy:h,compact:p,unique:v}}();var h=String.fromCharCode(160);var p="\ufeff";var v=function(){var t=function(t){return t&&e(t).hasClass("note-editable")};var n=function(t){return t&&e(t).hasClass("note-control-sizing")};var i=function(e){e=e.toUpperCase();return function(t){return t&&t.nodeName.toUpperCase()===e}};var r=function(e){return e&&e.nodeType===3};var o=function(e){return e&&e.nodeType===1};var a=function(e){return e&&/^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT/.test(e.nodeName.toUpperCase())};var s=function(e){if(t(e)){return false}return e&&/^DIV|^P|^LI|^H[1-7]/.test(e.nodeName.toUpperCase())};var l=function(e){return e&&/^H[1-7]/.test(e.nodeName.toUpperCase())};var u=i("PRE");var m=i("LI");var g=function(e){return s(e)&&!m(e)};var b=i("TABLE");var y=i("DATA");var w=function(e){return!S(e)&&!C(e)&&!k(e)&&!s(e)&&!b(e)&&!T(e)&&!y(e)};var C=function(e){return e&&/^UL|^OL/.test(e.nodeName.toUpperCase())};var k=i("HR");var x=function(e){return e&&/^TD|^TH/.test(e.nodeName.toUpperCase())};var T=i("BLOCKQUOTE");var S=function(e){return x(e)||T(e)||t(e)};var E=i("A");var N=function(e){return w(e)&&!!F(e,s)};var A=function(e){return w(e)&&!F(e,s)};var I=i("BODY");var D=function(e,t){return e.nextSibling===t||e.previousSibling===t};var R=function(e,t){t=t||f.ok;var n=[];if(e.previousSibling&&t(e.previousSibling)){n.push(e.previousSibling)}n.push(e);if(e.nextSibling&&t(e.nextSibling)){n.push(e.nextSibling)}return n};var $=c.isMSIE&&c.browserVersion<11?"&nbsp;":"<br>";var L=function(e){if(r(e)){return e.nodeValue.length}if(e){return e.childNodes.length}return 0};var P=function(e){var t=L(e);if(t===0){return true}else if(!r(e)&&t===1&&e.innerHTML===$){return true}else if(d.all(e.childNodes,r)&&e.innerHTML===""){return true}return false};var H=function(e){if(!a(e)&&!L(e)){e.innerHTML=$}};var F=function(e,n){while(e){if(n(e)){return e}if(t(e)){break}e=e.parentNode}return null};var j=function(e,n){e=e.parentNode;while(e){if(L(e)!==1){break}if(n(e)){return e}if(t(e)){break}e=e.parentNode}return null};var O=function(e,n){n=n||f.fail;var i=[];F(e,function(e){if(!t(e)){i.push(e)}return n(e)});return i};var M=function(e,t){var n=O(e);return d.last(n.filter(t))};var B=function(t,n){var i=O(t);for(var r=n;r;r=r.parentNode){if(e.inArray(r,i)>-1){return r}}return null};var z=function(e,t){t=t||f.fail;var n=[];while(e){if(t(e)){break}n.push(e);e=e.previousSibling}return n};var q=function(e,t){t=t||f.fail;var n=[];while(e){if(t(e)){break}n.push(e);e=e.nextSibling}return n};var U=function(e,t){var n=[];t=t||f.ok;(function i(r){if(e!==r&&t(r)){n.push(r)}for(var o=0,a=r.childNodes.length;o<a;o++){i(r.childNodes[o])}})(e);return n};var W=function(t,n){var i=t.parentNode;var r=e("<"+n+">")[0];i.insertBefore(r,t);r.appendChild(t);return r};var V=function(e,t){var n=t.nextSibling,i=t.parentNode;if(n){i.insertBefore(e,n)}else{i.appendChild(e)}return e};var _=function(t,n){e.each(n,function(e,n){t.appendChild(n)});return t};var K=function(e){return e.offset===0};var G=function(e){return e.offset===L(e.node)};var Q=function(e){return K(e)||G(e)};var X=function(e,t){while(e&&e!==t){if(ee(e)!==0){return false}e=e.parentNode}return true};var Y=function(e,t){if(!t){return false}while(e&&e!==t){if(ee(e)!==L(e.parentNode)-1){return false}e=e.parentNode}return true};var J=function(e,t){return K(e)&&X(e.node,t)};var Z=function(e,t){return G(e)&&Y(e.node,t)};var ee=function(e){var t=0;while(e=e.previousSibling){t+=1}return t};var te=function(e){return!!(e&&e.childNodes&&e.childNodes.length)};var ne=function(e,n){var i,r;if(e.offset===0){if(t(e.node)){return null}i=e.node.parentNode;r=ee(e.node)}else if(te(e.node)){i=e.node.childNodes[e.offset-1];r=L(i)}else{i=e.node;r=n?0:e.offset-1}return{node:i,offset:r}};var ie=function(e,n){var i,r;if(L(e.node)===e.offset){if(t(e.node)){return null}i=e.node.parentNode;r=ee(e.node)+1}else if(te(e.node)){i=e.node.childNodes[e.offset];r=0}else{i=e.node;r=n?L(e.node):e.offset+1}return{node:i,offset:r}};var re=function(e,t){return e.node===t.node&&e.offset===t.offset};var oe=function(e){if(r(e.node)||!te(e.node)||P(e.node)){return true}var t=e.node.childNodes[e.offset-1];var n=e.node.childNodes[e.offset];if((!t||a(t))&&(!n||a(n))){return true}return false};var ae=function(e,t){while(e){if(t(e)){return e}e=ne(e)}return null};var se=function(e,t){while(e){if(t(e)){return e}e=ie(e)}return null};var le=function(e){if(!r(e.node)){return false}var t=e.node.nodeValue.charAt(e.offset-1);return t&&(t!==" "&&t!==h)};var ue=function(e,t,n,i){var r=e;while(r){n(r);if(re(r,t)){break}var o=i&&e.node!==r.node&&t.node!==r.node;r=ie(r,o)}};var ce=function(e,t){var n=O(t,f.eq(e));return n.map(ee).reverse()};var fe=function(e,t){var n=e;for(var i=0,r=t.length;i<r;i++){if(n.childNodes.length<=t[i]){n=n.childNodes[n.childNodes.length-1]}else{n=n.childNodes[t[i]]}}return n};var de=function(e,t){var n=t&&t.isSkipPaddingBlankHTML;var i=t&&t.isNotSplitEdgePoint;if(Q(e)&&(r(e.node)||i)){if(K(e)){return e.node}else if(G(e)){return e.node.nextSibling}}if(r(e.node)){return e.node.splitText(e.offset)}else{var o=e.node.childNodes[e.offset];var a=V(e.node.cloneNode(false),e.node);_(a,q(o));if(!n){H(e.node);H(a)}return a}};var he=function(e,t,n){var i=O(t.node,f.eq(e));if(!i.length){return null}else if(i.length===1){return de(t,n)}return i.reduce(function(e,i){if(e===t.node){e=de(t,n)}return de({node:i,offset:e?v.position(e):L(i)},n)})};var pe=function(e,t){var n=t?s:S;var i=O(e.node,n);var r=d.last(i)||e.node;var o,a;if(n(r)){o=i[i.length-2];a=r}else{o=r;a=o.parentNode}var l=o&&he(o,e,{isSkipPaddingBlankHTML:t,isNotSplitEdgePoint:t});if(!l&&a===e.node){l=e.node.childNodes[e.offset]}return{rightNode:l,container:a}};var ve=function(e){return document.createElement(e)};var me=function(e){return document.createTextNode(e)};var ge=function(e,t){if(!e||!e.parentNode){return}if(e.removeNode){return e.removeNode(t)}var n=e.parentNode;if(!t){var i=[];var r,o;for(r=0,o=e.childNodes.length;r<o;r++){i.push(e.childNodes[r])}for(r=0,o=i.length;r<o;r++){n.insertBefore(i[r],e)}}n.removeChild(e)};var be=function(e,n){while(e){if(t(e)||!n(e)){break}var i=e.parentNode;ge(e);e=i}};var ye=function(e,t){if(e.nodeName.toUpperCase()===t.toUpperCase()){return e}var n=ve(t);if(e.style.cssText){n.style.cssText=e.style.cssText}_(n,d.from(e.childNodes));V(n,e);ge(e);return n};var we=i("TEXTAREA");var Ce=function(e,t){var n=we(e[0])?e.val():e.html();if(t){return n.replace(/[\n\r]/g,"")}return n};var ke=function(t,n){var i=Ce(t);if(n){var r=/<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g;i=i.replace(r,function(e,t,n){n=n.toUpperCase();var i=/^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(n)&&!!t;var r=/^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(n);return e+(i||r?"\n":"")});i=e.trim(i)}return i};var xe=function(t){var n=e(t);var i=n.offset();var r=n.outerHeight(true);return{left:i.left,top:i.top+r}};var Te=function(e,t){Object.keys(t).forEach(function(n){e.on(n,t[n])})};var Se=function(e,t){Object.keys(t).forEach(function(n){e.off(n,t[n])})};var Ee=function(e){return e&&!v.isText(e)&&d.contains(e.classList,"note-styletag")};return{NBSP_CHAR:h,ZERO_WIDTH_NBSP_CHAR:p,blank:$,emptyPara:"<p>"+$+"</p>",makePredByNodeName:i,isEditable:t,isControlSizing:n,isText:r,isElement:o,isVoid:a,isPara:s,isPurePara:g,isHeading:l,isInline:w,isBlock:f.not(w),isBodyInline:A,isBody:I,isParaInline:N,isPre:u,isList:C,isTable:b,isData:y,isCell:x,isBlockquote:T,isBodyContainer:S,isAnchor:E,isDiv:i("DIV"),isLi:m,isBR:i("BR"),isSpan:i("SPAN"),isB:i("B"),isU:i("U"),isS:i("S"),isI:i("I"),isImg:i("IMG"),isTextarea:we,isEmpty:P,isEmptyAnchor:f.and(E,P),isClosestSibling:D,withClosestSiblings:R,nodeLength:L,isLeftEdgePoint:K,isRightEdgePoint:G,isEdgePoint:Q,isLeftEdgeOf:X,isRightEdgeOf:Y,isLeftEdgePointOf:J,isRightEdgePointOf:Z,prevPoint:ne,nextPoint:ie,isSamePoint:re,isVisiblePoint:oe,prevPointUntil:ae,nextPointUntil:se,isCharPoint:le,walkPoint:ue,ancestor:F,singleChildAncestor:j,listAncestor:O,lastAncestor:M,listNext:q,listPrev:z,listDescendant:U,commonAncestor:B,wrap:W,insertAfter:V,appendChildNodes:_,position:ee,hasChildren:te,makeOffsetPath:ce,fromOffsetPath:fe,splitTree:he,splitPoint:pe,create:ve,createText:me,remove:ge,removeWhile:be,replace:ye,html:ke,value:Ce,posFromPlaceholder:xe,attachEvents:Te,detachEvents:Se,isCustomStyleTag:Ee}}();var m=function(t,n){var i=this;var r=e.summernote.ui;this.memos={};this.modules={};this.layoutInfo={};this.options=n;this.initialize=function(){this.layoutInfo=r.createLayout(t,n);this._initialize();t.hide();return this};this.destroy=function(){this._destroy();t.removeData("summernote");r.removeLayout(t,this.layoutInfo)};this.reset=function(){var e=i.isDisabled();this.code(v.emptyPara);this._destroy();this._initialize();if(e){i.disable()}};this._initialize=function(){var t=e.extend({},this.options.buttons);Object.keys(t).forEach(function(e){i.memo("button."+e,t[e])});var n=e.extend({},this.options.modules,e.summernote.plugins||{});Object.keys(n).forEach(function(e){i.module(e,n[e],true)});Object.keys(this.modules).forEach(function(e){i.initializeModule(e)})};this._destroy=function(){Object.keys(this.modules).reverse().forEach(function(e){i.removeModule(e)});Object.keys(this.memos).forEach(function(e){i.removeMemo(e)});this.triggerEvent("destroy",this)};this.code=function(e){var n=this.invoke("codeview.isActivated");if(e===undefined){this.invoke("codeview.sync");return n?this.layoutInfo.codable.val():this.layoutInfo.editable.html()}else{if(n){this.layoutInfo.codable.val(e)}else{this.layoutInfo.editable.html(e)}t.val(e);this.triggerEvent("change",e)}};this.isDisabled=function(){return this.layoutInfo.editable.attr("contenteditable")==="false"};this.enable=function(){this.layoutInfo.editable.attr("contenteditable",true);this.invoke("toolbar.activate",true);this.triggerEvent("disable",false)};this.disable=function(){if(this.invoke("codeview.isActivated")){this.invoke("codeview.deactivate")}this.layoutInfo.editable.attr("contenteditable",false);this.invoke("toolbar.deactivate",true);this.triggerEvent("disable",true)};this.triggerEvent=function(){var e=d.head(arguments);var n=d.tail(d.from(arguments));var i=this.options.callbacks[f.namespaceToCamel(e,"on")];if(i){i.apply(t[0],n)}t.trigger("summernote."+e,n)};this.initializeModule=function(e){var n=this.modules[e];n.shouldInitialize=n.shouldInitialize||f.ok;if(!n.shouldInitialize()){return}if(n.initialize){n.initialize()}if(n.events){v.attachEvents(t,n.events)}};this.module=function(e,t,n){if(arguments.length===1){return this.modules[e]}this.modules[e]=new t(this);if(!n){this.initializeModule(e)}};this.removeModule=function(e){var n=this.modules[e];if(n.shouldInitialize()){if(n.events){v.detachEvents(t,n.events)}if(n.destroy){n.destroy()}}delete this.modules[e]};this.memo=function(e,t){if(arguments.length===1){return this.memos[e]}this.memos[e]=t};this.removeMemo=function(e){if(this.memos[e]&&this.memos[e].destroy){this.memos[e].destroy()}delete this.memos[e]};this.createInvokeHandlerAndUpdateState=function(e,t){return function(n){i.createInvokeHandler(e,t)(n);i.invoke("buttons.updateCurrentStyle")}};this.createInvokeHandler=function(t,n){return function(r){r.preventDefault();var o=e(r.target);i.invoke(t,n||o.closest("[data-value]").data("value"),o)}};this.invoke=function(){var e=d.head(arguments);var t=d.tail(d.from(arguments));var n=e.split(".");var i=n.length>1;var r=i&&d.head(n);var o=i?d.last(n):d.head(n);var a=this.modules[r||"editor"];if(!r&&this[o]){return this[o].apply(this,t)}else if(a&&a[o]&&a.shouldInitialize()){return a[o].apply(a,t)}};return this.initialize()};e.fn.extend({summernote:function(){var t=e.type(d.head(arguments));var n=t==="string";var i=t==="object";var r=i?d.head(arguments):{};r=e.extend({},e.summernote.options,r);r.langInfo=e.extend(true,{},e.summernote.lang["en-US"],e.summernote.lang[r.lang]);r.icons=e.extend(true,{},e.summernote.options.icons,r.icons);r.tooltip=r.tooltip==="auto"?!c.isSupportTouch:r.tooltip;this.each(function(t,n){var i=e(n);if(!i.data("summernote")){var o=new m(i,r);i.data("summernote",o);i.data("summernote").triggerEvent("init",o.layoutInfo)}});var o=this.first();if(o.length){var a=o.data("summernote");if(n){return a.invoke.apply(a,d.from(arguments))}else if(r.focus){a.invoke("editor.focus")}}return this}});var g=function(t,n,i,r){this.render=function(o){var a=e(t);if(i&&i.contents){a.html(i.contents)}if(i&&i.className){a.addClass(i.className)}if(i&&i.data){e.each(i.data,function(e,t){a.attr("data-"+e,t)})}if(i&&i.click){a.on("click",i.click)}if(n){var s=a.find(".note-children-container");n.forEach(function(e){e.render(s.length?s:a)})}if(r){r(a,i)}if(i&&i.callback){i.callback(a)}if(o){o.append(a)}return a}};var b={create:function(t,n){return function(){var i=e.isArray(arguments[0])?arguments[0]:[];var r=typeof arguments[1]==="object"?arguments[1]:arguments[0];if(r&&r.children){i=r.children}return new g(t,i,r,n)}}};var y=b.create('<div class="note-editor note-frame panel panel-default"/>');var w=b.create('<div class="note-toolbar panel-heading"/>');var C=b.create('<div class="note-editing-area"/>');var k=b.create('<textarea class="note-codable"/>');var x=b.create('<div class="note-editable panel-body" contentEditable="true"/>');var T=b.create(['<div class="note-statusbar">','  <div class="note-resizebar">','    <div class="note-icon-bar"/>','    <div class="note-icon-bar"/>','    <div class="note-icon-bar"/>',"  </div>","</div>"].join(""));var S=b.create('<div class="note-editor"/>');var E=b.create('<div class="note-editable" contentEditable="true"/>');var N=b.create('<div class="note-btn-group btn-group">');var A=b.create('<div class="dropdown-menu">',function(t,n){var i=e.isArray(n.items)?n.items.map(function(e){var t=typeof e==="string"?e:e.value||"";var i=n.template?n.template(e):e;var r=typeof e==="object"?e.option:undefined;var o='data-value="'+t+'"';var a=r!==undefined?' data-option="'+r+'"':"";return'<li><a href="#" '+(o+a)+">"+i+"</a></li>"}).join(""):n.items;t.html(i)});var I=function(e,t){return e+" "+H(t.icons.caret,"span")};var D=b.create('<div class="dropdown-menu note-check">',function(t,n){var i=e.isArray(n.items)?n.items.map(function(e){var t=typeof e==="string"?e:e.value||"";var i=n.template?n.template(e):e;return'<li><a href="#" data-value="'+t+'">'+H(n.checkClassName)+" "+i+"</a></li>"}).join(""):n.items;t.html(i)});var R=b.create('<div class="note-color-palette"/>',function(e,t){var n=[];for(var i=0,r=t.colors.length;i<r;i++){var o=t.eventName;var a=t.colors[i];var s=[];for(var l=0,u=a.length;l<u;l++){var c=a[l];s.push(['<button type="button" class="note-color-btn"','style="background-color:',c,'" ','data-event="',o,'" ','data-value="',c,'" ','title="',c,'" ','data-toggle="button" tabindex="-1"></button>'].join(""))}n.push('<div class="note-color-row">'+s.join("")+"</div>")}e.html(n.join(""));if(t.tooltip){e.find(".note-color-btn").tooltip({container:"body",trigger:"hover",placement:"bottom"})}});var $=b.create('<div class="modal" aria-hidden="false" tabindex="-1"/>',function(e,t){if(t.fade){e.addClass("fade")}e.html(['<div class="modal-dialog">','  <div class="modal-content">',t.title?'    <div class="modal-header">'+'      <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+'      <h4 class="modal-title">'+t.title+"</h4>"+"    </div>":"",'    <div class="modal-body">'+t.body+"</div>",t.footer?'    <div class="modal-footer">'+t.footer+"</div>":"","  </div>","</div>"].join(""))});var L=b.create(['<div class="note-popover popover in">','  <div class="arrow"/>','  <div class="popover-content note-children-container"/>',"</div>"].join(""),function(e,t){var n=typeof t.direction!=="undefined"?t.direction:"bottom";e.addClass(n);if(t.hideArrow){e.find(".arrow").hide()}});var P=b.create('<div class="checkbox"></div>',function(e,t){e.html([" <label"+(t.id?' for="'+t.id+'"':"")+">",' <input type="checkbox"'+(t.id?' id="'+t.id+'"':""),(t.checked?" checked":"")+"/>",t.text?t.text:"","</label>"].join(""))});var H=function(e,t){t=t||"i";return"<"+t+' class="'+e+'"/>'};var F={editor:y,toolbar:w,editingArea:C,codable:k,editable:x,statusbar:T,airEditor:S,airEditable:E,buttonGroup:N,dropdown:A,dropdownButtonContents:I,dropdownCheck:D,palette:R,dialog:$,popover:L,checkbox:P,icon:H,options:{},button:function(e,t){return b.create('<button type="button" class="note-btn btn btn-default btn-sm" tabindex="-1">',function(e,t){if(t&&t.tooltip&&self.options.tooltip){e.attr({title:t.tooltip}).tooltip({container:"body",trigger:"hover",placement:"bottom"})}})(e,t)},toggleBtn:function(e,t){e.toggleClass("disabled",!t);e.attr("disabled",!t)},toggleBtnActive:function(e,t){e.toggleClass("active",t)},onDialogShown:function(e,t){e.one("shown.bs.modal",t)},onDialogHidden:function(e,t){e.one("hidden.bs.modal",t)},showDialog:function(e){e.modal("show")},hideDialog:function(e){e.modal("hide")},createLayout:function(e,t){self.options=t;var n=(t.airMode?F.airEditor([F.editingArea([F.airEditable()])]):F.editor([F.toolbar(),F.editingArea([F.codable(),F.editable()]),F.statusbar()])).render();n.insertAfter(e);return{note:e,editor:n,toolbar:n.find(".note-toolbar"),editingArea:n.find(".note-editing-area"),editable:n.find(".note-editable"),codable:n.find(".note-codable"),statusbar:n.find(".note-statusbar")}},removeLayout:function(e,t){e.html(t.editable.html());t.editor.remove();e.show()}};e.summernote=e.summernote||{lang:{}};e.extend(e.summernote.lang,{"en-US":{font:{bold:"Bold",italic:"Italic",underline:"Underline",clear:"Remove Font Style",height:"Line Height",name:"Font Family",strikethrough:"Strikethrough",subscript:"Subscript",superscript:"Superscript",size:"Font Size"},image:{image:"Picture",insert:"Insert Image",resizeFull:"Resize Full",resizeHalf:"Resize Half",resizeQuarter:"Resize Quarter",floatLeft:"Float Left",floatRight:"Float Right",floatNone:"Float None",shapeRounded:"Shape: Rounded",shapeCircle:"Shape: Circle",shapeThumbnail:"Shape: Thumbnail",shapeNone:"Shape: None",dragImageHere:"Drag image or text here",dropImage:"Drop image or Text",selectFromFiles:"Select from files",maximumFileSize:"Maximum file size",maximumFileSizeError:"Maximum file size exceeded.",url:"Image URL",remove:"Remove Image"},video:{video:"Video",videoLink:"Video Link",insert:"Insert Video",url:"Video URL?",providers:"(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)"},link:{link:"Link",insert:"Insert Link",unlink:"Unlink",edit:"Edit",textToDisplay:"Text to display",url:"To what URL should this link go?",openInNewWindow:"Open in new window"},table:{table:"Table",addRowAbove:"Add row above",addRowBelow:"Add row below",addColLeft:"Add column left",addColRight:"Add column right",delRow:"Delete row",delCol:"Delete column",delTable:"Delete table"},hr:{insert:"Insert Horizontal Rule"},style:{style:"Style",p:"Normal",blockquote:"Quote",pre:"Code",h1:"Header 1",h2:"Header 2",h3:"Header 3",h4:"Header 4",h5:"Header 5",h6:"Header 6"},lists:{unordered:"Unordered list",ordered:"Ordered list"},options:{help:"Help",fullscreen:"Full Screen",codeview:"Code View"},paragraph:{paragraph:"Paragraph",outdent:"Outdent",indent:"Indent",left:"Align left",center:"Align center",right:"Align right",justify:"Justify full"},color:{recent:"Recent Color",more:"More Color",background:"Background Color",foreground:"Foreground Color",transparent:"Transparent",setTransparent:"Set transparent",reset:"Reset",resetToDefault:"Reset to default"},shortcut:{shortcuts:"Keyboard shortcuts",close:"Close",textFormatting:"Text formatting",action:"Action",paragraphFormatting:"Paragraph formatting",documentStyle:"Document Style",extraKeys:"Extra keys"},help:{insertParagraph:"Insert Paragraph",undo:"Undoes the last command",redo:"Redoes the last command",tab:"Tab",untab:"Untab",bold:"Set a bold style",italic:"Set a italic style",underline:"Set a underline style",strikethrough:"Set a strikethrough style",removeFormat:"Clean a style",justifyLeft:"Set left align",justifyCenter:"Set center align",justifyRight:"Set right align",justifyFull:"Set full align",insertUnorderedList:"Toggle unordered list",insertOrderedList:"Toggle ordered list",outdent:"Outdent on current paragraph",indent:"Indent on current paragraph",formatPara:"Change current block's format as a paragraph(P tag)",formatH1:"Change current block's format as H1",formatH2:"Change current block's format as H2",formatH3:"Change current block's format as H3",formatH4:"Change current block's format as H4",formatH5:"Change current block's format as H5",formatH6:"Change current block's format as H6",insertHorizontalRule:"Insert horizontal rule","linkDialog.show":"Show Link Dialog"},history:{undo:"Undo",redo:"Redo"},specialChar:{specialChar:"SPECIAL CHARACTERS",select:"Select Special characters"}}});var j=function(){var e={BACKSPACE:8,TAB:9,ENTER:13,SPACE:32,DELETE:46,LEFT:37,UP:38,RIGHT:39,DOWN:40,NUM0:48,NUM1:49,NUM2:50,NUM3:51,NUM4:52,NUM5:53,NUM6:54,NUM7:55,NUM8:56,B:66,E:69,I:73,J:74,K:75,L:76,R:82,S:83,U:85,V:86,Y:89,Z:90,SLASH:191,LEFTBRACKET:219,BACKSLASH:220,RIGHTBRACKET:221};return{isEdit:function(t){return d.contains([e.BACKSPACE,e.TAB,e.ENTER,e.SPACE,e.DELETE],t)},isMove:function(t){return d.contains([e.LEFT,e.UP,e.RIGHT,e.DOWN],t)},nameFromCode:f.invertObject(e),code:e}}();var O=function(){var t=function(e,t){var n=e.parentElement(),i;var r=document.body.createTextRange(),o;var a=d.from(n.childNodes);for(i=0;i<a.length;i++){if(v.isText(a[i])){continue}r.moveToElementText(a[i]);if(r.compareEndPoints("StartToStart",e)>=0){break}o=a[i]}if(i!==0&&v.isText(a[i-1])){var s=document.body.createTextRange(),l=null;s.moveToElementText(o||n);s.collapse(!o);l=o?o.nextSibling:n.firstChild;var u=e.duplicate();u.setEndPoint("StartToStart",s);var c=u.text.replace(/[\r\n]/g,"").length;while(c>l.nodeValue.length&&l.nextSibling){c-=l.nodeValue.length;l=l.nextSibling}var f=l.nodeValue;if(t&&l.nextSibling&&v.isText(l.nextSibling)&&c===l.nodeValue.length){c-=l.nodeValue.length;l=l.nextSibling}n=l;i=c}return{cont:n,offset:i}};var n=function(e){var t=function(e,n){var i,r;if(v.isText(e)){var o=v.listPrev(e,f.not(v.isText));var a=d.last(o).previousSibling;i=a||e.parentNode;n+=d.sum(d.tail(o),v.nodeLength);r=!a}else{i=e.childNodes[n]||e;if(v.isText(i)){return t(i,0)}n=0;r=false}return{node:i,collapseToStart:r,offset:n}};var n=document.body.createTextRange();var i=t(e.node,e.offset);n.moveToElementText(i.node);n.collapse(i.collapseToStart);n.moveStart("character",i.offset);return n};var i=function(t,r,o,a){this.sc=t;this.so=r;this.ec=o;this.eo=a;var s=function(){if(c.isW3CRangeSupport){var e=document.createRange();e.setStart(t,r);e.setEnd(o,a);return e}else{var i=n({node:t,offset:r});i.setEndPoint("EndToEnd",n({node:o,offset:a}));return i}};this.getPoints=function(){return{sc:t,so:r,ec:o,eo:a}};this.getStartPoint=function(){return{node:t,offset:r}};this.getEndPoint=function(){return{node:o,offset:a}};this.select=function(){var e=s();if(c.isW3CRangeSupport){var t=document.getSelection();if(t.rangeCount>0){t.removeAllRanges()}t.addRange(e)}else{e.select()}return this};this.scrollIntoView=function(t){var n=e(t).height();if(t.scrollTop+n<this.sc.offsetTop){t.scrollTop+=Math.abs(t.scrollTop+n-this.sc.offsetTop)}return this};this.normalize=function(){var e=function(e,t){if(v.isVisiblePoint(e)&&!v.isEdgePoint(e)||v.isVisiblePoint(e)&&v.isRightEdgePoint(e)&&!t||v.isVisiblePoint(e)&&v.isLeftEdgePoint(e)&&t||v.isVisiblePoint(e)&&v.isBlock(e.node)&&v.isEmpty(e.node)){return e}var n=v.ancestor(e.node,v.isBlock);if((v.isLeftEdgePointOf(e,n)||v.isVoid(v.prevPoint(e).node))&&!t||(v.isRightEdgePointOf(e,n)||v.isVoid(v.nextPoint(e).node))&&t){if(v.isVisiblePoint(e)){return e}t=!t}var i=t?v.nextPointUntil(v.nextPoint(e),v.isVisiblePoint):v.prevPointUntil(v.prevPoint(e),v.isVisiblePoint);return i||e};var t=e(this.getEndPoint(),false);var n=this.isCollapsed()?t:e(this.getStartPoint(),true);return new i(n.node,n.offset,t.node,t.offset)};this.nodes=function(e,t){e=e||f.ok;var n=t&&t.includeAncestor;var i=t&&t.fullyContains;var r=this.getStartPoint();var o=this.getEndPoint();var a=[];var s=[];v.walkPoint(r,o,function(t){if(v.isEditable(t.node)){return}var r;if(i){if(v.isLeftEdgePoint(t)){s.push(t.node)}if(v.isRightEdgePoint(t)&&d.contains(s,t.node)){r=t.node}}else if(n){r=v.ancestor(t.node,e)}else{r=t.node}if(r&&e(r)){a.push(r)}},true);return d.unique(a)};this.commonAncestor=function(){return v.commonAncestor(t,o)};this.expand=function(e){var n=v.ancestor(t,e);var s=v.ancestor(o,e);if(!n&&!s){return new i(t,r,o,a)}var l=this.getPoints();if(n){l.sc=n;l.so=0}if(s){l.ec=s;l.eo=v.nodeLength(s)}return new i(l.sc,l.so,l.ec,l.eo)};this.collapse=function(e){if(e){return new i(t,r,t,r)}else{return new i(o,a,o,a)}};this.splitText=function(){var e=t===o;var n=this.getPoints();if(v.isText(o)&&!v.isEdgePoint(this.getEndPoint())){o.splitText(a)}if(v.isText(t)&&!v.isEdgePoint(this.getStartPoint())){n.sc=t.splitText(r);n.so=0;if(e){n.ec=n.sc;n.eo=a-r}}return new i(n.sc,n.so,n.ec,n.eo)};this.deleteContents=function(){if(this.isCollapsed()){return this}var t=this.splitText();var n=t.nodes(null,{fullyContains:true});var r=v.prevPointUntil(t.getStartPoint(),function(e){return!d.contains(n,e.node)});var o=[];e.each(n,function(e,t){var n=t.parentNode;if(r.node!==n&&v.nodeLength(n)===1){o.push(n)}v.remove(t,false)});e.each(o,function(e,t){v.remove(t,false)});return new i(r.node,r.offset,r.node,r.offset).normalize()};var l=function(e){return function(){var n=v.ancestor(t,e);return!!n&&n===v.ancestor(o,e)}};this.isOnEditable=l(v.isEditable);this.isOnList=l(v.isList);this.isOnAnchor=l(v.isAnchor);this.isOnCell=l(v.isCell);this.isOnData=l(v.isData);this.isLeftEdgeOf=function(e){if(!v.isLeftEdgePoint(this.getStartPoint())){return false}var t=v.ancestor(this.sc,e);return t&&v.isLeftEdgeOf(this.sc,t)};this.isCollapsed=function(){return t===o&&r===a};this.wrapBodyInlineWithPara=function(){if(v.isBodyContainer(t)&&v.isEmpty(t)){t.innerHTML=v.emptyPara;return new i(t.firstChild,0,t.firstChild,0)}var e=this.normalize();if(v.isParaInline(t)||v.isPara(t)){return e}var n;if(v.isInline(e.sc)){var r=v.listAncestor(e.sc,f.not(v.isInline));n=d.last(r);if(!v.isInline(n)){n=r[r.length-2]||e.sc.childNodes[e.so]}}else{n=e.sc.childNodes[e.so>0?e.so-1:0]}var o=v.listPrev(n,v.isParaInline).reverse();o=o.concat(v.listNext(n.nextSibling,v.isParaInline));if(o.length){var a=v.wrap(d.head(o),"p");v.appendChildNodes(a,d.tail(o))}return this.normalize()};this.insertNode=function(e){var t=this.wrapBodyInlineWithPara().deleteContents();var n=v.splitPoint(t.getStartPoint(),v.isInline(e));if(n.rightNode){n.rightNode.parentNode.insertBefore(e,n.rightNode)}else{n.container.appendChild(e)}return e};this.pasteHTML=function(t){var n=e("<div></div>").html(t)[0];var i=d.from(n.childNodes);var r=this.wrapBodyInlineWithPara().deleteContents();return i.reverse().map(function(e){return r.insertNode(e)}).reverse()};this.toString=function(){var e=s();return c.isW3CRangeSupport?e.toString():e.text};this.getWordRange=function(e){var t=this.getEndPoint();if(!v.isCharPoint(t)){return this}var n=v.prevPointUntil(t,function(e){return!v.isCharPoint(e)});if(e){t=v.nextPointUntil(t,function(e){return!v.isCharPoint(e)})}return new i(n.node,n.offset,t.node,t.offset)};this.bookmark=function(e){return{s:{path:v.makeOffsetPath(e,t),offset:r},e:{path:v.makeOffsetPath(e,o),offset:a}}};this.paraBookmark=function(e){return{s:{path:d.tail(v.makeOffsetPath(d.head(e),t)),offset:r},e:{path:d.tail(v.makeOffsetPath(d.last(e),o)),offset:a}}};this.getClientRects=function(){var e=s();return e.getClientRects()}};return{create:function(e,t,n,r){if(arguments.length===4){return new i(e,t,n,r)}else if(arguments.length===2){n=e;r=t;return new i(e,t,n,r)}else{var o=this.createFromSelection();if(!o&&arguments.length===1){o=this.createFromNode(arguments[0]);return o.collapse(v.emptyPara===arguments[0].innerHTML)}return o}},createFromSelection:function(){var e,n,r,o;if(c.isW3CRangeSupport){var a=document.getSelection();if(!a||a.rangeCount===0){return null}else if(v.isBody(a.anchorNode)){return null}var s=a.getRangeAt(0);e=s.startContainer;n=s.startOffset;r=s.endContainer;o=s.endOffset}else{var l=document.selection.createRange();var u=l.duplicate();u.collapse(false);var f=l;f.collapse(true);var d=t(f,true),h=t(u,false);if(v.isText(d.node)&&v.isLeftEdgePoint(d)&&v.isTextNode(h.node)&&v.isRightEdgePoint(h)&&h.node.nextSibling===d.node){d=h}e=d.cont;n=d.offset;r=h.cont;o=h.offset}return new i(e,n,r,o)},createFromNode:function(e){var t=e;var n=0;var i=e;var r=v.nodeLength(i);if(v.isVoid(t)){n=v.listPrev(t).length-1;t=t.parentNode}if(v.isBR(i)){r=v.listPrev(i).length-1;i=i.parentNode}else if(v.isVoid(i)){r=v.listPrev(i).length;i=i.parentNode}return this.create(t,n,i,r)},createFromNodeBefore:function(e){return this.createFromNode(e).collapse(true)},createFromNodeAfter:function(e){return this.createFromNode(e).collapse()},createFromBookmark:function(e,t){var n=v.fromOffsetPath(e,t.s.path);var r=t.s.offset;var o=v.fromOffsetPath(e,t.e.path);var a=t.e.offset;return new i(n,r,o,a)},createFromParaBookmark:function(e,t){var n=e.s.offset;var r=e.e.offset;var o=v.fromOffsetPath(d.head(t),e.s.path);var a=v.fromOffsetPath(d.last(t),e.e.path);return new i(o,n,a,r)}}}();var M=function(){var t=function(t){return e.Deferred(function(n){e.extend(new FileReader,{onload:function(e){var t=e.target.result;n.resolve(t)},onerror:function(){n.reject(this)}}).readAsDataURL(t)}).promise()};var n=function(t){return e.Deferred(function(n){var i=e("<img>");i.one("load",function(){i.off("error abort");n.resolve(i)}).one("error abort",function(){i.off("load").detach();n.reject(i)}).css({display:"none"}).appendTo(document.body).attr("src",t)}).promise()};return{readFileAsDataURL:t,createImage:n}}();var B=function(e){var t=[],n=-1;var i=e[0];var r=function(){var t=O.create(i);var n={s:{path:[],offset:0},e:{path:[],offset:0}};return{contents:e.html(),bookmark:t?t.bookmark(i):n}};var o=function(t){if(t.contents!==null){e.html(t.contents)}if(t.bookmark!==null){O.createFromBookmark(i,t.bookmark).select()}};this.rewind=function(){if(e.html()!==t[n].contents){this.recordUndo()}n=0;o(t[n])};this.reset=function(){t=[];n=-1;e.html("");this.recordUndo()};this.undo=function(){if(e.html()!==t[n].contents){this.recordUndo()}if(0<n){n--;o(t[n])}};this.redo=function(){if(t.length-1>n){n++;o(t[n])}};this.recordUndo=function(){n++;if(t.length>n){t=t.slice(0,n)}t.push(r())}};var z=function(){var t=function(t,n){if(c.jqueryVersion<1.9){var i={};e.each(n,function(e,n){i[n]=t.css(n)});return i}return t.css.call(t,n)};this.fromNode=function(e){var n=["font-family","font-size","text-align","list-style-type","line-height"];var i=t(e,n)||{};i["font-size"]=parseInt(i["font-size"],10);return i};this.stylePara=function(t,n){e.each(t.nodes(v.isPara,{includeAncestor:true}),function(t,i){e(i).css(n)})};this.styleNodes=function(t,n){t=t.splitText();var i=n&&n.nodeName||"SPAN";var r=!!(n&&n.expandClosestSibling);var o=!!(n&&n.onlyPartialContains);if(t.isCollapsed()){return[t.insertNode(v.create(i))]}var a=v.makePredByNodeName(i);var s=t.nodes(v.isText,{fullyContains:true}).map(function(e){return v.singleChildAncestor(e,a)||v.wrap(e,i)});if(r){if(o){var l=t.nodes();a=f.and(a,function(e){return d.contains(l,e)})}return s.map(function(t){var n=v.withClosestSiblings(t,a);var i=d.head(n);var r=d.tail(n);e.each(r,function(e,t){v.appendChildNodes(i,t.childNodes);v.remove(t)});return d.head(n)})}else{return s}};this.current=function(t){var n=e(!v.isElement(t.sc)?t.sc.parentNode:t.sc);var i=this.fromNode(n);try{i=e.extend(i,{"font-bold":document.queryCommandState("bold")?"bold":"normal","font-italic":document.queryCommandState("italic")?"italic":"normal","font-underline":document.queryCommandState("underline")?"underline":"normal","font-subscript":document.queryCommandState("subscript")?"subscript":"normal","font-superscript":document.queryCommandState("superscript")?"superscript":"normal","font-strikethrough":document.queryCommandState("strikethrough")?"strikethrough":"normal","font-family":document.queryCommandValue("fontname")||i["font-family"]})}catch(e){}if(!t.isOnList()){i["list-style"]="none"}else{var r=["circle","disc","disc-leading-zero","square"];var o=e.inArray(i["list-style-type"],r)>-1;i["list-style"]=o?"unordered":"ordered"}var a=v.ancestor(t.sc,v.isPara);if(a&&a.style["line-height"]){i["line-height"]=a.style.lineHeight}else{var s=parseInt(i["line-height"],10)/parseInt(i["font-size"],10);i["line-height"]=s.toFixed(1)}i.anchor=t.isOnAnchor()&&v.ancestor(t.sc,v.isAnchor);i.ancestors=v.listAncestor(t.sc,v.isEditable);i.range=t;return i}};var q=function(){var t=this;this.insertOrderedList=function(e){this.toggleList("OL",e)};this.insertUnorderedList=function(e){this.toggleList("UL",e)};this.indent=function(t){var n=this;var i=O.create(t).wrapBodyInlineWithPara();var r=i.nodes(v.isPara,{includeAncestor:true});var o=d.clusterBy(r,f.peq2("parentNode"));e.each(o,function(t,i){var r=d.head(i);if(v.isLi(r)){n.wrapList(i,r.parentNode.nodeName)}else{e.each(i,function(t,n){e(n).css("marginLeft",function(e,t){return(parseInt(t,10)||0)+25})})}});i.select()};this.outdent=function(t){var n=this;var i=O.create(t).wrapBodyInlineWithPara();var r=i.nodes(v.isPara,{includeAncestor:true});var o=d.clusterBy(r,f.peq2("parentNode"));e.each(o,function(t,i){var r=d.head(i);if(v.isLi(r)){n.releaseList([i])}else{e.each(i,function(t,n){e(n).css("marginLeft",function(e,t){t=parseInt(t,10)||0;return t>25?t-25:""})})}});i.select()};this.toggleList=function(n,i){var r=O.create(i).wrapBodyInlineWithPara();var o=r.nodes(v.isPara,{includeAncestor:true});var a=r.paraBookmark(o);var s=d.clusterBy(o,f.peq2("parentNode"));if(d.find(o,v.isPurePara)){var l=[];e.each(s,function(e,i){l=l.concat(t.wrapList(i,n))});o=l}else{var u=r.nodes(v.isList,{includeAncestor:true}).filter(function(t){return!e.nodeName(t,n)});if(u.length){e.each(u,function(e,t){v.replace(t,n)})}else{o=this.releaseList(s,true)}}O.createFromParaBookmark(a,o).select()};this.wrapList=function(e,t){var n=d.head(e);var i=d.last(e);var r=v.isList(n.previousSibling)&&n.previousSibling;var o=v.isList(i.nextSibling)&&i.nextSibling;var a=r||v.insertAfter(v.create(t||"UL"),i);e=e.map(function(e){return v.isPurePara(e)?v.replace(e,"LI"):e});v.appendChildNodes(a,e);if(o){v.appendChildNodes(a,d.from(o.childNodes));v.remove(o)}return e};this.releaseList=function(t,n){var i=[];e.each(t,function(t,r){var o=d.head(r);var a=d.last(r);var s=n?v.lastAncestor(o,v.isList):o.parentNode;var l=s.childNodes.length>1?v.splitTree(s,{node:a.parentNode,offset:v.position(a)+1},{isSkipPaddingBlankHTML:true}):null;var u=v.splitTree(s,{node:o.parentNode,offset:v.position(o)},{isSkipPaddingBlankHTML:true});r=n?v.listDescendant(u,v.isLi):d.from(u.childNodes).filter(v.isLi);if(n||!v.isList(s.parentNode)){r=r.map(function(e){return v.replace(e,"P")})}e.each(d.from(r).reverse(),function(e,t){v.insertAfter(t,s)});var c=d.compact([s,u,l]);e.each(c,function(t,n){var i=[n].concat(v.listDescendant(n,v.isList));e.each(i.reverse(),function(e,t){if(!v.nodeLength(t)){v.remove(t,true)}})});i=i.concat(r)});return i}};var U=function(){var t=new q;this.insertTab=function(e,t){var n=v.createText(new Array(t+1).join(v.NBSP_CHAR));e=e.deleteContents();e.insertNode(n,true);e=O.create(n,t);e.select()};this.insertParagraph=function(n){var i=O.create(n);i=i.deleteContents();i=i.wrapBodyInlineWithPara();var r=v.ancestor(i.sc,v.isPara);var o;if(r){if(v.isEmpty(r)&&v.isLi(r)){t.toggleList(r.parentNode.nodeName);return}else if(v.isEmpty(r)&&v.isPara(r)&&v.isBlockquote(r.parentNode)){v.insertAfter(r,r.parentNode);o=r}else{o=v.splitTree(r,i.getStartPoint());var a=v.listDescendant(r,v.isEmptyAnchor);a=a.concat(v.listDescendant(o,v.isEmptyAnchor));e.each(a,function(e,t){v.remove(t)});if((v.isHeading(o)||v.isPre(o)||v.isCustomStyleTag(o))&&v.isEmpty(o)){o=v.replace(o,"p")}}}else{var s=i.sc.childNodes[i.so];o=e(v.emptyPara)[0];if(s){i.sc.insertBefore(o,s)}else{i.sc.appendChild(o)}}O.create(o,0).normalize().select().scrollIntoView(n)}};var W=function(e,t,n,i){var r={colPos:0,rowPos:0};var o=[];var a=[];function s(){if(!e||!e.tagName||e.tagName.toLowerCase()!=="td"&&e.tagName.toLowerCase()!=="th"){console.error("Impossible to identify start Cell point.",e);return}r.colPos=e.cellIndex;if(!e.parentElement||!e.parentElement.tagName||e.parentElement.tagName.toLowerCase()!=="tr"){console.error("Impossible to identify start Row point.",e);return}r.rowPos=e.parentElement.rowIndex}function l(e,t,n,i,r,a,s){var l={baseRow:n,baseCell:i,isRowSpan:r,isColSpan:a,isVirtual:s};if(!o[e]){o[e]=[]}o[e][t]=l}function u(e,t,n,i){return{baseCell:e.baseCell,action:t,virtualTable:{rowIndex:n,cellIndex:i}}}function c(e,t){if(!o[e]){return t}if(!o[e][t]){return t}var n=t;while(o[e][n]){n++;if(!o[e][n]){return n}}}function f(e,t){var n=c(e.rowIndex,t.cellIndex);var i=t.colSpan>1;var o=t.rowSpan>1;var a=e.rowIndex===r.rowPos&&t.cellIndex===r.colPos;l(e.rowIndex,n,e,t,o,i,false);var s=t.attributes.rowSpan?parseInt(t.attributes.rowSpan.value,10):0;if(s>1){for(var u=1;u<s;u++){var f=e.rowIndex+u;d(f,n,t,a);l(f,n,e,t,true,i,true)}}var h=t.attributes.colSpan?parseInt(t.attributes.colSpan.value,10):0;if(h>1){for(var p=1;p<h;p++){var v=c(e.rowIndex,n+p);d(e.rowIndex,v,t,a);l(e.rowIndex,v,e,t,o,true,true)}}}function d(e,t,n,i){if(e===r.rowPos&&r.colPos>=n.cellIndex&&n.cellIndex<=t&&!i){r.colPos++}}function h(){var e=i.rows;for(var t=0;t<e.length;t++){var n=e[t].cells;for(var r=0;r<n.length;r++){f(e[t],n[r])}}}function p(e){switch(t){case W.where.Column:if(e.isColSpan){return W.resultAction.SubtractSpanCount}break;case W.where.Row:if(!e.isVirtual&&e.isRowSpan){return W.resultAction.AddCell}else if(e.isRowSpan){return W.resultAction.SubtractSpanCount}break}return W.resultAction.RemoveCell}function v(e){switch(t){case W.where.Column:if(e.isColSpan){return W.resultAction.SumSpanCount}else if(e.isRowSpan&&e.isVirtual){return W.resultAction.Ignore}break;case W.where.Row:if(e.isRowSpan){return W.resultAction.SumSpanCount}else if(e.isColSpan&&e.isVirtual){return W.resultAction.Ignore}break}return W.resultAction.AddCell}function m(){s();h()}this.getActionList=function(){var e=t===W.where.Row?r.rowPos:-1;var i=t===W.where.Column?r.colPos:-1;var s=0;var l=true;while(l){var c=e>=0?e:s;var f=i>=0?i:s;var d=o[c];if(!d){l=false;return a}var h=d[f];if(!h){l=false;return a}var m=W.resultAction.Ignore;switch(n){case W.requestAction.Add:m=v(h);break;case W.requestAction.Delete:m=p(h);break}a.push(u(h,m,c,f));s++}return a};m()};W.where={Row:0,Column:1};W.requestAction={Add:0,Delete:1};W.resultAction={Ignore:0,SubtractSpanCount:1,RemoveCell:2,AddCell:3,SumSpanCount:4};var V=function(){this.tab=function(e,t){var n=v.ancestor(e.commonAncestor(),v.isCell);var i=v.ancestor(n,v.isTable);var r=v.listDescendant(i,v.isCell);var o=d[t?"prev":"next"](r,n);if(o){O.create(o,0).select()}};this.addRow=function(t,n){var i=v.ancestor(t.commonAncestor(),v.isCell);var r=e(i).closest("tr");var o=this.recoverAttributes(r);var a=e("<tr"+o+"></tr>");var s=new W(i,W.where.Row,W.requestAction.Add,e(r).closest("table")[0]);var l=s.getActionList();for(var u=0;u<l.length;u++){var c=l[u];var f=this.recoverAttributes(c.baseCell);switch(c.action){case W.resultAction.AddCell:a.append("<td"+f+">"+v.blank+"</td>");break;case W.resultAction.SumSpanCount:if(n==="top"){var d=c.baseCell.parent;var h=(!d?0:c.baseCell.closest("tr").rowIndex)<=r[0].rowIndex;if(h){var p=e("<div></div>").append(e("<td"+f+">"+v.blank+"</td>").removeAttr("rowspan")).html();a.append(p);break}}var m=parseInt(c.baseCell.rowSpan,10);m++;c.baseCell.setAttribute("rowSpan",m);break}}if(n==="top"){r.before(a)}else{var g=i.rowSpan>1;if(g){var b=r[0].rowIndex+(i.rowSpan-2);e(e(r).parent().find("tr")[b]).after(e(a));return}r.after(a)}};this.addCol=function(t,n){var i=v.ancestor(t.commonAncestor(),v.isCell);var r=e(i).closest("tr");var o=e(r).siblings();o.push(r);var a=new W(i,W.where.Column,W.requestAction.Add,e(r).closest("table")[0]);var s=a.getActionList();for(var l=0;l<s.length;l++){var u=s[l];var c=this.recoverAttributes(u.baseCell);switch(u.action){case W.resultAction.AddCell:if(n==="right"){e(u.baseCell).after("<td"+c+">"+v.blank+"</td>")}else{e(u.baseCell).before("<td"+c+">"+v.blank+"</td>")}break;case W.resultAction.SumSpanCount:if(n==="right"){var f=parseInt(u.baseCell.colSpan,10);f++;u.baseCell.setAttribute("colSpan",f)}else{e(u.baseCell).before("<td"+c+">"+v.blank+"</td>")}break}}};this.recoverAttributes=function(e){var t="";if(!e){return t}var n=e.attributes||[];for(var i=0;i<n.length;i++){if(n[i].name.toLowerCase()==="id"){continue}if(n[i].specified){t+=" "+n[i].name+"='"+n[i].value+"'"}}return t};this.deleteRow=function(t){var n=v.ancestor(t.commonAncestor(),v.isCell);var i=e(n).closest("tr");var r=i.children("td, th").index(e(n));var o=i[0].rowIndex;var a=new W(n,W.where.Row,W.requestAction.Delete,e(i).closest("table")[0]);var s=a.getActionList();for(var l=0;l<s.length;l++){if(!s[l]){continue}var u=s[l].baseCell;var c=s[l].virtualTable;var f=u.rowSpan&&u.rowSpan>1;var d=f?parseInt(u.rowSpan,10):0;switch(s[l].action){case W.resultAction.Ignore:continue;case W.resultAction.AddCell:var h=i.next("tr")[0];if(!h){continue}var p=i[0].cells[r];if(f){if(d>2){d--;h.insertBefore(p,h.cells[r]);h.cells[r].setAttribute("rowSpan",d);h.cells[r].innerHTML=""}else if(d===2){h.insertBefore(p,h.cells[r]);h.cells[r].removeAttribute("rowSpan");h.cells[r].innerHTML=""}}continue;case W.resultAction.SubtractSpanCount:if(f){if(d>2){d--;u.setAttribute("rowSpan",d);if(c.rowIndex!==o&&u.cellIndex===r){u.innerHTML=""}}else if(d===2){u.removeAttribute("rowSpan");if(c.rowIndex!==o&&u.cellIndex===r){u.innerHTML=""}}}continue;case W.resultAction.RemoveCell:continue}}i.remove()};this.deleteCol=function(t){var n=v.ancestor(t.commonAncestor(),v.isCell);var i=e(n).closest("tr");var r=i.children("td, th").index(e(n));var o=new W(n,W.where.Column,W.requestAction.Delete,e(i).closest("table")[0]);var a=o.getActionList();for(var s=0;s<a.length;s++){if(!a[s]){continue}switch(a[s].action){case W.resultAction.Ignore:continue;case W.resultAction.SubtractSpanCount:var l=a[s].baseCell;var u=l.colSpan&&l.colSpan>1;if(u){var c=l.colSpan?parseInt(l.colSpan,10):0;if(c>2){c--;l.setAttribute("colSpan",c);if(l.cellIndex===r){l.innerHTML=""}}else if(c===2){l.removeAttribute("colSpan");if(l.cellIndex===r){l.innerHTML=""}}}continue;case W.resultAction.RemoveCell:v.remove(a[s].baseCell,true);continue}}};this.createTable=function(t,n,i){var r=[],o;for(var a=0;a<t;a++){r.push("<td>"+v.blank+"</td>")}o=r.join("");var s=[],l;for(var u=0;u<n;u++){s.push("<tr>"+o+"</tr>")}l=s.join("");var c=e("<table>"+l+"</table>");if(i&&i.tableClassName){c.addClass(i.tableClassName)}return c[0]};this.deleteTable=function(t){var n=v.ancestor(t.commonAncestor(),v.isCell);e(n).closest("table").remove()}};var _="bogus";var K=function(t){var n=this;var i=t.layoutInfo.note;var r=t.layoutInfo.editor;var o=t.layoutInfo.editable;var a=t.options;var s=a.langInfo;var l=o[0];var u=null;var h=new z;var p=new V;var m=new U;var g=new q;var b=new B(o);this.initialize=function(){o.on("keydown",function(e){if(e.keyCode===j.code.ENTER){t.triggerEvent("enter",e)}t.triggerEvent("keydown",e);if(!e.isDefaultPrevented()){if(a.shortcuts){n.handleKeyMap(e)}else{n.preventDefaultEditableShortCuts(e)}}}).on("keyup",function(e){t.triggerEvent("keyup",e)}).on("focus",function(e){t.triggerEvent("focus",e)}).on("blur",function(e){t.triggerEvent("blur",e)}).on("mousedown",function(e){t.triggerEvent("mousedown",e)}).on("mouseup",function(e){t.triggerEvent("mouseup",e)}).on("scroll",function(e){t.triggerEvent("scroll",e)}).on("paste",function(e){t.triggerEvent("paste",e)});o.html(v.html(i)||v.emptyPara);var e=c.isMSIE?"DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted":"input";o.on(e,f.debounce(function(){t.triggerEvent("change",o.html())},100));r.on("focusin",function(e){t.triggerEvent("focusin",e)}).on("focusout",function(e){t.triggerEvent("focusout",e)});if(!a.airMode){if(a.width){r.outerWidth(a.width)}if(a.height){o.outerHeight(a.height)}if(a.maxHeight){o.css("max-height",a.maxHeight)}if(a.minHeight){o.css("min-height",a.minHeight)}}b.recordUndo()};this.destroy=function(){o.off()};this.handleKeyMap=function(e){var n=a.keyMap[c.isMac?"mac":"pc"];var i=[];if(e.metaKey){i.push("CMD")}if(e.ctrlKey&&!e.altKey){i.push("CTRL")}if(e.shiftKey){i.push("SHIFT")}var r=j.nameFromCode[e.keyCode];if(r){i.push(r)}var o=n[i.join("+")];if(o){e.preventDefault();t.invoke(o)}else if(j.isEdit(e.keyCode)){this.afterCommand()}};this.preventDefaultEditableShortCuts=function(e){if((e.ctrlKey||e.metaKey)&&d.contains([66,73,85],e.keyCode)){e.preventDefault()}};this.createRange=function(){this.focus();return O.create(l)};this.saveRange=function(e){u=this.createRange();if(e){u.collapse().select()}};this.restoreRange=function(){if(u){u.select();this.focus()}};this.saveTarget=function(e){o.data("target",e)};this.clearTarget=function(){o.removeData("target")};this.restoreTarget=function(){return o.data("target")};this.currentStyle=function(){var e=O.create();if(e){e=e.normalize()}return e?h.current(e):h.fromNode(o)};this.styleFromNode=function(e){return h.fromNode(e)};this.undo=function(){t.triggerEvent("before.command",o.html());b.undo();t.triggerEvent("change",o.html())};t.memo("help.undo",s.help.undo);this.redo=function(){t.triggerEvent("before.command",o.html());b.redo();t.triggerEvent("change",o.html())};t.memo("help.redo",s.help.redo);var y=this.beforeCommand=function(){t.triggerEvent("before.command",o.html());n.focus()};var w=this.afterCommand=function(e){b.recordUndo();if(!e){t.triggerEvent("change",o.html())}};var C=["bold","italic","underline","strikethrough","superscript","subscript","justifyLeft","justifyCenter","justifyRight","justifyFull","formatBlock","removeFormat","backColor","fontName"];for(var k=0,x=C.length;k<x;k++){this[C[k]]=function(e){return function(t){y();document.execCommand(e,false,t);w(true)}}(C[k]);t.memo("help."+C[k],s.help[C[k]])}this.tab=function(){var e=this.createRange();if(e.isCollapsed()&&e.isOnCell()){p.tab(e)}else{y();m.insertTab(e,a.tabSize);w()}};t.memo("help.tab",s.help.tab);this.untab=function(){var e=this.createRange();if(e.isCollapsed()&&e.isOnCell()){p.tab(e,true)}};t.memo("help.untab",s.help.untab);this.wrapCommand=function(e){return function(){y();e.apply(n,arguments);w()}};this.insertParagraph=this.wrapCommand(function(){m.insertParagraph(l)});t.memo("help.insertParagraph",s.help.insertParagraph);this.insertOrderedList=this.wrapCommand(function(){g.insertOrderedList(l)});t.memo("help.insertOrderedList",s.help.insertOrderedList);this.insertUnorderedList=this.wrapCommand(function(){g.insertUnorderedList(l)});t.memo("help.insertUnorderedList",s.help.insertUnorderedList);this.indent=this.wrapCommand(function(){g.indent(l)});t.memo("help.indent",s.help.indent);this.outdent=this.wrapCommand(function(){g.outdent(l)});t.memo("help.outdent",s.help.outdent);this.insertImage=function(e,n){return M.createImage(e,n).then(function(e){y();if(typeof n==="function"){n(e)}else{if(typeof n==="string"){e.attr("data-filename",n)}e.css("width",Math.min(o.width(),e.width()))}e.show();O.create(l).insertNode(e[0]);O.createFromNodeAfter(e[0]).select();w()}).fail(function(e){t.triggerEvent("image.upload.error",e)})};this.insertImages=function(i){e.each(i,function(e,i){var r=i.name;if(a.maximumImageFileSize&&a.maximumImageFileSize<i.size){t.triggerEvent("image.upload.error",s.image.maximumFileSizeError)}else{M.readFileAsDataURL(i).then(function(e){return n.insertImage(e,r)}).fail(function(){t.triggerEvent("image.upload.error")})}})};this.insertImagesOrCallback=function(e){var n=a.callbacks;if(n.onImageUpload){t.triggerEvent("image.upload",e)}else{this.insertImages(e)}};this.insertNode=this.wrapCommand(function(e){var t=this.createRange();t.insertNode(e);O.createFromNodeAfter(e).select()});this.insertText=this.wrapCommand(function(e){var t=this.createRange();var n=t.insertNode(v.createText(e));O.create(n,v.nodeLength(n)).select()});this.getSelectedText=function(){var e=this.createRange();if(e.isOnAnchor()){e=O.createFromNode(v.ancestor(e.sc,v.isAnchor))}return e.toString()};this.pasteHTML=this.wrapCommand(function(e){var t=this.createRange().pasteHTML(e);O.createFromNodeAfter(d.last(t)).select()});this.formatBlock=this.wrapCommand(function(e,n){var i=t.options.callbacks.onApplyCustomStyle;if(i){i.call(this,n,t,this.onFormatBlock)}else{this.onFormatBlock(e)}});this.onFormatBlock=function(e){e=c.isMSIE?"<"+e+">":e;document.execCommand("FormatBlock",false,e)};this.formatPara=function(){this.formatBlock("P")};t.memo("help.formatPara",s.help.formatPara);for(var k=1;k<=6;k++){this["formatH"+k]=function(e){return function(){this.formatBlock("H"+e)}}(k);t.memo("help.formatH"+k,s.help["formatH"+k])}this.fontSize=function(t){var n=this.createRange();if(n&&n.isCollapsed()){var i=h.styleNodes(n);var r=d.head(i);e(i).css({"font-size":t+"px"});if(r&&!v.nodeLength(r)){r.innerHTML=v.ZERO_WIDTH_NBSP_CHAR;O.createFromNodeAfter(r.firstChild).select();o.data(_,r)}}else{y();e(h.styleNodes(n)).css({"font-size":t+"px"});w()}};this.insertHorizontalRule=this.wrapCommand(function(){var e=this.createRange().insertNode(v.create("HR"));if(e.nextSibling){O.create(e.nextSibling,0).normalize().select()}});t.memo("help.insertHorizontalRule",s.help.insertHorizontalRule);this.removeBogus=function(){var e=o.data(_);if(!e){return}var t=d.find(d.from(e.childNodes),v.isText);var n=t.nodeValue.indexOf(v.ZERO_WIDTH_NBSP_CHAR);if(n!==-1){t.deleteData(n,1)}if(v.isEmpty(e)){v.remove(e)}o.removeData(_)};this.lineHeight=this.wrapCommand(function(e){h.stylePara(this.createRange(),{lineHeight:e})});this.unlink=function(){var e=this.createRange();if(e.isOnAnchor()){var t=v.ancestor(e.sc,v.isAnchor);e=O.createFromNode(t);e.select();y();document.execCommand("unlink");w()}};this.createLink=this.wrapCommand(function(t){var n=t.url;var i=t.text;var r=t.isNewWindow;var o=t.range||this.createRange();var s=o.toString()!==i;if(typeof n==="string"){n=n.trim()}if(a.onCreateLink){n=a.onCreateLink(n)}else{n=/^[A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?/.test(n)?n:"http://"+n}var l=[];if(s){o=o.deleteContents();var u=o.insertNode(e("<A>"+i+"</A>")[0]);l.push(u)}else{l=h.styleNodes(o,{nodeName:"A",expandClosestSibling:true,onlyPartialContains:true})}e.each(l,function(t,i){e(i).attr("href",n);if(r){e(i).attr("target","_blank")}else{e(i).removeAttr("target")}});var c=O.createFromNodeBefore(d.head(l));var f=c.getStartPoint();var p=O.createFromNodeAfter(d.last(l));var v=p.getEndPoint();O.create(f.node,f.offset,v.node,v.offset).select()});this.getLinkInfo=function(){var t=this.createRange().expand(v.isAnchor);var n=e(d.head(t.nodes(v.isAnchor)));var i={range:t,text:t.toString(),url:n.length?n.attr("href"):""};if(n.length){i.isNewWindow=n.attr("target")==="_blank"}return i};this.color=this.wrapCommand(function(e){var t=e.foreColor;var n=e.backColor;if(t){document.execCommand("foreColor",false,t)}if(n){document.execCommand("backColor",false,n)}});this.foreColor=this.wrapCommand(function(e){document.execCommand("styleWithCSS",false,true);document.execCommand("foreColor",false,e)});this.insertTable=this.wrapCommand(function(e){var t=e.split("x");var n=this.createRange().deleteContents();n.insertNode(p.createTable(t[0],t[1],a))});this.addRow=function(e){var t=this.createRange(o);if(t.isCollapsed()&&t.isOnCell()){y();p.addRow(t,e);w()}};this.addCol=function(e){var t=this.createRange(o);if(t.isCollapsed()&&t.isOnCell()){y();p.addCol(t,e);w()}};this.deleteRow=function(){var e=this.createRange(o);if(e.isCollapsed()&&e.isOnCell()){y();p.deleteRow(e);w()}};this.deleteCol=function(){var e=this.createRange(o);if(e.isCollapsed()&&e.isOnCell()){y();p.deleteCol(e);w()}};this.deleteTable=function(){var e=this.createRange(o);if(e.isCollapsed()&&e.isOnCell()){y();p.deleteTable(e);w()}};this.floatMe=this.wrapCommand(function(t){var n=e(this.restoreTarget());n.toggleClass("note-float-left",t==="left");n.toggleClass("note-float-right",t==="right");n.css("float",t)});this.resize=this.wrapCommand(function(t){var n=e(this.restoreTarget());n.css({width:t*100+"%",height:""})});this.resizeTo=function(e,t,n){var i;if(n){var r=e.y/e.x;var o=t.data("ratio");i={width:o>r?e.x:e.y/o,height:o>r?e.x*o:e.y}}else{i={width:e.x,height:e.y}}t.css(i)};this.removeMedia=this.wrapCommand(function(){var n=e(this.restoreTarget()).detach();t.triggerEvent("media.delete",n,o)});this.hasFocus=function(){return o.is(":focus")};this.focus=function(){if(!this.hasFocus()){o.focus()}};this.isEmpty=function(){return v.isEmpty(o[0])||v.emptyPara===o.html()};this.empty=function(){t.invoke("code",v.emptyPara)}};var G=function(t){var n=this;var i=t.layoutInfo.editable;this.events={"summernote.keydown":function(e,i){if(n.needKeydownHook()){if((i.ctrlKey||i.metaKey)&&i.keyCode===j.code.V){t.invoke("editor.saveRange");n.$paste.focus();setTimeout(function(){n.pasteByHook()},0)}}}};this.needKeydownHook=function(){return c.isMSIE&&c.browserVersion>10||c.isFF};this.initialize=function(){if(this.needKeydownHook()){this.$paste=e('<div tabindex="-1" />').attr("contenteditable",true).css({position:"absolute",left:-1e5,opacity:0});i.before(this.$paste);this.$paste.on("paste",function(e){t.triggerEvent("paste",e)})}else{i.on("paste",this.pasteByEvent)}};this.destroy=function(){if(this.needKeydownHook()){this.$paste.remove();this.$paste=null}};this.pasteByHook=function(){var n=this.$paste[0].firstChild;var i=n&&n.src;if(v.isImg(n)&&i.indexOf("data:")===0){var r=atob(n.src.split(",")[1]);var o=new Uint8Array(r.length);for(var a=0;a<r.length;a++){o[a]=r.charCodeAt(a)}var s=new Blob([o],{type:"image/png"});s.name="clipboard.png";t.invoke("editor.restoreRange");t.invoke("editor.focus");t.invoke("editor.insertImagesOrCallback",[s])}else{var l=e("<div />").html(this.$paste.html()).html();t.invoke("editor.restoreRange");t.invoke("editor.focus");if(l){t.invoke("editor.pasteHTML",l)}}this.$paste.empty()};this.pasteByEvent=function(e){var n=e.originalEvent.clipboardData;if(n&&n.items&&n.items.length){var i=d.head(n.items);if(i.kind==="file"&&i.type.indexOf("image/")!==-1){t.invoke("editor.insertImagesOrCallback",[i.getAsFile()])}t.invoke("editor.afterCommand")}}};var Q=function(t){var n=e(document);var i=t.layoutInfo.editor;var r=t.layoutInfo.editable;var o=t.options;var a=o.langInfo;var s={};var l=e(['<div class="note-dropzone">','  <div class="note-dropzone-message"/>',"</div>"].join("")).prependTo(i);var u=function(){Object.keys(s).forEach(function(e){n.off(e.substr(2).toLowerCase(),s[e])});s={}};this.initialize=function(){if(o.disableDragAndDrop){s.onDrop=function(e){e.preventDefault()};n.on("drop",s.onDrop)}else{this.attachDragAndDropEvent()}};this.attachDragAndDropEvent=function(){var o=e(),u=l.find(".note-dropzone-message");s.onDragenter=function(e){var n=t.invoke("codeview.isActivated");var r=i.width()>0&&i.height()>0;if(!n&&!o.length&&r){i.addClass("dragover");l.width(i.width());l.height(i.height());u.text(a.image.dragImageHere)}o=o.add(e.target)};s.onDragleave=function(e){o=o.not(e.target);if(!o.length){i.removeClass("dragover")}};s.onDrop=function(){o=e();i.removeClass("dragover")};n.on("dragenter",s.onDragenter).on("dragleave",s.onDragleave).on("drop",s.onDrop);l.on("dragenter",function(){l.addClass("hover");u.text(a.image.dropImage)}).on("dragleave",function(){l.removeClass("hover");u.text(a.image.dragImageHere)});l.on("drop",function(n){var i=n.originalEvent.dataTransfer;if(i&&i.files&&i.files.length){n.preventDefault();r.focus();t.invoke("editor.insertImagesOrCallback",i.files)}else{e.each(i.types,function(n,r){var o=i.getData(r);if(r.toLowerCase().indexOf("text")>-1){t.invoke("editor.pasteHTML",o)}else{e(o).each(function(){t.invoke("editor.insertNode",this)})}})}}).on("dragover",false)};this.destroy=function(){u()}};var X;if(c.hasCodeMirror){if(c.isSupportAmd){require(["codemirror"],function(e){X=e})}else{X=window.CodeMirror}}var Y=function(e){var t=e.layoutInfo.editor;var n=e.layoutInfo.editable;var i=e.layoutInfo.codable;var r=e.options;this.sync=function(){var e=this.isActivated();if(e&&c.hasCodeMirror){i.data("cmEditor").save()}};this.isActivated=function(){return t.hasClass("codeview")};this.toggle=function(){if(this.isActivated()){this.deactivate()}else{this.activate()}e.triggerEvent("codeview.toggled")};this.activate=function(){i.val(v.html(n,r.prettifyHtml));i.height(n.height());e.invoke("toolbar.updateCodeview",true);t.addClass("codeview");i.focus();if(c.hasCodeMirror){var o=X.fromTextArea(i[0],r.codemirror);if(r.codemirror.tern){var a=new X.TernServer(r.codemirror.tern);o.ternServer=a;o.on("cursorActivity",function(e){a.updateArgHints(e)})}o.setSize(null,n.outerHeight());i.data("cmEditor",o)}};this.deactivate=function(){if(c.hasCodeMirror){var o=i.data("cmEditor");i.val(o.getValue());o.toTextArea()}var a=v.value(i,r.prettifyHtml)||v.emptyPara;var s=n.html()!==a;n.html(a);n.height(r.height?i.height():"auto");t.removeClass("codeview");if(s){e.triggerEvent("change",n.html(),n)}n.focus();e.invoke("toolbar.updateCodeview",false)};this.destroy=function(){if(this.isActivated()){this.deactivate()}}};var J=24;var Z=function(t){var n=e(document);var i=t.layoutInfo.statusbar;var r=t.layoutInfo.editable;var o=t.options;this.initialize=function(){if(o.airMode||o.disableResizeEditor){this.destroy();return}i.on("mousedown",function(e){e.preventDefault();e.stopPropagation();var t=r.offset().top-n.scrollTop();var i=function(e){var n=e.clientY-(t+J);n=o.minheight>0?Math.max(n,o.minheight):n;n=o.maxHeight>0?Math.min(n,o.maxHeight):n;r.height(n)};n.on("mousemove",i).one("mouseup",function(){n.off("mousemove",i)})})};this.destroy=function(){i.off();i.remove()}};var ee=function(t){var n=this;var i=t.layoutInfo.editor;var r=t.layoutInfo.toolbar;var o=t.layoutInfo.editable;var a=t.layoutInfo.codable;var s=e(window);var l=e("html, body");this.resizeTo=function(e){o.css("height",e.h);a.css("height",e.h);if(a.data("cmeditor")){a.data("cmeditor").setsize(null,e.h)}};this.onResize=function(){n.resizeTo({h:s.height()-r.outerHeight()})};this.toggle=function(){i.toggleClass("fullscreen");if(this.isFullscreen()){o.data("orgHeight",o.css("height"));s.on("resize",this.onResize).trigger("resize");l.css("overflow","hidden")}else{s.off("resize",this.onResize);this.resizeTo({h:o.data("orgHeight")});l.css("overflow","visible")}t.invoke("toolbar.updateFullscreen",this.isFullscreen())};this.isFullscreen=function(){return i.hasClass("fullscreen")}};var te=function(t){var n=this;var i=e(document);var r=t.layoutInfo.editingArea;var o=t.options;this.events={"summernote.mousedown":function(e,t){if(n.update(t.target)){t.preventDefault()}},"summernote.keyup summernote.scroll summernote.change summernote.dialog.shown":function(){n.update()},"summernote.disable":function(){n.hide()},"summernote.codeview.toggled":function(){n.update()}};this.initialize=function(){this.$handle=e(['<div class="note-handle">','<div class="note-control-selection">','<div class="note-control-selection-bg"></div>','<div class="note-control-holder note-control-nw"></div>','<div class="note-control-holder note-control-ne"></div>','<div class="note-control-holder note-control-sw"></div>','<div class="',o.disableResizeImage?"note-control-holder":"note-control-sizing",' note-control-se"></div>',o.disableResizeImage?"":'<div class="note-control-selection-info"></div>',"</div>","</div>"].join("")).prependTo(r);this.$handle.on("mousedown",function(e){if(v.isControlSizing(e.target)){e.preventDefault();e.stopPropagation();var r=n.$handle.find(".note-control-selection").data("target"),o=r.offset(),a=i.scrollTop();var s=function(e){t.invoke("editor.resizeTo",{x:e.clientX-o.left,y:e.clientY-(o.top-a)},r,!e.shiftKey);n.update(r[0])};i.on("mousemove",s).one("mouseup",function(e){e.preventDefault();i.off("mousemove",s);t.invoke("editor.afterCommand")});if(!r.data("ratio")){r.data("ratio",r.height()/r.width())}}});this.$handle.on("wheel",function(e){e.preventDefault();n.update()})};this.destroy=function(){this.$handle.remove()};this.update=function(n){if(t.isDisabled()){return false}var i=v.isImg(n);var r=this.$handle.find(".note-control-selection");t.invoke("imagePopover.update",n);if(i){var o=e(n);var a=o.position();var s={left:a.left+parseInt(o.css("marginLeft"),10),top:a.top+parseInt(o.css("marginTop"),10)};var l={w:o.outerWidth(false),h:o.outerHeight(false)};r.css({display:"block",left:s.left,top:s.top,width:l.w,height:l.h}).data("target",o);var u=l.w+"x"+l.h;r.find(".note-control-selection-info").text(u);t.invoke("editor.saveTarget",n)}else{this.hide()}return i};this.hide=function(){t.invoke("editor.clearTarget");this.$handle.children().hide()}};var ne=function(t){var n=this;var i="http://";var r=/^([A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?|mailto:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i;this.events={"summernote.keyup":function(e,t){if(!t.isDefaultPrevented()){n.handleKeyup(t)}},"summernote.keydown":function(e,t){n.handleKeydown(t)}};this.initialize=function(){this.lastWordRange=null};this.destroy=function(){this.lastWordRange=null};this.replace=function(){if(!this.lastWordRange){return}var n=this.lastWordRange.toString();var o=n.match(r);if(o&&(o[1]||o[2])){var a=o[1]?n:i+n;var s=e("<a />").html(n).attr("href",a)[0];this.lastWordRange.insertNode(s);this.lastWordRange=null;t.invoke("editor.focus")}};this.handleKeydown=function(e){if(d.contains([j.code.ENTER,j.code.SPACE],e.keyCode)){var n=t.invoke("editor.createRange").getWordRange();this.lastWordRange=n}};this.handleKeyup=function(e){if(d.contains([j.code.ENTER,j.code.SPACE],e.keyCode)){this.replace()}}};var ie=function(e){var t=e.layoutInfo.note;this.events={"summernote.change":function(){t.val(e.invoke("code"))}};this.shouldInitialize=function(){return v.isTextarea(t[0])}};var re=function(t){var n=this;var i=t.layoutInfo.editingArea;var r=t.options;this.events={"summernote.init summernote.change":function(){n.update()},"summernote.codeview.toggled":function(){n.update()}};this.shouldInitialize=function(){return!!r.placeholder};this.initialize=function(){this.$placeholder=e('<div class="note-placeholder">');this.$placeholder.on("click",function(){t.invoke("focus")}).text(r.placeholder).prependTo(i);this.update()};this.destroy=function(){this.$placeholder.remove()};this.update=function(){var e=!t.invoke("codeview.isActivated")&&t.invoke("editor.isEmpty");this.$placeholder.toggle(e)}};var oe=function(t){var n=this;var i=e.summernote.ui;var r=t.layoutInfo.toolbar;var o=t.options;var a=o.langInfo;var s=f.invertObject(o.keyMap[c.isMac?"mac":"pc"]);var l=this.representShortcut=function(e){var t=s[e];if(!o.shortcuts||!t){return""}if(c.isMac){t=t.replace("CMD","â").replace("SHIFT","â§")}t=t.replace("BACKSLASH","\\").replace("SLASH","/").replace("LEFTBRACKET","[").replace("RIGHTBRACKET","]");return" ("+t+")"};this.initialize=function(){this.addToolbarButtons();this.addImagePopoverButtons();this.addLinkPopoverButtons();this.addTablePopoverButtons();this.fontInstalledMap={}};this.destroy=function(){delete this.fontInstalledMap};this.isFontInstalled=function(e){if(!n.fontInstalledMap.hasOwnProperty(e)){n.fontInstalledMap[e]=c.isFontInstalled(e)||d.contains(o.fontNamesIgnoreCheck,e)}return n.fontInstalledMap[e]};this.addToolbarButtons=function(){t.memo("button.style",function(){return i.buttonGroup([i.button({className:"dropdown-toggle",contents:i.dropdownButtonContents(i.icon(o.icons.magic),o),tooltip:a.style.style,data:{toggle:"dropdown"}}),i.dropdown({className:"dropdown-style",items:t.options.styleTags,template:function(e){if(typeof e==="string"){e={tag:e,title:a.style.hasOwnProperty(e)?a.style[e]:e}}var t=e.tag;var n=e.title;var i=e.style?' style="'+e.style+'" ':"";var r=e.className?' class="'+e.className+'"':"";return"<"+t+i+r+">"+n+"</"+t+">"},click:t.createInvokeHandler("editor.formatBlock")})]).render()});t.memo("button.bold",function(){return i.button({className:"note-btn-bold",contents:i.icon(o.icons.bold),tooltip:a.font.bold+l("bold"),click:t.createInvokeHandlerAndUpdateState("editor.bold")}).render()});t.memo("button.italic",function(){return i.button({className:"note-btn-italic",contents:i.icon(o.icons.italic),tooltip:a.font.italic+l("italic"),click:t.createInvokeHandlerAndUpdateState("editor.italic")}).render()});t.memo("button.underline",function(){return i.button({className:"note-btn-underline",contents:i.icon(o.icons.underline),tooltip:a.font.underline+l("underline"),click:t.createInvokeHandlerAndUpdateState("editor.underline")}).render()});t.memo("button.clear",function(){return i.button({contents:i.icon(o.icons.eraser),tooltip:a.font.clear+l("removeFormat"),click:t.createInvokeHandler("editor.removeFormat")}).render()});t.memo("button.strikethrough",function(){return i.button({className:"note-btn-strikethrough",contents:i.icon(o.icons.strikethrough),tooltip:a.font.strikethrough+l("strikethrough"),click:t.createInvokeHandlerAndUpdateState("editor.strikethrough")}).render()});t.memo("button.superscript",function(){return i.button({className:"note-btn-superscript",contents:i.icon(o.icons.superscript),tooltip:a.font.superscript,click:t.createInvokeHandlerAndUpdateState("editor.superscript")}).render()});t.memo("button.subscript",function(){return i.button({className:"note-btn-subscript",contents:i.icon(o.icons.subscript),tooltip:a.font.subscript,click:t.createInvokeHandlerAndUpdateState("editor.subscript")}).render()});t.memo("button.fontname",function(){return i.buttonGroup([i.button({className:"dropdown-toggle",contents:i.dropdownButtonContents('<span class="note-current-fontname"/>',o),tooltip:a.font.name,data:{toggle:"dropdown"}}),i.dropdownCheck({className:"dropdown-fontname",checkClassName:o.icons.menuCheck,items:o.fontNames.filter(n.isFontInstalled),template:function(e){return'<span style="font-family:'+e+'">'+e+"</span>"},click:t.createInvokeHandlerAndUpdateState("editor.fontName")})]).render()});t.memo("button.fontsize",function(){return i.buttonGroup([i.button({className:"dropdown-toggle",contents:i.dropdownButtonContents('<span class="note-current-fontsize"/>',o),tooltip:a.font.size,data:{toggle:"dropdown"}}),i.dropdownCheck({className:"dropdown-fontsize",checkClassName:o.icons.menuCheck,items:o.fontSizes,click:t.createInvokeHandlerAndUpdateState("editor.fontSize")})]).render()});t.memo("button.color",function(){return i.buttonGroup({className:"note-color",children:[i.button({className:"note-current-color-button",contents:i.icon(o.icons.font+" note-recent-color"),tooltip:a.color.recent,click:function(n){var i=e(n.currentTarget);t.invoke("editor.color",{backColor:i.attr("data-backColor"),foreColor:i.attr("data-foreColor")})},callback:function(e){var t=e.find(".note-recent-color");t.css("background-color","#FFFF00");e.attr("data-backColor","#FFFF00")}}),i.button({className:"dropdown-toggle",contents:i.dropdownButtonContents("",o),tooltip:a.color.more,data:{toggle:"dropdown"}}),i.dropdown({items:['<div class="note-palette">','  <div class="note-palette-title">'+a.color.background+"</div>","  <div>",'    <button type="button" class="note-color-reset btn btn-light" data-event="backColor" data-value="inherit">',a.color.transparent,"    </button>","  </div>",'  <div class="note-holder" data-event="backColor"/>',"</div>",'<div class="note-palette">','  <div class="note-palette-title">'+a.color.foreground+"</div>","  <div>",'    <button type="button" class="note-color-reset btn btn-light" data-event="removeFormat" data-value="foreColor">',a.color.resetToDefault,"    </button>","  </div>",'  <div class="note-holder" data-event="foreColor"/>',"</div>"].join(""),callback:function(t){t.find(".note-holder").each(function(){var t=e(this);t.append(i.palette({colors:o.colors,eventName:t.data("event"),tooltip:o.tooltip}).render())})},click:function(n){var i=e(n.target);var r=i.data("event");var o=i.data("value");if(r&&o){var a=r==="backColor"?"background-color":"color";var s=i.closest(".note-color").find(".note-recent-color");var l=i.closest(".note-color").find(".note-current-color-button");s.css(a,o);l.attr("data-"+r,o);t.invoke("editor."+r,o)}}})]}).render()});t.memo("button.ul",function(){return i.button({contents:i.icon(o.icons.unorderedlist),tooltip:a.lists.unordered+l("insertUnorderedList"),click:t.createInvokeHandler("editor.insertUnorderedList")}).render()});t.memo("button.ol",function(){return i.button({contents:i.icon(o.icons.orderedlist),tooltip:a.lists.ordered+l("insertOrderedList"),click:t.createInvokeHandler("editor.insertOrderedList")}).render()});var r=i.button({contents:i.icon(o.icons.alignLeft),tooltip:a.paragraph.left+l("justifyLeft"),click:t.createInvokeHandler("editor.justifyLeft")});var s=i.button({contents:i.icon(o.icons.alignCenter),tooltip:a.paragraph.center+l("justifyCenter"),click:t.createInvokeHandler("editor.justifyCenter")});var u=i.button({contents:i.icon(o.icons.alignRight),tooltip:a.paragraph.right+l("justifyRight"),click:t.createInvokeHandler("editor.justifyRight")});var c=i.button({contents:i.icon(o.icons.alignJustify),tooltip:a.paragraph.justify+l("justifyFull"),click:t.createInvokeHandler("editor.justifyFull")});var d=i.button({contents:i.icon(o.icons.outdent),tooltip:a.paragraph.outdent+l("outdent"),click:t.createInvokeHandler("editor.outdent")});var h=i.button({contents:i.icon(o.icons.indent),tooltip:a.paragraph.indent+l("indent"),click:t.createInvokeHandler("editor.indent")});t.memo("button.justifyLeft",f.invoke(r,"render"));t.memo("button.justifyCenter",f.invoke(s,"render"));t.memo("button.justifyRight",f.invoke(u,"render"));t.memo("button.justifyFull",f.invoke(c,"render"));t.memo("button.outdent",f.invoke(d,"render"));t.memo("button.indent",f.invoke(h,"render"));t.memo("button.paragraph",function(){return i.buttonGroup([i.button({className:"dropdown-toggle",contents:i.dropdownButtonContents(i.icon(o.icons.alignLeft),o),tooltip:a.paragraph.paragraph,data:{toggle:"dropdown"}}),i.dropdown([i.buttonGroup({className:"note-align",children:[r,s,u,c]}),i.buttonGroup({className:"note-list",children:[d,h]})])]).render()});t.memo("button.height",function(){return i.buttonGroup([i.button({className:"dropdown-toggle",contents:i.dropdownButtonContents(i.icon(o.icons.textHeight),o),tooltip:a.font.height,data:{toggle:"dropdown"}}),i.dropdownCheck({items:o.lineHeights,checkClassName:o.icons.menuCheck,className:"dropdown-line-height",click:t.createInvokeHandler("editor.lineHeight")})]).render()});t.memo("button.table",function(){return i.buttonGroup([i.button({className:"dropdown-toggle",contents:i.dropdownButtonContents(i.icon(o.icons.table),o),tooltip:a.table.table,data:{toggle:"dropdown"}}),i.dropdown({className:"note-table",items:['<div class="note-dimension-picker">','  <div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>','  <div class="note-dimension-picker-highlighted"/>','  <div class="note-dimension-picker-unhighlighted"/>',"</div>",'<div class="note-dimension-display">1 x 1</div>'].join("")})],{callback:function(e){var i=e.find(".note-dimension-picker-mousecatcher");i.css({width:o.insertTableMaxSize.col+"em",height:o.insertTableMaxSize.row+"em"}).mousedown(t.createInvokeHandler("editor.insertTable")).on("mousemove",n.tableMoveHandler)}}).render()});t.memo("button.link",function(){return i.button({contents:i.icon(o.icons.link),tooltip:a.link.link+l("linkDialog.show"),click:t.createInvokeHandler("linkDialog.show")}).render()});t.memo("button.picture",function(){return i.button({contents:i.icon(o.icons.picture),tooltip:a.image.image,click:t.createInvokeHandler("imageDialog.show")}).render()});t.memo("button.video",function(){return i.button({contents:i.icon(o.icons.video),tooltip:a.video.video,click:t.createInvokeHandler("videoDialog.show")}).render()});t.memo("button.hr",function(){return i.button({contents:i.icon(o.icons.minus),tooltip:a.hr.insert+l("insertHorizontalRule"),click:t.createInvokeHandler("editor.insertHorizontalRule")}).render()});t.memo("button.fullscreen",function(){return i.button({className:"btn-fullscreen",contents:i.icon(o.icons.arrowsAlt),tooltip:a.options.fullscreen,click:t.createInvokeHandler("fullscreen.toggle")}).render()});t.memo("button.codeview",function(){return i.button({className:"btn-codeview",contents:i.icon(o.icons.code),tooltip:a.options.codeview,click:t.createInvokeHandler("codeview.toggle")}).render()});t.memo("button.redo",function(){return i.button({contents:i.icon(o.icons.redo),tooltip:a.history.redo+l("redo"),click:t.createInvokeHandler("editor.redo")}).render()});t.memo("button.undo",function(){return i.button({contents:i.icon(o.icons.undo),tooltip:a.history.undo+l("undo"),click:t.createInvokeHandler("editor.undo")}).render()});t.memo("button.help",function(){return i.button({contents:i.icon(o.icons.question),tooltip:a.options.help,click:t.createInvokeHandler("helpDialog.show")}).render()})};this.addImagePopoverButtons=function(){t.memo("button.imageSize100",function(){return i.button({contents:'<span class="note-fontsize-10">100%</span>',tooltip:a.image.resizeFull,click:t.createInvokeHandler("editor.resize","1")}).render()});t.memo("button.imageSize50",function(){return i.button({contents:'<span class="note-fontsize-10">50%</span>',tooltip:a.image.resizeHalf,click:t.createInvokeHandler("editor.resize","0.5")}).render()});t.memo("button.imageSize25",function(){return i.button({contents:'<span class="note-fontsize-10">25%</span>',tooltip:a.image.resizeQuarter,click:t.createInvokeHandler("editor.resize","0.25")}).render()});t.memo("button.floatLeft",function(){return i.button({contents:i.icon(o.icons.alignLeft),tooltip:a.image.floatLeft,click:t.createInvokeHandler("editor.floatMe","left")}).render()});t.memo("button.floatRight",function(){return i.button({contents:i.icon(o.icons.alignRight),tooltip:a.image.floatRight,click:t.createInvokeHandler("editor.floatMe","right")}).render()});t.memo("button.floatNone",function(){return i.button({contents:i.icon(o.icons.alignJustify),tooltip:a.image.floatNone,click:t.createInvokeHandler("editor.floatMe","none")}).render()});t.memo("button.removeMedia",function(){return i.button({contents:i.icon(o.icons.trash),tooltip:a.image.remove,click:t.createInvokeHandler("editor.removeMedia")}).render()})};this.addLinkPopoverButtons=function(){t.memo("button.linkDialogShow",function(){return i.button({contents:i.icon(o.icons.link),tooltip:a.link.edit,click:t.createInvokeHandler("linkDialog.show")}).render()});t.memo("button.unlink",function(){return i.button({contents:i.icon(o.icons.unlink),tooltip:a.link.unlink,click:t.createInvokeHandler("editor.unlink")}).render()})};this.addTablePopoverButtons=function(){t.memo("button.addRowUp",function(){return i.button({className:"btn-md",contents:i.icon(o.icons.rowAbove),tooltip:a.table.addRowAbove,click:t.createInvokeHandler("editor.addRow","top")}).render()});t.memo("button.addRowDown",function(){return i.button({className:"btn-md",contents:i.icon(o.icons.rowBelow),tooltip:a.table.addRowBelow,click:t.createInvokeHandler("editor.addRow","bottom")}).render()});t.memo("button.addColLeft",function(){return i.button({className:"btn-md",contents:i.icon(o.icons.colBefore),tooltip:a.table.addColLeft,click:t.createInvokeHandler("editor.addCol","left")}).render()});t.memo("button.addColRight",function(){return i.button({className:"btn-md",contents:i.icon(o.icons.colAfter),tooltip:a.table.addColRight,click:t.createInvokeHandler("editor.addCol","right")}).render()});t.memo("button.deleteRow",function(){return i.button({className:"btn-md",contents:i.icon(o.icons.rowRemove),tooltip:a.table.delRow,click:t.createInvokeHandler("editor.deleteRow")}).render()});t.memo("button.deleteCol",function(){return i.button({className:"btn-md",contents:i.icon(o.icons.colRemove),tooltip:a.table.delCol,click:t.createInvokeHandler("editor.deleteCol")}).render()});t.memo("button.deleteTable",function(){return i.button({className:"btn-md",contents:i.icon(o.icons.trash),tooltip:a.table.delTable,click:t.createInvokeHandler("editor.deleteTable")}).render()})};this.build=function(e,n){for(var r=0,o=n.length;r<o;r++){var a=n[r];var s=a[0];var l=a[1];var u=i.buttonGroup({className:"note-"+s}).render();for(var c=0,f=l.length;c<f;c++){var d=t.memo("button."+l[c]);if(d){u.append(typeof d==="function"?d(t):d)}}u.appendTo(e)}};this.updateCurrentStyle=function(i){var o=i||r;var a=t.invoke("editor.currentStyle");this.updateBtnStates(o,{".note-btn-bold":function(){return a["font-bold"]==="bold"},".note-btn-italic":function(){return a["font-italic"]==="italic"},".note-btn-underline":function(){return a["font-underline"]==="underline"},".note-btn-subscript":function(){return a["font-subscript"]==="subscript"},".note-btn-superscript":function(){return a["font-superscript"]==="superscript"},".note-btn-strikethrough":function(){return a["font-strikethrough"]==="strikethrough"}});if(a["font-family"]){var s=a["font-family"].split(",").map(function(e){return e.replace(/[\'\"]/g,"").replace(/\s+$/,"").replace(/^\s+/,"")});var l=d.find(s,n.isFontInstalled);o.find(".dropdown-fontname a").each(function(){var t=e(this);var n=t.data("value")+""===l+"";t.toggleClass("checked",n)});o.find(".note-current-fontname").text(l)}if(a["font-size"]){var u=a["font-size"];o.find(".dropdown-fontsize a").each(function(){var t=e(this);var n=t.data("value")+""===u+"";t.toggleClass("checked",n)});o.find(".note-current-fontsize").text(u)}if(a["line-height"]){var c=a["line-height"];o.find(".dropdown-line-height li a").each(function(){var t=e(this).data("value")+""===c+"";this.className=t?"checked":""})}};this.updateBtnStates=function(t,n){e.each(n,function(e,n){i.toggleBtnActive(t.find(e),n())})};this.tableMoveHandler=function(t){var n=18;var i=e(t.target.parentNode);var r=i.next();var a=i.find(".note-dimension-picker-mousecatcher");var s=i.find(".note-dimension-picker-highlighted");var l=i.find(".note-dimension-picker-unhighlighted");var u;if(t.offsetX===undefined){var c=e(t.target).offset();u={x:t.pageX-c.left,y:t.pageY-c.top}}else{u={x:t.offsetX,y:t.offsetY}}var f={c:Math.ceil(u.x/n)||1,r:Math.ceil(u.y/n)||1};s.css({width:f.c+"em",height:f.r+"em"});a.data("value",f.c+"x"+f.r);if(3<f.c&&f.c<o.insertTableMaxSize.col){l.css({width:f.c+1+"em"})}if(3<f.r&&f.r<o.insertTableMaxSize.row){l.css({height:f.r+1+"em"})}r.html(f.c+" x "+f.r)}};var ae=function(t){var n=e.summernote.ui;var i=t.layoutInfo.note;var r=t.layoutInfo.editor;var o=t.layoutInfo.toolbar;var a=t.options;this.shouldInitialize=function(){return!a.airMode};this.initialize=function(){a.toolbar=a.toolbar||[];if(!a.toolbar.length){o.hide()}else{t.invoke("buttons.build",o,a.toolbar)}if(a.toolbarContainer){o.appendTo(a.toolbarContainer)}this.changeContainer(false);i.on("summernote.keyup summernote.mouseup summernote.change",function(){t.invoke("buttons.updateCurrentStyle")});t.invoke("buttons.updateCurrentStyle")};this.destroy=function(){o.children().remove()};this.changeContainer=function(e){if(e){o.prependTo(r)}else{if(a.toolbarContainer){o.appendTo(a.toolbarContainer)}}};this.updateFullscreen=function(e){n.toggleBtnActive(o.find(".btn-fullscreen"),e);this.changeContainer(e)};this.updateCodeview=function(e){n.toggleBtnActive(o.find(".btn-codeview"),e);if(e){this.deactivate()}else{this.activate()}};this.activate=function(e){var t=o.find("button");if(!e){t=t.not(".btn-codeview")}n.toggleBtn(t,true)};this.deactivate=function(e){var t=o.find("button");if(!e){t=t.not(".btn-codeview")}n.toggleBtn(t,false)}};var se=function(t){var n=this;var i=e.summernote.ui;var r=t.layoutInfo.editor;var o=t.options;var a=o.langInfo;this.initialize=function(){var t=o.dialogsInBody?e(document.body):r;var n='<div class="form-group note-form-group">'+'<label class="note-form-label">'+a.link.textToDisplay+"</label>"+'<input class="note-link-text form-control '+' note-form-control  note-input" type="text" />'+"</div>"+'<div class="form-group note-form-group">'+'<label class="note-form-label">'+a.link.url+"</label>"+'<input class="note-link-url form-control note-form-control '+'note-input" type="text" value="http://" />'+"</div>"+(!o.disableLinkTarget?e("<div/>").append(i.checkbox({id:"sn-checkbox-open-in-new-window",text:a.link.openInNewWindow,checked:true}).render()).html():"");var s='<button href="#" class="btn btn-primary note-btn note-btn-primary '+'note-link-btn disabled" disabled>'+a.link.insert+"</button>";this.$dialog=i.dialog({className:"link-dialog",title:a.link.insert,fade:o.dialogsFade,body:n,footer:s}).render().appendTo(t)};this.destroy=function(){i.hideDialog(this.$dialog);this.$dialog.remove()};this.bindEnterKey=function(e,t){e.on("keypress",function(e){if(e.keyCode===j.code.ENTER){t.trigger("click")}})};this.toggleLinkBtn=function(e,t,n){i.toggleBtn(e,t.val()&&n.val())};this.showLinkDialog=function(r){return e.Deferred(function(e){var o=n.$dialog.find(".note-link-text"),a=n.$dialog.find(".note-link-url"),s=n.$dialog.find(".note-link-btn"),l=n.$dialog.find("input[type=checkbox]");i.onDialogShown(n.$dialog,function(){t.triggerEvent("dialog.shown");if(!r.url){r.url=r.text}o.val(r.text);var u=function(){n.toggleLinkBtn(s,o,a);r.text=o.val()};o.on("input",u).on("paste",function(){setTimeout(u,0)});var c=function(){n.toggleLinkBtn(s,o,a);if(!r.text){o.val(a.val())}};a.on("input",c).on("paste",function(){setTimeout(c,0)}).val(r.url).trigger("focus");n.toggleLinkBtn(s,o,a);n.bindEnterKey(a,s);n.bindEnterKey(o,s);var f=r.isNewWindow!==undefined?r.isNewWindow:t.options.linkTargetBlank;l.prop("checked",f);s.one("click",function(t){t.preventDefault();e.resolve({range:r.range,url:a.val(),text:o.val(),isNewWindow:l.is(":checked")});i.hideDialog(n.$dialog)})});i.onDialogHidden(n.$dialog,function(){o.off("input paste keypress");a.off("input paste keypress");s.off("click");if(e.state()==="pending"){e.reject()}});i.showDialog(n.$dialog)}).promise()};this.show=function(){var e=t.invoke("editor.getLinkInfo");t.invoke("editor.saveRange");this.showLinkDialog(e).then(function(e){t.invoke("editor.restoreRange");t.invoke("editor.createLink",e)}).fail(function(){t.invoke("editor.restoreRange")})};t.memo("help.linkDialog.show",o.langInfo.help["linkDialog.show"])};var le=function(t){var n=this;var i=e.summernote.ui;var r=t.options;this.events={"summernote.keyup summernote.mouseup summernote.change summernote.scroll":function(){n.update()},"summernote.disable summernote.dialog.shown":function(){n.hide()}};this.shouldInitialize=function(){return!d.isEmpty(r.popover.link)};this.initialize=function(){this.$popover=i.popover({className:"note-link-popover",callback:function(e){var t=e.find(".popover-content,.note-popover-content");t.prepend('<span><a target="_blank"></a>&nbsp;</span>')}}).render().appendTo("body");var e=this.$popover.find(".popover-content,.note-popover-content");t.invoke("buttons.build",e,r.popover.link)};this.destroy=function(){this.$popover.remove()};this.update=function(){if(!t.invoke("editor.hasFocus")){this.hide();return}var n=t.invoke("editor.createRange");if(n.isCollapsed()&&n.isOnAnchor()){var i=v.ancestor(n.sc,v.isAnchor);var r=e(i).attr("href");this.$popover.find("a").attr("href",r).html(r);var o=v.posFromPlaceholder(i);this.$popover.css({display:"block",left:o.left,top:o.top})}else{this.hide()}};this.hide=function(){this.$popover.hide()}};var ue=function(t){var n=this;var i=e.summernote.ui;var r=t.layoutInfo.editor;var o=t.options;var a=o.langInfo;this.initialize=function(){var t=o.dialogsInBody?e(document.body):r;var n="";if(o.maximumImageFileSize){var s=Math.floor(Math.log(o.maximumImageFileSize)/Math.log(1024));var l=(o.maximumImageFileSize/Math.pow(1024,s)).toFixed(2)*1+" "+" KMGTP"[s]+"B";n="<small>"+a.image.maximumFileSize+" : "+l+"</small>"}var u='<div class="form-group note-form-group note-group-select-from-files">'+'<label class="note-form-label">'+a.image.selectFromFiles+"</label>"+'<input class="note-image-input form-control note-form-control note-input" '+' type="file" name="files" accept="image/*" multiple="multiple" />'+n+"</div>"+'<div class="form-group note-group-image-url" style="overflow:auto;">'+'<label class="note-form-label">'+a.image.url+"</label>"+'<input class="note-image-url form-control note-form-control note-input '+' col-md-12" type="text" />'+"</div>";var c='<button href="#" class="btn btn-primary note-btn note-btn-primary '+'note-image-btn disabled" disabled>'+a.image.insert+"</button>";this.$dialog=i.dialog({title:a.image.insert,fade:o.dialogsFade,body:u,footer:c}).render().appendTo(t)};this.destroy=function(){i.hideDialog(this.$dialog);this.$dialog.remove()};this.bindEnterKey=function(e,t){e.on("keypress",function(e){if(e.keyCode===j.code.ENTER){t.trigger("click")}})};this.show=function(){t.invoke("editor.saveRange");this.showImageDialog().then(function(e){i.hideDialog(n.$dialog);t.invoke("editor.restoreRange");if(typeof e==="string"){t.invoke("editor.insertImage",e)}else{t.invoke("editor.insertImagesOrCallback",e)}}).fail(function(){t.invoke("editor.restoreRange")})};this.showImageDialog=function(){return e.Deferred(function(e){var r=n.$dialog.find(".note-image-input"),o=n.$dialog.find(".note-image-url"),a=n.$dialog.find(".note-image-btn");i.onDialogShown(n.$dialog,function(){t.triggerEvent("dialog.shown");r.replaceWith(r.clone().on("change",function(){e.resolve(this.files||this.value)}).val(""));a.click(function(t){t.preventDefault();e.resolve(o.val())});o.on("keyup paste",function(){var e=o.val();i.toggleBtn(a,e)}).val("").trigger("focus");n.bindEnterKey(o,a)});i.onDialogHidden(n.$dialog,function(){r.off("change");o.off("keyup paste keypress");a.off("click");if(e.state()==="pending"){e.reject()}});i.showDialog(n.$dialog)})}};var ce=function(t){var n=this;var i=e.summernote.ui;var r=t.layoutInfo.editable;var o=r[0];var a=t.options;this.events={"summernote.disable":function(){n.hide()}};this.shouldInitialize=function(){return!d.isEmpty(a.popover.image)};this.initialize=function(){this.$popover=i.popover({className:"note-image-popover"}).render().appendTo("body");var e=this.$popover.find(".popover-content,.note-popover-content");t.invoke("buttons.build",e,a.popover.image)};this.destroy=function(){this.$popover.remove()};this.update=function(e){if(v.isImg(e)){var t=v.posFromPlaceholder(e);var n=v.posFromPlaceholder(o);this.$popover.css({display:"block",left:t.left,top:Math.min(t.top,n.top)})}else{this.hide()}};this.hide=function(){this.$popover.hide()}};var fe=function(t){var n=this;var i=e.summernote.ui;var r=t.options;this.events={"summernote.mousedown":function(e,t){n.update(t.target)},"summernote.keyup summernote.scroll summernote.change":function(){n.update()},"summernote.disable":function(){n.hide()}};this.shouldInitialize=function(){return!d.isEmpty(r.popover.table)};this.initialize=function(){this.$popover=i.popover({className:"note-table-popover"}).render().appendTo("body");var e=this.$popover.find(".popover-content,.note-popover-content");t.invoke("buttons.build",e,r.popover.table);if(c.isFF){document.execCommand("enableInlineTableEditing",false,false)}};this.destroy=function(){this.$popover.remove()};this.update=function(e){if(t.isDisabled()){return false}var n=v.isCell(e);if(n){var i=v.posFromPlaceholder(e);this.$popover.css({display:"block",left:i.left,top:i.top})}else{this.hide()}return n};this.hide=function(){this.$popover.hide()}};var de=function(t){var n=this;var i=e.summernote.ui;var r=t.layoutInfo.editor;var o=t.options;var a=o.langInfo;this.initialize=function(){var t=o.dialogsInBody?e(document.body):r;var n='<div class="form-group note-form-group row-fluid">'+'<label class="note-form-label">'+a.video.url+' <small class="text-muted">'+a.video.providers+"</small></label>"+'<input class="note-video-url form-control  note-form-control note-input span12" '+' type="text" />'+"</div>";var s='<button href="#" class="btn btn-primary note-btn note-btn-primary '+' note-video-btn disabled" disabled>'+a.video.insert+"</button>";this.$dialog=i.dialog({title:a.video.insert,fade:o.dialogsFade,body:n,footer:s}).render().appendTo(t)};this.destroy=function(){i.hideDialog(this.$dialog);this.$dialog.remove()};this.bindEnterKey=function(e,t){e.on("keypress",function(e){if(e.keyCode===j.code.ENTER){t.trigger("click")}})};this.createVideoNode=function(t){var n=/^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;var i=t.match(n);var r=/(?:www\.|\/\/)instagram\.com\/p\/(.[a-zA-Z0-9_-]*)/;var o=t.match(r);var a=/\/\/vine\.co\/v\/([a-zA-Z0-9]+)/;var s=t.match(a);var l=/\/\/(player\.)?vimeo\.com\/([a-z]*\/)*(\d+)[?]?.*/;var u=t.match(l);var c=/.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/;var f=t.match(c);var d=/\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/;var h=t.match(d);var p=/\/\/v\.qq\.com.*?vid=(.+)/;var v=t.match(p);var m=/\/\/v\.qq\.com\/x?\/?(page|cover).*?\/([^\/]+)\.html\??.*/;var g=t.match(m);var b=/^.+.(mp4|m4v)$/;var y=t.match(b);var w=/^.+.(ogg|ogv)$/;var C=t.match(w);var k=/^.+.(webm)$/;var x=t.match(k);var T;if(i&&i[1].length===11){var S=i[1];T=e("<iframe>").attr("frameborder",0).attr("src","//www.youtube.com/embed/"+S).attr("width","640").attr("height","360")}else if(o&&o[0].length){T=e("<iframe>").attr("frameborder",0).attr("src","https://instagram.com/p/"+o[1]+"/embed/").attr("width","612").attr("height","710").attr("scrolling","no").attr("allowtransparency","true")}else if(s&&s[0].length){T=e("<iframe>").attr("frameborder",0).attr("src",s[0]+"/embed/simple").attr("width","600").attr("height","600").attr("class","vine-embed")}else if(u&&u[3].length){T=e("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder",0).attr("src","//player.vimeo.com/video/"+u[3]).attr("width","640").attr("height","360")}else if(f&&f[2].length){T=e("<iframe>").attr("frameborder",0).attr("src","//www.dailymotion.com/embed/video/"+f[2]).attr("width","640").attr("height","360")}else if(h&&h[1].length){T=e("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder",0).attr("height","498").attr("width","510").attr("src","//player.youku.com/embed/"+h[1])}else if(v&&v[1].length||g&&g[2].length){var E=v&&v[1].length?v[1]:g[2];T=e("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder",0).attr("height","310").attr("width","500").attr("src","http://v.qq.com/iframe/player.html?vid="+E+"&amp;auto=0")}else if(y||C||x){T=e("<video controls>").attr("src",t).attr("width","640").attr("height","360")}else{return false}T.addClass("note-video-clip");return T[0]};this.show=function(){var e=t.invoke("editor.getSelectedText");t.invoke("editor.saveRange");this.showVideoDialog(e).then(function(e){i.hideDialog(n.$dialog);t.invoke("editor.restoreRange");var r=n.createVideoNode(e);if(r){t.invoke("editor.insertNode",r)}}).fail(function(){t.invoke("editor.restoreRange")})};this.showVideoDialog=function(r){return e.Deferred(function(e){var o=n.$dialog.find(".note-video-url"),a=n.$dialog.find(".note-video-btn");i.onDialogShown(n.$dialog,function(){t.triggerEvent("dialog.shown");o.val(r).on("input",function(){i.toggleBtn(a,o.val())}).trigger("focus");a.click(function(t){t.preventDefault();e.resolve(o.val())});n.bindEnterKey(o,a)});i.onDialogHidden(n.$dialog,function(){o.off("input");a.off("click");if(e.state()==="pending"){e.reject()}});i.showDialog(n.$dialog)})}};var he=function(t){var n=this;var i=e.summernote.ui;var r=t.layoutInfo.editor;var o=t.options;var a=o.langInfo;this.createShortCutList=function(){var n=o.keyMap[c.isMac?"mac":"pc"];return Object.keys(n).map(function(i){var r=n[i];var o=e('<div><div class="help-list-item"/></div>');o.append(e("<label><kbd>"+i+"</kdb></label>").css({width:180,"margin-right":10})).append(e("<span/>").html(t.memo("help."+r)||r));return o.html()}).join("")};this.initialize=function(){var t=o.dialogsInBody?e(document.body):r;var n=['<p class="text-center">','<a href="http://summernote.org/" target="_blank">Summernote 0.8.8</a> Â· ','<a href="https://github.com/summernote/summernote" target="_blank">Project</a> Â· ','<a href="https://github.com/summernote/summernote/issues" target="_blank">Issues</a>',"</p>"].join("");this.$dialog=i.dialog({title:a.options.help,fade:o.dialogsFade,body:this.createShortCutList(),footer:n,callback:function(e){e.find(".modal-body,.note-modal-body").css({"max-height":300,overflow:"scroll"})}}).render().appendTo(t)};this.destroy=function(){i.hideDialog(this.$dialog);this.$dialog.remove()};this.showHelpDialog=function(){return e.Deferred(function(e){i.onDialogShown(n.$dialog,function(){t.triggerEvent("dialog.shown");e.resolve()});i.showDialog(n.$dialog)}).promise()};this.show=function(){t.invoke("editor.saveRange");this.showHelpDialog().then(function(){t.invoke("editor.restoreRange")})}};var pe=function(t){var n=this;var i=e.summernote.ui;var r=t.options;var o=20;this.events={"summernote.keyup summernote.mouseup summernote.scroll":function(){n.update()},"summernote.disable summernote.change summernote.dialog.shown":function(){n.hide()},"summernote.focusout":function(e,t){if(c.isFF){return}if(!t.relatedTarget||!v.ancestor(t.relatedTarget,f.eq(n.$popover[0]))){n.hide()}}};this.shouldInitialize=function(){return r.airMode&&!d.isEmpty(r.popover.air)};this.initialize=function(){this.$popover=i.popover({className:"note-air-popover"}).render().appendTo("body");var e=this.$popover.find(".popover-content");t.invoke("buttons.build",e,r.popover.air)};this.destroy=function(){this.$popover.remove()};this.update=function(){var e=t.invoke("editor.currentStyle");if(e.range&&!e.range.isCollapsed()){var n=d.last(e.range.getClientRects());if(n){var i=f.rect2bnd(n);this.$popover.css({display:"block",left:Math.max(i.left+i.width/2,0)-o,top:i.top+i.height});t.invoke("buttons.updateCurrentStyle",this.$popover)}}else{this.hide()}};this.hide=function(){this.$popover.hide()}};var ve=function(t){var n=this;var i=e.summernote.ui;var r=5;var o=t.options.hint||[];var a=t.options.hintDirection||"bottom";var s=e.isArray(o)?o:[o];this.events={"summernote.keyup":function(e,t){if(!t.isDefaultPrevented()){n.handleKeyup(t)}},"summernote.keydown":function(e,t){n.handleKeydown(t)},"summernote.disable summernote.dialog.shown":function(){n.hide()}};this.shouldInitialize=function(){return s.length>0};this.initialize=function(){this.lastWordRange=null;this.$popover=i.popover({className:"note-hint-popover",hideArrow:true,direction:""}).render().appendTo("body");this.$popover.hide();this.$content=this.$popover.find(".popover-content,.note-popover-content");this.$content.on("click",".note-hint-item",function(){n.$content.find(".active").removeClass("active");e(this).addClass("active");n.replace()})};this.destroy=function(){this.$popover.remove()};this.selectItem=function(e){this.$content.find(".active").removeClass("active");e.addClass("active");this.$content[0].scrollTop=e[0].offsetTop-this.$content.innerHeight()/2};this.moveDown=function(){var e=this.$content.find(".note-hint-item.active");var t=e.next();if(t.length){this.selectItem(t)}else{var n=e.parent().next();if(!n.length){n=this.$content.find(".note-hint-group").first()}this.selectItem(n.find(".note-hint-item").first())}};this.moveUp=function(){var e=this.$content.find(".note-hint-item.active");var t=e.prev();if(t.length){this.selectItem(t)}else{var n=e.parent().prev();if(!n.length){n=this.$content.find(".note-hint-group").last()}this.selectItem(n.find(".note-hint-item").last())}};this.replace=function(){var e=this.$content.find(".note-hint-item.active");if(e.length){var n=this.nodeFromItem(e);this.lastWordRange.insertNode(n);O.createFromNode(n).collapse().select();this.lastWordRange=null;this.hide();t.triggerEvent("change",t.layoutInfo.editable.html(),t.layoutInfo.editable);t.invoke("editor.focus")}};this.nodeFromItem=function(e){var t=s[e.data("index")];var n=e.data("item");var i=t.content?t.content(n):n;if(typeof i==="string"){i=v.createText(i)}return i};this.createItemTemplates=function(t,n){var i=s[t];return n.map(function(n,r){var o=e('<div class="note-hint-item"/>');o.append(i.template?i.template(n):n+"");o.data({index:t,item:n});if(t===0&&r===0){o.addClass("active")}return o})};this.handleKeydown=function(e){if(!this.$popover.is(":visible")){return}if(e.keyCode===j.code.ENTER){e.preventDefault();this.replace()}else if(e.keyCode===j.code.UP){e.preventDefault();this.moveUp()}else if(e.keyCode===j.code.DOWN){e.preventDefault();this.moveDown()}};this.searchKeyword=function(e,t,n){var i=s[e];if(i&&i.match.test(t)&&i.search){var r=i.match.exec(t);i.search(r[1],n)}else{n()}};this.createGroup=function(t,i){var r=e('<div class="note-hint-group note-hint-group-'+t+'"/>');this.searchKeyword(t,i,function(e){e=e||[];if(e.length){r.html(n.createItemTemplates(t,e));n.show()}});return r};this.handleKeyup=function(e){if(d.contains([j.code.ENTER,j.code.UP,j.code.DOWN],e.keyCode)){if(e.keyCode===j.code.ENTER){if(this.$popover.is(":visible")){return}}}else{var i=t.invoke("editor.createRange").getWordRange();var o=i.toString();if(s.length&&o){this.$content.empty();var l=f.rect2bnd(d.last(i.getClientRects()));if(l){this.$popover.hide();this.lastWordRange=i;s.forEach(function(e,t){if(e.match.test(o)){n.createGroup(t,o).appendTo(n.$content)}});if(a==="top"){this.$popover.css({left:l.left,top:l.top-this.$popover.outerHeight()-r})}else{this.$popover.css({left:l.left,top:l.top+l.height+r})}}}else{this.hide()}}};this.show=function(){this.$popover.show()};this.hide=function(){this.$popover.hide()}};e.summernote=e.extend(e.summernote,{version:"0.8.8",ui:F,dom:v,plugins:{},options:{modules:{editor:K,clipboard:G,dropzone:Q,codeview:Y,statusbar:Z,fullscreen:ee,handle:te,hintPopover:ve,autoLink:ne,autoSync:ie,placeholder:re,buttons:oe,toolbar:ae,linkDialog:se,linkPopover:le,imageDialog:ue,imagePopover:ce,tablePopover:fe,videoDialog:de,helpDialog:he,airPopover:pe},buttons:{},lang:"en-US",toolbar:[["style",["style"]],["font",["bold","underline","clear"]],["fontname",["fontname"]],["color",["color"]],["para",["ul","ol","paragraph"]],["table",["table"]],["insert",["link","picture","video"]],["view",["fullscreen","codeview","help"]]],popover:{image:[["imagesize",["imageSize100","imageSize50","imageSize25"]],["float",["floatLeft","floatRight","floatNone"]],["remove",["removeMedia"]]],link:[["link",["linkDialogShow","unlink"]]],table:[["add",["addRowDown","addRowUp","addColLeft","addColRight"]],["delete",["deleteRow","deleteCol","deleteTable"]]],air:[["color",["color"]],["font",["bold","underline","clear"]],["para",["ul","paragraph"]],["table",["table"]],["insert",["link","picture"]]]},airMode:false,width:null,height:null,linkTargetBlank:true,focus:false,tabSize:4,styleWithSpan:true,shortcuts:true,textareaAutoSync:true,direction:null,tooltip:"auto",styleTags:["p","blockquote","pre","h1","h2","h3","h4","h5","h6"],fontNames:["Arial","Arial Black","Comic Sans MS","Courier New","Helvetica Neue","Helvetica","Impact","Lucida Grande","Tahoma","Times New Roman","Verdana"],fontSizes:["8","9","10","11","12","14","18","24","36"],colors:[["#000000","#424242","#636363","#9C9C94","#CEC6CE","#EFEFEF","#F7F7F7","#FFFFFF"],["#FF0000","#FF9C00","#FFFF00","#00FF00","#00FFFF","#0000FF","#9C00FF","#FF00FF"],["#F7C6CE","#FFE7CE","#FFEFC6","#D6EFD6","#CEDEE7","#CEE7F7","#D6D6E7","#E7D6DE"],["#E79C9C","#FFC69C","#FFE79C","#B5D6A5","#A5C6CE","#9CC6EF","#B5A5D6","#D6A5BD"],["#E76363","#F7AD6B","#FFD663","#94BD7B","#73A5AD","#6BADDE","#8C7BC6","#C67BA5"],["#CE0000","#E79439","#EFC631","#6BA54A","#4A7B8C","#3984C6","#634AA5","#A54A7B"],["#9C0000","#B56308","#BD9400","#397B21","#104A5A","#085294","#311873","#731842"],["#630000","#7B3900","#846300","#295218","#083139","#003163","#21104A","#4A1031"]],lineHeights:["1.0","1.2","1.4","1.5","1.6","1.8","2.0","3.0"],tableClassName:"table table-bordered",insertTableMaxSize:{col:10,row:10},dialogsInBody:false,dialogsFade:false,maximumImageFileSize:null,callbacks:{onInit:null,onFocus:null,onBlur:null,onEnter:null,onKeyup:null,onKeydown:null,onImageUpload:null,onImageUploadError:null},codemirror:{mode:"text/html",htmlMode:true,lineNumbers:true},keyMap:{pc:{ENTER:"insertParagraph","CTRL+Z":"undo","CTRL+Y":"redo",TAB:"tab","SHIFT+TAB":"untab","CTRL+B":"bold","CTRL+I":"italic","CTRL+U":"underline","CTRL+SHIFT+S":"strikethrough","CTRL+BACKSLASH":"removeFormat","CTRL+SHIFT+L":"justifyLeft","CTRL+SHIFT+E":"justifyCenter","CTRL+SHIFT+R":"justifyRight","CTRL+SHIFT+J":"justifyFull","CTRL+SHIFT+NUM7":"insertUnorderedList","CTRL+SHIFT+NUM8":"insertOrderedList","CTRL+LEFTBRACKET":"outdent","CTRL+RIGHTBRACKET":"indent","CTRL+NUM0":"formatPara","CTRL+NUM1":"formatH1","CTRL+NUM2":"formatH2","CTRL+NUM3":"formatH3","CTRL+NUM4":"formatH4","CTRL+NUM5":"formatH5","CTRL+NUM6":"formatH6","CTRL+ENTER":"insertHorizontalRule","CTRL+K":"linkDialog.show"},mac:{ENTER:"insertParagraph","CMD+Z":"undo","CMD+SHIFT+Z":"redo",TAB:"tab","SHIFT+TAB":"untab","CMD+B":"bold","CMD+I":"italic","CMD+U":"underline","CMD+SHIFT+S":"strikethrough","CMD+BACKSLASH":"removeFormat","CMD+SHIFT+L":"justifyLeft","CMD+SHIFT+E":"justifyCenter","CMD+SHIFT+R":"justifyRight","CMD+SHIFT+J":"justifyFull","CMD+SHIFT+NUM7":"insertUnorderedList","CMD+SHIFT+NUM8":"insertOrderedList","CMD+LEFTBRACKET":"outdent","CMD+RIGHTBRACKET":"indent","CMD+NUM0":"formatPara","CMD+NUM1":"formatH1","CMD+NUM2":"formatH2","CMD+NUM3":"formatH3","CMD+NUM4":"formatH4","CMD+NUM5":"formatH5","CMD+NUM6":"formatH6","CMD+ENTER":"insertHorizontalRule","CMD+K":"linkDialog.show"}},icons:{align:"note-icon-align",alignCenter:"note-icon-align-center",alignJustify:"note-icon-align-justify",alignLeft:"note-icon-align-left",alignRight:"note-icon-align-right",rowBelow:"note-icon-row-below",colBefore:"note-icon-col-before",colAfter:"note-icon-col-after",rowAbove:"note-icon-row-above",rowRemove:"note-icon-row-remove",colRemove:"note-icon-col-remove",indent:"note-icon-align-indent",outdent:"note-icon-align-outdent",arrowsAlt:"note-icon-arrows-alt",bold:"note-icon-bold",caret:"note-icon-caret",circle:"note-icon-circle",close:"note-icon-close",code:"note-icon-code",eraser:"note-icon-eraser",font:"note-icon-font",frame:"note-icon-frame",italic:"note-icon-italic",link:"note-icon-link",unlink:"note-icon-chain-broken",magic:"note-icon-magic",menuCheck:"note-icon-menu-check",minus:"note-icon-minus",orderedlist:"note-icon-orderedlist",pencil:"note-icon-pencil",picture:"note-icon-picture",question:"note-icon-question",redo:"note-icon-redo",square:"note-icon-square",strikethrough:"note-icon-strikethrough",subscript:"note-icon-subscript",superscript:"note-icon-superscript",table:"note-icon-table",textHeight:"note-icon-text-height",trash:"note-icon-trash",underline:"note-icon-underline",undo:"note-icon-undo",unorderedlist:"note-icon-unorderedlist",video:"note-icon-video"}}})});(function(e){e.extend(e.summernote.lang,{"da-DK":{font:{bold:"Fed",italic:"Kursiv",underline:"Understreget",clear:"Fjern formatering",height:"HÃ¸jde",name:"Skrifttype",strikethrough:"Gennemstreget",subscript:"SÃ¦nket skrift",superscript:"HÃ¦vet skrift",size:"SkriftstÃ¸rrelse"},image:{image:"Billede",insert:"IndsÃ¦t billede",resizeFull:"Original stÃ¸rrelse",resizeHalf:"Halv stÃ¸rrelse",resizeQuarter:"Kvart stÃ¸rrelse",floatLeft:"Venstrestillet",floatRight:"HÃ¸jrestillet",floatNone:"Fjern formatering",shapeRounded:"Form: Runde kanter",shapeCircle:"Form: Cirkel",shapeThumbnail:"Form: Miniature",shapeNone:"Form: Ingen",dragImageHere:"TrÃ¦k billede hertil",dropImage:"Slip billede",selectFromFiles:"VÃ¦lg billed-fil",maximumFileSize:"Maks fil stÃ¸rrelse",maximumFileSizeError:"Filen er stÃ¸rre end maks tilladte fil stÃ¸rrelse!",url:"Billede URL",remove:"Fjern billede"},video:{video:"Video",videoLink:"Video Link",insert:"IndsÃ¦t Video",url:"Video URL?",providers:"(YouTube, Vimeo, Vine, Instagram, DailyMotion eller Youku)"},link:{link:"Link",insert:"IndsÃ¦t link",unlink:"Fjern link",edit:"Rediger",textToDisplay:"Visningstekst",url:"Hvor skal linket pege hen?",openInNewWindow:"Ãbn i nyt vindue"},table:{table:"Tabel"},hr:{insert:"IndsÃ¦t horisontal linje"},style:{style:"Stil",p:"p",blockquote:"Citat",pre:"Kode",h1:"Overskrift 1",h2:"Overskrift 2",h3:"Overskrift 3",h4:"Overskrift 4",h5:"Overskrift 5",h6:"Overskrift 6"},lists:{unordered:"Punktopstillet liste",ordered:"Nummereret liste"},options:{help:"HjÃ¦lp",fullscreen:"Fuld skÃ¦rm",codeview:"HTML-Visning"},paragraph:{paragraph:"Afsnit",outdent:"Formindsk indryk",indent:"ForÃ¸g indryk",left:"Venstrestillet",center:"Centreret",right:"HÃ¸jrestillet",justify:"Blokjuster"},color:{recent:"Nyligt valgt farve",more:"Flere farver",background:"Baggrund",foreground:"Forgrund",transparent:"Transparent",setTransparent:"SÃ¦t transparent",reset:"Nulstil",resetToDefault:"Gendan standardindstillinger"},shortcut:{shortcuts:"Genveje",close:"Luk",textFormatting:"Tekstformatering",action:"Handling",paragraphFormatting:"Afsnitsformatering",documentStyle:"Dokumentstil"},history:{undo:"Fortryd",redo:"Annuller fortryd"}}})})(jQuery);var NoteSaveButton=function(e){var t=$.summernote.ui;var n=t.button({contents:'<i class="fa fa-child"/>Save',tooltip:"save",click:function(){$.post(window.location.pathname,e.invoke("code"))}});return n.render()};$("#pageedit").on("click",function(){if($(this).hasClass("active")){$(".inlineedit").summernote("destroy")}else{$(".inlineedit").summernote({lang:lang,focus:true,buttons:{save:NoteSaveButton},toolbar:[["style",["style"]],["font",["fontname","fontsize"]],["textstyle",["bold","italic","underline","strikethrough","superscript","subscript","clear"]],["color",["color"]],["para",["ul","ol","paragraph","height"]],["insert",["picture","link","video"]],["table",["table"]],["hr",["hr"]],["view",["fullscreen","codeview"]],["edit",["undo","redo"]],["help",["help"]],["save",["save"]]]})}});var Router=function(){var e="";var t=[];var n=function e(t,n){n=n===undefined?[]:n;this.base=this.base===undefined?"":this.base;var i=this.routes[t];if(i===undefined){return undefined}var r=this.base+i.path;for(var o in n){if(n.hasOwnProperty(o)){r=r.replace("{"+o+"}",n[o])}}return r};var i=function e(t){this.base=t};var r=function e(t){this.routes=t};return{generatePath:n,setBasePath:i,setRoutes:r}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
