(function(t,e){"use strict";if(typeof module==="object"&&typeof module.exports==="object"){module.exports=t.document?e(t,true):function(t){if(!t.document){throw new Error("jQuery requires a window with a document")}return e(t)}}else{e(t)}})(typeof window!=="undefined"?window:this,function(t,e){"use strict";var n=[];var i=t.document;var o=Object.getPrototypeOf;var r=n.slice;var s=n.concat;var a=n.push;var l=n.indexOf;var u={};var c=u.toString;var f=u.hasOwnProperty;var d=f.toString;var h=d.call(Object);var p={};var v=function t(e){return typeof e==="function"&&typeof e.nodeType!=="number"};var m=function t(e){return e!=null&&e===e.window};var g={type:true,src:true,noModule:true};function y(t,e,n){e=e||i;var o,r=e.createElement("script");r.text=t;if(n){for(o in g){if(n[o]){r[o]=n[o]}}}e.head.appendChild(r).parentNode.removeChild(r)}function b(t){if(t==null){return t+""}return typeof t==="object"||typeof t==="function"?u[c.call(t)]||"object":typeof t}var w="3.3.1",x=function(t,e){return new x.fn.init(t,e)},C=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.fn=x.prototype={jquery:w,constructor:x,length:0,toArray:function(){return r.call(this)},get:function(t){if(t==null){return r.call(this)}return t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=x.merge(this.constructor(),t);e.prevObject=this;return e},each:function(t){return x.each(this,t)},map:function(t){return this.pushStack(x.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(r.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:n.sort,splice:n.splice};x.extend=x.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,u=false;if(typeof s==="boolean"){u=s;s=arguments[a]||{};a++}if(typeof s!=="object"&&!v(s)){s={}}if(a===l){s=this;a--}for(;a<l;a++){if((t=arguments[a])!=null){for(e in t){n=s[e];i=t[e];if(s===i){continue}if(u&&i&&(x.isPlainObject(i)||(o=Array.isArray(i)))){if(o){o=false;r=n&&Array.isArray(n)?n:[]}else{r=n&&x.isPlainObject(n)?n:{}}s[e]=x.extend(u,r,i)}else if(i!==undefined){s[e]=i}}}}return s};x.extend({expando:"jQuery"+(w+Math.random()).replace(/\D/g,""),isReady:true,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;if(!t||c.call(t)!=="[object Object]"){return false}e=o(t);if(!e){return true}n=f.call(e,"constructor")&&e.constructor;return typeof n==="function"&&d.call(n)===h},isEmptyObject:function(t){var e;for(e in t){return false}return true},globalEval:function(t){y(t)},each:function(t,e){var n,i=0;if(k(t)){n=t.length;for(;i<n;i++){if(e.call(t[i],i,t[i])===false){break}}}else{for(i in t){if(e.call(t[i],i,t[i])===false){break}}}return t},trim:function(t){return t==null?"":(t+"").replace(C,"")},makeArray:function(t,e){var n=e||[];if(t!=null){if(k(Object(t))){x.merge(n,typeof t==="string"?[t]:t)}else{a.call(n,t)}}return n},inArray:function(t,e,n){return e==null?-1:l.call(e,t,n)},merge:function(t,e){var n=+e.length,i=0,o=t.length;for(;i<n;i++){t[o++]=e[i]}t.length=o;return t},grep:function(t,e,n){var i,o=[],r=0,s=t.length,a=!n;for(;r<s;r++){i=!e(t[r],r);if(i!==a){o.push(t[r])}}return o},map:function(t,e,n){var i,o,r=0,a=[];if(k(t)){i=t.length;for(;r<i;r++){o=e(t[r],r,n);if(o!=null){a.push(o)}}}else{for(r in t){o=e(t[r],r,n);if(o!=null){a.push(o)}}}return s.apply([],a)},guid:1,support:p});if(typeof Symbol==="function"){x.fn[Symbol.iterator]=n[Symbol.iterator]}x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){u["[object "+e+"]"]=e.toLowerCase()});function k(t){var e=!!t&&"length"in t&&t.length,n=b(t);if(v(t)||m(t)){return false}return n==="array"||e===0||typeof e==="number"&&e>0&&e-1 in t}var T=function(t){var e,n,i,o,r,s,a,l,u,c,f,d,h,p,v,m,g,y,b,w="sizzle"+1*new Date,x=t.document,C=0,k=0,T=st(),S=st(),$=st(),E=function(t,e){if(t===e){f=true}return 0},N={}.hasOwnProperty,A=[],I=A.pop,D=A.push,R=A.push,L=A.slice,H=function(t,e){var n=0,i=t.length;for(;n<i;n++){if(t[n]===e){return n}}return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",j="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",O="\\["+F+"*("+j+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+F+"*\\]",M=":("+j+")(?:\\(("+"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|"+"((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|"+".*"+")\\)|)",B=new RegExp(F+"+","g"),z=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),q=new RegExp("^"+F+"*,"+F+"*"),U=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),W=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),V=new RegExp(M),_=new RegExp("^"+j+"$"),K={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+M),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,X=/^[^{]+\{\s*\[native \w/,Y=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),tt=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,i&1023|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){if(e){if(t==="\0"){return"ï¿½"}return t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" "}return"\\"+t},it=function(){d()},ot=yt(function(t){return t.disabled===true&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{R.apply(A=L.call(x.childNodes),x.childNodes);A[x.childNodes.length].nodeType}catch(t){R={apply:A.length?function(t,e){D.apply(t,L.call(e))}:function(t,e){var n=t.length,i=0;while(t[n++]=e[i++]){}t.length=n-1}}}function rt(t,e,i,o){var r,a,u,c,f,p,g,y=e&&e.ownerDocument,C=e?e.nodeType:9;i=i||[];if(typeof t!=="string"||!t||C!==1&&C!==9&&C!==11){return i}if(!o){if((e?e.ownerDocument||e:x)!==h){d(e)}e=e||h;if(v){if(C!==11&&(f=Y.exec(t))){if(r=f[1]){if(C===9){if(u=e.getElementById(r)){if(u.id===r){i.push(u);return i}}else{return i}}else{if(y&&(u=y.getElementById(r))&&b(e,u)&&u.id===r){i.push(u);return i}}}else if(f[2]){R.apply(i,e.getElementsByTagName(t));return i}else if((r=f[3])&&n.getElementsByClassName&&e.getElementsByClassName){R.apply(i,e.getElementsByClassName(r));return i}}if(n.qsa&&!$[t+" "]&&(!m||!m.test(t))){if(C!==1){y=e;g=t}else if(e.nodeName.toLowerCase()!=="object"){if(c=e.getAttribute("id")){c=c.replace(et,nt)}else{e.setAttribute("id",c=w)}p=s(t);a=p.length;while(a--){p[a]="#"+c+" "+gt(p[a])}g=p.join(",");y=J.test(t)&&vt(e.parentNode)||e}if(g){try{R.apply(i,y.querySelectorAll(g));return i}catch(t){}finally{if(c===w){e.removeAttribute("id")}}}}}}return l(t.replace(z,"$1"),e,i,o)}function st(){var t=[];function e(n,o){if(t.push(n+" ")>i.cacheLength){delete e[t.shift()]}return e[n+" "]=o}return e}function at(t){t[w]=true;return t}function lt(t){var e=h.createElement("fieldset");try{return!!t(e)}catch(t){return false}finally{if(e.parentNode){e.parentNode.removeChild(e)}e=null}}function ut(t,e){var n=t.split("|"),o=n.length;while(o--){i.attrHandle[n[o]]=e}}function ct(t,e){var n=e&&t,i=n&&t.nodeType===1&&e.nodeType===1&&t.sourceIndex-e.sourceIndex;if(i){return i}if(n){while(n=n.nextSibling){if(n===e){return-1}}}return t?1:-1}function ft(t){return function(e){var n=e.nodeName.toLowerCase();return n==="input"&&e.type===t}}function dt(t){return function(e){var n=e.nodeName.toLowerCase();return(n==="input"||n==="button")&&e.type===t}}function ht(t){return function(e){if("form"in e){if(e.parentNode&&e.disabled===false){if("label"in e){if("label"in e.parentNode){return e.parentNode.disabled===t}else{return e.disabled===t}}return e.isDisabled===t||e.isDisabled!==!t&&ot(e)===t}return e.disabled===t}else if("label"in e){return e.disabled===t}return false}}function pt(t){return at(function(e){e=+e;return at(function(n,i){var o,r=t([],n.length,e),s=r.length;while(s--){if(n[o=r[s]]){n[o]=!(i[o]=n[o])}}})})}function vt(t){return t&&typeof t.getElementsByTagName!=="undefined"&&t}n=rt.support={};r=rt.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?e.nodeName!=="HTML":false};d=rt.setDocument=function(t){var e,o,s=t?t.ownerDocument||t:x;if(s===h||s.nodeType!==9||!s.documentElement){return h}h=s;p=h.documentElement;v=!r(h);if(x!==h&&(o=h.defaultView)&&o.top!==o){if(o.addEventListener){o.addEventListener("unload",it,false)}else if(o.attachEvent){o.attachEvent("onunload",it)}}n.attributes=lt(function(t){t.className="i";return!t.getAttribute("className")});n.getElementsByTagName=lt(function(t){t.appendChild(h.createComment(""));return!t.getElementsByTagName("*").length});n.getElementsByClassName=X.test(h.getElementsByClassName);n.getById=lt(function(t){p.appendChild(t).id=w;return!h.getElementsByName||!h.getElementsByName(w).length});if(n.getById){i.filter["ID"]=function(t){var e=t.replace(Z,tt);return function(t){return t.getAttribute("id")===e}};i.find["ID"]=function(t,e){if(typeof e.getElementById!=="undefined"&&v){var n=e.getElementById(t);return n?[n]:[]}}}else{i.filter["ID"]=function(t){var e=t.replace(Z,tt);return function(t){var n=typeof t.getAttributeNode!=="undefined"&&t.getAttributeNode("id");return n&&n.value===e}};i.find["ID"]=function(t,e){if(typeof e.getElementById!=="undefined"&&v){var n,i,o,r=e.getElementById(t);if(r){n=r.getAttributeNode("id");if(n&&n.value===t){return[r]}o=e.getElementsByName(t);i=0;while(r=o[i++]){n=r.getAttributeNode("id");if(n&&n.value===t){return[r]}}}return[]}}}i.find["TAG"]=n.getElementsByTagName?function(t,e){if(typeof e.getElementsByTagName!=="undefined"){return e.getElementsByTagName(t)}else if(n.qsa){return e.querySelectorAll(t)}}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if(t==="*"){while(n=r[o++]){if(n.nodeType===1){i.push(n)}}return i}return r};i.find["CLASS"]=n.getElementsByClassName&&function(t,e){if(typeof e.getElementsByClassName!=="undefined"&&v){return e.getElementsByClassName(t)}};g=[];m=[];if(n.qsa=X.test(h.querySelectorAll)){lt(function(t){p.appendChild(t).innerHTML="<a id='"+w+"'></a>"+"<select id='"+w+"-\r\\' msallowcapture=''>"+"<option selected=''></option></select>";if(t.querySelectorAll("[msallowcapture^='']").length){m.push("[*^$]="+F+"*(?:''|\"\")")}if(!t.querySelectorAll("[selected]").length){m.push("\\["+F+"*(?:value|"+P+")")}if(!t.querySelectorAll("[id~="+w+"-]").length){m.push("~=")}if(!t.querySelectorAll(":checked").length){m.push(":checked")}if(!t.querySelectorAll("a#"+w+"+*").length){m.push(".#.+[+~]")}});lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a>"+"<select disabled='disabled'><option/></select>";var e=h.createElement("input");e.setAttribute("type","hidden");t.appendChild(e).setAttribute("name","D");if(t.querySelectorAll("[name=d]").length){m.push("name"+F+"*[*^$|!~]?=")}if(t.querySelectorAll(":enabled").length!==2){m.push(":enabled",":disabled")}p.appendChild(t).disabled=true;if(t.querySelectorAll(":disabled").length!==2){m.push(":enabled",":disabled")}t.querySelectorAll("*,:x");m.push(",.*:")})}if(n.matchesSelector=X.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector)){lt(function(t){n.disconnectedMatch=y.call(t,"*");y.call(t,"[s!='']:x");g.push("!=",M)})}m=m.length&&new RegExp(m.join("|"));g=g.length&&new RegExp(g.join("|"));e=X.test(p.compareDocumentPosition);b=e||X.test(p.contains)?function(t,e){var n=t.nodeType===9?t.documentElement:t,i=e&&e.parentNode;return t===i||!!(i&&i.nodeType===1&&(n.contains?n.contains(i):t.compareDocumentPosition&&t.compareDocumentPosition(i)&16))}:function(t,e){if(e){while(e=e.parentNode){if(e===t){return true}}}return false};E=e?function(t,e){if(t===e){f=true;return 0}var i=!t.compareDocumentPosition-!e.compareDocumentPosition;if(i){return i}i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1;if(i&1||!n.sortDetached&&e.compareDocumentPosition(t)===i){if(t===h||t.ownerDocument===x&&b(x,t)){return-1}if(e===h||e.ownerDocument===x&&b(x,e)){return 1}return c?H(c,t)-H(c,e):0}return i&4?-1:1}:function(t,e){if(t===e){f=true;return 0}var n,i=0,o=t.parentNode,r=e.parentNode,s=[t],a=[e];if(!o||!r){return t===h?-1:e===h?1:o?-1:r?1:c?H(c,t)-H(c,e):0}else if(o===r){return ct(t,e)}n=t;while(n=n.parentNode){s.unshift(n)}n=e;while(n=n.parentNode){a.unshift(n)}while(s[i]===a[i]){i++}return i?ct(s[i],a[i]):s[i]===x?-1:a[i]===x?1:0};return h};rt.matches=function(t,e){return rt(t,null,null,e)};rt.matchesSelector=function(t,e){if((t.ownerDocument||t)!==h){d(t)}e=e.replace(W,"='$1']");if(n.matchesSelector&&v&&!$[e+" "]&&(!g||!g.test(e))&&(!m||!m.test(e))){try{var i=y.call(t,e);if(i||n.disconnectedMatch||t.document&&t.document.nodeType!==11){return i}}catch(t){}}return rt(e,h,null,[t]).length>0};rt.contains=function(t,e){if((t.ownerDocument||t)!==h){d(t)}return b(t,e)};rt.attr=function(t,e){if((t.ownerDocument||t)!==h){d(t)}var o=i.attrHandle[e.toLowerCase()],r=o&&N.call(i.attrHandle,e.toLowerCase())?o(t,e,!v):undefined;return r!==undefined?r:n.attributes||!v?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null};rt.escape=function(t){return(t+"").replace(et,nt)};rt.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)};rt.uniqueSort=function(t){var e,i=[],o=0,r=0;f=!n.detectDuplicates;c=!n.sortStable&&t.slice(0);t.sort(E);if(f){while(e=t[r++]){if(e===t[r]){o=i.push(r)}}while(o--){t.splice(i[o],1)}}c=null;return t};o=rt.getText=function(t){var e,n="",i=0,r=t.nodeType;if(!r){while(e=t[i++]){n+=o(e)}}else if(r===1||r===9||r===11){if(typeof t.textContent==="string"){return t.textContent}else{for(t=t.firstChild;t;t=t.nextSibling){n+=o(t)}}}else if(r===3||r===4){return t.nodeValue}return n};i=rt.selectors={cacheLength:50,createPseudo:at,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){t[1]=t[1].replace(Z,tt);t[3]=(t[3]||t[4]||t[5]||"").replace(Z,tt);if(t[2]==="~="){t[3]=" "+t[3]+" "}return t.slice(0,4)},CHILD:function(t){t[1]=t[1].toLowerCase();if(t[1].slice(0,3)==="nth"){if(!t[3]){rt.error(t[0])}t[4]=+(t[4]?t[5]+(t[6]||1):2*(t[3]==="even"||t[3]==="odd"));t[5]=+(t[7]+t[8]||t[3]==="odd")}else if(t[3]){rt.error(t[0])}return t},PSEUDO:function(t){var e,n=!t[6]&&t[2];if(K["CHILD"].test(t[0])){return null}if(t[3]){t[2]=t[4]||t[5]||""}else if(n&&V.test(n)&&(e=s(n,true))&&(e=n.indexOf(")",n.length-e)-n.length)){t[0]=t[0].slice(0,e);t[2]=n.slice(0,e)}return t.slice(0,3)}},filter:{TAG:function(t){var e=t.replace(Z,tt).toLowerCase();return t==="*"?function(){return true}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=T[t+" "];return e||(e=new RegExp("(^|"+F+")"+t+"("+F+"|$)"))&&T(t,function(t){return e.test(typeof t.className==="string"&&t.className||typeof t.getAttribute!=="undefined"&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(i){var o=rt.attr(i,t);if(o==null){return e==="!="}if(!e){return true}o+="";return e==="="?o===n:e==="!="?o!==n:e==="^="?n&&o.indexOf(n)===0:e==="*="?n&&o.indexOf(n)>-1:e==="$="?n&&o.slice(-n.length)===n:e==="~="?(" "+o.replace(B," ")+" ").indexOf(n)>-1:e==="|="?o===n||o.slice(0,n.length+1)===n+"-":false}},CHILD:function(t,e,n,i,o){var r=t.slice(0,3)!=="nth",s=t.slice(-4)!=="last",a=e==="of-type";return i===1&&o===0?function(t){return!!t.parentNode}:function(e,n,l){var u,c,f,d,h,p,v=r!==s?"nextSibling":"previousSibling",m=e.parentNode,g=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=false;if(m){if(r){while(v){d=e;while(d=d[v]){if(a?d.nodeName.toLowerCase()===g:d.nodeType===1){return false}}p=v=t==="only"&&!p&&"nextSibling"}return true}p=[s?m.firstChild:m.lastChild];if(s&&y){d=m;f=d[w]||(d[w]={});c=f[d.uniqueID]||(f[d.uniqueID]={});u=c[t]||[];h=u[0]===C&&u[1];b=h&&u[2];d=h&&m.childNodes[h];while(d=++h&&d&&d[v]||(b=h=0)||p.pop()){if(d.nodeType===1&&++b&&d===e){c[t]=[C,h,b];break}}}else{if(y){d=e;f=d[w]||(d[w]={});c=f[d.uniqueID]||(f[d.uniqueID]={});u=c[t]||[];h=u[0]===C&&u[1];b=h}if(b===false){while(d=++h&&d&&d[v]||(b=h=0)||p.pop()){if((a?d.nodeName.toLowerCase()===g:d.nodeType===1)&&++b){if(y){f=d[w]||(d[w]={});c=f[d.uniqueID]||(f[d.uniqueID]={});c[t]=[C,b]}if(d===e){break}}}}}b-=o;return b===i||b%i===0&&b/i>=0}}},PSEUDO:function(t,e){var n,o=i.pseudos[t]||i.setFilters[t.toLowerCase()]||rt.error("unsupported pseudo: "+t);if(o[w]){return o(e)}if(o.length>1){n=[t,t,"",e];return i.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,n){var i,r=o(t,e),s=r.length;while(s--){i=H(t,r[s]);t[i]=!(n[i]=r[s])}}):function(t){return o(t,0,n)}}return o}},pseudos:{not:at(function(t){var e=[],n=[],i=a(t.replace(z,"$1"));return i[w]?at(function(t,e,n,o){var r,s=i(t,null,o,[]),a=t.length;while(a--){if(r=s[a]){t[a]=!(e[a]=r)}}}):function(t,o,r){e[0]=t;i(e,null,r,n);e[0]=null;return!n.pop()}}),has:at(function(t){return function(e){return rt(t,e).length>0}}),contains:at(function(t){t=t.replace(Z,tt);return function(e){return(e.textContent||e.innerText||o(e)).indexOf(t)>-1}}),lang:at(function(t){if(!_.test(t||"")){rt.error("unsupported lang: "+t)}t=t.replace(Z,tt).toLowerCase();return function(e){var n;do{if(n=v?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang")){n=n.toLowerCase();return n===t||n.indexOf(t+"-")===0}}while((e=e.parentNode)&&e.nodeType===1);return false}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===p},focus:function(t){return t===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:ht(false),disabled:ht(true),checked:function(t){var e=t.nodeName.toLowerCase();return e==="input"&&!!t.checked||e==="option"&&!!t.selected},selected:function(t){if(t.parentNode){t.parentNode.selectedIndex}return t.selected===true},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling){if(t.nodeType<6){return false}}return true},parent:function(t){return!i.pseudos["empty"](t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return G.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return e==="input"&&t.type==="button"||e==="button"},text:function(t){var e;return t.nodeName.toLowerCase()==="input"&&t.type==="text"&&((e=t.getAttribute("type"))==null||e.toLowerCase()==="text")},first:pt(function(){return[0]}),last:pt(function(t,e){return[e-1]}),eq:pt(function(t,e,n){return[n<0?n+e:n]}),even:pt(function(t,e){var n=0;for(;n<e;n+=2){t.push(n)}return t}),odd:pt(function(t,e){var n=1;for(;n<e;n+=2){t.push(n)}return t}),lt:pt(function(t,e,n){var i=n<0?n+e:n;for(;--i>=0;){t.push(i)}return t}),gt:pt(function(t,e,n){var i=n<0?n+e:n;for(;++i<e;){t.push(i)}return t})}};i.pseudos["nth"]=i.pseudos["eq"];for(e in{radio:true,checkbox:true,file:true,password:true,image:true}){i.pseudos[e]=ft(e)}for(e in{submit:true,reset:true}){i.pseudos[e]=dt(e)}function mt(){}mt.prototype=i.filters=i.pseudos;i.setFilters=new mt;s=rt.tokenize=function(t,e){var n,o,r,s,a,l,u,c=S[t+" "];if(c){return e?0:c.slice(0)}a=t;l=[];u=i.preFilter;while(a){if(!n||(o=q.exec(a))){if(o){a=a.slice(o[0].length)||a}l.push(r=[])}n=false;if(o=U.exec(a)){n=o.shift();r.push({value:n,type:o[0].replace(z," ")});a=a.slice(n.length)}for(s in i.filter){if((o=K[s].exec(a))&&(!u[s]||(o=u[s](o)))){n=o.shift();r.push({value:n,type:s,matches:o});a=a.slice(n.length)}}if(!n){break}}return e?a.length:a?rt.error(t):S(t,l).slice(0)};function gt(t){var e=0,n=t.length,i="";for(;e<n;e++){i+=t[e].value}return i}function yt(t,e,n){var i=e.dir,o=e.next,r=o||i,s=n&&r==="parentNode",a=k++;return e.first?function(e,n,o){while(e=e[i]){if(e.nodeType===1||s){return t(e,n,o)}}return false}:function(e,n,l){var u,c,f,d=[C,a];if(l){while(e=e[i]){if(e.nodeType===1||s){if(t(e,n,l)){return true}}}}else{while(e=e[i]){if(e.nodeType===1||s){f=e[w]||(e[w]={});c=f[e.uniqueID]||(f[e.uniqueID]={});if(o&&o===e.nodeName.toLowerCase()){e=e[i]||e}else if((u=c[r])&&u[0]===C&&u[1]===a){return d[2]=u[2]}else{c[r]=d;if(d[2]=t(e,n,l)){return true}}}}}return false}}function bt(t){return t.length>1?function(e,n,i){var o=t.length;while(o--){if(!t[o](e,n,i)){return false}}return true}:t[0]}function wt(t,e,n){var i=0,o=e.length;for(;i<o;i++){rt(t,e[i],n)}return n}function xt(t,e,n,i,o){var r,s=[],a=0,l=t.length,u=e!=null;for(;a<l;a++){if(r=t[a]){if(!n||n(r,i,o)){s.push(r);if(u){e.push(a)}}}}return s}function Ct(t,e,n,i,o,r){if(i&&!i[w]){i=Ct(i)}if(o&&!o[w]){o=Ct(o,r)}return at(function(r,s,a,l){var u,c,f,d=[],h=[],p=s.length,v=r||wt(e||"*",a.nodeType?[a]:a,[]),m=t&&(r||!e)?xt(v,d,t,a,l):v,g=n?o||(r?t:p||i)?[]:s:m;if(n){n(m,g,a,l)}if(i){u=xt(g,h);i(u,[],a,l);c=u.length;while(c--){if(f=u[c]){g[h[c]]=!(m[h[c]]=f)}}}if(r){if(o||t){if(o){u=[];c=g.length;while(c--){if(f=g[c]){u.push(m[c]=f)}}o(null,g=[],u,l)}c=g.length;while(c--){if((f=g[c])&&(u=o?H(r,f):d[c])>-1){r[u]=!(s[u]=f)}}}}else{g=xt(g===s?g.splice(p,g.length):g);if(o){o(null,s,g,l)}else{R.apply(s,g)}}})}function kt(t){var e,n,o,r=t.length,s=i.relative[t[0].type],a=s||i.relative[" "],l=s?1:0,c=yt(function(t){return t===e},a,true),f=yt(function(t){return H(e,t)>-1},a,true),d=[function(t,n,i){var o=!s&&(i||n!==u)||((e=n).nodeType?c(t,n,i):f(t,n,i));e=null;return o}];for(;l<r;l++){if(n=i.relative[t[l].type]){d=[yt(bt(d),n)]}else{n=i.filter[t[l].type].apply(null,t[l].matches);if(n[w]){o=++l;for(;o<r;o++){if(i.relative[t[o].type]){break}}return Ct(l>1&&bt(d),l>1&&gt(t.slice(0,l-1).concat({value:t[l-2].type===" "?"*":""})).replace(z,"$1"),n,l<o&&kt(t.slice(l,o)),o<r&&kt(t=t.slice(o)),o<r&&gt(t))}d.push(n)}}return bt(d)}function Tt(t,e){var n=e.length>0,o=t.length>0,r=function(r,s,a,l,c){var f,p,m,g=0,y="0",b=r&&[],w=[],x=u,k=r||o&&i.find["TAG"]("*",c),T=C+=x==null?1:Math.random()||.1,S=k.length;if(c){u=s===h||s||c}for(;y!==S&&(f=k[y])!=null;y++){if(o&&f){p=0;if(!s&&f.ownerDocument!==h){d(f);a=!v}while(m=t[p++]){if(m(f,s||h,a)){l.push(f);break}}if(c){C=T}}if(n){if(f=!m&&f){g--}if(r){b.push(f)}}}g+=y;if(n&&y!==g){p=0;while(m=e[p++]){m(b,w,s,a)}if(r){if(g>0){while(y--){if(!(b[y]||w[y])){w[y]=I.call(l)}}}w=xt(w)}R.apply(l,w);if(c&&!r&&w.length>0&&g+e.length>1){rt.uniqueSort(l)}}if(c){C=T;u=x}return b};return n?at(r):r}a=rt.compile=function(t,e){var n,i=[],o=[],r=$[t+" "];if(!r){if(!e){e=s(t)}n=e.length;while(n--){r=kt(e[n]);if(r[w]){i.push(r)}else{o.push(r)}}r=$(t,Tt(o,i));r.selector=t}return r};l=rt.select=function(t,e,n,o){var r,l,u,c,f,d=typeof t==="function"&&t,h=!o&&s(t=d.selector||t);n=n||[];if(h.length===1){l=h[0]=h[0].slice(0);if(l.length>2&&(u=l[0]).type==="ID"&&e.nodeType===9&&v&&i.relative[l[1].type]){e=(i.find["ID"](u.matches[0].replace(Z,tt),e)||[])[0];if(!e){return n}else if(d){e=e.parentNode}t=t.slice(l.shift().value.length)}r=K["needsContext"].test(t)?0:l.length;while(r--){u=l[r];if(i.relative[c=u.type]){break}if(f=i.find[c]){if(o=f(u.matches[0].replace(Z,tt),J.test(l[0].type)&&vt(e.parentNode)||e)){l.splice(r,1);t=o.length&&gt(l);if(!t){R.apply(n,o);return n}break}}}}(d||a(t,h))(o,e,!v,n,!e||J.test(t)&&vt(e.parentNode)||e);return n};n.sortStable=w.split("").sort(E).join("")===w;n.detectDuplicates=!!f;d();n.sortDetached=lt(function(t){return t.compareDocumentPosition(h.createElement("fieldset"))&1});if(!lt(function(t){t.innerHTML="<a href='#'></a>";return t.firstChild.getAttribute("href")==="#"})){ut("type|href|height|width",function(t,e,n){if(!n){return t.getAttribute(e,e.toLowerCase()==="type"?1:2)}})}if(!n.attributes||!lt(function(t){t.innerHTML="<input/>";t.firstChild.setAttribute("value","");return t.firstChild.getAttribute("value")===""})){ut("value",function(t,e,n){if(!n&&t.nodeName.toLowerCase()==="input"){return t.defaultValue}})}if(!lt(function(t){return t.getAttribute("disabled")==null})){ut(P,function(t,e,n){var i;if(!n){return t[e]===true?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}})}return rt}(t);x.find=T;x.expr=T.selectors;x.expr[":"]=x.expr.pseudos;x.uniqueSort=x.unique=T.uniqueSort;x.text=T.getText;x.isXMLDoc=T.isXML;x.contains=T.contains;x.escapeSelector=T.escape;var S=function(t,e,n){var i=[],o=n!==undefined;while((t=t[e])&&t.nodeType!==9){if(t.nodeType===1){if(o&&x(t).is(n)){break}i.push(t)}}return i};var $=function(t,e){var n=[];for(;t;t=t.nextSibling){if(t.nodeType===1&&t!==e){n.push(t)}}return n};var E=x.expr.match.needsContext;function N(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(t,e,n){if(v(e)){return x.grep(t,function(t,i){return!!e.call(t,i,t)!==n})}if(e.nodeType){return x.grep(t,function(t){return t===e!==n})}if(typeof e!=="string"){return x.grep(t,function(t){return l.call(e,t)>-1!==n})}return x.filter(e,t,n)}x.filter=function(t,e,n){var i=e[0];if(n){t=":not("+t+")"}if(e.length===1&&i.nodeType===1){return x.find.matchesSelector(i,t)?[i]:[]}return x.find.matches(t,x.grep(e,function(t){return t.nodeType===1}))};x.fn.extend({find:function(t){var e,n,i=this.length,o=this;if(typeof t!=="string"){return this.pushStack(x(t).filter(function(){for(e=0;e<i;e++){if(x.contains(o[e],this)){return true}}}))}n=this.pushStack([]);for(e=0;e<i;e++){x.find(t,o[e],n)}return i>1?x.uniqueSort(n):n},filter:function(t){return this.pushStack(I(this,t||[],false))},not:function(t){return this.pushStack(I(this,t||[],true))},is:function(t){return!!I(this,typeof t==="string"&&E.test(t)?x(t):t||[],false).length}});var D,R=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,L=x.fn.init=function(t,e,n){var o,r;if(!t){return this}n=n||D;if(typeof t==="string"){if(t[0]==="<"&&t[t.length-1]===">"&&t.length>=3){o=[null,t,null]}else{o=R.exec(t)}if(o&&(o[1]||!e)){if(o[1]){e=e instanceof x?e[0]:e;x.merge(this,x.parseHTML(o[1],e&&e.nodeType?e.ownerDocument||e:i,true));if(A.test(o[1])&&x.isPlainObject(e)){for(o in e){if(v(this[o])){this[o](e[o])}else{this.attr(o,e[o])}}}return this}else{r=i.getElementById(o[2]);if(r){this[0]=r;this.length=1}return this}}else if(!e||e.jquery){return(e||n).find(t)}else{return this.constructor(e).find(t)}}else if(t.nodeType){this[0]=t;this.length=1;return this}else if(v(t)){return n.ready!==undefined?n.ready(t):t(x)}return x.makeArray(t,this)};L.prototype=x.fn;D=x(i);var H=/^(?:parents|prev(?:Until|All))/,P={children:true,contents:true,next:true,prev:true};x.fn.extend({has:function(t){var e=x(t,this),n=e.length;return this.filter(function(){var t=0;for(;t<n;t++){if(x.contains(this,e[t])){return true}}})},closest:function(t,e){var n,i=0,o=this.length,r=[],s=typeof t!=="string"&&x(t);if(!E.test(t)){for(;i<o;i++){for(n=this[i];n&&n!==e;n=n.parentNode){if(n.nodeType<11&&(s?s.index(n)>-1:n.nodeType===1&&x.find.matchesSelector(n,t))){r.push(n);break}}}}return this.pushStack(r.length>1?x.uniqueSort(r):r)},index:function(t){if(!t){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1}if(typeof t==="string"){return l.call(x(t),this[0])}return l.call(this,t.jquery?t[0]:t)},add:function(t,e){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(t,e))))},addBack:function(t){return this.add(t==null?this.prevObject:this.prevObject.filter(t))}});function F(t,e){while((t=t[e])&&t.nodeType!==1){}return t}x.each({parent:function(t){var e=t.parentNode;return e&&e.nodeType!==11?e:null},parents:function(t){return S(t,"parentNode")},parentsUntil:function(t,e,n){return S(t,"parentNode",n)},next:function(t){return F(t,"nextSibling")},prev:function(t){return F(t,"previousSibling")},nextAll:function(t){return S(t,"nextSibling")},prevAll:function(t){return S(t,"previousSibling")},nextUntil:function(t,e,n){return S(t,"nextSibling",n)},prevUntil:function(t,e,n){return S(t,"previousSibling",n)},siblings:function(t){return $((t.parentNode||{}).firstChild,t)},children:function(t){return $(t.firstChild)},contents:function(t){if(N(t,"iframe")){return t.contentDocument}if(N(t,"template")){t=t.content||t}return x.merge([],t.childNodes)}},function(t,e){x.fn[t]=function(n,i){var o=x.map(this,e,n);if(t.slice(-5)!=="Until"){i=n}if(i&&typeof i==="string"){o=x.filter(i,o)}if(this.length>1){if(!P[t]){x.uniqueSort(o)}if(H.test(t)){o.reverse()}}return this.pushStack(o)}});var j=/[^\x20\t\r\n\f]+/g;function O(t){var e={};x.each(t.match(j)||[],function(t,n){e[n]=true});return e}x.Callbacks=function(t){t=typeof t==="string"?O(t):x.extend({},t);var e,n,i,o,r=[],s=[],a=-1,l=function(){o=o||t.once;i=e=true;for(;s.length;a=-1){n=s.shift();while(++a<r.length){if(r[a].apply(n[0],n[1])===false&&t.stopOnFalse){a=r.length;n=false}}}if(!t.memory){n=false}e=false;if(o){if(n){r=[]}else{r=""}}},u={add:function(){if(r){if(n&&!e){a=r.length-1;s.push(n)}(function e(n){x.each(n,function(n,i){if(v(i)){if(!t.unique||!u.has(i)){r.push(i)}}else if(i&&i.length&&b(i)!=="string"){e(i)}})})(arguments);if(n&&!e){l()}}return this},remove:function(){x.each(arguments,function(t,e){var n;while((n=x.inArray(e,r,n))>-1){r.splice(n,1);if(n<=a){a--}}});return this},has:function(t){return t?x.inArray(t,r)>-1:r.length>0},empty:function(){if(r){r=[]}return this},disable:function(){o=s=[];r=n="";return this},disabled:function(){return!r},lock:function(){o=s=[];if(!n&&!e){r=n=""}return this},locked:function(){return!!o},fireWith:function(t,n){if(!o){n=n||[];n=[t,n.slice?n.slice():n];s.push(n);if(!e){l()}}return this},fire:function(){u.fireWith(this,arguments);return this},fired:function(){return!!i}};return u};function M(t){return t}function B(t){throw t}function z(t,e,n,i){var o;try{if(t&&v(o=t.promise)){o.call(t).done(e).fail(n)}else if(t&&v(o=t.then)){o.call(t,e,n)}else{e.apply(undefined,[t].slice(i))}}catch(t){n.apply(undefined,[t])}}x.extend({Deferred:function(e){var n=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){r.done(arguments).fail(arguments);return this},catch:function(t){return o.then(null,t)},pipe:function(){var t=arguments;return x.Deferred(function(e){x.each(n,function(n,i){var o=v(t[i[4]])&&t[i[4]];r[i[1]](function(){var t=o&&o.apply(this,arguments);if(t&&v(t.promise)){t.promise().progress(e.notify).done(e.resolve).fail(e.reject)}else{e[i[0]+"With"](this,o?[t]:arguments)}})});t=null}).promise()},then:function(e,i,o){var r=0;function s(e,n,i,o){return function(){var a=this,l=arguments,u=function(){var t,u;if(e<r){return}t=i.apply(a,l);if(t===n.promise()){throw new TypeError("Thenable self-resolution")}u=t&&(typeof t==="object"||typeof t==="function")&&t.then;if(v(u)){if(o){u.call(t,s(r,n,M,o),s(r,n,B,o))}else{r++;u.call(t,s(r,n,M,o),s(r,n,B,o),s(r,n,M,n.notifyWith))}}else{if(i!==M){a=undefined;l=[t]}(o||n.resolveWith)(a,l)}},c=o?u:function(){try{u()}catch(t){if(x.Deferred.exceptionHook){x.Deferred.exceptionHook(t,c.stackTrace)}if(e+1>=r){if(i!==B){a=undefined;l=[t]}n.rejectWith(a,l)}}};if(e){c()}else{if(x.Deferred.getStackHook){c.stackTrace=x.Deferred.getStackHook()}t.setTimeout(c)}}}return x.Deferred(function(t){n[0][3].add(s(0,t,v(o)?o:M,t.notifyWith));n[1][3].add(s(0,t,v(e)?e:M));n[2][3].add(s(0,t,v(i)?i:B))}).promise()},promise:function(t){return t!=null?x.extend(t,o):o}},r={};x.each(n,function(t,e){var s=e[2],a=e[5];o[e[1]]=s.add;if(a){s.add(function(){i=a},n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock)}s.add(e[3].fire);r[e[0]]=function(){r[e[0]+"With"](this===r?undefined:this,arguments);return this};r[e[0]+"With"]=s.fireWith});o.promise(r);if(e){e.call(r,r)}return r},when:function(t){var e=arguments.length,n=e,i=Array(n),o=r.call(arguments),s=x.Deferred(),a=function(t){return function(n){i[t]=this;o[t]=arguments.length>1?r.call(arguments):n;if(!--e){s.resolveWith(i,o)}}};if(e<=1){z(t,s.done(a(n)).resolve,s.reject,!e);if(s.state()==="pending"||v(o[n]&&o[n].then)){return s.then()}}while(n--){z(o[n],a(n),s.reject)}return s.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,n){if(t.console&&t.console.warn&&e&&q.test(e.name)){t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)}};x.readyException=function(e){t.setTimeout(function(){throw e})};var U=x.Deferred();x.fn.ready=function(t){U.then(t).catch(function(t){x.readyException(t)});return this};x.extend({isReady:false,readyWait:1,ready:function(t){if(t===true?--x.readyWait:x.isReady){return}x.isReady=true;if(t!==true&&--x.readyWait>0){return}U.resolveWith(i,[x])}});x.ready.then=U.then;function W(){i.removeEventListener("DOMContentLoaded",W);t.removeEventListener("load",W);x.ready()}if(i.readyState==="complete"||i.readyState!=="loading"&&!i.documentElement.doScroll){t.setTimeout(x.ready)}else{i.addEventListener("DOMContentLoaded",W);t.addEventListener("load",W)}var V=function(t,e,n,i,o,r,s){var a=0,l=t.length,u=n==null;if(b(n)==="object"){o=true;for(a in n){V(t,e,a,n[a],true,r,s)}}else if(i!==undefined){o=true;if(!v(i)){s=true}if(u){if(s){e.call(t,i);e=null}else{u=e;e=function(t,e,n){return u.call(x(t),n)}}}if(e){for(;a<l;a++){e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)))}}}if(o){return t}if(u){return e.call(t)}return l?e(t[0],n):r};var _=/^-ms-/,K=/-([a-z])/g;function G(t,e){return e.toUpperCase()}function Q(t){return t.replace(_,"ms-").replace(K,G)}var X=function(t){return t.nodeType===1||t.nodeType===9||!+t.nodeType};function Y(){this.expando=x.expando+Y.uid++}Y.uid=1;Y.prototype={cache:function(t){var e=t[this.expando];if(!e){e={};if(X(t)){if(t.nodeType){t[this.expando]=e}else{Object.defineProperty(t,this.expando,{value:e,configurable:true})}}}return e},set:function(t,e,n){var i,o=this.cache(t);if(typeof e==="string"){o[Q(e)]=n}else{for(i in e){o[Q(i)]=e[i]}}return o},get:function(t,e){return e===undefined?this.cache(t):t[this.expando]&&t[this.expando][Q(e)]},access:function(t,e,n){if(e===undefined||e&&typeof e==="string"&&n===undefined){return this.get(t,e)}this.set(t,e,n);return n!==undefined?n:e},remove:function(t,e){var n,i=t[this.expando];if(i===undefined){return}if(e!==undefined){if(Array.isArray(e)){e=e.map(Q)}else{e=Q(e);e=e in i?[e]:e.match(j)||[]}n=e.length;while(n--){delete i[e[n]]}}if(e===undefined||x.isEmptyObject(i)){if(t.nodeType){t[this.expando]=undefined}else{delete t[this.expando]}}},hasData:function(t){var e=t[this.expando];return e!==undefined&&!x.isEmptyObject(e)}};var J=new Y;var Z=new Y;var tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t){if(t==="true"){return true}if(t==="false"){return false}if(t==="null"){return null}if(t===+t+""){return+t}if(tt.test(t)){return JSON.parse(t)}return t}function it(t,e,n){var i;if(n===undefined&&t.nodeType===1){i="data-"+e.replace(et,"-$&").toLowerCase();n=t.getAttribute(i);if(typeof n==="string"){try{n=nt(n)}catch(t){}Z.set(t,e,n)}else{n=undefined}}return n}x.extend({hasData:function(t){return Z.hasData(t)||J.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return J.access(t,e,n)},_removeData:function(t,e){J.remove(t,e)}});x.fn.extend({data:function(t,e){var n,i,o,r=this[0],s=r&&r.attributes;if(t===undefined){if(this.length){o=Z.get(r);if(r.nodeType===1&&!J.get(r,"hasDataAttrs")){n=s.length;while(n--){if(s[n]){i=s[n].name;if(i.indexOf("data-")===0){i=Q(i.slice(5));it(r,i,o[i])}}}J.set(r,"hasDataAttrs",true)}}return o}if(typeof t==="object"){return this.each(function(){Z.set(this,t)})}return V(this,function(e){var n;if(r&&e===undefined){n=Z.get(r,t);if(n!==undefined){return n}n=it(r,t);if(n!==undefined){return n}return}this.each(function(){Z.set(this,t,e)})},null,e,arguments.length>1,null,true)},removeData:function(t){return this.each(function(){Z.remove(this,t)})}});x.extend({queue:function(t,e,n){var i;if(t){e=(e||"fx")+"queue";i=J.get(t,e);if(n){if(!i||Array.isArray(n)){i=J.access(t,e,x.makeArray(n))}else{i.push(n)}}return i||[]}},dequeue:function(t,e){e=e||"fx";var n=x.queue(t,e),i=n.length,o=n.shift(),r=x._queueHooks(t,e),s=function(){x.dequeue(t,e)};if(o==="inprogress"){o=n.shift();i--}if(o){if(e==="fx"){n.unshift("inprogress")}delete r.stop;o.call(t,s,r)}if(!i&&r){r.empty.fire()}},_queueHooks:function(t,e){var n=e+"queueHooks";return J.get(t,n)||J.access(t,n,{empty:x.Callbacks("once memory").add(function(){J.remove(t,[e+"queue",n])})})}});x.fn.extend({queue:function(t,e){var n=2;if(typeof t!=="string"){e=t;t="fx";n--}if(arguments.length<n){return x.queue(this[0],t)}return e===undefined?this:this.each(function(){var n=x.queue(this,t,e);x._queueHooks(this,t);if(t==="fx"&&n[0]!=="inprogress"){x.dequeue(this,t)}})},dequeue:function(t){return this.each(function(){x.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=x.Deferred(),r=this,s=this.length,a=function(){if(!--i){o.resolveWith(r,[r])}};if(typeof t!=="string"){e=t;t=undefined}t=t||"fx";while(s--){n=J.get(r[s],t+"queueHooks");if(n&&n.empty){i++;n.empty.add(a)}}a();return o.promise(e)}});var ot=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var rt=new RegExp("^(?:([+-])=|)("+ot+")([a-z%]*)$","i");var st=["Top","Right","Bottom","Left"];var at=function(t,e){t=e||t;return t.style.display==="none"||t.style.display===""&&x.contains(t.ownerDocument,t)&&x.css(t,"display")==="none"};var lt=function(t,e,n,i){var o,r,s={};for(r in e){s[r]=t.style[r];t.style[r]=e[r]}o=n.apply(t,i||[]);for(r in e){t.style[r]=s[r]}return o};function ut(t,e,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return x.css(t,e,"")},l=a(),u=n&&n[3]||(x.cssNumber[e]?"":"px"),c=(x.cssNumber[e]||u!=="px"&&+l)&&rt.exec(x.css(t,e));if(c&&c[3]!==u){l=l/2;u=u||c[3];c=+l||1;while(s--){x.style(t,e,c+u);if((1-r)*(1-(r=a()/l||.5))<=0){s=0}c=c/r}c=c*2;x.style(t,e,c+u);n=n||[]}if(n){c=+c||+l||0;o=n[1]?c+(n[1]+1)*n[2]:+n[2];if(i){i.unit=u;i.start=c;i.end=o}}return o}var ct={};function ft(t){var e,n=t.ownerDocument,i=t.nodeName,o=ct[i];if(o){return o}e=n.body.appendChild(n.createElement(i));o=x.css(e,"display");e.parentNode.removeChild(e);if(o==="none"){o="block"}ct[i]=o;return o}function dt(t,e){var n,i,o=[],r=0,s=t.length;for(;r<s;r++){i=t[r];if(!i.style){continue}n=i.style.display;if(e){if(n==="none"){o[r]=J.get(i,"display")||null;if(!o[r]){i.style.display=""}}if(i.style.display===""&&at(i)){o[r]=ft(i)}}else{if(n!=="none"){o[r]="none";J.set(i,"display",n)}}}for(r=0;r<s;r++){if(o[r]!=null){t[r].style.display=o[r]}}return t}x.fn.extend({show:function(){return dt(this,true)},hide:function(){return dt(this)},toggle:function(t){if(typeof t==="boolean"){return t?this.show():this.hide()}return this.each(function(){if(at(this)){x(this).show()}else{x(this).hide()}})}});var ht=/^(?:checkbox|radio)$/i;var pt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i;var vt=/^$|^module$|\/(?:java|ecma)script/i;var mt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};mt.optgroup=mt.option;mt.tbody=mt.tfoot=mt.colgroup=mt.caption=mt.thead;mt.th=mt.td;function gt(t,e){var n;if(typeof t.getElementsByTagName!=="undefined"){n=t.getElementsByTagName(e||"*")}else if(typeof t.querySelectorAll!=="undefined"){n=t.querySelectorAll(e||"*")}else{n=[]}if(e===undefined||e&&N(t,e)){return x.merge([t],n)}return n}function yt(t,e){var n=0,i=t.length;for(;n<i;n++){J.set(t[n],"globalEval",!e||J.get(e[n],"globalEval"))}}var bt=/<|&#?\w+;/;function wt(t,e,n,i,o){var r,s,a,l,u,c,f=e.createDocumentFragment(),d=[],h=0,p=t.length;for(;h<p;h++){r=t[h];if(r||r===0){if(b(r)==="object"){x.merge(d,r.nodeType?[r]:r)}else if(!bt.test(r)){d.push(e.createTextNode(r))}else{s=s||f.appendChild(e.createElement("div"));a=(pt.exec(r)||["",""])[1].toLowerCase();l=mt[a]||mt._default;s.innerHTML=l[1]+x.htmlPrefilter(r)+l[2];c=l[0];while(c--){s=s.lastChild}x.merge(d,s.childNodes);s=f.firstChild;s.textContent=""}}}f.textContent="";h=0;while(r=d[h++]){if(i&&x.inArray(r,i)>-1){if(o){o.push(r)}continue}u=x.contains(r.ownerDocument,r);s=gt(f.appendChild(r),"script");if(u){yt(s)}if(n){c=0;while(r=s[c++]){if(vt.test(r.type||"")){n.push(r)}}}}return f}(function(){var t=i.createDocumentFragment(),e=t.appendChild(i.createElement("div")),n=i.createElement("input");n.setAttribute("type","radio");n.setAttribute("checked","checked");n.setAttribute("name","t");e.appendChild(n);p.checkClone=e.cloneNode(true).cloneNode(true).lastChild.checked;e.innerHTML="<textarea>x</textarea>";p.noCloneChecked=!!e.cloneNode(true).lastChild.defaultValue})();var xt=i.documentElement;var Ct=/^key/,kt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Tt=/^([^.]*)(?:\.(.+)|)/;function St(){return true}function $t(){return false}function Et(){try{return i.activeElement}catch(t){}}function Nt(t,e,n,i,o,r){var s,a;if(typeof e==="object"){if(typeof n!=="string"){i=i||n;n=undefined}for(a in e){Nt(t,a,n,i,e[a],r)}return t}if(i==null&&o==null){o=n;i=n=undefined}else if(o==null){if(typeof n==="string"){o=i;i=undefined}else{o=i;i=n;n=undefined}}if(o===false){o=$t}else if(!o){return t}if(r===1){s=o;o=function(t){x().off(t);return s.apply(this,arguments)};o.guid=s.guid||(s.guid=x.guid++)}return t.each(function(){x.event.add(this,e,o,i,n)})}x.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,u,c,f,d,h,p,v,m=J.get(t);if(!m){return}if(n.handler){r=n;n=r.handler;o=r.selector}if(o){x.find.matchesSelector(xt,o)}if(!n.guid){n.guid=x.guid++}if(!(l=m.events)){l=m.events={}}if(!(s=m.handle)){s=m.handle=function(e){return typeof x!=="undefined"&&x.event.triggered!==e.type?x.event.dispatch.apply(t,arguments):undefined}}e=(e||"").match(j)||[""];u=e.length;while(u--){a=Tt.exec(e[u])||[];h=v=a[1];p=(a[2]||"").split(".").sort();if(!h){continue}f=x.event.special[h]||{};h=(o?f.delegateType:f.bindType)||h;f=x.event.special[h]||{};c=x.extend({type:h,origType:v,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&x.expr.match.needsContext.test(o),namespace:p.join(".")},r);if(!(d=l[h])){d=l[h]=[];d.delegateCount=0;if(!f.setup||f.setup.call(t,i,p,s)===false){if(t.addEventListener){t.addEventListener(h,s)}}}if(f.add){f.add.call(t,c);if(!c.handler.guid){c.handler.guid=n.guid}}if(o){d.splice(d.delegateCount++,0,c)}else{d.push(c)}x.event.global[h]=true}},remove:function(t,e,n,i,o){var r,s,a,l,u,c,f,d,h,p,v,m=J.hasData(t)&&J.get(t);if(!m||!(l=m.events)){return}e=(e||"").match(j)||[""];u=e.length;while(u--){a=Tt.exec(e[u])||[];h=v=a[1];p=(a[2]||"").split(".").sort();if(!h){for(h in l){x.event.remove(t,h+e[u],n,i,true)}continue}f=x.event.special[h]||{};h=(i?f.delegateType:f.bindType)||h;d=l[h]||[];a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)");s=r=d.length;while(r--){c=d[r];if((o||v===c.origType)&&(!n||n.guid===c.guid)&&(!a||a.test(c.namespace))&&(!i||i===c.selector||i==="**"&&c.selector)){d.splice(r,1);if(c.selector){d.delegateCount--}if(f.remove){f.remove.call(t,c)}}}if(s&&!d.length){if(!f.teardown||f.teardown.call(t,p,m.handle)===false){x.removeEvent(t,h,m.handle)}delete l[h]}}if(x.isEmptyObject(l)){J.remove(t,"handle events")}},dispatch:function(t){var e=x.event.fix(t);var n,i,o,r,s,a,l=new Array(arguments.length),u=(J.get(this,"events")||{})[e.type]||[],c=x.event.special[e.type]||{};l[0]=e;for(n=1;n<arguments.length;n++){l[n]=arguments[n]}e.delegateTarget=this;if(c.preDispatch&&c.preDispatch.call(this,e)===false){return}a=x.event.handlers.call(this,e,u);n=0;while((r=a[n++])&&!e.isPropagationStopped()){e.currentTarget=r.elem;i=0;while((s=r.handlers[i++])&&!e.isImmediatePropagationStopped()){if(!e.rnamespace||e.rnamespace.test(s.namespace)){e.handleObj=s;e.data=s.data;o=((x.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l);if(o!==undefined){if((e.result=o)===false){e.preventDefault();e.stopPropagation()}}}}}if(c.postDispatch){c.postDispatch.call(this,e)}return e.result},handlers:function(t,e){var n,i,o,r,s,a=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!(t.type==="click"&&t.button>=1)){for(;u!==this;u=u.parentNode||this){if(u.nodeType===1&&!(t.type==="click"&&u.disabled===true)){r=[];s={};for(n=0;n<l;n++){i=e[n];o=i.selector+" ";if(s[o]===undefined){s[o]=i.needsContext?x(o,this).index(u)>-1:x.find(o,this,null,[u]).length}if(s[o]){r.push(i)}}if(r.length){a.push({elem:u,handlers:r})}}}}u=this;if(l<e.length){a.push({elem:u,handlers:e.slice(l)})}return a},addProp:function(t,e){Object.defineProperty(x.Event.prototype,t,{enumerable:true,configurable:true,get:v(e)?function(){if(this.originalEvent){return e(this.originalEvent)}}:function(){if(this.originalEvent){return this.originalEvent[t]}},set:function(e){Object.defineProperty(this,t,{enumerable:true,configurable:true,writable:true,value:e})}})},fix:function(t){return t[x.expando]?t:new x.Event(t)},special:{load:{noBubble:true},focus:{trigger:function(){if(this!==Et()&&this.focus){this.focus();return false}},delegateType:"focusin"},blur:{trigger:function(){if(this===Et()&&this.blur){this.blur();return false}},delegateType:"focusout"},click:{trigger:function(){if(this.type==="checkbox"&&this.click&&N(this,"input")){this.click();return false}},_default:function(t){return N(t.target,"a")}},beforeunload:{postDispatch:function(t){if(t.result!==undefined&&t.originalEvent){t.originalEvent.returnValue=t.result}}}}};x.removeEvent=function(t,e,n){if(t.removeEventListener){t.removeEventListener(e,n)}};x.Event=function(t,e){if(!(this instanceof x.Event)){return new x.Event(t,e)}if(t&&t.type){this.originalEvent=t;this.type=t.type;this.isDefaultPrevented=t.defaultPrevented||t.defaultPrevented===undefined&&t.returnValue===false?St:$t;this.target=t.target&&t.target.nodeType===3?t.target.parentNode:t.target;this.currentTarget=t.currentTarget;this.relatedTarget=t.relatedTarget}else{this.type=t}if(e){x.extend(this,e)}this.timeStamp=t&&t.timeStamp||Date.now();this[x.expando]=true};x.Event.prototype={constructor:x.Event,isDefaultPrevented:$t,isPropagationStopped:$t,isImmediatePropagationStopped:$t,isSimulated:false,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=St;if(t&&!this.isSimulated){t.preventDefault()}},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=St;if(t&&!this.isSimulated){t.stopPropagation()}},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=St;if(t&&!this.isSimulated){t.stopImmediatePropagation()}this.stopPropagation()}};x.each({altKey:true,bubbles:true,cancelable:true,changedTouches:true,ctrlKey:true,detail:true,eventPhase:true,metaKey:true,pageX:true,pageY:true,shiftKey:true,view:true,char:true,charCode:true,key:true,keyCode:true,button:true,buttons:true,clientX:true,clientY:true,offsetX:true,offsetY:true,pointerId:true,pointerType:true,screenX:true,screenY:true,targetTouches:true,toElement:true,touches:true,which:function(t){var e=t.button;if(t.which==null&&Ct.test(t.type)){return t.charCode!=null?t.charCode:t.keyCode}if(!t.which&&e!==undefined&&kt.test(t.type)){if(e&1){return 1}if(e&2){return 3}if(e&4){return 2}return 0}return t.which}},x.event.addProp);x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){x.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,o=t.relatedTarget,r=t.handleObj;if(!o||o!==i&&!x.contains(i,o)){t.type=r.origType;n=r.handler.apply(this,arguments);t.type=e}return n}}});x.fn.extend({on:function(t,e,n,i){return Nt(this,t,e,n,i)},one:function(t,e,n,i){return Nt(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj){i=t.handleObj;x(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler);return this}if(typeof t==="object"){for(o in t){this.off(o,e,t[o])}return this}if(e===false||typeof e==="function"){n=e;e=undefined}if(n===false){n=$t}return this.each(function(){x.event.remove(this,t,n,e)})}});var At=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,It=/<script|<style|<link/i,Dt=/checked\s*(?:[^=]|=\s*.checked.)/i,Rt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Lt(t,e){if(N(t,"table")&&N(e.nodeType!==11?e:e.firstChild,"tr")){return x(t).children("tbody")[0]||t}return t}function Ht(t){t.type=(t.getAttribute("type")!==null)+"/"+t.type;return t}function Pt(t){if((t.type||"").slice(0,5)==="true/"){t.type=t.type.slice(5)}else{t.removeAttribute("type")}return t}function Ft(t,e){var n,i,o,r,s,a,l,u;if(e.nodeType!==1){return}if(J.hasData(t)){r=J.access(t);s=J.set(e,r);u=r.events;if(u){delete s.handle;s.events={};for(o in u){for(n=0,i=u[o].length;n<i;n++){x.event.add(e,o,u[o][n])}}}}if(Z.hasData(t)){a=Z.access(t);l=x.extend({},a);Z.set(e,l)}}function jt(t,e){var n=e.nodeName.toLowerCase();if(n==="input"&&ht.test(t.type)){e.checked=t.checked}else if(n==="input"||n==="textarea"){e.defaultValue=t.defaultValue}}function Ot(t,e,n,i){e=s.apply([],e);var o,r,a,l,u,c,f=0,d=t.length,h=d-1,m=e[0],g=v(m);if(g||d>1&&typeof m==="string"&&!p.checkClone&&Dt.test(m)){return t.each(function(o){var r=t.eq(o);if(g){e[0]=m.call(this,o,r.html())}Ot(r,e,n,i)})}if(d){o=wt(e,t[0].ownerDocument,false,t,i);r=o.firstChild;if(o.childNodes.length===1){o=r}if(r||i){a=x.map(gt(o,"script"),Ht);l=a.length;for(;f<d;f++){u=o;if(f!==h){u=x.clone(u,true,true);if(l){x.merge(a,gt(u,"script"))}}n.call(t[f],u,f)}if(l){c=a[a.length-1].ownerDocument;x.map(a,Pt);for(f=0;f<l;f++){u=a[f];if(vt.test(u.type||"")&&!J.access(u,"globalEval")&&x.contains(c,u)){if(u.src&&(u.type||"").toLowerCase()!=="module"){if(x._evalUrl){x._evalUrl(u.src)}}else{y(u.textContent.replace(Rt,""),c,u)}}}}}}return t}function Mt(t,e,n){var i,o=e?x.filter(e,t):t,r=0;for(;(i=o[r])!=null;r++){if(!n&&i.nodeType===1){x.cleanData(gt(i))}if(i.parentNode){if(n&&x.contains(i.ownerDocument,i)){yt(gt(i,"script"))}i.parentNode.removeChild(i)}}return t}x.extend({htmlPrefilter:function(t){return t.replace(At,"<$1></$2>")},clone:function(t,e,n){var i,o,r,s,a=t.cloneNode(true),l=x.contains(t.ownerDocument,t);if(!p.noCloneChecked&&(t.nodeType===1||t.nodeType===11)&&!x.isXMLDoc(t)){s=gt(a);r=gt(t);for(i=0,o=r.length;i<o;i++){jt(r[i],s[i])}}if(e){if(n){r=r||gt(t);s=s||gt(a);for(i=0,o=r.length;i<o;i++){Ft(r[i],s[i])}}else{Ft(t,a)}}s=gt(a,"script");if(s.length>0){yt(s,!l&&gt(t,"script"))}return a},cleanData:function(t){var e,n,i,o=x.event.special,r=0;for(;(n=t[r])!==undefined;r++){if(X(n)){if(e=n[J.expando]){if(e.events){for(i in e.events){if(o[i]){x.event.remove(n,i)}else{x.removeEvent(n,i,e.handle)}}}n[J.expando]=undefined}if(n[Z.expando]){n[Z.expando]=undefined}}}}});x.fn.extend({detach:function(t){return Mt(this,t,true)},remove:function(t){return Mt(this,t)},text:function(t){return V(this,function(t){return t===undefined?x.text(this):this.empty().each(function(){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){this.textContent=t}})},null,t,arguments.length)},append:function(){return Ot(this,arguments,function(t){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var e=Lt(this,t);e.appendChild(t)}})},prepend:function(){return Ot(this,arguments,function(t){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var e=Lt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Ot(this,arguments,function(t){if(this.parentNode){this.parentNode.insertBefore(t,this)}})},after:function(){return Ot(this,arguments,function(t){if(this.parentNode){this.parentNode.insertBefore(t,this.nextSibling)}})},empty:function(){var t,e=0;for(;(t=this[e])!=null;e++){if(t.nodeType===1){x.cleanData(gt(t,false));t.textContent=""}}return this},clone:function(t,e){t=t==null?false:t;e=e==null?t:e;return this.map(function(){return x.clone(this,t,e)})},html:function(t){return V(this,function(t){var e=this[0]||{},n=0,i=this.length;if(t===undefined&&e.nodeType===1){return e.innerHTML}if(typeof t==="string"&&!It.test(t)&&!mt[(pt.exec(t)||["",""])[1].toLowerCase()]){t=x.htmlPrefilter(t);try{for(;n<i;n++){e=this[n]||{};if(e.nodeType===1){x.cleanData(gt(e,false));e.innerHTML=t}}e=0}catch(t){}}if(e){this.empty().append(t)}},null,t,arguments.length)},replaceWith:function(){var t=[];return Ot(this,arguments,function(e){var n=this.parentNode;if(x.inArray(this,t)<0){x.cleanData(gt(this));if(n){n.replaceChild(e,this)}}},t)}});x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){x.fn[t]=function(t){var n,i=[],o=x(t),r=o.length-1,s=0;for(;s<=r;s++){n=s===r?this:this.clone(true);x(o[s])[e](n);a.apply(i,n.get())}return this.pushStack(i)}});var Bt=new RegExp("^("+ot+")(?!px)[a-z%]+$","i");var zt=function(e){var n=e.ownerDocument.defaultView;if(!n||!n.opener){n=t}return n.getComputedStyle(e)};var qt=new RegExp(st.join("|"),"i");(function(){function e(){if(!c){return}u.style.cssText="position:absolute;left:-11111px;width:60px;"+"margin-top:1px;padding:0;border:0";c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;"+"margin:auto;border:1px;padding:1px;"+"width:60%;top:1%";xt.appendChild(u).appendChild(c);var e=t.getComputedStyle(c);o=e.top!=="1%";l=n(e.marginLeft)===12;c.style.right="60%";a=n(e.right)===36;r=n(e.width)===36;c.style.position="absolute";s=c.offsetWidth===36||"absolute";xt.removeChild(u);c=null}function n(t){return Math.round(parseFloat(t))}var o,r,s,a,l,u=i.createElement("div"),c=i.createElement("div");if(!c.style){return}c.style.backgroundClip="content-box";c.cloneNode(true).style.backgroundClip="";p.clearCloneStyle=c.style.backgroundClip==="content-box";x.extend(p,{boxSizingReliable:function(){e();return r},pixelBoxStyles:function(){e();return a},pixelPosition:function(){e();return o},reliableMarginLeft:function(){e();return l},scrollboxSize:function(){e();return s}})})();function Ut(t,e,n){var i,o,r,s,a=t.style;n=n||zt(t);if(n){s=n.getPropertyValue(e)||n[e];if(s===""&&!x.contains(t.ownerDocument,t)){s=x.style(t,e)}if(!p.pixelBoxStyles()&&Bt.test(s)&&qt.test(e)){i=a.width;o=a.minWidth;r=a.maxWidth;a.minWidth=a.maxWidth=a.width=s;s=n.width;a.width=i;a.minWidth=o;a.maxWidth=r}}return s!==undefined?s+"":s}function Wt(t,e){return{get:function(){if(t()){delete this.get;return}return(this.get=e).apply(this,arguments)}}}var Vt=/^(none|table(?!-c[ea]).+)/,_t=/^--/,Kt={position:"absolute",visibility:"hidden",display:"block"},Gt={letterSpacing:"0",fontWeight:"400"},Qt=["Webkit","Moz","ms"],Xt=i.createElement("div").style;function Yt(t){if(t in Xt){return t}var e=t[0].toUpperCase()+t.slice(1),n=Qt.length;while(n--){t=Qt[n]+e;if(t in Xt){return t}}}function Jt(t){var e=x.cssProps[t];if(!e){e=x.cssProps[t]=Yt(t)||t}return e}function Zt(t,e,n){var i=rt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function te(t,e,n,i,o,r){var s=e==="width"?1:0,a=0,l=0;if(n===(i?"border":"content")){return 0}for(;s<4;s+=2){if(n==="margin"){l+=x.css(t,n+st[s],true,o)}if(!i){l+=x.css(t,"padding"+st[s],true,o);if(n!=="padding"){l+=x.css(t,"border"+st[s]+"Width",true,o)}else{a+=x.css(t,"border"+st[s]+"Width",true,o)}}else{if(n==="content"){l-=x.css(t,"padding"+st[s],true,o)}if(n!=="margin"){l-=x.css(t,"border"+st[s]+"Width",true,o)}}}if(!i&&r>=0){l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-r-l-a-.5))}return l}function ee(t,e,n){var i=zt(t),o=Ut(t,e,i),r=x.css(t,"boxSizing",false,i)==="border-box",s=r;if(Bt.test(o)){if(!n){return o}o="auto"}s=s&&(p.boxSizingReliable()||o===t.style[e]);if(o==="auto"||!parseFloat(o)&&x.css(t,"display",false,i)==="inline"){o=t["offset"+e[0].toUpperCase()+e.slice(1)];s=true}o=parseFloat(o)||0;return o+te(t,e,n||(r?"border":"content"),s,i,o)+"px"}x.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Ut(t,"opacity");return n===""?"1":n}}}},cssNumber:{animationIterationCount:true,columnCount:true,fillOpacity:true,flexGrow:true,flexShrink:true,fontWeight:true,lineHeight:true,opacity:true,order:true,orphans:true,widows:true,zIndex:true,zoom:true},cssProps:{},style:function(t,e,n,i){if(!t||t.nodeType===3||t.nodeType===8||!t.style){return}var o,r,s,a=Q(e),l=_t.test(e),u=t.style;if(!l){e=Jt(a)}s=x.cssHooks[e]||x.cssHooks[a];if(n!==undefined){r=typeof n;if(r==="string"&&(o=rt.exec(n))&&o[1]){n=ut(t,e,o);r="number"}if(n==null||n!==n){return}if(r==="number"){n+=o&&o[3]||(x.cssNumber[a]?"":"px")}if(!p.clearCloneStyle&&n===""&&e.indexOf("background")===0){u[e]="inherit"}if(!s||!("set"in s)||(n=s.set(t,n,i))!==undefined){if(l){u.setProperty(e,n)}else{u[e]=n}}}else{if(s&&"get"in s&&(o=s.get(t,false,i))!==undefined){return o}return u[e]}},css:function(t,e,n,i){var o,r,s,a=Q(e),l=_t.test(e);if(!l){e=Jt(a)}s=x.cssHooks[e]||x.cssHooks[a];if(s&&"get"in s){o=s.get(t,true,n)}if(o===undefined){o=Ut(t,e,i)}if(o==="normal"&&e in Gt){o=Gt[e]}if(n===""||n){r=parseFloat(o);return n===true||isFinite(r)?r||0:o}return o}});x.each(["height","width"],function(t,e){x.cssHooks[e]={get:function(t,n,i){if(n){return Vt.test(x.css(t,"display"))&&(!t.getClientRects().length||!t.getBoundingClientRect().width)?lt(t,Kt,function(){return ee(t,e,i)}):ee(t,e,i)}},set:function(t,n,i){var o,r=zt(t),s=x.css(t,"boxSizing",false,r)==="border-box",a=i&&te(t,e,i,s,r);if(s&&p.scrollboxSize()===r.position){a-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(r[e])-te(t,e,"border",false,r)-.5)}if(a&&(o=rt.exec(n))&&(o[3]||"px")!=="px"){t.style[e]=n;n=x.css(t,e)}return Zt(t,n,a)}}});x.cssHooks.marginLeft=Wt(p.reliableMarginLeft,function(t,e){if(e){return(parseFloat(Ut(t,"marginLeft"))||t.getBoundingClientRect().left-lt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}});x.each({margin:"",padding:"",border:"Width"},function(t,e){x.cssHooks[t+e]={expand:function(n){var i=0,o={},r=typeof n==="string"?n.split(" "):[n];for(;i<4;i++){o[t+st[i]+e]=r[i]||r[i-2]||r[0]}return o}};if(t!=="margin"){x.cssHooks[t+e].set=Zt}});x.fn.extend({css:function(t,e){return V(this,function(t,e,n){var i,o,r={},s=0;if(Array.isArray(e)){i=zt(t);o=e.length;for(;s<o;s++){r[e[s]]=x.css(t,e[s],false,i)}return r}return n!==undefined?x.style(t,e,n):x.css(t,e)},t,e,arguments.length>1)}});function ne(t,e,n,i,o){return new ne.prototype.init(t,e,n,i,o)}x.Tween=ne;ne.prototype={constructor:ne,init:function(t,e,n,i,o,r){this.elem=t;this.prop=n;this.easing=o||x.easing._default;this.options=e;this.start=this.now=this.cur();this.end=i;this.unit=r||(x.cssNumber[n]?"":"px")},cur:function(){var t=ne.propHooks[this.prop];return t&&t.get?t.get(this):ne.propHooks._default.get(this)},run:function(t){var e,n=ne.propHooks[this.prop];if(this.options.duration){this.pos=e=x.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration)}else{this.pos=e=t}this.now=(this.end-this.start)*e+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this)}if(n&&n.set){n.set(this)}else{ne.propHooks._default.set(this)}return this}};ne.prototype.init.prototype=ne.prototype;ne.propHooks={_default:{get:function(t){var e;if(t.elem.nodeType!==1||t.elem[t.prop]!=null&&t.elem.style[t.prop]==null){return t.elem[t.prop]}e=x.css(t.elem,t.prop,"");return!e||e==="auto"?0:e},set:function(t){if(x.fx.step[t.prop]){x.fx.step[t.prop](t)}else if(t.elem.nodeType===1&&(t.elem.style[x.cssProps[t.prop]]!=null||x.cssHooks[t.prop])){x.style(t.elem,t.prop,t.now+t.unit)}else{t.elem[t.prop]=t.now}}}};ne.propHooks.scrollTop=ne.propHooks.scrollLeft={set:function(t){if(t.elem.nodeType&&t.elem.parentNode){t.elem[t.prop]=t.now}}};x.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"};x.fx=ne.prototype.init;x.fx.step={};var ie,oe,re=/^(?:toggle|show|hide)$/,se=/queueHooks$/;function ae(){if(oe){if(i.hidden===false&&t.requestAnimationFrame){t.requestAnimationFrame(ae)}else{t.setTimeout(ae,x.fx.interval)}x.fx.tick()}}function le(){t.setTimeout(function(){ie=undefined});return ie=Date.now()}function ue(t,e){var n,i=0,o={height:t};e=e?1:0;for(;i<4;i+=2-e){n=st[i];o["margin"+n]=o["padding"+n]=t}if(e){o.opacity=o.width=t}return o}function ce(t,e,n){var i,o=(he.tweeners[e]||[]).concat(he.tweeners["*"]),r=0,s=o.length;for(;r<s;r++){if(i=o[r].call(n,e,t)){return i}}}function fe(t,e,n){var i,o,r,s,a,l,u,c,f="width"in e||"height"in e,d=this,h={},p=t.style,v=t.nodeType&&at(t),m=J.get(t,"fxshow");if(!n.queue){s=x._queueHooks(t,"fx");if(s.unqueued==null){s.unqueued=0;a=s.empty.fire;s.empty.fire=function(){if(!s.unqueued){a()}}}s.unqueued++;d.always(function(){d.always(function(){s.unqueued--;if(!x.queue(t,"fx").length){s.empty.fire()}})})}for(i in e){o=e[i];if(re.test(o)){delete e[i];r=r||o==="toggle";if(o===(v?"hide":"show")){if(o==="show"&&m&&m[i]!==undefined){v=true}else{continue}}h[i]=m&&m[i]||x.style(t,i)}}l=!x.isEmptyObject(e);if(!l&&x.isEmptyObject(h)){return}if(f&&t.nodeType===1){n.overflow=[p.overflow,p.overflowX,p.overflowY];u=m&&m.display;if(u==null){u=J.get(t,"display")}c=x.css(t,"display");if(c==="none"){if(u){c=u}else{dt([t],true);u=t.style.display||u;c=x.css(t,"display");dt([t])}}if(c==="inline"||c==="inline-block"&&u!=null){if(x.css(t,"float")==="none"){if(!l){d.done(function(){p.display=u});if(u==null){c=p.display;u=c==="none"?"":c}}p.display="inline-block"}}}if(n.overflow){p.overflow="hidden";d.always(function(){p.overflow=n.overflow[0];p.overflowX=n.overflow[1];p.overflowY=n.overflow[2]})}l=false;for(i in h){if(!l){if(m){if("hidden"in m){v=m.hidden}}else{m=J.access(t,"fxshow",{display:u})}if(r){m.hidden=!v}if(v){dt([t],true)}d.done(function(){if(!v){dt([t])}J.remove(t,"fxshow");for(i in h){x.style(t,i,h[i])}})}l=ce(v?m[i]:0,i,d);if(!(i in m)){m[i]=l.start;if(v){l.end=l.start;l.start=0}}}}function de(t,e){var n,i,o,r,s;for(n in t){i=Q(n);o=e[i];r=t[n];if(Array.isArray(r)){o=r[1];r=t[n]=r[0]}if(n!==i){t[i]=r;delete t[n]}s=x.cssHooks[i];if(s&&"expand"in s){r=s.expand(r);delete t[i];for(n in r){if(!(n in t)){t[n]=r[n];e[n]=o}}}else{e[i]=o}}}function he(t,e,n){var i,o,r=0,s=he.prefilters.length,a=x.Deferred().always(function(){delete l.elem}),l=function(){if(o){return false}var e=ie||le(),n=Math.max(0,u.startTime+u.duration-e),i=n/u.duration||0,r=1-i,s=0,l=u.tweens.length;for(;s<l;s++){u.tweens[s].run(r)}a.notifyWith(t,[u,r,n]);if(r<1&&l){return n}if(!l){a.notifyWith(t,[u,1,0])}a.resolveWith(t,[u]);return false},u=a.promise({elem:t,props:x.extend({},e),opts:x.extend(true,{specialEasing:{},easing:x.easing._default},n),originalProperties:e,originalOptions:n,startTime:ie||le(),duration:n.duration,tweens:[],createTween:function(e,n){var i=x.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);u.tweens.push(i);return i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(o){return this}o=true;for(;n<i;n++){u.tweens[n].run(1)}if(e){a.notifyWith(t,[u,1,0]);a.resolveWith(t,[u,e])}else{a.rejectWith(t,[u,e])}return this}}),c=u.props;de(c,u.opts.specialEasing);for(;r<s;r++){i=he.prefilters[r].call(u,t,c,u.opts);if(i){if(v(i.stop)){x._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)}return i}}x.map(c,ce,u);if(v(u.opts.start)){u.opts.start.call(t,u)}u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always);x.fx.timer(x.extend(l,{elem:t,anim:u,queue:u.opts.queue}));return u}x.Animation=x.extend(he,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);ut(n.elem,t,rt.exec(e),n);return n}]},tweener:function(t,e){if(v(t)){e=t;t=["*"]}else{t=t.match(j)}var n,i=0,o=t.length;for(;i<o;i++){n=t[i];he.tweeners[n]=he.tweeners[n]||[];he.tweeners[n].unshift(e)}},prefilters:[fe],prefilter:function(t,e){if(e){he.prefilters.unshift(t)}else{he.prefilters.push(t)}}});x.speed=function(t,e,n){var i=t&&typeof t==="object"?x.extend({},t):{complete:n||!n&&e||v(t)&&t,duration:t,easing:n&&e||e&&!v(e)&&e};if(x.fx.off){i.duration=0}else{if(typeof i.duration!=="number"){if(i.duration in x.fx.speeds){i.duration=x.fx.speeds[i.duration]}else{i.duration=x.fx.speeds._default}}}if(i.queue==null||i.queue===true){i.queue="fx"}i.old=i.complete;i.complete=function(){if(v(i.old)){i.old.call(this)}if(i.queue){x.dequeue(this,i.queue)}};return i};x.fn.extend({fadeTo:function(t,e,n,i){return this.filter(at).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=x.isEmptyObject(t),r=x.speed(e,n,i),s=function(){var e=he(this,x.extend({},t),r);if(o||J.get(this,"finish")){e.stop(true)}};s.finish=s;return o||r.queue===false?this.each(s):this.queue(r.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop;e(n)};if(typeof t!=="string"){n=e;e=t;t=undefined}if(e&&t!==false){this.queue(t||"fx",[])}return this.each(function(){var e=true,o=t!=null&&t+"queueHooks",r=x.timers,s=J.get(this);if(o){if(s[o]&&s[o].stop){i(s[o])}}else{for(o in s){if(s[o]&&s[o].stop&&se.test(o)){i(s[o])}}}for(o=r.length;o--;){if(r[o].elem===this&&(t==null||r[o].queue===t)){r[o].anim.stop(n);e=false;r.splice(o,1)}}if(e||!n){x.dequeue(this,t)}})},finish:function(t){if(t!==false){t=t||"fx"}return this.each(function(){var e,n=J.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=x.timers,s=i?i.length:0;n.finish=true;x.queue(this,t,[]);if(o&&o.stop){o.stop.call(this,true)}for(e=r.length;e--;){if(r[e].elem===this&&r[e].queue===t){r[e].anim.stop(true);r.splice(e,1)}}for(e=0;e<s;e++){if(i[e]&&i[e].finish){i[e].finish.call(this)}}delete n.finish})}});x.each(["toggle","show","hide"],function(t,e){var n=x.fn[e];x.fn[e]=function(t,i,o){return t==null||typeof t==="boolean"?n.apply(this,arguments):this.animate(ue(e,true),t,i,o)}});x.each({slideDown:ue("show"),slideUp:ue("hide"),slideToggle:ue("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){x.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}});x.timers=[];x.fx.tick=function(){var t,e=0,n=x.timers;ie=Date.now();for(;e<n.length;e++){t=n[e];if(!t()&&n[e]===t){n.splice(e--,1)}}if(!n.length){x.fx.stop()}ie=undefined};x.fx.timer=function(t){x.timers.push(t);x.fx.start()};x.fx.interval=13;x.fx.start=function(){if(oe){return}oe=true;ae()};x.fx.stop=function(){oe=null};x.fx.speeds={slow:600,fast:200,_default:400};x.fn.delay=function(e,n){e=x.fx?x.fx.speeds[e]||e:e;n=n||"fx";return this.queue(n,function(n,i){var o=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(o)}})};(function(){var t=i.createElement("input"),e=i.createElement("select"),n=e.appendChild(i.createElement("option"));t.type="checkbox";p.checkOn=t.value!=="";p.optSelected=n.selected;t=i.createElement("input");t.value="t";t.type="radio";p.radioValue=t.value==="t"})();var pe,ve=x.expr.attrHandle;x.fn.extend({attr:function(t,e){return V(this,x.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){x.removeAttr(this,t)})}});x.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(r===3||r===8||r===2){return}if(typeof t.getAttribute==="undefined"){return x.prop(t,e,n)}if(r!==1||!x.isXMLDoc(t)){o=x.attrHooks[e.toLowerCase()]||(x.expr.match.bool.test(e)?pe:undefined)}if(n!==undefined){if(n===null){x.removeAttr(t,e);return}if(o&&"set"in o&&(i=o.set(t,n,e))!==undefined){return i}t.setAttribute(e,n+"");return n}if(o&&"get"in o&&(i=o.get(t,e))!==null){return i}i=x.find.attr(t,e);return i==null?undefined:i},attrHooks:{type:{set:function(t,e){if(!p.radioValue&&e==="radio"&&N(t,"input")){var n=t.value;t.setAttribute("type",e);if(n){t.value=n}return e}}}},removeAttr:function(t,e){var n,i=0,o=e&&e.match(j);if(o&&t.nodeType===1){while(n=o[i++]){t.removeAttribute(n)}}}});pe={set:function(t,e,n){if(e===false){x.removeAttr(t,n)}else{t.setAttribute(n,n)}return n}};x.each(x.expr.match.bool.source.match(/\w+/g),function(t,e){var n=ve[e]||x.find.attr;ve[e]=function(t,e,i){var o,r,s=e.toLowerCase();if(!i){r=ve[s];ve[s]=o;o=n(t,e,i)!=null?s:null;ve[s]=r}return o}});var me=/^(?:input|select|textarea|button)$/i,ge=/^(?:a|area)$/i;x.fn.extend({prop:function(t,e){return V(this,x.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[x.propFix[t]||t]})}});x.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(r===3||r===8||r===2){return}if(r!==1||!x.isXMLDoc(t)){e=x.propFix[e]||e;o=x.propHooks[e]}if(n!==undefined){if(o&&"set"in o&&(i=o.set(t,n,e))!==undefined){return i}return t[e]=n}if(o&&"get"in o&&(i=o.get(t,e))!==null){return i}return t[e]},propHooks:{tabIndex:{get:function(t){var e=x.find.attr(t,"tabindex");if(e){return parseInt(e,10)}if(me.test(t.nodeName)||ge.test(t.nodeName)&&t.href){return 0}return-1}}},propFix:{for:"htmlFor",class:"className"}});if(!p.optSelected){x.propHooks.selected={get:function(t){var e=t.parentNode;if(e&&e.parentNode){e.parentNode.selectedIndex}return null},set:function(t){var e=t.parentNode;if(e){e.selectedIndex;if(e.parentNode){e.parentNode.selectedIndex}}}}}x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this});function ye(t){var e=t.match(j)||[];return e.join(" ")}function be(t){return t.getAttribute&&t.getAttribute("class")||""}function we(t){if(Array.isArray(t)){return t}if(typeof t==="string"){return t.match(j)||[]}return[]}x.fn.extend({addClass:function(t){var e,n,i,o,r,s,a,l=0;if(v(t)){return this.each(function(e){x(this).addClass(t.call(this,e,be(this)))})}e=we(t);if(e.length){while(n=this[l++]){o=be(n);i=n.nodeType===1&&" "+ye(o)+" ";if(i){s=0;while(r=e[s++]){if(i.indexOf(" "+r+" ")<0){i+=r+" "}}a=ye(i);if(o!==a){n.setAttribute("class",a)}}}}return this},removeClass:function(t){var e,n,i,o,r,s,a,l=0;if(v(t)){return this.each(function(e){x(this).removeClass(t.call(this,e,be(this)))})}if(!arguments.length){return this.attr("class","")}e=we(t);if(e.length){while(n=this[l++]){o=be(n);i=n.nodeType===1&&" "+ye(o)+" ";if(i){s=0;while(r=e[s++]){while(i.indexOf(" "+r+" ")>-1){i=i.replace(" "+r+" "," ")}}a=ye(i);if(o!==a){n.setAttribute("class",a)}}}}return this},toggleClass:function(t,e){var n=typeof t,i=n==="string"||Array.isArray(t);if(typeof e==="boolean"&&i){return e?this.addClass(t):this.removeClass(t)}if(v(t)){return this.each(function(n){x(this).toggleClass(t.call(this,n,be(this),e),e)})}return this.each(function(){var e,o,r,s;if(i){o=0;r=x(this);s=we(t);while(e=s[o++]){if(r.hasClass(e)){r.removeClass(e)}else{r.addClass(e)}}}else if(t===undefined||n==="boolean"){e=be(this);if(e){J.set(this,"__className__",e)}if(this.setAttribute){this.setAttribute("class",e||t===false?"":J.get(this,"__className__")||"")}}})},hasClass:function(t){var e,n,i=0;e=" "+t+" ";while(n=this[i++]){if(n.nodeType===1&&(" "+ye(be(n))+" ").indexOf(e)>-1){return true}}return false}});var xe=/\r/g;x.fn.extend({val:function(t){var e,n,i,o=this[0];if(!arguments.length){if(o){e=x.valHooks[o.type]||x.valHooks[o.nodeName.toLowerCase()];if(e&&"get"in e&&(n=e.get(o,"value"))!==undefined){return n}n=o.value;if(typeof n==="string"){return n.replace(xe,"")}return n==null?"":n}return}i=v(t);return this.each(function(n){var o;if(this.nodeType!==1){return}if(i){o=t.call(this,n,x(this).val())}else{o=t}if(o==null){o=""}else if(typeof o==="number"){o+=""}else if(Array.isArray(o)){o=x.map(o,function(t){return t==null?"":t+""})}e=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()];if(!e||!("set"in e)||e.set(this,o,"value")===undefined){this.value=o}})}});x.extend({valHooks:{option:{get:function(t){var e=x.find.attr(t,"value");return e!=null?e:ye(x.text(t))}},select:{get:function(t){var e,n,i,o=t.options,r=t.selectedIndex,s=t.type==="select-one",a=s?null:[],l=s?r+1:o.length;if(r<0){i=l}else{i=s?r:0}for(;i<l;i++){n=o[i];if((n.selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){e=x(n).val();if(s){return e}a.push(e)}}return a},set:function(t,e){var n,i,o=t.options,r=x.makeArray(e),s=o.length;while(s--){i=o[s];if(i.selected=x.inArray(x.valHooks.option.get(i),r)>-1){n=true}}if(!n){t.selectedIndex=-1}return r}}}});x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(t,e){if(Array.isArray(e)){return t.checked=x.inArray(x(t).val(),e)>-1}}};if(!p.checkOn){x.valHooks[this].get=function(t){return t.getAttribute("value")===null?"on":t.value}}});p.focusin="onfocusin"in t;var Ce=/^(?:focusinfocus|focusoutblur)$/,ke=function(t){t.stopPropagation()};x.extend(x.event,{trigger:function(e,n,o,r){var s,a,l,u,c,d,h,p,g=[o||i],y=f.call(e,"type")?e.type:e,b=f.call(e,"namespace")?e.namespace.split("."):[];a=p=l=o=o||i;if(o.nodeType===3||o.nodeType===8){return}if(Ce.test(y+x.event.triggered)){return}if(y.indexOf(".")>-1){b=y.split(".");y=b.shift();b.sort()}c=y.indexOf(":")<0&&"on"+y;e=e[x.expando]?e:new x.Event(y,typeof e==="object"&&e);e.isTrigger=r?2:3;e.namespace=b.join(".");e.rnamespace=e.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;e.result=undefined;if(!e.target){e.target=o}n=n==null?[e]:x.makeArray(n,[e]);h=x.event.special[y]||{};if(!r&&h.trigger&&h.trigger.apply(o,n)===false){return}if(!r&&!h.noBubble&&!m(o)){u=h.delegateType||y;if(!Ce.test(u+y)){a=a.parentNode}for(;a;a=a.parentNode){g.push(a);l=a}if(l===(o.ownerDocument||i)){g.push(l.defaultView||l.parentWindow||t)}}s=0;while((a=g[s++])&&!e.isPropagationStopped()){p=a;e.type=s>1?u:h.bindType||y;d=(J.get(a,"events")||{})[e.type]&&J.get(a,"handle");if(d){d.apply(a,n)}d=c&&a[c];if(d&&d.apply&&X(a)){e.result=d.apply(a,n);if(e.result===false){e.preventDefault()}}}e.type=y;if(!r&&!e.isDefaultPrevented()){if((!h._default||h._default.apply(g.pop(),n)===false)&&X(o)){if(c&&v(o[y])&&!m(o)){l=o[c];if(l){o[c]=null}x.event.triggered=y;if(e.isPropagationStopped()){p.addEventListener(y,ke)}o[y]();if(e.isPropagationStopped()){p.removeEventListener(y,ke)}x.event.triggered=undefined;if(l){o[c]=l}}}}return e.result},simulate:function(t,e,n){var i=x.extend(new x.Event,n,{type:t,isSimulated:true});x.event.trigger(i,null,e)}});x.fn.extend({trigger:function(t,e){return this.each(function(){x.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n){return x.event.trigger(t,e,n,true)}}});if(!p.focusin){x.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){x.event.simulate(e,t.target,x.event.fix(t))};x.event.special[e]={setup:function(){var i=this.ownerDocument||this,o=J.access(i,e);if(!o){i.addEventListener(t,n,true)}J.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=J.access(i,e)-1;if(!o){i.removeEventListener(t,n,true);J.remove(i,e)}else{J.access(i,e,o)}}}})}var Te=t.location;var Se=Date.now();var $e=/\?/;x.parseXML=function(e){var n;if(!e||typeof e!=="string"){return null}try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){n=undefined}if(!n||n.getElementsByTagName("parsererror").length){x.error("Invalid XML: "+e)}return n};var Ee=/\[\]$/,Ne=/\r?\n/g,Ae=/^(?:submit|button|image|reset|file)$/i,Ie=/^(?:input|select|textarea|keygen)/i;function De(t,e,n,i){var o;if(Array.isArray(e)){x.each(e,function(e,o){if(n||Ee.test(t)){i(t,o)}else{De(t+"["+(typeof o==="object"&&o!=null?e:"")+"]",o,n,i)}})}else if(!n&&b(e)==="object"){for(o in e){De(t+"["+o+"]",e[o],n,i)}}else{i(t,e)}}x.param=function(t,e){var n,i=[],o=function(t,e){var n=v(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(n==null?"":n)};if(Array.isArray(t)||t.jquery&&!x.isPlainObject(t)){x.each(t,function(){o(this.name,this.value)})}else{for(n in t){De(n,t[n],e,o)}}return i.join("&")};x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=x.prop(this,"elements");return t?x.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!x(this).is(":disabled")&&Ie.test(this.nodeName)&&!Ae.test(t)&&(this.checked||!ht.test(t))}).map(function(t,e){var n=x(this).val();if(n==null){return null}if(Array.isArray(n)){return x.map(n,function(t){return{name:e.name,value:t.replace(Ne,"\r\n")}})}return{name:e.name,value:n.replace(Ne,"\r\n")}}).get()}});var Re=/%20/g,Le=/#.*$/,He=/([?&])_=[^&]*/,Pe=/^(.*?):[ \t]*([^\r\n]*)$/gm,Fe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,je=/^(?:GET|HEAD)$/,Oe=/^\/\//,Me={},Be={},ze="*/".concat("*"),qe=i.createElement("a");qe.href=Te.href;function Ue(t){return function(e,n){if(typeof e!=="string"){n=e;e="*"}var i,o=0,r=e.toLowerCase().match(j)||[];if(v(n)){while(i=r[o++]){if(i[0]==="+"){i=i.slice(1)||"*";(t[i]=t[i]||[]).unshift(n)}else{(t[i]=t[i]||[]).push(n)}}}}}function We(t,e,n,i){var o={},r=t===Be;function s(a){var l;o[a]=true;x.each(t[a]||[],function(t,a){var u=a(e,n,i);if(typeof u==="string"&&!r&&!o[u]){e.dataTypes.unshift(u);s(u);return false}else if(r){return!(l=u)}});return l}return s(e.dataTypes[0])||!o["*"]&&s("*")}function Ve(t,e){var n,i,o=x.ajaxSettings.flatOptions||{};for(n in e){if(e[n]!==undefined){(o[n]?t:i||(i={}))[n]=e[n]}}if(i){x.extend(true,t,i)}return t}function _e(t,e,n){var i,o,r,s,a=t.contents,l=t.dataTypes;while(l[0]==="*"){l.shift();if(i===undefined){i=t.mimeType||e.getResponseHeader("Content-Type")}}if(i){for(o in a){if(a[o]&&a[o].test(i)){l.unshift(o);break}}}if(l[0]in n){r=l[0]}else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}if(!s){s=o}}r=r||s}if(r){if(r!==l[0]){l.unshift(r)}return n[r]}}function Ke(t,e,n,i){var o,r,s,a,l,u={},c=t.dataTypes.slice();if(c[1]){for(s in t.converters){u[s.toLowerCase()]=t.converters[s]}}r=c.shift();while(r){if(t.responseFields[r]){n[t.responseFields[r]]=e}if(!l&&i&&t.dataFilter){e=t.dataFilter(e,t.dataType)}l=r;r=c.shift();if(r){if(r==="*"){r=l}else if(l!=="*"&&l!==r){s=u[l+" "+r]||u["* "+r];if(!s){for(o in u){a=o.split(" ");if(a[1]===r){s=u[l+" "+a[0]]||u["* "+a[0]];if(s){if(s===true){s=u[o]}else if(u[o]!==true){r=a[0];c.unshift(a[1])}break}}}}if(s!==true){if(s&&t.throws){e=s(e)}else{try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+r}}}}}}}return{state:"success",data:e}}x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Te.href,type:"GET",isLocal:Fe.test(Te.protocol),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ze,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":true,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:true,context:true}},ajaxSetup:function(t,e){return e?Ve(Ve(t,x.ajaxSettings),e):Ve(x.ajaxSettings,t)},ajaxPrefilter:Ue(Me),ajaxTransport:Ue(Be),ajax:function(e,n){if(typeof e==="object"){n=e;e=undefined}n=n||{};var o,r,s,a,l,u,c,f,d,h,p=x.ajaxSetup({},n),v=p.context||p,m=p.context&&(v.nodeType||v.jquery)?x(v):x.event,g=x.Deferred(),y=x.Callbacks("once memory"),b=p.statusCode||{},w={},C={},k="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(c){if(!a){a={};while(e=Pe.exec(s)){a[e[1].toLowerCase()]=e[2]}}e=a[t.toLowerCase()]}return e==null?null:e},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(t,e){if(c==null){t=C[t.toLowerCase()]=C[t.toLowerCase()]||t;w[t]=e}return this},overrideMimeType:function(t){if(c==null){p.mimeType=t}return this},statusCode:function(t){var e;if(t){if(c){T.always(t[T.status])}else{for(e in t){b[e]=[b[e],t[e]]}}}return this},abort:function(t){var e=t||k;if(o){o.abort(e)}S(0,e);return this}};g.promise(T);p.url=((e||p.url||Te.href)+"").replace(Oe,Te.protocol+"//");p.type=n.method||n.type||p.method||p.type;p.dataTypes=(p.dataType||"*").toLowerCase().match(j)||[""];if(p.crossDomain==null){u=i.createElement("a");try{u.href=p.url;u.href=u.href;p.crossDomain=qe.protocol+"//"+qe.host!==u.protocol+"//"+u.host}catch(t){p.crossDomain=true}}if(p.data&&p.processData&&typeof p.data!=="string"){p.data=x.param(p.data,p.traditional)}We(Me,p,n,T);if(c){return T}f=x.event&&p.global;if(f&&x.active++===0){x.event.trigger("ajaxStart")}p.type=p.type.toUpperCase();p.hasContent=!je.test(p.type);r=p.url.replace(Le,"");if(!p.hasContent){h=p.url.slice(r.length);if(p.data&&(p.processData||typeof p.data==="string")){r+=($e.test(r)?"&":"?")+p.data;delete p.data}if(p.cache===false){r=r.replace(He,"$1");h=($e.test(r)?"&":"?")+"_="+Se+++h}p.url=r+h}else if(p.data&&p.processData&&(p.contentType||"").indexOf("application/x-www-form-urlencoded")===0){p.data=p.data.replace(Re,"+")}if(p.ifModified){if(x.lastModified[r]){T.setRequestHeader("If-Modified-Since",x.lastModified[r])}if(x.etag[r]){T.setRequestHeader("If-None-Match",x.etag[r])}}if(p.data&&p.hasContent&&p.contentType!==false||n.contentType){T.setRequestHeader("Content-Type",p.contentType)}T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+(p.dataTypes[0]!=="*"?", "+ze+"; q=0.01":""):p.accepts["*"]);for(d in p.headers){T.setRequestHeader(d,p.headers[d])}if(p.beforeSend&&(p.beforeSend.call(v,T,p)===false||c)){return T.abort()}k="abort";y.add(p.complete);T.done(p.success);T.fail(p.error);o=We(Be,p,n,T);if(!o){S(-1,"No Transport")}else{T.readyState=1;if(f){m.trigger("ajaxSend",[T,p])}if(c){return T}if(p.async&&p.timeout>0){l=t.setTimeout(function(){T.abort("timeout")},p.timeout)}try{c=false;o.send(w,S)}catch(t){if(c){throw t}S(-1,t)}}function S(e,n,i,a){var u,d,h,w,C,k=n;if(c){return}c=true;if(l){t.clearTimeout(l)}o=undefined;s=a||"";T.readyState=e>0?4:0;u=e>=200&&e<300||e===304;if(i){w=_e(p,T,i)}w=Ke(p,w,T,u);if(u){if(p.ifModified){C=T.getResponseHeader("Last-Modified");if(C){x.lastModified[r]=C}C=T.getResponseHeader("etag");if(C){x.etag[r]=C}}if(e===204||p.type==="HEAD"){k="nocontent"}else if(e===304){k="notmodified"}else{k=w.state;d=w.data;h=w.error;u=!h}}else{h=k;if(e||!k){k="error";if(e<0){e=0}}}T.status=e;T.statusText=(n||k)+"";if(u){g.resolveWith(v,[d,k,T])}else{g.rejectWith(v,[T,k,h])}T.statusCode(b);b=undefined;if(f){m.trigger(u?"ajaxSuccess":"ajaxError",[T,p,u?d:h])}y.fireWith(v,[T,k]);if(f){m.trigger("ajaxComplete",[T,p]);if(!--x.active){x.event.trigger("ajaxStop")}}}return T},getJSON:function(t,e,n){return x.get(t,e,n,"json")},getScript:function(t,e){return x.get(t,undefined,e,"script")}});x.each(["get","post"],function(t,e){x[e]=function(t,n,i,o){if(v(n)){o=o||i;i=n;n=undefined}return x.ajax(x.extend({url:t,type:e,dataType:o,data:n,success:i},x.isPlainObject(t)&&t))}});x._evalUrl=function(t){return x.ajax({url:t,type:"GET",dataType:"script",cache:true,async:false,global:false,throws:true})};x.fn.extend({wrapAll:function(t){var e;if(this[0]){if(v(t)){t=t.call(this[0])}e=x(t,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){e.insertBefore(this[0])}e.map(function(){var t=this;while(t.firstElementChild){t=t.firstElementChild}return t}).append(this)}return this},wrapInner:function(t){if(v(t)){return this.each(function(e){x(this).wrapInner(t.call(this,e))})}return this.each(function(){var e=x(this),n=e.contents();if(n.length){n.wrapAll(t)}else{e.append(t)}})},wrap:function(t){var e=v(t);return this.each(function(n){x(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){this.parent(t).not("body").each(function(){x(this).replaceWith(this.childNodes)});return this}});x.expr.pseudos.hidden=function(t){return!x.expr.pseudos.visible(t)};x.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)};x.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var Ge={0:200,1223:204},Qe=x.ajaxSettings.xhr();p.cors=!!Qe&&"withCredentials"in Qe;p.ajax=Qe=!!Qe;x.ajaxTransport(function(e){var n,i;if(p.cors||Qe&&!e.crossDomain){return{send:function(o,r){var s,a=e.xhr();a.open(e.type,e.url,e.async,e.username,e.password);if(e.xhrFields){for(s in e.xhrFields){a[s]=e.xhrFields[s]}}if(e.mimeType&&a.overrideMimeType){a.overrideMimeType(e.mimeType)}if(!e.crossDomain&&!o["X-Requested-With"]){o["X-Requested-With"]="XMLHttpRequest"}for(s in o){a.setRequestHeader(s,o[s])}n=function(t){return function(){if(n){n=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null;if(t==="abort"){a.abort()}else if(t==="error"){if(typeof a.status!=="number"){r(0,"error")}else{r(a.status,a.statusText)}}else{r(Ge[a.status]||a.status,a.statusText,(a.responseType||"text")!=="text"||typeof a.responseText!=="string"?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders())}}}};a.onload=n();i=a.onerror=a.ontimeout=n("error");if(a.onabort!==undefined){a.onabort=i}else{a.onreadystatechange=function(){if(a.readyState===4){t.setTimeout(function(){if(n){i()}})}}}n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(n){throw t}}},abort:function(){if(n){n()}}}}});x.ajaxPrefilter(function(t){if(t.crossDomain){t.contents.script=false}});x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, "+"application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){x.globalEval(t);return t}}});x.ajaxPrefilter("script",function(t){if(t.cache===undefined){t.cache=false}if(t.crossDomain){t.type="GET"}});x.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(o,r){e=x("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove();n=null;if(t){r(t.type==="error"?404:200,t.type)}});i.head.appendChild(e[0])},abort:function(){if(n){n()}}}}});var Xe=[],Ye=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Xe.pop()||x.expando+"_"+Se++;this[t]=true;return t}});x.ajaxPrefilter("json jsonp",function(e,n,i){var o,r,s,a=e.jsonp!==false&&(Ye.test(e.url)?"url":typeof e.data==="string"&&(e.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&Ye.test(e.data)&&"data");if(a||e.dataTypes[0]==="jsonp"){o=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback;if(a){e[a]=e[a].replace(Ye,"$1"+o)}else if(e.jsonp!==false){e.url+=($e.test(e.url)?"&":"?")+e.jsonp+"="+o}e.converters["script json"]=function(){if(!s){x.error(o+" was not called")}return s[0]};e.dataTypes[0]="json";r=t[o];t[o]=function(){s=arguments};i.always(function(){if(r===undefined){x(t).removeProp(o)}else{t[o]=r}if(e[o]){e.jsonpCallback=n.jsonpCallback;Xe.push(o)}if(s&&v(r)){r(s[0])}s=r=undefined});return"script"}});p.createHTMLDocument=function(){var t=i.implementation.createHTMLDocument("").body;t.innerHTML="<form></form><form></form>";return t.childNodes.length===2}();x.parseHTML=function(t,e,n){if(typeof t!=="string"){return[]}if(typeof e==="boolean"){n=e;e=false}var o,r,s;if(!e){if(p.createHTMLDocument){e=i.implementation.createHTMLDocument("");o=e.createElement("base");o.href=i.location.href;e.head.appendChild(o)}else{e=i}}r=A.exec(t);s=!n&&[];if(r){return[e.createElement(r[1])]}r=wt([t],e,s);if(s&&s.length){x(s).remove()}return x.merge([],r.childNodes)};x.fn.load=function(t,e,n){var i,o,r,s=this,a=t.indexOf(" ");if(a>-1){i=ye(t.slice(a));t=t.slice(0,a)}if(v(e)){n=e;e=undefined}else if(e&&typeof e==="object"){o="POST"}if(s.length>0){x.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){r=arguments;s.html(i?x("<div>").append(x.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,r||[t.responseText,e,t])})})}return this};x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){x.fn[e]=function(t){return this.on(e,t)}});x.expr.pseudos.animated=function(t){return x.grep(x.timers,function(e){return t===e.elem}).length};x.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,u,c=x.css(t,"position"),f=x(t),d={};if(c==="static"){t.style.position="relative"}a=f.offset();r=x.css(t,"top");l=x.css(t,"left");u=(c==="absolute"||c==="fixed")&&(r+l).indexOf("auto")>-1;if(u){i=f.position();s=i.top;o=i.left}else{s=parseFloat(r)||0;o=parseFloat(l)||0}if(v(e)){e=e.call(t,n,x.extend({},a))}if(e.top!=null){d.top=e.top-a.top+s}if(e.left!=null){d.left=e.left-a.left+o}if("using"in e){e.using.call(t,d)}else{f.css(d)}}};x.fn.extend({offset:function(t){if(arguments.length){return t===undefined?this:this.each(function(e){x.offset.setOffset(this,t,e)})}var e,n,i=this[0];if(!i){return}if(!i.getClientRects().length){return{top:0,left:0}}e=i.getBoundingClientRect();n=i.ownerDocument.defaultView;return{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}},position:function(){if(!this[0]){return}var t,e,n,i=this[0],o={top:0,left:0};if(x.css(i,"position")==="fixed"){e=i.getBoundingClientRect()}else{e=this.offset();n=i.ownerDocument;t=i.offsetParent||n.documentElement;while(t&&(t===n.body||t===n.documentElement)&&x.css(t,"position")==="static"){t=t.parentNode}if(t&&t!==i&&t.nodeType===1){o=x(t).offset();o.top+=x.css(t,"borderTopWidth",true);o.left+=x.css(t,"borderLeftWidth",true)}}return{top:e.top-o.top-x.css(i,"marginTop",true),left:e.left-o.left-x.css(i,"marginLeft",true)}},offsetParent:function(){return this.map(function(){var t=this.offsetParent;while(t&&x.css(t,"position")==="static"){t=t.offsetParent}return t||xt})}});x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;x.fn[t]=function(i){return V(this,function(t,i,o){var r;if(m(t)){r=t}else if(t.nodeType===9){r=t.defaultView}if(o===undefined){return r?r[e]:t[i]}if(r){r.scrollTo(!n?o:r.pageXOffset,n?o:r.pageYOffset)}else{t[i]=o}},t,i,arguments.length)}});x.each(["top","left"],function(t,e){x.cssHooks[e]=Wt(p.pixelPosition,function(t,n){if(n){n=Ut(t,e);return Bt.test(n)?x(t).position()[e]+"px":n}})});x.each({Height:"height",Width:"width"},function(t,e){x.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){x.fn[i]=function(o,r){var s=arguments.length&&(n||typeof o!=="boolean"),a=n||(o===true||r===true?"margin":"border");return V(this,function(e,n,o){var r;if(m(e)){return i.indexOf("outer")===0?e["inner"+t]:e.document.documentElement["client"+t]}if(e.nodeType===9){r=e.documentElement;return Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])}return o===undefined?x.css(e,n,a):x.style(e,n,o,a)},e,s?o:undefined,s)}})});x.each(("blur focus focusin focusout resize scroll click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select submit keydown keypress keyup contextmenu").split(" "),function(t,e){x.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}});x.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}});x.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return arguments.length===1?this.off(t,"**"):this.off(e,t||"**",n)}});x.proxy=function(t,e){var n,i,o;if(typeof e==="string"){n=t[e];e=t;t=n}if(!v(t)){return undefined}i=r.call(arguments,2);o=function(){return t.apply(e||this,i.concat(r.call(arguments)))};o.guid=t.guid=t.guid||x.guid++;return o};x.holdReady=function(t){if(t){x.readyWait++}else{x.ready(true)}};x.isArray=Array.isArray;x.parseJSON=JSON.parse;x.nodeName=N;x.isFunction=v;x.isWindow=m;x.camelCase=Q;x.type=b;x.now=Date.now;x.isNumeric=function(t){var e=x.type(t);return(e==="number"||e==="string")&&!isNaN(t-parseFloat(t))};if(typeof define==="function"&&define.amd){define("jquery",[],function(){return x})}var Je=t.jQuery,Ze=t.$;x.noConflict=function(e){if(t.$===x){t.$=Ze}if(e&&t.jQuery===x){t.jQuery=Je}return x};if(!e){t.jQuery=t.$=x}return x});if(typeof jQuery==="undefined"){throw new Error("Bootstrap's JavaScript requires jQuery")}+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||e[0]==1&&e[1]==9&&e[2]<1||e[0]>3){throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}}(jQuery);+function(t){"use strict";function e(){var t=document.createElement("bootstrap");var e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e){if(t.style[n]!==undefined){return{end:e[n]}}}return false}t.fn.emulateTransitionEnd=function(e){var n=false;var i=this;t(this).one("bsTransitionEnd",function(){n=true});var o=function(){if(!n)t(i).trigger(t.support.transition.end)};setTimeout(o,e);return this};t(function(){t.support.transition=e();if(!t.support.transition)return;t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}})}(jQuery);+function(t){"use strict";var e='[data-dismiss="alert"]';var n=function(n){t(n).on("click",e,this.close)};n.VERSION="3.3.7";n.TRANSITION_DURATION=150;n.prototype.close=function(e){var i=t(this);var o=i.attr("data-target");if(!o){o=i.attr("href");o=o&&o.replace(/.*(?=#[^\s]*$)/,"")}var r=t(o==="#"?[]:o);if(e)e.preventDefault();if(!r.length){r=i.closest(".alert")}r.trigger(e=t.Event("close.bs.alert"));if(e.isDefaultPrevented())return;r.removeClass("in");function s(){r.detach().trigger("closed.bs.alert").remove()}t.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",s).emulateTransitionEnd(n.TRANSITION_DURATION):s()};function i(e){return this.each(function(){var i=t(this);var o=i.data("bs.alert");if(!o)i.data("bs.alert",o=new n(this));if(typeof e=="string")o[e].call(i)})}var o=t.fn.alert;t.fn.alert=i;t.fn.alert.Constructor=n;t.fn.alert.noConflict=function(){t.fn.alert=o;return this};t(document).on("click.bs.alert.data-api",e,n.prototype.close)}(jQuery);+function(t){"use strict";var e=function(n,i){this.$element=t(n);this.options=t.extend({},e.DEFAULTS,i);this.isLoading=false};e.VERSION="3.3.7";e.DEFAULTS={loadingText:"loading..."};e.prototype.setState=function(e){var n="disabled";var i=this.$element;var o=i.is("input")?"val":"html";var r=i.data();e+="Text";if(r.resetText==null)i.data("resetText",i[o]());setTimeout(t.proxy(function(){i[o](r[e]==null?this.options[e]:r[e]);if(e=="loadingText"){this.isLoading=true;i.addClass(n).attr(n,n).prop(n,true)}else if(this.isLoading){this.isLoading=false;i.removeClass(n).removeAttr(n).prop(n,false)}},this),0)};e.prototype.toggle=function(){var t=true;var e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");if(n.prop("type")=="radio"){if(n.prop("checked"))t=false;e.find(".active").removeClass("active");this.$element.addClass("active")}else if(n.prop("type")=="checkbox"){if(n.prop("checked")!==this.$element.hasClass("active"))t=false;this.$element.toggleClass("active")}n.prop("checked",this.$element.hasClass("active"));if(t)n.trigger("change")}else{this.$element.attr("aria-pressed",!this.$element.hasClass("active"));this.$element.toggleClass("active")}};function n(n){return this.each(function(){var i=t(this);var o=i.data("bs.button");var r=typeof n=="object"&&n;if(!o)i.data("bs.button",o=new e(this,r));if(n=="toggle")o.toggle();else if(n)o.setState(n)})}var i=t.fn.button;t.fn.button=n;t.fn.button.Constructor=e;t.fn.button.noConflict=function(){t.fn.button=i;return this};t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(e){var i=t(e.target).closest(".btn");n.call(i,"toggle");if(!t(e.target).is('input[type="radio"], input[type="checkbox"]')){e.preventDefault();if(i.is("input,button"))i.trigger("focus");else i.find("input:visible,button:visible").first().trigger("focus")}}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery);+function(t){"use strict";var e=function(e,n){this.$element=t(e);this.$indicators=this.$element.find(".carousel-indicators");this.options=n;this.paused=null;this.sliding=null;this.interval=null;this.$active=null;this.$items=null;this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this));this.options.pause=="hover"&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};e.VERSION="3.3.7";e.TRANSITION_DURATION=600;e.DEFAULTS={interval:5e3,pause:"hover",wrap:true,keyboard:true};e.prototype.keydown=function(t){if(/input|textarea/i.test(t.target.tagName))return;switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()};e.prototype.cycle=function(e){e||(this.paused=false);this.interval&&clearInterval(this.interval);this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval));return this};e.prototype.getItemIndex=function(t){this.$items=t.parent().children(".item");return this.$items.index(t||this.$active)};e.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e);var i=t=="prev"&&n===0||t=="next"&&n==this.$items.length-1;if(i&&!this.options.wrap)return e;var o=t=="prev"?-1:1;var r=(n+o)%this.$items.length;return this.$items.eq(r)};e.prototype.to=function(t){var e=this;var n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(t>this.$items.length-1||t<0)return;if(this.sliding)return this.$element.one("slid.bs.carousel",function(){e.to(t)});if(n==t)return this.pause().cycle();return this.slide(t>n?"next":"prev",this.$items.eq(t))};e.prototype.pause=function(e){e||(this.paused=true);if(this.$element.find(".next, .prev").length&&t.support.transition){this.$element.trigger(t.support.transition.end);this.cycle(true)}this.interval=clearInterval(this.interval);return this};e.prototype.next=function(){if(this.sliding)return;return this.slide("next")};e.prototype.prev=function(){if(this.sliding)return;return this.slide("prev")};e.prototype.slide=function(n,i){var o=this.$element.find(".item.active");var r=i||this.getItemForDirection(n,o);var s=this.interval;var a=n=="next"?"left":"right";var l=this;if(r.hasClass("active"))return this.sliding=false;var u=r[0];var c=t.Event("slide.bs.carousel",{relatedTarget:u,direction:a});this.$element.trigger(c);if(c.isDefaultPrevented())return;this.sliding=true;s&&this.pause();if(this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=t(this.$indicators.children()[this.getItemIndex(r)]);f&&f.addClass("active")}var d=t.Event("slid.bs.carousel",{relatedTarget:u,direction:a});if(t.support.transition&&this.$element.hasClass("slide")){r.addClass(n);r[0].offsetWidth;o.addClass(a);r.addClass(a);o.one("bsTransitionEnd",function(){r.removeClass([n,a].join(" ")).addClass("active");o.removeClass(["active",a].join(" "));l.sliding=false;setTimeout(function(){l.$element.trigger(d)},0)}).emulateTransitionEnd(e.TRANSITION_DURATION)}else{o.removeClass("active");r.addClass("active");this.sliding=false;this.$element.trigger(d)}s&&this.cycle();return this};function n(n){return this.each(function(){var i=t(this);var o=i.data("bs.carousel");var r=t.extend({},e.DEFAULTS,i.data(),typeof n=="object"&&n);var s=typeof n=="string"?n:r.slide;if(!o)i.data("bs.carousel",o=new e(this,r));if(typeof n=="number")o.to(n);else if(s)o[s]();else if(r.interval)o.pause().cycle()})}var i=t.fn.carousel;t.fn.carousel=n;t.fn.carousel.Constructor=e;t.fn.carousel.noConflict=function(){t.fn.carousel=i;return this};var o=function(e){var i;var o=t(this);var r=t(o.attr("data-target")||(i=o.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""));if(!r.hasClass("carousel"))return;var s=t.extend({},r.data(),o.data());var a=o.attr("data-slide-to");if(a)s.interval=false;n.call(r,s);if(a){r.data("bs.carousel").to(a)}e.preventDefault()};t(document).on("click.bs.carousel.data-api","[data-slide]",o).on("click.bs.carousel.data-api","[data-slide-to]",o);t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery);+function(t){"use strict";var e=function(n,i){this.$element=t(n);this.options=t.extend({},e.DEFAULTS,i);this.$trigger=t('[data-toggle="collapse"][href="#'+n.id+'"],'+'[data-toggle="collapse"][data-target="#'+n.id+'"]');this.transitioning=null;if(this.options.parent){this.$parent=this.getParent()}else{this.addAriaAndCollapsedClass(this.$element,this.$trigger)}if(this.options.toggle)this.toggle()};e.VERSION="3.3.7";e.TRANSITION_DURATION=350;e.DEFAULTS={toggle:true};e.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"};e.prototype.show=function(){if(this.transitioning||this.$element.hasClass("in"))return;var n;var o=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(o&&o.length){n=o.data("bs.collapse");if(n&&n.transitioning)return}var r=t.Event("show.bs.collapse");this.$element.trigger(r);if(r.isDefaultPrevented())return;if(o&&o.length){i.call(o,"hide");n||o.data("bs.collapse",null)}var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",true);this.$trigger.removeClass("collapsed").attr("aria-expanded",true);this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s]("");this.transitioning=0;this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(e.TRANSITION_DURATION)[s](this.$element[0][l])};e.prototype.hide=function(){if(this.transitioning||!this.$element.hasClass("in"))return;var n=t.Event("hide.bs.collapse");this.$element.trigger(n);if(n.isDefaultPrevented())return;var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight;this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",false);this.$trigger.addClass("collapsed").attr("aria-expanded",false);this.transitioning=1;var o=function(){this.transitioning=0;this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!t.support.transition)return o.call(this);this.$element[i](0).one("bsTransitionEnd",t.proxy(o,this)).emulateTransitionEnd(e.TRANSITION_DURATION)};e.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};e.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(e,i){var o=t(i);this.addAriaAndCollapsedClass(n(o),o)},this)).end()};e.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n);e.toggleClass("collapsed",!n).attr("aria-expanded",n)};function n(e){var n;var i=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(i)}function i(n){return this.each(function(){var i=t(this);var o=i.data("bs.collapse");var r=t.extend({},e.DEFAULTS,i.data(),typeof n=="object"&&n);if(!o&&r.toggle&&/show|hide/.test(n))r.toggle=false;if(!o)i.data("bs.collapse",o=new e(this,r));if(typeof n=="string")o[n]()})}var o=t.fn.collapse;t.fn.collapse=i;t.fn.collapse.Constructor=e;t.fn.collapse.noConflict=function(){t.fn.collapse=o;return this};t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(e){var o=t(this);if(!o.attr("data-target"))e.preventDefault();var r=n(o);var s=r.data("bs.collapse");var a=s?"toggle":o.data();i.call(r,a)})}(jQuery);+function(t){"use strict";var e=".dropdown-backdrop";var n='[data-toggle="dropdown"]';var i=function(e){t(e).on("click.bs.dropdown",this.toggle)};i.VERSION="3.3.7";function o(e){var n=e.attr("data-target");if(!n){n=e.attr("href");n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,"")}var i=n&&t(n);return i&&i.length?i:e.parent()}function r(i){if(i&&i.which===3)return;t(e).remove();t(n).each(function(){var e=t(this);var n=o(e);var r={relatedTarget:this};if(!n.hasClass("open"))return;if(i&&i.type=="click"&&/input|textarea/i.test(i.target.tagName)&&t.contains(n[0],i.target))return;n.trigger(i=t.Event("hide.bs.dropdown",r));if(i.isDefaultPrevented())return;e.attr("aria-expanded","false");n.removeClass("open").trigger(t.Event("hidden.bs.dropdown",r))})}i.prototype.toggle=function(e){var n=t(this);if(n.is(".disabled, :disabled"))return;var i=o(n);var s=i.hasClass("open");r();if(!s){if("ontouchstart"in document.documentElement&&!i.closest(".navbar-nav").length){t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",r)}var a={relatedTarget:this};i.trigger(e=t.Event("show.bs.dropdown",a));if(e.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true");i.toggleClass("open").trigger(t.Event("shown.bs.dropdown",a))}return false};i.prototype.keydown=function(e){if(!/(38|40|27|32)/.test(e.which)||/input|textarea/i.test(e.target.tagName))return;var i=t(this);e.preventDefault();e.stopPropagation();if(i.is(".disabled, :disabled"))return;var r=o(i);var s=r.hasClass("open");if(!s&&e.which!=27||s&&e.which==27){if(e.which==27)r.find(n).trigger("focus");return i.trigger("click")}var a=" li:not(.disabled):visible a";var l=r.find(".dropdown-menu"+a);if(!l.length)return;var u=l.index(e.target);if(e.which==38&&u>0)u--;if(e.which==40&&u<l.length-1)u++;if(!~u)u=0;l.eq(u).trigger("focus")};function s(e){return this.each(function(){var n=t(this);var o=n.data("bs.dropdown");if(!o)n.data("bs.dropdown",o=new i(this));if(typeof e=="string")o[e].call(n)})}var a=t.fn.dropdown;t.fn.dropdown=s;t.fn.dropdown.Constructor=i;t.fn.dropdown.noConflict=function(){t.fn.dropdown=a;return this};t(document).on("click.bs.dropdown.data-api",r).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",n,i.prototype.toggle).on("keydown.bs.dropdown.data-api",n,i.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",i.prototype.keydown)}(jQuery);+function(t){"use strict";var e=function(e,n){this.options=n;this.$body=t(document.body);this.$element=t(e);this.$dialog=this.$element.find(".modal-dialog");this.$backdrop=null;this.isShown=null;this.originalBodyPad=null;this.scrollbarWidth=0;this.ignoreBackdropClick=false;if(this.options.remote){this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))}};e.VERSION="3.3.7";e.TRANSITION_DURATION=300;e.BACKDROP_TRANSITION_DURATION=150;e.DEFAULTS={backdrop:true,keyboard:true,show:true};e.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)};e.prototype.show=function(n){var i=this;var o=t.Event("show.bs.modal",{relatedTarget:n});this.$element.trigger(o);if(this.isShown||o.isDefaultPrevented())return;this.isShown=true;this.checkScrollbar();this.setScrollbar();this.$body.addClass("modal-open");this.escape();this.resize();this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this));this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(e){if(t(e.target).is(i.$element))i.ignoreBackdropClick=true})});this.backdrop(function(){var o=t.support.transition&&i.$element.hasClass("fade");if(!i.$element.parent().length){i.$element.appendTo(i.$body)}i.$element.show().scrollTop(0);i.adjustDialog();if(o){i.$element[0].offsetWidth}i.$element.addClass("in");i.enforceFocus();var r=t.Event("shown.bs.modal",{relatedTarget:n});o?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(r)}).emulateTransitionEnd(e.TRANSITION_DURATION):i.$element.trigger("focus").trigger(r)})};e.prototype.hide=function(n){if(n)n.preventDefault();n=t.Event("hide.bs.modal");this.$element.trigger(n);if(!this.isShown||n.isDefaultPrevented())return;this.isShown=false;this.escape();this.resize();t(document).off("focusin.bs.modal");this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal");this.$dialog.off("mousedown.dismiss.bs.modal");t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(e.TRANSITION_DURATION):this.hideModal()};e.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){if(document!==t.target&&this.$element[0]!==t.target&&!this.$element.has(t.target).length){this.$element.trigger("focus")}},this))};e.prototype.escape=function(){if(this.isShown&&this.options.keyboard){this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){t.which==27&&this.hide()},this))}else if(!this.isShown){this.$element.off("keydown.dismiss.bs.modal")}};e.prototype.resize=function(){if(this.isShown){t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this))}else{t(window).off("resize.bs.modal")}};e.prototype.hideModal=function(){var t=this;this.$element.hide();this.backdrop(function(){t.$body.removeClass("modal-open");t.resetAdjustments();t.resetScrollbar();t.$element.trigger("hidden.bs.modal")})};e.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove();this.$backdrop=null};e.prototype.backdrop=function(n){var i=this;var o=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var r=t.support.transition&&o;this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+o).appendTo(this.$body);this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){if(this.ignoreBackdropClick){this.ignoreBackdropClick=false;return}if(t.target!==t.currentTarget)return;this.options.backdrop=="static"?this.$element[0].focus():this.hide()},this));if(r)this.$backdrop[0].offsetWidth;this.$backdrop.addClass("in");if(!n)return;r?this.$backdrop.one("bsTransitionEnd",n).emulateTransitionEnd(e.BACKDROP_TRANSITION_DURATION):n()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var s=function(){i.removeBackdrop();n&&n()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",s).emulateTransitionEnd(e.BACKDROP_TRANSITION_DURATION):s()}else if(n){n()}};e.prototype.handleUpdate=function(){this.adjustDialog()};e.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})};e.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})};e.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t;this.scrollbarWidth=this.measureScrollbar()};e.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"";if(this.bodyIsOverflowing)this.$body.css("padding-right",t+this.scrollbarWidth)};e.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)};e.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure";this.$body.append(t);var e=t.offsetWidth-t.clientWidth;this.$body[0].removeChild(t);return e};function n(n,i){return this.each(function(){var o=t(this);var r=o.data("bs.modal");var s=t.extend({},e.DEFAULTS,o.data(),typeof n=="object"&&n);if(!r)o.data("bs.modal",r=new e(this,s));if(typeof n=="string")r[n](i);else if(s.show)r.show(i)})}var i=t.fn.modal;t.fn.modal=n;t.fn.modal.Constructor=e;t.fn.modal.noConflict=function(){t.fn.modal=i;return this};t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(e){var i=t(this);var o=i.attr("href");var r=t(i.attr("data-target")||o&&o.replace(/.*(?=#[^\s]+$)/,""));var s=r.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(o)&&o},r.data(),i.data());if(i.is("a"))e.preventDefault();r.one("show.bs.modal",function(t){if(t.isDefaultPrevented())return;r.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})});n.call(r,s,this)})}(jQuery);+function(t){"use strict";var e=function(t,e){this.type=null;this.options=null;this.enabled=null;this.timeout=null;this.hoverState=null;this.$element=null;this.inState=null;this.init("tooltip",t,e)};e.VERSION="3.3.7";e.TRANSITION_DURATION=150;e.DEFAULTS={animation:true,placement:"top",selector:false,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:false,container:false,viewport:{selector:"body",padding:0}};e.prototype.init=function(e,n,i){this.enabled=true;this.type=e;this.$element=t(n);this.options=this.getOptions(i);this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport);this.inState={click:false,hover:false,focus:false};if(this.$element[0]instanceof document.constructor&&!this.options.selector){throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!")}var o=this.options.trigger.split(" ");for(var r=o.length;r--;){var s=o[r];if(s=="click"){this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this))}else if(s!="manual"){var a=s=="hover"?"mouseenter":"focusin";var l=s=="hover"?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this));this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()};e.prototype.getDefaults=function(){return e.DEFAULTS};e.prototype.getOptions=function(e){e=t.extend({},this.getDefaults(),this.$element.data(),e);if(e.delay&&typeof e.delay=="number"){e.delay={show:e.delay,hide:e.delay}}return e};e.prototype.getDelegateOptions=function(){var e={};var n=this.getDefaults();this._options&&t.each(this._options,function(t,i){if(n[t]!=i)e[t]=i});return e};e.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(!n){n=new this.constructor(e.currentTarget,this.getDelegateOptions());t(e.currentTarget).data("bs."+this.type,n)}if(e instanceof t.Event){n.inState[e.type=="focusin"?"focus":"hover"]=true}if(n.tip().hasClass("in")||n.hoverState=="in"){n.hoverState="in";return}clearTimeout(n.timeout);n.hoverState="in";if(!n.options.delay||!n.options.delay.show)return n.show();n.timeout=setTimeout(function(){if(n.hoverState=="in")n.show()},n.options.delay.show)};e.prototype.isInStateTrue=function(){for(var t in this.inState){if(this.inState[t])return true}return false};e.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(!n){n=new this.constructor(e.currentTarget,this.getDelegateOptions());t(e.currentTarget).data("bs."+this.type,n)}if(e instanceof t.Event){n.inState[e.type=="focusout"?"focus":"hover"]=false}if(n.isInStateTrue())return;clearTimeout(n.timeout);n.hoverState="out";if(!n.options.delay||!n.options.delay.hide)return n.hide();n.timeout=setTimeout(function(){if(n.hoverState=="out")n.hide()},n.options.delay.hide)};e.prototype.show=function(){var n=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(n);var i=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(n.isDefaultPrevented()||!i)return;var o=this;var r=this.tip();var s=this.getUID(this.type);this.setContent();r.attr("id",s);this.$element.attr("aria-describedby",s);if(this.options.animation)r.addClass("fade");var a=typeof this.options.placement=="function"?this.options.placement.call(this,r[0],this.$element[0]):this.options.placement;var l=/\s?auto?\s?/i;var u=l.test(a);if(u)a=a.replace(l,"")||"top";r.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this);this.options.container?r.appendTo(this.options.container):r.insertAfter(this.$element);this.$element.trigger("inserted.bs."+this.type);var c=this.getPosition();var f=r[0].offsetWidth;var d=r[0].offsetHeight;if(u){var h=a;var p=this.getPosition(this.$viewport);a=a=="bottom"&&c.bottom+d>p.bottom?"top":a=="top"&&c.top-d<p.top?"bottom":a=="right"&&c.right+f>p.width?"left":a=="left"&&c.left-f<p.left?"right":a;r.removeClass(h).addClass(a)}var v=this.getCalculatedOffset(a,c,f,d);this.applyPlacement(v,a);var m=function(){var t=o.hoverState;o.$element.trigger("shown.bs."+o.type);o.hoverState=null;if(t=="out")o.leave(o)};t.support.transition&&this.$tip.hasClass("fade")?r.one("bsTransitionEnd",m).emulateTransitionEnd(e.TRANSITION_DURATION):m()}};e.prototype.applyPlacement=function(e,n){var i=this.tip();var o=i[0].offsetWidth;var r=i[0].offsetHeight;var s=parseInt(i.css("margin-top"),10);var a=parseInt(i.css("margin-left"),10);if(isNaN(s))s=0;if(isNaN(a))a=0;e.top+=s;e.left+=a;t.offset.setOffset(i[0],t.extend({using:function(t){i.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0);i.addClass("in");var l=i[0].offsetWidth;var u=i[0].offsetHeight;if(n=="top"&&u!=r){e.top=e.top+r-u}var c=this.getViewportAdjustedDelta(n,e,l,u);if(c.left)e.left+=c.left;else e.top+=c.top;var f=/top|bottom/.test(n);var d=f?c.left*2-o+l:c.top*2-r+u;var h=f?"offsetWidth":"offsetHeight";i.offset(e);this.replaceArrow(d,i[0][h],f)};e.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")};e.prototype.setContent=function(){var t=this.tip();var e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e);t.removeClass("fade in top bottom left right")};e.prototype.hide=function(n){var i=this;var o=t(this.$tip);var r=t.Event("hide.bs."+this.type);function s(){if(i.hoverState!="in")o.detach();if(i.$element){i.$element.removeAttr("aria-describedby").trigger("hidden.bs."+i.type)}n&&n()}this.$element.trigger(r);if(r.isDefaultPrevented())return;o.removeClass("in");t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",s).emulateTransitionEnd(e.TRANSITION_DURATION):s();this.hoverState=null;return this};e.prototype.fixTitle=function(){var t=this.$element;if(t.attr("title")||typeof t.attr("data-original-title")!="string"){t.attr("data-original-title",t.attr("title")||"").attr("title","")}};e.prototype.hasContent=function(){return this.getTitle()};e.prototype.getPosition=function(e){e=e||this.$element;var n=e[0];var i=n.tagName=="BODY";var o=n.getBoundingClientRect();if(o.width==null){o=t.extend({},o,{width:o.right-o.left,height:o.bottom-o.top})}var r=window.SVGElement&&n instanceof window.SVGElement;var s=i?{top:0,left:0}:r?null:e.offset();var a={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()};var l=i?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},o,a,l,s)};e.prototype.getCalculatedOffset=function(t,e,n,i){return t=="bottom"?{top:e.top+e.height,left:e.left+e.width/2-n/2}:t=="top"?{top:e.top-i,left:e.left+e.width/2-n/2}:t=="left"?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}};e.prototype.getViewportAdjustedDelta=function(t,e,n,i){var o={top:0,left:0};if(!this.$viewport)return o;var r=this.options.viewport&&this.options.viewport.padding||0;var s=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-r-s.scroll;var l=e.top+r-s.scroll+i;if(a<s.top){o.top=s.top-a}else if(l>s.top+s.height){o.top=s.top+s.height-l}}else{var u=e.left-r;var c=e.left+r+n;if(u<s.left){o.left=s.left-u}else if(c>s.right){o.left=s.left+s.width-c}}return o};e.prototype.getTitle=function(){var t;var e=this.$element;var n=this.options;t=e.attr("data-original-title")||(typeof n.title=="function"?n.title.call(e[0]):n.title);return t};e.prototype.getUID=function(t){do{t+=~~(Math.random()*1e6)}while(document.getElementById(t));return t};e.prototype.tip=function(){if(!this.$tip){this.$tip=t(this.options.template);if(this.$tip.length!=1){throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!")}}return this.$tip};e.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")};e.prototype.enable=function(){this.enabled=true};e.prototype.disable=function(){this.enabled=false};e.prototype.toggleEnabled=function(){this.enabled=!this.enabled};e.prototype.toggle=function(e){var n=this;if(e){n=t(e.currentTarget).data("bs."+this.type);if(!n){n=new this.constructor(e.currentTarget,this.getDelegateOptions());t(e.currentTarget).data("bs."+this.type,n)}}if(e){n.inState.click=!n.inState.click;if(n.isInStateTrue())n.enter(n);else n.leave(n)}else{n.tip().hasClass("in")?n.leave(n):n.enter(n)}};e.prototype.destroy=function(){var t=this;clearTimeout(this.timeout);this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type);if(t.$tip){t.$tip.detach()}t.$tip=null;t.$arrow=null;t.$viewport=null;t.$element=null})};function n(n){return this.each(function(){var i=t(this);var o=i.data("bs.tooltip");var r=typeof n=="object"&&n;if(!o&&/destroy|hide/.test(n))return;if(!o)i.data("bs.tooltip",o=new e(this,r));if(typeof n=="string")o[n]()})}var i=t.fn.tooltip;t.fn.tooltip=n;t.fn.tooltip.Constructor=e;t.fn.tooltip.noConflict=function(){t.fn.tooltip=i;return this}}(jQuery);+function(t){"use strict";var e=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");e.VERSION="3.3.7";e.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'});e.prototype=t.extend({},t.fn.tooltip.Constructor.prototype);e.prototype.constructor=e;e.prototype.getDefaults=function(){return e.DEFAULTS};e.prototype.setContent=function(){var t=this.tip();var e=this.getTitle();var n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e);t.find(".popover-content").children().detach().end()[this.options.html?typeof n=="string"?"html":"append":"text"](n);t.removeClass("fade top bottom left right in");if(!t.find(".popover-title").html())t.find(".popover-title").hide()};e.prototype.hasContent=function(){return this.getTitle()||this.getContent()};e.prototype.getContent=function(){var t=this.$element;var e=this.options;return t.attr("data-content")||(typeof e.content=="function"?e.content.call(t[0]):e.content)};e.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};function n(n){return this.each(function(){var i=t(this);var o=i.data("bs.popover");var r=typeof n=="object"&&n;if(!o&&/destroy|hide/.test(n))return;if(!o)i.data("bs.popover",o=new e(this,r));if(typeof n=="string")o[n]()})}var i=t.fn.popover;t.fn.popover=n;t.fn.popover.Constructor=e;t.fn.popover.noConflict=function(){t.fn.popover=i;return this}}(jQuery);+function(t){"use strict";function e(n,i){this.$body=t(document.body);this.$scrollElement=t(n).is(document.body)?t(window):t(n);this.options=t.extend({},e.DEFAULTS,i);this.selector=(this.options.target||"")+" .nav li > a";this.offsets=[];this.targets=[];this.activeTarget=null;this.scrollHeight=0;this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this));this.refresh();this.process()}e.VERSION="3.3.7";e.DEFAULTS={offset:10};e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)};e.prototype.refresh=function(){var e=this;var n="offset";var i=0;this.offsets=[];this.targets=[];this.scrollHeight=this.getScrollHeight();if(!t.isWindow(this.$scrollElement[0])){n="position";i=this.$scrollElement.scrollTop()}this.$body.find(this.selector).map(function(){var e=t(this);var o=e.data("target")||e.attr("href");var r=/^#./.test(o)&&t(o);return r&&r.length&&r.is(":visible")&&[[r[n]().top+i,o]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]);e.targets.push(this[1])})};e.prototype.process=function(){var t=this.$scrollElement.scrollTop()+this.options.offset;var e=this.getScrollHeight();var n=this.options.offset+e-this.$scrollElement.height();var i=this.offsets;var o=this.targets;var r=this.activeTarget;var s;if(this.scrollHeight!=e){this.refresh()}if(t>=n){return r!=(s=o[o.length-1])&&this.activate(s)}if(r&&t<i[0]){this.activeTarget=null;return this.clear()}for(s=i.length;s--;){r!=o[s]&&t>=i[s]&&(i[s+1]===undefined||t<i[s+1])&&this.activate(o[s])}};e.prototype.activate=function(e){this.activeTarget=e;this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]';var i=t(n).parents("li").addClass("active");if(i.parent(".dropdown-menu").length){i=i.closest("li.dropdown").addClass("active")}i.trigger("activate.bs.scrollspy")};e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};function n(n){return this.each(function(){var i=t(this);var o=i.data("bs.scrollspy");var r=typeof n=="object"&&n;if(!o)i.data("bs.scrollspy",o=new e(this,r));if(typeof n=="string")o[n]()})}var i=t.fn.scrollspy;t.fn.scrollspy=n;t.fn.scrollspy.Constructor=e;t.fn.scrollspy.noConflict=function(){t.fn.scrollspy=i;return this};t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery);+function(t){"use strict";var e=function(e){this.element=t(e)};e.VERSION="3.3.7";e.TRANSITION_DURATION=150;e.prototype.show=function(){var e=this.element;var n=e.closest("ul:not(.dropdown-menu)");var i=e.data("target");if(!i){i=e.attr("href");i=i&&i.replace(/.*(?=#[^\s]*$)/,"")}if(e.parent("li").hasClass("active"))return;var o=n.find(".active:last a");var r=t.Event("hide.bs.tab",{relatedTarget:e[0]});var s=t.Event("show.bs.tab",{relatedTarget:o[0]});o.trigger(r);e.trigger(s);if(s.isDefaultPrevented()||r.isDefaultPrevented())return;var a=t(i);this.activate(e.closest("li"),n);this.activate(a,a.parent(),function(){o.trigger({type:"hidden.bs.tab",relatedTarget:e[0]});e.trigger({type:"shown.bs.tab",relatedTarget:o[0]})})};e.prototype.activate=function(n,i,o){var r=i.find("> .active");var s=o&&t.support.transition&&(r.length&&r.hasClass("fade")||!!i.find("> .fade").length);function a(){r.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",false);n.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",true);if(s){n[0].offsetWidth;n.addClass("in")}else{n.removeClass("fade")}if(n.parent(".dropdown-menu").length){n.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",true)}o&&o()}r.length&&s?r.one("bsTransitionEnd",a).emulateTransitionEnd(e.TRANSITION_DURATION):a();r.removeClass("in")};function n(n){return this.each(function(){var i=t(this);var o=i.data("bs.tab");if(!o)i.data("bs.tab",o=new e(this));if(typeof n=="string")o[n]()})}var i=t.fn.tab;t.fn.tab=n;t.fn.tab.Constructor=e;t.fn.tab.noConflict=function(){t.fn.tab=i;return this};var o=function(e){e.preventDefault();n.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',o).on("click.bs.tab.data-api",'[data-toggle="pill"]',o)}(jQuery);+function(t){"use strict";var e=function(n,i){this.options=t.extend({},e.DEFAULTS,i);this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this));this.$element=t(n);this.affixed=null;this.unpin=null;this.pinnedOffset=null;this.checkPosition()};e.VERSION="3.3.7";e.RESET="affix affix-top affix-bottom";e.DEFAULTS={offset:0,target:window};e.prototype.getState=function(t,e,n,i){var o=this.$target.scrollTop();var r=this.$element.offset();var s=this.$target.height();if(n!=null&&this.affixed=="top")return o<n?"top":false;if(this.affixed=="bottom"){if(n!=null)return o+this.unpin<=r.top?false:"bottom";return o+s<=t-i?false:"bottom"}var a=this.affixed==null;var l=a?o:r.top;var u=a?s:e;if(n!=null&&o<=n)return"top";if(i!=null&&l+u>=t-i)return"bottom";return false};e.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(e.RESET).addClass("affix");var t=this.$target.scrollTop();var n=this.$element.offset();return this.pinnedOffset=n.top-t};e.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)};e.prototype.checkPosition=function(){if(!this.$element.is(":visible"))return;var n=this.$element.height();var i=this.options.offset;var o=i.top;var r=i.bottom;var s=Math.max(t(document).height(),t(document.body).height());if(typeof i!="object")r=o=i;if(typeof o=="function")o=i.top(this.$element);if(typeof r=="function")r=i.bottom(this.$element);var a=this.getState(s,n,o,r);if(this.affixed!=a){if(this.unpin!=null)this.$element.css("top","");var l="affix"+(a?"-"+a:"");var u=t.Event(l+".bs.affix");this.$element.trigger(u);if(u.isDefaultPrevented())return;this.affixed=a;this.unpin=a=="bottom"?this.getPinnedOffset():null;this.$element.removeClass(e.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}if(a=="bottom"){this.$element.offset({top:s-n-r})}};function n(n){return this.each(function(){var i=t(this);var o=i.data("bs.affix");var r=typeof n=="object"&&n;if(!o)i.data("bs.affix",o=new e(this,r));if(typeof n=="string")o[n]()})}var i=t.fn.affix;t.fn.affix=n;t.fn.affix.Constructor=e;t.fn.affix.noConflict=function(){t.fn.affix=i;return this};t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var e=t(this);var i=e.data();i.offset=i.offset||{};if(i.offsetBottom!=null)i.offset.bottom=i.offsetBottom;if(i.offsetTop!=null)i.offset.top=i.offsetTop;n.call(e,i)})})}(jQuery);(function(t,e){typeof exports==="object"&&typeof module!=="undefined"?e(require("jquery")):typeof define==="function"&&define.amd?define(["jquery"],e):e(t.jQuery)})(this,function(t){"use strict";t=t&&t.hasOwnProperty("default")?t["default"]:t;var e=function(){function e(t,e,n,i){this.markup=t;this.children=e;this.options=n;this.callback=i}e.prototype.render=function(e){var n=t(this.markup);if(this.options&&this.options.contents){n.html(this.options.contents)}if(this.options&&this.options.className){n.addClass(this.options.className)}if(this.options&&this.options.data){t.each(this.options.data,function(t,e){n.attr("data-"+t,e)})}if(this.options&&this.options.click){n.on("click",this.options.click)}if(this.children){var i=n.find(".note-children-container");this.children.forEach(function(t){t.render(i.length?i:n)})}if(this.callback){this.callback(n,this.options)}if(this.options&&this.options.callback){this.options.callback(n)}if(e){e.append(n)}return n};return e}();var n={create:function(n,i){return function(){var o=typeof arguments[1]==="object"?arguments[1]:arguments[0];var r=t.isArray(arguments[0])?arguments[0]:[];if(o&&o.children){r=o.children}return new e(n,r,o,i)}}};var i=n.create('<div class="note-editor note-frame panel"/>');var o=n.create('<div class="note-toolbar-wrapper panel-default"><div class="note-toolbar panel-heading"></div></div>');var r=n.create('<div class="note-editing-area"/>');var s=n.create('<textarea class="note-codable"/>');var a=n.create('<div class="note-editable" contentEditable="true"/>');var l=n.create(['<div class="note-statusbar">','  <div class="note-resizebar">','    <div class="note-icon-bar"/>','    <div class="note-icon-bar"/>','    <div class="note-icon-bar"/>',"  </div>","</div>"].join(""));var u=n.create('<div class="note-editor"/>');var c=n.create('<div class="note-editable" contentEditable="true"/>');var f=n.create('<div class="note-btn-group btn-group">');var d=n.create('<div class="dropdown-menu">',function(e,n){var i=t.isArray(n.items)?n.items.map(function(t){var e=typeof t==="string"?t:t.value||"";var i=n.template?n.template(t):t;var o=typeof t==="object"?t.option:undefined;var r='data-value="'+e+'"';var s=o!==undefined?' data-option="'+o+'"':"";return'<li><a href="#" '+(r+s)+">"+i+"</a></li>"}).join(""):n.items;e.html(i)});var h=function(t,e){return t+" "+b(e.icons.caret,"span")};var p=n.create('<div class="dropdown-menu note-check">',function(e,n){var i=t.isArray(n.items)?n.items.map(function(t){var e=typeof t==="string"?t:t.value||"";var i=n.template?n.template(t):t;return'<li><a href="#" data-value="'+e+'">'+b(n.checkClassName)+" "+i+"</a></li>"}).join(""):n.items;e.html(i)});var v=n.create('<div class="note-color-palette"/>',function(t,e){var n=[];for(var i=0,o=e.colors.length;i<o;i++){var r=e.eventName;var s=e.colors[i];var a=[];for(var l=0,u=s.length;l<u;l++){var c=s[l];a.push(['<button type="button" class="note-color-btn"','style="background-color:',c,'" ','data-event="',r,'" ','data-value="',c,'" ','title="',c,'" ','data-toggle="button" tabindex="-1"></button>'].join(""))}n.push('<div class="note-color-row">'+a.join("")+"</div>")}t.html(n.join(""));if(e.tooltip){t.find(".note-color-btn").tooltip({container:e.container,trigger:"hover",placement:"bottom"})}});var m=n.create('<div class="modal" aria-hidden="false" tabindex="-1"/>',function(t,e){if(e.fade){t.addClass("fade")}t.html(['<div class="modal-dialog">','  <div class="modal-content">',e.title?'    <div class="modal-header">'+'      <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+'      <h4 class="modal-title">'+e.title+"</h4>"+"    </div>":"",'    <div class="modal-body">'+e.body+"</div>",e.footer?'    <div class="modal-footer">'+e.footer+"</div>":"","  </div>","</div>"].join(""))});var g=n.create(['<div class="note-popover popover in">','  <div class="arrow"/>','  <div class="popover-content note-children-container"/>',"</div>"].join(""),function(t,e){var n=typeof e.direction!=="undefined"?e.direction:"bottom";t.addClass(n);if(e.hideArrow){t.find(".arrow").hide()}});var y=n.create('<div class="checkbox"></div>',function(t,e){t.html([" <label"+(e.id?' for="'+e.id+'"':"")+">",' <input type="checkbox"'+(e.id?' id="'+e.id+'"':""),(e.checked?" checked":"")+"/>",e.text?e.text:"","</label>"].join(""))});var b=function(t,e){e=e||"i";return"<"+e+' class="'+t+'"/>'};var w={editor:i,toolbar:o,editingArea:r,codable:s,editable:a,statusbar:l,airEditor:u,airEditable:c,buttonGroup:f,dropdown:d,dropdownButtonContents:h,dropdownCheck:p,palette:v,dialog:m,popover:g,checkbox:y,icon:b,options:{},button:function(t,e){return n.create('<button type="button" class="note-btn btn btn-default btn-sm" tabindex="-1">',function(t,e){if(e&&e.tooltip){t.attr({title:e.tooltip}).tooltip({container:e.container,trigger:"hover",placement:"bottom"})}})(t,e)},toggleBtn:function(t,e){t.toggleClass("disabled",!e);t.attr("disabled",!e)},toggleBtnActive:function(t,e){t.toggleClass("active",e)},onDialogShown:function(t,e){t.one("shown.bs.modal",e)},onDialogHidden:function(t,e){t.one("hidden.bs.modal",e)},showDialog:function(t){t.modal("show")},hideDialog:function(t){t.modal("hide")},createLayout:function(t,e){var n=(e.airMode?w.airEditor([w.editingArea([w.airEditable()])]):w.editor([w.toolbar(),w.editingArea([w.codable(),w.editable()]),w.statusbar()])).render();n.insertAfter(t);return{note:t,editor:n,toolbar:n.find(".note-toolbar"),editingArea:n.find(".note-editing-area"),editable:n.find(".note-editable"),codable:n.find(".note-codable"),statusbar:n.find(".note-statusbar")}},removeLayout:function(t,e){t.html(e.editable.html());e.editor.remove();t.show()}};function x(t){return function(e){return t===e}}function C(t,e){return t===e}function k(t){return function(e,n){return e[t]===n[t]}}function T(){return true}function S(){return false}function E(t){return function(){return!t.apply(t,arguments)}}function N(t,e){return function(n){return t(n)&&e(n)}}function A(t){return t}function I(t,e){return function(){return t[e].apply(t,arguments)}}var D=0;function R(t){var e=++D+"";return t?t+e:e}function L(t){var e=$(document);return{top:t.top+e.scrollTop(),left:t.left+e.scrollLeft(),width:t.right-t.left,height:t.bottom-t.top}}function H(t){var e={};for(var n in t){if(t.hasOwnProperty(n)){e[t[n]]=n}}return e}function P(t,e){e=e||"";return e+t.split(".").map(function(t){return t.substring(0,1).toUpperCase()+t.substring(1)}).join("")}function F(t,e,n){var i=this;var o;return function(){var r=i;var s=arguments;var a=function(){o=null;if(!n){t.apply(r,s)}};var l=n&&!o;clearTimeout(o);o=setTimeout(a,e);if(l){t.apply(r,s)}}}var j={eq:x,eq2:C,peq2:k,ok:T,fail:S,self:A,not:E,and:N,invoke:I,uniqueId:R,rect2bnd:L,invertObject:H,namespaceToCamel:P,debounce:F};function O(t){return t[0]}function M(t){return t[t.length-1]}function B(t){return t.slice(0,t.length-1)}function z(t){return t.slice(1)}function q(t,e){for(var n=0,i=t.length;n<i;n++){var o=t[n];if(e(o)){return o}}}function U(t,e){for(var n=0,i=t.length;n<i;n++){if(!e(t[n])){return false}}return true}function W(e,n){return t.inArray(n,e)}function V(t,e){return W(t,e)!==-1}function _(t,e){e=e||j.self;return t.reduce(function(t,n){return t+e(n)},0)}function K(t){var e=[];var n=t.length;var i=-1;while(++i<n){e[i]=t[i]}return e}function G(t){return!t||!t.length}function Q(t,e){if(!t.length){return[]}var n=z(t);return n.reduce(function(t,n){var i=M(t);if(e(M(i),n)){i[i.length]=n}else{t[t.length]=[n]}return t},[[O(t)]])}function X(t){var e=[];for(var n=0,i=t.length;n<i;n++){if(t[n]){e.push(t[n])}}return e}function Y(t){var e=[];for(var n=0,i=t.length;n<i;n++){if(!V(e,t[n])){e.push(t[n])}}return e}function J(t,e){var n=W(t,e);if(n===-1){return null}return t[n+1]}function Z(t,e){var n=W(t,e);if(n===-1){return null}return t[n-1]}var tt={head:O,last:M,initial:B,tail:z,prev:Z,next:J,find:q,contains:V,all:U,sum:_,from:K,isEmpty:G,clusterBy:Q,compact:X,unique:Y};var et=typeof define==="function"&&define.amd;function nt(e){var n=e==="Comic Sans MS"?"Courier New":"Comic Sans MS";var i=t("<div>").css({position:"absolute",left:"-9999px",top:"-9999px",fontSize:"200px"}).text("mmmmmmmmmwwwwwww").appendTo(document.body);var o=i.css("fontFamily",n).width();var r=i.css("fontFamily",e+","+n).width();i.remove();return o!==r}var it=navigator.userAgent;var ot=/MSIE|Trident/i.test(it);var rt;if(ot){var st=/MSIE (\d+[.]\d+)/.exec(it);if(st){rt=parseFloat(st[1])}st=/Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(it);if(st){rt=parseFloat(st[1])}}var at=/Edge\/\d+/.test(it);var lt=!!window.CodeMirror;if(!lt&&et){if(typeof __webpack_require__==="function"){try{require.resolve("codemirror");lt=true}catch(t){}}else if(typeof require!=="undefined"){if(typeof require.resolve!=="undefined"){try{require.resolve("codemirror");lt=true}catch(t){}}else if(typeof require.specified!=="undefined"){lt=require.specified("codemirror")}}}var ut="ontouchstart"in window||navigator.MaxTouchPoints>0||navigator.msMaxTouchPoints>0;var ct=ot||at?"DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted":"input";var ft={isMac:navigator.appVersion.indexOf("Mac")>-1,isMSIE:ot,isEdge:at,isFF:!at&&/firefox/i.test(it),isPhantom:/PhantomJS/i.test(it),isWebkit:!at&&/webkit/i.test(it),isChrome:!at&&/chrome/i.test(it),isSafari:!at&&/safari/i.test(it),browserVersion:rt,jqueryVersion:parseFloat(t.fn.jquery),isSupportAmd:et,isSupportTouch:ut,hasCodeMirror:lt,isFontInstalled:nt,isW3CRangeSupport:!!document.createRange,inputEventName:ct};var dt=String.fromCharCode(160);var ht="\ufeff";function pt(e){return e&&t(e).hasClass("note-editable")}function vt(e){return e&&t(e).hasClass("note-control-sizing")}function mt(t){t=t.toUpperCase();return function(e){return e&&e.nodeName.toUpperCase()===t}}function gt(t){return t&&t.nodeType===3}function yt(t){return t&&t.nodeType===1}function bt(t){return t&&/^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT/.test(t.nodeName.toUpperCase())}function wt(t){if(pt(t)){return false}return t&&/^DIV|^P|^LI|^H[1-7]/.test(t.nodeName.toUpperCase())}function xt(t){return t&&/^H[1-7]/.test(t.nodeName.toUpperCase())}var Ct=mt("PRE");var kt=mt("LI");function Tt(t){return wt(t)&&!kt(t)}var St=mt("TABLE");var $t=mt("DATA");function Et(t){return!Rt(t)&&!Nt(t)&&!At(t)&&!wt(t)&&!St(t)&&!Dt(t)&&!$t(t)}function Nt(t){return t&&/^UL|^OL/.test(t.nodeName.toUpperCase())}var At=mt("HR");function It(t){return t&&/^TD|^TH/.test(t.nodeName.toUpperCase())}var Dt=mt("BLOCKQUOTE");function Rt(t){return It(t)||Dt(t)||pt(t)}var Lt=mt("A");function Ht(t){return Et(t)&&!!Ut(t,wt)}function Pt(t){return Et(t)&&!Ut(t,wt)}var Ft=mt("BODY");function jt(t,e){return t.nextSibling===e||t.previousSibling===e}function Ot(t,e){e=e||j.ok;var n=[];if(t.previousSibling&&e(t.previousSibling)){n.push(t.previousSibling)}n.push(t);if(t.nextSibling&&e(t.nextSibling)){n.push(t.nextSibling)}return n}var Mt=ft.isMSIE&&ft.browserVersion<11?"&nbsp;":"<br>";function Bt(t){if(gt(t)){return t.nodeValue.length}if(t){return t.childNodes.length}return 0}function zt(t){var e=Bt(t);if(e===0){return true}else if(!gt(t)&&e===1&&t.innerHTML===Mt){return true}else if(tt.all(t.childNodes,gt)&&t.innerHTML===""){return true}return false}function qt(t){if(!bt(t)&&!Bt(t)){t.innerHTML=Mt}}function Ut(t,e){while(t){if(e(t)){return t}if(pt(t)){break}t=t.parentNode}return null}function Wt(t,e){t=t.parentNode;while(t){if(Bt(t)!==1){break}if(e(t)){return t}if(pt(t)){break}t=t.parentNode}return null}function Vt(t,e){e=e||j.fail;var n=[];Ut(t,function(t){if(!pt(t)){n.push(t)}return e(t)});return n}function _t(t,e){var n=Vt(t);return tt.last(n.filter(e))}function Kt(e,n){var i=Vt(e);for(var o=n;o;o=o.parentNode){if(t.inArray(o,i)>-1){return o}}return null}function Gt(t,e){e=e||j.fail;var n=[];while(t){if(e(t)){break}n.push(t);t=t.previousSibling}return n}function Qt(t,e){e=e||j.fail;var n=[];while(t){if(e(t)){break}n.push(t);t=t.nextSibling}return n}function Xt(t,e){var n=[];e=e||j.ok;(function i(o){if(t!==o&&e(o)){n.push(o)}for(var r=0,s=o.childNodes.length;r<s;r++){i(o.childNodes[r])}})(t);return n}function Yt(e,n){var i=e.parentNode;var o=t("<"+n+">")[0];i.insertBefore(o,e);o.appendChild(e);return o}function Jt(t,e){var n=e.nextSibling;var i=e.parentNode;if(n){i.insertBefore(t,n)}else{i.appendChild(t)}return t}function Zt(e,n){t.each(n,function(t,n){e.appendChild(n)});return e}function te(t){return t.offset===0}function ee(t){return t.offset===Bt(t.node)}function ne(t){return te(t)||ee(t)}function ie(t,e){while(t&&t!==e){if(ae(t)!==0){return false}t=t.parentNode}return true}function oe(t,e){if(!e){return false}while(t&&t!==e){if(ae(t)!==Bt(t.parentNode)-1){return false}t=t.parentNode}return true}function re(t,e){return te(t)&&ie(t.node,e)}function se(t,e){return ee(t)&&oe(t.node,e)}function ae(t){var e=0;while(t=t.previousSibling){e+=1}return e}function le(t){return!!(t&&t.childNodes&&t.childNodes.length)}function ue(t,e){var n;var i;if(t.offset===0){if(pt(t.node)){return null}n=t.node.parentNode;i=ae(t.node)}else if(le(t.node)){n=t.node.childNodes[t.offset-1];i=Bt(n)}else{n=t.node;i=e?0:t.offset-1}return{node:n,offset:i}}function ce(t,e){var n,i;if(Bt(t.node)===t.offset){if(pt(t.node)){return null}n=t.node.parentNode;i=ae(t.node)+1}else if(le(t.node)){n=t.node.childNodes[t.offset];i=0}else{n=t.node;i=e?Bt(t.node):t.offset+1}return{node:n,offset:i}}function fe(t,e){return t.node===e.node&&t.offset===e.offset}function de(t){if(gt(t.node)||!le(t.node)||zt(t.node)){return true}var e=t.node.childNodes[t.offset-1];var n=t.node.childNodes[t.offset];if((!e||bt(e))&&(!n||bt(n))){return true}return false}function he(t,e){while(t){if(e(t)){return t}t=ue(t)}return null}function pe(t,e){while(t){if(e(t)){return t}t=ce(t)}return null}function ve(t){if(!gt(t.node)){return false}var e=t.node.nodeValue.charAt(t.offset-1);return e&&(e!==" "&&e!==dt)}function me(t,e,n,i){var o=t;while(o){n(o);if(fe(o,e)){break}var r=i&&t.node!==o.node&&e.node!==o.node;o=ce(o,r)}}function ge(t,e){var n=Vt(e,j.eq(t));return n.map(ae).reverse()}function ye(t,e){var n=t;for(var i=0,o=e.length;i<o;i++){if(n.childNodes.length<=e[i]){n=n.childNodes[n.childNodes.length-1]}else{n=n.childNodes[e[i]]}}return n}function be(t,e){var n=e&&e.isSkipPaddingBlankHTML;var i=e&&e.isNotSplitEdgePoint;if(ne(t)&&(gt(t.node)||i)){if(te(t)){return t.node}else if(ee(t)){return t.node.nextSibling}}if(gt(t.node)){return t.node.splitText(t.offset)}else{var o=t.node.childNodes[t.offset];var r=Jt(t.node.cloneNode(false),t.node);Zt(r,Qt(o));if(!n){qt(t.node);qt(r)}return r}}function we(t,e,n){var i=Vt(e.node,j.eq(t));if(!i.length){return null}else if(i.length===1){return be(e,n)}return i.reduce(function(t,i){if(t===e.node){t=be(e,n)}return be({node:i,offset:t?ae(t):Bt(i)},n)})}function xe(t,e){var n=e?wt:Rt;var i=Vt(t.node,n);var o=tt.last(i)||t.node;var r,s;if(n(o)){r=i[i.length-2];s=o}else{r=o;s=r.parentNode}var a=r&&we(r,t,{isSkipPaddingBlankHTML:e,isNotSplitEdgePoint:e});if(!a&&s===t.node){a=t.node.childNodes[t.offset]}return{rightNode:a,container:s}}function Ce(t){return document.createElement(t)}function ke(t){return document.createTextNode(t)}function Te(t,e){if(!t||!t.parentNode){return}if(t.removeNode){return t.removeNode(e)}var n=t.parentNode;if(!e){var i=[];for(var o=0,r=t.childNodes.length;o<r;o++){i.push(t.childNodes[o])}for(var o=0,r=i.length;o<r;o++){n.insertBefore(i[o],t)}}n.removeChild(t)}function Se(t,e){while(t){if(pt(t)||!e(t)){break}var n=t.parentNode;Te(t);t=n}}function $e(t,e){if(t.nodeName.toUpperCase()===e.toUpperCase()){return t}var n=Ce(e);if(t.style.cssText){n.style.cssText=t.style.cssText}Zt(n,tt.from(t.childNodes));Jt(n,t);Te(t);return n}var Ee=mt("TEXTAREA");function Ne(t,e){var n=Ee(t[0])?t.val():t.html();if(e){return n.replace(/[\n\r]/g,"")}return n}function Ae(e,n){var i=Ne(e);if(n){var o=/<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g;i=i.replace(o,function(t,e,n){n=n.toUpperCase();var i=/^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(n)&&!!e;var o=/^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(n);return t+(i||o?"\n":"")});i=t.trim(i)}return i}function Ie(e){var n=t(e);var i=n.offset();var o=n.outerHeight(true);return{left:i.left,top:i.top+o}}function De(t,e){Object.keys(e).forEach(function(n){t.on(n,e[n])})}function Re(t,e){Object.keys(e).forEach(function(n){t.off(n,e[n])})}function Le(t){return t&&!gt(t)&&tt.contains(t.classList,"note-styletag")}var He={NBSP_CHAR:dt,ZERO_WIDTH_NBSP_CHAR:ht,blank:Mt,emptyPara:"<p>"+Mt+"</p>",makePredByNodeName:mt,isEditable:pt,isControlSizing:vt,isText:gt,isElement:yt,isVoid:bt,isPara:wt,isPurePara:Tt,isHeading:xt,isInline:Et,isBlock:j.not(Et),isBodyInline:Pt,isBody:Ft,isParaInline:Ht,isPre:Ct,isList:Nt,isTable:St,isData:$t,isCell:It,isBlockquote:Dt,isBodyContainer:Rt,isAnchor:Lt,isDiv:mt("DIV"),isLi:kt,isBR:mt("BR"),isSpan:mt("SPAN"),isB:mt("B"),isU:mt("U"),isS:mt("S"),isI:mt("I"),isImg:mt("IMG"),isTextarea:Ee,isEmpty:zt,isEmptyAnchor:j.and(Lt,zt),isClosestSibling:jt,withClosestSiblings:Ot,nodeLength:Bt,isLeftEdgePoint:te,isRightEdgePoint:ee,isEdgePoint:ne,isLeftEdgeOf:ie,isRightEdgeOf:oe,isLeftEdgePointOf:re,isRightEdgePointOf:se,prevPoint:ue,nextPoint:ce,isSamePoint:fe,isVisiblePoint:de,prevPointUntil:he,nextPointUntil:pe,isCharPoint:ve,walkPoint:me,ancestor:Ut,singleChildAncestor:Wt,listAncestor:Vt,lastAncestor:_t,listNext:Qt,listPrev:Gt,listDescendant:Xt,commonAncestor:Kt,wrap:Yt,insertAfter:Jt,appendChildNodes:Zt,position:ae,hasChildren:le,makeOffsetPath:ge,fromOffsetPath:ye,splitTree:we,splitPoint:xe,create:Ce,createText:ke,remove:Te,removeWhile:Se,replace:$e,html:Ae,value:Ne,posFromPlaceholder:Ie,attachEvents:De,detachEvents:Re,isCustomStyleTag:Le};t.summernote=t.summernote||{lang:{}};t.extend(t.summernote.lang,{"en-US":{font:{bold:"Bold",italic:"Italic",underline:"Underline",clear:"Remove Font Style",height:"Line Height",name:"Font Family",strikethrough:"Strikethrough",subscript:"Subscript",superscript:"Superscript",size:"Font Size"},image:{image:"Picture",insert:"Insert Image",resizeFull:"Resize Full",resizeHalf:"Resize Half",resizeQuarter:"Resize Quarter",floatLeft:"Float Left",floatRight:"Float Right",floatNone:"Float None",shapeRounded:"Shape: Rounded",shapeCircle:"Shape: Circle",shapeThumbnail:"Shape: Thumbnail",shapeNone:"Shape: None",dragImageHere:"Drag image or text here",dropImage:"Drop image or Text",selectFromFiles:"Select from files",maximumFileSize:"Maximum file size",maximumFileSizeError:"Maximum file size exceeded.",url:"Image URL",remove:"Remove Image",original:"Original"},video:{video:"Video",videoLink:"Video Link",insert:"Insert Video",url:"Video URL",providers:"(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)"},link:{link:"Link",insert:"Insert Link",unlink:"Unlink",edit:"Edit",textToDisplay:"Text to display",url:"To what URL should this link go?",openInNewWindow:"Open in new window"},table:{table:"Table",addRowAbove:"Add row above",addRowBelow:"Add row below",addColLeft:"Add column left",addColRight:"Add column right",delRow:"Delete row",delCol:"Delete column",delTable:"Delete table"},hr:{insert:"Insert Horizontal Rule"},style:{style:"Style",p:"Normal",blockquote:"Quote",pre:"Code",h1:"Header 1",h2:"Header 2",h3:"Header 3",h4:"Header 4",h5:"Header 5",h6:"Header 6"},lists:{unordered:"Unordered list",ordered:"Ordered list"},options:{help:"Help",fullscreen:"Full Screen",codeview:"Code View"},paragraph:{paragraph:"Paragraph",outdent:"Outdent",indent:"Indent",left:"Align left",center:"Align center",right:"Align right",justify:"Justify full"},color:{recent:"Recent Color",more:"More Color",background:"Background Color",foreground:"Foreground Color",transparent:"Transparent",setTransparent:"Set transparent",reset:"Reset",resetToDefault:"Reset to default"},shortcut:{shortcuts:"Keyboard shortcuts",close:"Close",textFormatting:"Text formatting",action:"Action",paragraphFormatting:"Paragraph formatting",documentStyle:"Document Style",extraKeys:"Extra keys"},help:{insertParagraph:"Insert Paragraph",undo:"Undoes the last command",redo:"Redoes the last command",tab:"Tab",untab:"Untab",bold:"Set a bold style",italic:"Set a italic style",underline:"Set a underline style",strikethrough:"Set a strikethrough style",removeFormat:"Clean a style",justifyLeft:"Set left align",justifyCenter:"Set center align",justifyRight:"Set right align",justifyFull:"Set full align",insertUnorderedList:"Toggle unordered list",insertOrderedList:"Toggle ordered list",outdent:"Outdent on current paragraph",indent:"Indent on current paragraph",formatPara:"Change current block's format as a paragraph(P tag)",formatH1:"Change current block's format as H1",formatH2:"Change current block's format as H2",formatH3:"Change current block's format as H3",formatH4:"Change current block's format as H4",formatH5:"Change current block's format as H5",formatH6:"Change current block's format as H6",insertHorizontalRule:"Insert horizontal rule","linkDialog.show":"Show Link Dialog"},history:{undo:"Undo",redo:"Redo"},specialChar:{specialChar:"SPECIAL CHARACTERS",select:"Select Special characters"}}});var Pe={BACKSPACE:8,TAB:9,ENTER:13,SPACE:32,DELETE:46,LEFT:37,UP:38,RIGHT:39,DOWN:40,NUM0:48,NUM1:49,NUM2:50,NUM3:51,NUM4:52,NUM5:53,NUM6:54,NUM7:55,NUM8:56,B:66,E:69,I:73,J:74,K:75,L:76,R:82,S:83,U:85,V:86,Y:89,Z:90,SLASH:191,LEFTBRACKET:219,BACKSLASH:220,RIGHTBRACKET:221};var Fe={isEdit:function(t){return tt.contains([Pe.BACKSPACE,Pe.TAB,Pe.ENTER,Pe.SPACE,Pe.DELETE],t)},isMove:function(t){return tt.contains([Pe.LEFT,Pe.UP,Pe.RIGHT,Pe.DOWN],t)},nameFromCode:j.invertObject(Pe),code:Pe};function je(t,e){var n=t.parentElement();var i;var o=document.body.createTextRange();var r;var s=tt.from(n.childNodes);for(i=0;i<s.length;i++){if(He.isText(s[i])){continue}o.moveToElementText(s[i]);if(o.compareEndPoints("StartToStart",t)>=0){break}r=s[i]}if(i!==0&&He.isText(s[i-1])){var a=document.body.createTextRange();var l=null;a.moveToElementText(r||n);a.collapse(!r);l=r?r.nextSibling:n.firstChild;var u=t.duplicate();u.setEndPoint("StartToStart",a);var c=u.text.replace(/[\r\n]/g,"").length;while(c>l.nodeValue.length&&l.nextSibling){c-=l.nodeValue.length;l=l.nextSibling}var f=l.nodeValue;if(e&&l.nextSibling&&He.isText(l.nextSibling)&&c===l.nodeValue.length){c-=l.nodeValue.length;l=l.nextSibling}n=l;i=c}return{cont:n,offset:i}}function Oe(t){var e=function(t,n){var i,o;if(He.isText(t)){var r=He.listPrev(t,j.not(He.isText));var s=tt.last(r).previousSibling;i=s||t.parentNode;n+=tt.sum(tt.tail(r),He.nodeLength);o=!s}else{i=t.childNodes[n]||t;if(He.isText(i)){return e(i,0)}n=0;o=false}return{node:i,collapseToStart:o,offset:n}};var n=document.body.createTextRange();var i=e(t.node,t.offset);n.moveToElementText(i.node);n.collapse(i.collapseToStart);n.moveStart("character",i.offset);return n}var Me=function(){function e(t,e,n,i){this.sc=t;this.so=e;this.ec=n;this.eo=i;this.isOnEditable=this.makeIsOn(He.isEditable);this.isOnList=this.makeIsOn(He.isList);this.isOnAnchor=this.makeIsOn(He.isAnchor);this.isOnCell=this.makeIsOn(He.isCell);this.isOnData=this.makeIsOn(He.isData)}e.prototype.nativeRange=function(){if(ft.isW3CRangeSupport){var t=document.createRange();t.setStart(this.sc,this.so);t.setEnd(this.ec,this.eo);return t}else{var e=Oe({node:this.sc,offset:this.so});e.setEndPoint("EndToEnd",Oe({node:this.ec,offset:this.eo}));return e}};e.prototype.getPoints=function(){return{sc:this.sc,so:this.so,ec:this.ec,eo:this.eo}};e.prototype.getStartPoint=function(){return{node:this.sc,offset:this.so}};e.prototype.getEndPoint=function(){return{node:this.ec,offset:this.eo}};e.prototype.select=function(){var t=this.nativeRange();if(ft.isW3CRangeSupport){var e=document.getSelection();if(e.rangeCount>0){e.removeAllRanges()}e.addRange(t)}else{t.select()}return this};e.prototype.scrollIntoView=function(e){var n=t(e).height();if(e.scrollTop+n<this.sc.offsetTop){e.scrollTop+=Math.abs(e.scrollTop+n-this.sc.offsetTop)}return this};e.prototype.normalize=function(){var t=function(t,e){if(He.isVisiblePoint(t)&&!He.isEdgePoint(t)||He.isVisiblePoint(t)&&He.isRightEdgePoint(t)&&!e||He.isVisiblePoint(t)&&He.isLeftEdgePoint(t)&&e||He.isVisiblePoint(t)&&He.isBlock(t.node)&&He.isEmpty(t.node)){return t}var n=He.ancestor(t.node,He.isBlock);if((He.isLeftEdgePointOf(t,n)||He.isVoid(He.prevPoint(t).node))&&!e||(He.isRightEdgePointOf(t,n)||He.isVoid(He.nextPoint(t).node))&&e){if(He.isVisiblePoint(t)){return t}e=!e}var i=e?He.nextPointUntil(He.nextPoint(t),He.isVisiblePoint):He.prevPointUntil(He.prevPoint(t),He.isVisiblePoint);return i||t};var n=t(this.getEndPoint(),false);var i=this.isCollapsed()?n:t(this.getStartPoint(),true);return new e(i.node,i.offset,n.node,n.offset)};e.prototype.nodes=function(t,e){t=t||j.ok;var n=e&&e.includeAncestor;var i=e&&e.fullyContains;var o=this.getStartPoint();var r=this.getEndPoint();var s=[];var a=[];He.walkPoint(o,r,function(e){if(He.isEditable(e.node)){return}var o;if(i){if(He.isLeftEdgePoint(e)){a.push(e.node)}if(He.isRightEdgePoint(e)&&tt.contains(a,e.node)){o=e.node}}else if(n){o=He.ancestor(e.node,t)}else{o=e.node}if(o&&t(o)){s.push(o)}},true);return tt.unique(s)};e.prototype.commonAncestor=function(){return He.commonAncestor(this.sc,this.ec)};e.prototype.expand=function(t){var n=He.ancestor(this.sc,t);var i=He.ancestor(this.ec,t);if(!n&&!i){return new e(this.sc,this.so,this.ec,this.eo)}var o=this.getPoints();if(n){o.sc=n;o.so=0}if(i){o.ec=i;o.eo=He.nodeLength(i)}return new e(o.sc,o.so,o.ec,o.eo)};e.prototype.collapse=function(t){if(t){return new e(this.sc,this.so,this.sc,this.so)}else{return new e(this.ec,this.eo,this.ec,this.eo)}};e.prototype.splitText=function(){var t=this.sc===this.ec;var n=this.getPoints();if(He.isText(this.ec)&&!He.isEdgePoint(this.getEndPoint())){this.ec.splitText(this.eo)}if(He.isText(this.sc)&&!He.isEdgePoint(this.getStartPoint())){n.sc=this.sc.splitText(this.so);n.so=0;if(t){n.ec=n.sc;n.eo=this.eo-this.so}}return new e(n.sc,n.so,n.ec,n.eo)};e.prototype.deleteContents=function(){if(this.isCollapsed()){return this}var n=this.splitText();var i=n.nodes(null,{fullyContains:true});var o=He.prevPointUntil(n.getStartPoint(),function(t){return!tt.contains(i,t.node)});var r=[];t.each(i,function(t,e){var n=e.parentNode;if(o.node!==n&&He.nodeLength(n)===1){r.push(n)}He.remove(e,false)});t.each(r,function(t,e){He.remove(e,false)});return new e(o.node,o.offset,o.node,o.offset).normalize()};e.prototype.makeIsOn=function(t){return function(){var e=He.ancestor(this.sc,t);return!!e&&e===He.ancestor(this.ec,t)}};e.prototype.isLeftEdgeOf=function(t){if(!He.isLeftEdgePoint(this.getStartPoint())){return false}var e=He.ancestor(this.sc,t);return e&&He.isLeftEdgeOf(this.sc,e)};e.prototype.isCollapsed=function(){return this.sc===this.ec&&this.so===this.eo};e.prototype.wrapBodyInlineWithPara=function(){if(He.isBodyContainer(this.sc)&&He.isEmpty(this.sc)){this.sc.innerHTML=He.emptyPara;return new e(this.sc.firstChild,0,this.sc.firstChild,0)}var t=this.normalize();if(He.isParaInline(this.sc)||He.isPara(this.sc)){return t}var n;if(He.isInline(t.sc)){var i=He.listAncestor(t.sc,j.not(He.isInline));n=tt.last(i);if(!He.isInline(n)){n=i[i.length-2]||t.sc.childNodes[t.so]}}else{n=t.sc.childNodes[t.so>0?t.so-1:0]}var o=He.listPrev(n,He.isParaInline).reverse();o=o.concat(He.listNext(n.nextSibling,He.isParaInline));if(o.length){var r=He.wrap(tt.head(o),"p");He.appendChildNodes(r,tt.tail(o))}return this.normalize()};e.prototype.insertNode=function(t){var e=this.wrapBodyInlineWithPara().deleteContents();var n=He.splitPoint(e.getStartPoint(),He.isInline(t));if(n.rightNode){n.rightNode.parentNode.insertBefore(t,n.rightNode)}else{n.container.appendChild(t)}return t};e.prototype.pasteHTML=function(e){var n=t("<div></div>").html(e)[0];var i=tt.from(n.childNodes);var o=this.wrapBodyInlineWithPara().deleteContents();return i.reverse().map(function(t){return o.insertNode(t)}).reverse()};e.prototype.toString=function(){var t=this.nativeRange();return ft.isW3CRangeSupport?t.toString():t.text};e.prototype.getWordRange=function(t){var n=this.getEndPoint();if(!He.isCharPoint(n)){return this}var i=He.prevPointUntil(n,function(t){return!He.isCharPoint(t)});if(t){n=He.nextPointUntil(n,function(t){return!He.isCharPoint(t)})}return new e(i.node,i.offset,n.node,n.offset)};e.prototype.bookmark=function(t){return{s:{path:He.makeOffsetPath(t,this.sc),offset:this.so},e:{path:He.makeOffsetPath(t,this.ec),offset:this.eo}}};e.prototype.paraBookmark=function(t){return{s:{path:tt.tail(He.makeOffsetPath(tt.head(t),this.sc)),offset:this.so},e:{path:tt.tail(He.makeOffsetPath(tt.last(t),this.ec)),offset:this.eo}}};e.prototype.getClientRects=function(){var t=this.nativeRange();return t.getClientRects()};return e}();var Be={create:function(t,e,n,i){if(arguments.length===4){return new Me(t,e,n,i)}else if(arguments.length===2){n=t;i=e;return new Me(t,e,n,i)}else{var o=this.createFromSelection();if(!o&&arguments.length===1){o=this.createFromNode(arguments[0]);return o.collapse(He.emptyPara===arguments[0].innerHTML)}return o}},createFromSelection:function(){var t,e,n,i;if(ft.isW3CRangeSupport){var o=document.getSelection();if(!o||o.rangeCount===0){return null}else if(He.isBody(o.anchorNode)){return null}var r=o.getRangeAt(0);t=r.startContainer;e=r.startOffset;n=r.endContainer;i=r.endOffset}else{var s=document.selection.createRange();var a=s.duplicate();a.collapse(false);var l=s;l.collapse(true);var u=je(l,true);var c=je(a,false);if(He.isText(u.node)&&He.isLeftEdgePoint(u)&&He.isTextNode(c.node)&&He.isRightEdgePoint(c)&&c.node.nextSibling===u.node){u=c}t=u.cont;e=u.offset;n=c.cont;i=c.offset}return new Me(t,e,n,i)},createFromNode:function(t){var e=t;var n=0;var i=t;var o=He.nodeLength(i);if(He.isVoid(e)){n=He.listPrev(e).length-1;e=e.parentNode}if(He.isBR(i)){o=He.listPrev(i).length-1;i=i.parentNode}else if(He.isVoid(i)){o=He.listPrev(i).length;i=i.parentNode}return this.create(e,n,i,o)},createFromNodeBefore:function(t){return this.createFromNode(t).collapse(true)},createFromNodeAfter:function(t){return this.createFromNode(t).collapse()},createFromBookmark:function(t,e){var n=He.fromOffsetPath(t,e.s.path);var i=e.s.offset;var o=He.fromOffsetPath(t,e.e.path);var r=e.e.offset;return new Me(n,i,o,r)},createFromParaBookmark:function(t,e){var n=t.s.offset;var i=t.e.offset;var o=He.fromOffsetPath(tt.head(e),t.s.path);var r=He.fromOffsetPath(tt.last(e),t.e.path);return new Me(o,n,r,i)}};function ze(e){return t.Deferred(function(n){t.extend(new FileReader,{onload:function(t){var e=t.target.result;n.resolve(e)},onerror:function(t){n.reject(t)}}).readAsDataURL(e)}).promise()}function qe(e){return t.Deferred(function(n){var i=t("<img>");i.one("load",function(){i.off("error abort");n.resolve(i)}).one("error abort",function(){i.off("load").detach();n.reject(i)}).css({display:"none"}).appendTo(document.body).attr("src",e)}).promise()}var Ue=function(){function t(t){this.stack=[];this.stackOffset=-1;this.$editable=t;this.editable=t[0]}t.prototype.makeSnapshot=function(){var t=Be.create(this.editable);var e={s:{path:[],offset:0},e:{path:[],offset:0}};return{contents:this.$editable.html(),bookmark:t?t.bookmark(this.editable):e}};t.prototype.applySnapshot=function(t){if(t.contents!==null){this.$editable.html(t.contents)}if(t.bookmark!==null){Be.createFromBookmark(this.editable,t.bookmark).select()}};t.prototype.rewind=function(){if(this.$editable.html()!==this.stack[this.stackOffset].contents){this.recordUndo()}this.stackOffset=0;this.applySnapshot(this.stack[this.stackOffset])};t.prototype.reset=function(){this.stack=[];this.stackOffset=-1;this.$editable.html("");this.recordUndo()};t.prototype.undo=function(){if(this.$editable.html()!==this.stack[this.stackOffset].contents){this.recordUndo()}if(this.stackOffset>0){this.stackOffset--;this.applySnapshot(this.stack[this.stackOffset])}};t.prototype.redo=function(){if(this.stack.length-1>this.stackOffset){this.stackOffset++;this.applySnapshot(this.stack[this.stackOffset])}};t.prototype.recordUndo=function(){this.stackOffset++;if(this.stack.length>this.stackOffset){this.stack=this.stack.slice(0,this.stackOffset)}this.stack.push(this.makeSnapshot())};return t}();var We=function(){function e(){}e.prototype.jQueryCSS=function(e,n){if(ft.jqueryVersion<1.9){var i={};t.each(n,function(t,n){i[n]=e.css(n)});return i}return e.css(n)};e.prototype.fromNode=function(t){var e=["font-family","font-size","text-align","list-style-type","line-height"];var n=this.jQueryCSS(t,e)||{};n["font-size"]=parseInt(n["font-size"],10);return n};e.prototype.stylePara=function(e,n){t.each(e.nodes(He.isPara,{includeAncestor:true}),function(e,i){t(i).css(n)})};e.prototype.styleNodes=function(e,n){e=e.splitText();var i=n&&n.nodeName||"SPAN";var o=!!(n&&n.expandClosestSibling);var r=!!(n&&n.onlyPartialContains);if(e.isCollapsed()){return[e.insertNode(He.create(i))]}var s=He.makePredByNodeName(i);var a=e.nodes(He.isText,{fullyContains:true}).map(function(t){return He.singleChildAncestor(t,s)||He.wrap(t,i)});if(o){if(r){var l=e.nodes();s=j.and(s,function(t){return tt.contains(l,t)})}return a.map(function(e){var n=He.withClosestSiblings(e,s);var i=tt.head(n);var o=tt.tail(n);t.each(o,function(t,e){He.appendChildNodes(i,e.childNodes);He.remove(e)});return tt.head(n)})}else{return a}};e.prototype.current=function(e){var n=t(!He.isElement(e.sc)?e.sc.parentNode:e.sc);var i=this.fromNode(n);try{i=t.extend(i,{"font-bold":document.queryCommandState("bold")?"bold":"normal","font-italic":document.queryCommandState("italic")?"italic":"normal","font-underline":document.queryCommandState("underline")?"underline":"normal","font-subscript":document.queryCommandState("subscript")?"subscript":"normal","font-superscript":document.queryCommandState("superscript")?"superscript":"normal","font-strikethrough":document.queryCommandState("strikethrough")?"strikethrough":"normal","font-family":document.queryCommandValue("fontname")||i["font-family"]})}catch(t){}if(!e.isOnList()){i["list-style"]="none"}else{var o=["circle","disc","disc-leading-zero","square"];var r=t.inArray(i["list-style-type"],o)>-1;i["list-style"]=r?"unordered":"ordered"}var s=He.ancestor(e.sc,He.isPara);if(s&&s.style["line-height"]){i["line-height"]=s.style.lineHeight}else{var a=parseInt(i["line-height"],10)/parseInt(i["font-size"],10);i["line-height"]=a.toFixed(1)}i.anchor=e.isOnAnchor()&&He.ancestor(e.sc,He.isAnchor);i.ancestors=He.listAncestor(e.sc,He.isEditable);i.range=e;return i};return e}();var Ve=function(){function e(){}e.prototype.insertOrderedList=function(t){this.toggleList("OL",t)};e.prototype.insertUnorderedList=function(t){this.toggleList("UL",t)};e.prototype.indent=function(e){var n=this;var i=Be.create(e).wrapBodyInlineWithPara();var o=i.nodes(He.isPara,{includeAncestor:true});var r=tt.clusterBy(o,j.peq2("parentNode"));t.each(r,function(e,i){var o=tt.head(i);if(He.isLi(o)){n.wrapList(i,o.parentNode.nodeName)}else{t.each(i,function(e,n){t(n).css("marginLeft",function(t,e){return(parseInt(e,10)||0)+25})})}});i.select()};e.prototype.outdent=function(e){var n=this;var i=Be.create(e).wrapBodyInlineWithPara();var o=i.nodes(He.isPara,{includeAncestor:true});var r=tt.clusterBy(o,j.peq2("parentNode"));t.each(r,function(e,i){var o=tt.head(i);if(He.isLi(o)){n.releaseList([i])}else{t.each(i,function(e,n){t(n).css("marginLeft",function(t,e){e=parseInt(e,10)||0;return e>25?e-25:""})})}});i.select()};e.prototype.toggleList=function(e,n){var i=this;var o=Be.create(n).wrapBodyInlineWithPara();var r=o.nodes(He.isPara,{includeAncestor:true});var s=o.paraBookmark(r);var a=tt.clusterBy(r,j.peq2("parentNode"));if(tt.find(r,He.isPurePara)){var l=[];t.each(a,function(t,n){l=l.concat(i.wrapList(n,e))});r=l}else{var u=o.nodes(He.isList,{includeAncestor:true}).filter(function(n){return!t.nodeName(n,e)});if(u.length){t.each(u,function(t,n){He.replace(n,e)})}else{r=this.releaseList(a,true)}}Be.createFromParaBookmark(s,r).select()};e.prototype.wrapList=function(t,e){var n=tt.head(t);var i=tt.last(t);var o=He.isList(n.previousSibling)&&n.previousSibling;var r=He.isList(i.nextSibling)&&i.nextSibling;var s=o||He.insertAfter(He.create(e||"UL"),i);t=t.map(function(t){return He.isPurePara(t)?He.replace(t,"LI"):t});He.appendChildNodes(s,t);if(r){He.appendChildNodes(s,tt.from(r.childNodes));He.remove(r)}return t};e.prototype.releaseList=function(e,n){var i=[];t.each(e,function(e,o){var r=tt.head(o);var s=tt.last(o);var a=n?He.lastAncestor(r,He.isList):r.parentNode;var l=a.childNodes.length>1?He.splitTree(a,{node:s.parentNode,offset:He.position(s)+1},{isSkipPaddingBlankHTML:true}):null;var u=He.splitTree(a,{node:r.parentNode,offset:He.position(r)},{isSkipPaddingBlankHTML:true});o=n?He.listDescendant(u,He.isLi):tt.from(u.childNodes).filter(He.isLi);if(n||!He.isList(a.parentNode)){o=o.map(function(t){return He.replace(t,"P")})}t.each(tt.from(o).reverse(),function(t,e){He.insertAfter(e,a)});var c=tt.compact([a,u,l]);t.each(c,function(e,n){var i=[n].concat(He.listDescendant(n,He.isList));t.each(i.reverse(),function(t,e){if(!He.nodeLength(e)){He.remove(e,true)}})});i=i.concat(o)});return i};return e}();var _e=function(){function e(){this.bullet=new Ve}e.prototype.insertTab=function(t,e){var n=He.createText(new Array(e+1).join(He.NBSP_CHAR));t=t.deleteContents();t.insertNode(n,true);t=Be.create(n,e);t.select()};e.prototype.insertParagraph=function(e){var n=Be.create(e);n=n.deleteContents();n=n.wrapBodyInlineWithPara();var i=He.ancestor(n.sc,He.isPara);var o;if(i){if(He.isEmpty(i)&&He.isLi(i)){this.bullet.toggleList(i.parentNode.nodeName);return}else if(He.isEmpty(i)&&He.isPara(i)&&He.isBlockquote(i.parentNode)){He.insertAfter(i,i.parentNode);o=i}else{o=He.splitTree(i,n.getStartPoint());var r=He.listDescendant(i,He.isEmptyAnchor);r=r.concat(He.listDescendant(o,He.isEmptyAnchor));t.each(r,function(t,e){He.remove(e)});if((He.isHeading(o)||He.isPre(o)||He.isCustomStyleTag(o))&&He.isEmpty(o)){o=He.replace(o,"p")}}}else{var s=n.sc.childNodes[n.so];o=t(He.emptyPara)[0];if(s){n.sc.insertBefore(o,s)}else{n.sc.appendChild(o)}}Be.create(o,0).normalize().select().scrollIntoView(e)};return e}();var Ke=function(t,e,n,i){var o={colPos:0,rowPos:0};var r=[];var s=[];function a(){if(!t||!t.tagName||t.tagName.toLowerCase()!=="td"&&t.tagName.toLowerCase()!=="th"){console.error("Impossible to identify start Cell point.",t);return}o.colPos=t.cellIndex;if(!t.parentElement||!t.parentElement.tagName||t.parentElement.tagName.toLowerCase()!=="tr"){console.error("Impossible to identify start Row point.",t);return}o.rowPos=t.parentElement.rowIndex}function l(t,e,n,i,o,s,a){var l={baseRow:n,baseCell:i,isRowSpan:o,isColSpan:s,isVirtual:a};if(!r[t]){r[t]=[]}r[t][e]=l}function u(t,e,n,i){return{baseCell:t.baseCell,action:e,virtualTable:{rowIndex:n,cellIndex:i}}}function c(t,e){if(!r[t]){return e}if(!r[t][e]){return e}var n=e;while(r[t][n]){n++;if(!r[t][n]){return n}}}function f(t,e){var n=c(t.rowIndex,e.cellIndex);var i=e.colSpan>1;var r=e.rowSpan>1;var s=t.rowIndex===o.rowPos&&e.cellIndex===o.colPos;l(t.rowIndex,n,t,e,r,i,false);var a=e.attributes.rowSpan?parseInt(e.attributes.rowSpan.value,10):0;if(a>1){for(var u=1;u<a;u++){var f=t.rowIndex+u;d(f,n,e,s);l(f,n,t,e,true,i,true)}}var h=e.attributes.colSpan?parseInt(e.attributes.colSpan.value,10):0;if(h>1){for(var p=1;p<h;p++){var v=c(t.rowIndex,n+p);d(t.rowIndex,v,e,s);l(t.rowIndex,v,t,e,r,true,true)}}}function d(t,e,n,i){if(t===o.rowPos&&o.colPos>=n.cellIndex&&n.cellIndex<=e&&!i){o.colPos++}}function h(){var t=i.rows;for(var e=0;e<t.length;e++){var n=t[e].cells;for(var o=0;o<n.length;o++){f(t[e],n[o])}}}function p(t){switch(e){case Ke.where.Column:if(t.isColSpan){return Ke.resultAction.SubtractSpanCount}break;case Ke.where.Row:if(!t.isVirtual&&t.isRowSpan){return Ke.resultAction.AddCell}else if(t.isRowSpan){return Ke.resultAction.SubtractSpanCount}break}return Ke.resultAction.RemoveCell}function v(t){switch(e){case Ke.where.Column:if(t.isColSpan){return Ke.resultAction.SumSpanCount}else if(t.isRowSpan&&t.isVirtual){return Ke.resultAction.Ignore}break;case Ke.where.Row:if(t.isRowSpan){return Ke.resultAction.SumSpanCount}else if(t.isColSpan&&t.isVirtual){return Ke.resultAction.Ignore}break}return Ke.resultAction.AddCell}function m(){a();h()}this.getActionList=function(){var t=e===Ke.where.Row?o.rowPos:-1;var i=e===Ke.where.Column?o.colPos:-1;var a=0;var l=true;while(l){var c=t>=0?t:a;var f=i>=0?i:a;var d=r[c];if(!d){l=false;return s}var h=d[f];if(!h){l=false;return s}var m=Ke.resultAction.Ignore;switch(n){case Ke.requestAction.Add:m=v(h);break;case Ke.requestAction.Delete:m=p(h);break}s.push(u(h,m,c,f));a++}return s};m()};Ke.where={Row:0,Column:1};Ke.requestAction={Add:0,Delete:1};Ke.resultAction={Ignore:0,SubtractSpanCount:1,RemoveCell:2,AddCell:3,SumSpanCount:4};var Ge=function(){function e(){}e.prototype.tab=function(t,e){var n=He.ancestor(t.commonAncestor(),He.isCell);var i=He.ancestor(n,He.isTable);var o=He.listDescendant(i,He.isCell);var r=tt[e?"prev":"next"](o,n);if(r){Be.create(r,0).select()}};e.prototype.addRow=function(e,n){var i=He.ancestor(e.commonAncestor(),He.isCell);var o=t(i).closest("tr");var r=this.recoverAttributes(o);var s=t("<tr"+r+"></tr>");var a=new Ke(i,Ke.where.Row,Ke.requestAction.Add,t(o).closest("table")[0]);var l=a.getActionList();for(var u=0;u<l.length;u++){var c=l[u];var f=this.recoverAttributes(c.baseCell);switch(c.action){case Ke.resultAction.AddCell:s.append("<td"+f+">"+He.blank+"</td>");break;case Ke.resultAction.SumSpanCount:if(n==="top"){var d=c.baseCell.parent;var h=(!d?0:c.baseCell.closest("tr").rowIndex)<=o[0].rowIndex;if(h){var p=t("<div></div>").append(t("<td"+f+">"+He.blank+"</td>").removeAttr("rowspan")).html();s.append(p);break}}var v=parseInt(c.baseCell.rowSpan,10);v++;c.baseCell.setAttribute("rowSpan",v);break}}if(n==="top"){o.before(s)}else{var m=i.rowSpan>1;if(m){var g=o[0].rowIndex+(i.rowSpan-2);t(t(o).parent().find("tr")[g]).after(t(s));return}o.after(s)}};e.prototype.addCol=function(e,n){var i=He.ancestor(e.commonAncestor(),He.isCell);var o=t(i).closest("tr");var r=t(o).siblings();r.push(o);var s=new Ke(i,Ke.where.Column,Ke.requestAction.Add,t(o).closest("table")[0]);var a=s.getActionList();for(var l=0;l<a.length;l++){var u=a[l];var c=this.recoverAttributes(u.baseCell);switch(u.action){case Ke.resultAction.AddCell:if(n==="right"){t(u.baseCell).after("<td"+c+">"+He.blank+"</td>")}else{t(u.baseCell).before("<td"+c+">"+He.blank+"</td>")}break;case Ke.resultAction.SumSpanCount:if(n==="right"){var f=parseInt(u.baseCell.colSpan,10);f++;u.baseCell.setAttribute("colSpan",f)}else{t(u.baseCell).before("<td"+c+">"+He.blank+"</td>")}break}}};e.prototype.recoverAttributes=function(t){var e="";if(!t){return e}var n=t.attributes||[];for(var i=0;i<n.length;i++){if(n[i].name.toLowerCase()==="id"){continue}if(n[i].specified){e+=" "+n[i].name+"='"+n[i].value+"'"}}return e};e.prototype.deleteRow=function(e){var n=He.ancestor(e.commonAncestor(),He.isCell);var i=t(n).closest("tr");var o=i.children("td, th").index(t(n));var r=i[0].rowIndex;var s=new Ke(n,Ke.where.Row,Ke.requestAction.Delete,t(i).closest("table")[0]);var a=s.getActionList();for(var l=0;l<a.length;l++){if(!a[l]){continue}var u=a[l].baseCell;var c=a[l].virtualTable;var f=u.rowSpan&&u.rowSpan>1;var d=f?parseInt(u.rowSpan,10):0;switch(a[l].action){case Ke.resultAction.Ignore:continue;case Ke.resultAction.AddCell:var h=i.next("tr")[0];if(!h){continue}var p=i[0].cells[o];if(f){if(d>2){d--;h.insertBefore(p,h.cells[o]);h.cells[o].setAttribute("rowSpan",d);h.cells[o].innerHTML=""}else if(d===2){h.insertBefore(p,h.cells[o]);h.cells[o].removeAttribute("rowSpan");h.cells[o].innerHTML=""}}continue;case Ke.resultAction.SubtractSpanCount:if(f){if(d>2){d--;u.setAttribute("rowSpan",d);if(c.rowIndex!==r&&u.cellIndex===o){u.innerHTML=""}}else if(d===2){u.removeAttribute("rowSpan");if(c.rowIndex!==r&&u.cellIndex===o){u.innerHTML=""}}}continue;case Ke.resultAction.RemoveCell:continue}}i.remove()};e.prototype.deleteCol=function(e){var n=He.ancestor(e.commonAncestor(),He.isCell);var i=t(n).closest("tr");var o=i.children("td, th").index(t(n));var r=new Ke(n,Ke.where.Column,Ke.requestAction.Delete,t(i).closest("table")[0]);var s=r.getActionList();for(var a=0;a<s.length;a++){if(!s[a]){continue}switch(s[a].action){case Ke.resultAction.Ignore:continue;case Ke.resultAction.SubtractSpanCount:var l=s[a].baseCell;var u=l.colSpan&&l.colSpan>1;if(u){var c=l.colSpan?parseInt(l.colSpan,10):0;if(c>2){c--;l.setAttribute("colSpan",c);if(l.cellIndex===o){l.innerHTML=""}}else if(c===2){l.removeAttribute("colSpan");if(l.cellIndex===o){l.innerHTML=""}}}continue;case Ke.resultAction.RemoveCell:He.remove(s[a].baseCell,true);continue}}};e.prototype.createTable=function(e,n,i){var o=[];var r;for(var s=0;s<e;s++){o.push("<td>"+He.blank+"</td>")}r=o.join("");var a=[];var l;for(var u=0;u<n;u++){a.push("<tr>"+r+"</tr>")}l=a.join("");var c=t("<table>"+l+"</table>");if(i&&i.tableClassName){c.addClass(i.tableClassName)}return c[0]};e.prototype.deleteTable=function(e){var n=He.ancestor(e.commonAncestor(),He.isCell);t(n).closest("table").remove()};return e}();var Qe="bogus";var Xe=function(){function e(e){var n=this;this.context=e;this.$note=e.layoutInfo.note;this.$editor=e.layoutInfo.editor;this.$editable=e.layoutInfo.editable;this.options=e.options;this.lang=this.options.langInfo;this.editable=this.$editable[0];this.lastRange=null;this.style=new We;this.table=new Ge;this.typing=new _e;this.bullet=new Ve;this.history=new Ue(this.$editable);this.context.memo("help.undo",this.lang.help.undo);this.context.memo("help.redo",this.lang.help.redo);this.context.memo("help.tab",this.lang.help.tab);this.context.memo("help.untab",this.lang.help.untab);this.context.memo("help.insertParagraph",this.lang.help.insertParagraph);this.context.memo("help.insertOrderedList",this.lang.help.insertOrderedList);this.context.memo("help.insertUnorderedList",this.lang.help.insertUnorderedList);this.context.memo("help.indent",this.lang.help.indent);this.context.memo("help.outdent",this.lang.help.outdent);this.context.memo("help.formatPara",this.lang.help.formatPara);this.context.memo("help.insertHorizontalRule",this.lang.help.insertHorizontalRule);this.context.memo("help.fontName",this.lang.help.fontName);var i=["bold","italic","underline","strikethrough","superscript","subscript","justifyLeft","justifyCenter","justifyRight","justifyFull","formatBlock","removeFormat","backColor"];for(var o=0,r=i.length;o<r;o++){this[i[o]]=function(t){return function(e){n.beforeCommand();document.execCommand(t,false,e);n.afterCommand(true)}}(i[o]);this.context.memo("help."+i[o],this.lang.help[i[o]])}this.fontName=this.wrapCommand(function(t){return n.fontStyling("font-family","'"+t+"'")});this.fontSize=this.wrapCommand(function(t){return n.fontStyling("font-size",t+"px")});for(var o=1;o<=6;o++){this["formatH"+o]=function(t){return function(){n.formatBlock("H"+t)}}(o);this.context.memo("help.formatH"+o,this.lang.help["formatH"+o])}this.insertParagraph=this.wrapCommand(function(){n.typing.insertParagraph(n.editable)});this.insertOrderedList=this.wrapCommand(function(){n.bullet.insertOrderedList(n.editable)});this.insertUnorderedList=this.wrapCommand(function(){n.bullet.insertUnorderedList(n.editable)});this.indent=this.wrapCommand(function(){n.bullet.indent(n.editable)});this.outdent=this.wrapCommand(function(){n.bullet.outdent(n.editable)});this.insertNode=this.wrapCommand(function(e){if(n.isLimited(t(e).text().length)){return}var i=n.createRange();i.insertNode(e);Be.createFromNodeAfter(e).select()});this.insertText=this.wrapCommand(function(t){if(n.isLimited(t.length)){return}var e=n.createRange();var i=e.insertNode(He.createText(t));Be.create(i,He.nodeLength(i)).select()});this.pasteHTML=this.wrapCommand(function(t){if(n.isLimited(t.length)){return}var e=n.createRange().pasteHTML(t);Be.createFromNodeAfter(tt.last(e)).select()});this.formatBlock=this.wrapCommand(function(t,e){var i=n.options.callbacks.onApplyCustomStyle;if(i){i.call(n,e,n.context,n.onFormatBlock)}else{n.onFormatBlock(t,e)}});this.insertHorizontalRule=this.wrapCommand(function(){var t=n.createRange().insertNode(He.create("HR"));if(t.nextSibling){Be.create(t.nextSibling,0).normalize().select()}});this.lineHeight=this.wrapCommand(function(t){n.style.stylePara(n.createRange(),{lineHeight:t})});this.createLink=this.wrapCommand(function(e){var i=e.url;var o=e.text;var r=e.isNewWindow;var s=e.range||n.createRange();var a=s.toString()!==o;if(typeof i==="string"){i=i.trim()}if(n.options.onCreateLink){i=n.options.onCreateLink(i)}else{i=/^[A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?/.test(i)?i:"http://"+i}var l=[];if(a){s=s.deleteContents();var u=s.insertNode(t("<A>"+o+"</A>")[0]);l.push(u)}else{l=n.style.styleNodes(s,{nodeName:"A",expandClosestSibling:true,onlyPartialContains:true})}t.each(l,function(e,n){t(n).attr("href",i);if(r){t(n).attr("target","_blank")}else{t(n).removeAttr("target")}});var c=Be.createFromNodeBefore(tt.head(l));var f=c.getStartPoint();var d=Be.createFromNodeAfter(tt.last(l));var h=d.getEndPoint();Be.create(f.node,f.offset,h.node,h.offset).select()});this.color=this.wrapCommand(function(t){var e=t.foreColor;var n=t.backColor;if(e){document.execCommand("foreColor",false,e)}if(n){document.execCommand("backColor",false,n)}});this.foreColor=this.wrapCommand(function(t){document.execCommand("styleWithCSS",false,true);document.execCommand("foreColor",false,t)});this.insertTable=this.wrapCommand(function(t){var e=t.split("x");var i=n.createRange().deleteContents();i.insertNode(n.table.createTable(e[0],e[1],n.options))});this.removeMedia=this.wrapCommand(function(){var e=t(n.restoreTarget()).parent();if(e.parent("figure").length){e.parent("figure").remove()}else{e=t(n.restoreTarget()).detach()}n.context.triggerEvent("media.delete",e,n.$editable)});this.floatMe=this.wrapCommand(function(e){var i=t(n.restoreTarget());i.toggleClass("note-float-left",e==="left");i.toggleClass("note-float-right",e==="right");i.css("float",e)});this.resize=this.wrapCommand(function(e){var i=t(n.restoreTarget());i.css({width:e*100+"%",height:""})})}e.prototype.initialize=function(){var t=this;this.$editable.on("keydown",function(e){if(e.keyCode===Fe.code.ENTER){t.context.triggerEvent("enter",e)}t.context.triggerEvent("keydown",e);if(!e.isDefaultPrevented()){if(t.options.shortcuts){t.handleKeyMap(e)}else{t.preventDefaultEditableShortCuts(e)}}if(t.isLimited(1,e)){return false}}).on("keyup",function(e){t.context.triggerEvent("keyup",e)}).on("focus",function(e){t.context.triggerEvent("focus",e)}).on("blur",function(e){t.context.triggerEvent("blur",e)}).on("mousedown",function(e){t.context.triggerEvent("mousedown",e)}).on("mouseup",function(e){t.context.triggerEvent("mouseup",e)}).on("scroll",function(e){t.context.triggerEvent("scroll",e)}).on("paste",function(e){t.context.triggerEvent("paste",e)});this.$editable.html(He.html(this.$note)||He.emptyPara);this.$editable.on(ft.inputEventName,j.debounce(function(){t.context.triggerEvent("change",t.$editable.html())},100));this.$editor.on("focusin",function(e){t.context.triggerEvent("focusin",e)}).on("focusout",function(e){t.context.triggerEvent("focusout",e)});if(!this.options.airMode){if(this.options.width){this.$editor.outerWidth(this.options.width)}if(this.options.height){this.$editable.outerHeight(this.options.height)}if(this.options.maxHeight){this.$editable.css("max-height",this.options.maxHeight)}if(this.options.minHeight){this.$editable.css("min-height",this.options.minHeight)}}this.history.recordUndo()};e.prototype.destroy=function(){this.$editable.off()};e.prototype.handleKeyMap=function(t){var e=this.options.keyMap[ft.isMac?"mac":"pc"];var n=[];if(t.metaKey){n.push("CMD")}if(t.ctrlKey&&!t.altKey){n.push("CTRL")}if(t.shiftKey){n.push("SHIFT")}var i=Fe.nameFromCode[t.keyCode];if(i){n.push(i)}var o=e[n.join("+")];if(o){if(this.context.invoke(o)!==false){t.preventDefault()}}else if(Fe.isEdit(t.keyCode)){this.afterCommand()}};e.prototype.preventDefaultEditableShortCuts=function(t){if((t.ctrlKey||t.metaKey)&&tt.contains([66,73,85],t.keyCode)){t.preventDefault()}};e.prototype.isLimited=function(t,e){t=t||0;if(typeof e!=="undefined"){if(Fe.isMove(e.keyCode)||(e.ctrlKey||e.metaKey)||tt.contains([Fe.code.BACKSPACE,Fe.code.DELETE],e.keyCode)){return false}}if(this.options.maxTextLength>0){if(this.$editable.text().length+t>=this.options.maxTextLength){return true}}return false};e.prototype.createRange=function(){this.focus();return Be.create(this.editable)};e.prototype.saveRange=function(t){this.lastRange=this.createRange();if(t){this.lastRange.collapse().select()}};e.prototype.restoreRange=function(){if(this.lastRange){this.lastRange.select();this.focus()}};e.prototype.saveTarget=function(t){this.$editable.data("target",t)};e.prototype.clearTarget=function(){this.$editable.removeData("target")};e.prototype.restoreTarget=function(){return this.$editable.data("target")};e.prototype.currentStyle=function(){var t=Be.create();if(t){t=t.normalize()}return t?this.style.current(t):this.style.fromNode(this.$editable)};e.prototype.styleFromNode=function(t){return this.style.fromNode(t)};e.prototype.undo=function(){this.context.triggerEvent("before.command",this.$editable.html());this.history.undo();this.context.triggerEvent("change",this.$editable.html())};e.prototype.redo=function(){this.context.triggerEvent("before.command",this.$editable.html());this.history.redo();this.context.triggerEvent("change",this.$editable.html())};e.prototype.beforeCommand=function(){this.context.triggerEvent("before.command",this.$editable.html());this.focus()};e.prototype.afterCommand=function(t){this.history.recordUndo();if(!t){this.context.triggerEvent("change",this.$editable.html())}};e.prototype.tab=function(){var t=this.createRange();if(t.isCollapsed()&&t.isOnCell()){this.table.tab(t)}else{if(this.options.tabSize===0){return false}if(!this.isLimited(this.options.tabSize)){this.beforeCommand();this.typing.insertTab(t,this.options.tabSize);this.afterCommand()}}};e.prototype.untab=function(){var t=this.createRange();if(t.isCollapsed()&&t.isOnCell()){this.table.tab(t,true)}else{if(this.options.tabSize===0){return false}}};e.prototype.wrapCommand=function(t){var e=this;return function(){e.beforeCommand();t.apply(e,arguments);e.afterCommand()}};e.prototype.insertImage=function(t,e){var n=this;return qe(t,e).then(function(t){n.beforeCommand();if(typeof e==="function"){e(t)}else{if(typeof e==="string"){t.attr("data-filename",e)}t.css("width",Math.min(n.$editable.width(),t.width()))}t.show();Be.create(n.editable).insertNode(t[0]);Be.createFromNodeAfter(t[0]).select();n.afterCommand()}).fail(function(t){n.context.triggerEvent("image.upload.error",t)})};e.prototype.insertImages=function(e){var n=this;t.each(e,function(t,e){var i=e.name;if(n.options.maximumImageFileSize&&n.options.maximumImageFileSize<e.size){n.context.triggerEvent("image.upload.error",n.lang.image.maximumFileSizeError)}else{ze(e).then(function(t){return n.insertImage(t,i)}).fail(function(){n.context.triggerEvent("image.upload.error")})}})};e.prototype.insertImagesOrCallback=function(t){var e=this.options.callbacks;if(e.onImageUpload){this.context.triggerEvent("image.upload",t)}else{this.insertImages(t)}};e.prototype.getSelectedText=function(){var t=this.createRange();if(t.isOnAnchor()){t=Be.createFromNode(He.ancestor(t.sc,He.isAnchor))}return t.toString()};e.prototype.onFormatBlock=function(e,n){e=ft.isMSIE?"<"+e+">":e;document.execCommand("FormatBlock",false,e);if(n&&n.length){var i=n[0].className||"";if(i){var o=this.createRange();var r=t([o.sc,o.ec]).closest(e);r.addClass(i)}}};e.prototype.formatPara=function(){this.formatBlock("P")};e.prototype.fontStyling=function(e,n){var i=this.createRange();if(i){var o=this.style.styleNodes(i);t(o).css(e,n);if(i.isCollapsed()){var r=tt.head(o);if(r&&!He.nodeLength(r)){r.innerHTML=He.ZERO_WIDTH_NBSP_CHAR;Be.createFromNodeAfter(r.firstChild).select();this.$editable.data(Qe,r)}}}};e.prototype.unlink=function(){var t=this.createRange();if(t.isOnAnchor()){var e=He.ancestor(t.sc,He.isAnchor);t=Be.createFromNode(e);t.select();this.beforeCommand();document.execCommand("unlink");this.afterCommand()}};e.prototype.getLinkInfo=function(){var e=this.createRange().expand(He.isAnchor);var n=t(tt.head(e.nodes(He.isAnchor)));var i={range:e,text:e.toString(),url:n.length?n.attr("href"):""};if(n.length){i.isNewWindow=n.attr("target")==="_blank"}return i};e.prototype.addRow=function(t){var e=this.createRange(this.$editable);if(e.isCollapsed()&&e.isOnCell()){this.beforeCommand();this.table.addRow(e,t);this.afterCommand()}};e.prototype.addCol=function(t){var e=this.createRange(this.$editable);if(e.isCollapsed()&&e.isOnCell()){this.beforeCommand();this.table.addCol(e,t);this.afterCommand()}};e.prototype.deleteRow=function(){var t=this.createRange(this.$editable);if(t.isCollapsed()&&t.isOnCell()){this.beforeCommand();this.table.deleteRow(t);this.afterCommand()}};e.prototype.deleteCol=function(){var t=this.createRange(this.$editable);if(t.isCollapsed()&&t.isOnCell()){this.beforeCommand();this.table.deleteCol(t);this.afterCommand()}};e.prototype.deleteTable=function(){var t=this.createRange(this.$editable);if(t.isCollapsed()&&t.isOnCell()){this.beforeCommand();this.table.deleteTable(t);this.afterCommand()}};e.prototype.resizeTo=function(t,e,n){var i;if(n){var o=t.y/t.x;var r=e.data("ratio");i={width:r>o?t.x:t.y/r,height:r>o?t.x*r:t.y}}else{i={width:t.x,height:t.y}}e.css(i)};e.prototype.hasFocus=function(){return this.$editable.is(":focus")};e.prototype.focus=function(){if(!this.hasFocus()){this.$editable.focus()}};e.prototype.isEmpty=function(){return He.isEmpty(this.$editable[0])||He.emptyPara===this.$editable.html()};e.prototype.empty=function(){this.context.invoke("code",He.emptyPara)};return e}();var Ye=function(){function t(t){this.context=t;this.$editable=t.layoutInfo.editable}t.prototype.initialize=function(){this.$editable.on("paste",this.pasteByEvent.bind(this))};t.prototype.pasteByEvent=function(t){var e=t.originalEvent.clipboardData;if(e&&e.items&&e.items.length){var n=tt.head(e.items);if(n.kind==="file"&&n.type.indexOf("image/")!==-1){this.context.invoke("editor.insertImagesOrCallback",[n.getAsFile()])}this.context.invoke("editor.afterCommand")}};return t}();var Je=function(){function e(e){this.context=e;this.$eventListener=t(document);this.$editor=e.layoutInfo.editor;this.$editable=e.layoutInfo.editable;this.options=e.options;this.lang=this.options.langInfo;this.documentEventHandlers={};this.$dropzone=t(['<div class="note-dropzone">','  <div class="note-dropzone-message"/>',"</div>"].join("")).prependTo(this.$editor)}e.prototype.initialize=function(){if(this.options.disableDragAndDrop){this.documentEventHandlers.onDrop=function(t){t.preventDefault()};this.$eventListener=this.$dropzone;this.$eventListener.on("drop",this.documentEventHandlers.onDrop)}else{this.attachDragAndDropEvent()}};e.prototype.attachDragAndDropEvent=function(){var e=this;var n=t();var i=this.$dropzone.find(".note-dropzone-message");this.documentEventHandlers.onDragenter=function(t){var o=e.context.invoke("codeview.isActivated");var r=e.$editor.width()>0&&e.$editor.height()>0;if(!o&&!n.length&&r){e.$editor.addClass("dragover");e.$dropzone.width(e.$editor.width());e.$dropzone.height(e.$editor.height());i.text(e.lang.image.dragImageHere)}n=n.add(t.target)};this.documentEventHandlers.onDragleave=function(t){n=n.not(t.target);if(!n.length){e.$editor.removeClass("dragover")}};this.documentEventHandlers.onDrop=function(){n=t();e.$editor.removeClass("dragover")};this.$eventListener.on("dragenter",this.documentEventHandlers.onDragenter).on("dragleave",this.documentEventHandlers.onDragleave).on("drop",this.documentEventHandlers.onDrop);this.$dropzone.on("dragenter",function(){e.$dropzone.addClass("hover");i.text(e.lang.image.dropImage)}).on("dragleave",function(){e.$dropzone.removeClass("hover");i.text(e.lang.image.dragImageHere)});this.$dropzone.on("drop",function(n){var i=n.originalEvent.dataTransfer;n.preventDefault();if(i&&i.files&&i.files.length){e.$editable.focus();e.context.invoke("editor.insertImagesOrCallback",i.files)}else{t.each(i.types,function(n,o){var r=i.getData(o);if(o.toLowerCase().indexOf("text")>-1){e.context.invoke("editor.pasteHTML",r)}else{t(r).each(function(t,n){e.context.invoke("editor.insertNode",n)})}})}}).on("dragover",false)};e.prototype.destroy=function(){var t=this;Object.keys(this.documentEventHandlers).forEach(function(e){t.$eventListener.off(e.substr(2).toLowerCase(),t.documentEventHandlers[e])});this.documentEventHandlers={}};return e}();var Ze;if(ft.hasCodeMirror){if(ft.isSupportAmd){require(["codemirror"],function(t){Ze=t})}else{Ze=window.CodeMirror}}var tn=function(){function t(t){this.context=t;this.$editor=t.layoutInfo.editor;this.$editable=t.layoutInfo.editable;this.$codable=t.layoutInfo.codable;this.options=t.options}t.prototype.sync=function(){var t=this.isActivated();if(t&&ft.hasCodeMirror){this.$codable.data("cmEditor").save()}};t.prototype.isActivated=function(){return this.$editor.hasClass("codeview")};t.prototype.toggle=function(){if(this.isActivated()){this.deactivate()}else{this.activate()}this.context.triggerEvent("codeview.toggled")};t.prototype.activate=function(){var t=this;this.$codable.val(He.html(this.$editable,this.options.prettifyHtml));this.$codable.height(this.$editable.height());this.context.invoke("toolbar.updateCodeview",true);this.$editor.addClass("codeview");this.$codable.focus();if(ft.hasCodeMirror){var e=Ze.fromTextArea(this.$codable[0],this.options.codemirror);if(this.options.codemirror.tern){var n=new Ze.TernServer(this.options.codemirror.tern);e.ternServer=n;e.on("cursorActivity",function(t){n.updateArgHints(t)})}e.on("blur",function(n){t.context.triggerEvent("blur.codeview",e.getValue(),n)});e.setSize(null,this.$editable.outerHeight());this.$codable.data("cmEditor",e)}else{this.$codable.on("blur",function(e){t.context.triggerEvent("blur.codeview",t.$codable.val(),e)})}};t.prototype.deactivate=function(){if(ft.hasCodeMirror){var t=this.$codable.data("cmEditor");this.$codable.val(t.getValue());t.toTextArea()}var e=He.value(this.$codable,this.options.prettifyHtml)||He.emptyPara;var n=this.$editable.html()!==e;this.$editable.html(e);this.$editable.height(this.options.height?this.$codable.height():"auto");this.$editor.removeClass("codeview");if(n){this.context.triggerEvent("change",this.$editable.html(),this.$editable)}this.$editable.focus();this.context.invoke("toolbar.updateCodeview",false)};t.prototype.destroy=function(){if(this.isActivated()){this.deactivate()}};return t}();var en=24;var nn=function(){function e(e){this.$document=t(document);this.$statusbar=e.layoutInfo.statusbar;this.$editable=e.layoutInfo.editable;this.options=e.options}e.prototype.initialize=function(){var t=this;if(this.options.airMode||this.options.disableResizeEditor){this.destroy();return}this.$statusbar.on("mousedown",function(e){e.preventDefault();e.stopPropagation();var n=t.$editable.offset().top-t.$document.scrollTop();var i=function(e){var i=e.clientY-(n+en);i=t.options.minheight>0?Math.max(i,t.options.minheight):i;i=t.options.maxHeight>0?Math.min(i,t.options.maxHeight):i;t.$editable.height(i)};t.$document.on("mousemove",i).one("mouseup",function(){t.$document.off("mousemove",i)})})};e.prototype.destroy=function(){this.$statusbar.off()};return e}();var on=function(){function e(e){var n=this;this.context=e;this.$editor=e.layoutInfo.editor;this.$toolbar=e.layoutInfo.toolbar;this.$editable=e.layoutInfo.editable;this.$codable=e.layoutInfo.codable;this.$window=t(window);this.$scrollbar=t("html, body");this.onResize=function(){n.resizeTo({h:n.$window.height()-n.$toolbar.outerHeight()})}}e.prototype.resizeTo=function(t){this.$editable.css("height",t.h);this.$codable.css("height",t.h);if(this.$codable.data("cmeditor")){this.$codable.data("cmeditor").setsize(null,t.h)}};e.prototype.toggle=function(){this.$editor.toggleClass("fullscreen");if(this.isFullscreen()){this.$editable.data("orgHeight",this.$editable.css("height"));this.$window.on("resize",this.onResize).trigger("resize");this.$scrollbar.css("overflow","hidden")}else{this.$window.off("resize",this.onResize);this.resizeTo({h:this.$editable.data("orgHeight")});this.$scrollbar.css("overflow","visible")}this.context.invoke("toolbar.updateFullscreen",this.isFullscreen())};e.prototype.isFullscreen=function(){return this.$editor.hasClass("fullscreen")};return e}();var rn=function(){function e(e){var n=this;this.context=e;this.$document=t(document);this.$editingArea=e.layoutInfo.editingArea;this.options=e.options;this.lang=this.options.langInfo;this.events={"summernote.mousedown":function(t,e){if(n.update(e.target)){e.preventDefault()}},"summernote.keyup summernote.scroll summernote.change summernote.dialog.shown":function(){n.update()},"summernote.disable":function(){n.hide()},"summernote.codeview.toggled":function(){n.update()}}}e.prototype.initialize=function(){var e=this;this.$handle=t(['<div class="note-handle">','<div class="note-control-selection">','<div class="note-control-selection-bg"></div>','<div class="note-control-holder note-control-nw"></div>','<div class="note-control-holder note-control-ne"></div>','<div class="note-control-holder note-control-sw"></div>','<div class="',this.options.disableResizeImage?"note-control-holder":"note-control-sizing",' note-control-se"></div>',this.options.disableResizeImage?"":'<div class="note-control-selection-info"></div>',"</div>","</div>"].join("")).prependTo(this.$editingArea);this.$handle.on("mousedown",function(t){if(He.isControlSizing(t.target)){t.preventDefault();t.stopPropagation();var n=e.$handle.find(".note-control-selection").data("target");var i=n.offset();var o=e.$document.scrollTop();var r=function(t){e.context.invoke("editor.resizeTo",{x:t.clientX-i.left,y:t.clientY-(i.top-o)},n,!t.shiftKey);e.update(n[0])};e.$document.on("mousemove",r).one("mouseup",function(t){t.preventDefault();e.$document.off("mousemove",r);e.context.invoke("editor.afterCommand")});if(!n.data("ratio")){n.data("ratio",n.height()/n.width())}}});this.$handle.on("wheel",function(t){t.preventDefault();e.update()})};e.prototype.destroy=function(){this.$handle.remove()};e.prototype.update=function(e){if(this.context.isDisabled()){return false}var n=He.isImg(e);var i=this.$handle.find(".note-control-selection");this.context.invoke("imagePopover.update",e);if(n){var o=t(e);var r=o.position();var s={left:r.left+parseInt(o.css("marginLeft"),10),top:r.top+parseInt(o.css("marginTop"),10)};var a={w:o.outerWidth(false),h:o.outerHeight(false)};i.css({display:"block",left:s.left,top:s.top,width:a.w,height:a.h}).data("target",o);var l=new Image;l.src=o.attr("src");var u=a.w+"x"+a.h+" ("+this.lang.image.original+": "+l.width+"x"+l.height+")";i.find(".note-control-selection-info").text(u);this.context.invoke("editor.saveTarget",e)}else{this.hide()}return n};e.prototype.hide=function(){this.context.invoke("editor.clearTarget");this.$handle.children().hide()};return e}();var sn="http://";var an=/^([A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?|mailto:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i;var ln=function(){function e(t){var e=this;this.context=t;this.events={"summernote.keyup":function(t,n){if(!n.isDefaultPrevented()){e.handleKeyup(n)}},"summernote.keydown":function(t,n){e.handleKeydown(n)}}}e.prototype.initialize=function(){this.lastWordRange=null};e.prototype.destroy=function(){this.lastWordRange=null};e.prototype.replace=function(){if(!this.lastWordRange){return}var e=this.lastWordRange.toString();var n=e.match(an);if(n&&(n[1]||n[2])){var i=n[1]?e:sn+e;var o=t("<a />").html(e).attr("href",i)[0];this.lastWordRange.insertNode(o);this.lastWordRange=null;this.context.invoke("editor.focus")}};e.prototype.handleKeydown=function(t){if(tt.contains([Fe.code.ENTER,Fe.code.SPACE],t.keyCode)){var e=this.context.invoke("editor.createRange").getWordRange();this.lastWordRange=e}};e.prototype.handleKeyup=function(t){if(tt.contains([Fe.code.ENTER,Fe.code.SPACE],t.keyCode)){this.replace()}};return e}();var un=function(){function t(t){var e=this;this.$note=t.layoutInfo.note;this.events={"summernote.change":function(){e.$note.val(t.invoke("code"))}}}t.prototype.shouldInitialize=function(){return He.isTextarea(this.$note[0])};return t}();var cn=function(){function e(t){var e=this;this.context=t;this.$editingArea=t.layoutInfo.editingArea;this.options=t.options;this.events={"summernote.init summernote.change":function(){e.update()},"summernote.codeview.toggled":function(){e.update()}}}e.prototype.shouldInitialize=function(){return!!this.options.placeholder};e.prototype.initialize=function(){var e=this;this.$placeholder=t('<div class="note-placeholder">');this.$placeholder.on("click",function(){e.context.invoke("focus")}).text(this.options.placeholder).prependTo(this.$editingArea);this.update()};e.prototype.destroy=function(){this.$placeholder.remove()};e.prototype.update=function(){var t=!this.context.invoke("codeview.isActivated")&&this.context.invoke("editor.isEmpty");this.$placeholder.toggle(t)};return e}();var fn=function(){function e(e){this.ui=t.summernote.ui;this.context=e;this.$toolbar=e.layoutInfo.toolbar;this.options=e.options;this.lang=this.options.langInfo;this.invertedKeyMap=j.invertObject(this.options.keyMap[ft.isMac?"mac":"pc"])}e.prototype.representShortcut=function(t){var e=this.invertedKeyMap[t];if(!this.options.shortcuts||!e){return""}if(ft.isMac){e=e.replace("CMD","â").replace("SHIFT","â§")}e=e.replace("BACKSLASH","\\").replace("SLASH","/").replace("LEFTBRACKET","[").replace("RIGHTBRACKET","]");return" ("+e+")"};e.prototype.button=function(t){if(!this.options.tooltip&&t.tooltip){delete t.tooltip}t.container=this.options.container;return this.ui.button(t)};e.prototype.initialize=function(){this.addToolbarButtons();this.addImagePopoverButtons();this.addLinkPopoverButtons();this.addTablePopoverButtons();this.fontInstalledMap={}};e.prototype.destroy=function(){delete this.fontInstalledMap};e.prototype.isFontInstalled=function(t){if(!this.fontInstalledMap.hasOwnProperty(t)){this.fontInstalledMap[t]=ft.isFontInstalled(t)||tt.contains(this.options.fontNamesIgnoreCheck,t)}return this.fontInstalledMap[t]};e.prototype.isFontDeservedToAdd=function(e){var n=["sans-serif","serif","monospace","cursive","fantasy"];e=e.toLowerCase();return e!==""&&this.isFontInstalled(e)&&t.inArray(e,n)===-1};e.prototype.addToolbarButtons=function(){var e=this;this.context.memo("button.style",function(){return e.ui.buttonGroup([e.button({className:"dropdown-toggle",contents:e.ui.dropdownButtonContents(e.ui.icon(e.options.icons.magic),e.options),tooltip:e.lang.style.style,data:{toggle:"dropdown"}}),e.ui.dropdown({className:"dropdown-style",items:e.options.styleTags,template:function(t){if(typeof t==="string"){t={tag:t,title:e.lang.style.hasOwnProperty(t)?e.lang.style[t]:t}}var n=t.tag;var i=t.title;var o=t.style?' style="'+t.style+'" ':"";var r=t.className?' class="'+t.className+'"':"";return"<"+n+o+r+">"+i+"</"+n+">"},click:e.context.createInvokeHandler("editor.formatBlock")})]).render()});var n=function(t,n){var o=i.options.styleTags[t];i.context.memo("button.style."+o,function(){return e.button({className:"note-btn-style-"+o,contents:'<div data-value="'+o+'">'+o.toUpperCase()+"</div>",tooltip:o.toUpperCase(),click:e.context.createInvokeHandler("editor.formatBlock")}).render()})};var i=this;for(var o=0,r=this.options.styleTags.length;o<r;o++){n(o,r)}this.context.memo("button.bold",function(){return e.button({className:"note-btn-bold",contents:e.ui.icon(e.options.icons.bold),tooltip:e.lang.font.bold+e.representShortcut("bold"),click:e.context.createInvokeHandlerAndUpdateState("editor.bold")}).render()});this.context.memo("button.italic",function(){return e.button({className:"note-btn-italic",contents:e.ui.icon(e.options.icons.italic),tooltip:e.lang.font.italic+e.representShortcut("italic"),click:e.context.createInvokeHandlerAndUpdateState("editor.italic")}).render()});this.context.memo("button.underline",function(){return e.button({className:"note-btn-underline",contents:e.ui.icon(e.options.icons.underline),tooltip:e.lang.font.underline+e.representShortcut("underline"),click:e.context.createInvokeHandlerAndUpdateState("editor.underline")}).render()});this.context.memo("button.clear",function(){return e.button({contents:e.ui.icon(e.options.icons.eraser),tooltip:e.lang.font.clear+e.representShortcut("removeFormat"),click:e.context.createInvokeHandler("editor.removeFormat")}).render()});this.context.memo("button.strikethrough",function(){return e.button({className:"note-btn-strikethrough",contents:e.ui.icon(e.options.icons.strikethrough),tooltip:e.lang.font.strikethrough+e.representShortcut("strikethrough"),click:e.context.createInvokeHandlerAndUpdateState("editor.strikethrough")}).render()});this.context.memo("button.superscript",function(){return e.button({className:"note-btn-superscript",contents:e.ui.icon(e.options.icons.superscript),tooltip:e.lang.font.superscript,click:e.context.createInvokeHandlerAndUpdateState("editor.superscript")}).render()});this.context.memo("button.subscript",function(){return e.button({className:"note-btn-subscript",contents:e.ui.icon(e.options.icons.subscript),tooltip:e.lang.font.subscript,click:e.context.createInvokeHandlerAndUpdateState("editor.subscript")}).render()});this.context.memo("button.fontname",function(){var n=e.context.invoke("editor.currentStyle");t.each(n["font-family"].split(","),function(n,i){i=i.trim().replace(/['"]+/g,"");if(e.isFontDeservedToAdd(i)){if(t.inArray(i,e.options.fontNames)===-1){e.options.fontNames.push(i)}}});return e.ui.buttonGroup([e.button({className:"dropdown-toggle",contents:e.ui.dropdownButtonContents('<span class="note-current-fontname"/>',e.options),tooltip:e.lang.font.name,data:{toggle:"dropdown"}}),e.ui.dropdownCheck({className:"dropdown-fontname",checkClassName:e.options.icons.menuCheck,items:e.options.fontNames.filter(e.isFontInstalled.bind(e)),template:function(t){return"<span style=\"font-family: '"+t+"'\">"+t+"</span>"},click:e.context.createInvokeHandlerAndUpdateState("editor.fontName")})]).render()});this.context.memo("button.fontsize",function(){return e.ui.buttonGroup([e.button({className:"dropdown-toggle",contents:e.ui.dropdownButtonContents('<span class="note-current-fontsize"/>',e.options),tooltip:e.lang.font.size,data:{toggle:"dropdown"}}),e.ui.dropdownCheck({className:"dropdown-fontsize",checkClassName:e.options.icons.menuCheck,items:e.options.fontSizes,click:e.context.createInvokeHandlerAndUpdateState("editor.fontSize")})]).render()});this.context.memo("button.color",function(){return e.ui.buttonGroup({className:"note-color",children:[e.button({className:"note-current-color-button",contents:e.ui.icon(e.options.icons.font+" note-recent-color"),tooltip:e.lang.color.recent,click:function(n){var i=t(n.currentTarget);e.context.invoke("editor.color",{backColor:i.attr("data-backColor"),foreColor:i.attr("data-foreColor")})},callback:function(t){var e=t.find(".note-recent-color");e.css("background-color","#FFFF00");t.attr("data-backColor","#FFFF00")}}),e.button({className:"dropdown-toggle",contents:e.ui.dropdownButtonContents("",e.options),tooltip:e.lang.color.more,data:{toggle:"dropdown"}}),e.ui.dropdown({items:['<div class="note-palette">','  <div class="note-palette-title">'+e.lang.color.background+"</div>","  <div>",'    <button type="button" class="note-color-reset btn btn-light" data-event="backColor" data-value="inherit">',e.lang.color.transparent,"    </button>","  </div>",'  <div class="note-holder" data-event="backColor"/>',"</div>",'<div class="note-palette">','  <div class="note-palette-title">'+e.lang.color.foreground+"</div>","  <div>",'    <button type="button" class="note-color-reset btn btn-light" data-event="removeFormat" data-value="foreColor">',e.lang.color.resetToDefault,"    </button>","  </div>",'  <div class="note-holder" data-event="foreColor"/>',"</div>"].join(""),callback:function(n){n.find(".note-holder").each(function(n,i){var o=t(i);o.append(e.ui.palette({colors:e.options.colors,eventName:o.data("event"),container:e.options.container,tooltip:e.options.tooltip}).render())})},click:function(n){var i=t(n.target);var o=i.data("event");var r=i.data("value");if(o&&r){var s=o==="backColor"?"background-color":"color";var a=i.closest(".note-color").find(".note-recent-color");var l=i.closest(".note-color").find(".note-current-color-button");a.css(s,r);l.attr("data-"+o,r);e.context.invoke("editor."+o,r)}}})]}).render()});this.context.memo("button.ul",function(){return e.button({contents:e.ui.icon(e.options.icons.unorderedlist),tooltip:e.lang.lists.unordered+e.representShortcut("insertUnorderedList"),click:e.context.createInvokeHandler("editor.insertUnorderedList")}).render()});this.context.memo("button.ol",function(){return e.button({contents:e.ui.icon(e.options.icons.orderedlist),tooltip:e.lang.lists.ordered+e.representShortcut("insertOrderedList"),click:e.context.createInvokeHandler("editor.insertOrderedList")}).render()});var s=this.button({contents:this.ui.icon(this.options.icons.alignLeft),tooltip:this.lang.paragraph.left+this.representShortcut("justifyLeft"),click:this.context.createInvokeHandler("editor.justifyLeft")});var a=this.button({contents:this.ui.icon(this.options.icons.alignCenter),tooltip:this.lang.paragraph.center+this.representShortcut("justifyCenter"),click:this.context.createInvokeHandler("editor.justifyCenter")});var l=this.button({contents:this.ui.icon(this.options.icons.alignRight),tooltip:this.lang.paragraph.right+this.representShortcut("justifyRight"),click:this.context.createInvokeHandler("editor.justifyRight")});var u=this.button({contents:this.ui.icon(this.options.icons.alignJustify),tooltip:this.lang.paragraph.justify+this.representShortcut("justifyFull"),click:this.context.createInvokeHandler("editor.justifyFull")});var c=this.button({contents:this.ui.icon(this.options.icons.outdent),tooltip:this.lang.paragraph.outdent+this.representShortcut("outdent"),click:this.context.createInvokeHandler("editor.outdent")});var f=this.button({contents:this.ui.icon(this.options.icons.indent),tooltip:this.lang.paragraph.indent+this.representShortcut("indent"),click:this.context.createInvokeHandler("editor.indent")});this.context.memo("button.justifyLeft",j.invoke(s,"render"));this.context.memo("button.justifyCenter",j.invoke(a,"render"));this.context.memo("button.justifyRight",j.invoke(l,"render"));this.context.memo("button.justifyFull",j.invoke(u,"render"));this.context.memo("button.outdent",j.invoke(c,"render"));this.context.memo("button.indent",j.invoke(f,"render"));this.context.memo("button.paragraph",function(){return e.ui.buttonGroup([e.button({className:"dropdown-toggle",contents:e.ui.dropdownButtonContents(e.ui.icon(e.options.icons.alignLeft),e.options),tooltip:e.lang.paragraph.paragraph,data:{toggle:"dropdown"}}),e.ui.dropdown([e.ui.buttonGroup({className:"note-align",children:[s,a,l,u]}),e.ui.buttonGroup({className:"note-list",children:[c,f]})])]).render()});this.context.memo("button.height",function(){return e.ui.buttonGroup([e.button({className:"dropdown-toggle",contents:e.ui.dropdownButtonContents(e.ui.icon(e.options.icons.textHeight),e.options),tooltip:e.lang.font.height,data:{toggle:"dropdown"}}),e.ui.dropdownCheck({items:e.options.lineHeights,checkClassName:e.options.icons.menuCheck,className:"dropdown-line-height",click:e.context.createInvokeHandler("editor.lineHeight")})]).render()});this.context.memo("button.table",function(){return e.ui.buttonGroup([e.button({className:"dropdown-toggle",contents:e.ui.dropdownButtonContents(e.ui.icon(e.options.icons.table),e.options),tooltip:e.lang.table.table,data:{toggle:"dropdown"}}),e.ui.dropdown({className:"note-table",items:['<div class="note-dimension-picker">','  <div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>','  <div class="note-dimension-picker-highlighted"/>','  <div class="note-dimension-picker-unhighlighted"/>',"</div>",'<div class="note-dimension-display">1 x 1</div>'].join("")})],{callback:function(t){var n=t.find(".note-dimension-picker-mousecatcher");n.css({width:e.options.insertTableMaxSize.col+"em",height:e.options.insertTableMaxSize.row+"em"}).mousedown(e.context.createInvokeHandler("editor.insertTable")).on("mousemove",e.tableMoveHandler.bind(e))}}).render()});this.context.memo("button.link",function(){return e.button({contents:e.ui.icon(e.options.icons.link),tooltip:e.lang.link.link+e.representShortcut("linkDialog.show"),click:e.context.createInvokeHandler("linkDialog.show")}).render()});this.context.memo("button.picture",function(){return e.button({contents:e.ui.icon(e.options.icons.picture),tooltip:e.lang.image.image,click:e.context.createInvokeHandler("imageDialog.show")}).render()});this.context.memo("button.video",function(){return e.button({contents:e.ui.icon(e.options.icons.video),tooltip:e.lang.video.video,click:e.context.createInvokeHandler("videoDialog.show")}).render()});this.context.memo("button.hr",function(){return e.button({contents:e.ui.icon(e.options.icons.minus),tooltip:e.lang.hr.insert+e.representShortcut("insertHorizontalRule"),click:e.context.createInvokeHandler("editor.insertHorizontalRule")}).render()});this.context.memo("button.fullscreen",function(){return e.button({className:"btn-fullscreen",contents:e.ui.icon(e.options.icons.arrowsAlt),tooltip:e.options.fullscreen,click:e.context.createInvokeHandler("fullscreen.toggle")}).render()});this.context.memo("button.codeview",function(){return e.button({className:"btn-codeview",contents:e.ui.icon(e.options.icons.code),tooltip:e.options.codeview,click:e.context.createInvokeHandler("codeview.toggle")}).render()});this.context.memo("button.redo",function(){return e.button({contents:e.ui.icon(e.options.icons.redo),tooltip:e.lang.history.redo+e.representShortcut("redo"),click:e.context.createInvokeHandler("editor.redo")}).render()});this.context.memo("button.undo",function(){return e.button({contents:e.ui.icon(e.options.icons.undo),tooltip:e.lang.history.undo+e.representShortcut("undo"),click:e.context.createInvokeHandler("editor.undo")}).render()});this.context.memo("button.help",function(){return e.button({contents:e.ui.icon(e.options.icons.question),tooltip:e.options.help,click:e.context.createInvokeHandler("helpDialog.show")}).render()})};e.prototype.addImagePopoverButtons=function(){var t=this;this.context.memo("button.imageSize100",function(){return t.button({contents:'<span class="note-fontsize-10">100%</span>',tooltip:t.lang.image.resizeFull,click:t.context.createInvokeHandler("editor.resize","1")}).render()});this.context.memo("button.imageSize50",function(){return t.button({contents:'<span class="note-fontsize-10">50%</span>',tooltip:t.lang.image.resizeHalf,click:t.context.createInvokeHandler("editor.resize","0.5")}).render()});this.context.memo("button.imageSize25",function(){return t.button({contents:'<span class="note-fontsize-10">25%</span>',tooltip:t.lang.image.resizeQuarter,click:t.context.createInvokeHandler("editor.resize","0.25")}).render()});this.context.memo("button.floatLeft",function(){return t.button({contents:t.ui.icon(t.options.icons.alignLeft),tooltip:t.lang.image.floatLeft,click:t.context.createInvokeHandler("editor.floatMe","left")}).render()});this.context.memo("button.floatRight",function(){return t.button({contents:t.ui.icon(t.options.icons.alignRight),tooltip:t.lang.image.floatRight,click:t.context.createInvokeHandler("editor.floatMe","right")}).render()});this.context.memo("button.floatNone",function(){return t.button({contents:t.ui.icon(t.options.icons.alignJustify),tooltip:t.lang.image.floatNone,click:t.context.createInvokeHandler("editor.floatMe","none")}).render()});this.context.memo("button.removeMedia",function(){return t.button({contents:t.ui.icon(t.options.icons.trash),tooltip:t.lang.image.remove,click:t.context.createInvokeHandler("editor.removeMedia")}).render()})};e.prototype.addLinkPopoverButtons=function(){var t=this;this.context.memo("button.linkDialogShow",function(){return t.button({contents:t.ui.icon(t.options.icons.link),tooltip:t.lang.link.edit,click:t.context.createInvokeHandler("linkDialog.show")}).render()});this.context.memo("button.unlink",function(){return t.button({contents:t.ui.icon(t.options.icons.unlink),tooltip:t.lang.link.unlink,click:t.context.createInvokeHandler("editor.unlink")}).render()})};e.prototype.addTablePopoverButtons=function(){var t=this;this.context.memo("button.addRowUp",function(){return t.button({className:"btn-md",contents:t.ui.icon(t.options.icons.rowAbove),tooltip:t.lang.table.addRowAbove,click:t.context.createInvokeHandler("editor.addRow","top")}).render()});this.context.memo("button.addRowDown",function(){return t.button({className:"btn-md",contents:t.ui.icon(t.options.icons.rowBelow),tooltip:t.lang.table.addRowBelow,click:t.context.createInvokeHandler("editor.addRow","bottom")}).render()});this.context.memo("button.addColLeft",function(){return t.button({className:"btn-md",contents:t.ui.icon(t.options.icons.colBefore),tooltip:t.lang.table.addColLeft,click:t.context.createInvokeHandler("editor.addCol","left")}).render()});this.context.memo("button.addColRight",function(){return t.button({className:"btn-md",contents:t.ui.icon(t.options.icons.colAfter),tooltip:t.lang.table.addColRight,click:t.context.createInvokeHandler("editor.addCol","right")}).render()});this.context.memo("button.deleteRow",function(){return t.button({className:"btn-md",contents:t.ui.icon(t.options.icons.rowRemove),tooltip:t.lang.table.delRow,click:t.context.createInvokeHandler("editor.deleteRow")}).render()});this.context.memo("button.deleteCol",function(){return t.button({className:"btn-md",contents:t.ui.icon(t.options.icons.colRemove),tooltip:t.lang.table.delCol,click:t.context.createInvokeHandler("editor.deleteCol")}).render()});this.context.memo("button.deleteTable",function(){return t.button({className:"btn-md",contents:t.ui.icon(t.options.icons.trash),tooltip:t.lang.table.delTable,click:t.context.createInvokeHandler("editor.deleteTable")}).render()})};e.prototype.build=function(e,n){for(var i=0,o=n.length;i<o;i++){var r=n[i];var s=t.isArray(r)?r[0]:r;var a=t.isArray(r)?r.length===1?[r[0]]:r[1]:[r];var l=this.ui.buttonGroup({className:"note-"+s}).render();for(var u=0,c=a.length;u<c;u++){var f=this.context.memo("button."+a[u]);if(f){l.append(typeof f==="function"?f(this.context):f)}}l.appendTo(e)}};e.prototype.updateCurrentStyle=function(e){var n=this;var i=e||this.$toolbar;var o=this.context.invoke("editor.currentStyle");this.updateBtnStates(i,{".note-btn-bold":function(){return o["font-bold"]==="bold"},".note-btn-italic":function(){return o["font-italic"]==="italic"},".note-btn-underline":function(){return o["font-underline"]==="underline"},".note-btn-subscript":function(){return o["font-subscript"]==="subscript"},".note-btn-superscript":function(){return o["font-superscript"]==="superscript"},".note-btn-strikethrough":function(){return o["font-strikethrough"]==="strikethrough"}});if(o["font-family"]){var r=o["font-family"].split(",").map(function(t){return t.replace(/[\'\"]/g,"").replace(/\s+$/,"").replace(/^\s+/,"")});var s=tt.find(r,this.isFontInstalled.bind(this));i.find(".dropdown-fontname a").each(function(e,n){var i=t(n);var o=i.data("value")+""===s+"";i.toggleClass("checked",o)});i.find(".note-current-fontname").text(s).css("font-family",s)}if(o["font-size"]){var a=o["font-size"];i.find(".dropdown-fontsize a").each(function(e,n){var i=t(n);var o=i.data("value")+""===a+"";i.toggleClass("checked",o)});i.find(".note-current-fontsize").text(a)}if(o["line-height"]){var l=o["line-height"];i.find(".dropdown-line-height li a").each(function(e,i){var o=t(i).data("value")+""===l+"";n.className=o?"checked":""})}};e.prototype.updateBtnStates=function(e,n){var i=this;t.each(n,function(t,n){i.ui.toggleBtnActive(e.find(t),n())})};e.prototype.tableMoveHandler=function(e){var n=18;var i=t(e.target.parentNode);var o=i.next();var r=i.find(".note-dimension-picker-mousecatcher");var s=i.find(".note-dimension-picker-highlighted");var a=i.find(".note-dimension-picker-unhighlighted");var l;if(e.offsetX===undefined){var u=t(e.target).offset();l={x:e.pageX-u.left,y:e.pageY-u.top}}else{l={x:e.offsetX,y:e.offsetY}}var c={c:Math.ceil(l.x/n)||1,r:Math.ceil(l.y/n)||1};s.css({width:c.c+"em",height:c.r+"em"});r.data("value",c.c+"x"+c.r);if(c.c>3&&c.c<this.options.insertTableMaxSize.col){a.css({width:c.c+1+"em"})}if(c.r>3&&c.r<this.options.insertTableMaxSize.row){a.css({height:c.r+1+"em"})}o.html(c.c+" x "+c.r)};return e}();var dn=function(){function e(e){this.context=e;this.$window=t(window);this.$document=t(document);this.ui=t.summernote.ui;this.$note=e.layoutInfo.note;this.$editor=e.layoutInfo.editor;this.$toolbar=e.layoutInfo.toolbar;this.options=e.options;this.followScroll=this.followScroll.bind(this)}e.prototype.shouldInitialize=function(){return!this.options.airMode};e.prototype.initialize=function(){var t=this;this.options.toolbar=this.options.toolbar||[];if(!this.options.toolbar.length){this.$toolbar.hide()}else{this.context.invoke("buttons.build",this.$toolbar,this.options.toolbar)}if(this.options.toolbarContainer){this.$toolbar.appendTo(this.options.toolbarContainer)}this.changeContainer(false);this.$note.on("summernote.keyup summernote.mouseup summernote.change",function(){t.context.invoke("buttons.updateCurrentStyle")});this.context.invoke("buttons.updateCurrentStyle");if(this.options.followingToolbar){this.$window.on("scroll resize",this.followScroll)}};e.prototype.destroy=function(){this.$toolbar.children().remove();if(this.options.followingToolbar){this.$window.off("scroll resize",this.followScroll)}};e.prototype.followScroll=function(){if(this.$editor.hasClass("fullscreen")){return false}var e=this.$toolbar.parent(".note-toolbar-wrapper");var n=this.$editor.outerHeight();var i=this.$editor.width();var o=this.$toolbar.height();e.css({height:o});var r=0;if(this.options.otherStaticBar){r=t(this.options.otherStaticBar).outerHeight()}var s=this.$document.scrollTop();var a=this.$editor.offset().top;var l=a+n;var u=a-r;var c=l-r-o;if(s>u&&s<c){this.$toolbar.css({position:"fixed",top:r,width:i})}else{this.$toolbar.css({position:"relative",top:0,width:"100%"})}};e.prototype.changeContainer=function(t){if(t){this.$toolbar.prependTo(this.$editor)}else{if(this.options.toolbarContainer){this.$toolbar.appendTo(this.options.toolbarContainer)}}};e.prototype.updateFullscreen=function(t){this.ui.toggleBtnActive(this.$toolbar.find(".btn-fullscreen"),t);this.changeContainer(t)};e.prototype.updateCodeview=function(t){this.ui.toggleBtnActive(this.$toolbar.find(".btn-codeview"),t);if(t){this.deactivate()}else{this.activate()}};e.prototype.activate=function(t){var e=this.$toolbar.find("button");if(!t){e=e.not(".btn-codeview")}this.ui.toggleBtn(e,true)};e.prototype.deactivate=function(t){var e=this.$toolbar.find("button");if(!t){e=e.not(".btn-codeview")}this.ui.toggleBtn(e,false)};return e}();var hn=function(){function e(e){this.context=e;this.ui=t.summernote.ui;this.$body=t(document.body);this.$editor=e.layoutInfo.editor;this.options=e.options;this.lang=this.options.langInfo;e.memo("help.linkDialog.show",this.options.langInfo.help["linkDialog.show"])}e.prototype.initialize=function(){var e=this.options.dialogsInBody?this.$body:this.$editor;var n=['<div class="form-group note-form-group">','<label class="note-form-label">'+this.lang.link.textToDisplay+"</label>",'<input class="note-link-text form-control note-form-control  note-input" type="text" />',"</div>",'<div class="form-group note-form-group">','<label class="note-form-label">'+this.lang.link.url+"</label>",'<input class="note-link-url form-control note-form-control note-input" type="text" value="http://" />',"</div>",!this.options.disableLinkTarget?t("<div/>").append(this.ui.checkbox({id:"sn-checkbox-open-in-new-window",text:this.lang.link.openInNewWindow,checked:true}).render()).html():""].join("");var i="btn btn-primary note-btn note-btn-primary note-link-btn";var o='<button type="submit" href="#" class="'+i+'" disabled>'+this.lang.link.insert+"</button>";this.$dialog=this.ui.dialog({className:"link-dialog",title:this.lang.link.insert,fade:this.options.dialogsFade,body:n,footer:o}).render().appendTo(e)};e.prototype.destroy=function(){this.ui.hideDialog(this.$dialog);this.$dialog.remove()};e.prototype.bindEnterKey=function(t,e){t.on("keypress",function(t){if(t.keyCode===Fe.code.ENTER){t.preventDefault();e.trigger("click")}})};e.prototype.toggleLinkBtn=function(t,e,n){this.ui.toggleBtn(t,e.val()&&n.val())};e.prototype.showLinkDialog=function(e){var n=this;return t.Deferred(function(t){var i=n.$dialog.find(".note-link-text");var o=n.$dialog.find(".note-link-url");var r=n.$dialog.find(".note-link-btn");var s=n.$dialog.find("input[type=checkbox]");n.ui.onDialogShown(n.$dialog,function(){n.context.triggerEvent("dialog.shown");if(!e.url){e.url=e.text}i.val(e.text);var a=function(){n.toggleLinkBtn(r,i,o);e.text=i.val()};i.on("input",a).on("paste",function(){setTimeout(a,0)});var l=function(){n.toggleLinkBtn(r,i,o);if(!e.text){i.val(o.val())}};o.on("input",l).on("paste",function(){setTimeout(l,0)}).val(e.url);if(!ft.isSupportTouch){o.trigger("focus")}n.toggleLinkBtn(r,i,o);n.bindEnterKey(o,r);n.bindEnterKey(i,r);var u=e.isNewWindow!==undefined?e.isNewWindow:n.context.options.linkTargetBlank;s.prop("checked",u);r.one("click",function(r){r.preventDefault();t.resolve({range:e.range,url:o.val(),text:i.val(),isNewWindow:s.is(":checked")});n.ui.hideDialog(n.$dialog)})});n.ui.onDialogHidden(n.$dialog,function(){i.off("input paste keypress");o.off("input paste keypress");r.off("click");if(t.state()==="pending"){t.reject()}});n.ui.showDialog(n.$dialog)}).promise()};e.prototype.show=function(){var t=this;var e=this.context.invoke("editor.getLinkInfo");this.context.invoke("editor.saveRange");this.showLinkDialog(e).then(function(e){t.context.invoke("editor.restoreRange");t.context.invoke("editor.createLink",e)}).fail(function(){t.context.invoke("editor.restoreRange")})};return e}();var pn=function(){function e(e){var n=this;this.context=e;this.ui=t.summernote.ui;this.options=e.options;this.events={"summernote.keyup summernote.mouseup summernote.change summernote.scroll":function(){n.update()},"summernote.disable summernote.dialog.shown":function(){n.hide()}}}e.prototype.shouldInitialize=function(){return!tt.isEmpty(this.options.popover.link)};e.prototype.initialize=function(){this.$popover=this.ui.popover({className:"note-link-popover",callback:function(t){var e=t.find(".popover-content,.note-popover-content");e.prepend('<span><a target="_blank"></a>&nbsp;</span>')}}).render().appendTo(this.options.container);var t=this.$popover.find(".popover-content,.note-popover-content");this.context.invoke("buttons.build",t,this.options.popover.link)};e.prototype.destroy=function(){this.$popover.remove()};e.prototype.update=function(){if(!this.context.invoke("editor.hasFocus")){this.hide();return}var e=this.context.invoke("editor.createRange");if(e.isCollapsed()&&e.isOnAnchor()){var n=He.ancestor(e.sc,He.isAnchor);var i=t(n).attr("href");this.$popover.find("a").attr("href",i).html(i);var o=He.posFromPlaceholder(n);this.$popover.css({display:"block",left:o.left,top:o.top})}else{this.hide()}};e.prototype.hide=function(){this.$popover.hide()};return e}();var vn=function(){function e(e){this.context=e;this.ui=t.summernote.ui;this.$body=t(document.body);this.$editor=e.layoutInfo.editor;this.options=e.options;this.lang=this.options.langInfo}e.prototype.initialize=function(){var t=this.options.dialogsInBody?this.$body:this.$editor;var e="";if(this.options.maximumImageFileSize){var n=Math.floor(Math.log(this.options.maximumImageFileSize)/Math.log(1024));var i=(this.options.maximumImageFileSize/Math.pow(1024,n)).toFixed(2)*1+" "+" KMGTP"[n]+"B";e="<small>"+(this.lang.image.maximumFileSize+" : "+i)+"</small>"}var o=['<div class="form-group note-form-group note-group-select-from-files">','<label class="note-form-label">'+this.lang.image.selectFromFiles+"</label>",'<input class="note-image-input note-form-control note-input" ',' type="file" name="files" accept="image/*" multiple="multiple" />',e,"</div>",'<div class="form-group note-group-image-url" style="overflow:auto;">','<label class="note-form-label">'+this.lang.image.url+"</label>",'<input class="note-image-url form-control note-form-control note-input ',' col-md-12" type="text" />',"</div>"].join("");var r="btn btn-primary note-btn note-btn-primary note-image-btn";var s='<button type="submit" href="#" class="'+r+'" disabled>'+this.lang.image.insert+"</button>";this.$dialog=this.ui.dialog({title:this.lang.image.insert,fade:this.options.dialogsFade,body:o,footer:s}).render().appendTo(t)};e.prototype.destroy=function(){this.ui.hideDialog(this.$dialog);this.$dialog.remove()};e.prototype.bindEnterKey=function(t,e){t.on("keypress",function(t){if(t.keyCode===Fe.code.ENTER){t.preventDefault();e.trigger("click")}})};e.prototype.show=function(){var t=this;this.context.invoke("editor.saveRange");this.showImageDialog().then(function(e){t.ui.hideDialog(t.$dialog);t.context.invoke("editor.restoreRange");if(typeof e==="string"){t.context.invoke("editor.insertImage",e)}else{t.context.invoke("editor.insertImagesOrCallback",e)}}).fail(function(){t.context.invoke("editor.restoreRange")})};e.prototype.showImageDialog=function(){var e=this;return t.Deferred(function(t){var n=e.$dialog.find(".note-image-input");var i=e.$dialog.find(".note-image-url");var o=e.$dialog.find(".note-image-btn");e.ui.onDialogShown(e.$dialog,function(){e.context.triggerEvent("dialog.shown");n.replaceWith(n.clone().on("change",function(e){t.resolve(e.target.files||e.target.value)}).val(""));o.click(function(e){e.preventDefault();t.resolve(i.val())});i.on("keyup paste",function(){var t=i.val();e.ui.toggleBtn(o,t)}).val("");if(!ft.isSupportTouch){i.trigger("focus")}e.bindEnterKey(i,o)});e.ui.onDialogHidden(e.$dialog,function(){n.off("change");i.off("keyup paste keypress");o.off("click");if(t.state()==="pending"){t.reject()}});e.ui.showDialog(e.$dialog)})};return e}();var mn=function(){function e(e){var n=this;this.context=e;this.ui=t.summernote.ui;this.editable=e.layoutInfo.editable[0];this.options=e.options;this.events={"summernote.disable":function(){n.hide()}}}e.prototype.shouldInitialize=function(){return!tt.isEmpty(this.options.popover.image)};e.prototype.initialize=function(){this.$popover=this.ui.popover({className:"note-image-popover"}).render().appendTo(this.options.container);var t=this.$popover.find(".popover-content,.note-popover-content");this.context.invoke("buttons.build",t,this.options.popover.image)};e.prototype.destroy=function(){this.$popover.remove()};e.prototype.update=function(t){if(He.isImg(t)){var e=He.posFromPlaceholder(t);var n=He.posFromPlaceholder(this.editable);this.$popover.css({display:"block",left:this.options.popatmouse?event.pageX-20:e.left,top:this.options.popatmouse?event.pageY:Math.min(e.top,n.top)})}else{this.hide()}};e.prototype.hide=function(){this.$popover.hide()};return e}();var gn=function(){function e(e){var n=this;this.context=e;this.ui=t.summernote.ui;this.options=e.options;this.events={"summernote.mousedown":function(t,e){n.update(e.target)},"summernote.keyup summernote.scroll summernote.change":function(){n.update()},"summernote.disable":function(){n.hide()}}}e.prototype.shouldInitialize=function(){return!tt.isEmpty(this.options.popover.table)};e.prototype.initialize=function(){this.$popover=this.ui.popover({className:"note-table-popover"}).render().appendTo(this.options.container);var t=this.$popover.find(".popover-content,.note-popover-content");this.context.invoke("buttons.build",t,this.options.popover.table);if(ft.isFF){document.execCommand("enableInlineTableEditing",false,false)}};e.prototype.destroy=function(){this.$popover.remove()};e.prototype.update=function(t){if(this.context.isDisabled()){return false}var e=He.isCell(t);if(e){var n=He.posFromPlaceholder(t);this.$popover.css({display:"block",left:n.left,top:n.top})}else{this.hide()}return e};e.prototype.hide=function(){this.$popover.hide()};return e}();var yn=function(){function e(e){this.context=e;this.ui=t.summernote.ui;this.$body=t(document.body);this.$editor=e.layoutInfo.editor;this.options=e.options;this.lang=this.options.langInfo}e.prototype.initialize=function(){var t=this.options.dialogsInBody?this.$body:this.$editor;var e=['<div class="form-group note-form-group row-fluid">','<label class="note-form-label">'+this.lang.video.url+' <small class="text-muted">'+this.lang.video.providers+"</small></label>",'<input class="note-video-url form-control note-form-control note-input" type="text" />',"</div>"].join("");var n="btn btn-primary note-btn note-btn-primary note-video-btn";var i='<button type="submit" href="#" class="'+n+'" disabled>'+this.lang.video.insert+"</button>";this.$dialog=this.ui.dialog({title:this.lang.video.insert,fade:this.options.dialogsFade,body:e,footer:i}).render().appendTo(t)};e.prototype.destroy=function(){this.ui.hideDialog(this.$dialog);this.$dialog.remove()};e.prototype.bindEnterKey=function(t,e){t.on("keypress",function(t){if(t.keyCode===Fe.code.ENTER){t.preventDefault();e.trigger("click")}})};e.prototype.createVideoNode=function(e){var n=/^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;var i=e.match(n);var o=/(?:www\.|\/\/)instagram\.com\/p\/(.[a-zA-Z0-9_-]*)/;var r=e.match(o);var s=/\/\/vine\.co\/v\/([a-zA-Z0-9]+)/;var a=e.match(s);var l=/\/\/(player\.)?vimeo\.com\/([a-z]*\/)*(\d+)[?]?.*/;var u=e.match(l);var c=/.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/;var f=e.match(c);var d=/\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/;var h=e.match(d);var p=/\/\/v\.qq\.com.*?vid=(.+)/;var v=e.match(p);var m=/\/\/v\.qq\.com\/x?\/?(page|cover).*?\/([^\/]+)\.html\??.*/;var g=e.match(m);var y=/^.+.(mp4|m4v)$/;var b=e.match(y);var w=/^.+.(ogg|ogv)$/;var x=e.match(w);var C=/^.+.(webm)$/;var k=e.match(C);var T;if(i&&i[1].length===11){var S=i[1];T=t("<iframe>").attr("frameborder",0).attr("src","//www.youtube.com/embed/"+S).attr("width","640").attr("height","360")}else if(r&&r[0].length){T=t("<iframe>").attr("frameborder",0).attr("src","https://instagram.com/p/"+r[1]+"/embed/").attr("width","612").attr("height","710").attr("scrolling","no").attr("allowtransparency","true")}else if(a&&a[0].length){T=t("<iframe>").attr("frameborder",0).attr("src",a[0]+"/embed/simple").attr("width","600").attr("height","600").attr("class","vine-embed")}else if(u&&u[3].length){T=t("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder",0).attr("src","//player.vimeo.com/video/"+u[3]).attr("width","640").attr("height","360")}else if(f&&f[2].length){T=t("<iframe>").attr("frameborder",0).attr("src","//www.dailymotion.com/embed/video/"+f[2]).attr("width","640").attr("height","360")}else if(h&&h[1].length){T=t("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder",0).attr("height","498").attr("width","510").attr("src","//player.youku.com/embed/"+h[1])}else if(v&&v[1].length||g&&g[2].length){var $=v&&v[1].length?v[1]:g[2];T=t("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder",0).attr("height","310").attr("width","500").attr("src","http://v.qq.com/iframe/player.html?vid="+$+"&amp;auto=0")}else if(b||x||k){T=t("<video controls>").attr("src",e).attr("width","640").attr("height","360")}else{return false}T.addClass("note-video-clip");return T[0]};e.prototype.show=function(){var t=this;var e=this.context.invoke("editor.getSelectedText");this.context.invoke("editor.saveRange");this.showVideoDialog(e).then(function(e){t.ui.hideDialog(t.$dialog);t.context.invoke("editor.restoreRange");var n=t.createVideoNode(e);if(n){t.context.invoke("editor.insertNode",n)}}).fail(function(){t.context.invoke("editor.restoreRange")})};e.prototype.showVideoDialog=function(e){var n=this;return t.Deferred(function(t){var i=n.$dialog.find(".note-video-url");var o=n.$dialog.find(".note-video-btn");n.ui.onDialogShown(n.$dialog,function(){n.context.triggerEvent("dialog.shown");i.val(e).on("input",function(){n.ui.toggleBtn(o,i.val())});if(!ft.isSupportTouch){i.trigger("focus")}o.click(function(e){e.preventDefault();t.resolve(i.val())});n.bindEnterKey(i,o)});n.ui.onDialogHidden(n.$dialog,function(){i.off("input");o.off("click");if(t.state()==="pending"){t.reject()}});n.ui.showDialog(n.$dialog)})};return e}();var bn=function(){function e(e){this.context=e;this.ui=t.summernote.ui;this.$body=t(document.body);this.$editor=e.layoutInfo.editor;this.options=e.options;this.lang=this.options.langInfo}e.prototype.initialize=function(){var t=this.options.dialogsInBody?this.$body:this.$editor;var e=['<p class="text-center">','<a href="http://summernote.org/" target="_blank">Summernote 0.8.9</a> Â· ','<a href="https://github.com/summernote/summernote" target="_blank">Project</a> Â· ','<a href="https://github.com/summernote/summernote/issues" target="_blank">Issues</a>',"</p>"].join("");this.$dialog=this.ui.dialog({title:this.lang.options.help,fade:this.options.dialogsFade,body:this.createShortcutList(),footer:e,callback:function(t){t.find(".modal-body,.note-modal-body").css({"max-height":300,overflow:"scroll"})}}).render().appendTo(t)};e.prototype.destroy=function(){this.ui.hideDialog(this.$dialog);this.$dialog.remove()};e.prototype.createShortcutList=function(){var e=this;var n=this.options.keyMap[ft.isMac?"mac":"pc"];return Object.keys(n).map(function(i){var o=n[i];var r=t('<div><div class="help-list-item"/></div>');r.append(t("<label><kbd>"+i+"</kdb></label>").css({width:180,"margin-right":10})).append(t("<span/>").html(e.context.memo("help."+o)||o));return r.html()}).join("")};e.prototype.showHelpDialog=function(){var e=this;return t.Deferred(function(t){e.ui.onDialogShown(e.$dialog,function(){e.context.triggerEvent("dialog.shown");t.resolve()});e.ui.showDialog(e.$dialog)}).promise()};e.prototype.show=function(){var t=this;this.context.invoke("editor.saveRange");this.showHelpDialog().then(function(){t.context.invoke("editor.restoreRange")})};return e}();var wn=20;var xn=function(){function e(e){var n=this;this.context=e;this.ui=t.summernote.ui;this.options=e.options;this.events={"summernote.keyup summernote.mouseup summernote.scroll":function(){n.update()},"summernote.disable summernote.change summernote.dialog.shown":function(){n.hide()},"summernote.focusout":function(t,e){if(ft.isFF){return}if(!e.relatedTarget||!He.ancestor(e.relatedTarget,j.eq(n.$popover[0]))){n.hide()}}}}e.prototype.shouldInitialize=function(){return this.options.airMode&&!tt.isEmpty(this.options.popover.air)};e.prototype.initialize=function(){this.$popover=this.ui.popover({className:"note-air-popover"}).render().appendTo(this.options.container);var t=this.$popover.find(".popover-content");this.context.invoke("buttons.build",t,this.options.popover.air)};e.prototype.destroy=function(){this.$popover.remove()};e.prototype.update=function(){var t=this.context.invoke("editor.currentStyle");if(t.range&&!t.range.isCollapsed()){var e=tt.last(t.range.getClientRects());if(e){var n=j.rect2bnd(e);this.$popover.css({display:"block",left:Math.max(n.left+n.width/2,0)-wn,top:n.top+n.height});this.context.invoke("buttons.updateCurrentStyle",this.$popover)}}else{this.hide()}};e.prototype.hide=function(){this.$popover.hide()};return e}();var Cn=5;var kn=function(){function e(e){var n=this;this.context=e;this.ui=t.summernote.ui;this.$editable=e.layoutInfo.editable;this.options=e.options;this.hint=this.options.hint||[];this.direction=this.options.hintDirection||"bottom";this.hints=t.isArray(this.hint)?this.hint:[this.hint];this.events={"summernote.keyup":function(t,e){if(!e.isDefaultPrevented()){n.handleKeyup(e)}},"summernote.keydown":function(t,e){n.handleKeydown(e)},"summernote.disable summernote.dialog.shown":function(){n.hide()}}}e.prototype.shouldInitialize=function(){return this.hints.length>0};e.prototype.initialize=function(){var e=this;this.lastWordRange=null;this.$popover=this.ui.popover({className:"note-hint-popover",hideArrow:true,direction:""}).render().appendTo(this.options.container);this.$popover.hide();this.$content=this.$popover.find(".popover-content,.note-popover-content");this.$content.on("click",".note-hint-item",function(){e.$content.find(".active").removeClass("active");t(e).addClass("active");e.replace()})};e.prototype.destroy=function(){this.$popover.remove()};e.prototype.selectItem=function(t){this.$content.find(".active").removeClass("active");t.addClass("active");this.$content[0].scrollTop=t[0].offsetTop-this.$content.innerHeight()/2};e.prototype.moveDown=function(){var t=this.$content.find(".note-hint-item.active");var e=t.next();if(e.length){this.selectItem(e)}else{var n=t.parent().next();if(!n.length){n=this.$content.find(".note-hint-group").first()}this.selectItem(n.find(".note-hint-item").first())}};e.prototype.moveUp=function(){var t=this.$content.find(".note-hint-item.active");var e=t.prev();if(e.length){this.selectItem(e)}else{var n=t.parent().prev();if(!n.length){n=this.$content.find(".note-hint-group").last()}this.selectItem(n.find(".note-hint-item").last())}};e.prototype.replace=function(){var t=this.$content.find(".note-hint-item.active");if(t.length){var e=this.nodeFromItem(t);this.lastWordRange.insertNode(e);Be.createFromNode(e).collapse().select();this.lastWordRange=null;this.hide();this.context.triggerEvent("change",this.$editable.html(),this.$editable[0]);this.context.invoke("editor.focus")}};e.prototype.nodeFromItem=function(t){var e=this.hints[t.data("index")];var n=t.data("item");var i=e.content?e.content(n):n;if(typeof i==="string"){i=He.createText(i)}return i};e.prototype.createItemTemplates=function(e,n){var i=this.hints[e];return n.map(function(n,o){var r=t('<div class="note-hint-item"/>');r.append(i.template?i.template(n):n+"");r.data({index:e,item:n});return r})};e.prototype.handleKeydown=function(t){if(!this.$popover.is(":visible")){return}if(t.keyCode===Fe.code.ENTER){t.preventDefault();this.replace()}else if(t.keyCode===Fe.code.UP){t.preventDefault();this.moveUp()}else if(t.keyCode===Fe.code.DOWN){t.preventDefault();this.moveDown()}};e.prototype.searchKeyword=function(t,e,n){var i=this.hints[t];if(i&&i.match.test(e)&&i.search){var o=i.match.exec(e);i.search(o[1],n)}else{n()}};e.prototype.createGroup=function(e,n){var i=this;var o=t('<div class="note-hint-group note-hint-group-'+e+'"/>');this.searchKeyword(e,n,function(t){t=t||[];if(t.length){o.html(i.createItemTemplates(e,t));i.show()}});return o};e.prototype.handleKeyup=function(t){var e=this;if(!tt.contains([Fe.code.ENTER,Fe.code.UP,Fe.code.DOWN],t.keyCode)){var n=this.context.invoke("editor.createRange").getWordRange();var i=n.toString();if(this.hints.length&&i){this.$content.empty();var o=j.rect2bnd(tt.last(n.getClientRects()));if(o){this.$popover.hide();this.lastWordRange=n;this.hints.forEach(function(t,n){if(t.match.test(i)){e.createGroup(n,i).appendTo(e.$content)}});this.$content.find(".note-hint-item:first").addClass("active");if(this.direction==="top"){this.$popover.css({left:o.left,top:o.top-this.$popover.outerHeight()-Cn})}else{this.$popover.css({left:o.left,top:o.top+o.height+Cn})}}}else{this.hide()}}};e.prototype.show=function(){this.$popover.show()};e.prototype.hide=function(){this.$popover.hide()};return e}();var Tn=function(){function e(e,n){this.ui=t.summernote.ui;this.$note=e;this.memos={};this.modules={};this.layoutInfo={};this.options=n;this.initialize()}e.prototype.initialize=function(){this.layoutInfo=this.ui.createLayout(this.$note,this.options);this._initialize();this.$note.hide();return this};e.prototype.destroy=function(){this._destroy();this.$note.removeData("summernote");this.ui.removeLayout(this.$note,this.layoutInfo)};e.prototype.reset=function(){var t=this.isDisabled();this.code(He.emptyPara);this._destroy();this._initialize();if(t){this.disable()}};e.prototype._initialize=function(){var e=this;var n=t.extend({},this.options.buttons);Object.keys(n).forEach(function(t){e.memo("button."+t,n[t])});var i=t.extend({},this.options.modules,t.summernote.plugins||{});Object.keys(i).forEach(function(t){e.module(t,i[t],true)});Object.keys(this.modules).forEach(function(t){e.initializeModule(t)})};e.prototype._destroy=function(){var t=this;Object.keys(this.modules).reverse().forEach(function(e){t.removeModule(e)});Object.keys(this.memos).forEach(function(e){t.removeMemo(e)});this.triggerEvent("destroy",this)};e.prototype.code=function(t){var e=this.invoke("codeview.isActivated");if(t===undefined){this.invoke("codeview.sync");return e?this.layoutInfo.codable.val():this.layoutInfo.editable.html()}else{if(e){this.layoutInfo.codable.val(t)}else{this.layoutInfo.editable.html(t)}this.$note.val(t);this.triggerEvent("change",t)}};e.prototype.isDisabled=function(){return this.layoutInfo.editable.attr("contenteditable")==="false"};e.prototype.enable=function(){this.layoutInfo.editable.attr("contenteditable",true);this.invoke("toolbar.activate",true);this.triggerEvent("disable",false)};e.prototype.disable=function(){if(this.invoke("codeview.isActivated")){this.invoke("codeview.deactivate")}this.layoutInfo.editable.attr("contenteditable",false);this.invoke("toolbar.deactivate",true);this.triggerEvent("disable",true)};e.prototype.triggerEvent=function(){var t=tt.head(arguments);var e=tt.tail(tt.from(arguments));var n=this.options.callbacks[j.namespaceToCamel(t,"on")];if(n){n.apply(this.$note[0],e)}this.$note.trigger("summernote."+t,e)};e.prototype.initializeModule=function(t){var e=this.modules[t];e.shouldInitialize=e.shouldInitialize||j.ok;if(!e.shouldInitialize()){return}if(e.initialize){e.initialize()}if(e.events){He.attachEvents(this.$note,e.events)}};e.prototype.module=function(t,e,n){if(arguments.length===1){return this.modules[t]}this.modules[t]=new e(this);if(!n){this.initializeModule(t)}};e.prototype.removeModule=function(t){var e=this.modules[t];if(e.shouldInitialize()){if(e.events){He.detachEvents(this.$note,e.events)}if(e.destroy){e.destroy()}}delete this.modules[t]};e.prototype.memo=function(t,e){if(arguments.length===1){return this.memos[t]}this.memos[t]=e};e.prototype.removeMemo=function(t){if(this.memos[t]&&this.memos[t].destroy){this.memos[t].destroy()}delete this.memos[t]};e.prototype.createInvokeHandlerAndUpdateState=function(t,e){var n=this;return function(i){n.createInvokeHandler(t,e)(i);n.invoke("buttons.updateCurrentStyle")}};e.prototype.createInvokeHandler=function(e,n){var i=this;return function(o){o.preventDefault();var r=t(o.target);i.invoke(e,n||r.closest("[data-value]").data("value"),r)}};e.prototype.invoke=function(){var t=tt.head(arguments);var e=tt.tail(tt.from(arguments));var n=t.split(".");var i=n.length>1;var o=i&&tt.head(n);var r=i?tt.last(n):tt.head(n);var s=this.modules[o||"editor"];if(!o&&this[r]){return this[r].apply(this,e)}else if(s&&s[r]&&s.shouldInitialize()){return s[r].apply(s,e)}};return e}();t.fn.extend({summernote:function(){var e=t.type(tt.head(arguments));var n=e==="string";var i=e==="object";var o=t.extend({},t.summernote.options,i?tt.head(arguments):{});o.langInfo=t.extend(true,{},t.summernote.lang["en-US"],t.summernote.lang[o.lang]);o.icons=t.extend(true,{},t.summernote.options.icons,o.icons);o.tooltip=o.tooltip==="auto"?!ft.isSupportTouch:o.tooltip;this.each(function(e,n){var i=t(n);if(!i.data("summernote")){var r=new Tn(i,o);i.data("summernote",r);i.data("summernote").triggerEvent("init",r.layoutInfo)}});var r=this.first();if(r.length){var s=r.data("summernote");if(n){return s.invoke.apply(s,tt.from(arguments))}else if(o.focus){s.invoke("editor.focus")}}return this}});t.summernote=t.extend(t.summernote,{version:"0.8.9",ui:w,dom:He,plugins:{},options:{modules:{editor:Xe,clipboard:Ye,dropzone:Je,codeview:tn,statusbar:nn,fullscreen:on,handle:rn,hintPopover:kn,autoLink:ln,autoSync:un,placeholder:cn,buttons:fn,toolbar:dn,linkDialog:hn,linkPopover:pn,imageDialog:vn,imagePopover:mn,tablePopover:gn,videoDialog:yn,helpDialog:bn,airPopover:xn},buttons:{},lang:"en-US",followingToolbar:true,otherStaticBar:"",toolbar:[["style",["style"]],["font",["bold","underline","clear"]],["fontname",["fontname"]],["color",["color"]],["para",["ul","ol","paragraph"]],["table",["table"]],["insert",["link","picture","video"]],["view",["fullscreen","codeview","help"]]],popatmouse:true,popover:{image:[["imagesize",["imageSize100","imageSize50","imageSize25"]],["float",["floatLeft","floatRight","floatNone"]],["remove",["removeMedia"]]],link:[["link",["linkDialogShow","unlink"]]],table:[["add",["addRowDown","addRowUp","addColLeft","addColRight"]],["delete",["deleteRow","deleteCol","deleteTable"]]],air:[["color",["color"]],["font",["bold","underline","clear"]],["para",["ul","paragraph"]],["table",["table"]],["insert",["link","picture"]]]},airMode:false,width:null,height:null,linkTargetBlank:true,focus:false,tabSize:4,styleWithSpan:true,shortcuts:true,textareaAutoSync:true,hintDirection:"bottom",tooltip:"auto",container:"body",maxTextLength:0,styleTags:["p","blockquote","pre","h1","h2","h3","h4","h5","h6"],fontNames:["Arial","Arial Black","Comic Sans MS","Courier New","Helvetica Neue","Helvetica","Impact","Lucida Grande","Tahoma","Times New Roman","Verdana"],fontSizes:["8","9","10","11","12","14","18","24","36"],colors:[["#000000","#424242","#636363","#9C9C94","#CEC6CE","#EFEFEF","#F7F7F7","#FFFFFF"],["#FF0000","#FF9C00","#FFFF00","#00FF00","#00FFFF","#0000FF","#9C00FF","#FF00FF"],["#F7C6CE","#FFE7CE","#FFEFC6","#D6EFD6","#CEDEE7","#CEE7F7","#D6D6E7","#E7D6DE"],["#E79C9C","#FFC69C","#FFE79C","#B5D6A5","#A5C6CE","#9CC6EF","#B5A5D6","#D6A5BD"],["#E76363","#F7AD6B","#FFD663","#94BD7B","#73A5AD","#6BADDE","#8C7BC6","#C67BA5"],["#CE0000","#E79439","#EFC631","#6BA54A","#4A7B8C","#3984C6","#634AA5","#A54A7B"],["#9C0000","#B56308","#BD9400","#397B21","#104A5A","#085294","#311873","#731842"],["#630000","#7B3900","#846300","#295218","#083139","#003163","#21104A","#4A1031"]],lineHeights:["1.0","1.2","1.4","1.5","1.6","1.8","2.0","3.0"],tableClassName:"table table-bordered",insertTableMaxSize:{col:10,row:10},dialogsInBody:false,dialogsFade:false,maximumImageFileSize:null,callbacks:{onInit:null,onFocus:null,onBlur:null,onBlurCodeview:null,onEnter:null,onKeyup:null,onKeydown:null,onImageUpload:null,onImageUploadError:null},codemirror:{mode:"text/html",htmlMode:true,lineNumbers:true},keyMap:{pc:{ENTER:"insertParagraph","CTRL+Z":"undo","CTRL+Y":"redo",TAB:"tab","SHIFT+TAB":"untab","CTRL+B":"bold","CTRL+I":"italic","CTRL+U":"underline","CTRL+SHIFT+S":"strikethrough","CTRL+BACKSLASH":"removeFormat","CTRL+SHIFT+L":"justifyLeft","CTRL+SHIFT+E":"justifyCenter","CTRL+SHIFT+R":"justifyRight","CTRL+SHIFT+J":"justifyFull","CTRL+SHIFT+NUM7":"insertUnorderedList","CTRL+SHIFT+NUM8":"insertOrderedList","CTRL+LEFTBRACKET":"outdent","CTRL+RIGHTBRACKET":"indent","CTRL+NUM0":"formatPara","CTRL+NUM1":"formatH1","CTRL+NUM2":"formatH2","CTRL+NUM3":"formatH3","CTRL+NUM4":"formatH4","CTRL+NUM5":"formatH5","CTRL+NUM6":"formatH6","CTRL+ENTER":"insertHorizontalRule","CTRL+K":"linkDialog.show"},mac:{ENTER:"insertParagraph","CMD+Z":"undo","CMD+SHIFT+Z":"redo",TAB:"tab","SHIFT+TAB":"untab","CMD+B":"bold","CMD+I":"italic","CMD+U":"underline","CMD+SHIFT+S":"strikethrough","CMD+BACKSLASH":"removeFormat","CMD+SHIFT+L":"justifyLeft","CMD+SHIFT+E":"justifyCenter","CMD+SHIFT+R":"justifyRight","CMD+SHIFT+J":"justifyFull","CMD+SHIFT+NUM7":"insertUnorderedList","CMD+SHIFT+NUM8":"insertOrderedList","CMD+LEFTBRACKET":"outdent","CMD+RIGHTBRACKET":"indent","CMD+NUM0":"formatPara","CMD+NUM1":"formatH1","CMD+NUM2":"formatH2","CMD+NUM3":"formatH3","CMD+NUM4":"formatH4","CMD+NUM5":"formatH5","CMD+NUM6":"formatH6","CMD+ENTER":"insertHorizontalRule","CMD+K":"linkDialog.show"}},icons:{align:"note-icon-align",alignCenter:"note-icon-align-center",alignJustify:"note-icon-align-justify",alignLeft:"note-icon-align-left",alignRight:"note-icon-align-right",rowBelow:"note-icon-row-below",colBefore:"note-icon-col-before",colAfter:"note-icon-col-after",rowAbove:"note-icon-row-above",rowRemove:"note-icon-row-remove",colRemove:"note-icon-col-remove",indent:"note-icon-align-indent",outdent:"note-icon-align-outdent",arrowsAlt:"note-icon-arrows-alt",bold:"note-icon-bold",caret:"note-icon-caret",circle:"note-icon-circle",close:"note-icon-close",code:"note-icon-code",eraser:"note-icon-eraser",font:"note-icon-font",frame:"note-icon-frame",italic:"note-icon-italic",link:"note-icon-link",unlink:"note-icon-chain-broken",magic:"note-icon-magic",menuCheck:"note-icon-menu-check",minus:"note-icon-minus",orderedlist:"note-icon-orderedlist",pencil:"note-icon-pencil",picture:"note-icon-picture",question:"note-icon-question",redo:"note-icon-redo",square:"note-icon-square",strikethrough:"note-icon-strikethrough",subscript:"note-icon-subscript",superscript:"note-icon-superscript",table:"note-icon-table",textHeight:"note-icon-text-height",trash:"note-icon-trash",underline:"note-icon-underline",undo:"note-icon-undo",unorderedlist:"note-icon-unorderedlist",video:"note-icon-video"}}})});(function(t){t.extend(t.summernote.lang,{"da-DK":{font:{bold:"Fed",italic:"Kursiv",underline:"Understreget",clear:"Fjern formatering",height:"HÃ¸jde",name:"Skrifttype",strikethrough:"Gennemstreget",subscript:"SÃ¦nket skrift",superscript:"HÃ¦vet skrift",size:"SkriftstÃ¸rrelse"},image:{image:"Billede",insert:"IndsÃ¦t billede",resizeFull:"Original stÃ¸rrelse",resizeHalf:"Halv stÃ¸rrelse",resizeQuarter:"Kvart stÃ¸rrelse",floatLeft:"Venstrestillet",floatRight:"HÃ¸jrestillet",floatNone:"Fjern formatering",shapeRounded:"Form: Runde kanter",shapeCircle:"Form: Cirkel",shapeThumbnail:"Form: Miniature",shapeNone:"Form: Ingen",dragImageHere:"TrÃ¦k billede hertil",dropImage:"Slip billede",selectFromFiles:"VÃ¦lg billed-fil",maximumFileSize:"Maks fil stÃ¸rrelse",maximumFileSizeError:"Filen er stÃ¸rre end maks tilladte fil stÃ¸rrelse!",url:"Billede URL",remove:"Fjern billede",original:"Original"},video:{video:"Video",videoLink:"Video Link",insert:"IndsÃ¦t Video",url:"Video URL?",providers:"(YouTube, Vimeo, Vine, Instagram, DailyMotion eller Youku)"},link:{link:"Link",insert:"IndsÃ¦t link",unlink:"Fjern link",edit:"Rediger",textToDisplay:"Visningstekst",url:"Hvor skal linket pege hen?",openInNewWindow:"Ãbn i nyt vindue"},table:{table:"Tabel",addRowAbove:"Add row above",addRowBelow:"Add row below",addColLeft:"Add column left",addColRight:"Add column right",delRow:"Delete row",delCol:"Delete column",delTable:"Delete table"},hr:{insert:"IndsÃ¦t horisontal linje"},style:{style:"Stil",p:"p",blockquote:"Citat",pre:"Kode",h1:"Overskrift 1",h2:"Overskrift 2",h3:"Overskrift 3",h4:"Overskrift 4",h5:"Overskrift 5",h6:"Overskrift 6"},lists:{unordered:"Punktopstillet liste",ordered:"Nummereret liste"},options:{help:"HjÃ¦lp",fullscreen:"Fuld skÃ¦rm",codeview:"HTML-Visning"},paragraph:{paragraph:"Afsnit",outdent:"Formindsk indryk",indent:"ForÃ¸g indryk",left:"Venstrestillet",center:"Centreret",right:"HÃ¸jrestillet",justify:"Blokjuster"},color:{recent:"Nyligt valgt farve",more:"Flere farver",background:"Baggrund",foreground:"Forgrund",transparent:"Transparent",setTransparent:"SÃ¦t transparent",reset:"Nulstil",resetToDefault:"Gendan standardindstillinger"},shortcut:{shortcuts:"Genveje",close:"Luk",textFormatting:"Tekstformatering",action:"Handling",paragraphFormatting:"Afsnitsformatering",documentStyle:"Dokumentstil",extraKeys:"Extra keys"},help:{insertParagraph:"Insert Paragraph",undo:"Undoes the last command",redo:"Redoes the last command",tab:"Tab",untab:"Untab",bold:"Set a bold style",italic:"Set a italic style",underline:"Set a underline style",strikethrough:"Set a strikethrough style",removeFormat:"Clean a style",justifyLeft:"Set left align",justifyCenter:"Set center align",justifyRight:"Set right align",justifyFull:"Set full align",insertUnorderedList:"Toggle unordered list",insertOrderedList:"Toggle ordered list",outdent:"Outdent on current paragraph",indent:"Indent on current paragraph",formatPara:"Change current block's format as a paragraph(P tag)",formatH1:"Change current block's format as H1",formatH2:"Change current block's format as H2",formatH3:"Change current block's format as H3",formatH4:"Change current block's format as H4",formatH5:"Change current block's format as H5",formatH6:"Change current block's format as H6",insertHorizontalRule:"Insert horizontal rule","linkDialog.show":"Show Link Dialog"},history:{undo:"Fortryd",redo:"Annuller fortryd"},specialChar:{specialChar:"SPECIAL CHARACTERS",select:"Select Special characters"}}})})(jQuery);var NoteSaveButton=function(t){var e=$.summernote.ui;var n=e.button({contents:'<i class="fa fa-child"/>Save',tooltip:"save",click:function(){$.post(window.location.pathname,t.invoke("code"))}});return n.render()};$("#pageedit").on("click",function(){if($(this).hasClass("active")){$(".inlineedit").summernote("destroy")}else{$(".inlineedit").summernote({lang:lang,focus:true,buttons:{save:NoteSaveButton},toolbar:[["style",["style"]],["font",["fontname","fontsize"]],["textstyle",["bold","italic","underline","strikethrough","superscript","subscript","clear"]],["color",["color"]],["para",["ul","ol","paragraph","height"]],["insert",["picture","link","video"]],["table",["table"]],["hr",["hr"]],["view",["fullscreen","codeview"]],["edit",["undo","redo"]],["help",["help"]],["save",["save"]]]})}});var Router=function(){var t="";var e=[];var n=function t(e,n){n=n===undefined?[]:n;this.base=this.base===undefined?"":this.base;var i=this.routes[e];if(i===undefined){return undefined}var o=this.base+i.path;for(var r in n){if(n.hasOwnProperty(r)){o=o.replace("{"+r+"}",n[r])}}return o};var i=function t(e){this.base=e};var o=function t(e){this.routes=e};return{generatePath:n,setBasePath:i,setRoutes:o}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
