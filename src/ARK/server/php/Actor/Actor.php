<?php

/**
 * ARK Item Entity
 *
 * This file is automatically generated as part of ARK, the Archaeological Recording Kit.
 */
namespace ARK\Actor;

use ARK\Model\Item;
use ARK\Model\ItemTrait;
use ARK\Model\LocalText;
use ARK\ORM\ORM;
use ARK\Workflow\Permission;
use ARK\Workflow\Role;
use ARK\Workflow\Security\ActorRole;
use Doctrine\Common\Collections\ArrayCollection;

class Actor implements Item
{
    use ItemTrait;

    protected $roles = null;

    public function __construct(string $schema = 'core.actor')
    {
        $this->construct($schema);
    }

    public function fullname()
    {
        $fullname = $this->property('fullname')->value();
        return ($fullname ? $fullname->content() : '');
    }

    public function setFullname(string $name)
    {
        $fullname = new LocalText();
        $fullname->setContent($name);
        $this->property('fullname')->setValue($fullname);
    }

    public function hasRole($role)
    {
        foreach ($this->roles() as $has) {
            if ($has == $role or $has->role()->id() == $role) {
                return true;
            }
        }
        return false;
    }

    public function roles()
    {
        if ($this->roles === null) {
            $ars = ORM::findBy(ActorRole::class, ['actor' => $this->id()]);
            foreach($ars as $ar) {
                if ($ar->isEnabled()) {
                    $this->roles[] = $ar->role();
                }
            }
        }
        return $this->roles;
    }

    public function addRole($role, Actor $agentFor = null)
    {
        if ($this->hasRole($role) && $agentFor === null) {
            return;
        }
        if (is_string($role)) {
            $role = ORM::find(Role::class, $role);
        }
        if ($role instanceof Role) {
            $actorRole = new ActorRole($actor, $role, $agentFor);
            ORM::persist($actorRole);
            $this->roles->append($actorRole);
            ORM::persist($this);
        }
    }

    public function hasPermission($permission = null)
    {
        if ($permission === null) {
            return true;
        }
        if (is_string($permission)) {
            $permission = ORM::find(Permission::class, $permission);
        }
        if ($permission instanceof Permission) {
            foreach ($this->roles() as $role) {
                if ($role->role()->hasPermission($permission)) {
                    return true;
                }
            }
        }
        return false;
    }
}
