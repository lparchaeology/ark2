<?php

/**
 * ARK Command Handler.
 *
 * Copyright (C) 2017  L - P : Heritage LLP.
 *
 * This file is part of ARK, the Archaeological Recording Kit.
 *
 * ARK is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ARK is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ARK.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author     John Layt <j.layt@lparchaeology.com>
 * @copyright  2017 L - P : Heritage LLP.
 * @license    GPL-3.0+
 * @see        http://ark.lparchaeology.com/
 * @since      2.0
 */

namespace ARK\ORM\Bus;

use ARK\ARK;
use ARK\ORM\ClassMetadata;
use ARK\ORM\Command\GenerateItemEntityMessage;
use ARK\ORM\ItemEntityGenerator;
use ARK\ORM\ItemEntityMappingDriver;
use ARK\Service;

class GenerateItemEntityHandler
{
    protected static $classTemplate =
'<?php

/**
 * ARK Item Entity
 *
 * This file is automatically generated as part of ARK, the Archaeological Recording Kit.
 */

namespace <namespace>;

use ARK\Model\Item;
use ARK\Model\ItemTrait;

class <entity> implements Item
{
    use ItemTrait;

    public function __construct($schema = \'<schema>\')
    {
        $this->construct($schema);
    }
}
';

    protected static $subclassTemplate =
'<?php

/**
 * ARK Item Entity
 *
 * This file is automatically generated as part of ARK, the Archaeological Recording Kit.
 */

namespace <namespace>;

use <parent>;

class <entity> extends <extends>
{
}
';

    public function __invoke(GenerateItemEntityMessage $message) : void
    {
        $module = Service::database()->getModuleForClassName($message->classname());
        $class = $this->generateEntityClass($message->namespace(), $message->entity(), $message->schema());
        $this->writeEntityFile($message->project(), $message->classname(), $class);
        $subclasses = Service::database()->getSubclassEntities($module['module']);
        // TODO File base type
        foreach ($subclasses as $class) {
            $classname = $class['entity'];
            $pos = strrpos($classname, '\\');
            $namespace = substr($classname, 0, $pos);
            $entity = substr($classname, $pos + 1);
            $subclass = $this->generateEntitySubclass($namespace, $entity, $message->classname(), $message->entity());
            $this->writeEntityFile($message->project(), $class['entity'], $subclass, $class);
        }
        /*
        TODO Make this work properly!!!
        $generator = new ItemEntityGenerator;
        $metadata = new ClassMetadata($message->classname());
        $driver = new ItemEntityMappingDriver($message->namespace());
        $driver->loadMetadataForGenerator($message->classname(), $metadata);
        $generator->writeEntityClass($metadata, ARK::autoloadDir($message->project()), $message->project());
        */
    }

    private function writeEntityFile(string $project, string $classname, string $class) : void
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $classname);
        $path = str_replace($project, ARK::autoloadDir($project), $path).'.php';
        $dir = dirname($path);
        if (!is_dir($dir)) {
            mkdir($dir, 0775, true);
        }
        file_put_contents($path, $class);
        chmod($path, 0664);
    }

    private function generateEntityClass(string $namespace, string $entity, string $schema) : string
    {
        $body = str_replace('<namespace>', $namespace, self::$classTemplate);
        $body = str_replace('<entity>', $entity, $body);
        $body = str_replace('<schema>', $schema, $body);
        return $body;
    }

    private function generateEntitySubclass(string $namespace, string $entity, string $parent, string $extends) : string
    {
        $body = str_replace('<namespace>', $namespace, self::$subclassTemplate);
        $body = str_replace('<entity>', $entity, $body);
        $body = str_replace('<parent>', $parent, $body);
        $body = str_replace('<extends>', $extends, $body);
        return $body;
    }
}
