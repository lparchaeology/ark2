<?php

/**
 * ARK ORM Item Entity Generator
 *
 * Copyright (C) 2017  L - P : Heritage LLP.
 *
 * This file is part of ARK, the Archaeological Recording Kit.
 *
 * ARK is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ARK is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ARK.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author     John Layt <j.layt@lparchaeology.com>
 * @copyright  2017 L - P : Heritage LLP.
 * @license    GPL-3.0+
 * @see        http://ark.lparchaeology.com/
 * @since      2.0
 * @php        >=5.6, >=7.0
 */

namespace ARK\ORM;

use Doctrine\ORM\Mapping\ClassMetadataInfo;
use Doctrine\ORM\Tools\EntityGenerator;

class ItemEntityGenerator extends EntityGenerator
{
    protected static $classTemplate =
'<?php

/**
 * ARK Item Entity
 *
 * This file is automatically generated as part of ARK, the Archaeological Recording Kit.
 */

<namespace>
<useStatement>
<entityAnnotation>
<entityClassName>
{
<spaces>use ItemTrait;

<entityBody>
}
';

    protected static $constructorMethodTemplate =
'/**
 * Constructor
 */
public function __construct($schema)
{
<spaces>$this->schma = $schema;
<spaces><collections>
}
';

    protected $interfaces = [];

    public function __construct()
    {
        parent::__construct();
        $this->setRegenerateEntityIfExists(true);
    }

    protected function implementsInterfaces()
    {
        return !empty($this->interfaces);
    }

    public function setInterfaces(array $interfaces)
    {
        $this->interfaces = $interfaces;
    }

    protected function getInterfaces()
    {
        return $this->interfaces;
    }

    protected function getInterfaceNames()
    {
        $names = [];
        foreach ($this->interfaces as $interface) {
            $refl = new \ReflectionClass($interface);
            $names[] = '\\' . $refl->getName();
        }
        return $names;
    }

    public function writeEntityClass(ClassMetadataInfo $metadata, $outputDirectory, $project = 'ARK')
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $metadata->name);
        $path = str_replace($project, $outputDirectory, $path).$this->extension;
        $dir = dirname($path);

        if (!is_dir($dir)) {
            mkdir($dir, 0775, true);
        }

        $this->staticReflection[$metadata->name] = ['properties' => [], 'methods' => []];

        file_put_contents($path, $this->generateEntityClass($metadata));
        chmod($path, 0664);
    }

    protected function generateEntityUse()
    {
        $use = parent::generateEntityUse();
        if ($this->extendsClass()) {
            $class = $this->getClassToExtend();
            $use .= "\nuse $class;\n";
        }
        foreach ($this->interfaces as $interface) {
            $use .= "\nuse $interface;\n";
        }
        $use .= "\nuse ARK\Model\ItemTrait;\n";
        return $use;
    }

    protected function generateEntityClassName(ClassMetadataInfo $metadata)
    {
        $class = parent::generateEntityClassName($metadata);
        $class .= ($this->implementsInterfaces() ? ' implements ' . implode(', ', $this->getInterfaceNames()) : null);
        return $class;
    }

    protected function generateEntityConstructor(ClassMetadataInfo $metadata)
    {
        return (parent::generateEntityConstructor($metadata) ?: $this->prefixCodeWithSpaces(static::$constructorMethodTemplate));
    }
}
