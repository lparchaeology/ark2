(function(e,t){"use strict";if(typeof module==="object"&&typeof module.exports==="object"){module.exports=e.document?t(e,true):function(e){if(!e.document){throw new Error("jQuery requires a window with a document")}return t(e)}}else{t(e)}})(typeof window!=="undefined"?window:this,function(e,t){"use strict";var i=[];var n=e.document;var s=Object.getPrototypeOf;var r=i.slice;var a=i.concat;var o=i.push;var l=i.indexOf;var u={};var f=u.toString;var c=u.hasOwnProperty;var d=c.toString;var h=d.call(Object);var p={};function m(e,t){t=t||n;var i=t.createElement("script");i.text=e;t.head.appendChild(i).parentNode.removeChild(i)}var g="3.2.1",v=function(e,t){return new v.fn.init(e,t)},y=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,b=/^-ms-/,w=/-([a-z])/g,x=function(e,t){return t.toUpperCase()};v.fn=v.prototype={jquery:g,constructor:v,length:0,toArray:function(){return r.call(this)},get:function(e){if(e==null){return r.call(this)}return e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=v.merge(this.constructor(),e);t.prevObject=this;return t},each:function(e){return v.each(this,e)},map:function(e){return this.pushStack(v.map(this,function(t,i){return e.call(t,i,t)}))},slice:function(){return this.pushStack(r.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(i>=0&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:o,sort:i.sort,splice:i.splice};v.extend=v.fn.extend=function(){var e,t,i,n,s,r,a=arguments[0]||{},o=1,l=arguments.length,u=false;if(typeof a==="boolean"){u=a;a=arguments[o]||{};o++}if(typeof a!=="object"&&!v.isFunction(a)){a={}}if(o===l){a=this;o--}for(;o<l;o++){if((e=arguments[o])!=null){for(t in e){i=a[t];n=e[t];if(a===n){continue}if(u&&n&&(v.isPlainObject(n)||(s=Array.isArray(n)))){if(s){s=false;r=i&&Array.isArray(i)?i:[]}else{r=i&&v.isPlainObject(i)?i:{}}a[t]=v.extend(u,r,n)}else if(n!==undefined){a[t]=n}}}}return a};v.extend({expando:"jQuery"+(g+Math.random()).replace(/\D/g,""),isReady:true,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return v.type(e)==="function"},isWindow:function(e){return e!=null&&e===e.window},isNumeric:function(e){var t=v.type(e);return(t==="number"||t==="string")&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,i;if(!e||f.call(e)!=="[object Object]"){return false}t=s(e);if(!t){return true}i=c.call(t,"constructor")&&t.constructor;return typeof i==="function"&&d.call(i)===h},isEmptyObject:function(e){var t;for(t in e){return false}return true},type:function(e){if(e==null){return e+""}return typeof e==="object"||typeof e==="function"?u[f.call(e)]||"object":typeof e},globalEval:function(e){m(e)},camelCase:function(e){return e.replace(b,"ms-").replace(w,x)},each:function(e,t){var i,n=0;if(C(e)){i=e.length;for(;n<i;n++){if(t.call(e[n],n,e[n])===false){break}}}else{for(n in e){if(t.call(e[n],n,e[n])===false){break}}}return e},trim:function(e){return e==null?"":(e+"").replace(y,"")},makeArray:function(e,t){var i=t||[];if(e!=null){if(C(Object(e))){v.merge(i,typeof e==="string"?[e]:e)}else{o.call(i,e)}}return i},inArray:function(e,t,i){return t==null?-1:l.call(t,e,i)},merge:function(e,t){var i=+t.length,n=0,s=e.length;for(;n<i;n++){e[s++]=t[n]}e.length=s;return e},grep:function(e,t,i){var n,s=[],r=0,a=e.length,o=!i;for(;r<a;r++){n=!t(e[r],r);if(n!==o){s.push(e[r])}}return s},map:function(e,t,i){var n,s,r=0,o=[];if(C(e)){n=e.length;for(;r<n;r++){s=t(e[r],r,i);if(s!=null){o.push(s)}}}else{for(r in e){s=t(e[r],r,i);if(s!=null){o.push(s)}}}return a.apply([],o)},guid:1,proxy:function(e,t){var i,n,s;if(typeof t==="string"){i=e[t];t=e;e=i}if(!v.isFunction(e)){return undefined}n=r.call(arguments,2);s=function(){return e.apply(t||this,n.concat(r.call(arguments)))};s.guid=e.guid=e.guid||v.guid++;return s},now:Date.now,support:p});if(typeof Symbol==="function"){v.fn[Symbol.iterator]=i[Symbol.iterator]}v.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){u["[object "+t+"]"]=t.toLowerCase()});function C(e){var t=!!e&&"length"in e&&e.length,i=v.type(e);if(i==="function"||v.isWindow(e)){return false}return i==="array"||t===0||typeof t==="number"&&t>0&&t-1 in e}var T=function(e){var t,i,n,s,r,a,o,l,u,f,c,d,h,p,m,g,v,y,b,w="sizzle"+1*new Date,x=e.document,C=0,T=0,_=ae(),k=ae(),D=ae(),S=function(e,t){if(e===t){c=true}return 0},$={}.hasOwnProperty,A=[],E=A.pop,M=A.push,P=A.push,O=A.slice,F=function(e,t){var i=0,n=e.length;for(;i<n;i++){if(e[i]===t){return i}}return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",N="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",U="\\["+j+"*("+N+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+j+"*\\]",L=":("+N+")(?:\\(("+"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|"+"((?:\\\\.|[^\\\\()[\\]]|"+U+")*)|"+".*"+")\\)|)",R=new RegExp(j+"+","g"),H=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),z=new RegExp("^"+j+"*,"+j+"*"),Y=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),V=new RegExp("="+j+"*([^\\]'\"]*?)"+j+"*\\]","g"),B=new RegExp(L),W=new RegExp("^"+N+"$"),q={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N+"|[*])"),ATTR:new RegExp("^"+U),PSEUDO:new RegExp("^"+L),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},Z=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+j+"?|("+j+")|.)","ig"),ee=function(e,t,i){var n="0x"+t-65536;return n!==n||i?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,n&1023|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){if(t){if(e==="\0"){return"ï¿½"}return e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" "}return"\\"+e},ne=function(){d()},se=ye(function(e){return e.disabled===true&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{P.apply(A=O.call(x.childNodes),x.childNodes);A[x.childNodes.length].nodeType}catch(e){P={apply:A.length?function(e,t){M.apply(e,O.call(t))}:function(e,t){var i=e.length,n=0;while(e[i++]=t[n++]){}e.length=i-1}}}function re(e,t,n,s){var r,o,u,f,c,p,v,y=t&&t.ownerDocument,C=t?t.nodeType:9;n=n||[];if(typeof e!=="string"||!e||C!==1&&C!==9&&C!==11){return n}if(!s){if((t?t.ownerDocument||t:x)!==h){d(t)}t=t||h;if(m){if(C!==11&&(c=X.exec(e))){if(r=c[1]){if(C===9){if(u=t.getElementById(r)){if(u.id===r){n.push(u);return n}}else{return n}}else{if(y&&(u=y.getElementById(r))&&b(t,u)&&u.id===r){n.push(u);return n}}}else if(c[2]){P.apply(n,t.getElementsByTagName(e));return n}else if((r=c[3])&&i.getElementsByClassName&&t.getElementsByClassName){P.apply(n,t.getElementsByClassName(r));return n}}if(i.qsa&&!D[e+" "]&&(!g||!g.test(e))){if(C!==1){y=t;v=e}else if(t.nodeName.toLowerCase()!=="object"){if(f=t.getAttribute("id")){f=f.replace(te,ie)}else{t.setAttribute("id",f=w)}p=a(e);o=p.length;while(o--){p[o]="#"+f+" "+ve(p[o])}v=p.join(",");y=K.test(e)&&me(t.parentNode)||t}if(v){try{P.apply(n,y.querySelectorAll(v));return n}catch(e){}finally{if(f===w){t.removeAttribute("id")}}}}}}return l(e.replace(H,"$1"),t,n,s)}function ae(){var e=[];function t(i,s){if(e.push(i+" ")>n.cacheLength){delete t[e.shift()]}return t[i+" "]=s}return t}function oe(e){e[w]=true;return e}function le(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return false}finally{if(t.parentNode){t.parentNode.removeChild(t)}t=null}}function ue(e,t){var i=e.split("|"),s=i.length;while(s--){n.attrHandle[i[s]]=t}}function fe(e,t){var i=t&&e,n=i&&e.nodeType===1&&t.nodeType===1&&e.sourceIndex-t.sourceIndex;if(n){return n}if(i){while(i=i.nextSibling){if(i===t){return-1}}}return e?1:-1}function ce(e){return function(t){var i=t.nodeName.toLowerCase();return i==="input"&&t.type===e}}function de(e){return function(t){var i=t.nodeName.toLowerCase();return(i==="input"||i==="button")&&t.type===e}}function he(e){return function(t){if("form"in t){if(t.parentNode&&t.disabled===false){if("label"in t){if("label"in t.parentNode){return t.parentNode.disabled===e}else{return t.disabled===e}}return t.isDisabled===e||t.isDisabled!==!e&&se(t)===e}return t.disabled===e}else if("label"in t){return t.disabled===e}return false}}function pe(e){return oe(function(t){t=+t;return oe(function(i,n){var s,r=e([],i.length,t),a=r.length;while(a--){if(i[s=r[a]]){i[s]=!(n[s]=i[s])}}})})}function me(e){return e&&typeof e.getElementsByTagName!=="undefined"&&e}i=re.support={};r=re.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?t.nodeName!=="HTML":false};d=re.setDocument=function(e){var t,s,a=e?e.ownerDocument||e:x;if(a===h||a.nodeType!==9||!a.documentElement){return h}h=a;p=h.documentElement;m=!r(h);if(x!==h&&(s=h.defaultView)&&s.top!==s){if(s.addEventListener){s.addEventListener("unload",ne,false)}else if(s.attachEvent){s.attachEvent("onunload",ne)}}i.attributes=le(function(e){e.className="i";return!e.getAttribute("className")});i.getElementsByTagName=le(function(e){e.appendChild(h.createComment(""));return!e.getElementsByTagName("*").length});i.getElementsByClassName=Q.test(h.getElementsByClassName);i.getById=le(function(e){p.appendChild(e).id=w;return!h.getElementsByName||!h.getElementsByName(w).length});if(i.getById){n.filter["ID"]=function(e){var t=e.replace(J,ee);return function(e){return e.getAttribute("id")===t}};n.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&m){var i=t.getElementById(e);return i?[i]:[]}}}else{n.filter["ID"]=function(e){var t=e.replace(J,ee);return function(e){var i=typeof e.getAttributeNode!=="undefined"&&e.getAttributeNode("id");return i&&i.value===t}};n.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&m){var i,n,s,r=t.getElementById(e);if(r){i=r.getAttributeNode("id");if(i&&i.value===e){return[r]}s=t.getElementsByName(e);n=0;while(r=s[n++]){i=r.getAttributeNode("id");if(i&&i.value===e){return[r]}}}return[]}}}n.find["TAG"]=i.getElementsByTagName?function(e,t){if(typeof t.getElementsByTagName!=="undefined"){return t.getElementsByTagName(e)}else if(i.qsa){return t.querySelectorAll(e)}}:function(e,t){var i,n=[],s=0,r=t.getElementsByTagName(e);if(e==="*"){while(i=r[s++]){if(i.nodeType===1){n.push(i)}}return n}return r};n.find["CLASS"]=i.getElementsByClassName&&function(e,t){if(typeof t.getElementsByClassName!=="undefined"&&m){return t.getElementsByClassName(e)}};v=[];g=[];if(i.qsa=Q.test(h.querySelectorAll)){le(function(e){p.appendChild(e).innerHTML="<a id='"+w+"'></a>"+"<select id='"+w+"-\r\\' msallowcapture=''>"+"<option selected=''></option></select>";if(e.querySelectorAll("[msallowcapture^='']").length){g.push("[*^$]="+j+"*(?:''|\"\")")}if(!e.querySelectorAll("[selected]").length){g.push("\\["+j+"*(?:value|"+I+")")}if(!e.querySelectorAll("[id~="+w+"-]").length){g.push("~=")}if(!e.querySelectorAll(":checked").length){g.push(":checked")}if(!e.querySelectorAll("a#"+w+"+*").length){g.push(".#.+[+~]")}});le(function(e){e.innerHTML="<a href='' disabled='disabled'></a>"+"<select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden");e.appendChild(t).setAttribute("name","D");if(e.querySelectorAll("[name=d]").length){g.push("name"+j+"*[*^$|!~]?=")}if(e.querySelectorAll(":enabled").length!==2){g.push(":enabled",":disabled")}p.appendChild(e).disabled=true;if(e.querySelectorAll(":disabled").length!==2){g.push(":enabled",":disabled")}e.querySelectorAll("*,:x");g.push(",.*:")})}if(i.matchesSelector=Q.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector)){le(function(e){i.disconnectedMatch=y.call(e,"*");y.call(e,"[s!='']:x");v.push("!=",L)})}g=g.length&&new RegExp(g.join("|"));v=v.length&&new RegExp(v.join("|"));t=Q.test(p.compareDocumentPosition);b=t||Q.test(p.contains)?function(e,t){var i=e.nodeType===9?e.documentElement:e,n=t&&t.parentNode;return e===n||!!(n&&n.nodeType===1&&(i.contains?i.contains(n):e.compareDocumentPosition&&e.compareDocumentPosition(n)&16))}:function(e,t){if(t){while(t=t.parentNode){if(t===e){return true}}}return false};S=t?function(e,t){if(e===t){c=true;return 0}var n=!e.compareDocumentPosition-!t.compareDocumentPosition;if(n){return n}n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1;if(n&1||!i.sortDetached&&t.compareDocumentPosition(e)===n){if(e===h||e.ownerDocument===x&&b(x,e)){return-1}if(t===h||t.ownerDocument===x&&b(x,t)){return 1}return f?F(f,e)-F(f,t):0}return n&4?-1:1}:function(e,t){if(e===t){c=true;return 0}var i,n=0,s=e.parentNode,r=t.parentNode,a=[e],o=[t];if(!s||!r){return e===h?-1:t===h?1:s?-1:r?1:f?F(f,e)-F(f,t):0}else if(s===r){return fe(e,t)}i=e;while(i=i.parentNode){a.unshift(i)}i=t;while(i=i.parentNode){o.unshift(i)}while(a[n]===o[n]){n++}return n?fe(a[n],o[n]):a[n]===x?-1:o[n]===x?1:0};return h};re.matches=function(e,t){return re(e,null,null,t)};re.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h){d(e)}t=t.replace(V,"='$1']");if(i.matchesSelector&&m&&!D[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t))){try{var n=y.call(e,t);if(n||i.disconnectedMatch||e.document&&e.document.nodeType!==11){return n}}catch(e){}}return re(t,h,null,[e]).length>0};re.contains=function(e,t){if((e.ownerDocument||e)!==h){d(e)}return b(e,t)};re.attr=function(e,t){if((e.ownerDocument||e)!==h){d(e)}var s=n.attrHandle[t.toLowerCase()],r=s&&$.call(n.attrHandle,t.toLowerCase())?s(e,t,!m):undefined;return r!==undefined?r:i.attributes||!m?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null};re.escape=function(e){return(e+"").replace(te,ie)};re.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)};re.uniqueSort=function(e){var t,n=[],s=0,r=0;c=!i.detectDuplicates;f=!i.sortStable&&e.slice(0);e.sort(S);if(c){while(t=e[r++]){if(t===e[r]){s=n.push(r)}}while(s--){e.splice(n[s],1)}}f=null;return e};s=re.getText=function(e){var t,i="",n=0,r=e.nodeType;if(!r){while(t=e[n++]){i+=s(t)}}else if(r===1||r===9||r===11){if(typeof e.textContent==="string"){return e.textContent}else{for(e=e.firstChild;e;e=e.nextSibling){i+=s(e)}}}else if(r===3||r===4){return e.nodeValue}return i};n=re.selectors={cacheLength:50,createPseudo:oe,match:q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){e[1]=e[1].replace(J,ee);e[3]=(e[3]||e[4]||e[5]||"").replace(J,ee);if(e[2]==="~="){e[3]=" "+e[3]+" "}return e.slice(0,4)},CHILD:function(e){e[1]=e[1].toLowerCase();if(e[1].slice(0,3)==="nth"){if(!e[3]){re.error(e[0])}e[4]=+(e[4]?e[5]+(e[6]||1):2*(e[3]==="even"||e[3]==="odd"));e[5]=+(e[7]+e[8]||e[3]==="odd")}else if(e[3]){re.error(e[0])}return e},PSEUDO:function(e){var t,i=!e[6]&&e[2];if(q["CHILD"].test(e[0])){return null}if(e[3]){e[2]=e[4]||e[5]||""}else if(i&&B.test(i)&&(t=a(i,true))&&(t=i.indexOf(")",i.length-t)-i.length)){e[0]=e[0].slice(0,t);e[2]=i.slice(0,t)}return e.slice(0,3)}},filter:{TAG:function(e){var t=e.replace(J,ee).toLowerCase();return e==="*"?function(){return true}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+j+")"+e+"("+j+"|$)"))&&_(e,function(e){return t.test(typeof e.className==="string"&&e.className||typeof e.getAttribute!=="undefined"&&e.getAttribute("class")||"")})},ATTR:function(e,t,i){return function(n){var s=re.attr(n,e);if(s==null){return t==="!="}if(!t){return true}s+="";return t==="="?s===i:t==="!="?s!==i:t==="^="?i&&s.indexOf(i)===0:t==="*="?i&&s.indexOf(i)>-1:t==="$="?i&&s.slice(-i.length)===i:t==="~="?(" "+s.replace(R," ")+" ").indexOf(i)>-1:t==="|="?s===i||s.slice(0,i.length+1)===i+"-":false}},CHILD:function(e,t,i,n,s){var r=e.slice(0,3)!=="nth",a=e.slice(-4)!=="last",o=t==="of-type";return n===1&&s===0?function(e){return!!e.parentNode}:function(t,i,l){var u,f,c,d,h,p,m=r!==a?"nextSibling":"previousSibling",g=t.parentNode,v=o&&t.nodeName.toLowerCase(),y=!l&&!o,b=false;if(g){if(r){while(m){d=t;while(d=d[m]){if(o?d.nodeName.toLowerCase()===v:d.nodeType===1){return false}}p=m=e==="only"&&!p&&"nextSibling"}return true}p=[a?g.firstChild:g.lastChild];if(a&&y){d=g;c=d[w]||(d[w]={});f=c[d.uniqueID]||(c[d.uniqueID]={});u=f[e]||[];h=u[0]===C&&u[1];b=h&&u[2];d=h&&g.childNodes[h];while(d=++h&&d&&d[m]||(b=h=0)||p.pop()){if(d.nodeType===1&&++b&&d===t){f[e]=[C,h,b];break}}}else{if(y){d=t;c=d[w]||(d[w]={});f=c[d.uniqueID]||(c[d.uniqueID]={});u=f[e]||[];h=u[0]===C&&u[1];b=h}if(b===false){while(d=++h&&d&&d[m]||(b=h=0)||p.pop()){if((o?d.nodeName.toLowerCase()===v:d.nodeType===1)&&++b){if(y){c=d[w]||(d[w]={});f=c[d.uniqueID]||(c[d.uniqueID]={});f[e]=[C,b]}if(d===t){break}}}}}b-=s;return b===n||b%n===0&&b/n>=0}}},PSEUDO:function(e,t){var i,s=n.pseudos[e]||n.setFilters[e.toLowerCase()]||re.error("unsupported pseudo: "+e);if(s[w]){return s(t)}if(s.length>1){i=[e,e,"",t];return n.setFilters.hasOwnProperty(e.toLowerCase())?oe(function(e,i){var n,r=s(e,t),a=r.length;while(a--){n=F(e,r[a]);e[n]=!(i[n]=r[a])}}):function(e){return s(e,0,i)}}return s}},pseudos:{not:oe(function(e){var t=[],i=[],n=o(e.replace(H,"$1"));return n[w]?oe(function(e,t,i,s){var r,a=n(e,null,s,[]),o=e.length;while(o--){if(r=a[o]){e[o]=!(t[o]=r)}}}):function(e,s,r){t[0]=e;n(t,null,r,i);t[0]=null;return!i.pop()}}),has:oe(function(e){return function(t){return re(e,t).length>0}}),contains:oe(function(e){e=e.replace(J,ee);return function(t){return(t.textContent||t.innerText||s(t)).indexOf(e)>-1}}),lang:oe(function(e){if(!W.test(e||"")){re.error("unsupported lang: "+e)}e=e.replace(J,ee).toLowerCase();return function(t){var i;do{if(i=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang")){i=i.toLowerCase();return i===e||i.indexOf(e+"-")===0}}while((t=t.parentNode)&&t.nodeType===1);return false}}),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(false),disabled:he(true),checked:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&!!e.checked||t==="option"&&!!e.selected},selected:function(e){if(e.parentNode){e.parentNode.selectedIndex}return e.selected===true},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling){if(e.nodeType<6){return false}}return true},parent:function(e){return!n.pseudos["empty"](e)},header:function(e){return G.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&e.type==="button"||t==="button"},text:function(e){var t;return e.nodeName.toLowerCase()==="input"&&e.type==="text"&&((t=e.getAttribute("type"))==null||t.toLowerCase()==="text")},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,i){return[i<0?i+t:i]}),even:pe(function(e,t){var i=0;for(;i<t;i+=2){e.push(i)}return e}),odd:pe(function(e,t){var i=1;for(;i<t;i+=2){e.push(i)}return e}),lt:pe(function(e,t,i){var n=i<0?i+t:i;for(;--n>=0;){e.push(n)}return e}),gt:pe(function(e,t,i){var n=i<0?i+t:i;for(;++n<t;){e.push(n)}return e})}};n.pseudos["nth"]=n.pseudos["eq"];for(t in{radio:true,checkbox:true,file:true,password:true,image:true}){n.pseudos[t]=ce(t)}for(t in{submit:true,reset:true}){n.pseudos[t]=de(t)}function ge(){}ge.prototype=n.filters=n.pseudos;n.setFilters=new ge;a=re.tokenize=function(e,t){var i,s,r,a,o,l,u,f=k[e+" "];if(f){return t?0:f.slice(0)}o=e;l=[];u=n.preFilter;while(o){if(!i||(s=z.exec(o))){if(s){o=o.slice(s[0].length)||o}l.push(r=[])}i=false;if(s=Y.exec(o)){i=s.shift();r.push({value:i,type:s[0].replace(H," ")});o=o.slice(i.length)}for(a in n.filter){if((s=q[a].exec(o))&&(!u[a]||(s=u[a](s)))){i=s.shift();r.push({value:i,type:a,matches:s});o=o.slice(i.length)}}if(!i){break}}return t?o.length:o?re.error(e):k(e,l).slice(0)};function ve(e){var t=0,i=e.length,n="";for(;t<i;t++){n+=e[t].value}return n}function ye(e,t,i){var n=t.dir,s=t.next,r=s||n,a=i&&r==="parentNode",o=T++;return t.first?function(t,i,s){while(t=t[n]){if(t.nodeType===1||a){return e(t,i,s)}}return false}:function(t,i,l){var u,f,c,d=[C,o];if(l){while(t=t[n]){if(t.nodeType===1||a){if(e(t,i,l)){return true}}}}else{while(t=t[n]){if(t.nodeType===1||a){c=t[w]||(t[w]={});f=c[t.uniqueID]||(c[t.uniqueID]={});if(s&&s===t.nodeName.toLowerCase()){t=t[n]||t}else if((u=f[r])&&u[0]===C&&u[1]===o){return d[2]=u[2]}else{f[r]=d;if(d[2]=e(t,i,l)){return true}}}}}return false}}function be(e){return e.length>1?function(t,i,n){var s=e.length;while(s--){if(!e[s](t,i,n)){return false}}return true}:e[0]}function we(e,t,i){var n=0,s=t.length;for(;n<s;n++){re(e,t[n],i)}return i}function xe(e,t,i,n,s){var r,a=[],o=0,l=e.length,u=t!=null;for(;o<l;o++){if(r=e[o]){if(!i||i(r,n,s)){a.push(r);if(u){t.push(o)}}}}return a}function Ce(e,t,i,n,s,r){if(n&&!n[w]){n=Ce(n)}if(s&&!s[w]){s=Ce(s,r)}return oe(function(r,a,o,l){var u,f,c,d=[],h=[],p=a.length,m=r||we(t||"*",o.nodeType?[o]:o,[]),g=e&&(r||!t)?xe(m,d,e,o,l):m,v=i?s||(r?e:p||n)?[]:a:g;if(i){i(g,v,o,l)}if(n){u=xe(v,h);n(u,[],o,l);f=u.length;while(f--){if(c=u[f]){v[h[f]]=!(g[h[f]]=c)}}}if(r){if(s||e){if(s){u=[];f=v.length;while(f--){if(c=v[f]){u.push(g[f]=c)}}s(null,v=[],u,l)}f=v.length;while(f--){if((c=v[f])&&(u=s?F(r,c):d[f])>-1){r[u]=!(a[u]=c)}}}}else{v=xe(v===a?v.splice(p,v.length):v);if(s){s(null,a,v,l)}else{P.apply(a,v)}}})}function Te(e){var t,i,s,r=e.length,a=n.relative[e[0].type],o=a||n.relative[" "],l=a?1:0,f=ye(function(e){return e===t},o,true),c=ye(function(e){return F(t,e)>-1},o,true),d=[function(e,i,n){var s=!a&&(n||i!==u)||((t=i).nodeType?f(e,i,n):c(e,i,n));t=null;return s}];for(;l<r;l++){if(i=n.relative[e[l].type]){d=[ye(be(d),i)]}else{i=n.filter[e[l].type].apply(null,e[l].matches);if(i[w]){s=++l;for(;s<r;s++){if(n.relative[e[s].type]){break}}return Ce(l>1&&be(d),l>1&&ve(e.slice(0,l-1).concat({value:e[l-2].type===" "?"*":""})).replace(H,"$1"),i,l<s&&Te(e.slice(l,s)),s<r&&Te(e=e.slice(s)),s<r&&ve(e))}d.push(i)}}return be(d)}function _e(e,t){var i=t.length>0,s=e.length>0,r=function(r,a,o,l,f){var c,p,g,v=0,y="0",b=r&&[],w=[],x=u,T=r||s&&n.find["TAG"]("*",f),_=C+=x==null?1:Math.random()||.1,k=T.length;if(f){u=a===h||a||f}for(;y!==k&&(c=T[y])!=null;y++){if(s&&c){p=0;if(!a&&c.ownerDocument!==h){d(c);o=!m}while(g=e[p++]){if(g(c,a||h,o)){l.push(c);break}}if(f){C=_}}if(i){if(c=!g&&c){v--}if(r){b.push(c)}}}v+=y;if(i&&y!==v){p=0;while(g=t[p++]){g(b,w,a,o)}if(r){if(v>0){while(y--){if(!(b[y]||w[y])){w[y]=E.call(l)}}}w=xe(w)}P.apply(l,w);if(f&&!r&&w.length>0&&v+t.length>1){re.uniqueSort(l)}}if(f){C=_;u=x}return b};return i?oe(r):r}o=re.compile=function(e,t){var i,n=[],s=[],r=D[e+" "];if(!r){if(!t){t=a(e)}i=t.length;while(i--){r=Te(t[i]);if(r[w]){n.push(r)}else{s.push(r)}}r=D(e,_e(s,n));r.selector=e}return r};l=re.select=function(e,t,i,s){var r,l,u,f,c,d=typeof e==="function"&&e,h=!s&&a(e=d.selector||e);i=i||[];if(h.length===1){l=h[0]=h[0].slice(0);if(l.length>2&&(u=l[0]).type==="ID"&&t.nodeType===9&&m&&n.relative[l[1].type]){t=(n.find["ID"](u.matches[0].replace(J,ee),t)||[])[0];if(!t){return i}else if(d){t=t.parentNode}e=e.slice(l.shift().value.length)}r=q["needsContext"].test(e)?0:l.length;while(r--){u=l[r];if(n.relative[f=u.type]){break}if(c=n.find[f]){if(s=c(u.matches[0].replace(J,ee),K.test(l[0].type)&&me(t.parentNode)||t)){l.splice(r,1);e=s.length&&ve(l);if(!e){P.apply(i,s);return i}break}}}}(d||o(e,h))(s,t,!m,i,!t||K.test(e)&&me(t.parentNode)||t);return i};i.sortStable=w.split("").sort(S).join("")===w;i.detectDuplicates=!!c;d();i.sortDetached=le(function(e){return e.compareDocumentPosition(h.createElement("fieldset"))&1});if(!le(function(e){e.innerHTML="<a href='#'></a>";return e.firstChild.getAttribute("href")==="#"})){ue("type|href|height|width",function(e,t,i){if(!i){return e.getAttribute(t,t.toLowerCase()==="type"?1:2)}})}if(!i.attributes||!le(function(e){e.innerHTML="<input/>";e.firstChild.setAttribute("value","");return e.firstChild.getAttribute("value")===""})){ue("value",function(e,t,i){if(!i&&e.nodeName.toLowerCase()==="input"){return e.defaultValue}})}if(!le(function(e){return e.getAttribute("disabled")==null})){ue(I,function(e,t,i){var n;if(!i){return e[t]===true?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}})}return re}(e);v.find=T;v.expr=T.selectors;v.expr[":"]=v.expr.pseudos;v.uniqueSort=v.unique=T.uniqueSort;v.text=T.getText;v.isXMLDoc=T.isXML;v.contains=T.contains;v.escapeSelector=T.escape;var _=function(e,t,i){var n=[],s=i!==undefined;while((e=e[t])&&e.nodeType!==9){if(e.nodeType===1){if(s&&v(e).is(i)){break}n.push(e)}}return n};var k=function(e,t){var i=[];for(;e;e=e.nextSibling){if(e.nodeType===1&&e!==t){i.push(e)}}return i};var D=v.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var $=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;var A=/^.[^:#\[\.,]*$/;function E(e,t,i){if(v.isFunction(t)){return v.grep(e,function(e,n){return!!t.call(e,n,e)!==i})}if(t.nodeType){return v.grep(e,function(e){return e===t!==i})}if(typeof t!=="string"){return v.grep(e,function(e){return l.call(t,e)>-1!==i})}if(A.test(t)){return v.filter(t,e,i)}t=v.filter(t,e);return v.grep(e,function(e){return l.call(t,e)>-1!==i&&e.nodeType===1})}v.filter=function(e,t,i){var n=t[0];if(i){e=":not("+e+")"}if(t.length===1&&n.nodeType===1){return v.find.matchesSelector(n,e)?[n]:[]}return v.find.matches(e,v.grep(t,function(e){return e.nodeType===1}))};v.fn.extend({find:function(e){var t,i,n=this.length,s=this;if(typeof e!=="string"){return this.pushStack(v(e).filter(function(){for(t=0;t<n;t++){if(v.contains(s[t],this)){return true}}}))}i=this.pushStack([]);for(t=0;t<n;t++){v.find(e,s[t],i)}return n>1?v.uniqueSort(i):i},filter:function(e){return this.pushStack(E(this,e||[],false))},not:function(e){return this.pushStack(E(this,e||[],true))},is:function(e){return!!E(this,typeof e==="string"&&D.test(e)?v(e):e||[],false).length}});var M,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,O=v.fn.init=function(e,t,i){var s,r;if(!e){return this}i=i||M;if(typeof e==="string"){if(e[0]==="<"&&e[e.length-1]===">"&&e.length>=3){s=[null,e,null]}else{s=P.exec(e)}if(s&&(s[1]||!t)){if(s[1]){t=t instanceof v?t[0]:t;v.merge(this,v.parseHTML(s[1],t&&t.nodeType?t.ownerDocument||t:n,true));if($.test(s[1])&&v.isPlainObject(t)){for(s in t){if(v.isFunction(this[s])){this[s](t[s])}else{this.attr(s,t[s])}}}return this}else{r=n.getElementById(s[2]);if(r){this[0]=r;this.length=1}return this}}else if(!t||t.jquery){return(t||i).find(e)}else{return this.constructor(t).find(e)}}else if(e.nodeType){this[0]=e;this.length=1;return this}else if(v.isFunction(e)){return i.ready!==undefined?i.ready(e):e(v)}return v.makeArray(e,this)};O.prototype=v.fn;M=v(n);var F=/^(?:parents|prev(?:Until|All))/,I={children:true,contents:true,next:true,prev:true};v.fn.extend({has:function(e){var t=v(e,this),i=t.length;return this.filter(function(){var e=0;for(;e<i;e++){if(v.contains(this,t[e])){return true}}})},closest:function(e,t){var i,n=0,s=this.length,r=[],a=typeof e!=="string"&&v(e);if(!D.test(e)){for(;n<s;n++){for(i=this[n];i&&i!==t;i=i.parentNode){if(i.nodeType<11&&(a?a.index(i)>-1:i.nodeType===1&&v.find.matchesSelector(i,e))){r.push(i);break}}}}return this.pushStack(r.length>1?v.uniqueSort(r):r)},index:function(e){if(!e){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1}if(typeof e==="string"){return l.call(v(e),this[0])}return l.call(this,e.jquery?e[0]:e)},add:function(e,t){return this.pushStack(v.uniqueSort(v.merge(this.get(),v(e,t))))},addBack:function(e){return this.add(e==null?this.prevObject:this.prevObject.filter(e))}});function j(e,t){while((e=e[t])&&e.nodeType!==1){}return e}v.each({parent:function(e){var t=e.parentNode;return t&&t.nodeType!==11?t:null},parents:function(e){return _(e,"parentNode")},parentsUntil:function(e,t,i){return _(e,"parentNode",i)},next:function(e){return j(e,"nextSibling")},prev:function(e){return j(e,"previousSibling")},nextAll:function(e){return _(e,"nextSibling")},prevAll:function(e){return _(e,"previousSibling")},nextUntil:function(e,t,i){return _(e,"nextSibling",i)},prevUntil:function(e,t,i){return _(e,"previousSibling",i)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){if(S(e,"iframe")){return e.contentDocument}if(S(e,"template")){e=e.content||e}return v.merge([],e.childNodes)}},function(e,t){v.fn[e]=function(i,n){var s=v.map(this,t,i);if(e.slice(-5)!=="Until"){n=i}if(n&&typeof n==="string"){s=v.filter(n,s)}if(this.length>1){if(!I[e]){v.uniqueSort(s)}if(F.test(e)){s.reverse()}}return this.pushStack(s)}});var N=/[^\x20\t\r\n\f]+/g;function U(e){var t={};v.each(e.match(N)||[],function(e,i){t[i]=true});return t}v.Callbacks=function(e){e=typeof e==="string"?U(e):v.extend({},e);var t,i,n,s,r=[],a=[],o=-1,l=function(){s=s||e.once;n=t=true;for(;a.length;o=-1){i=a.shift();while(++o<r.length){if(r[o].apply(i[0],i[1])===false&&e.stopOnFalse){o=r.length;i=false}}}if(!e.memory){i=false}t=false;if(s){if(i){r=[]}else{r=""}}},u={add:function(){if(r){if(i&&!t){o=r.length-1;a.push(i)}(function t(i){v.each(i,function(i,n){if(v.isFunction(n)){if(!e.unique||!u.has(n)){r.push(n)}}else if(n&&n.length&&v.type(n)!=="string"){t(n)}})})(arguments);if(i&&!t){l()}}return this},remove:function(){v.each(arguments,function(e,t){var i;while((i=v.inArray(t,r,i))>-1){r.splice(i,1);if(i<=o){o--}}});return this},has:function(e){return e?v.inArray(e,r)>-1:r.length>0},empty:function(){if(r){r=[]}return this},disable:function(){s=a=[];r=i="";return this},disabled:function(){return!r},lock:function(){s=a=[];if(!i&&!t){r=i=""}return this},locked:function(){return!!s},fireWith:function(e,i){if(!s){i=i||[];i=[e,i.slice?i.slice():i];a.push(i);if(!t){l()}}return this},fire:function(){u.fireWith(this,arguments);return this},fired:function(){return!!n}};return u};function L(e){return e}function R(e){throw e}function H(e,t,i,n){var s;try{if(e&&v.isFunction(s=e.promise)){s.call(e).done(t).fail(i)}else if(e&&v.isFunction(s=e.then)){s.call(e,t,i)}else{t.apply(undefined,[e].slice(n))}}catch(e){i.apply(undefined,[e])}}v.extend({Deferred:function(t){var i=[["notify","progress",v.Callbacks("memory"),v.Callbacks("memory"),2],["resolve","done",v.Callbacks("once memory"),v.Callbacks("once memory"),0,"resolved"],["reject","fail",v.Callbacks("once memory"),v.Callbacks("once memory"),1,"rejected"]],n="pending",s={state:function(){return n},always:function(){r.done(arguments).fail(arguments);return this},catch:function(e){return s.then(null,e)},pipe:function(){var e=arguments;return v.Deferred(function(t){v.each(i,function(i,n){var s=v.isFunction(e[n[4]])&&e[n[4]];r[n[1]](function(){var e=s&&s.apply(this,arguments);if(e&&v.isFunction(e.promise)){e.promise().progress(t.notify).done(t.resolve).fail(t.reject)}else{t[n[0]+"With"](this,s?[e]:arguments)}})});e=null}).promise()},then:function(t,n,s){var r=0;function a(t,i,n,s){return function(){var o=this,l=arguments,u=function(){var e,u;if(t<r){return}e=n.apply(o,l);if(e===i.promise()){throw new TypeError("Thenable self-resolution")}u=e&&(typeof e==="object"||typeof e==="function")&&e.then;if(v.isFunction(u)){if(s){u.call(e,a(r,i,L,s),a(r,i,R,s))}else{r++;u.call(e,a(r,i,L,s),a(r,i,R,s),a(r,i,L,i.notifyWith))}}else{if(n!==L){o=undefined;l=[e]}(s||i.resolveWith)(o,l)}},f=s?u:function(){try{u()}catch(e){if(v.Deferred.exceptionHook){v.Deferred.exceptionHook(e,f.stackTrace)}if(t+1>=r){if(n!==R){o=undefined;l=[e]}i.rejectWith(o,l)}}};if(t){f()}else{if(v.Deferred.getStackHook){f.stackTrace=v.Deferred.getStackHook()}e.setTimeout(f)}}}return v.Deferred(function(e){i[0][3].add(a(0,e,v.isFunction(s)?s:L,e.notifyWith));i[1][3].add(a(0,e,v.isFunction(t)?t:L));i[2][3].add(a(0,e,v.isFunction(n)?n:R))}).promise()},promise:function(e){return e!=null?v.extend(e,s):s}},r={};v.each(i,function(e,t){var a=t[2],o=t[5];s[t[1]]=a.add;if(o){a.add(function(){n=o},i[3-e][2].disable,i[0][2].lock)}a.add(t[3].fire);r[t[0]]=function(){r[t[0]+"With"](this===r?undefined:this,arguments);return this};r[t[0]+"With"]=a.fireWith});s.promise(r);if(t){t.call(r,r)}return r},when:function(e){var t=arguments.length,i=t,n=Array(i),s=r.call(arguments),a=v.Deferred(),o=function(e){return function(i){n[e]=this;s[e]=arguments.length>1?r.call(arguments):i;if(!--t){a.resolveWith(n,s)}}};if(t<=1){H(e,a.done(o(i)).resolve,a.reject,!t);if(a.state()==="pending"||v.isFunction(s[i]&&s[i].then)){return a.then()}}while(i--){H(s[i],o(i),a.reject)}return a.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;v.Deferred.exceptionHook=function(t,i){if(e.console&&e.console.warn&&t&&z.test(t.name)){e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,i)}};v.readyException=function(t){e.setTimeout(function(){throw t})};var Y=v.Deferred();v.fn.ready=function(e){Y.then(e).catch(function(e){v.readyException(e)});return this};v.extend({isReady:false,readyWait:1,ready:function(e){if(e===true?--v.readyWait:v.isReady){return}v.isReady=true;if(e!==true&&--v.readyWait>0){return}Y.resolveWith(n,[v])}});v.ready.then=Y.then;function V(){n.removeEventListener("DOMContentLoaded",V);e.removeEventListener("load",V);v.ready()}if(n.readyState==="complete"||n.readyState!=="loading"&&!n.documentElement.doScroll){e.setTimeout(v.ready)}else{n.addEventListener("DOMContentLoaded",V);e.addEventListener("load",V)}var B=function(e,t,i,n,s,r,a){var o=0,l=e.length,u=i==null;if(v.type(i)==="object"){s=true;for(o in i){B(e,t,o,i[o],true,r,a)}}else if(n!==undefined){s=true;if(!v.isFunction(n)){a=true}if(u){if(a){t.call(e,n);t=null}else{u=t;t=function(e,t,i){return u.call(v(e),i)}}}if(t){for(;o<l;o++){t(e[o],i,a?n:n.call(e[o],o,t(e[o],i)))}}}if(s){return e}if(u){return t.call(e)}return l?t(e[0],i):r};var W=function(e){return e.nodeType===1||e.nodeType===9||!+e.nodeType};function q(){this.expando=v.expando+q.uid++}q.uid=1;q.prototype={cache:function(e){var t=e[this.expando];if(!t){t={};if(W(e)){if(e.nodeType){e[this.expando]=t}else{Object.defineProperty(e,this.expando,{value:t,configurable:true})}}}return t},set:function(e,t,i){var n,s=this.cache(e);if(typeof t==="string"){s[v.camelCase(t)]=i}else{for(n in t){s[v.camelCase(n)]=t[n]}}return s},get:function(e,t){return t===undefined?this.cache(e):e[this.expando]&&e[this.expando][v.camelCase(t)]},access:function(e,t,i){if(t===undefined||t&&typeof t==="string"&&i===undefined){return this.get(e,t)}this.set(e,t,i);return i!==undefined?i:t},remove:function(e,t){var i,n=e[this.expando];if(n===undefined){return}if(t!==undefined){if(Array.isArray(t)){t=t.map(v.camelCase)}else{t=v.camelCase(t);t=t in n?[t]:t.match(N)||[]}i=t.length;while(i--){delete n[t[i]]}}if(t===undefined||v.isEmptyObject(n)){if(e.nodeType){e[this.expando]=undefined}else{delete e[this.expando]}}},hasData:function(e){var t=e[this.expando];return t!==undefined&&!v.isEmptyObject(t)}};var Z=new q;var G=new q;var Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,X=/[A-Z]/g;function K(e){if(e==="true"){return true}if(e==="false"){return false}if(e==="null"){return null}if(e===+e+""){return+e}if(Q.test(e)){return JSON.parse(e)}return e}function J(e,t,i){var n;if(i===undefined&&e.nodeType===1){n="data-"+t.replace(X,"-$&").toLowerCase();i=e.getAttribute(n);if(typeof i==="string"){try{i=K(i)}catch(e){}G.set(e,t,i)}else{i=undefined}}return i}v.extend({hasData:function(e){return G.hasData(e)||Z.hasData(e)},data:function(e,t,i){return G.access(e,t,i)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,i){return Z.access(e,t,i)},_removeData:function(e,t){Z.remove(e,t)}});v.fn.extend({data:function(e,t){var i,n,s,r=this[0],a=r&&r.attributes;if(e===undefined){if(this.length){s=G.get(r);if(r.nodeType===1&&!Z.get(r,"hasDataAttrs")){i=a.length;while(i--){if(a[i]){n=a[i].name;if(n.indexOf("data-")===0){n=v.camelCase(n.slice(5));J(r,n,s[n])}}}Z.set(r,"hasDataAttrs",true)}}return s}if(typeof e==="object"){return this.each(function(){G.set(this,e)})}return B(this,function(t){var i;if(r&&t===undefined){i=G.get(r,e);if(i!==undefined){return i}i=J(r,e);if(i!==undefined){return i}return}this.each(function(){G.set(this,e,t)})},null,t,arguments.length>1,null,true)},removeData:function(e){return this.each(function(){G.remove(this,e)})}});v.extend({queue:function(e,t,i){var n;if(e){t=(t||"fx")+"queue";n=Z.get(e,t);if(i){if(!n||Array.isArray(i)){n=Z.access(e,t,v.makeArray(i))}else{n.push(i)}}return n||[]}},dequeue:function(e,t){t=t||"fx";var i=v.queue(e,t),n=i.length,s=i.shift(),r=v._queueHooks(e,t),a=function(){v.dequeue(e,t)};if(s==="inprogress"){s=i.shift();n--}if(s){if(t==="fx"){i.unshift("inprogress")}delete r.stop;s.call(e,a,r)}if(!n&&r){r.empty.fire()}},_queueHooks:function(e,t){var i=t+"queueHooks";return Z.get(e,i)||Z.access(e,i,{empty:v.Callbacks("once memory").add(function(){Z.remove(e,[t+"queue",i])})})}});v.fn.extend({queue:function(e,t){var i=2;if(typeof e!=="string"){t=e;e="fx";i--}if(arguments.length<i){return v.queue(this[0],e)}return t===undefined?this:this.each(function(){var i=v.queue(this,e,t);v._queueHooks(this,e);if(e==="fx"&&i[0]!=="inprogress"){v.dequeue(this,e)}})},dequeue:function(e){return this.each(function(){v.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,s=v.Deferred(),r=this,a=this.length,o=function(){if(!--n){s.resolveWith(r,[r])}};if(typeof e!=="string"){t=e;e=undefined}e=e||"fx";while(a--){i=Z.get(r[a],e+"queueHooks");if(i&&i.empty){n++;i.empty.add(o)}}o();return s.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i");var ie=["Top","Right","Bottom","Left"];var ne=function(e,t){e=t||e;return e.style.display==="none"||e.style.display===""&&v.contains(e.ownerDocument,e)&&v.css(e,"display")==="none"};var se=function(e,t,i,n){var s,r,a={};for(r in t){a[r]=e.style[r];e.style[r]=t[r]}s=i.apply(e,n||[]);for(r in t){e.style[r]=a[r]}return s};function re(e,t,i,n){var s,r=1,a=20,o=n?function(){return n.cur()}:function(){return v.css(e,t,"")},l=o(),u=i&&i[3]||(v.cssNumber[t]?"":"px"),f=(v.cssNumber[t]||u!=="px"&&+l)&&te.exec(v.css(e,t));if(f&&f[3]!==u){u=u||f[3];i=i||[];f=+l||1;do{r=r||".5";f=f/r;v.style(e,t,f+u)}while(r!==(r=o()/l)&&r!==1&&--a)}if(i){f=+f||+l||0;s=i[1]?f+(i[1]+1)*i[2]:+i[2];if(n){n.unit=u;n.start=f;n.end=s}}return s}var ae={};function oe(e){var t,i=e.ownerDocument,n=e.nodeName,s=ae[n];if(s){return s}t=i.body.appendChild(i.createElement(n));s=v.css(t,"display");t.parentNode.removeChild(t);if(s==="none"){s="block"}ae[n]=s;return s}function le(e,t){var i,n,s=[],r=0,a=e.length;for(;r<a;r++){n=e[r];if(!n.style){continue}i=n.style.display;if(t){if(i==="none"){s[r]=Z.get(n,"display")||null;if(!s[r]){n.style.display=""}}if(n.style.display===""&&ne(n)){s[r]=oe(n)}}else{if(i!=="none"){s[r]="none";Z.set(n,"display",i)}}}for(r=0;r<a;r++){if(s[r]!=null){e[r].style.display=s[r]}}return e}v.fn.extend({show:function(){return le(this,true)},hide:function(){return le(this)},toggle:function(e){if(typeof e==="boolean"){return e?this.show():this.hide()}return this.each(function(){if(ne(this)){v(this).show()}else{v(this).hide()}})}});var ue=/^(?:checkbox|radio)$/i;var fe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i;var ce=/^$|\/(?:java|ecma)script/i;var de={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};de.optgroup=de.option;de.tbody=de.tfoot=de.colgroup=de.caption=de.thead;de.th=de.td;function he(e,t){var i;if(typeof e.getElementsByTagName!=="undefined"){i=e.getElementsByTagName(t||"*")}else if(typeof e.querySelectorAll!=="undefined"){i=e.querySelectorAll(t||"*")}else{i=[]}if(t===undefined||t&&S(e,t)){return v.merge([e],i)}return i}function pe(e,t){var i=0,n=e.length;for(;i<n;i++){Z.set(e[i],"globalEval",!t||Z.get(t[i],"globalEval"))}}var me=/<|&#?\w+;/;function ge(e,t,i,n,s){var r,a,o,l,u,f,c=t.createDocumentFragment(),d=[],h=0,p=e.length;for(;h<p;h++){r=e[h];if(r||r===0){if(v.type(r)==="object"){v.merge(d,r.nodeType?[r]:r)}else if(!me.test(r)){d.push(t.createTextNode(r))}else{a=a||c.appendChild(t.createElement("div"));o=(fe.exec(r)||["",""])[1].toLowerCase();l=de[o]||de._default;a.innerHTML=l[1]+v.htmlPrefilter(r)+l[2];f=l[0];while(f--){a=a.lastChild}v.merge(d,a.childNodes);a=c.firstChild;a.textContent=""}}}c.textContent="";h=0;while(r=d[h++]){if(n&&v.inArray(r,n)>-1){if(s){s.push(r)}continue}u=v.contains(r.ownerDocument,r);a=he(c.appendChild(r),"script");if(u){pe(a)}if(i){f=0;while(r=a[f++]){if(ce.test(r.type||"")){i.push(r)}}}}return c}(function(){var e=n.createDocumentFragment(),t=e.appendChild(n.createElement("div")),i=n.createElement("input");i.setAttribute("type","radio");i.setAttribute("checked","checked");i.setAttribute("name","t");t.appendChild(i);p.checkClone=t.cloneNode(true).cloneNode(true).lastChild.checked;t.innerHTML="<textarea>x</textarea>";p.noCloneChecked=!!t.cloneNode(true).lastChild.defaultValue})();var ve=n.documentElement;var ye=/^key/,be=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,we=/^([^.]*)(?:\.(.+)|)/;function xe(){return true}function Ce(){return false}function Te(){try{return n.activeElement}catch(e){}}function _e(e,t,i,n,s,r){var a,o;if(typeof t==="object"){if(typeof i!=="string"){n=n||i;i=undefined}for(o in t){_e(e,o,i,n,t[o],r)}return e}if(n==null&&s==null){s=i;n=i=undefined}else if(s==null){if(typeof i==="string"){s=n;n=undefined}else{s=n;n=i;i=undefined}}if(s===false){s=Ce}else if(!s){return e}if(r===1){a=s;s=function(e){v().off(e);return a.apply(this,arguments)};s.guid=a.guid||(a.guid=v.guid++)}return e.each(function(){v.event.add(this,t,s,n,i)})}v.event={global:{},add:function(e,t,i,n,s){var r,a,o,l,u,f,c,d,h,p,m,g=Z.get(e);if(!g){return}if(i.handler){r=i;i=r.handler;s=r.selector}if(s){v.find.matchesSelector(ve,s)}if(!i.guid){i.guid=v.guid++}if(!(l=g.events)){l=g.events={}}if(!(a=g.handle)){a=g.handle=function(t){return typeof v!=="undefined"&&v.event.triggered!==t.type?v.event.dispatch.apply(e,arguments):undefined}}t=(t||"").match(N)||[""];u=t.length;while(u--){o=we.exec(t[u])||[];h=m=o[1];p=(o[2]||"").split(".").sort();if(!h){continue}c=v.event.special[h]||{};h=(s?c.delegateType:c.bindType)||h;c=v.event.special[h]||{};f=v.extend({type:h,origType:m,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&v.expr.match.needsContext.test(s),namespace:p.join(".")},r);if(!(d=l[h])){d=l[h]=[];d.delegateCount=0;if(!c.setup||c.setup.call(e,n,p,a)===false){if(e.addEventListener){e.addEventListener(h,a)}}}if(c.add){c.add.call(e,f);if(!f.handler.guid){f.handler.guid=i.guid}}if(s){d.splice(d.delegateCount++,0,f)}else{d.push(f)}v.event.global[h]=true}},remove:function(e,t,i,n,s){var r,a,o,l,u,f,c,d,h,p,m,g=Z.hasData(e)&&Z.get(e);if(!g||!(l=g.events)){return}t=(t||"").match(N)||[""];u=t.length;while(u--){o=we.exec(t[u])||[];h=m=o[1];p=(o[2]||"").split(".").sort();if(!h){for(h in l){v.event.remove(e,h+t[u],i,n,true)}continue}c=v.event.special[h]||{};h=(n?c.delegateType:c.bindType)||h;d=l[h]||[];o=o[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)");a=r=d.length;while(r--){f=d[r];if((s||m===f.origType)&&(!i||i.guid===f.guid)&&(!o||o.test(f.namespace))&&(!n||n===f.selector||n==="**"&&f.selector)){d.splice(r,1);if(f.selector){d.delegateCount--}if(c.remove){c.remove.call(e,f)}}}if(a&&!d.length){if(!c.teardown||c.teardown.call(e,p,g.handle)===false){v.removeEvent(e,h,g.handle)}delete l[h]}}if(v.isEmptyObject(l)){Z.remove(e,"handle events")}},dispatch:function(e){var t=v.event.fix(e);var i,n,s,r,a,o,l=new Array(arguments.length),u=(Z.get(this,"events")||{})[t.type]||[],f=v.event.special[t.type]||{};l[0]=t;for(i=1;i<arguments.length;i++){l[i]=arguments[i]}t.delegateTarget=this;if(f.preDispatch&&f.preDispatch.call(this,t)===false){return}o=v.event.handlers.call(this,t,u);i=0;while((r=o[i++])&&!t.isPropagationStopped()){t.currentTarget=r.elem;n=0;while((a=r.handlers[n++])&&!t.isImmediatePropagationStopped()){if(!t.rnamespace||t.rnamespace.test(a.namespace)){t.handleObj=a;t.data=a.data;s=((v.event.special[a.origType]||{}).handle||a.handler).apply(r.elem,l);if(s!==undefined){if((t.result=s)===false){t.preventDefault();t.stopPropagation()}}}}}if(f.postDispatch){f.postDispatch.call(this,t)}return t.result},handlers:function(e,t){var i,n,s,r,a,o=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!(e.type==="click"&&e.button>=1)){for(;u!==this;u=u.parentNode||this){if(u.nodeType===1&&!(e.type==="click"&&u.disabled===true)){r=[];a={};for(i=0;i<l;i++){n=t[i];s=n.selector+" ";if(a[s]===undefined){a[s]=n.needsContext?v(s,this).index(u)>-1:v.find(s,this,null,[u]).length}if(a[s]){r.push(n)}}if(r.length){o.push({elem:u,handlers:r})}}}}u=this;if(l<t.length){o.push({elem:u,handlers:t.slice(l)})}return o},addProp:function(e,t){Object.defineProperty(v.Event.prototype,e,{enumerable:true,configurable:true,get:v.isFunction(t)?function(){if(this.originalEvent){return t(this.originalEvent)}}:function(){if(this.originalEvent){return this.originalEvent[e]}},set:function(t){Object.defineProperty(this,e,{enumerable:true,configurable:true,writable:true,value:t})}})},fix:function(e){return e[v.expando]?e:new v.Event(e)},special:{load:{noBubble:true},focus:{trigger:function(){if(this!==Te()&&this.focus){this.focus();return false}},delegateType:"focusin"},blur:{trigger:function(){if(this===Te()&&this.blur){this.blur();return false}},delegateType:"focusout"},click:{trigger:function(){if(this.type==="checkbox"&&this.click&&S(this,"input")){this.click();return false}},_default:function(e){return S(e.target,"a")}},beforeunload:{postDispatch:function(e){if(e.result!==undefined&&e.originalEvent){e.originalEvent.returnValue=e.result}}}}};v.removeEvent=function(e,t,i){if(e.removeEventListener){e.removeEventListener(t,i)}};v.Event=function(e,t){if(!(this instanceof v.Event)){return new v.Event(e,t)}if(e&&e.type){this.originalEvent=e;this.type=e.type;this.isDefaultPrevented=e.defaultPrevented||e.defaultPrevented===undefined&&e.returnValue===false?xe:Ce;this.target=e.target&&e.target.nodeType===3?e.target.parentNode:e.target;this.currentTarget=e.currentTarget;this.relatedTarget=e.relatedTarget}else{this.type=e}if(t){v.extend(this,t)}this.timeStamp=e&&e.timeStamp||v.now();this[v.expando]=true};v.Event.prototype={constructor:v.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:false,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe;if(e&&!this.isSimulated){e.preventDefault()}},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe;if(e&&!this.isSimulated){e.stopPropagation()}},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe;if(e&&!this.isSimulated){e.stopImmediatePropagation()}this.stopPropagation()}};v.each({altKey:true,bubbles:true,cancelable:true,changedTouches:true,ctrlKey:true,detail:true,eventPhase:true,metaKey:true,pageX:true,pageY:true,shiftKey:true,view:true,char:true,charCode:true,key:true,keyCode:true,button:true,buttons:true,clientX:true,clientY:true,offsetX:true,offsetY:true,pointerId:true,pointerType:true,screenX:true,screenY:true,targetTouches:true,toElement:true,touches:true,which:function(e){var t=e.button;if(e.which==null&&ye.test(e.type)){return e.charCode!=null?e.charCode:e.keyCode}if(!e.which&&t!==undefined&&be.test(e.type)){if(t&1){return 1}if(t&2){return 3}if(t&4){return 2}return 0}return e.which}},v.event.addProp);v.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){v.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i,n=this,s=e.relatedTarget,r=e.handleObj;if(!s||s!==n&&!v.contains(n,s)){e.type=r.origType;i=r.handler.apply(this,arguments);e.type=t}return i}}});v.fn.extend({on:function(e,t,i,n){return _e(this,e,t,i,n)},one:function(e,t,i,n){return _e(this,e,t,i,n,1)},off:function(e,t,i){var n,s;if(e&&e.preventDefault&&e.handleObj){n=e.handleObj;v(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler);return this}if(typeof e==="object"){for(s in e){this.off(s,t,e[s])}return this}if(t===false||typeof t==="function"){i=t;t=undefined}if(i===false){i=Ce}return this.each(function(){v.event.remove(this,e,i,t)})}});var ke=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,De=/<script|<style|<link/i,Se=/checked\s*(?:[^=]|=\s*.checked.)/i,$e=/^true\/(.*)/,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ee(e,t){if(S(e,"table")&&S(t.nodeType!==11?t:t.firstChild,"tr")){return v(">tbody",e)[0]||e}return e}function Me(e){e.type=(e.getAttribute("type")!==null)+"/"+e.type;return e}function Pe(e){var t=$e.exec(e.type);if(t){e.type=t[1]}else{e.removeAttribute("type")}return e}function Oe(e,t){var i,n,s,r,a,o,l,u;if(t.nodeType!==1){return}if(Z.hasData(e)){r=Z.access(e);a=Z.set(t,r);u=r.events;if(u){delete a.handle;a.events={};for(s in u){for(i=0,n=u[s].length;i<n;i++){v.event.add(t,s,u[s][i])}}}}if(G.hasData(e)){o=G.access(e);l=v.extend({},o);G.set(t,l)}}function Fe(e,t){var i=t.nodeName.toLowerCase();if(i==="input"&&ue.test(e.type)){t.checked=e.checked}else if(i==="input"||i==="textarea"){t.defaultValue=e.defaultValue}}function Ie(e,t,i,n){t=a.apply([],t);var s,r,o,l,u,f,c=0,d=e.length,h=d-1,g=t[0],y=v.isFunction(g);if(y||d>1&&typeof g==="string"&&!p.checkClone&&Se.test(g)){return e.each(function(s){var r=e.eq(s);if(y){t[0]=g.call(this,s,r.html())}Ie(r,t,i,n)})}if(d){s=ge(t,e[0].ownerDocument,false,e,n);r=s.firstChild;if(s.childNodes.length===1){s=r}if(r||n){o=v.map(he(s,"script"),Me);l=o.length;for(;c<d;c++){u=s;if(c!==h){u=v.clone(u,true,true);if(l){v.merge(o,he(u,"script"))}}i.call(e[c],u,c)}if(l){f=o[o.length-1].ownerDocument;v.map(o,Pe);for(c=0;c<l;c++){u=o[c];if(ce.test(u.type||"")&&!Z.access(u,"globalEval")&&v.contains(f,u)){if(u.src){if(v._evalUrl){v._evalUrl(u.src)}}else{m(u.textContent.replace(Ae,""),f)}}}}}}return e}function je(e,t,i){var n,s=t?v.filter(t,e):e,r=0;for(;(n=s[r])!=null;r++){if(!i&&n.nodeType===1){v.cleanData(he(n))}if(n.parentNode){if(i&&v.contains(n.ownerDocument,n)){pe(he(n,"script"))}n.parentNode.removeChild(n)}}return e}v.extend({htmlPrefilter:function(e){return e.replace(ke,"<$1></$2>")},clone:function(e,t,i){var n,s,r,a,o=e.cloneNode(true),l=v.contains(e.ownerDocument,e);if(!p.noCloneChecked&&(e.nodeType===1||e.nodeType===11)&&!v.isXMLDoc(e)){a=he(o);r=he(e);for(n=0,s=r.length;n<s;n++){Fe(r[n],a[n])}}if(t){if(i){r=r||he(e);a=a||he(o);for(n=0,s=r.length;n<s;n++){Oe(r[n],a[n])}}else{Oe(e,o)}}a=he(o,"script");if(a.length>0){pe(a,!l&&he(e,"script"))}return o},cleanData:function(e){var t,i,n,s=v.event.special,r=0;for(;(i=e[r])!==undefined;r++){if(W(i)){if(t=i[Z.expando]){if(t.events){for(n in t.events){if(s[n]){v.event.remove(i,n)}else{v.removeEvent(i,n,t.handle)}}}i[Z.expando]=undefined}if(i[G.expando]){i[G.expando]=undefined}}}}});v.fn.extend({detach:function(e){return je(this,e,true)},remove:function(e){return je(this,e)},text:function(e){return B(this,function(e){return e===undefined?v.text(this):this.empty().each(function(){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){this.textContent=e}})},null,e,arguments.length)},append:function(){return Ie(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Ee(this,e);t.appendChild(e)}})},prepend:function(){return Ie(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Ee(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ie(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this)}})},after:function(){return Ie(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this.nextSibling)}})},empty:function(){var e,t=0;for(;(e=this[t])!=null;t++){if(e.nodeType===1){v.cleanData(he(e,false));e.textContent=""}}return this},clone:function(e,t){e=e==null?false:e;t=t==null?e:t;return this.map(function(){return v.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},i=0,n=this.length;if(e===undefined&&t.nodeType===1){return t.innerHTML}if(typeof e==="string"&&!De.test(e)&&!de[(fe.exec(e)||["",""])[1].toLowerCase()]){e=v.htmlPrefilter(e);try{for(;i<n;i++){t=this[i]||{};if(t.nodeType===1){v.cleanData(he(t,false));t.innerHTML=e}}t=0}catch(e){}}if(t){this.empty().append(e)}},null,e,arguments.length)},replaceWith:function(){var e=[];return Ie(this,arguments,function(t){var i=this.parentNode;if(v.inArray(this,e)<0){v.cleanData(he(this));if(i){i.replaceChild(t,this)}}},e)}});v.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){v.fn[e]=function(e){var i,n=[],s=v(e),r=s.length-1,a=0;for(;a<=r;a++){i=a===r?this:this.clone(true);v(s[a])[t](i);o.apply(n,i.get())}return this.pushStack(n)}});var Ne=/^margin/;var Ue=new RegExp("^("+ee+")(?!px)[a-z%]+$","i");var Le=function(t){var i=t.ownerDocument.defaultView;if(!i||!i.opener){i=e}return i.getComputedStyle(t)};(function(){function t(){if(!l){return}l.style.cssText="box-sizing:border-box;"+"position:relative;display:block;"+"margin:auto;border:1px;padding:1px;"+"top:1%;width:50%";l.innerHTML="";ve.appendChild(o);var t=e.getComputedStyle(l);i=t.top!=="1%";a=t.marginLeft==="2px";s=t.width==="4px";l.style.marginRight="50%";r=t.marginRight==="4px";ve.removeChild(o);l=null}var i,s,r,a,o=n.createElement("div"),l=n.createElement("div");if(!l.style){return}l.style.backgroundClip="content-box";l.cloneNode(true).style.backgroundClip="";p.clearCloneStyle=l.style.backgroundClip==="content-box";o.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;"+"padding:0;margin-top:1px;position:absolute";o.appendChild(l);v.extend(p,{pixelPosition:function(){t();return i},boxSizingReliable:function(){t();return s},pixelMarginRight:function(){t();return r},reliableMarginLeft:function(){t();return a}})})();function Re(e,t,i){var n,s,r,a,o=e.style;i=i||Le(e);if(i){a=i.getPropertyValue(t)||i[t];if(a===""&&!v.contains(e.ownerDocument,e)){a=v.style(e,t)}if(!p.pixelMarginRight()&&Ue.test(a)&&Ne.test(t)){n=o.width;s=o.minWidth;r=o.maxWidth;o.minWidth=o.maxWidth=o.width=a;a=i.width;o.width=n;o.minWidth=s;o.maxWidth=r}}return a!==undefined?a+"":a}function He(e,t){return{get:function(){if(e()){delete this.get;return}return(this.get=t).apply(this,arguments)}}}var ze=/^(none|table(?!-c[ea]).+)/,Ye=/^--/,Ve={position:"absolute",visibility:"hidden",display:"block"},Be={letterSpacing:"0",fontWeight:"400"},We=["Webkit","Moz","ms"],qe=n.createElement("div").style;function Ze(e){if(e in qe){return e}var t=e[0].toUpperCase()+e.slice(1),i=We.length;while(i--){e=We[i]+t;if(e in qe){return e}}}function Ge(e){var t=v.cssProps[e];if(!t){t=v.cssProps[e]=Ze(e)||e}return t}function Qe(e,t,i){var n=te.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function Xe(e,t,i,n,s){var r,a=0;if(i===(n?"border":"content")){r=4}else{r=t==="width"?1:0}for(;r<4;r+=2){if(i==="margin"){a+=v.css(e,i+ie[r],true,s)}if(n){if(i==="content"){a-=v.css(e,"padding"+ie[r],true,s)}if(i!=="margin"){a-=v.css(e,"border"+ie[r]+"Width",true,s)}}else{a+=v.css(e,"padding"+ie[r],true,s);if(i!=="padding"){a+=v.css(e,"border"+ie[r]+"Width",true,s)}}}return a}function Ke(e,t,i){var n,s=Le(e),r=Re(e,t,s),a=v.css(e,"boxSizing",false,s)==="border-box";if(Ue.test(r)){return r}n=a&&(p.boxSizingReliable()||r===e.style[t]);if(r==="auto"){r=e["offset"+t[0].toUpperCase()+t.slice(1)]}r=parseFloat(r)||0;return r+Xe(e,t,i||(a?"border":"content"),n,s)+"px"}v.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Re(e,"opacity");return i===""?"1":i}}}},cssNumber:{animationIterationCount:true,columnCount:true,fillOpacity:true,flexGrow:true,flexShrink:true,fontWeight:true,lineHeight:true,opacity:true,order:true,orphans:true,widows:true,zIndex:true,zoom:true},cssProps:{float:"cssFloat"},style:function(e,t,i,n){if(!e||e.nodeType===3||e.nodeType===8||!e.style){return}var s,r,a,o=v.camelCase(t),l=Ye.test(t),u=e.style;if(!l){t=Ge(o)}a=v.cssHooks[t]||v.cssHooks[o];if(i!==undefined){r=typeof i;if(r==="string"&&(s=te.exec(i))&&s[1]){i=re(e,t,s);r="number"}if(i==null||i!==i){return}if(r==="number"){i+=s&&s[3]||(v.cssNumber[o]?"":"px")}if(!p.clearCloneStyle&&i===""&&t.indexOf("background")===0){u[t]="inherit"}if(!a||!("set"in a)||(i=a.set(e,i,n))!==undefined){if(l){u.setProperty(t,i)}else{u[t]=i}}}else{if(a&&"get"in a&&(s=a.get(e,false,n))!==undefined){return s}return u[t]}},css:function(e,t,i,n){var s,r,a,o=v.camelCase(t),l=Ye.test(t);if(!l){t=Ge(o)}a=v.cssHooks[t]||v.cssHooks[o];if(a&&"get"in a){s=a.get(e,true,i)}if(s===undefined){s=Re(e,t,n)}if(s==="normal"&&t in Be){s=Be[t]}if(i===""||i){r=parseFloat(s);return i===true||isFinite(r)?r||0:s}return s}});v.each(["height","width"],function(e,t){v.cssHooks[t]={get:function(e,i,n){if(i){return ze.test(v.css(e,"display"))&&(!e.getClientRects().length||!e.getBoundingClientRect().width)?se(e,Ve,function(){return Ke(e,t,n)}):Ke(e,t,n)}},set:function(e,i,n){var s,r=n&&Le(e),a=n&&Xe(e,t,n,v.css(e,"boxSizing",false,r)==="border-box",r);if(a&&(s=te.exec(i))&&(s[3]||"px")!=="px"){e.style[t]=i;i=v.css(e,t)}return Qe(e,i,a)}}});v.cssHooks.marginLeft=He(p.reliableMarginLeft,function(e,t){if(t){return(parseFloat(Re(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}});v.each({margin:"",padding:"",border:"Width"},function(e,t){v.cssHooks[e+t]={expand:function(i){var n=0,s={},r=typeof i==="string"?i.split(" "):[i];for(;n<4;n++){s[e+ie[n]+t]=r[n]||r[n-2]||r[0]}return s}};if(!Ne.test(e)){v.cssHooks[e+t].set=Qe}});v.fn.extend({css:function(e,t){return B(this,function(e,t,i){var n,s,r={},a=0;if(Array.isArray(t)){n=Le(e);s=t.length;for(;a<s;a++){r[t[a]]=v.css(e,t[a],false,n)}return r}return i!==undefined?v.style(e,t,i):v.css(e,t)},e,t,arguments.length>1)}});function Je(e,t,i,n,s){return new Je.prototype.init(e,t,i,n,s)}v.Tween=Je;Je.prototype={constructor:Je,init:function(e,t,i,n,s,r){this.elem=e;this.prop=i;this.easing=s||v.easing._default;this.options=t;this.start=this.now=this.cur();this.end=n;this.unit=r||(v.cssNumber[i]?"":"px")},cur:function(){var e=Je.propHooks[this.prop];return e&&e.get?e.get(this):Je.propHooks._default.get(this)},run:function(e){var t,i=Je.propHooks[this.prop];if(this.options.duration){this.pos=t=v.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration)}else{this.pos=t=e}this.now=(this.end-this.start)*t+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this)}if(i&&i.set){i.set(this)}else{Je.propHooks._default.set(this)}return this}};Je.prototype.init.prototype=Je.prototype;Je.propHooks={_default:{get:function(e){var t;if(e.elem.nodeType!==1||e.elem[e.prop]!=null&&e.elem.style[e.prop]==null){return e.elem[e.prop]}t=v.css(e.elem,e.prop,"");return!t||t==="auto"?0:t},set:function(e){if(v.fx.step[e.prop]){v.fx.step[e.prop](e)}else if(e.elem.nodeType===1&&(e.elem.style[v.cssProps[e.prop]]!=null||v.cssHooks[e.prop])){v.style(e.elem,e.prop,e.now+e.unit)}else{e.elem[e.prop]=e.now}}}};Je.propHooks.scrollTop=Je.propHooks.scrollLeft={set:function(e){if(e.elem.nodeType&&e.elem.parentNode){e.elem[e.prop]=e.now}}};v.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"};v.fx=Je.prototype.init;v.fx.step={};var et,tt,it=/^(?:toggle|show|hide)$/,nt=/queueHooks$/;function st(){if(tt){if(n.hidden===false&&e.requestAnimationFrame){e.requestAnimationFrame(st)}else{e.setTimeout(st,v.fx.interval)}v.fx.tick()}}function rt(){e.setTimeout(function(){et=undefined});return et=v.now()}function at(e,t){var i,n=0,s={height:e};t=t?1:0;for(;n<4;n+=2-t){i=ie[n];s["margin"+i]=s["padding"+i]=e}if(t){s.opacity=s.width=e}return s}function ot(e,t,i){var n,s=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),r=0,a=s.length;for(;r<a;r++){if(n=s[r].call(i,t,e)){return n}}}function lt(e,t,i){var n,s,r,a,o,l,u,f,c="width"in t||"height"in t,d=this,h={},p=e.style,m=e.nodeType&&ne(e),g=Z.get(e,"fxshow");if(!i.queue){a=v._queueHooks(e,"fx");if(a.unqueued==null){a.unqueued=0;o=a.empty.fire;a.empty.fire=function(){if(!a.unqueued){o()}}}a.unqueued++;d.always(function(){d.always(function(){a.unqueued--;if(!v.queue(e,"fx").length){a.empty.fire()}})})}for(n in t){s=t[n];if(it.test(s)){delete t[n];r=r||s==="toggle";if(s===(m?"hide":"show")){if(s==="show"&&g&&g[n]!==undefined){m=true}else{continue}}h[n]=g&&g[n]||v.style(e,n)}}l=!v.isEmptyObject(t);if(!l&&v.isEmptyObject(h)){return}if(c&&e.nodeType===1){i.overflow=[p.overflow,p.overflowX,p.overflowY];u=g&&g.display;if(u==null){u=Z.get(e,"display")}f=v.css(e,"display");if(f==="none"){if(u){f=u}else{le([e],true);u=e.style.display||u;f=v.css(e,"display");le([e])}}if(f==="inline"||f==="inline-block"&&u!=null){if(v.css(e,"float")==="none"){if(!l){d.done(function(){p.display=u});if(u==null){f=p.display;u=f==="none"?"":f}}p.display="inline-block"}}}if(i.overflow){p.overflow="hidden";d.always(function(){p.overflow=i.overflow[0];p.overflowX=i.overflow[1];p.overflowY=i.overflow[2]})}l=false;for(n in h){if(!l){if(g){if("hidden"in g){m=g.hidden}}else{g=Z.access(e,"fxshow",{display:u})}if(r){g.hidden=!m}if(m){le([e],true)}d.done(function(){if(!m){le([e])}Z.remove(e,"fxshow");for(n in h){v.style(e,n,h[n])}})}l=ot(m?g[n]:0,n,d);if(!(n in g)){g[n]=l.start;if(m){l.end=l.start;l.start=0}}}}function ut(e,t){var i,n,s,r,a;for(i in e){n=v.camelCase(i);s=t[n];r=e[i];if(Array.isArray(r)){s=r[1];r=e[i]=r[0]}if(i!==n){e[n]=r;delete e[i]}a=v.cssHooks[n];if(a&&"expand"in a){r=a.expand(r);delete e[n];for(i in r){if(!(i in e)){e[i]=r[i];t[i]=s}}}else{t[n]=s}}}function ft(e,t,i){var n,s,r=0,a=ft.prefilters.length,o=v.Deferred().always(function(){delete l.elem}),l=function(){if(s){return false}var t=et||rt(),i=Math.max(0,u.startTime+u.duration-t),n=i/u.duration||0,r=1-n,a=0,l=u.tweens.length;for(;a<l;a++){u.tweens[a].run(r)}o.notifyWith(e,[u,r,i]);if(r<1&&l){return i}if(!l){o.notifyWith(e,[u,1,0])}o.resolveWith(e,[u]);return false},u=o.promise({elem:e,props:v.extend({},t),opts:v.extend(true,{specialEasing:{},easing:v.easing._default},i),originalProperties:t,originalOptions:i,startTime:et||rt(),duration:i.duration,tweens:[],createTween:function(t,i){var n=v.Tween(e,u.opts,t,i,u.opts.specialEasing[t]||u.opts.easing);u.tweens.push(n);return n},stop:function(t){var i=0,n=t?u.tweens.length:0;if(s){return this}s=true;for(;i<n;i++){u.tweens[i].run(1)}if(t){o.notifyWith(e,[u,1,0]);o.resolveWith(e,[u,t])}else{o.rejectWith(e,[u,t])}return this}}),f=u.props;ut(f,u.opts.specialEasing);for(;r<a;r++){n=ft.prefilters[r].call(u,e,f,u.opts);if(n){if(v.isFunction(n.stop)){v._queueHooks(u.elem,u.opts.queue).stop=v.proxy(n.stop,n)}return n}}v.map(f,ot,u);if(v.isFunction(u.opts.start)){u.opts.start.call(e,u)}u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always);v.fx.timer(v.extend(l,{elem:e,anim:u,queue:u.opts.queue}));return u}v.Animation=v.extend(ft,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);re(i.elem,e,te.exec(t),i);return i}]},tweener:function(e,t){if(v.isFunction(e)){t=e;e=["*"]}else{e=e.match(N)}var i,n=0,s=e.length;for(;n<s;n++){i=e[n];ft.tweeners[i]=ft.tweeners[i]||[];ft.tweeners[i].unshift(t)}},prefilters:[lt],prefilter:function(e,t){if(t){ft.prefilters.unshift(e)}else{ft.prefilters.push(e)}}});v.speed=function(e,t,i){var n=e&&typeof e==="object"?v.extend({},e):{complete:i||!i&&t||v.isFunction(e)&&e,duration:e,easing:i&&t||t&&!v.isFunction(t)&&t};if(v.fx.off){n.duration=0}else{if(typeof n.duration!=="number"){if(n.duration in v.fx.speeds){n.duration=v.fx.speeds[n.duration]}else{n.duration=v.fx.speeds._default}}}if(n.queue==null||n.queue===true){n.queue="fx"}n.old=n.complete;n.complete=function(){if(v.isFunction(n.old)){n.old.call(this)}if(n.queue){v.dequeue(this,n.queue)}};return n};v.fn.extend({fadeTo:function(e,t,i,n){return this.filter(ne).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(e,t,i,n){var s=v.isEmptyObject(e),r=v.speed(t,i,n),a=function(){var t=ft(this,v.extend({},e),r);if(s||Z.get(this,"finish")){t.stop(true)}};a.finish=a;return s||r.queue===false?this.each(a):this.queue(r.queue,a)},stop:function(e,t,i){var n=function(e){var t=e.stop;delete e.stop;t(i)};if(typeof e!=="string"){i=t;t=e;e=undefined}if(t&&e!==false){this.queue(e||"fx",[])}return this.each(function(){var t=true,s=e!=null&&e+"queueHooks",r=v.timers,a=Z.get(this);if(s){if(a[s]&&a[s].stop){n(a[s])}}else{for(s in a){if(a[s]&&a[s].stop&&nt.test(s)){n(a[s])}}}for(s=r.length;s--;){if(r[s].elem===this&&(e==null||r[s].queue===e)){r[s].anim.stop(i);t=false;r.splice(s,1)}}if(t||!i){v.dequeue(this,e)}})},finish:function(e){if(e!==false){e=e||"fx"}return this.each(function(){var t,i=Z.get(this),n=i[e+"queue"],s=i[e+"queueHooks"],r=v.timers,a=n?n.length:0;i.finish=true;v.queue(this,e,[]);if(s&&s.stop){s.stop.call(this,true)}for(t=r.length;t--;){if(r[t].elem===this&&r[t].queue===e){r[t].anim.stop(true);r.splice(t,1)}}for(t=0;t<a;t++){if(n[t]&&n[t].finish){n[t].finish.call(this)}}delete i.finish})}});v.each(["toggle","show","hide"],function(e,t){var i=v.fn[t];v.fn[t]=function(e,n,s){return e==null||typeof e==="boolean"?i.apply(this,arguments):this.animate(at(t,true),e,n,s)}});v.each({slideDown:at("show"),slideUp:at("hide"),slideToggle:at("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){v.fn[e]=function(e,i,n){return this.animate(t,e,i,n)}});v.timers=[];v.fx.tick=function(){var e,t=0,i=v.timers;et=v.now();for(;t<i.length;t++){e=i[t];if(!e()&&i[t]===e){i.splice(t--,1)}}if(!i.length){v.fx.stop()}et=undefined};v.fx.timer=function(e){v.timers.push(e);v.fx.start()};v.fx.interval=13;v.fx.start=function(){if(tt){return}tt=true;st()};v.fx.stop=function(){tt=null};v.fx.speeds={slow:600,fast:200,_default:400};v.fn.delay=function(t,i){t=v.fx?v.fx.speeds[t]||t:t;i=i||"fx";return this.queue(i,function(i,n){var s=e.setTimeout(i,t);n.stop=function(){e.clearTimeout(s)}})};(function(){var e=n.createElement("input"),t=n.createElement("select"),i=t.appendChild(n.createElement("option"));e.type="checkbox";p.checkOn=e.value!=="";p.optSelected=i.selected;e=n.createElement("input");e.value="t";e.type="radio";p.radioValue=e.value==="t"})();var ct,dt=v.expr.attrHandle;v.fn.extend({attr:function(e,t){return B(this,v.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){v.removeAttr(this,e)})}});v.extend({attr:function(e,t,i){var n,s,r=e.nodeType;if(r===3||r===8||r===2){return}if(typeof e.getAttribute==="undefined"){return v.prop(e,t,i)}if(r!==1||!v.isXMLDoc(e)){s=v.attrHooks[t.toLowerCase()]||(v.expr.match.bool.test(t)?ct:undefined)}if(i!==undefined){if(i===null){v.removeAttr(e,t);return}if(s&&"set"in s&&(n=s.set(e,i,t))!==undefined){return n}e.setAttribute(t,i+"");return i}if(s&&"get"in s&&(n=s.get(e,t))!==null){return n}n=v.find.attr(e,t);return n==null?undefined:n},attrHooks:{type:{set:function(e,t){if(!p.radioValue&&t==="radio"&&S(e,"input")){var i=e.value;e.setAttribute("type",t);if(i){e.value=i}return t}}}},removeAttr:function(e,t){var i,n=0,s=t&&t.match(N);if(s&&e.nodeType===1){while(i=s[n++]){e.removeAttribute(i)}}}});ct={set:function(e,t,i){if(t===false){v.removeAttr(e,i)}else{e.setAttribute(i,i)}return i}};v.each(v.expr.match.bool.source.match(/\w+/g),function(e,t){var i=dt[t]||v.find.attr;dt[t]=function(e,t,n){var s,r,a=t.toLowerCase();if(!n){r=dt[a];dt[a]=s;s=i(e,t,n)!=null?a:null;dt[a]=r}return s}});var ht=/^(?:input|select|textarea|button)$/i,pt=/^(?:a|area)$/i;v.fn.extend({prop:function(e,t){return B(this,v.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[v.propFix[e]||e]})}});v.extend({prop:function(e,t,i){var n,s,r=e.nodeType;if(r===3||r===8||r===2){return}if(r!==1||!v.isXMLDoc(e)){t=v.propFix[t]||t;s=v.propHooks[t]}if(i!==undefined){if(s&&"set"in s&&(n=s.set(e,i,t))!==undefined){return n}return e[t]=i}if(s&&"get"in s&&(n=s.get(e,t))!==null){return n}return e[t]},propHooks:{tabIndex:{get:function(e){var t=v.find.attr(e,"tabindex");if(t){return parseInt(t,10)}if(ht.test(e.nodeName)||pt.test(e.nodeName)&&e.href){return 0}return-1}}},propFix:{for:"htmlFor",class:"className"}});if(!p.optSelected){v.propHooks.selected={get:function(e){var t=e.parentNode;if(t&&t.parentNode){t.parentNode.selectedIndex}return null},set:function(e){var t=e.parentNode;if(t){t.selectedIndex;if(t.parentNode){t.parentNode.selectedIndex}}}}}v.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){v.propFix[this.toLowerCase()]=this});function mt(e){var t=e.match(N)||[];return t.join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}v.fn.extend({addClass:function(e){var t,i,n,s,r,a,o,l=0;if(v.isFunction(e)){return this.each(function(t){v(this).addClass(e.call(this,t,gt(this)))})}if(typeof e==="string"&&e){t=e.match(N)||[];while(i=this[l++]){s=gt(i);n=i.nodeType===1&&" "+mt(s)+" ";if(n){a=0;while(r=t[a++]){if(n.indexOf(" "+r+" ")<0){n+=r+" "}}o=mt(n);if(s!==o){i.setAttribute("class",o)}}}}return this},removeClass:function(e){var t,i,n,s,r,a,o,l=0;if(v.isFunction(e)){return this.each(function(t){v(this).removeClass(e.call(this,t,gt(this)))})}if(!arguments.length){return this.attr("class","")}if(typeof e==="string"&&e){t=e.match(N)||[];while(i=this[l++]){s=gt(i);n=i.nodeType===1&&" "+mt(s)+" ";if(n){a=0;while(r=t[a++]){while(n.indexOf(" "+r+" ")>-1){n=n.replace(" "+r+" "," ")}}o=mt(n);if(s!==o){i.setAttribute("class",o)}}}}return this},toggleClass:function(e,t){var i=typeof e;if(typeof t==="boolean"&&i==="string"){return t?this.addClass(e):this.removeClass(e)}if(v.isFunction(e)){return this.each(function(i){v(this).toggleClass(e.call(this,i,gt(this),t),t)})}return this.each(function(){var t,n,s,r;if(i==="string"){n=0;s=v(this);r=e.match(N)||[];while(t=r[n++]){if(s.hasClass(t)){s.removeClass(t)}else{s.addClass(t)}}}else if(e===undefined||i==="boolean"){t=gt(this);if(t){Z.set(this,"__className__",t)}if(this.setAttribute){this.setAttribute("class",t||e===false?"":Z.get(this,"__className__")||"")}}})},hasClass:function(e){var t,i,n=0;t=" "+e+" ";while(i=this[n++]){if(i.nodeType===1&&(" "+mt(gt(i))+" ").indexOf(t)>-1){return true}}return false}});var vt=/\r/g;v.fn.extend({val:function(e){var t,i,n,s=this[0];if(!arguments.length){if(s){t=v.valHooks[s.type]||v.valHooks[s.nodeName.toLowerCase()];if(t&&"get"in t&&(i=t.get(s,"value"))!==undefined){return i}i=s.value;if(typeof i==="string"){return i.replace(vt,"")}return i==null?"":i}return}n=v.isFunction(e);return this.each(function(i){var s;if(this.nodeType!==1){return}if(n){s=e.call(this,i,v(this).val())}else{s=e}if(s==null){s=""}else if(typeof s==="number"){s+=""}else if(Array.isArray(s)){s=v.map(s,function(e){return e==null?"":e+""})}t=v.valHooks[this.type]||v.valHooks[this.nodeName.toLowerCase()];if(!t||!("set"in t)||t.set(this,s,"value")===undefined){this.value=s}})}});v.extend({valHooks:{option:{get:function(e){var t=v.find.attr(e,"value");return t!=null?t:mt(v.text(e))}},select:{get:function(e){var t,i,n,s=e.options,r=e.selectedIndex,a=e.type==="select-one",o=a?null:[],l=a?r+1:s.length;if(r<0){n=l}else{n=a?r:0}for(;n<l;n++){i=s[n];if((i.selected||n===r)&&!i.disabled&&(!i.parentNode.disabled||!S(i.parentNode,"optgroup"))){t=v(i).val();if(a){return t}o.push(t)}}return o},set:function(e,t){var i,n,s=e.options,r=v.makeArray(t),a=s.length;while(a--){n=s[a];if(n.selected=v.inArray(v.valHooks.option.get(n),r)>-1){i=true}}if(!i){e.selectedIndex=-1}return r}}}});v.each(["radio","checkbox"],function(){v.valHooks[this]={set:function(e,t){if(Array.isArray(t)){return e.checked=v.inArray(v(e).val(),t)>-1}}};if(!p.checkOn){v.valHooks[this].get=function(e){return e.getAttribute("value")===null?"on":e.value}}});var yt=/^(?:focusinfocus|focusoutblur)$/;v.extend(v.event,{trigger:function(t,i,s,r){var a,o,l,u,f,d,h,p=[s||n],m=c.call(t,"type")?t.type:t,g=c.call(t,"namespace")?t.namespace.split("."):[];o=l=s=s||n;if(s.nodeType===3||s.nodeType===8){return}if(yt.test(m+v.event.triggered)){return}if(m.indexOf(".")>-1){g=m.split(".");m=g.shift();g.sort()}f=m.indexOf(":")<0&&"on"+m;t=t[v.expando]?t:new v.Event(m,typeof t==="object"&&t);t.isTrigger=r?2:3;t.namespace=g.join(".");t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;t.result=undefined;if(!t.target){t.target=s}i=i==null?[t]:v.makeArray(i,[t]);h=v.event.special[m]||{};if(!r&&h.trigger&&h.trigger.apply(s,i)===false){return}if(!r&&!h.noBubble&&!v.isWindow(s)){u=h.delegateType||m;if(!yt.test(u+m)){o=o.parentNode}for(;o;o=o.parentNode){p.push(o);l=o}if(l===(s.ownerDocument||n)){p.push(l.defaultView||l.parentWindow||e)}}a=0;while((o=p[a++])&&!t.isPropagationStopped()){t.type=a>1?u:h.bindType||m;d=(Z.get(o,"events")||{})[t.type]&&Z.get(o,"handle");if(d){d.apply(o,i)}d=f&&o[f];if(d&&d.apply&&W(o)){t.result=d.apply(o,i);if(t.result===false){t.preventDefault()}}}t.type=m;if(!r&&!t.isDefaultPrevented()){if((!h._default||h._default.apply(p.pop(),i)===false)&&W(s)){if(f&&v.isFunction(s[m])&&!v.isWindow(s)){l=s[f];if(l){s[f]=null}v.event.triggered=m;s[m]();v.event.triggered=undefined;if(l){s[f]=l}}}}return t.result},simulate:function(e,t,i){var n=v.extend(new v.Event,i,{type:e,isSimulated:true});v.event.trigger(n,null,t)}});v.fn.extend({trigger:function(e,t){return this.each(function(){v.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i){return v.event.trigger(e,t,i,true)}}});v.each(("blur focus focusin focusout resize scroll click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select submit keydown keypress keyup contextmenu").split(" "),function(e,t){v.fn[t]=function(e,i){return arguments.length>0?this.on(t,null,e,i):this.trigger(t)}});v.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});p.focusin="onfocusin"in e;if(!p.focusin){v.each({focus:"focusin",blur:"focusout"},function(e,t){var i=function(e){v.event.simulate(t,e.target,v.event.fix(e))};v.event.special[t]={setup:function(){var n=this.ownerDocument||this,s=Z.access(n,t);if(!s){n.addEventListener(e,i,true)}Z.access(n,t,(s||0)+1)},teardown:function(){var n=this.ownerDocument||this,s=Z.access(n,t)-1;if(!s){n.removeEventListener(e,i,true);Z.remove(n,t)}else{Z.access(n,t,s)}}}})}var bt=e.location;var wt=v.now();var xt=/\?/;v.parseXML=function(t){var i;if(!t||typeof t!=="string"){return null}try{i=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){i=undefined}if(!i||i.getElementsByTagName("parsererror").length){v.error("Invalid XML: "+t)}return i};var Ct=/\[\]$/,Tt=/\r?\n/g,_t=/^(?:submit|button|image|reset|file)$/i,kt=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,i,n){var s;if(Array.isArray(t)){v.each(t,function(t,s){if(i||Ct.test(e)){n(e,s)}else{Dt(e+"["+(typeof s==="object"&&s!=null?t:"")+"]",s,i,n)}})}else if(!i&&v.type(t)==="object"){for(s in t){Dt(e+"["+s+"]",t[s],i,n)}}else{n(e,t)}}v.param=function(e,t){var i,n=[],s=function(e,t){var i=v.isFunction(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(i==null?"":i)};if(Array.isArray(e)||e.jquery&&!v.isPlainObject(e)){v.each(e,function(){s(this.name,this.value)})}else{for(i in e){Dt(i,e[i],t,s)}}return n.join("&")};v.fn.extend({serialize:function(){return v.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=v.prop(this,"elements");return e?v.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!v(this).is(":disabled")&&kt.test(this.nodeName)&&!_t.test(e)&&(this.checked||!ue.test(e))}).map(function(e,t){var i=v(this).val();if(i==null){return null}if(Array.isArray(i)){return v.map(i,function(e){return{name:t.name,value:e.replace(Tt,"\r\n")}})}return{name:t.name,value:i.replace(Tt,"\r\n")}}).get()}});var St=/%20/g,$t=/#.*$/,At=/([?&])_=[^&]*/,Et=/^(.*?):[ \t]*([^\r\n]*)$/gm,Mt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Pt=/^(?:GET|HEAD)$/,Ot=/^\/\//,Ft={},It={},jt="*/".concat("*"),Nt=n.createElement("a");Nt.href=bt.href;function Ut(e){return function(t,i){if(typeof t!=="string"){i=t;t="*"}var n,s=0,r=t.toLowerCase().match(N)||[];if(v.isFunction(i)){while(n=r[s++]){if(n[0]==="+"){n=n.slice(1)||"*";(e[n]=e[n]||[]).unshift(i)}else{(e[n]=e[n]||[]).push(i)}}}}}function Lt(e,t,i,n){var s={},r=e===It;function a(o){var l;s[o]=true;v.each(e[o]||[],function(e,o){var u=o(t,i,n);if(typeof u==="string"&&!r&&!s[u]){t.dataTypes.unshift(u);a(u);return false}else if(r){return!(l=u)}});return l}return a(t.dataTypes[0])||!s["*"]&&a("*")}function Rt(e,t){var i,n,s=v.ajaxSettings.flatOptions||{};for(i in t){if(t[i]!==undefined){(s[i]?e:n||(n={}))[i]=t[i]}}if(n){v.extend(true,e,n)}return e}function Ht(e,t,i){var n,s,r,a,o=e.contents,l=e.dataTypes;while(l[0]==="*"){l.shift();if(n===undefined){n=e.mimeType||t.getResponseHeader("Content-Type")}}if(n){for(s in o){if(o[s]&&o[s].test(n)){l.unshift(s);break}}}if(l[0]in i){r=l[0]}else{for(s in i){if(!l[0]||e.converters[s+" "+l[0]]){r=s;break}if(!a){a=s}}r=r||a}if(r){if(r!==l[0]){l.unshift(r)}return i[r]}}function zt(e,t,i,n){var s,r,a,o,l,u={},f=e.dataTypes.slice();if(f[1]){for(a in e.converters){u[a.toLowerCase()]=e.converters[a]}}r=f.shift();while(r){if(e.responseFields[r]){i[e.responseFields[r]]=t}if(!l&&n&&e.dataFilter){t=e.dataFilter(t,e.dataType)}l=r;r=f.shift();if(r){if(r==="*"){r=l}else if(l!=="*"&&l!==r){a=u[l+" "+r]||u["* "+r];if(!a){for(s in u){o=s.split(" ");if(o[1]===r){a=u[l+" "+o[0]]||u["* "+o[0]];if(a){if(a===true){a=u[s]}else if(u[s]!==true){r=o[0];f.unshift(o[1])}break}}}}if(a!==true){if(a&&e.throws){t=a(t)}else{try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+r}}}}}}}return{state:"success",data:t}}v.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:bt.href,type:"GET",isLocal:Mt.test(bt.protocol),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":jt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":true,"text json":JSON.parse,"text xml":v.parseXML},flatOptions:{url:true,context:true}},ajaxSetup:function(e,t){return t?Rt(Rt(e,v.ajaxSettings),t):Rt(v.ajaxSettings,e)},ajaxPrefilter:Ut(Ft),ajaxTransport:Ut(It),ajax:function(t,i){if(typeof t==="object"){i=t;t=undefined}i=i||{};var s,r,a,o,l,u,f,c,d,h,p=v.ajaxSetup({},i),m=p.context||p,g=p.context&&(m.nodeType||m.jquery)?v(m):v.event,y=v.Deferred(),b=v.Callbacks("once memory"),w=p.statusCode||{},x={},C={},T="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(f){if(!o){o={};while(t=Et.exec(a)){o[t[1].toLowerCase()]=t[2]}}t=o[e.toLowerCase()]}return t==null?null:t},getAllResponseHeaders:function(){return f?a:null},setRequestHeader:function(e,t){if(f==null){e=C[e.toLowerCase()]=C[e.toLowerCase()]||e;x[e]=t}return this},overrideMimeType:function(e){if(f==null){p.mimeType=e}return this},statusCode:function(e){var t;if(e){if(f){_.always(e[_.status])}else{for(t in e){w[t]=[w[t],e[t]]}}}return this},abort:function(e){var t=e||T;if(s){s.abort(t)}k(0,t);return this}};y.promise(_);p.url=((t||p.url||bt.href)+"").replace(Ot,bt.protocol+"//");p.type=i.method||i.type||p.method||p.type;p.dataTypes=(p.dataType||"*").toLowerCase().match(N)||[""];if(p.crossDomain==null){u=n.createElement("a");try{u.href=p.url;u.href=u.href;p.crossDomain=Nt.protocol+"//"+Nt.host!==u.protocol+"//"+u.host}catch(e){p.crossDomain=true}}if(p.data&&p.processData&&typeof p.data!=="string"){p.data=v.param(p.data,p.traditional)}Lt(Ft,p,i,_);if(f){return _}c=v.event&&p.global;if(c&&v.active++===0){v.event.trigger("ajaxStart")}p.type=p.type.toUpperCase();p.hasContent=!Pt.test(p.type);r=p.url.replace($t,"");if(!p.hasContent){h=p.url.slice(r.length);if(p.data){r+=(xt.test(r)?"&":"?")+p.data;delete p.data}if(p.cache===false){r=r.replace(At,"$1");h=(xt.test(r)?"&":"?")+"_="+wt+++h}p.url=r+h}else if(p.data&&p.processData&&(p.contentType||"").indexOf("application/x-www-form-urlencoded")===0){p.data=p.data.replace(St,"+")}if(p.ifModified){if(v.lastModified[r]){_.setRequestHeader("If-Modified-Since",v.lastModified[r])}if(v.etag[r]){_.setRequestHeader("If-None-Match",v.etag[r])}}if(p.data&&p.hasContent&&p.contentType!==false||i.contentType){_.setRequestHeader("Content-Type",p.contentType)}_.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+(p.dataTypes[0]!=="*"?", "+jt+"; q=0.01":""):p.accepts["*"]);for(d in p.headers){_.setRequestHeader(d,p.headers[d])}if(p.beforeSend&&(p.beforeSend.call(m,_,p)===false||f)){return _.abort()}T="abort";b.add(p.complete);_.done(p.success);_.fail(p.error);s=Lt(It,p,i,_);if(!s){k(-1,"No Transport")}else{_.readyState=1;if(c){g.trigger("ajaxSend",[_,p])}if(f){return _}if(p.async&&p.timeout>0){l=e.setTimeout(function(){_.abort("timeout")},p.timeout)}try{f=false;s.send(x,k)}catch(e){if(f){throw e}k(-1,e)}}function k(t,i,n,o){var u,d,h,x,C,T=i;if(f){return}f=true;if(l){e.clearTimeout(l)}s=undefined;a=o||"";_.readyState=t>0?4:0;u=t>=200&&t<300||t===304;if(n){x=Ht(p,_,n)}x=zt(p,x,_,u);if(u){if(p.ifModified){C=_.getResponseHeader("Last-Modified");if(C){v.lastModified[r]=C}C=_.getResponseHeader("etag");if(C){v.etag[r]=C}}if(t===204||p.type==="HEAD"){T="nocontent"}else if(t===304){T="notmodified"}else{T=x.state;d=x.data;h=x.error;u=!h}}else{h=T;if(t||!T){T="error";if(t<0){t=0}}}_.status=t;_.statusText=(i||T)+"";if(u){y.resolveWith(m,[d,T,_])}else{y.rejectWith(m,[_,T,h])}_.statusCode(w);w=undefined;if(c){g.trigger(u?"ajaxSuccess":"ajaxError",[_,p,u?d:h])}b.fireWith(m,[_,T]);if(c){g.trigger("ajaxComplete",[_,p]);if(!--v.active){v.event.trigger("ajaxStop")}}}return _},getJSON:function(e,t,i){return v.get(e,t,i,"json")},getScript:function(e,t){return v.get(e,undefined,t,"script")}});v.each(["get","post"],function(e,t){v[t]=function(e,i,n,s){if(v.isFunction(i)){s=s||n;n=i;i=undefined}return v.ajax(v.extend({url:e,type:t,dataType:s,data:i,success:n},v.isPlainObject(e)&&e))}});v._evalUrl=function(e){return v.ajax({url:e,type:"GET",dataType:"script",cache:true,async:false,global:false,throws:true})};v.fn.extend({wrapAll:function(e){var t;if(this[0]){if(v.isFunction(e)){e=e.call(this[0])}t=v(e,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){t.insertBefore(this[0])}t.map(function(){var e=this;while(e.firstElementChild){e=e.firstElementChild}return e}).append(this)}return this},wrapInner:function(e){if(v.isFunction(e)){return this.each(function(t){v(this).wrapInner(e.call(this,t))})}return this.each(function(){var t=v(this),i=t.contents();if(i.length){i.wrapAll(e)}else{t.append(e)}})},wrap:function(e){var t=v.isFunction(e);return this.each(function(i){v(this).wrapAll(t?e.call(this,i):e)})},unwrap:function(e){this.parent(e).not("body").each(function(){v(this).replaceWith(this.childNodes)});return this}});v.expr.pseudos.hidden=function(e){return!v.expr.pseudos.visible(e)};v.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)};v.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Yt={0:200,1223:204},Vt=v.ajaxSettings.xhr();p.cors=!!Vt&&"withCredentials"in Vt;p.ajax=Vt=!!Vt;v.ajaxTransport(function(t){var i,n;if(p.cors||Vt&&!t.crossDomain){return{send:function(s,r){var a,o=t.xhr();o.open(t.type,t.url,t.async,t.username,t.password);if(t.xhrFields){for(a in t.xhrFields){o[a]=t.xhrFields[a]}}if(t.mimeType&&o.overrideMimeType){o.overrideMimeType(t.mimeType)}if(!t.crossDomain&&!s["X-Requested-With"]){s["X-Requested-With"]="XMLHttpRequest"}for(a in s){o.setRequestHeader(a,s[a])}i=function(e){return function(){if(i){i=n=o.onload=o.onerror=o.onabort=o.onreadystatechange=null;if(e==="abort"){o.abort()}else if(e==="error"){if(typeof o.status!=="number"){r(0,"error")}else{r(o.status,o.statusText)}}else{r(Yt[o.status]||o.status,o.statusText,(o.responseType||"text")!=="text"||typeof o.responseText!=="string"?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders())}}}};o.onload=i();n=o.onerror=i("error");if(o.onabort!==undefined){o.onabort=n}else{o.onreadystatechange=function(){if(o.readyState===4){e.setTimeout(function(){if(i){n()}})}}}i=i("abort");try{o.send(t.hasContent&&t.data||null)}catch(e){if(i){throw e}}},abort:function(){if(i){i()}}}}});v.ajaxPrefilter(function(e){if(e.crossDomain){e.contents.script=false}});v.ajaxSetup({accepts:{script:"text/javascript, application/javascript, "+"application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){v.globalEval(e);return e}}});v.ajaxPrefilter("script",function(e){if(e.cache===undefined){e.cache=false}if(e.crossDomain){e.type="GET"}});v.ajaxTransport("script",function(e){if(e.crossDomain){var t,i;return{send:function(s,r){t=v("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",i=function(e){t.remove();i=null;if(e){r(e.type==="error"?404:200,e.type)}});n.head.appendChild(t[0])},abort:function(){if(i){i()}}}}});var Bt=[],Wt=/(=)\?(?=&|$)|\?\?/;v.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Bt.pop()||v.expando+"_"+wt++;this[e]=true;return e}});v.ajaxPrefilter("json jsonp",function(t,i,n){var s,r,a,o=t.jsonp!==false&&(Wt.test(t.url)?"url":typeof t.data==="string"&&(t.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&Wt.test(t.data)&&"data");if(o||t.dataTypes[0]==="jsonp"){s=t.jsonpCallback=v.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback;if(o){t[o]=t[o].replace(Wt,"$1"+s)}else if(t.jsonp!==false){t.url+=(xt.test(t.url)?"&":"?")+t.jsonp+"="+s}t.converters["script json"]=function(){if(!a){v.error(s+" was not called")}return a[0]};t.dataTypes[0]="json";r=e[s];e[s]=function(){a=arguments};n.always(function(){if(r===undefined){v(e).removeProp(s)}else{e[s]=r}if(t[s]){t.jsonpCallback=i.jsonpCallback;Bt.push(s)}if(a&&v.isFunction(r)){r(a[0])}a=r=undefined});return"script"}});p.createHTMLDocument=function(){var e=n.implementation.createHTMLDocument("").body;e.innerHTML="<form></form><form></form>";return e.childNodes.length===2}();v.parseHTML=function(e,t,i){if(typeof e!=="string"){return[]}if(typeof t==="boolean"){i=t;t=false}var s,r,a;if(!t){if(p.createHTMLDocument){t=n.implementation.createHTMLDocument("");s=t.createElement("base");s.href=n.location.href;t.head.appendChild(s)}else{t=n}}r=$.exec(e);a=!i&&[];if(r){return[t.createElement(r[1])]}r=ge([e],t,a);if(a&&a.length){v(a).remove()}return v.merge([],r.childNodes)};v.fn.load=function(e,t,i){var n,s,r,a=this,o=e.indexOf(" ");if(o>-1){n=mt(e.slice(o));e=e.slice(0,o)}if(v.isFunction(t)){i=t;t=undefined}else if(t&&typeof t==="object"){s="POST"}if(a.length>0){v.ajax({url:e,type:s||"GET",dataType:"html",data:t}).done(function(e){r=arguments;a.html(n?v("<div>").append(v.parseHTML(e)).find(n):e)}).always(i&&function(e,t){a.each(function(){i.apply(this,r||[e.responseText,t,e])})})}return this};v.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){v.fn[t]=function(e){return this.on(t,e)}});v.expr.pseudos.animated=function(e){return v.grep(v.timers,function(t){return e===t.elem}).length};v.offset={setOffset:function(e,t,i){var n,s,r,a,o,l,u,f=v.css(e,"position"),c=v(e),d={};if(f==="static"){e.style.position="relative"}o=c.offset();r=v.css(e,"top");l=v.css(e,"left");u=(f==="absolute"||f==="fixed")&&(r+l).indexOf("auto")>-1;if(u){n=c.position();a=n.top;s=n.left}else{a=parseFloat(r)||0;s=parseFloat(l)||0}if(v.isFunction(t)){t=t.call(e,i,v.extend({},o))}if(t.top!=null){d.top=t.top-o.top+a}if(t.left!=null){d.left=t.left-o.left+s}if("using"in t){t.using.call(e,d)}else{c.css(d)}}};v.fn.extend({offset:function(e){if(arguments.length){return e===undefined?this:this.each(function(t){v.offset.setOffset(this,e,t)})}var t,i,n,s,r=this[0];if(!r){return}if(!r.getClientRects().length){return{top:0,left:0}}n=r.getBoundingClientRect();t=r.ownerDocument;i=t.documentElement;s=t.defaultView;return{top:n.top+s.pageYOffset-i.clientTop,left:n.left+s.pageXOffset-i.clientLeft}},position:function(){if(!this[0]){return}var e,t,i=this[0],n={top:0,left:0};if(v.css(i,"position")==="fixed"){t=i.getBoundingClientRect()}else{e=this.offsetParent();t=this.offset();if(!S(e[0],"html")){n=e.offset()}n={top:n.top+v.css(e[0],"borderTopWidth",true),left:n.left+v.css(e[0],"borderLeftWidth",true)}}return{top:t.top-n.top-v.css(i,"marginTop",true),left:t.left-n.left-v.css(i,"marginLeft",true)}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&v.css(e,"position")==="static"){e=e.offsetParent}return e||ve})}});v.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var i="pageYOffset"===t;v.fn[e]=function(n){return B(this,function(e,n,s){var r;if(v.isWindow(e)){r=e}else if(e.nodeType===9){r=e.defaultView}if(s===undefined){return r?r[t]:e[n]}if(r){r.scrollTo(!i?s:r.pageXOffset,i?s:r.pageYOffset)}else{e[n]=s}},e,n,arguments.length)}});v.each(["top","left"],function(e,t){v.cssHooks[t]=He(p.pixelPosition,function(e,i){if(i){i=Re(e,t);return Ue.test(i)?v(e).position()[t]+"px":i}})});v.each({Height:"height",Width:"width"},function(e,t){v.each({padding:"inner"+e,content:t,"":"outer"+e},function(i,n){v.fn[n]=function(s,r){var a=arguments.length&&(i||typeof s!=="boolean"),o=i||(s===true||r===true?"margin":"border");return B(this,function(t,i,s){var r;if(v.isWindow(t)){return n.indexOf("outer")===0?t["inner"+e]:t.document.documentElement["client"+e]}if(t.nodeType===9){r=t.documentElement;return Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])}return s===undefined?v.css(t,i,o):v.style(t,i,s,o)},t,a?s:undefined,a)}})});v.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return arguments.length===1?this.off(e,"**"):this.off(t,e||"**",i)}});v.holdReady=function(e){if(e){v.readyWait++}else{v.ready(true)}};v.isArray=Array.isArray;v.parseJSON=JSON.parse;v.nodeName=S;if(typeof define==="function"&&define.amd){define("jquery",[],function(){return v})}var qt=e.jQuery,Zt=e.$;v.noConflict=function(t){if(e.$===v){e.$=Zt}if(t&&e.jQuery===v){e.jQuery=qt}return v};if(!t){e.jQuery=e.$=v}return v});(function(e){if(typeof define==="function"&&define.amd){define(["jquery"],e)}else if(typeof module==="object"&&module.exports){module.exports=function(t,i){if(typeof i==="undefined"){if(typeof window!=="undefined"){i=require("jquery")}else{i=require("jquery")(t)}}e(i);return i}}else{e(jQuery)}})(function(e){"use strict";var t=/\r?\n/g;var i={};i.fileapi=e('<input type="file">').get(0).files!==undefined;i.formdata=typeof window.FormData!=="undefined";var n=!!e.fn.prop;e.fn.attr2=function(){if(!n){return this.attr.apply(this,arguments)}var e=this.prop.apply(this,arguments);if(e&&e.jquery||typeof e==="string"){return e}return this.attr.apply(this,arguments)};e.fn.ajaxSubmit=function(t,s,r,o){if(!this.length){a("ajaxSubmit: skipping submit process - no element selected");return this}var l,u,f,c=this;if(typeof t==="function"){t={success:t}}else if(typeof t==="string"||t===false&&arguments.length>0){t={url:t,data:s,dataType:r};if(typeof o==="function"){t.success=o}}else if(typeof t==="undefined"){t={}}l=t.method||t.type||this.attr2("method");u=t.url||this.attr2("action");f=typeof u==="string"?e.trim(u):"";f=f||window.location.href||"";if(f){f=(f.match(/^([^#]+)/)||[])[1]}t=e.extend(true,{url:f,success:e.ajaxSettings.success,type:l||e.ajaxSettings.type,iframeSrc:/^https/i.test(window.location.href||"")?"javascript:false":"about:blank"},t);var d={};this.trigger("form-pre-serialize",[this,t,d]);if(d.veto){a("ajaxSubmit: submit vetoed via form-pre-serialize trigger");return this}if(t.beforeSerialize&&t.beforeSerialize(this,t)===false){a("ajaxSubmit: submit aborted via beforeSerialize callback");return this}var h=t.traditional;if(typeof h==="undefined"){h=e.ajaxSettings.traditional}var p=[];var m,g=this.formToArray(t.semantic,p,t.filtering);if(t.data){var v=e.isFunction(t.data)?t.data(g):t.data;t.extraData=v;m=e.param(v,h)}if(t.beforeSubmit&&t.beforeSubmit(g,this,t)===false){a("ajaxSubmit: submit aborted via beforeSubmit callback");return this}this.trigger("form-submit-validate",[g,this,t,d]);if(d.veto){a("ajaxSubmit: submit vetoed via form-submit-validate trigger");return this}var y=e.param(g,h);if(m){y=y?y+"&"+m:m}if(t.type.toUpperCase()==="GET"){t.url+=(t.url.indexOf("?")>=0?"&":"?")+y;t.data=null}else{t.data=y}var b=[];if(t.resetForm){b.push(function(){c.resetForm()})}if(t.clearForm){b.push(function(){c.clearForm(t.includeHidden)})}if(!t.dataType&&t.target){var w=t.success||function(){};b.push(function(i,n,s){var r=arguments,a=t.replaceTarget?"replaceWith":"html";e(t.target)[a](i).each(function(){w.apply(this,r)})})}else if(t.success){if(e.isArray(t.success)){e.merge(b,t.success)}else{b.push(t.success)}}t.success=function(e,i,n){var s=t.context||this;for(var r=0,a=b.length;r<a;r++){b[r].apply(s,[e,i,n||c,c])}};if(t.error){var x=t.error;t.error=function(e,i,n){var s=t.context||this;x.apply(s,[e,i,n,c])}}if(t.complete){var C=t.complete;t.complete=function(e,i){var n=t.context||this;C.apply(n,[e,i,c])}}var T=e("input[type=file]:enabled",this).filter(function(){return e(this).val()!==""});var _=T.length>0;var k="multipart/form-data";var D=c.attr("enctype")===k||c.attr("encoding")===k;var S=i.fileapi&&i.formdata;a("fileAPI :"+S);var $=(_||D)&&!S;var A;if(t.iframe!==false&&(t.iframe||$)){if(t.closeKeepAlive){e.get(t.closeKeepAlive,function(){A=O(g)})}else{A=O(g)}}else if((_||D)&&S){A=P(g)}else{A=e.ajax(t)}c.removeData("jqxhr").data("jqxhr",A);for(var E=0;E<p.length;E++){p[E]=null}this.trigger("form-submit-notify",[this,t]);return this;function M(i){var n=e.param(i,t.traditional).split("&");var s=n.length;var r=[];var a,o;for(a=0;a<s;a++){n[a]=n[a].replace(/\+/g," ");o=n[a].split("=");r.push([decodeURIComponent(o[0]),decodeURIComponent(o[1])])}return r}function P(i){var n=new FormData;for(var s=0;s<i.length;s++){n.append(i[s].name,i[s].value)}if(t.extraData){var r=M(t.extraData);for(s=0;s<r.length;s++){if(r[s]){n.append(r[s][0],r[s][1])}}}t.data=null;var a=e.extend(true,{},e.ajaxSettings,t,{contentType:false,processData:false,cache:false,type:l||"POST"});if(t.uploadProgress){a.xhr=function(){var i=e.ajaxSettings.xhr();if(i.upload){i.upload.addEventListener("progress",function(e){var i=0;var n=e.loaded||e.position;var s=e.total;if(e.lengthComputable){i=Math.ceil(n/s*100)}t.uploadProgress(e,n,s,i)},false)}return i}}a.data=null;var o=a.beforeSend;a.beforeSend=function(e,i){if(t.formData){i.data=t.formData}else{i.data=n}if(o){o.call(this,e,i)}};return e.ajax(a)}function O(i){var s=c[0],r,o,u,f,d,h,m,g,v,y,b,w;var x=e.Deferred();x.abort=function(e){g.abort(e)};if(i){for(o=0;o<p.length;o++){r=e(p[o]);if(n){r.prop("disabled",false)}else{r.removeAttr("disabled")}}}u=e.extend(true,{},e.ajaxSettings,t);u.context=u.context||u;d="jqFormIO"+(new Date).getTime();var C=s.ownerDocument;var T=c.closest("body");if(u.iframeTarget){h=e(u.iframeTarget,C);y=h.attr2("name");if(!y){h.attr2("name",d)}else{d=y}}else{h=e('<iframe name="'+d+'" src="'+u.iframeSrc+'" />',C);h.css({position:"absolute",top:"-1000px",left:"-1000px"})}m=h[0];g={aborted:0,responseText:null,responseXML:null,status:0,statusText:"n/a",getAllResponseHeaders:function(){},getResponseHeader:function(){},setRequestHeader:function(){},abort:function(t){var i=t==="timeout"?"timeout":"aborted";a("aborting upload... "+i);this.aborted=1;try{if(m.contentWindow.document.execCommand){m.contentWindow.document.execCommand("Stop")}}catch(e){}h.attr("src",u.iframeSrc);g.error=i;if(u.error){u.error.call(u.context,g,i,t)}if(f){e.event.trigger("ajaxError",[g,u,i])}if(u.complete){u.complete.call(u.context,g,i)}}};f=u.global;if(f&&e.active++===0){e.event.trigger("ajaxStart")}if(f){e.event.trigger("ajaxSend",[g,u])}if(u.beforeSend&&u.beforeSend.call(u.context,g,u)===false){if(u.global){e.active--}x.reject();return x}if(g.aborted){x.reject();return x}v=s.clk;if(v){y=v.name;if(y&&!v.disabled){u.extraData=u.extraData||{};u.extraData[y]=v.value;if(v.type==="image"){u.extraData[y+".x"]=s.clk_x;u.extraData[y+".y"]=s.clk_y}}}var _=1;var k=2;function D(e){var t=null;try{if(e.contentWindow){t=e.contentWindow.document}}catch(e){a("cannot get iframe.contentWindow document: "+e)}if(t){return t}try{t=e.contentDocument?e.contentDocument:e.document}catch(i){a("cannot get iframe.contentDocument: "+i);t=e.document}return t}var S=e("meta[name=csrf-token]").attr("content");var $=e("meta[name=csrf-param]").attr("content");if($&&S){u.extraData=u.extraData||{};u.extraData[$]=S}function A(){var t=c.attr2("target"),i=c.attr2("action"),n="multipart/form-data",r=c.attr("enctype")||c.attr("encoding")||n;s.setAttribute("target",d);if(!l||/post/i.test(l)){s.setAttribute("method","POST")}if(i!==u.url){s.setAttribute("action",u.url)}if(!u.skipEncodingOverride&&(!l||/post/i.test(l))){c.attr({encoding:"multipart/form-data",enctype:"multipart/form-data"})}if(u.timeout){w=setTimeout(function(){b=true;F(_)},u.timeout)}function o(){try{var e=D(m).readyState;a("state = "+e);if(e&&e.toLowerCase()==="uninitialized"){setTimeout(o,50)}}catch(e){a("Server abort: ",e," (",e.name,")");F(k);if(w){clearTimeout(w)}w=undefined}}var f=[];try{if(u.extraData){for(var p in u.extraData){if(u.extraData.hasOwnProperty(p)){if(e.isPlainObject(u.extraData[p])&&u.extraData[p].hasOwnProperty("name")&&u.extraData[p].hasOwnProperty("value")){f.push(e('<input type="hidden" name="'+u.extraData[p].name+'">',C).val(u.extraData[p].value).appendTo(s)[0])}else{f.push(e('<input type="hidden" name="'+p+'">',C).val(u.extraData[p]).appendTo(s)[0])}}}}if(!u.iframeTarget){h.appendTo(T)}if(m.attachEvent){m.attachEvent("onload",F)}else{m.addEventListener("load",F,false)}setTimeout(o,15);try{s.submit()}catch(e){var g=document.createElement("form").submit;g.apply(s)}}finally{s.setAttribute("action",i);s.setAttribute("enctype",r);if(t){s.setAttribute("target",t)}else{c.removeAttr("target")}e(f).remove()}}if(u.forceSync){A()}else{setTimeout(A,10)}var E,M,P=50,O;function F(t){if(g.aborted||O){return}M=D(m);if(!M){a("cannot access response document");t=k}if(t===_&&g){g.abort("timeout");x.reject(g,"timeout");return}else if(t===k&&g){g.abort("server abort");x.reject(g,"error","server abort");return}if(!M||M.location.href===u.iframeSrc){if(!b){return}}if(m.detachEvent){m.detachEvent("onload",F)}else{m.removeEventListener("load",F,false)}var i="success",n;try{if(b){throw"timeout"}var s=u.dataType==="xml"||M.XMLDocument||e.isXMLDoc(M);a("isXml="+s);if(!s&&window.opera&&(M.body===null||!M.body.innerHTML)){if(--P){a("requeing onLoad callback, DOM not available");setTimeout(F,250);return}}var r=M.body?M.body:M.documentElement;g.responseText=r?r.innerHTML:null;g.responseXML=M.XMLDocument?M.XMLDocument:M;if(s){u.dataType="xml"}g.getResponseHeader=function(e){var t={"content-type":u.dataType};return t[e.toLowerCase()]};if(r){g.status=Number(r.getAttribute("status"))||g.status;g.statusText=r.getAttribute("statusText")||g.statusText}var o=(u.dataType||"").toLowerCase();var l=/(json|script|text)/.test(o);if(l||u.textarea){var c=M.getElementsByTagName("textarea")[0];if(c){g.responseText=c.value;g.status=Number(c.getAttribute("status"))||g.status;g.statusText=c.getAttribute("statusText")||g.statusText}else if(l){var d=M.getElementsByTagName("pre")[0];var p=M.getElementsByTagName("body")[0];if(d){g.responseText=d.textContent?d.textContent:d.innerText}else if(p){g.responseText=p.textContent?p.textContent:p.innerText}}}else if(o==="xml"&&!g.responseXML&&g.responseText){g.responseXML=I(g.responseText)}try{E=N(g,o,u)}catch(e){i="parsererror";g.error=n=e||i}}catch(e){a("error caught: ",e);i="error";g.error=n=e||i}if(g.aborted){a("upload aborted");i=null}if(g.status){i=g.status>=200&&g.status<300||g.status===304?"success":"error"}if(i==="success"){if(u.success){u.success.call(u.context,E,"success",g)}x.resolve(g.responseText,"success",g);if(f){e.event.trigger("ajaxSuccess",[g,u])}}else if(i){if(typeof n==="undefined"){n=g.statusText}if(u.error){u.error.call(u.context,g,i,n)}x.reject(g,"error",n);if(f){e.event.trigger("ajaxError",[g,u,n])}}if(f){e.event.trigger("ajaxComplete",[g,u])}if(f&&!--e.active){e.event.trigger("ajaxStop")}if(u.complete){u.complete.call(u.context,g,i)}O=true;if(u.timeout){clearTimeout(w)}setTimeout(function(){if(!u.iframeTarget){h.remove()}else{h.attr("src",u.iframeSrc)}g.responseXML=null},100)}var I=e.parseXML||function(e,t){if(window.ActiveXObject){t=new ActiveXObject("Microsoft.XMLDOM");t.async="false";t.loadXML(e)}else{t=(new DOMParser).parseFromString(e,"text/xml")}return t&&t.documentElement&&t.documentElement.nodeName!=="parsererror"?t:null};var j=e.parseJSON||function(e){return window["eval"]("("+e+")")};var N=function(t,i,n){var s=t.getResponseHeader("content-type")||"",r=(i==="xml"||!i)&&s.indexOf("xml")>=0,a=r?t.responseXML:t.responseText;if(r&&a.documentElement.nodeName==="parsererror"){if(e.error){e.error("parsererror")}}if(n&&n.dataFilter){a=n.dataFilter(a,i)}if(typeof a==="string"){if((i==="json"||!i)&&s.indexOf("json")>=0){a=j(a)}else if((i==="script"||!i)&&s.indexOf("javascript")>=0){e.globalEval(a)}}return a};return x}};e.fn.ajaxForm=function(t,i,n,o){if(typeof t==="string"||t===false&&arguments.length>0){t={url:t,data:i,dataType:n};if(typeof o==="function"){t.success=o}}t=t||{};t.delegation=t.delegation&&e.isFunction(e.fn.on);if(!t.delegation&&this.length===0){var l={s:this.selector,c:this.context};if(!e.isReady&&l.s){a("DOM not ready, queuing ajaxForm");e(function(){e(l.s,l.c).ajaxForm(t)});return this}a("terminating; zero elements found by selector"+(e.isReady?"":" (DOM not ready)"));return this}if(t.delegation){e(document).off("submit.form-plugin",this.selector,s).off("click.form-plugin",this.selector,r).on("submit.form-plugin",this.selector,t,s).on("click.form-plugin",this.selector,t,r);return this}return this.ajaxFormUnbind().on("submit.form-plugin",t,s).on("click.form-plugin",t,r)};function s(t){var i=t.data;if(!t.isDefaultPrevented()){t.preventDefault();e(t.target).closest("form").ajaxSubmit(i)}}function r(t){var i=t.target;var n=e(i);if(!n.is("[type=submit],[type=image]")){var s=n.closest("[type=submit]");if(s.length===0){return}i=s[0]}var r=i.form;r.clk=i;if(i.type==="image"){if(typeof t.offsetX!=="undefined"){r.clk_x=t.offsetX;r.clk_y=t.offsetY}else if(typeof e.fn.offset==="function"){var a=n.offset();r.clk_x=t.pageX-a.left;r.clk_y=t.pageY-a.top}else{r.clk_x=t.pageX-i.offsetLeft;r.clk_y=t.pageY-i.offsetTop}}setTimeout(function(){r.clk=r.clk_x=r.clk_y=null},100)}e.fn.ajaxFormUnbind=function(){return this.off("submit.form-plugin click.form-plugin")};e.fn.formToArray=function(t,n,s){var r=[];if(this.length===0){return r}var a=this[0];var o=this.attr("id");var l=t||typeof a.elements==="undefined"?a.getElementsByTagName("*"):a.elements;var u;if(l){l=e.makeArray(l)}if(o&&(t||/(Edge|Trident)\//.test(navigator.userAgent))){u=e(':input[form="'+o+'"]').get();if(u.length){l=(l||[]).concat(u)}}if(!l||!l.length){return r}if(e.isFunction(s)){l=e.map(l,s)}var f,c,d,h,p,m,g;for(f=0,m=l.length;f<m;f++){p=l[f];d=p.name;if(!d||p.disabled){continue}if(t&&a.clk&&p.type==="image"){if(a.clk===p){r.push({name:d,value:e(p).val(),type:p.type});r.push({name:d+".x",value:a.clk_x},{name:d+".y",value:a.clk_y})}continue}h=e.fieldValue(p,true);if(h&&h.constructor===Array){if(n){n.push(p)}for(c=0,g=h.length;c<g;c++){r.push({name:d,value:h[c]})}}else if(i.fileapi&&p.type==="file"){if(n){n.push(p)}var v=p.files;if(v.length){for(c=0;c<v.length;c++){r.push({name:d,value:v[c],type:p.type})}}else{r.push({name:d,value:"",type:p.type})}}else if(h!==null&&typeof h!=="undefined"){if(n){n.push(p)}r.push({name:d,value:h,type:p.type,required:p.required})}}if(!t&&a.clk){var y=e(a.clk),b=y[0];d=b.name;if(d&&!b.disabled&&b.type==="image"){r.push({name:d,value:y.val()});r.push({name:d+".x",value:a.clk_x},{name:d+".y",value:a.clk_y})}}return r};e.fn.formSerialize=function(t){return e.param(this.formToArray(t))};e.fn.fieldSerialize=function(t){var i=[];this.each(function(){var n=this.name;if(!n){return}var s=e.fieldValue(this,t);if(s&&s.constructor===Array){for(var r=0,a=s.length;r<a;r++){i.push({name:n,value:s[r]})}}else if(s!==null&&typeof s!=="undefined"){i.push({name:this.name,value:s})}});return e.param(i)};e.fn.fieldValue=function(t){for(var i=[],n=0,s=this.length;n<s;n++){var r=this[n];var a=e.fieldValue(r,t);if(a===null||typeof a==="undefined"||a.constructor===Array&&!a.length){continue}if(a.constructor===Array){e.merge(i,a)}else{i.push(a)}}return i};e.fieldValue=function(i,n){var s=i.name,r=i.type,a=i.tagName.toLowerCase();if(typeof n==="undefined"){n=true}if(n&&(!s||i.disabled||r==="reset"||r==="button"||(r==="checkbox"||r==="radio")&&!i.checked||(r==="submit"||r==="image")&&i.form&&i.form.clk!==i||a==="select"&&i.selectedIndex===-1)){return null}if(a==="select"){var o=i.selectedIndex;if(o<0){return null}var l=[],u=i.options;var f=r==="select-one";var c=f?o+1:u.length;for(var d=f?o:0;d<c;d++){var h=u[d];if(h.selected&&!h.disabled){var p=h.value;if(!p){p=h.attributes&&h.attributes.value&&!h.attributes.value.specified?h.text:h.value}if(f){return p}l.push(p)}}return l}return e(i).val().replace(t,"\r\n")};e.fn.clearForm=function(t){return this.each(function(){e("input,select,textarea",this).clearFields(t)})};e.fn.clearFields=e.fn.clearInputs=function(t){var i=/^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each(function(){var n=this.type,s=this.tagName.toLowerCase();if(i.test(n)||s==="textarea"){this.value=""}else if(n==="checkbox"||n==="radio"){this.checked=false}else if(s==="select"){this.selectedIndex=-1}else if(n==="file"){if(/MSIE/.test(navigator.userAgent)){e(this).replaceWith(e(this).clone(true))}else{e(this).val("")}}else if(t){if(t===true&&/hidden/.test(n)||typeof t==="string"&&e(this).is(t)){this.value=""}}})};e.fn.resetForm=function(){return this.each(function(){var t=e(this);var i=this.tagName.toLowerCase();switch(i){case"input":this.checked=this.defaultChecked;case"textarea":this.value=this.defaultValue;return true;case"option":case"optgroup":var n=t.parents("select");if(n.length&&n[0].multiple){if(i==="option"){this.selected=this.defaultSelected}else{t.find("option").resetForm()}}else{n.resetForm()}return true;case"select":t.find("option").each(function(e){this.selected=this.defaultSelected;if(this.defaultSelected&&!t[0].multiple){t[0].selectedIndex=e;return false}});return true;case"label":var s=e(t.attr("for"));var r=t.find("input,select,textarea");if(s[0]){r.unshift(s[0])}r.resetForm();return true;case"form":if(typeof this.reset==="function"||typeof this.reset==="object"&&!this.reset.nodeType){this.reset()}return true;default:t.find("form,input,label,select,textarea").resetForm();return true}})};e.fn.enable=function(e){if(typeof e==="undefined"){e=true}return this.each(function(){this.disabled=!e})};e.fn.selected=function(t){if(typeof t==="undefined"){t=true}return this.each(function(){var i=this.type;if(i==="checkbox"||i==="radio"){this.checked=t}else if(this.tagName.toLowerCase()==="option"){var n=e(this).parent("select");if(t&&n[0]&&n[0].type==="select-one"){n.find("option").selected(false)}this.selected=t}})};e.fn.ajaxSubmit.debug=false;function a(){if(!e.fn.ajaxSubmit.debug){return}var t="[jquery.form] "+Array.prototype.join.call(arguments,"");if(window.console&&window.console.log){window.console.log(t)}else if(window.opera&&window.opera.postError){window.opera.postError(t)}}});if(typeof jQuery==="undefined"){throw new Error("Bootstrap's JavaScript requires jQuery")}+function(e){"use strict";var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||t[0]==1&&t[1]==9&&t[2]<1||t[0]>3){throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}}(jQuery);+function(e){"use strict";function t(){var e=document.createElement("bootstrap");var t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in t){if(e.style[i]!==undefined){return{end:t[i]}}}return false}e.fn.emulateTransitionEnd=function(t){var i=false;var n=this;e(this).one("bsTransitionEnd",function(){i=true});var s=function(){if(!i)e(n).trigger(e.support.transition.end)};setTimeout(s,t);return this};e(function(){e.support.transition=t();if(!e.support.transition)return;e.event.special.bsTransitionEnd={bindType:e.support.transition.end,delegateType:e.support.transition.end,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}})}(jQuery);+function(e){"use strict";var t='[data-dismiss="alert"]';var i=function(i){e(i).on("click",t,this.close)};i.VERSION="3.3.7";i.TRANSITION_DURATION=150;i.prototype.close=function(t){var n=e(this);var s=n.attr("data-target");if(!s){s=n.attr("href");s=s&&s.replace(/.*(?=#[^\s]*$)/,"")}var r=e(s==="#"?[]:s);if(t)t.preventDefault();if(!r.length){r=n.closest(".alert")}r.trigger(t=e.Event("close.bs.alert"));if(t.isDefaultPrevented())return;r.removeClass("in");function a(){r.detach().trigger("closed.bs.alert").remove()}e.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",a).emulateTransitionEnd(i.TRANSITION_DURATION):a()};function n(t){return this.each(function(){var n=e(this);var s=n.data("bs.alert");if(!s)n.data("bs.alert",s=new i(this));if(typeof t=="string")s[t].call(n)})}var s=e.fn.alert;e.fn.alert=n;e.fn.alert.Constructor=i;e.fn.alert.noConflict=function(){e.fn.alert=s;return this};e(document).on("click.bs.alert.data-api",t,i.prototype.close)}(jQuery);+function(e){"use strict";var t=function(i,n){this.$element=e(i);this.options=e.extend({},t.DEFAULTS,n);this.isLoading=false};t.VERSION="3.3.7";t.DEFAULTS={loadingText:"loading..."};t.prototype.setState=function(t){var i="disabled";var n=this.$element;var s=n.is("input")?"val":"html";var r=n.data();t+="Text";if(r.resetText==null)n.data("resetText",n[s]());setTimeout(e.proxy(function(){n[s](r[t]==null?this.options[t]:r[t]);if(t=="loadingText"){this.isLoading=true;n.addClass(i).attr(i,i).prop(i,true)}else if(this.isLoading){this.isLoading=false;n.removeClass(i).removeAttr(i).prop(i,false)}},this),0)};t.prototype.toggle=function(){var e=true;var t=this.$element.closest('[data-toggle="buttons"]');if(t.length){var i=this.$element.find("input");if(i.prop("type")=="radio"){if(i.prop("checked"))e=false;t.find(".active").removeClass("active");this.$element.addClass("active")}else if(i.prop("type")=="checkbox"){if(i.prop("checked")!==this.$element.hasClass("active"))e=false;this.$element.toggleClass("active")}i.prop("checked",this.$element.hasClass("active"));if(e)i.trigger("change")}else{this.$element.attr("aria-pressed",!this.$element.hasClass("active"));this.$element.toggleClass("active")}};function i(i){return this.each(function(){var n=e(this);var s=n.data("bs.button");var r=typeof i=="object"&&i;if(!s)n.data("bs.button",s=new t(this,r));if(i=="toggle")s.toggle();else if(i)s.setState(i)})}var n=e.fn.button;e.fn.button=i;e.fn.button.Constructor=t;e.fn.button.noConflict=function(){e.fn.button=n;return this};e(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(t){var n=e(t.target).closest(".btn");i.call(n,"toggle");if(!e(t.target).is('input[type="radio"], input[type="checkbox"]')){t.preventDefault();if(n.is("input,button"))n.trigger("focus");else n.find("input:visible,button:visible").first().trigger("focus")}}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(t){e(t.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(t.type))})}(jQuery);+function(e){"use strict";var t=function(t,i){this.$element=e(t);this.$indicators=this.$element.find(".carousel-indicators");this.options=i;this.paused=null;this.sliding=null;this.interval=null;this.$active=null;this.$items=null;this.options.keyboard&&this.$element.on("keydown.bs.carousel",e.proxy(this.keydown,this));this.options.pause=="hover"&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",e.proxy(this.pause,this)).on("mouseleave.bs.carousel",e.proxy(this.cycle,this))};t.VERSION="3.3.7";t.TRANSITION_DURATION=600;t.DEFAULTS={interval:5e3,pause:"hover",wrap:true,keyboard:true};t.prototype.keydown=function(e){if(/input|textarea/i.test(e.target.tagName))return;switch(e.which){case 37:this.prev();break;case 39:this.next();break;default:return}e.preventDefault()};t.prototype.cycle=function(t){t||(this.paused=false);this.interval&&clearInterval(this.interval);this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval));return this};t.prototype.getItemIndex=function(e){this.$items=e.parent().children(".item");return this.$items.index(e||this.$active)};t.prototype.getItemForDirection=function(e,t){var i=this.getItemIndex(t);var n=e=="prev"&&i===0||e=="next"&&i==this.$items.length-1;if(n&&!this.options.wrap)return t;var s=e=="prev"?-1:1;var r=(i+s)%this.$items.length;return this.$items.eq(r)};t.prototype.to=function(e){var t=this;var i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(e>this.$items.length-1||e<0)return;if(this.sliding)return this.$element.one("slid.bs.carousel",function(){t.to(e)});if(i==e)return this.pause().cycle();return this.slide(e>i?"next":"prev",this.$items.eq(e))};t.prototype.pause=function(t){t||(this.paused=true);if(this.$element.find(".next, .prev").length&&e.support.transition){this.$element.trigger(e.support.transition.end);this.cycle(true)}this.interval=clearInterval(this.interval);return this};t.prototype.next=function(){if(this.sliding)return;return this.slide("next")};t.prototype.prev=function(){if(this.sliding)return;return this.slide("prev")};t.prototype.slide=function(i,n){var s=this.$element.find(".item.active");var r=n||this.getItemForDirection(i,s);var a=this.interval;var o=i=="next"?"left":"right";var l=this;if(r.hasClass("active"))return this.sliding=false;var u=r[0];var f=e.Event("slide.bs.carousel",{relatedTarget:u,direction:o});this.$element.trigger(f);if(f.isDefaultPrevented())return;this.sliding=true;a&&this.pause();if(this.$indicators.length){this.$indicators.find(".active").removeClass("active");var c=e(this.$indicators.children()[this.getItemIndex(r)]);c&&c.addClass("active")}var d=e.Event("slid.bs.carousel",{relatedTarget:u,direction:o});if(e.support.transition&&this.$element.hasClass("slide")){r.addClass(i);r[0].offsetWidth;s.addClass(o);r.addClass(o);s.one("bsTransitionEnd",function(){r.removeClass([i,o].join(" ")).addClass("active");s.removeClass(["active",o].join(" "));l.sliding=false;setTimeout(function(){l.$element.trigger(d)},0)}).emulateTransitionEnd(t.TRANSITION_DURATION)}else{s.removeClass("active");r.addClass("active");this.sliding=false;this.$element.trigger(d)}a&&this.cycle();return this};function i(i){return this.each(function(){var n=e(this);var s=n.data("bs.carousel");var r=e.extend({},t.DEFAULTS,n.data(),typeof i=="object"&&i);var a=typeof i=="string"?i:r.slide;if(!s)n.data("bs.carousel",s=new t(this,r));if(typeof i=="number")s.to(i);else if(a)s[a]();else if(r.interval)s.pause().cycle()})}var n=e.fn.carousel;e.fn.carousel=i;e.fn.carousel.Constructor=t;e.fn.carousel.noConflict=function(){e.fn.carousel=n;return this};var s=function(t){var n;var s=e(this);var r=e(s.attr("data-target")||(n=s.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,""));if(!r.hasClass("carousel"))return;var a=e.extend({},r.data(),s.data());var o=s.attr("data-slide-to");if(o)a.interval=false;i.call(r,a);if(o){r.data("bs.carousel").to(o)}t.preventDefault()};e(document).on("click.bs.carousel.data-api","[data-slide]",s).on("click.bs.carousel.data-api","[data-slide-to]",s);e(window).on("load",function(){e('[data-ride="carousel"]').each(function(){var t=e(this);i.call(t,t.data())})})}(jQuery);+function(e){"use strict";var t=function(i,n){this.$element=e(i);this.options=e.extend({},t.DEFAULTS,n);this.$trigger=e('[data-toggle="collapse"][href="#'+i.id+'"],'+'[data-toggle="collapse"][data-target="#'+i.id+'"]');this.transitioning=null;if(this.options.parent){this.$parent=this.getParent()}else{this.addAriaAndCollapsedClass(this.$element,this.$trigger)}if(this.options.toggle)this.toggle()};t.VERSION="3.3.7";t.TRANSITION_DURATION=350;t.DEFAULTS={toggle:true};t.prototype.dimension=function(){var e=this.$element.hasClass("width");return e?"width":"height"};t.prototype.show=function(){if(this.transitioning||this.$element.hasClass("in"))return;var i;var s=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(s&&s.length){i=s.data("bs.collapse");if(i&&i.transitioning)return}var r=e.Event("show.bs.collapse");this.$element.trigger(r);if(r.isDefaultPrevented())return;if(s&&s.length){n.call(s,"hide");i||s.data("bs.collapse",null)}var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",true);this.$trigger.removeClass("collapsed").attr("aria-expanded",true);this.transitioning=1;var o=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a]("");this.transitioning=0;this.$element.trigger("shown.bs.collapse")};if(!e.support.transition)return o.call(this);var l=e.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",e.proxy(o,this)).emulateTransitionEnd(t.TRANSITION_DURATION)[a](this.$element[0][l])};t.prototype.hide=function(){if(this.transitioning||!this.$element.hasClass("in"))return;var i=e.Event("hide.bs.collapse");this.$element.trigger(i);if(i.isDefaultPrevented())return;var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight;this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",false);this.$trigger.addClass("collapsed").attr("aria-expanded",false);this.transitioning=1;var s=function(){this.transitioning=0;this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!e.support.transition)return s.call(this);this.$element[n](0).one("bsTransitionEnd",e.proxy(s,this)).emulateTransitionEnd(t.TRANSITION_DURATION)};t.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};t.prototype.getParent=function(){return e(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(e.proxy(function(t,n){var s=e(n);this.addAriaAndCollapsedClass(i(s),s)},this)).end()};t.prototype.addAriaAndCollapsedClass=function(e,t){var i=e.hasClass("in");e.attr("aria-expanded",i);t.toggleClass("collapsed",!i).attr("aria-expanded",i)};function i(t){var i;var n=t.attr("data-target")||(i=t.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return e(n)}function n(i){return this.each(function(){var n=e(this);var s=n.data("bs.collapse");var r=e.extend({},t.DEFAULTS,n.data(),typeof i=="object"&&i);if(!s&&r.toggle&&/show|hide/.test(i))r.toggle=false;if(!s)n.data("bs.collapse",s=new t(this,r));if(typeof i=="string")s[i]()})}var s=e.fn.collapse;e.fn.collapse=n;e.fn.collapse.Constructor=t;e.fn.collapse.noConflict=function(){e.fn.collapse=s;return this};e(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var s=e(this);if(!s.attr("data-target"))t.preventDefault();var r=i(s);var a=r.data("bs.collapse");var o=a?"toggle":s.data();n.call(r,o)})}(jQuery);+function(e){"use strict";var t=".dropdown-backdrop";var i='[data-toggle="dropdown"]';var n=function(t){e(t).on("click.bs.dropdown",this.toggle)};n.VERSION="3.3.7";function s(t){var i=t.attr("data-target");if(!i){i=t.attr("href");i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,"")}var n=i&&e(i);return n&&n.length?n:t.parent()}function r(n){if(n&&n.which===3)return;e(t).remove();e(i).each(function(){var t=e(this);var i=s(t);var r={relatedTarget:this};if(!i.hasClass("open"))return;if(n&&n.type=="click"&&/input|textarea/i.test(n.target.tagName)&&e.contains(i[0],n.target))return;i.trigger(n=e.Event("hide.bs.dropdown",r));if(n.isDefaultPrevented())return;t.attr("aria-expanded","false");i.removeClass("open").trigger(e.Event("hidden.bs.dropdown",r))})}n.prototype.toggle=function(t){var i=e(this);if(i.is(".disabled, :disabled"))return;var n=s(i);var a=n.hasClass("open");r();if(!a){if("ontouchstart"in document.documentElement&&!n.closest(".navbar-nav").length){e(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(e(this)).on("click",r)}var o={relatedTarget:this};n.trigger(t=e.Event("show.bs.dropdown",o));if(t.isDefaultPrevented())return;i.trigger("focus").attr("aria-expanded","true");n.toggleClass("open").trigger(e.Event("shown.bs.dropdown",o))}return false};n.prototype.keydown=function(t){if(!/(38|40|27|32)/.test(t.which)||/input|textarea/i.test(t.target.tagName))return;var n=e(this);t.preventDefault();t.stopPropagation();if(n.is(".disabled, :disabled"))return;var r=s(n);var a=r.hasClass("open");if(!a&&t.which!=27||a&&t.which==27){if(t.which==27)r.find(i).trigger("focus");return n.trigger("click")}var o=" li:not(.disabled):visible a";var l=r.find(".dropdown-menu"+o);if(!l.length)return;var u=l.index(t.target);if(t.which==38&&u>0)u--;if(t.which==40&&u<l.length-1)u++;if(!~u)u=0;l.eq(u).trigger("focus")};function a(t){return this.each(function(){var i=e(this);var s=i.data("bs.dropdown");if(!s)i.data("bs.dropdown",s=new n(this));if(typeof t=="string")s[t].call(i)})}var o=e.fn.dropdown;e.fn.dropdown=a;e.fn.dropdown.Constructor=n;e.fn.dropdown.noConflict=function(){e.fn.dropdown=o;return this};e(document).on("click.bs.dropdown.data-api",r).on("click.bs.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.bs.dropdown.data-api",i,n.prototype.toggle).on("keydown.bs.dropdown.data-api",i,n.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",n.prototype.keydown)}(jQuery);+function(e){"use strict";var t=function(t,i){this.options=i;this.$body=e(document.body);this.$element=e(t);this.$dialog=this.$element.find(".modal-dialog");this.$backdrop=null;this.isShown=null;this.originalBodyPad=null;this.scrollbarWidth=0;this.ignoreBackdropClick=false;if(this.options.remote){this.$element.find(".modal-content").load(this.options.remote,e.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))}};t.VERSION="3.3.7";t.TRANSITION_DURATION=300;t.BACKDROP_TRANSITION_DURATION=150;t.DEFAULTS={backdrop:true,keyboard:true,show:true};t.prototype.toggle=function(e){return this.isShown?this.hide():this.show(e)};t.prototype.show=function(i){var n=this;var s=e.Event("show.bs.modal",{relatedTarget:i});this.$element.trigger(s);if(this.isShown||s.isDefaultPrevented())return;this.isShown=true;this.checkScrollbar();this.setScrollbar();this.$body.addClass("modal-open");this.escape();this.resize();this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',e.proxy(this.hide,this));this.$dialog.on("mousedown.dismiss.bs.modal",function(){n.$element.one("mouseup.dismiss.bs.modal",function(t){if(e(t.target).is(n.$element))n.ignoreBackdropClick=true})});this.backdrop(function(){var s=e.support.transition&&n.$element.hasClass("fade");if(!n.$element.parent().length){n.$element.appendTo(n.$body)}n.$element.show().scrollTop(0);n.adjustDialog();if(s){n.$element[0].offsetWidth}n.$element.addClass("in");n.enforceFocus();var r=e.Event("shown.bs.modal",{relatedTarget:i});s?n.$dialog.one("bsTransitionEnd",function(){n.$element.trigger("focus").trigger(r)}).emulateTransitionEnd(t.TRANSITION_DURATION):n.$element.trigger("focus").trigger(r)})};t.prototype.hide=function(i){if(i)i.preventDefault();i=e.Event("hide.bs.modal");this.$element.trigger(i);if(!this.isShown||i.isDefaultPrevented())return;this.isShown=false;this.escape();this.resize();e(document).off("focusin.bs.modal");this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal");this.$dialog.off("mousedown.dismiss.bs.modal");e.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",e.proxy(this.hideModal,this)).emulateTransitionEnd(t.TRANSITION_DURATION):this.hideModal()};t.prototype.enforceFocus=function(){e(document).off("focusin.bs.modal").on("focusin.bs.modal",e.proxy(function(e){if(document!==e.target&&this.$element[0]!==e.target&&!this.$element.has(e.target).length){this.$element.trigger("focus")}},this))};t.prototype.escape=function(){if(this.isShown&&this.options.keyboard){this.$element.on("keydown.dismiss.bs.modal",e.proxy(function(e){e.which==27&&this.hide()},this))}else if(!this.isShown){this.$element.off("keydown.dismiss.bs.modal")}};t.prototype.resize=function(){if(this.isShown){e(window).on("resize.bs.modal",e.proxy(this.handleUpdate,this))}else{e(window).off("resize.bs.modal")}};t.prototype.hideModal=function(){var e=this;this.$element.hide();this.backdrop(function(){e.$body.removeClass("modal-open");e.resetAdjustments();e.resetScrollbar();e.$element.trigger("hidden.bs.modal")})};t.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove();this.$backdrop=null};t.prototype.backdrop=function(i){var n=this;var s=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var r=e.support.transition&&s;this.$backdrop=e(document.createElement("div")).addClass("modal-backdrop "+s).appendTo(this.$body);this.$element.on("click.dismiss.bs.modal",e.proxy(function(e){if(this.ignoreBackdropClick){this.ignoreBackdropClick=false;return}if(e.target!==e.currentTarget)return;this.options.backdrop=="static"?this.$element[0].focus():this.hide()},this));if(r)this.$backdrop[0].offsetWidth;this.$backdrop.addClass("in");if(!i)return;r?this.$backdrop.one("bsTransitionEnd",i).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):i()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){n.removeBackdrop();i&&i()};e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):a()}else if(i){i()}};t.prototype.handleUpdate=function(){this.adjustDialog()};t.prototype.adjustDialog=function(){var e=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&e?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!e?this.scrollbarWidth:""})};t.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})};t.prototype.checkScrollbar=function(){var e=window.innerWidth;if(!e){var t=document.documentElement.getBoundingClientRect();e=t.right-Math.abs(t.left)}this.bodyIsOverflowing=document.body.clientWidth<e;this.scrollbarWidth=this.measureScrollbar()};t.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"";if(this.bodyIsOverflowing)this.$body.css("padding-right",e+this.scrollbarWidth)};t.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)};t.prototype.measureScrollbar=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure";this.$body.append(e);var t=e.offsetWidth-e.clientWidth;this.$body[0].removeChild(e);return t};function i(i,n){return this.each(function(){var s=e(this);var r=s.data("bs.modal");var a=e.extend({},t.DEFAULTS,s.data(),typeof i=="object"&&i);if(!r)s.data("bs.modal",r=new t(this,a));if(typeof i=="string")r[i](n);else if(a.show)r.show(n)})}var n=e.fn.modal;e.fn.modal=i;e.fn.modal.Constructor=t;e.fn.modal.noConflict=function(){e.fn.modal=n;return this};e(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var n=e(this);var s=n.attr("href");var r=e(n.attr("data-target")||s&&s.replace(/.*(?=#[^\s]+$)/,""));var a=r.data("bs.modal")?"toggle":e.extend({remote:!/#/.test(s)&&s},r.data(),n.data());if(n.is("a"))t.preventDefault();r.one("show.bs.modal",function(e){if(e.isDefaultPrevented())return;r.one("hidden.bs.modal",function(){n.is(":visible")&&n.trigger("focus")})});i.call(r,a,this)})}(jQuery);+function(e){"use strict";var t=function(e,t){this.type=null;this.options=null;this.enabled=null;this.timeout=null;this.hoverState=null;this.$element=null;this.inState=null;this.init("tooltip",e,t)};t.VERSION="3.3.7";t.TRANSITION_DURATION=150;t.DEFAULTS={animation:true,placement:"top",selector:false,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:false,container:false,viewport:{selector:"body",padding:0}};t.prototype.init=function(t,i,n){this.enabled=true;this.type=t;this.$element=e(i);this.options=this.getOptions(n);this.$viewport=this.options.viewport&&e(e.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport);this.inState={click:false,hover:false,focus:false};if(this.$element[0]instanceof document.constructor&&!this.options.selector){throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!")}var s=this.options.trigger.split(" ");for(var r=s.length;r--;){var a=s[r];if(a=="click"){this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this))}else if(a!="manual"){var o=a=="hover"?"mouseenter":"focusin";var l=a=="hover"?"mouseleave":"focusout";this.$element.on(o+"."+this.type,this.options.selector,e.proxy(this.enter,this));this.$element.on(l+"."+this.type,this.options.selector,e.proxy(this.leave,this))}}this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()};t.prototype.getDefaults=function(){return t.DEFAULTS};t.prototype.getOptions=function(t){t=e.extend({},this.getDefaults(),this.$element.data(),t);if(t.delay&&typeof t.delay=="number"){t.delay={show:t.delay,hide:t.delay}}return t};t.prototype.getDelegateOptions=function(){var t={};var i=this.getDefaults();this._options&&e.each(this._options,function(e,n){if(i[e]!=n)t[e]=n});return t};t.prototype.enter=function(t){var i=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);if(!i){i=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,i)}if(t instanceof e.Event){i.inState[t.type=="focusin"?"focus":"hover"]=true}if(i.tip().hasClass("in")||i.hoverState=="in"){i.hoverState="in";return}clearTimeout(i.timeout);i.hoverState="in";if(!i.options.delay||!i.options.delay.show)return i.show();i.timeout=setTimeout(function(){if(i.hoverState=="in")i.show()},i.options.delay.show)};t.prototype.isInStateTrue=function(){for(var e in this.inState){if(this.inState[e])return true}return false};t.prototype.leave=function(t){var i=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);if(!i){i=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,i)}if(t instanceof e.Event){i.inState[t.type=="focusout"?"focus":"hover"]=false}if(i.isInStateTrue())return;clearTimeout(i.timeout);i.hoverState="out";if(!i.options.delay||!i.options.delay.hide)return i.hide();i.timeout=setTimeout(function(){if(i.hoverState=="out")i.hide()},i.options.delay.hide)};t.prototype.show=function(){var i=e.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(i);var n=e.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(i.isDefaultPrevented()||!n)return;var s=this;var r=this.tip();var a=this.getUID(this.type);this.setContent();r.attr("id",a);this.$element.attr("aria-describedby",a);if(this.options.animation)r.addClass("fade");var o=typeof this.options.placement=="function"?this.options.placement.call(this,r[0],this.$element[0]):this.options.placement;var l=/\s?auto?\s?/i;var u=l.test(o);if(u)o=o.replace(l,"")||"top";r.detach().css({top:0,left:0,display:"block"}).addClass(o).data("bs."+this.type,this);this.options.container?r.appendTo(this.options.container):r.insertAfter(this.$element);this.$element.trigger("inserted.bs."+this.type);var f=this.getPosition();var c=r[0].offsetWidth;var d=r[0].offsetHeight;if(u){var h=o;var p=this.getPosition(this.$viewport);o=o=="bottom"&&f.bottom+d>p.bottom?"top":o=="top"&&f.top-d<p.top?"bottom":o=="right"&&f.right+c>p.width?"left":o=="left"&&f.left-c<p.left?"right":o;r.removeClass(h).addClass(o)}var m=this.getCalculatedOffset(o,f,c,d);this.applyPlacement(m,o);var g=function(){var e=s.hoverState;s.$element.trigger("shown.bs."+s.type);s.hoverState=null;if(e=="out")s.leave(s)};e.support.transition&&this.$tip.hasClass("fade")?r.one("bsTransitionEnd",g).emulateTransitionEnd(t.TRANSITION_DURATION):g()}};t.prototype.applyPlacement=function(t,i){var n=this.tip();var s=n[0].offsetWidth;var r=n[0].offsetHeight;var a=parseInt(n.css("margin-top"),10);var o=parseInt(n.css("margin-left"),10);if(isNaN(a))a=0;if(isNaN(o))o=0;t.top+=a;t.left+=o;e.offset.setOffset(n[0],e.extend({using:function(e){n.css({top:Math.round(e.top),left:Math.round(e.left)})}},t),0);n.addClass("in");var l=n[0].offsetWidth;var u=n[0].offsetHeight;if(i=="top"&&u!=r){t.top=t.top+r-u}var f=this.getViewportAdjustedDelta(i,t,l,u);if(f.left)t.left+=f.left;else t.top+=f.top;var c=/top|bottom/.test(i);var d=c?f.left*2-s+l:f.top*2-r+u;var h=c?"offsetWidth":"offsetHeight";n.offset(t);this.replaceArrow(d,n[0][h],c)};t.prototype.replaceArrow=function(e,t,i){this.arrow().css(i?"left":"top",50*(1-e/t)+"%").css(i?"top":"left","")};t.prototype.setContent=function(){var e=this.tip();var t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t);e.removeClass("fade in top bottom left right")};t.prototype.hide=function(i){var n=this;var s=e(this.$tip);var r=e.Event("hide.bs."+this.type);function a(){if(n.hoverState!="in")s.detach();if(n.$element){n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type)}i&&i()}this.$element.trigger(r);if(r.isDefaultPrevented())return;s.removeClass("in");e.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",a).emulateTransitionEnd(t.TRANSITION_DURATION):a();this.hoverState=null;return this};t.prototype.fixTitle=function(){var e=this.$element;if(e.attr("title")||typeof e.attr("data-original-title")!="string"){e.attr("data-original-title",e.attr("title")||"").attr("title","")}};t.prototype.hasContent=function(){return this.getTitle()};t.prototype.getPosition=function(t){t=t||this.$element;var i=t[0];var n=i.tagName=="BODY";var s=i.getBoundingClientRect();if(s.width==null){s=e.extend({},s,{width:s.right-s.left,height:s.bottom-s.top})}var r=window.SVGElement&&i instanceof window.SVGElement;var a=n?{top:0,left:0}:r?null:t.offset();var o={scroll:n?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop()};var l=n?{width:e(window).width(),height:e(window).height()}:null;return e.extend({},s,o,l,a)};t.prototype.getCalculatedOffset=function(e,t,i,n){return e=="bottom"?{top:t.top+t.height,left:t.left+t.width/2-i/2}:e=="top"?{top:t.top-n,left:t.left+t.width/2-i/2}:e=="left"?{top:t.top+t.height/2-n/2,left:t.left-i}:{top:t.top+t.height/2-n/2,left:t.left+t.width}};t.prototype.getViewportAdjustedDelta=function(e,t,i,n){var s={top:0,left:0};if(!this.$viewport)return s;var r=this.options.viewport&&this.options.viewport.padding||0;var a=this.getPosition(this.$viewport);if(/right|left/.test(e)){var o=t.top-r-a.scroll;var l=t.top+r-a.scroll+n;if(o<a.top){s.top=a.top-o}else if(l>a.top+a.height){s.top=a.top+a.height-l}}else{var u=t.left-r;var f=t.left+r+i;if(u<a.left){s.left=a.left-u}else if(f>a.right){s.left=a.left+a.width-f}}return s};t.prototype.getTitle=function(){var e;var t=this.$element;var i=this.options;e=t.attr("data-original-title")||(typeof i.title=="function"?i.title.call(t[0]):i.title);return e};t.prototype.getUID=function(e){do{e+=~~(Math.random()*1e6)}while(document.getElementById(e));return e};t.prototype.tip=function(){if(!this.$tip){this.$tip=e(this.options.template);if(this.$tip.length!=1){throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!")}}return this.$tip};t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")};t.prototype.enable=function(){this.enabled=true};t.prototype.disable=function(){this.enabled=false};t.prototype.toggleEnabled=function(){this.enabled=!this.enabled};t.prototype.toggle=function(t){var i=this;if(t){i=e(t.currentTarget).data("bs."+this.type);if(!i){i=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,i)}}if(t){i.inState.click=!i.inState.click;if(i.isInStateTrue())i.enter(i);else i.leave(i)}else{i.tip().hasClass("in")?i.leave(i):i.enter(i)}};t.prototype.destroy=function(){var e=this;clearTimeout(this.timeout);this.hide(function(){e.$element.off("."+e.type).removeData("bs."+e.type);if(e.$tip){e.$tip.detach()}e.$tip=null;e.$arrow=null;e.$viewport=null;e.$element=null})};function i(i){return this.each(function(){var n=e(this);var s=n.data("bs.tooltip");var r=typeof i=="object"&&i;if(!s&&/destroy|hide/.test(i))return;if(!s)n.data("bs.tooltip",s=new t(this,r));if(typeof i=="string")s[i]()})}var n=e.fn.tooltip;e.fn.tooltip=i;e.fn.tooltip.Constructor=t;e.fn.tooltip.noConflict=function(){e.fn.tooltip=n;return this}}(jQuery);+function(e){"use strict";var t=function(e,t){this.init("popover",e,t)};if(!e.fn.tooltip)throw new Error("Popover requires tooltip.js");t.VERSION="3.3.7";t.DEFAULTS=e.extend({},e.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'});t.prototype=e.extend({},e.fn.tooltip.Constructor.prototype);t.prototype.constructor=t;t.prototype.getDefaults=function(){return t.DEFAULTS};t.prototype.setContent=function(){var e=this.tip();var t=this.getTitle();var i=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t);e.find(".popover-content").children().detach().end()[this.options.html?typeof i=="string"?"html":"append":"text"](i);e.removeClass("fade top bottom left right in");if(!e.find(".popover-title").html())e.find(".popover-title").hide()};t.prototype.hasContent=function(){return this.getTitle()||this.getContent()};t.prototype.getContent=function(){var e=this.$element;var t=this.options;return e.attr("data-content")||(typeof t.content=="function"?t.content.call(e[0]):t.content)};t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};function i(i){return this.each(function(){var n=e(this);var s=n.data("bs.popover");var r=typeof i=="object"&&i;if(!s&&/destroy|hide/.test(i))return;if(!s)n.data("bs.popover",s=new t(this,r));if(typeof i=="string")s[i]()})}var n=e.fn.popover;e.fn.popover=i;e.fn.popover.Constructor=t;e.fn.popover.noConflict=function(){e.fn.popover=n;return this}}(jQuery);+function(e){"use strict";function t(i,n){this.$body=e(document.body);this.$scrollElement=e(i).is(document.body)?e(window):e(i);this.options=e.extend({},t.DEFAULTS,n);this.selector=(this.options.target||"")+" .nav li > a";this.offsets=[];this.targets=[];this.activeTarget=null;this.scrollHeight=0;this.$scrollElement.on("scroll.bs.scrollspy",e.proxy(this.process,this));this.refresh();this.process()}t.VERSION="3.3.7";t.DEFAULTS={offset:10};t.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)};t.prototype.refresh=function(){var t=this;var i="offset";var n=0;this.offsets=[];this.targets=[];this.scrollHeight=this.getScrollHeight();if(!e.isWindow(this.$scrollElement[0])){i="position";n=this.$scrollElement.scrollTop()}this.$body.find(this.selector).map(function(){var t=e(this);var s=t.data("target")||t.attr("href");var r=/^#./.test(s)&&e(s);return r&&r.length&&r.is(":visible")&&[[r[i]().top+n,s]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){t.offsets.push(this[0]);t.targets.push(this[1])})};t.prototype.process=function(){var e=this.$scrollElement.scrollTop()+this.options.offset;var t=this.getScrollHeight();var i=this.options.offset+t-this.$scrollElement.height();var n=this.offsets;var s=this.targets;var r=this.activeTarget;var a;if(this.scrollHeight!=t){this.refresh()}if(e>=i){return r!=(a=s[s.length-1])&&this.activate(a)}if(r&&e<n[0]){this.activeTarget=null;return this.clear()}for(a=n.length;a--;){r!=s[a]&&e>=n[a]&&(n[a+1]===undefined||e<n[a+1])&&this.activate(s[a])}};t.prototype.activate=function(t){this.activeTarget=t;this.clear();var i=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]';var n=e(i).parents("li").addClass("active");if(n.parent(".dropdown-menu").length){n=n.closest("li.dropdown").addClass("active")}n.trigger("activate.bs.scrollspy")};t.prototype.clear=function(){e(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};function i(i){return this.each(function(){var n=e(this);var s=n.data("bs.scrollspy");var r=typeof i=="object"&&i;if(!s)n.data("bs.scrollspy",s=new t(this,r));if(typeof i=="string")s[i]()})}var n=e.fn.scrollspy;e.fn.scrollspy=i;e.fn.scrollspy.Constructor=t;e.fn.scrollspy.noConflict=function(){e.fn.scrollspy=n;return this};e(window).on("load.bs.scrollspy.data-api",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);i.call(t,t.data())})})}(jQuery);+function(e){"use strict";var t=function(t){this.element=e(t)};t.VERSION="3.3.7";t.TRANSITION_DURATION=150;t.prototype.show=function(){var t=this.element;var i=t.closest("ul:not(.dropdown-menu)");var n=t.data("target");if(!n){n=t.attr("href");n=n&&n.replace(/.*(?=#[^\s]*$)/,"")}if(t.parent("li").hasClass("active"))return;var s=i.find(".active:last a");var r=e.Event("hide.bs.tab",{relatedTarget:t[0]});var a=e.Event("show.bs.tab",{relatedTarget:s[0]});s.trigger(r);t.trigger(a);if(a.isDefaultPrevented()||r.isDefaultPrevented())return;var o=e(n);this.activate(t.closest("li"),i);this.activate(o,o.parent(),function(){s.trigger({type:"hidden.bs.tab",relatedTarget:t[0]});t.trigger({type:"shown.bs.tab",relatedTarget:s[0]})})};t.prototype.activate=function(i,n,s){var r=n.find("> .active");var a=s&&e.support.transition&&(r.length&&r.hasClass("fade")||!!n.find("> .fade").length);function o(){r.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",false);i.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",true);if(a){i[0].offsetWidth;i.addClass("in")}else{i.removeClass("fade")}if(i.parent(".dropdown-menu").length){i.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",true)}s&&s()}r.length&&a?r.one("bsTransitionEnd",o).emulateTransitionEnd(t.TRANSITION_DURATION):o();r.removeClass("in")};function i(i){return this.each(function(){var n=e(this);var s=n.data("bs.tab");if(!s)n.data("bs.tab",s=new t(this));if(typeof i=="string")s[i]()})}var n=e.fn.tab;e.fn.tab=i;e.fn.tab.Constructor=t;e.fn.tab.noConflict=function(){e.fn.tab=n;return this};var s=function(t){t.preventDefault();i.call(e(this),"show")};e(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',s).on("click.bs.tab.data-api",'[data-toggle="pill"]',s)}(jQuery);+function(e){"use strict";var t=function(i,n){this.options=e.extend({},t.DEFAULTS,n);this.$target=e(this.options.target).on("scroll.bs.affix.data-api",e.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",e.proxy(this.checkPositionWithEventLoop,this));this.$element=e(i);this.affixed=null;this.unpin=null;this.pinnedOffset=null;this.checkPosition()};t.VERSION="3.3.7";t.RESET="affix affix-top affix-bottom";t.DEFAULTS={offset:0,target:window};t.prototype.getState=function(e,t,i,n){var s=this.$target.scrollTop();var r=this.$element.offset();var a=this.$target.height();if(i!=null&&this.affixed=="top")return s<i?"top":false;if(this.affixed=="bottom"){if(i!=null)return s+this.unpin<=r.top?false:"bottom";return s+a<=e-n?false:"bottom"}var o=this.affixed==null;var l=o?s:r.top;var u=o?a:t;if(i!=null&&s<=i)return"top";if(n!=null&&l+u>=e-n)return"bottom";return false};t.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(t.RESET).addClass("affix");var e=this.$target.scrollTop();var i=this.$element.offset();return this.pinnedOffset=i.top-e};t.prototype.checkPositionWithEventLoop=function(){setTimeout(e.proxy(this.checkPosition,this),1)};t.prototype.checkPosition=function(){if(!this.$element.is(":visible"))return;var i=this.$element.height();var n=this.options.offset;var s=n.top;var r=n.bottom;var a=Math.max(e(document).height(),e(document.body).height());if(typeof n!="object")r=s=n;if(typeof s=="function")s=n.top(this.$element);if(typeof r=="function")r=n.bottom(this.$element);var o=this.getState(a,i,s,r);if(this.affixed!=o){if(this.unpin!=null)this.$element.css("top","");var l="affix"+(o?"-"+o:"");var u=e.Event(l+".bs.affix");this.$element.trigger(u);if(u.isDefaultPrevented())return;this.affixed=o;this.unpin=o=="bottom"?this.getPinnedOffset():null;this.$element.removeClass(t.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}if(o=="bottom"){this.$element.offset({top:a-i-r})}};function i(i){return this.each(function(){var n=e(this);var s=n.data("bs.affix");var r=typeof i=="object"&&i;if(!s)n.data("bs.affix",s=new t(this,r));if(typeof i=="string")s[i]()})}var n=e.fn.affix;e.fn.affix=i;e.fn.affix.Constructor=t;e.fn.affix.noConflict=function(){e.fn.affix=n;return this};e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var t=e(this);var n=t.data();n.offset=n.offset||{};if(n.offsetBottom!=null)n.offset.bottom=n.offsetBottom;if(n.offsetTop!=null)n.offset.top=n.offsetTop;i.call(t,n)})})}(jQuery);(function(e){if(typeof define==="function"&&define.amd){define(["jquery"],e)}else if(typeof module==="object"&&module.exports){module.exports=function(t,i){if(i===undefined){if(typeof window!=="undefined"){i=require("jquery")}else{i=require("jquery")(t)}}e(i);return i}}else{e(jQuery)}})(function(e){var t=function(){if(e&&e.fn&&e.fn.select2&&e.fn.select2.amd){var t=e.fn.select2.amd}var t;(function(){if(!t||!t.requirejs){if(!t){t={}}else{i=t}var e,i,n;(function(t){var s,r,a,o,l={},u={},f={},c={},d=Object.prototype.hasOwnProperty,h=[].slice,p=/\.js$/;function m(e,t){return d.call(e,t)}function g(e,t){var i,n,s,r,a,o,l,u,c,d,h,m,g=t&&t.split("/"),v=f.map,y=v&&v["*"]||{};if(e){e=e.split("/");a=e.length-1;if(f.nodeIdCompat&&p.test(e[a])){e[a]=e[a].replace(p,"")}if(e[0].charAt(0)==="."&&g){m=g.slice(0,g.length-1);e=m.concat(e)}for(c=0;c<e.length;c++){h=e[c];if(h==="."){e.splice(c,1);c-=1}else if(h===".."){if(c===0||c===1&&e[2]===".."||e[c-1]===".."){continue}else if(c>0){e.splice(c-1,2);c-=2}}}e=e.join("/")}if((g||y)&&v){i=e.split("/");for(c=i.length;c>0;c-=1){n=i.slice(0,c).join("/");if(g){for(d=g.length;d>0;d-=1){s=v[g.slice(0,d).join("/")];if(s){s=s[n];if(s){r=s;o=c;break}}}}if(r){break}if(!l&&y&&y[n]){l=y[n];u=c}}if(!r&&l){r=l;o=u}if(r){i.splice(0,o,r);e=i.join("/")}}return e}function v(e,i){return function(){var n=h.call(arguments,0);if(typeof n[0]!=="string"&&n.length===1){n.push(null)}return r.apply(t,n.concat([e,i]))}}function y(e){return function(t){return g(t,e)}}function b(e){return function(t){l[e]=t}}function w(e){if(m(u,e)){var i=u[e];delete u[e];c[e]=true;s.apply(t,i)}if(!m(l,e)&&!m(c,e)){throw new Error("No "+e)}return l[e]}function x(e){var t,i=e?e.indexOf("!"):-1;if(i>-1){t=e.substring(0,i);e=e.substring(i+1,e.length)}return[t,e]}function C(e){return e?x(e):[]}a=function(e,t){var i,n=x(e),s=n[0],r=t[1];e=n[1];if(s){s=g(s,r);i=w(s)}if(s){if(i&&i.normalize){e=i.normalize(e,y(r))}else{e=g(e,r)}}else{e=g(e,r);n=x(e);s=n[0];e=n[1];if(s){i=w(s)}}return{f:s?s+"!"+e:e,n:e,pr:s,p:i}};function T(e){return function(){return f&&f.config&&f.config[e]||{}}}o={require:function(e){return v(e)},exports:function(e){var t=l[e];if(typeof t!=="undefined"){return t}else{return l[e]={}}},module:function(e){return{id:e,uri:"",exports:l[e],config:T(e)}}};s=function(e,i,n,s){var r,f,d,h,p,g,y=[],x=typeof n,T;s=s||e;g=C(s);if(x==="undefined"||x==="function"){i=!i.length&&n.length?["require","exports","module"]:i;for(p=0;p<i.length;p+=1){h=a(i[p],g);f=h.f;if(f==="require"){y[p]=o.require(e)}else if(f==="exports"){y[p]=o.exports(e);T=true}else if(f==="module"){r=y[p]=o.module(e)}else if(m(l,f)||m(u,f)||m(c,f)){y[p]=w(f)}else if(h.p){h.p.load(h.n,v(s,true),b(f),{});y[p]=l[f]}else{throw new Error(e+" missing "+f)}}d=n?n.apply(l[e],y):undefined;if(e){if(r&&r.exports!==t&&r.exports!==l[e]){l[e]=r.exports}else if(d!==t||!T){l[e]=d}}}else if(e){l[e]=n}};e=i=r=function(e,i,n,l,u){if(typeof e==="string"){if(o[e]){return o[e](i)}return w(a(e,C(i)).f)}else if(!e.splice){f=e;if(f.deps){r(f.deps,f.callback)}if(!i){return}if(i.splice){e=i;i=n;n=null}else{e=t}}i=i||function(){};if(typeof n==="function"){n=l;l=u}if(l){s(t,e,i,n)}else{setTimeout(function(){s(t,e,i,n)},4)}return r};r.config=function(e){return r(e)};e._defined=l;n=function(e,t,i){if(typeof e!=="string"){throw new Error("See almond README: incorrect module build, no module name")}if(!t.splice){i=t;t=[]}if(!m(l,e)&&!m(u,e)){u[e]=[e,t,i]}};n.amd={jQuery:true}})();t.requirejs=e;t.require=i;t.define=n}})();t.define("almond",function(){});t.define("jquery",[],function(){var t=e||$;if(t==null&&console&&console.error){console.error("Select2: An instance of jQuery or a jQuery-compatible library was not "+"found. Make sure that you are including jQuery before Select2 on your "+"web page.")}return t});t.define("select2/utils",["jquery"],function(e){var t={};t.Extend=function(e,t){var i={}.hasOwnProperty;function n(){this.constructor=e}for(var s in t){if(i.call(t,s)){e[s]=t[s]}}n.prototype=t.prototype;e.prototype=new n;e.__super__=t.prototype;return e};function i(e){var t=e.prototype;var i=[];for(var n in t){var s=t[n];if(typeof s!=="function"){continue}if(n==="constructor"){continue}i.push(n)}return i}t.Decorate=function(e,t){var n=i(t);var s=i(e);function r(){var i=Array.prototype.unshift;var n=t.prototype.constructor.length;var s=e.prototype.constructor;if(n>0){i.call(arguments,e.prototype.constructor);s=t.prototype.constructor}s.apply(this,arguments)}t.displayName=e.displayName;function a(){this.constructor=r}r.prototype=new a;for(var o=0;o<s.length;o++){var l=s[o];r.prototype[l]=e.prototype[l]}var u=function(e){var i=function(){};if(e in r.prototype){i=r.prototype[e]}var n=t.prototype[e];return function(){var e=Array.prototype.unshift;e.call(arguments,i);return n.apply(this,arguments)}};for(var f=0;f<n.length;f++){var c=n[f];r.prototype[c]=u(c)}return r};var n=function(){this.listeners={}};n.prototype.on=function(e,t){this.listeners=this.listeners||{};if(e in this.listeners){this.listeners[e].push(t)}else{this.listeners[e]=[t]}};n.prototype.trigger=function(e){var t=Array.prototype.slice;var i=t.call(arguments,1);this.listeners=this.listeners||{};if(i==null){i=[]}if(i.length===0){i.push({})}i[0]._type=e;if(e in this.listeners){this.invoke(this.listeners[e],t.call(arguments,1))}if("*"in this.listeners){this.invoke(this.listeners["*"],arguments)}};n.prototype.invoke=function(e,t){for(var i=0,n=e.length;i<n;i++){e[i].apply(this,t)}};t.Observable=n;t.generateChars=function(e){var t="";for(var i=0;i<e;i++){var n=Math.floor(Math.random()*36);t+=n.toString(36)}return t};t.bind=function(e,t){return function(){e.apply(t,arguments)}};t._convertData=function(e){for(var t in e){var i=t.split("-");var n=e;if(i.length===1){continue}for(var s=0;s<i.length;s++){var r=i[s];r=r.substring(0,1).toLowerCase()+r.substring(1);if(!(r in n)){n[r]={}}if(s==i.length-1){n[r]=e[t]}n=n[r]}delete e[t]}return e};t.hasScroll=function(t,i){var n=e(i);var s=i.style.overflowX;var r=i.style.overflowY;if(s===r&&(r==="hidden"||r==="visible")){return false}if(s==="scroll"||r==="scroll"){return true}return n.innerHeight()<i.scrollHeight||n.innerWidth()<i.scrollWidth};t.escapeMarkup=function(e){var t={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};if(typeof e!=="string"){return e}return String(e).replace(/[&<>"'\/\\]/g,function(e){return t[e]})};t.appendMany=function(t,i){if(e.fn.jquery.substr(0,3)==="1.7"){var n=e();e.map(i,function(e){n=n.add(e)});i=n}t.append(i)};return t});t.define("select2/results",["jquery","./utils"],function(e,t){function i(e,t,n){this.$element=e;this.data=n;this.options=t;i.__super__.constructor.call(this)}t.Extend(i,t.Observable);i.prototype.render=function(){var t=e('<ul class="select2-results__options" role="tree"></ul>');if(this.options.get("multiple")){t.attr("aria-multiselectable","true")}this.$results=t;return t};i.prototype.clear=function(){this.$results.empty()};i.prototype.displayMessage=function(t){var i=this.options.get("escapeMarkup");this.clear();this.hideLoading();var n=e('<li role="treeitem" aria-live="assertive"'+' class="select2-results__option"></li>');var s=this.options.get("translations").get(t.message);n.append(i(s(t.args)));n[0].className+=" select2-results__message";this.$results.append(n)};i.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()};i.prototype.append=function(e){this.hideLoading();var t=[];if(e.results==null||e.results.length===0){if(this.$results.children().length===0){this.trigger("results:message",{message:"noResults"})}return}e.results=this.sort(e.results);for(var i=0;i<e.results.length;i++){var n=e.results[i];var s=this.option(n);t.push(s)}this.$results.append(t)};i.prototype.position=function(e,t){var i=t.find(".select2-results");i.append(e)};i.prototype.sort=function(e){var t=this.options.get("sorter");return t(e)};i.prototype.highlightFirstItem=function(){var e=this.$results.find(".select2-results__option[aria-selected]");var t=e.filter("[aria-selected=true]");if(t.length>0){t.first().trigger("mouseenter")}else{e.first().trigger("mouseenter")}this.ensureHighlightVisible()};i.prototype.setClasses=function(){var t=this;this.data.current(function(i){var n=e.map(i,function(e){return e.id.toString()});var s=t.$results.find(".select2-results__option[aria-selected]");s.each(function(){var t=e(this);var i=e.data(this,"data");var s=""+i.id;if(i.element!=null&&i.element.selected||i.element==null&&e.inArray(s,n)>-1){t.attr("aria-selected","true")}else{t.attr("aria-selected","false")}})})};i.prototype.showLoading=function(e){this.hideLoading();var t=this.options.get("translations").get("searching");var i={disabled:true,loading:true,text:t(e)};var n=this.option(i);n.className+=" loading-results";this.$results.prepend(n)};i.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()};i.prototype.option=function(t){var i=document.createElement("li");i.className="select2-results__option";var n={role:"treeitem","aria-selected":"false"};if(t.disabled){delete n["aria-selected"];n["aria-disabled"]="true"}if(t.id==null){delete n["aria-selected"]}if(t._resultId!=null){i.id=t._resultId}if(t.title){i.title=t.title}if(t.children){n.role="group";n["aria-label"]=t.text;delete n["aria-selected"]}for(var s in n){var r=n[s];i.setAttribute(s,r)}if(t.children){var a=e(i);var o=document.createElement("strong");o.className="select2-results__group";var l=e(o);this.template(t,o);var u=[];for(var f=0;f<t.children.length;f++){var c=t.children[f];var d=this.option(c);u.push(d)}var h=e("<ul></ul>",{class:"select2-results__options select2-results__options--nested"});h.append(u);a.append(o);a.append(h)}else{this.template(t,i)}e.data(i,"data",t);return i};i.prototype.bind=function(t,i){var n=this;var s=t.id+"-results";this.$results.attr("id",s);t.on("results:all",function(e){n.clear();n.append(e.data);if(t.isOpen()){n.setClasses();n.highlightFirstItem()}});t.on("results:append",function(e){n.append(e.data);if(t.isOpen()){n.setClasses()}});t.on("query",function(e){n.hideMessages();n.showLoading(e)});t.on("select",function(){if(!t.isOpen()){return}n.setClasses();n.highlightFirstItem()});t.on("unselect",function(){if(!t.isOpen()){return}n.setClasses();n.highlightFirstItem()});t.on("open",function(){n.$results.attr("aria-expanded","true");n.$results.attr("aria-hidden","false");n.setClasses();n.ensureHighlightVisible()});t.on("close",function(){n.$results.attr("aria-expanded","false");n.$results.attr("aria-hidden","true");n.$results.removeAttr("aria-activedescendant")});t.on("results:toggle",function(){var e=n.getHighlightedResults();if(e.length===0){return}e.trigger("mouseup")});t.on("results:select",function(){var e=n.getHighlightedResults();if(e.length===0){return}var t=e.data("data");if(e.attr("aria-selected")=="true"){n.trigger("close",{})}else{n.trigger("select",{data:t})}});t.on("results:previous",function(){var e=n.getHighlightedResults();var t=n.$results.find("[aria-selected]");var i=t.index(e);if(i===0){return}var s=i-1;if(e.length===0){s=0}var r=t.eq(s);r.trigger("mouseenter");var a=n.$results.offset().top;var o=r.offset().top;var l=n.$results.scrollTop()+(o-a);if(s===0){n.$results.scrollTop(0)}else if(o-a<0){n.$results.scrollTop(l)}});t.on("results:next",function(){var e=n.getHighlightedResults();var t=n.$results.find("[aria-selected]");var i=t.index(e);var s=i+1;if(s>=t.length){return}var r=t.eq(s);r.trigger("mouseenter");var a=n.$results.offset().top+n.$results.outerHeight(false);var o=r.offset().top+r.outerHeight(false);var l=n.$results.scrollTop()+o-a;if(s===0){n.$results.scrollTop(0)}else if(o>a){n.$results.scrollTop(l)}});t.on("results:focus",function(e){e.element.addClass("select2-results__option--highlighted")});t.on("results:message",function(e){n.displayMessage(e)});if(e.fn.mousewheel){this.$results.on("mousewheel",function(e){var t=n.$results.scrollTop();var i=n.$results.get(0).scrollHeight-t+e.deltaY;var s=e.deltaY>0&&t-e.deltaY<=0;var r=e.deltaY<0&&i<=n.$results.height();if(s){n.$results.scrollTop(0);e.preventDefault();e.stopPropagation()}else if(r){n.$results.scrollTop(n.$results.get(0).scrollHeight-n.$results.height());e.preventDefault();e.stopPropagation()}})}this.$results.on("mouseup",".select2-results__option[aria-selected]",function(t){var i=e(this);var s=i.data("data");if(i.attr("aria-selected")==="true"){if(n.options.get("multiple")){n.trigger("unselect",{originalEvent:t,data:s})}else{n.trigger("close",{})}return}n.trigger("select",{originalEvent:t,data:s})});this.$results.on("mouseenter",".select2-results__option[aria-selected]",function(t){var i=e(this).data("data");n.getHighlightedResults().removeClass("select2-results__option--highlighted");n.trigger("results:focus",{data:i,element:e(this)})})};i.prototype.getHighlightedResults=function(){var e=this.$results.find(".select2-results__option--highlighted");return e};i.prototype.destroy=function(){this.$results.remove()};i.prototype.ensureHighlightVisible=function(){var e=this.getHighlightedResults();if(e.length===0){return}var t=this.$results.find("[aria-selected]");var i=t.index(e);var n=this.$results.offset().top;var s=e.offset().top;var r=this.$results.scrollTop()+(s-n);var a=s-n;r-=e.outerHeight(false)*2;if(i<=2){this.$results.scrollTop(0)}else if(a>this.$results.outerHeight()||a<0){this.$results.scrollTop(r)}};i.prototype.template=function(t,i){var n=this.options.get("templateResult");var s=this.options.get("escapeMarkup");var r=n(t,i);if(r==null){i.style.display="none"}else if(typeof r==="string"){i.innerHTML=s(r)}else{e(i).append(r)}};return i});t.define("select2/keys",[],function(){var e={BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46};return e});t.define("select2/selection/base",["jquery","../utils","../keys"],function(e,t,i){function n(e,t){this.$element=e;this.options=t;n.__super__.constructor.call(this)}t.Extend(n,t.Observable);n.prototype.render=function(){var t=e('<span class="select2-selection" role="combobox" '+' aria-haspopup="true" aria-expanded="false">'+"</span>");this._tabindex=0;if(this.$element.data("old-tabindex")!=null){this._tabindex=this.$element.data("old-tabindex")}else if(this.$element.attr("tabindex")!=null){this._tabindex=this.$element.attr("tabindex")}t.attr("title",this.$element.attr("title"));t.attr("tabindex",this._tabindex);this.$selection=t;return t};n.prototype.bind=function(e,t){var n=this;var s=e.id+"-container";var r=e.id+"-results";this.container=e;this.$selection.on("focus",function(e){n.trigger("focus",e)});this.$selection.on("blur",function(e){n._handleBlur(e)});this.$selection.on("keydown",function(e){n.trigger("keypress",e);if(e.which===i.SPACE){e.preventDefault()}});e.on("results:focus",function(e){n.$selection.attr("aria-activedescendant",e.data._resultId)});e.on("selection:update",function(e){n.update(e.data)});e.on("open",function(){n.$selection.attr("aria-expanded","true");n.$selection.attr("aria-owns",r);n._attachCloseHandler(e)});e.on("close",function(){n.$selection.attr("aria-expanded","false");n.$selection.removeAttr("aria-activedescendant");n.$selection.removeAttr("aria-owns");n.$selection.focus();n._detachCloseHandler(e)});e.on("enable",function(){n.$selection.attr("tabindex",n._tabindex)});e.on("disable",function(){n.$selection.attr("tabindex","-1")})};n.prototype._handleBlur=function(t){var i=this;window.setTimeout(function(){if(document.activeElement==i.$selection[0]||e.contains(i.$selection[0],document.activeElement)){return}i.trigger("blur",t)},1)};n.prototype._attachCloseHandler=function(t){var i=this;e(document.body).on("mousedown.select2."+t.id,function(t){var i=e(t.target);var n=i.closest(".select2");var s=e(".select2.select2-container--open");s.each(function(){var t=e(this);if(this==n[0]){return}var i=t.data("element");i.select2("close")})})};n.prototype._detachCloseHandler=function(t){e(document.body).off("mousedown.select2."+t.id)};n.prototype.position=function(e,t){var i=t.find(".selection");i.append(e)};n.prototype.destroy=function(){this._detachCloseHandler(this.container)};n.prototype.update=function(e){throw new Error("The `update` method must be defined in child classes.")};return n});t.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(e,t,i,n){function s(){s.__super__.constructor.apply(this,arguments)}i.Extend(s,t);s.prototype.render=function(){var e=s.__super__.render.call(this);e.addClass("select2-selection--single");e.html('<span class="select2-selection__rendered"></span>'+'<span class="select2-selection__arrow" role="presentation">'+'<b role="presentation"></b>'+"</span>");return e};s.prototype.bind=function(e,t){var i=this;s.__super__.bind.apply(this,arguments);var n=e.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",n);this.$selection.attr("aria-labelledby",n);this.$selection.on("mousedown",function(e){if(e.which!==1){return}i.trigger("toggle",{originalEvent:e})});this.$selection.on("focus",function(e){});this.$selection.on("blur",function(e){});e.on("focus",function(t){if(!e.isOpen()){i.$selection.focus()}});e.on("selection:update",function(e){i.update(e.data)})};s.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()};s.prototype.display=function(e,t){var i=this.options.get("templateSelection");var n=this.options.get("escapeMarkup");return n(i(e,t))};s.prototype.selectionContainer=function(){return e("<span></span>")};s.prototype.update=function(e){if(e.length===0){this.clear();return}var t=e[0];var i=this.$selection.find(".select2-selection__rendered");var n=this.display(t,i);i.empty().append(n);i.prop("title",t.title||t.text)};return s});t.define("select2/selection/multiple",["jquery","./base","../utils"],function(e,t,i){function n(e,t){n.__super__.constructor.apply(this,arguments)}i.Extend(n,t);n.prototype.render=function(){var e=n.__super__.render.call(this);e.addClass("select2-selection--multiple");e.html('<ul class="select2-selection__rendered"></ul>');return e};n.prototype.bind=function(t,i){var s=this;n.__super__.bind.apply(this,arguments);this.$selection.on("click",function(e){s.trigger("toggle",{originalEvent:e})});this.$selection.on("click",".select2-selection__choice__remove",function(t){if(s.options.get("disabled")){return}var i=e(this);var n=i.parent();var r=n.data("data");s.trigger("unselect",{originalEvent:t,data:r})})};n.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()};n.prototype.display=function(e,t){var i=this.options.get("templateSelection");var n=this.options.get("escapeMarkup");return n(i(e,t))};n.prototype.selectionContainer=function(){var t=e('<li class="select2-selection__choice">'+'<span class="select2-selection__choice__remove" role="presentation">'+"&times;"+"</span>"+"</li>");return t};n.prototype.update=function(e){this.clear();if(e.length===0){return}var t=[];for(var n=0;n<e.length;n++){var s=e[n];var r=this.selectionContainer();var a=this.display(s,r);r.append(a);r.prop("title",s.title||s.text);r.data("data",s);t.push(r)}var o=this.$selection.find(".select2-selection__rendered");i.appendMany(o,t)};return n});t.define("select2/selection/placeholder",["../utils"],function(e){function t(e,t,i){this.placeholder=this.normalizePlaceholder(i.get("placeholder"));e.call(this,t,i)}t.prototype.normalizePlaceholder=function(e,t){if(typeof t==="string"){t={id:"",text:t}}return t};t.prototype.createPlaceholder=function(e,t){var i=this.selectionContainer();i.html(this.display(t));i.addClass("select2-selection__placeholder").removeClass("select2-selection__choice");return i};t.prototype.update=function(e,t){var i=t.length==1&&t[0].id!=this.placeholder.id;var n=t.length>1;if(n||i){return e.call(this,t)}this.clear();var s=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(s)};return t});t.define("select2/selection/allowClear",["jquery","../keys"],function(e,t){function i(){}i.prototype.bind=function(e,t,i){var n=this;e.call(this,t,i);if(this.placeholder==null){if(this.options.get("debug")&&window.console&&console.error){console.error("Select2: The `allowClear` option should be used in combination "+"with the `placeholder` option.")}}this.$selection.on("mousedown",".select2-selection__clear",function(e){n._handleClear(e)});t.on("keypress",function(e){n._handleKeyboardClear(e,t)})};i.prototype._handleClear=function(e,t){if(this.options.get("disabled")){return}var i=this.$selection.find(".select2-selection__clear");if(i.length===0){return}t.stopPropagation();var n=i.data("data");for(var s=0;s<n.length;s++){var r={data:n[s]};this.trigger("unselect",r);if(r.prevented){return}}this.$element.val(this.placeholder.id).trigger("change");this.trigger("toggle",{})};i.prototype._handleKeyboardClear=function(e,i,n){if(n.isOpen()){return}if(i.which==t.DELETE||i.which==t.BACKSPACE){this._handleClear(i)}};i.prototype.update=function(t,i){t.call(this,i);if(this.$selection.find(".select2-selection__placeholder").length>0||i.length===0){return}var n=e('<span class="select2-selection__clear">'+"&times;"+"</span>");n.data("data",i);this.$selection.find(".select2-selection__rendered").prepend(n)};return i});t.define("select2/selection/search",["jquery","../utils","../keys"],function(e,t,i){function n(e,t,i){e.call(this,t,i)}n.prototype.render=function(t){var i=e('<li class="select2-search select2-search--inline">'+'<input class="select2-search__field" type="search" tabindex="-1"'+' autocomplete="off" autocorrect="off" autocapitalize="none"'+' spellcheck="false" role="textbox" aria-autocomplete="list" />'+"</li>");this.$searchContainer=i;this.$search=i.find("input");var n=t.call(this);this._transferTabIndex();return n};n.prototype.bind=function(e,t,n){var s=this;e.call(this,t,n);t.on("open",function(){s.$search.trigger("focus")});t.on("close",function(){s.$search.val("");s.$search.removeAttr("aria-activedescendant");s.$search.trigger("focus")});t.on("enable",function(){s.$search.prop("disabled",false);s._transferTabIndex()});t.on("disable",function(){s.$search.prop("disabled",true)});t.on("focus",function(e){s.$search.trigger("focus")});t.on("results:focus",function(e){s.$search.attr("aria-activedescendant",e.id)});this.$selection.on("focusin",".select2-search--inline",function(e){s.trigger("focus",e)});this.$selection.on("focusout",".select2-search--inline",function(e){s._handleBlur(e)});this.$selection.on("keydown",".select2-search--inline",function(e){e.stopPropagation();s.trigger("keypress",e);s._keyUpPrevented=e.isDefaultPrevented();var t=e.which;if(t===i.BACKSPACE&&s.$search.val()===""){var n=s.$searchContainer.prev(".select2-selection__choice");if(n.length>0){var r=n.data("data");s.searchRemoveChoice(r);e.preventDefault()}}});var r=document.documentMode;var a=r&&r<=11;this.$selection.on("input.searchcheck",".select2-search--inline",function(e){if(a){s.$selection.off("input.search input.searchcheck");return}s.$selection.off("keyup.search")});this.$selection.on("keyup.search input.search",".select2-search--inline",function(e){if(a&&e.type==="input"){s.$selection.off("input.search input.searchcheck");return}var t=e.which;if(t==i.SHIFT||t==i.CTRL||t==i.ALT){return}if(t==i.TAB){return}s.handleSearch(e)})};n.prototype._transferTabIndex=function(e){this.$search.attr("tabindex",this.$selection.attr("tabindex"));this.$selection.attr("tabindex","-1")};n.prototype.createPlaceholder=function(e,t){this.$search.attr("placeholder",t.text)};n.prototype.update=function(e,t){var i=this.$search[0]==document.activeElement;this.$search.attr("placeholder","");e.call(this,t);this.$selection.find(".select2-selection__rendered").append(this.$searchContainer);this.resizeSearch();if(i){this.$search.focus()}};n.prototype.handleSearch=function(){this.resizeSearch();if(!this._keyUpPrevented){var e=this.$search.val();this.trigger("query",{term:e})}this._keyUpPrevented=false};n.prototype.searchRemoveChoice=function(e,t){this.trigger("unselect",{data:t});this.$search.val(t.text);this.handleSearch()};n.prototype.resizeSearch=function(){this.$search.css("width","25px");var e="";if(this.$search.attr("placeholder")!==""){e=this.$selection.find(".select2-selection__rendered").innerWidth()}else{var t=this.$search.val().length+1;e=t*.75+"em"}this.$search.css("width",e)};return n});t.define("select2/selection/eventRelay",["jquery"],function(e){function t(){}t.prototype.bind=function(t,i,n){var s=this;var r=["open","opening","close","closing","select","selecting","unselect","unselecting"];var a=["opening","closing","selecting","unselecting"];t.call(this,i,n);i.on("*",function(t,i){if(e.inArray(t,r)===-1){return}i=i||{};var n=e.Event("select2:"+t,{params:i});s.$element.trigger(n);if(e.inArray(t,a)===-1){return}i.prevented=n.isDefaultPrevented()})};return t});t.define("select2/translation",["jquery","require"],function(e,t){function i(e){this.dict=e||{}}i.prototype.all=function(){return this.dict};i.prototype.get=function(e){return this.dict[e]};i.prototype.extend=function(t){this.dict=e.extend({},t.all(),this.dict)};i._cache={};i.loadPath=function(e){if(!(e in i._cache)){var n=t(e);i._cache[e]=n}return new i(i._cache[e])};return i});t.define("select2/diacritics",[],function(){var e={"â¶":"A","ï¼¡":"A","Ã":"A","Ã":"A","Ã":"A","áº¦":"A","áº¤":"A","áºª":"A","áº¨":"A","Ã":"A","Ä":"A","Ä":"A","áº°":"A","áº®":"A","áº´":"A","áº²":"A","È¦":"A","Ç ":"A","Ã":"A","Ç":"A","áº¢":"A","Ã":"A","Çº":"A","Ç":"A","È":"A","È":"A","áº ":"A","áº¬":"A","áº¶":"A","á¸":"A","Ä":"A","Èº":"A","â±¯":"A","ê²":"AA","Ã":"AE","Ç¼":"AE","Ç¢":"AE","ê´":"AO","ê¶":"AU","ê¸":"AV","êº":"AV","ê¼":"AY","â·":"B","ï¼¢":"B","á¸":"B","á¸":"B","á¸":"B","É":"B","Æ":"B","Æ":"B","â¸":"C","ï¼£":"C","Ä":"C","Ä":"C","Ä":"C","Ä":"C","Ã":"C","á¸":"C","Æ":"C","È»":"C","ê¾":"C","â¹":"D","ï¼¤":"D","á¸":"D","Ä":"D","á¸":"D","á¸":"D","á¸":"D","á¸":"D","Ä":"D","Æ":"D","Æ":"D","Æ":"D","ê¹":"D","Ç±":"DZ","Ç":"DZ","Ç²":"Dz","Ç":"Dz","âº":"E","ï¼¥":"E","Ã":"E","Ã":"E","Ã":"E","á»":"E","áº¾":"E","á»":"E","á»":"E","áº¼":"E","Ä":"E","á¸":"E","á¸":"E","Ä":"E","Ä":"E","Ã":"E","áºº":"E","Ä":"E","È":"E","È":"E","áº¸":"E","á»":"E","È¨":"E","á¸":"E","Ä":"E","á¸":"E","á¸":"E","Æ":"E","Æ":"E","â»":"F","ï¼¦":"F","á¸":"F","Æ":"F","ê»":"F","â¼":"G","ï¼§":"G","Ç´":"G","Ä":"G","á¸ ":"G","Ä":"G","Ä ":"G","Ç¦":"G","Ä¢":"G","Ç¤":"G","Æ":"G","ê ":"G","ê½":"G","ê¾":"G","â½":"H","ï¼¨":"H","Ä¤":"H","á¸¢":"H","á¸¦":"H","È":"H","á¸¤":"H","á¸¨":"H","á¸ª":"H","Ä¦":"H","â±§":"H","â±µ":"H","ê":"H","â¾":"I","ï¼©":"I","Ã":"I","Ã":"I","Ã":"I","Ä¨":"I","Äª":"I","Ä¬":"I","Ä°":"I","Ã":"I","á¸®":"I","á»":"I","Ç":"I","È":"I","È":"I","á»":"I","Ä®":"I","á¸¬":"I","Æ":"I","â¿":"J","ï¼ª":"J","Ä´":"J","É":"J","â":"K","ï¼«":"K","á¸°":"K","Ç¨":"K","á¸²":"K","Ä¶":"K","á¸´":"K","Æ":"K","â±©":"K","ê":"K","ê":"K","ê":"K","ê¢":"K","â":"L","ï¼¬":"L","Ä¿":"L","Ä¹":"L","Ä½":"L","á¸¶":"L","á¸¸":"L","Ä»":"L","á¸¼":"L","á¸º":"L","Å":"L","È½":"L","â±¢":"L","â± ":"L","ê":"L","ê":"L","ê":"L","Ç":"LJ","Ç":"Lj","â":"M","ï¼­":"M","á¸¾":"M","á¹":"M","á¹":"M","â±®":"M","Æ":"M","â":"N","ï¼®":"N","Ç¸":"N","Å":"N","Ã":"N","á¹":"N","Å":"N","á¹":"N","Å":"N","á¹":"N","á¹":"N","È ":"N","Æ":"N","ê":"N","ê¤":"N","Ç":"NJ","Ç":"Nj","â":"O","ï¼¯":"O","Ã":"O","Ã":"O","Ã":"O","á»":"O","á»":"O","á»":"O","á»":"O","Ã":"O","á¹":"O","È¬":"O","á¹":"O","Å":"O","á¹":"O","á¹":"O","Å":"O","È®":"O","È°":"O","Ã":"O","Èª":"O","á»":"O","Å":"O","Ç":"O","È":"O","È":"O","Æ ":"O","á»":"O","á»":"O","á» ":"O","á»":"O","á»¢":"O","á»":"O","á»":"O","Çª":"O","Ç¬":"O","Ã":"O","Ç¾":"O","Æ":"O","Æ":"O","ê":"O","ê":"O","Æ¢":"OI","ê":"OO","È¢":"OU","â":"P","ï¼°":"P","á¹":"P","á¹":"P","Æ¤":"P","â±£":"P","ê":"P","ê":"P","ê":"P","â":"Q","ï¼±":"Q","ê":"Q","ê":"Q","É":"Q","â":"R","ï¼²":"R","Å":"R","á¹":"R","Å":"R","È":"R","È":"R","á¹":"R","á¹":"R","Å":"R","á¹":"R","É":"R","â±¤":"R","ê":"R","ê¦":"R","ê":"R","â":"S","ï¼³":"S","áº":"S","Å":"S","á¹¤":"S","Å":"S","á¹ ":"S","Å ":"S","á¹¦":"S","á¹¢":"S","á¹¨":"S","È":"S","Å":"S","â±¾":"S","ê¨":"S","ê":"S","â":"T","ï¼´":"T","á¹ª":"T","Å¤":"T","á¹¬":"T","È":"T","Å¢":"T","á¹°":"T","á¹®":"T","Å¦":"T","Æ¬":"T","Æ®":"T","È¾":"T","ê":"T","ê¨":"TZ","â":"U","ï¼µ":"U","Ã":"U","Ã":"U","Ã":"U","Å¨":"U","á¹¸":"U","Åª":"U","á¹º":"U","Å¬":"U","Ã":"U","Ç":"U","Ç":"U","Ç":"U","Ç":"U","á»¦":"U","Å®":"U","Å°":"U","Ç":"U","È":"U","È":"U","Æ¯":"U","á»ª":"U","á»¨":"U","á»®":"U","á»¬":"U","á»°":"U","á»¤":"U","á¹²":"U","Å²":"U","á¹¶":"U","á¹´":"U","É":"U","â":"V","ï¼¶":"V","á¹¼":"V","á¹¾":"V","Æ²":"V","ê":"V","É":"V","ê ":"VY","â":"W","ï¼·":"W","áº":"W","áº":"W","Å´":"W","áº":"W","áº":"W","áº":"W","â±²":"W","â":"X","ï¼¸":"X","áº":"X","áº":"X","â":"Y","ï¼¹":"Y","á»²":"Y","Ã":"Y","Å¶":"Y","á»¸":"Y","È²":"Y","áº":"Y","Å¸":"Y","á»¶":"Y","á»´":"Y","Æ³":"Y","É":"Y","á»¾":"Y","â":"Z","ï¼º":"Z","Å¹":"Z","áº":"Z","Å»":"Z","Å½":"Z","áº":"Z","áº":"Z","Æµ":"Z","È¤":"Z","â±¿":"Z","â±«":"Z","ê¢":"Z","â":"a","ï½":"a","áº":"a","Ã ":"a","Ã¡":"a","Ã¢":"a","áº§":"a","áº¥":"a","áº«":"a","áº©":"a","Ã£":"a","Ä":"a","Ä":"a","áº±":"a","áº¯":"a","áºµ":"a","áº³":"a","È§":"a","Ç¡":"a","Ã¤":"a","Ç":"a","áº£":"a","Ã¥":"a","Ç»":"a","Ç":"a","È":"a","È":"a","áº¡":"a","áº­":"a","áº·":"a","á¸":"a","Ä":"a","â±¥":"a","É":"a","ê³":"aa","Ã¦":"ae","Ç½":"ae","Ç£":"ae","êµ":"ao","ê·":"au","ê¹":"av","ê»":"av","ê½":"ay","â":"b","ï½":"b","á¸":"b","á¸":"b","á¸":"b","Æ":"b","Æ":"b","É":"b","â":"c","ï½":"c","Ä":"c","Ä":"c","Ä":"c","Ä":"c","Ã§":"c","á¸":"c","Æ":"c","È¼":"c","ê¿":"c","â":"c","â":"d","ï½":"d","á¸":"d","Ä":"d","á¸":"d","á¸":"d","á¸":"d","á¸":"d","Ä":"d","Æ":"d","É":"d","É":"d","êº":"d","Ç³":"dz","Ç":"dz","â":"e","ï½":"e","Ã¨":"e","Ã©":"e","Ãª":"e","á»":"e","áº¿":"e","á»":"e","á»":"e","áº½":"e","Ä":"e","á¸":"e","á¸":"e","Ä":"e","Ä":"e","Ã«":"e","áº»":"e","Ä":"e","È":"e","È":"e","áº¹":"e","á»":"e","È©":"e","á¸":"e","Ä":"e","á¸":"e","á¸":"e","É":"e","É":"e","Ç":"e","â":"f","ï½":"f","á¸":"f","Æ":"f","ê¼":"f","â":"g","ï½":"g","Çµ":"g","Ä":"g","á¸¡":"g","Ä":"g","Ä¡":"g","Ç§":"g","Ä£":"g","Ç¥":"g","É ":"g","ê¡":"g","áµ¹":"g","ê¿":"g","â":"h","ï½":"h","Ä¥":"h","á¸£":"h","á¸§":"h","È":"h","á¸¥":"h","á¸©":"h","á¸«":"h","áº":"h","Ä§":"h","â±¨":"h","â±¶":"h","É¥":"h","Æ":"hv","â":"i","ï½":"i","Ã¬":"i","Ã­":"i","Ã®":"i","Ä©":"i","Ä«":"i","Ä­":"i","Ã¯":"i","á¸¯":"i","á»":"i","Ç":"i","È":"i","È":"i","á»":"i","Ä¯":"i","á¸­":"i","É¨":"i","Ä±":"i","â":"j","ï½":"j","Äµ":"j","Ç°":"j","É":"j","â":"k","ï½":"k","á¸±":"k","Ç©":"k","á¸³":"k","Ä·":"k","á¸µ":"k","Æ":"k","â±ª":"k","ê":"k","ê":"k","ê":"k","ê£":"k","â":"l","ï½":"l","Å":"l","Äº":"l","Ä¾":"l","á¸·":"l","á¸¹":"l","Ä¼":"l","á¸½":"l","á¸»":"l","Å¿":"l","Å":"l","Æ":"l","É«":"l","â±¡":"l","ê":"l","ê":"l","ê":"l","Ç":"lj","â":"m","ï½":"m","á¸¿":"m","á¹":"m","á¹":"m","É±":"m","É¯":"m","â":"n","ï½":"n","Ç¹":"n","Å":"n","Ã±":"n","á¹":"n","Å":"n","á¹":"n","Å":"n","á¹":"n","á¹":"n","Æ":"n","É²":"n","Å":"n","ê":"n","ê¥":"n","Ç":"nj","â":"o","ï½":"o","Ã²":"o","Ã³":"o","Ã´":"o","á»":"o","á»":"o","á»":"o","á»":"o","Ãµ":"o","á¹":"o","È­":"o","á¹":"o","Å":"o","á¹":"o","á¹":"o","Å":"o","È¯":"o","È±":"o","Ã¶":"o","È«":"o","á»":"o","Å":"o","Ç":"o","È":"o","È":"o","Æ¡":"o","á»":"o","á»":"o","á»¡":"o","á»":"o","á»£":"o","á»":"o","á»":"o","Ç«":"o","Ç­":"o","Ã¸":"o","Ç¿":"o","É":"o","ê":"o","ê":"o","Éµ":"o","Æ£":"oi","È£":"ou","ê":"oo","â":"p","ï½":"p","á¹":"p","á¹":"p","Æ¥":"p","áµ½":"p","ê":"p","ê":"p","ê":"p","â ":"q","ï½":"q","É":"q","ê":"q","ê":"q","â¡":"r","ï½":"r","Å":"r","á¹":"r","Å":"r","È":"r","È":"r","á¹":"r","á¹":"r","Å":"r","á¹":"r","É":"r","É½":"r","ê":"r","ê§":"r","ê":"r","â¢":"s","ï½":"s","Ã":"s","Å":"s","á¹¥":"s","Å":"s","á¹¡":"s","Å¡":"s","á¹§":"s","á¹£":"s","á¹©":"s","È":"s","Å":"s","È¿":"s","ê©":"s","ê":"s","áº":"s","â£":"t","ï½":"t","á¹«":"t","áº":"t","Å¥":"t","á¹­":"t","È":"t","Å£":"t","á¹±":"t","á¹¯":"t","Å§":"t","Æ­":"t","Ê":"t","â±¦":"t","ê":"t","ê©":"tz","â¤":"u","ï½":"u","Ã¹":"u","Ãº":"u","Ã»":"u","Å©":"u","á¹¹":"u","Å«":"u","á¹»":"u","Å­":"u","Ã¼":"u","Ç":"u","Ç":"u","Ç":"u","Ç":"u","á»§":"u","Å¯":"u","Å±":"u","Ç":"u","È":"u","È":"u","Æ°":"u","á»«":"u","á»©":"u","á»¯":"u","á»­":"u","á»±":"u","á»¥":"u","á¹³":"u","Å³":"u","á¹·":"u","á¹µ":"u","Ê":"u","â¥":"v","ï½":"v","á¹½":"v","á¹¿":"v","Ê":"v","ê":"v","Ê":"v","ê¡":"vy","â¦":"w","ï½":"w","áº":"w","áº":"w","Åµ":"w","áº":"w","áº":"w","áº":"w","áº":"w","â±³":"w","â§":"x","ï½":"x","áº":"x","áº":"x","â¨":"y","ï½":"y","á»³":"y","Ã½":"y","Å·":"y","á»¹":"y","È³":"y","áº":"y","Ã¿":"y","á»·":"y","áº":"y","á»µ":"y","Æ´":"y","É":"y","á»¿":"y","â©":"z","ï½":"z","Åº":"z","áº":"z","Å¼":"z","Å¾":"z","áº":"z","áº":"z","Æ¶":"z","È¥":"z","É":"z","â±¬":"z","ê£":"z","Î":"Î","Î":"Î","Î":"Î","Î":"Î","Îª":"Î","Î":"Î","Î":"Î¥","Î«":"Î¥","Î":"Î©","Î¬":"Î±","Î­":"Îµ","Î®":"Î·","Î¯":"Î¹","Ï":"Î¹","Î":"Î¹","Ï":"Î¿","Ï":"Ï","Ï":"Ï","Î°":"Ï","Ï":"Ï","Ï":"Ï"};return e});t.define("select2/data/base",["../utils"],function(e){function t(e,i){t.__super__.constructor.call(this)}e.Extend(t,e.Observable);t.prototype.current=function(e){throw new Error("The `current` method must be defined in child classes.")};t.prototype.query=function(e,t){throw new Error("The `query` method must be defined in child classes.")};t.prototype.bind=function(e,t){};t.prototype.destroy=function(){};t.prototype.generateResultId=function(t,i){var n=t.id+"-result-";n+=e.generateChars(4);if(i.id!=null){n+="-"+i.id.toString()}else{n+="-"+e.generateChars(4)}return n};return t});t.define("select2/data/select",["./base","../utils","jquery"],function(e,t,i){function n(e,t){this.$element=e;this.options=t;n.__super__.constructor.call(this)}t.Extend(n,e);n.prototype.current=function(e){var t=[];var n=this;this.$element.find(":selected").each(function(){var e=i(this);var s=n.item(e);t.push(s)});e(t)};n.prototype.select=function(e){var t=this;e.selected=true;if(i(e.element).is("option")){e.element.selected=true;this.$element.trigger("change");return}if(this.$element.prop("multiple")){this.current(function(n){var s=[];e=[e];e.push.apply(e,n);for(var r=0;r<e.length;r++){var a=e[r].id;if(i.inArray(a,s)===-1){s.push(a)}}t.$element.val(s);t.$element.trigger("change")})}else{var n=e.id;this.$element.val(n);this.$element.trigger("change")}};n.prototype.unselect=function(e){var t=this;if(!this.$element.prop("multiple")){return}e.selected=false;if(i(e.element).is("option")){e.element.selected=false;this.$element.trigger("change");return}this.current(function(n){var s=[];for(var r=0;r<n.length;r++){var a=n[r].id;if(a!==e.id&&i.inArray(a,s)===-1){s.push(a)}}t.$element.val(s);t.$element.trigger("change")})};n.prototype.bind=function(e,t){var i=this;this.container=e;e.on("select",function(e){i.select(e.data)});e.on("unselect",function(e){i.unselect(e.data)})};n.prototype.destroy=function(){this.$element.find("*").each(function(){i.removeData(this,"data")})};n.prototype.query=function(e,t){var n=[];var s=this;var r=this.$element.children();r.each(function(){var t=i(this);if(!t.is("option")&&!t.is("optgroup")){return}var r=s.item(t);var a=s.matches(e,r);if(a!==null){n.push(a)}});t({results:n})};n.prototype.addOptions=function(e){t.appendMany(this.$element,e)};n.prototype.option=function(e){var t;if(e.children){t=document.createElement("optgroup");t.label=e.text}else{t=document.createElement("option");if(t.textContent!==undefined){t.textContent=e.text}else{t.innerText=e.text}}if(e.id!==undefined){t.value=e.id}if(e.disabled){t.disabled=true}if(e.selected){t.selected=true}if(e.title){t.title=e.title}var n=i(t);var s=this._normalizeItem(e);s.element=t;i.data(t,"data",s);return n};n.prototype.item=function(e){var t={};t=i.data(e[0],"data");if(t!=null){return t}if(e.is("option")){t={id:e.val(),text:e.text(),disabled:e.prop("disabled"),selected:e.prop("selected"),title:e.prop("title")}}else if(e.is("optgroup")){t={text:e.prop("label"),children:[],title:e.prop("title")};var n=e.children("option");var s=[];for(var r=0;r<n.length;r++){var a=i(n[r]);var o=this.item(a);s.push(o)}t.children=s}t=this._normalizeItem(t);t.element=e[0];i.data(e[0],"data",t);return t};n.prototype._normalizeItem=function(e){if(!i.isPlainObject(e)){e={id:e,text:e}}e=i.extend({},{text:""},e);var t={selected:false,disabled:false};if(e.id!=null){e.id=e.id.toString()}if(e.text!=null){e.text=e.text.toString()}if(e._resultId==null&&e.id&&this.container!=null){e._resultId=this.generateResultId(this.container,e)}return i.extend({},t,e)};n.prototype.matches=function(e,t){var i=this.options.get("matcher");return i(e,t)};return n});t.define("select2/data/array",["./select","../utils","jquery"],function(e,t,i){function n(e,t){var i=t.get("data")||[];n.__super__.constructor.call(this,e,t);this.addOptions(this.convertToOptions(i))}t.Extend(n,e);n.prototype.select=function(e){var t=this.$element.find("option").filter(function(t,i){return i.value==e.id.toString()});if(t.length===0){t=this.option(e);this.addOptions(t)}n.__super__.select.call(this,e)};n.prototype.convertToOptions=function(e){var n=this;var s=this.$element.find("option");var r=s.map(function(){return n.item(i(this)).id}).get();var a=[];function o(e){return function(){return i(this).val()==e.id}}for(var l=0;l<e.length;l++){var u=this._normalizeItem(e[l]);if(i.inArray(u.id,r)>=0){var f=s.filter(o(u));var c=this.item(f);var d=i.extend(true,{},u,c);var h=this.option(d);f.replaceWith(h);continue}var p=this.option(u);if(u.children){var m=this.convertToOptions(u.children);t.appendMany(p,m)}a.push(p)}return a};return n});t.define("select2/data/ajax",["./array","../utils","jquery"],function(e,t,i){function n(e,t){this.ajaxOptions=this._applyDefaults(t.get("ajax"));if(this.ajaxOptions.processResults!=null){this.processResults=this.ajaxOptions.processResults}n.__super__.constructor.call(this,e,t)}t.Extend(n,e);n.prototype._applyDefaults=function(e){var t={data:function(e){return i.extend({},e,{q:e.term})},transport:function(e,t,n){var s=i.ajax(e);s.then(t);s.fail(n);return s}};return i.extend({},t,e,true)};n.prototype.processResults=function(e){return e};n.prototype.query=function(e,t){var n=[];var s=this;if(this._request!=null){if(i.isFunction(this._request.abort)){this._request.abort()}this._request=null}var r=i.extend({type:"GET"},this.ajaxOptions);if(typeof r.url==="function"){r.url=r.url.call(this.$element,e)}if(typeof r.data==="function"){r.data=r.data.call(this.$element,e)}function a(){var n=r.transport(r,function(n){var r=s.processResults(n,e);if(s.options.get("debug")&&window.console&&console.error){if(!r||!r.results||!i.isArray(r.results)){console.error("Select2: The AJAX results did not return an array in the "+"`results` key of the response.")}}t(r)},function(){if(n.status&&n.status==="0"){return}s.trigger("results:message",{message:"errorLoading"})});s._request=n}if(this.ajaxOptions.delay&&e.term!=null){if(this._queryTimeout){window.clearTimeout(this._queryTimeout)}this._queryTimeout=window.setTimeout(a,this.ajaxOptions.delay)}else{a()}};return n});t.define("select2/data/tags",["jquery"],function(e){function t(t,i,n){var s=n.get("tags");var r=n.get("createTag");if(r!==undefined){this.createTag=r}var a=n.get("insertTag");if(a!==undefined){this.insertTag=a}t.call(this,i,n);if(e.isArray(s)){for(var o=0;o<s.length;o++){var l=s[o];var u=this._normalizeItem(l);var f=this.option(u);this.$element.append(f)}}}t.prototype.query=function(e,t,i){var n=this;this._removeOldTags();if(t.term==null||t.page!=null){e.call(this,t,i);return}function s(e,r){var a=e.results;for(var o=0;o<a.length;o++){var l=a[o];var u=l.children!=null&&!s({results:l.children},true);var f=(l.text||"").toUpperCase();var c=(t.term||"").toUpperCase();var d=f===c;if(d||u){if(r){return false}e.data=a;i(e);return}}if(r){return true}var h=n.createTag(t);if(h!=null){var p=n.option(h);p.attr("data-select2-tag",true);n.addOptions([p]);n.insertTag(a,h)}e.results=a;i(e)}e.call(this,t,s)};t.prototype.createTag=function(t,i){var n=e.trim(i.term);if(n===""){return null}return{id:n,text:n}};t.prototype.insertTag=function(e,t,i){t.unshift(i)};t.prototype._removeOldTags=function(t){var i=this._lastTag;var n=this.$element.find("option[data-select2-tag]");n.each(function(){if(this.selected){return}e(this).remove()})};return t});t.define("select2/data/tokenizer",["jquery"],function(e){function t(e,t,i){var n=i.get("tokenizer");if(n!==undefined){this.tokenizer=n}e.call(this,t,i)}t.prototype.bind=function(e,t,i){e.call(this,t,i);this.$search=t.dropdown.$search||t.selection.$search||i.find(".select2-search__field")};t.prototype.query=function(t,i,n){var s=this;function r(t){var i=s._normalizeItem(t);var n=s.$element.find("option").filter(function(){return e(this).val()===i.id});if(!n.length){var r=s.option(i);r.attr("data-select2-tag",true);s._removeOldTags();s.addOptions([r])}a(i)}function a(e){s.trigger("select",{data:e})}i.term=i.term||"";var o=this.tokenizer(i,this.options,r);if(o.term!==i.term){if(this.$search.length){this.$search.val(o.term);this.$search.focus()}i.term=o.term}t.call(this,i,n)};t.prototype.tokenizer=function(t,i,n,s){var r=n.get("tokenSeparators")||[];var a=i.term;var o=0;var l=this.createTag||function(e){return{id:e.term,text:e.term}};while(o<a.length){var u=a[o];if(e.inArray(u,r)===-1){o++;continue}var f=a.substr(0,o);var c=e.extend({},i,{term:f});var d=l(c);if(d==null){o++;continue}s(d);a=a.substr(o+1)||"";o=0}return{term:a}};return t});t.define("select2/data/minimumInputLength",[],function(){function e(e,t,i){this.minimumInputLength=i.get("minimumInputLength");e.call(this,t,i)}e.prototype.query=function(e,t,i){t.term=t.term||"";if(t.term.length<this.minimumInputLength){this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:t.term,params:t}});return}e.call(this,t,i)};return e});t.define("select2/data/maximumInputLength",[],function(){function e(e,t,i){this.maximumInputLength=i.get("maximumInputLength");e.call(this,t,i)}e.prototype.query=function(e,t,i){t.term=t.term||"";if(this.maximumInputLength>0&&t.term.length>this.maximumInputLength){this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:t.term,params:t}});return}e.call(this,t,i)};return e});t.define("select2/data/maximumSelectionLength",[],function(){function e(e,t,i){this.maximumSelectionLength=i.get("maximumSelectionLength");e.call(this,t,i)}e.prototype.query=function(e,t,i){var n=this;this.current(function(s){var r=s!=null?s.length:0;if(n.maximumSelectionLength>0&&r>=n.maximumSelectionLength){n.trigger("results:message",{message:"maximumSelected",args:{maximum:n.maximumSelectionLength}});return}e.call(n,t,i)})};return e});t.define("select2/dropdown",["jquery","./utils"],function(e,t){function i(e,t){this.$element=e;this.options=t;i.__super__.constructor.call(this)}t.Extend(i,t.Observable);i.prototype.render=function(){var t=e('<span class="select2-dropdown">'+'<span class="select2-results"></span>'+"</span>");t.attr("dir",this.options.get("dir"));this.$dropdown=t;return t};i.prototype.bind=function(){};i.prototype.position=function(e,t){};i.prototype.destroy=function(){this.$dropdown.remove()};return i});t.define("select2/dropdown/search",["jquery","../utils"],function(e,t){function i(){}i.prototype.render=function(t){var i=t.call(this);var n=e('<span class="select2-search select2-search--dropdown">'+'<input class="select2-search__field" type="search" tabindex="-1"'+' autocomplete="off" autocorrect="off" autocapitalize="none"'+' spellcheck="false" role="textbox" />'+"</span>");this.$searchContainer=n;this.$search=n.find("input");i.prepend(n);return i};i.prototype.bind=function(t,i,n){var s=this;t.call(this,i,n);this.$search.on("keydown",function(e){s.trigger("keypress",e);s._keyUpPrevented=e.isDefaultPrevented()});this.$search.on("input",function(t){e(this).off("keyup")});this.$search.on("keyup input",function(e){s.handleSearch(e)});i.on("open",function(){s.$search.attr("tabindex",0);s.$search.focus();window.setTimeout(function(){s.$search.focus()},0)});i.on("close",function(){s.$search.attr("tabindex",-1);s.$search.val("")});i.on("focus",function(){if(!i.isOpen()){s.$search.focus()}});i.on("results:all",function(e){if(e.query.term==null||e.query.term===""){var t=s.showSearch(e);if(t){s.$searchContainer.removeClass("select2-search--hide")}else{s.$searchContainer.addClass("select2-search--hide")}}})};i.prototype.handleSearch=function(e){if(!this._keyUpPrevented){var t=this.$search.val();this.trigger("query",{term:t})}this._keyUpPrevented=false};i.prototype.showSearch=function(e,t){return true};return i});t.define("select2/dropdown/hidePlaceholder",[],function(){function e(e,t,i,n){this.placeholder=this.normalizePlaceholder(i.get("placeholder"));e.call(this,t,i,n)}e.prototype.append=function(e,t){t.results=this.removePlaceholder(t.results);e.call(this,t)};e.prototype.normalizePlaceholder=function(e,t){if(typeof t==="string"){t={id:"",text:t}}return t};e.prototype.removePlaceholder=function(e,t){var i=t.slice(0);for(var n=t.length-1;n>=0;n--){var s=t[n];if(this.placeholder.id===s.id){i.splice(n,1)}}return i};return e});t.define("select2/dropdown/infiniteScroll",["jquery"],function(e){function t(e,t,i,n){this.lastParams={};e.call(this,t,i,n);this.$loadingMore=this.createLoadingMore();this.loading=false}t.prototype.append=function(e,t){this.$loadingMore.remove();this.loading=false;e.call(this,t);if(this.showLoadingMore(t)){this.$results.append(this.$loadingMore)}};t.prototype.bind=function(t,i,n){var s=this;t.call(this,i,n);i.on("query",function(e){s.lastParams=e;s.loading=true});i.on("query:append",function(e){s.lastParams=e;s.loading=true});this.$results.on("scroll",function(){var t=e.contains(document.documentElement,s.$loadingMore[0]);if(s.loading||!t){return}var i=s.$results.offset().top+s.$results.outerHeight(false);var n=s.$loadingMore.offset().top+s.$loadingMore.outerHeight(false);if(i+50>=n){s.loadMore()}})};t.prototype.loadMore=function(){this.loading=true;var t=e.extend({},{page:1},this.lastParams);t.page++;this.trigger("query:append",t)};t.prototype.showLoadingMore=function(e,t){return t.pagination&&t.pagination.more};t.prototype.createLoadingMore=function(){var t=e("<li "+'class="select2-results__option select2-results__option--load-more"'+'role="treeitem" aria-disabled="true"></li>');var i=this.options.get("translations").get("loadingMore");t.html(i(this.lastParams));return t};return t});t.define("select2/dropdown/attachBody",["jquery","../utils"],function(e,t){function i(t,i,n){this.$dropdownParent=n.get("dropdownParent")||e(document.body);t.call(this,i,n)}i.prototype.bind=function(e,t,i){var n=this;var s=false;e.call(this,t,i);t.on("open",function(){n._showDropdown();n._attachPositioningHandler(t);if(!s){s=true;t.on("results:all",function(){n._positionDropdown();n._resizeDropdown()});t.on("results:append",function(){n._positionDropdown();n._resizeDropdown()})}});t.on("close",function(){n._hideDropdown();n._detachPositioningHandler(t)});this.$dropdownContainer.on("mousedown",function(e){e.stopPropagation()})};i.prototype.destroy=function(e){e.call(this);this.$dropdownContainer.remove()};i.prototype.position=function(e,t,i){t.attr("class",i.attr("class"));t.removeClass("select2");t.addClass("select2-container--open");t.css({position:"absolute",top:-999999});this.$container=i};i.prototype.render=function(t){var i=e("<span></span>");var n=t.call(this);i.append(n);this.$dropdownContainer=i;return i};i.prototype._hideDropdown=function(e){this.$dropdownContainer.detach()};i.prototype._attachPositioningHandler=function(i,n){var s=this;var r="scroll.select2."+n.id;var a="resize.select2."+n.id;var o="orientationchange.select2."+n.id;var l=this.$container.parents().filter(t.hasScroll);l.each(function(){e(this).data("select2-scroll-position",{x:e(this).scrollLeft(),y:e(this).scrollTop()})});l.on(r,function(t){var i=e(this).data("select2-scroll-position");e(this).scrollTop(i.y)});e(window).on(r+" "+a+" "+o,function(e){s._positionDropdown();s._resizeDropdown()})};i.prototype._detachPositioningHandler=function(i,n){var s="scroll.select2."+n.id;var r="resize.select2."+n.id;var a="orientationchange.select2."+n.id;var o=this.$container.parents().filter(t.hasScroll);o.off(s);e(window).off(s+" "+r+" "+a)};i.prototype._positionDropdown=function(){var t=e(window);var i=this.$dropdown.hasClass("select2-dropdown--above");var n=this.$dropdown.hasClass("select2-dropdown--below");var s=null;var r=this.$container.offset();r.bottom=r.top+this.$container.outerHeight(false);var a={height:this.$container.outerHeight(false)};a.top=r.top;a.bottom=r.top+a.height;var o={height:this.$dropdown.outerHeight(false)};var l={top:t.scrollTop(),bottom:t.scrollTop()+t.height()};var u=l.top<r.top-o.height;var f=l.bottom>r.bottom+o.height;var c={left:r.left,top:a.bottom};var d=this.$dropdownParent;if(d.css("position")==="static"){d=d.offsetParent()}var h=d.offset();c.top-=h.top;c.left-=h.left;if(!i&&!n){s="below"}if(!f&&u&&!i){s="above"}else if(!u&&f&&i){s="below"}if(s=="above"||i&&s!=="below"){c.top=a.top-h.top-o.height}if(s!=null){this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+s);this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+s)}this.$dropdownContainer.css(c)};i.prototype._resizeDropdown=function(){var e={width:this.$container.outerWidth(false)+"px"};if(this.options.get("dropdownAutoWidth")){e.minWidth=e.width;e.position="relative";e.width="auto"}this.$dropdown.css(e)};i.prototype._showDropdown=function(e){this.$dropdownContainer.appendTo(this.$dropdownParent);this._positionDropdown();this._resizeDropdown()};return i});t.define("select2/dropdown/minimumResultsForSearch",[],function(){function e(t){var i=0;for(var n=0;n<t.length;n++){var s=t[n];if(s.children){i+=e(s.children)}else{i++}}return i}function t(e,t,i,n){this.minimumResultsForSearch=i.get("minimumResultsForSearch");if(this.minimumResultsForSearch<0){this.minimumResultsForSearch=Infinity}e.call(this,t,i,n)}t.prototype.showSearch=function(t,i){if(e(i.data.results)<this.minimumResultsForSearch){return false}return t.call(this,i)};return t});t.define("select2/dropdown/selectOnClose",[],function(){function e(){}e.prototype.bind=function(e,t,i){var n=this;e.call(this,t,i);t.on("close",function(e){n._handleSelectOnClose(e)})};e.prototype._handleSelectOnClose=function(e,t){if(t&&t.originalSelect2Event!=null){var i=t.originalSelect2Event;if(i._type==="select"||i._type==="unselect"){return}}var n=this.getHighlightedResults();if(n.length<1){return}var s=n.data("data");if(s.element!=null&&s.element.selected||s.element==null&&s.selected){return}this.trigger("select",{data:s})};return e});t.define("select2/dropdown/closeOnSelect",[],function(){function e(){}e.prototype.bind=function(e,t,i){var n=this;e.call(this,t,i);t.on("select",function(e){n._selectTriggered(e)});t.on("unselect",function(e){n._selectTriggered(e)})};e.prototype._selectTriggered=function(e,t){var i=t.originalEvent;if(i&&i.ctrlKey){return}this.trigger("close",{originalEvent:i,originalSelect2Event:t})};return e});t.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(e){var t=e.input.length-e.maximum;var i="Please delete "+t+" character";if(t!=1){i+="s"}return i},inputTooShort:function(e){var t=e.minimum-e.input.length;var i="Please enter "+t+" or more characters";return i},loadingMore:function(){return"Loading more resultsâ¦"},maximumSelected:function(e){var t="You can only select "+e.maximum+" item";if(e.maximum!=1){t+="s"}return t},noResults:function(){return"No results found"},searching:function(){return"Searchingâ¦"}}});t.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],function(e,t,i,n,s,r,a,o,l,u,f,c,d,h,p,m,g,v,y,b,w,x,C,T,_,k,D,S,$){function A(){this.reset()}A.prototype.apply=function(c){c=e.extend(true,{},this.defaults,c);if(c.dataAdapter==null){if(c.ajax!=null){c.dataAdapter=p}else if(c.data!=null){c.dataAdapter=h}else{c.dataAdapter=d}if(c.minimumInputLength>0){c.dataAdapter=u.Decorate(c.dataAdapter,v)}if(c.maximumInputLength>0){c.dataAdapter=u.Decorate(c.dataAdapter,y)}if(c.maximumSelectionLength>0){c.dataAdapter=u.Decorate(c.dataAdapter,b)}if(c.tags){c.dataAdapter=u.Decorate(c.dataAdapter,m)}if(c.tokenSeparators!=null||c.tokenizer!=null){c.dataAdapter=u.Decorate(c.dataAdapter,g)}if(c.query!=null){var $=t(c.amdBase+"compat/query");c.dataAdapter=u.Decorate(c.dataAdapter,$)}if(c.initSelection!=null){var A=t(c.amdBase+"compat/initSelection");c.dataAdapter=u.Decorate(c.dataAdapter,A)}}if(c.resultsAdapter==null){c.resultsAdapter=i;if(c.ajax!=null){c.resultsAdapter=u.Decorate(c.resultsAdapter,T)}if(c.placeholder!=null){c.resultsAdapter=u.Decorate(c.resultsAdapter,C)}if(c.selectOnClose){c.resultsAdapter=u.Decorate(c.resultsAdapter,D)}}if(c.dropdownAdapter==null){if(c.multiple){c.dropdownAdapter=w}else{var E=u.Decorate(w,x);c.dropdownAdapter=E}if(c.minimumResultsForSearch!==0){c.dropdownAdapter=u.Decorate(c.dropdownAdapter,k)}if(c.closeOnSelect){c.dropdownAdapter=u.Decorate(c.dropdownAdapter,S)}if(c.dropdownCssClass!=null||c.dropdownCss!=null||c.adaptDropdownCssClass!=null){var M=t(c.amdBase+"compat/dropdownCss");c.dropdownAdapter=u.Decorate(c.dropdownAdapter,M)}c.dropdownAdapter=u.Decorate(c.dropdownAdapter,_)}if(c.selectionAdapter==null){if(c.multiple){c.selectionAdapter=s}else{c.selectionAdapter=n}if(c.placeholder!=null){c.selectionAdapter=u.Decorate(c.selectionAdapter,r)}if(c.allowClear){c.selectionAdapter=u.Decorate(c.selectionAdapter,a)}if(c.multiple){c.selectionAdapter=u.Decorate(c.selectionAdapter,o)}if(c.containerCssClass!=null||c.containerCss!=null||c.adaptContainerCssClass!=null){var P=t(c.amdBase+"compat/containerCss");c.selectionAdapter=u.Decorate(c.selectionAdapter,P)}c.selectionAdapter=u.Decorate(c.selectionAdapter,l)}if(typeof c.language==="string"){if(c.language.indexOf("-")>0){var O=c.language.split("-");var F=O[0];c.language=[c.language,F]}else{c.language=[c.language]}}if(e.isArray(c.language)){var I=new f;c.language.push("en");var j=c.language;for(var N=0;N<j.length;N++){var U=j[N];var L={};try{L=f.loadPath(U)}catch(e){try{U=this.defaults.amdLanguageBase+U;L=f.loadPath(U)}catch(e){if(c.debug&&window.console&&console.warn){console.warn('Select2: The language file for "'+U+'" could not be '+"automatically loaded. A fallback will be used instead.")}continue}}I.extend(L)}c.translations=I}else{var R=f.loadPath(this.defaults.amdLanguageBase+"en");var H=new f(c.language);H.extend(R);c.translations=H}return c};A.prototype.reset=function(){function t(e){function t(e){return c[e]||e}return e.replace(/[^\u0000-\u007E]/g,t)}function i(n,s){if(e.trim(n.term)===""){return s}if(s.children&&s.children.length>0){var r=e.extend(true,{},s);for(var a=s.children.length-1;a>=0;a--){var o=s.children[a];var l=i(n,o);if(l==null){r.children.splice(a,1)}}if(r.children.length>0){return r}return i(n,r)}var u=t(s.text).toUpperCase();var f=t(n.term).toUpperCase();if(u.indexOf(f)>-1){return s}return null}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:true,debug:false,dropdownAutoWidth:false,escapeMarkup:u.escapeMarkup,language:$,matcher:i,minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:false,sorter:function(e){return e},templateResult:function(e){return e.text},templateSelection:function(e){return e.text},theme:"default",width:"resolve"}};A.prototype.set=function(t,i){var n=e.camelCase(t);var s={};s[n]=i;var r=u._convertData(s);e.extend(this.defaults,r)};var E=new A;return E});t.define("select2/options",["require","jquery","./defaults","./utils"],function(e,t,i,n){function s(t,s){this.options=t;if(s!=null){this.fromElement(s)}this.options=i.apply(this.options);if(s&&s.is("input")){var r=e(this.get("amdBase")+"compat/inputData");this.options.dataAdapter=n.Decorate(this.options.dataAdapter,r)}}s.prototype.fromElement=function(e){var i=["select2"];if(this.options.multiple==null){this.options.multiple=e.prop("multiple")}if(this.options.disabled==null){this.options.disabled=e.prop("disabled")}if(this.options.language==null){if(e.prop("lang")){this.options.language=e.prop("lang").toLowerCase()}else if(e.closest("[lang]").prop("lang")){this.options.language=e.closest("[lang]").prop("lang")}}if(this.options.dir==null){if(e.prop("dir")){this.options.dir=e.prop("dir")}else if(e.closest("[dir]").prop("dir")){this.options.dir=e.closest("[dir]").prop("dir")}else{this.options.dir="ltr"}}e.prop("disabled",this.options.disabled);e.prop("multiple",this.options.multiple);if(e.data("select2Tags")){if(this.options.debug&&window.console&&console.warn){console.warn("Select2: The `data-select2-tags` attribute has been changed to "+'use the `data-data` and `data-tags="true"` attributes and will be '+"removed in future versions of Select2.")}e.data("data",e.data("select2Tags"));e.data("tags",true)}if(e.data("ajaxUrl")){if(this.options.debug&&window.console&&console.warn){console.warn("Select2: The `data-ajax-url` attribute has been changed to "+"`data-ajax--url` and support for the old attribute will be removed"+" in future versions of Select2.")}e.attr("ajax--url",e.data("ajaxUrl"));e.data("ajax--url",e.data("ajaxUrl"))}var s={};if(t.fn.jquery&&t.fn.jquery.substr(0,2)=="1."&&e[0].dataset){s=t.extend(true,{},e[0].dataset,e.data())}else{s=e.data()}var r=t.extend(true,{},s);r=n._convertData(r);for(var a in r){if(t.inArray(a,i)>-1){continue}if(t.isPlainObject(this.options[a])){t.extend(this.options[a],r[a])}else{this.options[a]=r[a]}}return this};s.prototype.get=function(e){return this.options[e]};s.prototype.set=function(e,t){this.options[e]=t};return s});t.define("select2/core",["jquery","./options","./utils","./keys"],function(e,t,i,n){var s=function(e,i){if(e.data("select2")!=null){e.data("select2").destroy()}this.$element=e;this.id=this._generateId(e);i=i||{};this.options=new t(i,e);s.__super__.constructor.call(this);var n=e.attr("tabindex")||0;e.data("old-tabindex",n);e.attr("tabindex","-1");var r=this.options.get("dataAdapter");this.dataAdapter=new r(e,this.options);var a=this.render();this._placeContainer(a);var o=this.options.get("selectionAdapter");this.selection=new o(e,this.options);this.$selection=this.selection.render();this.selection.position(this.$selection,a);var l=this.options.get("dropdownAdapter");this.dropdown=new l(e,this.options);this.$dropdown=this.dropdown.render();this.dropdown.position(this.$dropdown,a);var u=this.options.get("resultsAdapter");this.results=new u(e,this.options,this.dataAdapter);this.$results=this.results.render();this.results.position(this.$results,this.$dropdown);var f=this;this._bindAdapters();this._registerDomEvents();this._registerDataEvents();this._registerSelectionEvents();this._registerDropdownEvents();this._registerResultsEvents();this._registerEvents();this.dataAdapter.current(function(e){f.trigger("selection:update",{data:e})});e.addClass("select2-hidden-accessible");e.attr("aria-hidden","true");this._syncAttributes();e.data("select2",this)};i.Extend(s,i.Observable);s.prototype._generateId=function(e){var t="";if(e.attr("id")!=null){t=e.attr("id")}else if(e.attr("name")!=null){t=e.attr("name")+"-"+i.generateChars(2)}else{t=i.generateChars(4)}t=t.replace(/(:|\.|\[|\]|,)/g,"");t="select2-"+t;return t};s.prototype._placeContainer=function(e){e.insertAfter(this.$element);var t=this._resolveWidth(this.$element,this.options.get("width"));if(t!=null){e.css("width",t)}};s.prototype._resolveWidth=function(e,t){var i=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if(t=="resolve"){var n=this._resolveWidth(e,"style");if(n!=null){return n}return this._resolveWidth(e,"element")}if(t=="element"){var s=e.outerWidth(false);if(s<=0){return"auto"}return s+"px"}if(t=="style"){var r=e.attr("style");if(typeof r!=="string"){return null}var a=r.split(";");for(var o=0,l=a.length;o<l;o=o+1){var u=a[o].replace(/\s/g,"");var f=u.match(i);if(f!==null&&f.length>=1){return f[1]}}return null}return t};s.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container);this.selection.bind(this,this.$container);this.dropdown.bind(this,this.$container);this.results.bind(this,this.$container)};s.prototype._registerDomEvents=function(){var t=this;this.$element.on("change.select2",function(){t.dataAdapter.current(function(e){t.trigger("selection:update",{data:e})})});this.$element.on("focus.select2",function(e){t.trigger("focus",e)});this._syncA=i.bind(this._syncAttributes,this);this._syncS=i.bind(this._syncSubtree,this);if(this.$element[0].attachEvent){this.$element[0].attachEvent("onpropertychange",this._syncA)}var n=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;if(n!=null){this._observer=new n(function(i){e.each(i,t._syncA);e.each(i,t._syncS)});this._observer.observe(this.$element[0],{attributes:true,childList:true,subtree:false})}else if(this.$element[0].addEventListener){this.$element[0].addEventListener("DOMAttrModified",t._syncA,false);this.$element[0].addEventListener("DOMNodeInserted",t._syncS,false);this.$element[0].addEventListener("DOMNodeRemoved",t._syncS,false)}};s.prototype._registerDataEvents=function(){var e=this;this.dataAdapter.on("*",function(t,i){e.trigger(t,i)})};s.prototype._registerSelectionEvents=function(){var t=this;var i=["toggle","focus"];this.selection.on("toggle",function(){t.toggleDropdown()});this.selection.on("focus",function(e){t.focus(e)});this.selection.on("*",function(n,s){if(e.inArray(n,i)!==-1){return}t.trigger(n,s)})};s.prototype._registerDropdownEvents=function(){var e=this;this.dropdown.on("*",function(t,i){e.trigger(t,i)})};s.prototype._registerResultsEvents=function(){var e=this;this.results.on("*",function(t,i){e.trigger(t,i)})};s.prototype._registerEvents=function(){var e=this;this.on("open",function(){e.$container.addClass("select2-container--open")});this.on("close",function(){e.$container.removeClass("select2-container--open")});this.on("enable",function(){e.$container.removeClass("select2-container--disabled")});this.on("disable",function(){e.$container.addClass("select2-container--disabled")});this.on("blur",function(){e.$container.removeClass("select2-container--focus")});this.on("query",function(t){if(!e.isOpen()){e.trigger("open",{})}this.dataAdapter.query(t,function(i){e.trigger("results:all",{data:i,query:t})})});this.on("query:append",function(t){this.dataAdapter.query(t,function(i){e.trigger("results:append",{data:i,query:t})})});this.on("keypress",function(t){var i=t.which;if(e.isOpen()){if(i===n.ESC||i===n.TAB||i===n.UP&&t.altKey){e.close();t.preventDefault()}else if(i===n.ENTER){e.trigger("results:select",{});t.preventDefault()}else if(i===n.SPACE&&t.ctrlKey){e.trigger("results:toggle",{});t.preventDefault()}else if(i===n.UP){e.trigger("results:previous",{});t.preventDefault()}else if(i===n.DOWN){e.trigger("results:next",{});t.preventDefault()}}else{if(i===n.ENTER||i===n.SPACE||i===n.DOWN&&t.altKey){e.open();t.preventDefault()}}})};s.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled"));if(this.options.get("disabled")){if(this.isOpen()){this.close()}this.trigger("disable",{})}else{this.trigger("enable",{})}};s.prototype._syncSubtree=function(e,t){var i=false;var n=this;if(e&&e.target&&(e.target.nodeName!=="OPTION"&&e.target.nodeName!=="OPTGROUP")){return}if(!t){i=true}else if(t.addedNodes&&t.addedNodes.length>0){for(var s=0;s<t.addedNodes.length;s++){var r=t.addedNodes[s];if(r.selected){i=true}}}else if(t.removedNodes&&t.removedNodes.length>0){i=true}if(i){this.dataAdapter.current(function(e){n.trigger("selection:update",{data:e})})}};s.prototype.trigger=function(e,t){var i=s.__super__.trigger;var n={open:"opening",close:"closing",select:"selecting",unselect:"unselecting"};if(t===undefined){t={}}if(e in n){var r=n[e];var a={prevented:false,name:e,args:t};i.call(this,r,a);if(a.prevented){t.prevented=true;return}}i.call(this,e,t)};s.prototype.toggleDropdown=function(){if(this.options.get("disabled")){return}if(this.isOpen()){this.close()}else{this.open()}};s.prototype.open=function(){if(this.isOpen()){return}this.trigger("query",{})};s.prototype.close=function(){if(!this.isOpen()){return}this.trigger("close",{})};s.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")};s.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")};s.prototype.focus=function(e){if(this.hasFocus()){return}this.$container.addClass("select2-container--focus");this.trigger("focus",{})};s.prototype.enable=function(e){if(this.options.get("debug")&&window.console&&console.warn){console.warn('Select2: The `select2("enable")` method has been deprecated and will'+' be removed in later Select2 versions. Use $element.prop("disabled")'+" instead.")}if(e==null||e.length===0){e=[true]}var t=!e[0];this.$element.prop("disabled",t)};s.prototype.data=function(){if(this.options.get("debug")&&arguments.length>0&&window.console&&console.warn){console.warn('Select2: Data can no longer be set using `select2("data")`. You '+"should consider setting the value instead using `$element.val()`.")}var e=[];this.dataAdapter.current(function(t){e=t});return e};s.prototype.val=function(t){if(this.options.get("debug")&&window.console&&console.warn){console.warn('Select2: The `select2("val")` method has been deprecated and will be'+" removed in later Select2 versions. Use $element.val() instead.")}if(t==null||t.length===0){return this.$element.val()}var i=t[0];if(e.isArray(i)){i=e.map(i,function(e){return e.toString()})}this.$element.val(i).trigger("change")};s.prototype.destroy=function(){this.$container.remove();if(this.$element[0].detachEvent){this.$element[0].detachEvent("onpropertychange",this._syncA)}if(this._observer!=null){this._observer.disconnect();this._observer=null}else if(this.$element[0].removeEventListener){this.$element[0].removeEventListener("DOMAttrModified",this._syncA,false);this.$element[0].removeEventListener("DOMNodeInserted",this._syncS,false);this.$element[0].removeEventListener("DOMNodeRemoved",this._syncS,false)}this._syncA=null;this._syncS=null;this.$element.off(".select2");this.$element.attr("tabindex",this.$element.data("old-tabindex"));this.$element.removeClass("select2-hidden-accessible");this.$element.attr("aria-hidden","false");this.$element.removeData("select2");this.dataAdapter.destroy();this.selection.destroy();this.dropdown.destroy();this.results.destroy();this.dataAdapter=null;this.selection=null;this.dropdown=null;this.results=null};s.prototype.render=function(){var t=e('<span class="select2 select2-container">'+'<span class="selection"></span>'+'<span class="dropdown-wrapper" aria-hidden="true"></span>'+"</span>");t.attr("dir",this.options.get("dir"));this.$container=t;this.$container.addClass("select2-container--"+this.options.get("theme"));t.data("element",this.$element);return t};return s});t.define("jquery-mousewheel",["jquery"],function(e){return e});t.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults"],function(e,t,i,n){if(e.fn.select2==null){var s=["open","close","destroy"];e.fn.select2=function(t){t=t||{};if(typeof t==="object"){this.each(function(){var n=e.extend(true,{},t);var s=new i(e(this),n)});return this}else if(typeof t==="string"){var n;var r=Array.prototype.slice.call(arguments,1);this.each(function(){var i=e(this).data("select2");if(i==null&&window.console&&console.error){console.error("The select2('"+t+"') method was called on an "+"element that is not using Select2.")}n=i[t].apply(i,r)});if(e.inArray(t,s)>-1){return this}return n}else{throw new Error("Invalid arguments for Select2: "+t)}}}if(e.fn.select2.defaults==null){e.fn.select2.defaults=n}return i});return{define:t.define,require:t.require}}();var i=t.require("jquery.select2");e.fn.select2.amd=t;return i});var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(e,t,i){e instanceof String&&(e=String(e));for(var n=e.length,s=0;s<n;s++){var r=e[s];if(t.call(i,r,s,e))return{i:s,v:r}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,i){e!=Array.prototype&&e!=Object.prototype&&(e[t]=i.value)};$jscomp.getGlobal=function(e){return"undefined"!=typeof window&&window===e?e:"undefined"!=typeof global&&null!=global?global:e};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(e,t,i,n){if(t){i=$jscomp.global;e=e.split(".");for(n=0;n<e.length-1;n++){var s=e[n];s in i||(i[s]={});i=i[s]}e=e[e.length-1];n=i[e];t=t(n);t!=n&&null!=t&&$jscomp.defineProperty(i,e,{configurable:!0,writable:!0,value:t})}};$jscomp.polyfill("Array.prototype.find",function(e){return e?e:function(e,t){return $jscomp.findInternal(this,e,t).v}},"es6","es3");(function(e){e.fn.extend({tableExport:function(t){function i(t){var i=[];n(t,"tbody").each(function(){i.push.apply(i,s(e(this),M.tbodySelector))});M.tfootSelector.length&&n(t,"tfoot").each(function(){i.push.apply(i,s(e(this),M.tfootSelector))});return i}function n(t,i){var n=t.parents("table").length;return t.find(i).filter(function(){return e(this).closest("table").parents("table").length===n})}function s(t,i){return t.find(i).filter(function(){return 0===e(this).find("table").length&&1===e(this).parents("table").length})}function r(t){var i=[];e(t).find("thead").first().find("th").each(function(t,n){void 0!==e(n).attr("data-field")?i[t]=e(n).attr("data-field"):i[t]=t.toString()});return i}function a(t){var i="undefined"!==typeof t[0].cellIndex,n="undefined"!==typeof t[0].rowIndex,s=i||n?o(t):t.is(":visible"),r=t.data("tableexport-display");i&&"none"!=r&&"always"!=r&&(t=e(t[0].parentNode),n="undefined"!==typeof t[0].rowIndex,r=t.data("tableexport-display"));n&&"none"!=r&&"always"!=r&&(r=t.closest("table").data("tableexport-display"));return"none"!==r&&(1==s||"always"==r)}function o(e){var t=[];H&&(t=R.filter(function(){var t=!1;this.nodeType==e[0].nodeType&&("undefined"!==typeof this.rowIndex&&this.rowIndex==e[0].rowIndex?t=!0:"undefined"!==typeof this.cellIndex&&this.cellIndex==e[0].cellIndex&&"undefined"!==typeof this.parentNode.rowIndex&&"undefined"!==typeof e[0].parentNode.rowIndex&&this.parentNode.rowIndex==e[0].parentNode.rowIndex&&(t=!0));return t}));return 0==H||0==t.length}function l(t,i,n){var s=!1;a(t)?0<M.ignoreColumn.length&&(-1!=e.inArray(n,M.ignoreColumn)||-1!=e.inArray(n-i,M.ignoreColumn)||U.length>n&&"undefined"!=typeof U[n]&&-1!=e.inArray(U[n],M.ignoreColumn))&&(s=!0):s=!0;return s}function u(t,i,n,s,r){if("function"===typeof r){var o=!1;"function"===typeof M.onIgnoreRow&&(o=M.onIgnoreRow(e(t),n));if(!1===o&&-1==e.inArray(n,M.ignoreRow)&&-1==e.inArray(n-s,M.ignoreRow)&&a(e(t))){var u=e(t).find(i),f=0;u.each(function(t){var i=e(this),s,a=parseInt(this.getAttribute("colspan")),o=parseInt(this.getAttribute("rowspan"));L.forEach(function(e){if(n>=e.s.r&&n<=e.e.r&&f>=e.s.c&&f<=e.e.c)for(s=0;s<=e.e.c-e.s.c;++s)r(null,n,f++)});if(!1===l(i,u.length,t)){if(o||a)a=a||1,L.push({s:{r:n,c:f},e:{r:n+(o||1)-1,c:f+a-1}});r(this,n,f++)}if(a)for(s=0;s<a-1;++s)r(null,n,f++)});L.forEach(function(e){if(n>=e.s.r&&n<=e.e.r&&f>=e.s.c&&f<=e.e.c)for(ne=0;ne<=e.e.c-e.s.c;++ne)r(null,n,f++)})}}}function f(e,t){!0===M.consoleLog&&console.log(e.output());if("string"===M.outputMode)return e.output();if("base64"===M.outputMode)return E(e.output());if("window"===M.outputMode)window.URL=window.URL||window.webkitURL,window.open(window.URL.createObjectURL(e.output("blob")));else try{var i=e.output("blob");saveAs(i,M.fileName+".pdf")}catch(i){A(M.fileName+".pdf","data:application/pdf"+(t?"":";base64")+",",t?e.output("blob"):e.output())}}function c(e,t,i){var n=0;"undefined"!==typeof i&&(n=i.colspan);if(0<=n){for(var s=e.width,r=e.textPos.x,a=t.table.columns.indexOf(t.column),o=1;o<n;o++)s+=t.table.columns[a+o].width;1<n&&("right"===e.styles.halign?r=e.textPos.x+s-e.width:"center"===e.styles.halign&&(r=e.textPos.x+(s-e.width)/2));e.width=s;e.textPos.x=r;"undefined"!==typeof i&&1<i.rowspan&&(e.height*=i.rowspan);if("middle"===e.styles.valign||"bottom"===e.styles.valign)i=("string"===typeof e.text?e.text.split(/\r\n|\r|\n/g):e.text).length||1,2<i&&(e.textPos.y-=(2-1.15)/2*t.row.styles.fontSize*(i-2)/3);return!0}return!1}function d(t,i,n){"undefined"!=typeof n.images&&i.each(function(){var i=e(this).children();if(e(this).is("img")){var s=$(this.src);n.images[s]={url:this.src,src:this.src}}"undefined"!=typeof i&&0<i.length&&d(t,i,n)})}function h(e,t){function i(e){if(e.url){var i=new Image;s=++r;i.crossOrigin="Anonymous";i.onerror=i.onload=function(){if(i.complete&&(0===i.src.indexOf("data:image/")&&(i.width=e.width||i.width||0,i.height=e.height||i.height||0),i.width+i.height)){var n=document.createElement("canvas"),a=n.getContext("2d");n.width=i.width;n.height=i.height;a.drawImage(i,0,0);e.src=n.toDataURL("image/jpeg")}--r||t(s)};i.src=e.url}}var n,s=0,r=0;if("undefined"!=typeof e.images)for(n in e.images)e.images.hasOwnProperty(n)&&i(e.images[n]);(e=r)||(t(s),e=void 0);return e}function p(t,i,n){i.each(function(){var i=e(this).children(),s=0;if(e(this).is("div")){var r=x(T(this,"background-color"),[255,255,255]),a=x(T(this,"border-top-color"),[0,0,0]),o=_(this,"border-top-width",M.jspdf.unit),l=this.getBoundingClientRect(),u=this.offsetLeft*n.dw;s=this.offsetTop*n.dh;var f=l.width*n.dw;l=l.height*n.dh;n.doc.setDrawColor.apply(void 0,a);n.doc.setFillColor.apply(void 0,r);n.doc.setLineWidth(o);n.doc.rect(t.x+u,t.y+s,f,l,o?"FD":"F")}else if(e(this).is("img")&&"undefined"!=typeof n.images&&(r=$(this.src),r=n.images[r],"undefined"!=typeof r)){a=t.width/t.height;o=this.width/this.height;u=t.width;f=t.height;l=19.049976/25.4;o<=a?(f=Math.min(t.height,this.height),u=this.width*f/this.height):o>a&&(u=Math.min(t.width,this.width),f=this.height*u/this.width);u*=l;f*=l;f<t.height&&(s=(t.height-f)/2);try{n.doc.addImage(r.src,t.textPos.x,t.y+s,u,f)}catch(e){}t.textPos.x+=u}"undefined"!=typeof i&&0<i.length&&p(t,i,n)})}function m(t,i,n){if("function"===typeof n.onAutotableText)n.onAutotableText(n.doc,t,i);else{var s=t.textPos.x,r=t.textPos.y,a={halign:t.styles.halign,valign:t.styles.valign};if(i.length){for(i=i[0];i.previousSibling;)i=i.previousSibling;for(var o=!1,l=!1;i;){var u=i.innerText||i.textContent||"";u=(u.length&&" "==u[0]?" ":"")+e.trim(u)+(1<u.length&&" "==u[u.length-1]?" ":"");e(i).is("br")&&(s=t.textPos.x,r+=n.doc.internal.getFontSize());e(i).is("b")?o=!0:e(i).is("i")&&(l=!0);(o||l)&&n.doc.setFontType(o&&l?"bolditalic":o?"bold":"italic");var f=n.doc.getStringUnitWidth(u)*n.doc.internal.getFontSize();if(f){if("linebreak"===t.styles.overflow&&s>t.textPos.x&&s+f>t.textPos.x+t.width){if(0<=".,!%*;:=-".indexOf(u.charAt(0))){var c=u.charAt(0);f=n.doc.getStringUnitWidth(c)*n.doc.internal.getFontSize();s+f<=t.textPos.x+t.width&&(n.doc.autoTableText(c,s,r,a),u=u.substring(1,u.length));f=n.doc.getStringUnitWidth(u)*n.doc.internal.getFontSize()}s=t.textPos.x;r+=n.doc.internal.getFontSize()}for(;u.length&&s+f>t.textPos.x+t.width;)u=u.substring(0,u.length-1),f=n.doc.getStringUnitWidth(u)*n.doc.internal.getFontSize();n.doc.autoTableText(u,s,r,a);s+=f}if(o||l)e(i).is("b")?o=!1:e(i).is("i")&&(l=!1),n.doc.setFontType(o||l?o?"bold":"italic":"normal");i=i.nextSibling}t.textPos.x=s;t.textPos.y=r}else n.doc.autoTableText(t.text,t.textPos.x,t.textPos.y,a)}}function g(e,t,i){return e.replace(new RegExp(t.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1"),"g"),i)}function v(e){e=g(e||"0",M.numbers.html.thousandsSeparator,"");e=g(e,M.numbers.html.decimalMark,".");return"number"===typeof e||!1!==jQuery.isNumeric(e)?e:!1}function y(e){-1<e.indexOf("%")?(e=v(e.replace(/%/g,"")),!1!==e&&(e/=100)):e=!1;return e}function b(t,i,n){var s="";if(null!==t){var r=e(t);if(r[0].hasAttribute("data-tableexport-value"))var a=(a=r.data("tableexport-value"))?a+"":"";else if(a=r.html(),"function"===typeof M.onCellHtmlData)a=M.onCellHtmlData(r,i,n,a);else if(""!=a){var o=e.parseHTML(a),l=0,u=0;a="";e.each(o,function(){if(e(this).is("input"))a+=r.find("input").eq(l++).val();else if(e(this).is("select"))a+=r.find("select option:selected").eq(u++).text();else if("undefined"===typeof e(this).html())a+=e(this).text();else if(void 0===jQuery().bootstrapTable||!0!==e(this).hasClass("filterControl")&&0===e(t).parents(".detail-view").length)a+=e(this).html()})}if(!0===M.htmlContent)s=e.trim(a);else if(a&&""!=a)if(""!=e(t).data("tableexport-cellformat")){var f=a.replace(/\n/g,"\u2028").replace(/<br\s*[\/]?>/gi,"â "),c=e("<div/>").html(f).contents();o=!1;f="";e.each(c.text().split("\u2028"),function(t,i){0<t&&(f+=" ");f+=e.trim(i)});e.each(f.split("â "),function(t,i){0<t&&(s+="\n");s+=e.trim(i).replace(/\u00AD/g,"")});if("json"==M.type||"excel"===M.type&&"xmlss"===M.excelFileFormat||!1===M.numbers.output)o=v(s),!1!==o&&(s=Number(o));else if(M.numbers.html.decimalMark!=M.numbers.output.decimalMark||M.numbers.html.thousandsSeparator!=M.numbers.output.thousandsSeparator)if(o=v(s),!1!==o){c=(""+o.substr(0>o?1:0)).split(".");1==c.length&&(c[1]="");var d=3<c[0].length?c[0].length%3:0;s=(0>o?"-":"")+(M.numbers.output.thousandsSeparator?(d?c[0].substr(0,d)+M.numbers.output.thousandsSeparator:"")+c[0].substr(d).replace(/(\d{3})(?=\d)/g,"$1"+M.numbers.output.thousandsSeparator):c[0])+(c[1].length?M.numbers.output.decimalMark+c[1]:"")}}else s=a;!0===M.escape&&(s=escape(s));"function"===typeof M.onCellData&&(s=M.onCellData(r,i,n,s))}return s}function w(e,t,i){return t+"-"+i.toLowerCase()}function x(e,t){(e=/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/.exec(e))&&(t=[parseInt(e[1]),parseInt(e[2]),parseInt(e[3])]);return t}function C(t){var i=T(t,"text-align"),n=T(t,"font-weight"),s=T(t,"font-style"),r="";"start"==i&&(i="rtl"==T(t,"direction")?"right":"left");700<=n&&(r="bold");"italic"==s&&(r+=s);""===r&&(r="normal");i={style:{align:i,bcolor:x(T(t,"background-color"),[255,255,255]),color:x(T(t,"color"),[0,0,0]),fstyle:r},colspan:parseInt(e(t).attr("colspan"))||0,rowspan:parseInt(e(t).attr("rowspan"))||0};null!==t&&(t=t.getBoundingClientRect(),i.rect={width:t.width,height:t.height});return i}function T(e,t){try{return window.getComputedStyle?(t=t.replace(/([a-z])([A-Z])/,w),window.getComputedStyle(e,null).getPropertyValue(t)):e.currentStyle?e.currentStyle[t]:e.style[t]}catch(e){}return""}function _(e,t,i){t=T(e,t).match(/\d+/);if(null!==t){t=t[0];e=e.parentElement;var n=document.createElement("div");n.style.overflow="hidden";n.style.visibility="hidden";e.appendChild(n);n.style.width=100+i;i=100/n.offsetWidth;e.removeChild(n);return t*i}return 0}function k(){if(!(this instanceof k))return new k;this.SheetNames=[];this.Sheets={}}function D(e){for(var t=new ArrayBuffer(e.length),i=new Uint8Array(t),n=0;n!=e.length;++n)i[n]=e.charCodeAt(n)&255;return t}function S(e){for(var t={},i={s:{c:1e7,r:1e7},e:{c:0,r:0}},n=0;n!=e.length;++n)for(var s=0;s!=e[n].length;++s){i.s.r>n&&(i.s.r=n);i.s.c>s&&(i.s.c=s);i.e.r<n&&(i.e.r=n);i.e.c<s&&(i.e.c=s);var r={v:e[n][s]};if(null!==r.v){var a=XLSX.utils.encode_cell({c:s,r:n});if("number"===typeof r.v)r.t="n";else if("boolean"===typeof r.v)r.t="b";else if(r.v instanceof Date){r.t="n";r.z=XLSX.SSF._table[14];var o=r;var l=(Date.parse(r.v)-new Date(Date.UTC(1899,11,30)))/864e5;o.v=l}else r.t="s";t[a]=r}}1e7>i.s.c&&(t["!ref"]=XLSX.utils.encode_range(i));return t}function $(e){var t=0,i;if(0===e.length)return t;var n=0;for(i=e.length;n<i;n++){var s=e.charCodeAt(n);t=(t<<5)-t+s;t|=0}return t}function A(e,t,i){var n=window.navigator.userAgent;if(!1!==e&&window.navigator.msSaveOrOpenBlob)window.navigator.msSaveOrOpenBlob(new Blob([i]),e);else if(!1!==e&&(0<n.indexOf("MSIE ")||n.match(/Trident.*rv\:11\./))){if(t=document.createElement("iframe"))document.body.appendChild(t),t.setAttribute("style","display:none"),t.contentDocument.open("txt/html","replace"),t.contentDocument.write(i),t.contentDocument.close(),t.focus(),t.contentDocument.execCommand("SaveAs",!0,e),document.body.removeChild(t)}else{var s=document.createElement("a");if(s){var r=null;s.style.display="none";!1!==e?s.download=e:s.target="_blank";"object"==typeof i?(window.URL=window.URL||window.webkitURL,r=window.URL.createObjectURL(i),s.href=r):0<=t.toLowerCase().indexOf("base64,")?s.href=t+E(i):s.href=t+encodeURIComponent(i);document.body.appendChild(s);if(document.createEvent)null===O&&(O=document.createEvent("MouseEvents")),O.initEvent("click",!0,!1),s.dispatchEvent(O);else if(document.createEventObject)s.fireEvent("onclick");else if("function"==typeof s.onclick)s.onclick();setTimeout(function(){r&&window.URL.revokeObjectURL(r);document.body.removeChild(s)},100)}}}function E(e){var t,i="",n=0;if("string"===typeof e){e=e.replace(/\x0d\x0a/g,"\n");var s="";for(t=0;t<e.length;t++){var r=e.charCodeAt(t);128>r?s+=String.fromCharCode(r):(127<r&&2048>r?s+=String.fromCharCode(r>>6|192):(s+=String.fromCharCode(r>>12|224),s+=String.fromCharCode(r>>6&63|128)),s+=String.fromCharCode(r&63|128))}e=s}for(;n<e.length;){var a=e.charCodeAt(n++);s=e.charCodeAt(n++);t=e.charCodeAt(n++);r=a>>2;a=(a&3)<<4|s>>4;var o=(s&15)<<2|t>>6;var l=t&63;isNaN(s)?o=l=64:isNaN(t)&&(l=64);i=i+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(r)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(o)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(l)}return i}var M={consoleLog:!1,csvEnclosure:'"',csvSeparator:",",csvUseBOM:!0,displayTableName:!1,escape:!1,excelFileFormat:"xlshtml",excelRTL:!1,excelstyles:[],exportHiddenCells:!1,fileName:"tableExport",htmlContent:!1,ignoreColumn:[],ignoreRow:[],jsonScope:"all",jspdf:{orientation:"p",unit:"pt",format:"a4",margins:{left:20,right:10,top:10,bottom:10},onDocCreated:null,autotable:{styles:{cellPadding:2,rowHeight:12,fontSize:8,fillColor:255,textColor:50,fontStyle:"normal",overflow:"ellipsize",halign:"left",valign:"middle"},headerStyles:{fillColor:[52,73,94],textColor:255,fontStyle:"bold",halign:"center"},alternateRowStyles:{fillColor:245},tableExport:{doc:null,onAfterAutotable:null,onBeforeAutotable:null,onAutotableText:null,onTable:null,outputImages:!0}}},numbers:{html:{decimalMark:".",thousandsSeparator:","},output:{decimalMark:".",thousandsSeparator:","}},onCellData:null,onCellHtmlData:null,onIgnoreRow:null,onMsoNumberFormat:null,outputMode:"file",pdfmake:{enabled:!1,docDefinition:{pageOrientation:"portrait",defaultStyle:{font:"Roboto"}},fonts:{}},tbodySelector:"tr",tfootSelector:"tr",theadSelector:"tr",tableName:"Table",type:"csv",worksheetName:""},P=this,O=null,F=[],I=[],j=0,N="",U=[],L=[],R=[],H=!1;e.extend(!0,M,t);U=r(P);if("csv"==M.type||"tsv"==M.type||"txt"==M.type){var z="",Y=0;L=[];j=0;var V=function(t,i,n){t.each(function(){N="";u(this,i,j,n+t.length,function(e,t,i){var n=N,s="";if(null!==e)if(e=b(e,t,i),t=null===e||""===e?"":e.toString(),"tsv"==M.type)e instanceof Date&&e.toLocaleString(),s=g(t,"\t"," ");else if(e instanceof Date)s=M.csvEnclosure+e.toLocaleString()+M.csvEnclosure;else if(s=g(t,M.csvEnclosure,M.csvEnclosure+M.csvEnclosure),0<=s.indexOf(M.csvSeparator)||/[\r\n ]/g.test(s))s=M.csvEnclosure+s+M.csvEnclosure;N=n+(s+("tsv"==M.type?"\t":M.csvSeparator))});N=e.trim(N).substring(0,N.length-1);0<N.length&&(0<z.length&&(z+="\n"),z+=N);j++});return t.length};Y+=V(e(P).find("thead").first().find(M.theadSelector),"th,td",Y);n(e(P),"tbody").each(function(){Y+=V(s(e(this),M.tbodySelector),"td,th",Y)});M.tfootSelector.length&&V(e(P).find("tfoot").first().find(M.tfootSelector),"td,th",Y);z+="\n";!0===M.consoleLog&&console.log(z);if("string"===M.outputMode)return z;if("base64"===M.outputMode)return E(z);if("window"===M.outputMode){A(!1,"data:text/"+("csv"==M.type?"csv":"plain")+";charset=utf-8,",z);return}try{var B=new Blob([z],{type:"text/"+("csv"==M.type?"csv":"plain")+";charset=utf-8"});saveAs(B,M.fileName+"."+M.type,"csv"!=M.type||!1===M.csvUseBOM)}catch(e){A(M.fileName+"."+M.type,"data:text/"+("csv"==M.type?"csv":"plain")+";charset=utf-8,"+("csv"==M.type&&M.csvUseBOM?"\ufeff":""),z)}}else if("sql"==M.type){j=0;L=[];var W="INSERT INTO `"+M.tableName+"` (";F=e(P).find("thead").first().find(M.theadSelector);F.each(function(){u(this,"th,td",j,F.length,function(e,t,i){W+="'"+b(e,t,i)+"',"});j++;W=e.trim(W);W=e.trim(W).substring(0,W.length-1)});W+=") VALUES ";I=i(e(P));e(I).each(function(){N="";u(this,"td,th",j,F.length+I.length,function(e,t,i){N+="'"+b(e,t,i)+"',"});3<N.length&&(W+="("+N,W=e.trim(W).substring(0,W.length-1),W+="),");j++});W=e.trim(W).substring(0,W.length-1);W+=";";!0===M.consoleLog&&console.log(W);if("string"===M.outputMode)return W;if("base64"===M.outputMode)return E(W);try{B=new Blob([W],{type:"text/plain;charset=utf-8"}),saveAs(B,M.fileName+".sql")}catch(e){A(M.fileName+".sql","data:application/sql;charset=utf-8,",W)}}else if("json"==M.type){var q=[];L=[];F=e(P).find("thead").first().find(M.theadSelector);F.each(function(){var e=[];u(this,"th,td",j,F.length,function(t,i,n){e.push(b(t,i,n))});q.push(e)});var Z=[];I=i(e(P));e(I).each(function(){var t={},i=0;u(this,"td,th",j,F.length+I.length,function(e,n,s){q.length?t[q[q.length-1][i]]=b(e,n,s):t[i]=b(e,n,s);i++});!1===e.isEmptyObject(t)&&Z.push(t);j++});t="";t="head"==M.jsonScope?JSON.stringify(q):"data"==M.jsonScope?JSON.stringify(Z):JSON.stringify({header:q,data:Z});!0===M.consoleLog&&console.log(t);if("string"===M.outputMode)return t;if("base64"===M.outputMode)return E(t);try{B=new Blob([t],{type:"application/json;charset=utf-8"}),saveAs(B,M.fileName+".json")}catch(e){A(M.fileName+".json","data:application/json;charset=utf-8;base64,",t)}}else if("xml"===M.type){j=0;L=[];var G='<?xml version="1.0" encoding="utf-8"?>';G+="<tabledata><fields>";F=e(P).find("thead").first().find(M.theadSelector);F.each(function(){u(this,"th,td",j,F.length,function(e,t,i){G+="<field>"+b(e,t,i)+"</field>"});j++});G+="</fields><data>";var Q=1;I=i(e(P));e(I).each(function(){var e=1;N="";u(this,"td,th",j,F.length+I.length,function(t,i,n){N+="<column-"+e+">"+b(t,i,n)+"</column-"+e+">";e++});0<N.length&&"<column-1></column-1>"!=N&&(G+='<row id="'+Q+'">'+N+"</row>",Q++);j++});G+="</data></tabledata>";!0===M.consoleLog&&console.log(G);if("string"===M.outputMode)return G;if("base64"===M.outputMode)return E(G);try{B=new Blob([G],{type:"application/xml;charset=utf-8"}),saveAs(B,M.fileName+".xml")}catch(e){A(M.fileName+".xml","data:application/xml;charset=utf-8;base64,",G)}}else if("excel"===M.type&&"xmlss"===M.excelFileFormat){var X=[],K=[];e(P).filter(function(){return a(e(this))}).each(function(){function t(t,i,n){var s=[];e(t).each(function(){var i=0,r=0;N="";u(this,"td,th",j,n+t.length,function(t,n,a){if(null!==t){var o="";n=b(t,n,a);a="String";if(!1!==jQuery.isNumeric(n))a="Number";else{var l=y(n);!1!==l&&(n=l,a="Number",o+=' ss:StyleID="pct1"')}"Number"!==a&&(n=n.replace(/\n/g,"<br>"));l=parseInt(t.getAttribute("colspan"));t=parseInt(t.getAttribute("rowspan"));s.forEach(function(e){if(j>=e.s.r&&j<=e.e.r&&r>=e.s.c&&r<=e.e.c)for(var t=0;t<=e.e.c-e.s.c;++t)r++,i++});if(t||l)t=t||1,l=l||1,s.push({s:{r:j,c:r},e:{r:j+t-1,c:r+l-1}});1<l&&(o+=' ss:MergeAcross="'+(l-1)+'"',r+=l-1);1<t&&(o+=' ss:MergeDown="'+(t-1)+'" ss:StyleID="rsp1"');0<i&&(o+=' ss:Index="'+(r+1)+'"',i=0);N+="<Cell"+o+'><Data ss:Type="'+a+'">'+e("<div />").text(n).html()+"</Data></Cell>\r";r++}});0<N.length&&(se+='<Row ss:AutoFitHeight="0">\r'+N+"</Row>\r");j++});return t.length}var n=e(this),s="";"string"===typeof M.worksheetName&&M.worksheetName.length?s=M.worksheetName+" "+(K.length+1):"undefined"!==typeof M.worksheetName[K.length]&&(s=M.worksheetName[K.length]);s.length||(s=n.find("caption").text()||"");s.length||(s="Table "+(K.length+1));s=s.replace(/[\\\/[\]*:?'"]/g,"").substring(0,31).trim();K.push(e("<div />").text(s).html());!1===M.exportHiddenCells&&(R=n.find("tr, th, td").filter(":hidden"),H=0<R.length);j=0;U=r(this);se="<Table>\r";s=0;s+=t(n.find("thead").first().find(M.theadSelector),"th,td",s);t(i(n),"td,th",s);se+="</Table>\r";X.push(se);!0===M.consoleLog&&console.log(se)});t={};for(var J={},ee,te,ie=0,ne=K.length;ie<ne;ie++)ee=K[ie],te=t[ee],te=t[ee]=null==te?1:te+1,2==te&&(K[J[ee]]=K[J[ee]].substring(0,29)+"-1"),1<t[ee]?K[ie]=K[ie].substring(0,29)+"-"+t[ee]:J[ee]=ie;t='<?xml version="1.0" encoding="UTF-8"?>\r<?mso-application progid="Excel.Sheet"?>\r<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"\r xmlns:o="urn:schemas-microsoft-com:office:office"\r xmlns:x="urn:schemas-microsoft-com:office:excel"\r xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"\r xmlns:html="http://www.w3.org/TR/REC-html40">\r<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">\r  <Created>'+(new Date).toISOString()+'</Created>\r</DocumentProperties>\r<OfficeDocumentSettings xmlns="urn:schemas-microsoft-com:office:office">\r  <AllowPNG/>\r</OfficeDocumentSettings>\r<ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel">\r  <WindowHeight>9000</WindowHeight>\r  <WindowWidth>13860</WindowWidth>\r  <WindowTopX>0</WindowTopX>\r  <WindowTopY>0</WindowTopY>\r  <ProtectStructure>False</ProtectStructure>\r  <ProtectWindows>False</ProtectWindows>\r</ExcelWorkbook>\r<Styles>\r  <Style ss:ID="Default" ss:Name="Normal">\r    <Alignment ss:Vertical="Bottom"/>\r    <Borders/>\r    <Font/>\r    <Interior/>\r    <NumberFormat/>\r    <Protection/>\r  </Style>\r  <Style ss:ID="rsp1">\r    <Alignment ss:Vertical="Center"/>\r  </Style>\r  <Style ss:ID="pct1">\r    <NumberFormat ss:Format="Percent"/>\r  </Style>\r</Styles>\r';for(J=0;J<X.length;J++)t+='<Worksheet ss:Name="'+K[J]+'" ss:RightToLeft="'+(M.excelRTL?"1":"0")+'">\r'+X[J],t=M.excelRTL?t+'<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">\r<DisplayRightToLeft/>\r</WorksheetOptions>\r':t+'<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel"/>\r',t+="</Worksheet>\r";t+="</Workbook>\r";!0===M.consoleLog&&console.log(t);if("string"===M.outputMode)return t;if("base64"===M.outputMode)return E(t);try{B=new Blob([t],{type:"application/xml;charset=utf-8"}),saveAs(B,M.fileName+".xml")}catch(e){A(M.fileName+".xml","data:application/xml;charset=utf-8;base64,",t)}}else if("excel"==M.type||"xls"==M.type||"word"==M.type||"doc"==M.type){t="excel"==M.type||"xls"==M.type?"excel":"word";J="excel"==t?"xls":"doc";ee='xmlns:x="urn:schemas-microsoft-com:office:'+t+'"';var se="",re="";e(P).filter(function(){return a(e(this))}).each(function(){var t=e(this);""===re&&(re=M.worksheetName||t.find("caption").text()||"Table",re=re.replace(/[\\\/[\]*:?'"]/g,"").substring(0,31).trim());!1===M.exportHiddenCells&&(R=t.find("tr, th, td").filter(":hidden"),H=0<R.length);j=0;L=[];U=r(this);se+="<table><thead>";F=t.find("thead").first().find(M.theadSelector);F.each(function(){N="";u(this,"th,td",j,F.length,function(t,i,n){if(null!==t){var s="";N+="<th";for(var r in M.excelstyles)if(M.excelstyles.hasOwnProperty(r)){var a=e(t).css(M.excelstyles[r]);""!==a&&"0px none rgb(0, 0, 0)"!=a&&"rgba(0, 0, 0, 0)"!=a&&(s+=""===s?'style="':";",s+=M.excelstyles[r]+":"+a)}""!==s&&(N+=" "+s+'"');e(t).is("[colspan]")&&(N+=' colspan="'+e(t).attr("colspan")+'"');e(t).is("[rowspan]")&&(N+=' rowspan="'+e(t).attr("rowspan")+'"');N+=">"+b(t,i,n)+"</th>"}});0<N.length&&(se+="<tr>"+N+"</tr>");j++});se+="</thead><tbody>";I=i(t);e(I).each(function(){var t=e(this);N="";u(this,"td,th",j,F.length+I.length,function(i,n,s){if(null!==i){var r=b(i,n,s),a="",o=e(i).data("tableexport-msonumberformat");"undefined"==typeof o&&"function"===typeof M.onMsoNumberFormat&&(o=M.onMsoNumberFormat(i,n,s));"undefined"!=typeof o&&""!==o&&(a="style=\"mso-number-format:'"+o+"'");for(var l in M.excelstyles)M.excelstyles.hasOwnProperty(l)&&(o=e(i).css(M.excelstyles[l]),""===o&&(o=t.css(M.excelstyles[l])),""!==o&&"0px none rgb(0, 0, 0)"!=o&&"rgba(0, 0, 0, 0)"!=o&&(a+=""===a?'style="':";",a+=M.excelstyles[l]+":"+o));N+="<td";""!==a&&(N+=" "+a+'"');e(i).is("[colspan]")&&(N+=' colspan="'+e(i).attr("colspan")+'"');e(i).is("[rowspan]")&&(N+=' rowspan="'+e(i).attr("rowspan")+'"');"string"===typeof r&&""!=r&&(r=r.replace(/\n/g,"<br>"));N+=">"+r+"</td>"}});0<N.length&&(se+="<tr>"+N+"</tr>");j++});M.displayTableName&&(se+="<tr><td></td></tr><tr><td></td></tr><tr><td>"+b(e("<p>"+M.tableName+"</p>"))+"</td></tr>");se+="</tbody></table>";!0===M.consoleLog&&console.log(se)});ee='<html xmlns:o="urn:schemas-microsoft-com:office:office" '+ee+' xmlns="http://www.w3.org/TR/REC-html40">'+('<meta http-equiv="content-type" content="application/vnd.ms-'+t+'; charset=UTF-8">')+"<head>";"excel"===t&&(ee+="\x3c!--[if gte mso 9]>",ee+="<xml>",ee+="<x:ExcelWorkbook>",ee+="<x:ExcelWorksheets>",ee+="<x:ExcelWorksheet>",ee+="<x:Name>",ee+=re,ee+="</x:Name>",ee+="<x:WorksheetOptions>",ee+="<x:DisplayGridlines/>",M.excelRTL&&(ee+="<x:DisplayRightToLeft/>"),ee+="</x:WorksheetOptions>",ee+="</x:ExcelWorksheet>",ee+="</x:ExcelWorksheets>",ee+="</x:ExcelWorkbook>",ee+="</xml>",ee+="<![endif]--\x3e");ee+="<style>br {mso-data-placement:same-cell;}</style>";ee+="</head>";ee+="<body>";ee+=se;ee+="</body>";ee+="</html>";!0===M.consoleLog&&console.log(ee);if("string"===M.outputMode)return ee;if("base64"===M.outputMode)return E(ee);try{B=new Blob([ee],{type:"application/vnd.ms-"+M.type}),saveAs(B,M.fileName+"."+J)}catch(e){A(M.fileName+"."+J,"data:application/vnd.ms-"+t+";base64,",ee)}}else if("xlsx"==M.type){var ae=[],oe=[];j=0;I=e(P).find("thead").first().find(M.theadSelector);I.push.apply(I,i(e(P)));e(I).each(function(){var e=[];u(this,"th,td",j,I.length,function(t,i,n){if("undefined"!==typeof t&&null!==t){n=b(t,i,n);i=parseInt(t.getAttribute("colspan"));t=parseInt(t.getAttribute("rowspan"));oe.forEach(function(t){if(j>=t.s.r&&j<=t.e.r&&e.length>=t.s.c&&e.length<=t.e.c)for(var i=0;i<=t.e.c-t.s.c;++i)e.push(null)});if(t||i)i=i||1,oe.push({s:{r:j,c:e.length},e:{r:j+(t||1)-1,c:e.length+i-1}});"function"!==typeof M.onCellData&&""!==n&&n==+n&&(n=+n);e.push(""!==n?n:null);if(i)for(t=0;t<i-1;++t)e.push(null)}});ae.push(e);j++});t=new k;J=S(ae);J["!merges"]=oe;t.SheetNames.push(M.worksheetName);t.Sheets[M.worksheetName]=J;t=XLSX.write(t,{bookType:M.type,bookSST:!1,type:"binary"});try{B=new Blob([D(t)],{type:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8"}),saveAs(B,M.fileName+"."+M.type)}catch(e){A(M.fileName+"."+M.type,"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8,",D(t))}}else if("png"==M.type)html2canvas(e(P)[0]).then(function(e){e=e.toDataURL();for(var t=atob(e.substring(22)),i=new ArrayBuffer(t.length),n=new Uint8Array(i),s=0;s<t.length;s++)n[s]=t.charCodeAt(s);!0===M.consoleLog&&console.log(t);if("string"===M.outputMode)return t;if("base64"===M.outputMode)return E(e);if("window"===M.outputMode)window.open(e);else try{B=new Blob([i],{type:"image/png"}),saveAs(B,M.fileName+".png")}catch(e){A(M.fileName+".png","data:image/png,",B)}});else if("pdf"==M.type)if(!0===M.pdfmake.enabled){t=[];var le=[];j=0;L=[];J=function(t,i,n){var s=0;e(t).each(function(){var e=[];u(this,i,j,n,function(t,i,n){if("undefined"!==typeof t&&null!==t){var s=parseInt(t.getAttribute("colspan")),r=parseInt(t.getAttribute("rowspan"));t=b(t,i,n)||" ";1<s||1<r?e.push({colSpan:s||1,rowSpan:r||1,text:t}):e.push(t)}else e.push(" ")});e.length&&le.push(e);s<e.length&&(s=e.length);j++});return s};F=e(this).find("thead").first().find(M.theadSelector);ee=J(F,"th,td",F.length);for(te=t.length;te<ee;te++)t.push("*");I=i(e(this));J(I,"th,td",F.length+I.length);t={content:[{table:{headerRows:F.length,widths:t,body:le}}]};e.extend(!0,t,M.pdfmake.docDefinition);pdfMake.fonts={Roboto:{normal:"Roboto-Regular.ttf",bold:"Roboto-Medium.ttf",italics:"Roboto-Italic.ttf",bolditalics:"Roboto-MediumItalic.ttf"}};e.extend(!0,pdfMake.fonts,M.pdfmake.fonts);pdfMake.createPdf(t).getBuffer(function(e){try{var t=new Blob([e],{type:"application/pdf"});saveAs(t,M.fileName+".pdf")}catch(t){A(M.fileName+".pdf","data:application/pdf;base64,",e)}})}else if(!1===M.jspdf.autotable){t={dim:{w:_(e(P).first().get(0),"width","mm"),h:_(e(P).first().get(0),"height","mm")},pagesplit:!1};var ue=new jsPDF(M.jspdf.orientation,M.jspdf.unit,M.jspdf.format);ue.addHTML(e(P).first(),M.jspdf.margins.left,M.jspdf.margins.top,t,function(){f(ue,!1)})}else{var fe=M.jspdf.autotable.tableExport;if("string"===typeof M.jspdf.format&&"bestfit"===M.jspdf.format.toLowerCase()){var ce={a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89]},de="",he="",pe=0;e(P).each(function(){if(a(e(this))){var t=_(e(this).get(0),"width","pt");if(t>pe){t>ce.a0[0]&&(de="a0",he="l");for(var i in ce)ce.hasOwnProperty(i)&&ce[i][1]>t&&(de=i,he="l",ce[i][0]>t&&(he="p"));pe=t}}});M.jspdf.format=""===de?"a4":de;M.jspdf.orientation=""===he?"w":he}if(null==fe.doc&&(fe.doc=new jsPDF(M.jspdf.orientation,M.jspdf.unit,M.jspdf.format),"function"===typeof M.jspdf.onDocCreated))M.jspdf.onDocCreated(fe.doc);!0===fe.outputImages&&(fe.images={});"undefined"!=typeof fe.images&&(e(P).filter(function(){return a(e(this))}).each(function(){var t=0;L=[];!1===M.exportHiddenCells&&(R=e(this).find("tr, th, td").filter(":hidden"),H=0<R.length);F=e(this).find("thead").find(M.theadSelector);I=i(e(this));e(I).each(function(){u(this,"td,th",F.length+t,F.length+I.length,function(t){if("undefined"!==typeof t&&null!==t){var i=e(t).children();"undefined"!=typeof i&&0<i.length&&d(t,i,fe)}});t++})}),F=[],I=[]);h(fe,function(){e(P).filter(function(){return a(e(this))}).each(function(){var t;j=0;L=[];!1===M.exportHiddenCells&&(R=e(this).find("tr, th, td").filter(":hidden"),H=0<R.length);U=r(this);fe.columns=[];fe.rows=[];fe.rowoptions={};if("function"===typeof fe.onTable&&!1===fe.onTable(e(this),M))return!0;M.jspdf.autotable.tableExport=null;var n=e.extend(!0,{},M.jspdf.autotable);M.jspdf.autotable.tableExport=fe;n.margin={};e.extend(!0,n.margin,M.jspdf.margins);n.tableExport=fe;"function"!==typeof n.beforePageContent&&(n.beforePageContent=function(e){1==e.pageCount&&e.table.rows.concat(e.table.headerRow).forEach(function(t){0<t.height&&(t.height+=(2-1.15)/2*t.styles.fontSize,e.table.height+=(2-1.15)/2*t.styles.fontSize)})});"function"!==typeof n.createdHeaderCell&&(n.createdHeaderCell=function(t,i){t.styles=e.extend({},i.row.styles);if("undefined"!=typeof fe.columns[i.column.dataKey]){var s=fe.columns[i.column.dataKey];if("undefined"!=typeof s.rect){t.contentWidth=s.rect.width;if("undefined"==typeof fe.heightRatio||0===fe.heightRatio){var r=i.row.raw[i.column.dataKey].rowspan?i.row.raw[i.column.dataKey].rect.height/i.row.raw[i.column.dataKey].rowspan:i.row.raw[i.column.dataKey].rect.height;fe.heightRatio=t.styles.rowHeight/r}r=i.row.raw[i.column.dataKey].rect.height*fe.heightRatio;r>t.styles.rowHeight&&(t.styles.rowHeight=r)}"undefined"!=typeof s.style&&!0!==s.style.hidden&&(t.styles.halign=s.style.align,"inherit"===n.styles.fillColor&&(t.styles.fillColor=s.style.bcolor),"inherit"===n.styles.textColor&&(t.styles.textColor=s.style.color),"inherit"===n.styles.fontStyle&&(t.styles.fontStyle=s.style.fstyle))}});"function"!==typeof n.createdCell&&(n.createdCell=function(e,t){t=fe.rowoptions[t.row.index+":"+t.column.dataKey];"undefined"!=typeof t&&"undefined"!=typeof t.style&&!0!==t.style.hidden&&(e.styles.halign=t.style.align,"inherit"===n.styles.fillColor&&(e.styles.fillColor=t.style.bcolor),"inherit"===n.styles.textColor&&(e.styles.textColor=t.style.color),"inherit"===n.styles.fontStyle&&(e.styles.fontStyle=t.style.fstyle))});"function"!==typeof n.drawHeaderCell&&(n.drawHeaderCell=function(e,t){var i=fe.columns[t.column.dataKey];return(!0!==i.style.hasOwnProperty("hidden")||!0!==i.style.hidden)&&0<=i.rowIndex?c(e,t,i):!1});"function"!==typeof n.drawCell&&(n.drawCell=function(e,t){var i=fe.rowoptions[t.row.index+":"+t.column.dataKey];if(c(e,t,i))if(fe.doc.rect(e.x,e.y,e.width,e.height,e.styles.fillStyle),"undefined"!=typeof i&&"undefined"!=typeof i.kids&&0<i.kids.length){t=e.height/i.rect.height;if(t>fe.dh||"undefined"==typeof fe.dh)fe.dh=t;fe.dw=e.width/i.rect.width;t=e.textPos.y;p(e,i.kids,fe);e.textPos.y=t;m(e,i.kids,fe)}else m(e,{},fe);return!1});fe.headerrows=[];F=e(this).find("thead").find(M.theadSelector);F.each(function(){t=0;fe.headerrows[j]=[];u(this,"th,td",j,F.length,function(e,i,n){var s=C(e);s.title=b(e,i,n);s.key=t++;s.rowIndex=j;fe.headerrows[j].push(s)});j++});if(0<j)for(var s=j-1;0<=s;)e.each(fe.headerrows[s],function(){var e=this;0<s&&null===this.rect&&(e=fe.headerrows[s-1][this.key]);null!==e&&0<=e.rowIndex&&(!0!==e.style.hasOwnProperty("hidden")||!0!==e.style.hidden)&&fe.columns.push(e)}),s=0<fe.columns.length?-1:s-1;var a=0;I=[];I=i(e(this));e(I).each(function(){var i=[];t=0;u(this,"td,th",j,F.length+I.length,function(n,s,r){if("undefined"===typeof fe.columns[t]){var o={title:"",key:t,style:{hidden:!0}};fe.columns.push(o)}"undefined"!==typeof n&&null!==n?(o=C(n),o.kids=e(n).children()):(o=e.extend(!0,{},fe.rowoptions[a+":"+(t-1)]),o.colspan=-1);fe.rowoptions[a+":"+t++]=o;i.push(b(n,s,r))});i.length&&(fe.rows.push(i),a++);j++});if("function"===typeof fe.onBeforeAutotable)fe.onBeforeAutotable(e(this),fe.columns,fe.rows,n);fe.doc.autoTable(fe.columns,fe.rows,n);if("function"===typeof fe.onAfterAutotable)fe.onAfterAutotable(e(this),n);M.jspdf.autotable.startY=fe.doc.autoTableEndPosY()+n.margin.top});f(fe.doc,"undefined"!=typeof fe.images&&!1===jQuery.isEmptyObject(fe.images));"undefined"!=typeof fe.headerrows&&(fe.headerrows.length=0);"undefined"!=typeof fe.columns&&(fe.columns.length=0);"undefined"!=typeof fe.rows&&(fe.rows.length=0);delete fe.doc;fe.doc=null})}return this}})})(jQuery);(function(e,t){typeof exports==="object"&&typeof module!=="undefined"?module.exports=t():typeof define==="function"&&define.amd?define(t):e.moment=t()})(this,function(){"use strict";var e;function t(){return e.apply(null,arguments)}function i(t){e=t}function n(e){return e instanceof Array||Object.prototype.toString.call(e)==="[object Array]"}function s(e){return e!=null&&Object.prototype.toString.call(e)==="[object Object]"}function r(e){if(Object.getOwnPropertyNames){return Object.getOwnPropertyNames(e).length===0}else{var t;for(t in e){if(e.hasOwnProperty(t)){return false}}return true}}function a(e){return e===void 0}function o(e){return typeof e==="number"||Object.prototype.toString.call(e)==="[object Number]"}function l(e){return e instanceof Date||Object.prototype.toString.call(e)==="[object Date]"}function u(e,t){var i=[],n;for(n=0;n<e.length;++n){i.push(t(e[n],n))}return i}function f(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function c(e,t){for(var i in t){if(f(t,i)){e[i]=t[i]}}if(f(t,"toString")){e.toString=t.toString}if(f(t,"valueOf")){e.valueOf=t.valueOf}return e}function d(e,t,i,n){return Vi(e,t,i,n,true).utc()}function h(){return{empty:false,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:false,invalidMonth:null,invalidFormat:false,userInvalidated:false,iso:false,parsedDateParts:[],meridiem:null,rfc2822:false,weekdayMismatch:false}}function p(e){if(e._pf==null){e._pf=h()}return e._pf}var m;if(Array.prototype.some){m=Array.prototype.some}else{m=function(e){var t=Object(this);var i=t.length>>>0;for(var n=0;n<i;n++){if(n in t&&e.call(this,t[n],n,t)){return true}}return false}}function g(e){if(e._isValid==null){var t=p(e);var i=m.call(t.parsedDateParts,function(e){return e!=null});var n=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&i);if(e._strict){n=n&&t.charsLeftOver===0&&t.unusedTokens.length===0&&t.bigHour===undefined}if(Object.isFrozen==null||!Object.isFrozen(e)){e._isValid=n}else{return n}}return e._isValid}function v(e){var t=d(NaN);if(e!=null){c(p(t),e)}else{p(t).userInvalidated=true}return t}var y=t.momentProperties=[];function b(e,t){var i,n,s;if(!a(t._isAMomentObject)){e._isAMomentObject=t._isAMomentObject}if(!a(t._i)){e._i=t._i}if(!a(t._f)){e._f=t._f}if(!a(t._l)){e._l=t._l}if(!a(t._strict)){e._strict=t._strict}if(!a(t._tzm)){e._tzm=t._tzm}if(!a(t._isUTC)){e._isUTC=t._isUTC}if(!a(t._offset)){e._offset=t._offset}if(!a(t._pf)){e._pf=p(t)}if(!a(t._locale)){e._locale=t._locale}if(y.length>0){for(i=0;i<y.length;i++){n=y[i];s=t[n];if(!a(s)){e[n]=s}}}return e}var w=false;function x(e){b(this,e);this._d=new Date(e._d!=null?e._d.getTime():NaN);if(!this.isValid()){this._d=new Date(NaN)}if(w===false){w=true;t.updateOffset(this);w=false}}function C(e){return e instanceof x||e!=null&&e._isAMomentObject!=null}function T(e){if(e<0){return Math.ceil(e)||0}else{return Math.floor(e)}}function _(e){var t=+e,i=0;if(t!==0&&isFinite(t)){i=T(t)}return i}function k(e,t,i){var n=Math.min(e.length,t.length),s=Math.abs(e.length-t.length),r=0,a;for(a=0;a<n;a++){if(i&&e[a]!==t[a]||!i&&_(e[a])!==_(t[a])){r++}}return r+s}function D(e){if(t.suppressDeprecationWarnings===false&&typeof console!=="undefined"&&console.warn){console.warn("Deprecation warning: "+e)}}function S(e,i){var n=true;return c(function(){if(t.deprecationHandler!=null){t.deprecationHandler(null,e)}if(n){var s=[];var r;for(var a=0;a<arguments.length;a++){r="";if(typeof arguments[a]==="object"){r+="\n["+a+"] ";for(var o in arguments[0]){r+=o+": "+arguments[0][o]+", "}r=r.slice(0,-2)}else{r=arguments[a]}s.push(r)}D(e+"\nArguments: "+Array.prototype.slice.call(s).join("")+"\n"+(new Error).stack);n=false}return i.apply(this,arguments)},i)}var $={};function A(e,i){if(t.deprecationHandler!=null){t.deprecationHandler(e,i)}if(!$[e]){D(i);$[e]=true}}t.suppressDeprecationWarnings=false;t.deprecationHandler=null;function E(e){return e instanceof Function||Object.prototype.toString.call(e)==="[object Function]"}function M(e){var t,i;for(i in e){t=e[i];if(E(t)){this[i]=t}else{this["_"+i]=t}}this._config=e;this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function P(e,t){var i=c({},e),n;for(n in t){if(f(t,n)){if(s(e[n])&&s(t[n])){i[n]={};c(i[n],e[n]);c(i[n],t[n])}else if(t[n]!=null){i[n]=t[n]}else{delete i[n]}}}for(n in e){if(f(e,n)&&!f(t,n)&&s(e[n])){i[n]=c({},i[n])}}return i}function O(e){if(e!=null){this.set(e)}}var F;if(Object.keys){F=Object.keys}else{F=function(e){var t,i=[];for(t in e){if(f(e,t)){i.push(t)}}return i}}var I={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"};function j(e,t,i){var n=this._calendar[e]||this._calendar["sameElse"];return E(n)?n.call(t,i):n}var N={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};function U(e){var t=this._longDateFormat[e],i=this._longDateFormat[e.toUpperCase()];if(t||!i){return t}this._longDateFormat[e]=i.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)});return this._longDateFormat[e]}var L="Invalid date";function R(){return this._invalidDate}var H="%d";var z=/\d{1,2}/;function Y(e){return this._ordinal.replace("%d",e)}var V={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function B(e,t,i,n){var s=this._relativeTime[i];return E(s)?s(e,t,i,n):s.replace(/%d/i,e)}function W(e,t){var i=this._relativeTime[e>0?"future":"past"];return E(i)?i(t):i.replace(/%s/i,t)}var q={};function Z(e,t){var i=e.toLowerCase();q[i]=q[i+"s"]=q[t]=e}function G(e){return typeof e==="string"?q[e]||q[e.toLowerCase()]:undefined}function Q(e){var t={},i,n;for(n in e){if(f(e,n)){i=G(n);if(i){t[i]=e[n]}}}return t}var X={};function K(e,t){X[e]=t}function J(e){var t=[];for(var i in e){t.push({unit:i,priority:X[i]})}t.sort(function(e,t){return e.priority-t.priority});return t}function ee(e,t,i){var n=""+Math.abs(e),s=t-n.length,r=e>=0;return(r?i?"+":"":"-")+Math.pow(10,Math.max(0,s)).toString().substr(1)+n}var te=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;var ie=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;var ne={};var se={};function re(e,t,i,n){var s=n;if(typeof n==="string"){s=function(){return this[n]()}}if(e){se[e]=s}if(t){se[t[0]]=function(){return ee(s.apply(this,arguments),t[1],t[2])}}if(i){se[i]=function(){return this.localeData().ordinal(s.apply(this,arguments),e)}}}function ae(e){if(e.match(/\[[\s\S]/)){return e.replace(/^\[|\]$/g,"")}return e.replace(/\\/g,"")}function oe(e){var t=e.match(te),i,n;for(i=0,n=t.length;i<n;i++){if(se[t[i]]){t[i]=se[t[i]]}else{t[i]=ae(t[i])}}return function(i){var s="",r;for(r=0;r<n;r++){s+=E(t[r])?t[r].call(i,e):t[r]}return s}}function le(e,t){if(!e.isValid()){return e.localeData().invalidDate()}t=ue(t,e.localeData());ne[t]=ne[t]||oe(t);return ne[t](e)}function ue(e,t){var i=5;function n(e){return t.longDateFormat(e)||e}ie.lastIndex=0;while(i>=0&&ie.test(e)){e=e.replace(ie,n);ie.lastIndex=0;i-=1}return e}var fe=/\d/;var ce=/\d\d/;var de=/\d{3}/;var he=/\d{4}/;var pe=/[+-]?\d{6}/;var me=/\d\d?/;var ge=/\d\d\d\d?/;var ve=/\d\d\d\d\d\d?/;var ye=/\d{1,3}/;var be=/\d{1,4}/;var we=/[+-]?\d{1,6}/;var xe=/\d+/;var Ce=/[+-]?\d+/;var Te=/Z|[+-]\d\d:?\d\d/gi;var _e=/Z|[+-]\d\d(?::?\d\d)?/gi;var ke=/[+-]?\d+(\.\d{1,3})?/;var De=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;var Se={};function $e(e,t,i){Se[e]=E(t)?t:function(e,n){return e&&i?i:t}}function Ae(e,t){if(!f(Se,e)){return new RegExp(Ee(e))}return Se[e](t._strict,t._locale)}function Ee(e){return Me(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,i,n,s){return t||i||n||s}))}function Me(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var Pe={};function Oe(e,t){var i,n=t;if(typeof e==="string"){e=[e]}if(o(t)){n=function(e,i){i[t]=_(e)}}for(i=0;i<e.length;i++){Pe[e[i]]=n}}function Fe(e,t){Oe(e,function(e,i,n,s){n._w=n._w||{};t(e,n._w,n,s)})}function Ie(e,t,i){if(t!=null&&f(Pe,e)){Pe[e](t,i._a,i,e)}}var je=0;var Ne=1;var Ue=2;var Le=3;var Re=4;var He=5;var ze=6;var Ye=7;var Ve=8;re("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e});re(0,["YY",2],0,function(){return this.year()%100});re(0,["YYYY",4],0,"year");re(0,["YYYYY",5],0,"year");re(0,["YYYYYY",6,true],0,"year");Z("year","y");K("year",1);$e("Y",Ce);$e("YY",me,ce);$e("YYYY",be,he);$e("YYYYY",we,pe);$e("YYYYYY",we,pe);Oe(["YYYYY","YYYYYY"],je);Oe("YYYY",function(e,i){i[je]=e.length===2?t.parseTwoDigitYear(e):_(e)});Oe("YY",function(e,i){i[je]=t.parseTwoDigitYear(e)});Oe("Y",function(e,t){t[je]=parseInt(e,10)});function Be(e){return We(e)?366:365}function We(e){return e%4===0&&e%100!==0||e%400===0}t.parseTwoDigitYear=function(e){return _(e)+(_(e)>68?1900:2e3)};var qe=Ge("FullYear",true);function Ze(){return We(this.year())}function Ge(e,i){return function(n){if(n!=null){Xe(this,e,n);t.updateOffset(this,i);return this}else{return Qe(this,e)}}}function Qe(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Xe(e,t,i){if(e.isValid()&&!isNaN(i)){if(t==="FullYear"&&We(e.year())&&e.month()===1&&e.date()===29){e._d["set"+(e._isUTC?"UTC":"")+t](i,e.month(),it(i,e.month()))}else{e._d["set"+(e._isUTC?"UTC":"")+t](i)}}}function Ke(e){e=G(e);if(E(this[e])){return this[e]()}return this}function Je(e,t){if(typeof e==="object"){e=Q(e);var i=J(e);for(var n=0;n<i.length;n++){this[i[n].unit](e[i[n].unit])}}else{e=G(e);if(E(this[e])){return this[e](t)}}return this}function et(e,t){return(e%t+t)%t}var tt;if(Array.prototype.indexOf){tt=Array.prototype.indexOf}else{tt=function(e){var t;for(t=0;t<this.length;++t){if(this[t]===e){return t}}return-1}}function it(e,t){if(isNaN(e)||isNaN(t)){return NaN}var i=et(t,12);e+=(t-i)/12;return i===1?We(e)?29:28:31-i%7%2}re("M",["MM",2],"Mo",function(){return this.month()+1});re("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)});re("MMMM",0,0,function(e){return this.localeData().months(this,e)});Z("month","M");K("month",8);$e("M",me);$e("MM",me,ce);$e("MMM",function(e,t){return t.monthsShortRegex(e)});$e("MMMM",function(e,t){return t.monthsRegex(e)});Oe(["M","MM"],function(e,t){t[Ne]=_(e)-1});Oe(["MMM","MMMM"],function(e,t,i,n){var s=i._locale.monthsParse(e,n,i._strict);if(s!=null){t[Ne]=s}else{p(i).invalidMonth=e}});var nt=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;var st="January_February_March_April_May_June_July_August_September_October_November_December".split("_");function rt(e,t){if(!e){return n(this._months)?this._months:this._months["standalone"]}return n(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||nt).test(t)?"format":"standalone"][e.month()]}var at="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function ot(e,t){if(!e){return n(this._monthsShort)?this._monthsShort:this._monthsShort["standalone"]}return n(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[nt.test(t)?"format":"standalone"][e.month()]}function lt(e,t,i){var n,s,r,a=e.toLocaleLowerCase();if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[];for(n=0;n<12;++n){r=d([2e3,n]);this._shortMonthsParse[n]=this.monthsShort(r,"").toLocaleLowerCase();this._longMonthsParse[n]=this.months(r,"").toLocaleLowerCase()}}if(i){if(t==="MMM"){s=tt.call(this._shortMonthsParse,a);return s!==-1?s:null}else{s=tt.call(this._longMonthsParse,a);return s!==-1?s:null}}else{if(t==="MMM"){s=tt.call(this._shortMonthsParse,a);if(s!==-1){return s}s=tt.call(this._longMonthsParse,a);return s!==-1?s:null}else{s=tt.call(this._longMonthsParse,a);if(s!==-1){return s}s=tt.call(this._shortMonthsParse,a);return s!==-1?s:null}}}function ut(e,t,i){var n,s,r;if(this._monthsParseExact){return lt.call(this,e,t,i)}if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[]}for(n=0;n<12;n++){s=d([2e3,n]);if(i&&!this._longMonthsParse[n]){this._longMonthsParse[n]=new RegExp("^"+this.months(s,"").replace(".","")+"$","i");this._shortMonthsParse[n]=new RegExp("^"+this.monthsShort(s,"").replace(".","")+"$","i")}if(!i&&!this._monthsParse[n]){r="^"+this.months(s,"")+"|^"+this.monthsShort(s,"");this._monthsParse[n]=new RegExp(r.replace(".",""),"i")}if(i&&t==="MMMM"&&this._longMonthsParse[n].test(e)){return n}else if(i&&t==="MMM"&&this._shortMonthsParse[n].test(e)){return n}else if(!i&&this._monthsParse[n].test(e)){return n}}}function ft(e,t){var i;if(!e.isValid()){return e}if(typeof t==="string"){if(/^\d+$/.test(t)){t=_(t)}else{t=e.localeData().monthsParse(t);if(!o(t)){return e}}}i=Math.min(e.date(),it(e.year(),t));e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,i);return e}function ct(e){if(e!=null){ft(this,e);t.updateOffset(this,true);return this}else{return Qe(this,"Month")}}function dt(){return it(this.year(),this.month())}var ht=De;function pt(e){if(this._monthsParseExact){if(!f(this,"_monthsRegex")){vt.call(this)}if(e){return this._monthsShortStrictRegex}else{return this._monthsShortRegex}}else{if(!f(this,"_monthsShortRegex")){this._monthsShortRegex=ht}return this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex}}var mt=De;function gt(e){if(this._monthsParseExact){if(!f(this,"_monthsRegex")){vt.call(this)}if(e){return this._monthsStrictRegex}else{return this._monthsRegex}}else{if(!f(this,"_monthsRegex")){this._monthsRegex=mt}return this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex}}function vt(){function e(e,t){return t.length-e.length}var t=[],i=[],n=[],s,r;for(s=0;s<12;s++){r=d([2e3,s]);t.push(this.monthsShort(r,""));i.push(this.months(r,""));n.push(this.months(r,""));n.push(this.monthsShort(r,""))}t.sort(e);i.sort(e);n.sort(e);for(s=0;s<12;s++){t[s]=Me(t[s]);i[s]=Me(i[s])}for(s=0;s<24;s++){n[s]=Me(n[s])}this._monthsRegex=new RegExp("^("+n.join("|")+")","i");this._monthsShortRegex=this._monthsRegex;this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i");this._monthsShortStrictRegex=new RegExp("^("+t.join("|")+")","i")}function yt(e,t,i,n,s,r,a){var o=new Date(e,t,i,n,s,r,a);if(e<100&&e>=0&&isFinite(o.getFullYear())){o.setFullYear(e)}return o}function bt(e){var t=new Date(Date.UTC.apply(null,arguments));if(e<100&&e>=0&&isFinite(t.getUTCFullYear())){t.setUTCFullYear(e)}return t}function wt(e,t,i){var n=7+t-i,s=(7+bt(e,0,n).getUTCDay()-t)%7;return-s+n-1}function xt(e,t,i,n,s){var r=(7+i-n)%7,a=wt(e,n,s),o=1+7*(t-1)+r+a,l,u;if(o<=0){l=e-1;u=Be(l)+o}else if(o>Be(e)){l=e+1;u=o-Be(e)}else{l=e;u=o}return{year:l,dayOfYear:u}}function Ct(e,t,i){var n=wt(e.year(),t,i),s=Math.floor((e.dayOfYear()-n-1)/7)+1,r,a;if(s<1){a=e.year()-1;r=s+Tt(a,t,i)}else if(s>Tt(e.year(),t,i)){r=s-Tt(e.year(),t,i);a=e.year()+1}else{a=e.year();r=s}return{week:r,year:a}}function Tt(e,t,i){var n=wt(e,t,i),s=wt(e+1,t,i);return(Be(e)-n+s)/7}re("w",["ww",2],"wo","week");re("W",["WW",2],"Wo","isoWeek");Z("week","w");Z("isoWeek","W");K("week",5);K("isoWeek",5);$e("w",me);$e("ww",me,ce);$e("W",me);$e("WW",me,ce);Fe(["w","ww","W","WW"],function(e,t,i,n){t[n.substr(0,1)]=_(e)});function _t(e){return Ct(e,this._week.dow,this._week.doy).week}var kt={dow:0,doy:6};function Dt(){return this._week.dow}function St(){return this._week.doy}function $t(e){var t=this.localeData().week(this);return e==null?t:this.add((e-t)*7,"d")}function At(e){var t=Ct(this,1,4).week;return e==null?t:this.add((e-t)*7,"d")}re("d",0,"do","day");re("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)});re("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)});re("dddd",0,0,function(e){return this.localeData().weekdays(this,e)});re("e",0,0,"weekday");re("E",0,0,"isoWeekday");Z("day","d");Z("weekday","e");Z("isoWeekday","E");K("day",11);K("weekday",11);K("isoWeekday",11);$e("d",me);$e("e",me);$e("E",me);$e("dd",function(e,t){return t.weekdaysMinRegex(e)});$e("ddd",function(e,t){return t.weekdaysShortRegex(e)});$e("dddd",function(e,t){return t.weekdaysRegex(e)});Fe(["dd","ddd","dddd"],function(e,t,i,n){var s=i._locale.weekdaysParse(e,n,i._strict);if(s!=null){t.d=s}else{p(i).invalidWeekday=e}});Fe(["d","e","E"],function(e,t,i,n){t[n]=_(e)});function Et(e,t){if(typeof e!=="string"){return e}if(!isNaN(e)){return parseInt(e,10)}e=t.weekdaysParse(e);if(typeof e==="number"){return e}return null}function Mt(e,t){if(typeof e==="string"){return t.weekdaysParse(e)%7||7}return isNaN(e)?null:e}var Pt="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");function Ot(e,t){if(!e){return n(this._weekdays)?this._weekdays:this._weekdays["standalone"]}return n(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]}var Ft="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");function It(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort}var jt="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function Nt(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin}function Ut(e,t,i){var n,s,r,a=e.toLocaleLowerCase();if(!this._weekdaysParse){this._weekdaysParse=[];this._shortWeekdaysParse=[];this._minWeekdaysParse=[];for(n=0;n<7;++n){r=d([2e3,1]).day(n);this._minWeekdaysParse[n]=this.weekdaysMin(r,"").toLocaleLowerCase();this._shortWeekdaysParse[n]=this.weekdaysShort(r,"").toLocaleLowerCase();this._weekdaysParse[n]=this.weekdays(r,"").toLocaleLowerCase()}}if(i){if(t==="dddd"){s=tt.call(this._weekdaysParse,a);return s!==-1?s:null}else if(t==="ddd"){s=tt.call(this._shortWeekdaysParse,a);return s!==-1?s:null}else{s=tt.call(this._minWeekdaysParse,a);return s!==-1?s:null}}else{if(t==="dddd"){s=tt.call(this._weekdaysParse,a);if(s!==-1){return s}s=tt.call(this._shortWeekdaysParse,a);if(s!==-1){return s}s=tt.call(this._minWeekdaysParse,a);return s!==-1?s:null}else if(t==="ddd"){s=tt.call(this._shortWeekdaysParse,a);if(s!==-1){return s}s=tt.call(this._weekdaysParse,a);if(s!==-1){return s}s=tt.call(this._minWeekdaysParse,a);return s!==-1?s:null}else{s=tt.call(this._minWeekdaysParse,a);if(s!==-1){return s}s=tt.call(this._weekdaysParse,a);if(s!==-1){return s}s=tt.call(this._shortWeekdaysParse,a);return s!==-1?s:null}}}function Lt(e,t,i){var n,s,r;if(this._weekdaysParseExact){return Ut.call(this,e,t,i)}if(!this._weekdaysParse){this._weekdaysParse=[];this._minWeekdaysParse=[];this._shortWeekdaysParse=[];this._fullWeekdaysParse=[]}for(n=0;n<7;n++){s=d([2e3,1]).day(n);if(i&&!this._fullWeekdaysParse[n]){this._fullWeekdaysParse[n]=new RegExp("^"+this.weekdays(s,"").replace(".",".?")+"$","i");this._shortWeekdaysParse[n]=new RegExp("^"+this.weekdaysShort(s,"").replace(".",".?")+"$","i");this._minWeekdaysParse[n]=new RegExp("^"+this.weekdaysMin(s,"").replace(".",".?")+"$","i")}if(!this._weekdaysParse[n]){r="^"+this.weekdays(s,"")+"|^"+this.weekdaysShort(s,"")+"|^"+this.weekdaysMin(s,"");this._weekdaysParse[n]=new RegExp(r.replace(".",""),"i")}if(i&&t==="dddd"&&this._fullWeekdaysParse[n].test(e)){return n}else if(i&&t==="ddd"&&this._shortWeekdaysParse[n].test(e)){return n}else if(i&&t==="dd"&&this._minWeekdaysParse[n].test(e)){return n}else if(!i&&this._weekdaysParse[n].test(e)){return n}}}function Rt(e){if(!this.isValid()){return e!=null?this:NaN}var t=this._isUTC?this._d.getUTCDay():this._d.getDay();if(e!=null){e=Et(e,this.localeData());return this.add(e-t,"d")}else{return t}}function Ht(e){if(!this.isValid()){return e!=null?this:NaN}var t=(this.day()+7-this.localeData()._week.dow)%7;return e==null?t:this.add(e-t,"d")}function zt(e){if(!this.isValid()){return e!=null?this:NaN}if(e!=null){var t=Mt(e,this.localeData());return this.day(this.day()%7?t:t-7)}else{return this.day()||7}}var Yt=De;function Vt(e){if(this._weekdaysParseExact){if(!f(this,"_weekdaysRegex")){Gt.call(this)}if(e){return this._weekdaysStrictRegex}else{return this._weekdaysRegex}}else{if(!f(this,"_weekdaysRegex")){this._weekdaysRegex=Yt}return this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex}}var Bt=De;function Wt(e){if(this._weekdaysParseExact){if(!f(this,"_weekdaysRegex")){Gt.call(this)}if(e){return this._weekdaysShortStrictRegex}else{return this._weekdaysShortRegex}}else{if(!f(this,"_weekdaysShortRegex")){this._weekdaysShortRegex=Bt}return this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex}}var qt=De;function Zt(e){if(this._weekdaysParseExact){if(!f(this,"_weekdaysRegex")){Gt.call(this)}if(e){return this._weekdaysMinStrictRegex}else{return this._weekdaysMinRegex}}else{if(!f(this,"_weekdaysMinRegex")){this._weekdaysMinRegex=qt}return this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex}}function Gt(){function e(e,t){return t.length-e.length}var t=[],i=[],n=[],s=[],r,a,o,l,u;for(r=0;r<7;r++){a=d([2e3,1]).day(r);o=this.weekdaysMin(a,"");l=this.weekdaysShort(a,"");u=this.weekdays(a,"");t.push(o);i.push(l);n.push(u);s.push(o);s.push(l);s.push(u)}t.sort(e);i.sort(e);n.sort(e);s.sort(e);for(r=0;r<7;r++){i[r]=Me(i[r]);n[r]=Me(n[r]);s[r]=Me(s[r])}this._weekdaysRegex=new RegExp("^("+s.join("|")+")","i");this._weekdaysShortRegex=this._weekdaysRegex;this._weekdaysMinRegex=this._weekdaysRegex;this._weekdaysStrictRegex=new RegExp("^("+n.join("|")+")","i");this._weekdaysShortStrictRegex=new RegExp("^("+i.join("|")+")","i");this._weekdaysMinStrictRegex=new RegExp("^("+t.join("|")+")","i")}function Qt(){return this.hours()%12||12}function Xt(){return this.hours()||24}re("H",["HH",2],0,"hour");re("h",["hh",2],0,Qt);re("k",["kk",2],0,Xt);re("hmm",0,0,function(){return""+Qt.apply(this)+ee(this.minutes(),2)});re("hmmss",0,0,function(){return""+Qt.apply(this)+ee(this.minutes(),2)+ee(this.seconds(),2)});re("Hmm",0,0,function(){return""+this.hours()+ee(this.minutes(),2)});re("Hmmss",0,0,function(){return""+this.hours()+ee(this.minutes(),2)+ee(this.seconds(),2)});function Kt(e,t){re(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}Kt("a",true);Kt("A",false);Z("hour","h");K("hour",13);function Jt(e,t){return t._meridiemParse}$e("a",Jt);$e("A",Jt);$e("H",me);$e("h",me);$e("k",me);$e("HH",me,ce);$e("hh",me,ce);$e("kk",me,ce);$e("hmm",ge);$e("hmmss",ve);$e("Hmm",ge);$e("Hmmss",ve);Oe(["H","HH"],Le);Oe(["k","kk"],function(e,t,i){var n=_(e);t[Le]=n===24?0:n});Oe(["a","A"],function(e,t,i){i._isPm=i._locale.isPM(e);i._meridiem=e});Oe(["h","hh"],function(e,t,i){t[Le]=_(e);p(i).bigHour=true});Oe("hmm",function(e,t,i){var n=e.length-2;t[Le]=_(e.substr(0,n));t[Re]=_(e.substr(n));p(i).bigHour=true});Oe("hmmss",function(e,t,i){var n=e.length-4;var s=e.length-2;t[Le]=_(e.substr(0,n));t[Re]=_(e.substr(n,2));t[He]=_(e.substr(s));p(i).bigHour=true});Oe("Hmm",function(e,t,i){var n=e.length-2;t[Le]=_(e.substr(0,n));t[Re]=_(e.substr(n))});Oe("Hmmss",function(e,t,i){var n=e.length-4;var s=e.length-2;t[Le]=_(e.substr(0,n));t[Re]=_(e.substr(n,2));t[He]=_(e.substr(s))});function ei(e){return(e+"").toLowerCase().charAt(0)==="p"}var ti=/[ap]\.?m?\.?/i;function ii(e,t,i){if(e>11){return i?"pm":"PM"}else{return i?"am":"AM"}}var ni=Ge("Hours",true);var si={calendar:I,longDateFormat:N,invalidDate:L,ordinal:H,dayOfMonthOrdinalParse:z,relativeTime:V,months:st,monthsShort:at,week:kt,weekdays:Pt,weekdaysMin:jt,weekdaysShort:Ft,meridiemParse:ti};var ri={};var ai={};var oi;function li(e){return e?e.toLowerCase().replace("_","-"):e}function ui(e){var t=0,i,n,s,r;while(t<e.length){r=li(e[t]).split("-");i=r.length;n=li(e[t+1]);n=n?n.split("-"):null;while(i>0){s=fi(r.slice(0,i).join("-"));if(s){return s}if(n&&n.length>=i&&k(r,n,true)>=i-1){break}i--}t++}return null}function fi(e){var t=null;if(!ri[e]&&typeof module!=="undefined"&&module&&module.exports){try{t=oi._abbr;var i=require;i("./locale/"+e);ci(t)}catch(e){}}return ri[e]}function ci(e,t){var i;if(e){if(a(t)){i=pi(e)}else{i=di(e,t)}if(i){oi=i}}return oi._abbr}function di(e,t){if(t!==null){var i=si;t.abbr=e;if(ri[e]!=null){A("defineLocaleOverride","use moment.updateLocale(localeName, config) to change "+"an existing locale. moment.defineLocale(localeName, "+"config) should only be used for creating a new locale "+"See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");i=ri[e]._config}else if(t.parentLocale!=null){if(ri[t.parentLocale]!=null){i=ri[t.parentLocale]._config}else{if(!ai[t.parentLocale]){ai[t.parentLocale]=[]}ai[t.parentLocale].push({name:e,config:t});return null}}ri[e]=new O(P(i,t));if(ai[e]){ai[e].forEach(function(e){di(e.name,e.config)})}ci(e);return ri[e]}else{delete ri[e];return null}}function hi(e,t){if(t!=null){var i,n,s=si;n=fi(e);if(n!=null){s=n._config}t=P(s,t);i=new O(t);i.parentLocale=ri[e];ri[e]=i;ci(e)}else{if(ri[e]!=null){if(ri[e].parentLocale!=null){ri[e]=ri[e].parentLocale}else if(ri[e]!=null){delete ri[e]}}}return ri[e]}function pi(e){var t;if(e&&e._locale&&e._locale._abbr){e=e._locale._abbr}if(!e){return oi}if(!n(e)){t=fi(e);if(t){return t}e=[e]}return ui(e)}function mi(){return F(ri)}function gi(e){var t;var i=e._a;if(i&&p(e).overflow===-2){t=i[Ne]<0||i[Ne]>11?Ne:i[Ue]<1||i[Ue]>it(i[je],i[Ne])?Ue:i[Le]<0||i[Le]>24||i[Le]===24&&(i[Re]!==0||i[He]!==0||i[ze]!==0)?Le:i[Re]<0||i[Re]>59?Re:i[He]<0||i[He]>59?He:i[ze]<0||i[ze]>999?ze:-1;if(p(e)._overflowDayOfYear&&(t<je||t>Ue)){t=Ue}if(p(e)._overflowWeeks&&t===-1){t=Ye}if(p(e)._overflowWeekday&&t===-1){t=Ve}p(e).overflow=t}return e}function vi(e,t,i){if(e!=null){return e}if(t!=null){return t}return i}function yi(e){var i=new Date(t.now());if(e._useUTC){return[i.getUTCFullYear(),i.getUTCMonth(),i.getUTCDate()]}return[i.getFullYear(),i.getMonth(),i.getDate()]}function bi(e){var t,i,n=[],s,r,a;if(e._d){return}s=yi(e);if(e._w&&e._a[Ue]==null&&e._a[Ne]==null){wi(e)}if(e._dayOfYear!=null){a=vi(e._a[je],s[je]);if(e._dayOfYear>Be(a)||e._dayOfYear===0){p(e)._overflowDayOfYear=true}i=bt(a,0,e._dayOfYear);e._a[Ne]=i.getUTCMonth();e._a[Ue]=i.getUTCDate()}for(t=0;t<3&&e._a[t]==null;++t){e._a[t]=n[t]=s[t]}for(;t<7;t++){e._a[t]=n[t]=e._a[t]==null?t===2?1:0:e._a[t]}if(e._a[Le]===24&&e._a[Re]===0&&e._a[He]===0&&e._a[ze]===0){e._nextDay=true;e._a[Le]=0}e._d=(e._useUTC?bt:yt).apply(null,n);r=e._useUTC?e._d.getUTCDay():e._d.getDay();if(e._tzm!=null){e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm)}if(e._nextDay){e._a[Le]=24}if(e._w&&typeof e._w.d!=="undefined"&&e._w.d!==r){p(e).weekdayMismatch=true}}function wi(e){var t,i,n,s,r,a,o,l;t=e._w;if(t.GG!=null||t.W!=null||t.E!=null){r=1;a=4;i=vi(t.GG,e._a[je],Ct(Bi(),1,4).year);n=vi(t.W,1);s=vi(t.E,1);if(s<1||s>7){l=true}}else{r=e._locale._week.dow;a=e._locale._week.doy;var u=Ct(Bi(),r,a);i=vi(t.gg,e._a[je],u.year);n=vi(t.w,u.week);if(t.d!=null){s=t.d;if(s<0||s>6){l=true}}else if(t.e!=null){s=t.e+r;if(t.e<0||t.e>6){l=true}}else{s=r}}if(n<1||n>Tt(i,r,a)){p(e)._overflowWeeks=true}else if(l!=null){p(e)._overflowWeekday=true}else{o=xt(i,n,s,r,a);e._a[je]=o.year;e._dayOfYear=o.dayOfYear}}var xi=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;var Ci=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;var Ti=/Z|[+-]\d\d(?::?\d\d)?/;var _i=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,false],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,false],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,false],["YYYYDDD",/\d{7}/]];var ki=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]];var Di=/^\/?Date\((\-?\d+)/i;function Si(e){var t,i,n=e._i,s=xi.exec(n)||Ci.exec(n),r,a,o,l;if(s){p(e).iso=true;for(t=0,i=_i.length;t<i;t++){if(_i[t][1].exec(s[1])){a=_i[t][0];r=_i[t][2]!==false;break}}if(a==null){e._isValid=false;return}if(s[3]){for(t=0,i=ki.length;t<i;t++){if(ki[t][1].exec(s[3])){o=(s[2]||" ")+ki[t][0];break}}if(o==null){e._isValid=false;return}}if(!r&&o!=null){e._isValid=false;return}if(s[4]){if(Ti.exec(s[4])){l="Z"}else{e._isValid=false;return}}e._f=a+(o||"")+(l||"");Ni(e)}else{e._isValid=false}}var $i=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function Ai(e,t,i,n,s,r){var a=[Ei(e),at.indexOf(t),parseInt(i,10),parseInt(n,10),parseInt(s,10)];if(r){a.push(parseInt(r,10))}return a}function Ei(e){var t=parseInt(e,10);if(t<=49){return 2e3+t}else if(t<=999){return 1900+t}return t}function Mi(e){return e.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}function Pi(e,t,i){if(e){var n=Ft.indexOf(e),s=new Date(t[0],t[1],t[2]).getDay();if(n!==s){p(i).weekdayMismatch=true;i._isValid=false;return false}}return true}var Oi={UT:0,GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};function Fi(e,t,i){if(e){return Oi[e]}else if(t){return 0}else{var n=parseInt(i,10);var s=n%100,r=(n-s)/100;return r*60+s}}function Ii(e){var t=$i.exec(Mi(e._i));if(t){var i=Ai(t[4],t[3],t[2],t[5],t[6],t[7]);if(!Pi(t[1],i,e)){return}e._a=i;e._tzm=Fi(t[8],t[9],t[10]);e._d=bt.apply(null,e._a);e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm);p(e).rfc2822=true}else{e._isValid=false}}function ji(e){var i=Di.exec(e._i);if(i!==null){e._d=new Date(+i[1]);return}Si(e);if(e._isValid===false){delete e._isValid}else{return}Ii(e);if(e._isValid===false){delete e._isValid}else{return}t.createFromInputFallback(e)}t.createFromInputFallback=S("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), "+"which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are "+"discouraged and will be removed in an upcoming major release. Please refer to "+"http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))});t.ISO_8601=function(){};t.RFC_2822=function(){};function Ni(e){if(e._f===t.ISO_8601){Si(e);return}if(e._f===t.RFC_2822){Ii(e);return}e._a=[];p(e).empty=true;var i=""+e._i,n,s,r,a,o,l=i.length,u=0;r=ue(e._f,e._locale).match(te)||[];for(n=0;n<r.length;n++){a=r[n];s=(i.match(Ae(a,e))||[])[0];if(s){o=i.substr(0,i.indexOf(s));if(o.length>0){p(e).unusedInput.push(o)}i=i.slice(i.indexOf(s)+s.length);u+=s.length}if(se[a]){if(s){p(e).empty=false}else{p(e).unusedTokens.push(a)}Ie(a,s,e)}else if(e._strict&&!s){p(e).unusedTokens.push(a)}}p(e).charsLeftOver=l-u;if(i.length>0){p(e).unusedInput.push(i)}if(e._a[Le]<=12&&p(e).bigHour===true&&e._a[Le]>0){p(e).bigHour=undefined}p(e).parsedDateParts=e._a.slice(0);p(e).meridiem=e._meridiem;e._a[Le]=Ui(e._locale,e._a[Le],e._meridiem);bi(e);gi(e)}function Ui(e,t,i){var n;if(i==null){return t}if(e.meridiemHour!=null){return e.meridiemHour(t,i)}else if(e.isPM!=null){n=e.isPM(i);if(n&&t<12){t+=12}if(!n&&t===12){t=0}return t}else{return t}}function Li(e){var t,i,n,s,r;if(e._f.length===0){p(e).invalidFormat=true;e._d=new Date(NaN);return}for(s=0;s<e._f.length;s++){r=0;t=b({},e);if(e._useUTC!=null){t._useUTC=e._useUTC}t._f=e._f[s];Ni(t);if(!g(t)){continue}r+=p(t).charsLeftOver;r+=p(t).unusedTokens.length*10;p(t).score=r;if(n==null||r<n){n=r;i=t}}c(e,i||t)}function Ri(e){if(e._d){return}var t=Q(e._i);e._a=u([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)});bi(e)}function Hi(e){var t=new x(gi(zi(e)));if(t._nextDay){t.add(1,"d");t._nextDay=undefined}return t}function zi(e){var t=e._i,i=e._f;e._locale=e._locale||pi(e._l);if(t===null||i===undefined&&t===""){return v({nullInput:true})}if(typeof t==="string"){e._i=t=e._locale.preparse(t)}if(C(t)){return new x(gi(t))}else if(l(t)){e._d=t}else if(n(i)){Li(e)}else if(i){Ni(e)}else{Yi(e)}if(!g(e)){e._d=null}return e}function Yi(e){var i=e._i;if(a(i)){e._d=new Date(t.now())}else if(l(i)){e._d=new Date(i.valueOf())}else if(typeof i==="string"){ji(e)}else if(n(i)){e._a=u(i.slice(0),function(e){return parseInt(e,10)});bi(e)}else if(s(i)){Ri(e)}else if(o(i)){e._d=new Date(i)}else{t.createFromInputFallback(e)}}function Vi(e,t,i,a,o){var l={};if(i===true||i===false){a=i;i=undefined}if(s(e)&&r(e)||n(e)&&e.length===0){e=undefined}l._isAMomentObject=true;l._useUTC=l._isUTC=o;l._l=i;l._i=e;l._f=t;l._strict=a;return Hi(l)}function Bi(e,t,i,n){return Vi(e,t,i,n,false)}var Wi=S("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Bi.apply(null,arguments);if(this.isValid()&&e.isValid()){return e<this?this:e}else{return v()}});var qi=S("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Bi.apply(null,arguments);if(this.isValid()&&e.isValid()){return e>this?this:e}else{return v()}});function Zi(e,t){var i,s;if(t.length===1&&n(t[0])){t=t[0]}if(!t.length){return Bi()}i=t[0];for(s=1;s<t.length;++s){if(!t[s].isValid()||t[s][e](i)){i=t[s]}}return i}function Gi(){var e=[].slice.call(arguments,0);return Zi("isBefore",e)}function Qi(){var e=[].slice.call(arguments,0);return Zi("isAfter",e)}var Xi=function(){return Date.now?Date.now():+new Date};var Ki=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ji(e){for(var t in e){if(!(tt.call(Ki,t)!==-1&&(e[t]==null||!isNaN(e[t])))){return false}}var i=false;for(var n=0;n<Ki.length;++n){if(e[Ki[n]]){if(i){return false}if(parseFloat(e[Ki[n]])!==_(e[Ki[n]])){i=true}}}return true}function en(){return this._isValid}function tn(){return _n(NaN)}function nn(e){var t=Q(e),i=t.year||0,n=t.quarter||0,s=t.month||0,r=t.week||0,a=t.day||0,o=t.hour||0,l=t.minute||0,u=t.second||0,f=t.millisecond||0;this._isValid=Ji(t);this._milliseconds=+f+u*1e3+l*6e4+o*1e3*60*60;this._days=+a+r*7;this._months=+s+n*3+i*12;this._data={};this._locale=pi();this._bubble()}function sn(e){return e instanceof nn}function rn(e){if(e<0){return Math.round(-1*e)*-1}else{return Math.round(e)}}function an(e,t){re(e,0,0,function(){var e=this.utcOffset();var i="+";if(e<0){e=-e;i="-"}return i+ee(~~(e/60),2)+t+ee(~~e%60,2)})}an("Z",":");an("ZZ","");$e("Z",_e);$e("ZZ",_e);Oe(["Z","ZZ"],function(e,t,i){i._useUTC=true;i._tzm=ln(_e,e)});var on=/([\+\-]|\d\d)/gi;function ln(e,t){var i=(t||"").match(e);if(i===null){return null}var n=i[i.length-1]||[];var s=(n+"").match(on)||["-",0,0];var r=+(s[1]*60)+_(s[2]);return r===0?0:s[0]==="+"?r:-r}function un(e,i){var n,s;if(i._isUTC){n=i.clone();s=(C(e)||l(e)?e.valueOf():Bi(e).valueOf())-n.valueOf();n._d.setTime(n._d.valueOf()+s);t.updateOffset(n,false);return n}else{return Bi(e).local()}}function fn(e){return-Math.round(e._d.getTimezoneOffset()/15)*15}t.updateOffset=function(){};function cn(e,i,n){var s=this._offset||0,r;if(!this.isValid()){return e!=null?this:NaN}if(e!=null){if(typeof e==="string"){e=ln(_e,e);if(e===null){return this}}else if(Math.abs(e)<16&&!n){e=e*60}if(!this._isUTC&&i){r=fn(this)}this._offset=e;this._isUTC=true;if(r!=null){this.add(r,"m")}if(s!==e){if(!i||this._changeInProgress){An(this,_n(e-s,"m"),1,false)}else if(!this._changeInProgress){this._changeInProgress=true;t.updateOffset(this,true);this._changeInProgress=null}}return this}else{return this._isUTC?s:fn(this)}}function dn(e,t){if(e!=null){if(typeof e!=="string"){e=-e}this.utcOffset(e,t);return this}else{return-this.utcOffset()}}function hn(e){return this.utcOffset(0,e)}function pn(e){if(this._isUTC){this.utcOffset(0,e);this._isUTC=false;if(e){this.subtract(fn(this),"m")}}return this}function mn(){if(this._tzm!=null){this.utcOffset(this._tzm,false,true)}else if(typeof this._i==="string"){var e=ln(Te,this._i);if(e!=null){this.utcOffset(e)}else{this.utcOffset(0,true)}}return this}function gn(e){if(!this.isValid()){return false}e=e?Bi(e).utcOffset():0;return(this.utcOffset()-e)%60===0}function vn(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function yn(){if(!a(this._isDSTShifted)){return this._isDSTShifted}var e={};b(e,this);e=zi(e);if(e._a){var t=e._isUTC?d(e._a):Bi(e._a);this._isDSTShifted=this.isValid()&&k(e._a,t.toArray())>0}else{this._isDSTShifted=false}return this._isDSTShifted}function bn(){return this.isValid()?!this._isUTC:false}function wn(){return this.isValid()?this._isUTC:false}function xn(){return this.isValid()?this._isUTC&&this._offset===0:false}var Cn=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;var Tn=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function _n(e,t){var i=e,n=null,s,r,a;if(sn(e)){i={ms:e._milliseconds,d:e._days,M:e._months}}else if(o(e)){i={};if(t){i[t]=e}else{i.milliseconds=e}}else if(!!(n=Cn.exec(e))){s=n[1]==="-"?-1:1;i={y:0,d:_(n[Ue])*s,h:_(n[Le])*s,m:_(n[Re])*s,s:_(n[He])*s,ms:_(rn(n[ze]*1e3))*s}}else if(!!(n=Tn.exec(e))){s=n[1]==="-"?-1:n[1]==="+"?1:1;i={y:kn(n[2],s),M:kn(n[3],s),w:kn(n[4],s),d:kn(n[5],s),h:kn(n[6],s),m:kn(n[7],s),s:kn(n[8],s)}}else if(i==null){i={}}else if(typeof i==="object"&&("from"in i||"to"in i)){a=Sn(Bi(i.from),Bi(i.to));i={};i.ms=a.milliseconds;i.M=a.months}r=new nn(i);if(sn(e)&&f(e,"_locale")){r._locale=e._locale}return r}_n.fn=nn.prototype;_n.invalid=tn;function kn(e,t){var i=e&&parseFloat(e.replace(",","."));return(isNaN(i)?0:i)*t}function Dn(e,t){var i={milliseconds:0,months:0};i.months=t.month()-e.month()+(t.year()-e.year())*12;if(e.clone().add(i.months,"M").isAfter(t)){--i.months}i.milliseconds=+t-+e.clone().add(i.months,"M");return i}function Sn(e,t){var i;if(!(e.isValid()&&t.isValid())){return{milliseconds:0,months:0}}t=un(t,e);if(e.isBefore(t)){i=Dn(e,t)}else{i=Dn(t,e);i.milliseconds=-i.milliseconds;i.months=-i.months}return i}function $n(e,t){return function(i,n){var s,r;if(n!==null&&!isNaN(+n)){A(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). "+"See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");r=i;i=n;n=r}i=typeof i==="string"?+i:i;s=_n(i,n);An(this,s,e);return this}}function An(e,i,n,s){var r=i._milliseconds,a=rn(i._days),o=rn(i._months);if(!e.isValid()){return}s=s==null?true:s;if(o){ft(e,Qe(e,"Month")+o*n)}if(a){Xe(e,"Date",Qe(e,"Date")+a*n)}if(r){e._d.setTime(e._d.valueOf()+r*n)}if(s){t.updateOffset(e,a||o)}}var En=$n(1,"add");var Mn=$n(-1,"subtract");function Pn(e,t){var i=e.diff(t,"days",true);return i<-6?"sameElse":i<-1?"lastWeek":i<0?"lastDay":i<1?"sameDay":i<2?"nextDay":i<7?"nextWeek":"sameElse"}function On(e,i){var n=e||Bi(),s=un(n,this).startOf("day"),r=t.calendarFormat(this,s)||"sameElse";var a=i&&(E(i[r])?i[r].call(this,n):i[r]);return this.format(a||this.localeData().calendar(r,this,Bi(n)))}function Fn(){return new x(this)}function In(e,t){var i=C(e)?e:Bi(e);if(!(this.isValid()&&i.isValid())){return false}t=G(!a(t)?t:"millisecond");if(t==="millisecond"){return this.valueOf()>i.valueOf()}else{return i.valueOf()<this.clone().startOf(t).valueOf()}}function jn(e,t){var i=C(e)?e:Bi(e);if(!(this.isValid()&&i.isValid())){return false}t=G(!a(t)?t:"millisecond");if(t==="millisecond"){return this.valueOf()<i.valueOf()}else{return this.clone().endOf(t).valueOf()<i.valueOf()}}function Nn(e,t,i,n){n=n||"()";return(n[0]==="("?this.isAfter(e,i):!this.isBefore(e,i))&&(n[1]===")"?this.isBefore(t,i):!this.isAfter(t,i))}function Un(e,t){var i=C(e)?e:Bi(e),n;if(!(this.isValid()&&i.isValid())){return false}t=G(t||"millisecond");if(t==="millisecond"){return this.valueOf()===i.valueOf()}else{n=i.valueOf();return this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()}}function Ln(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function Rn(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function Hn(e,t,i){var n,s,r,a;if(!this.isValid()){return NaN}n=un(e,this);if(!n.isValid()){return NaN}s=(n.utcOffset()-this.utcOffset())*6e4;t=G(t);switch(t){case"year":a=zn(this,n)/12;break;case"month":a=zn(this,n);break;case"quarter":a=zn(this,n)/3;break;case"second":a=(this-n)/1e3;break;case"minute":a=(this-n)/6e4;break;case"hour":a=(this-n)/36e5;break;case"day":a=(this-n-s)/864e5;break;case"week":a=(this-n-s)/6048e5;break;default:a=this-n}return i?a:T(a)}function zn(e,t){var i=(t.year()-e.year())*12+(t.month()-e.month()),n=e.clone().add(i,"months"),s,r;if(t-n<0){s=e.clone().add(i-1,"months");r=(t-n)/(n-s)}else{s=e.clone().add(i+1,"months");r=(t-n)/(s-n)}return-(i+r)||0}t.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";t.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";function Yn(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function Vn(e){if(!this.isValid()){return null}var t=e!==true;var i=t?this.clone().utc():this;if(i.year()<0||i.year()>9999){return le(i,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ")}if(E(Date.prototype.toISOString)){if(t){return this.toDate().toISOString()}else{return new Date(this._d.valueOf()).toISOString().replace("Z",le(i,"Z"))}}return le(i,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")}function Bn(){if(!this.isValid()){return"moment.invalid(/* "+this._i+" */)"}var e="moment";var t="";if(!this.isLocal()){e=this.utcOffset()===0?"moment.utc":"moment.parseZone";t="Z"}var i="["+e+'("]';var n=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY";var s="-MM-DD[T]HH:mm:ss.SSS";var r=t+'[")]';return this.format(i+n+s+r)}function Wn(e){if(!e){e=this.isUtc()?t.defaultFormatUtc:t.defaultFormat}var i=le(this,e);return this.localeData().postformat(i)}function qn(e,t){if(this.isValid()&&(C(e)&&e.isValid()||Bi(e).isValid())){return _n({to:this,from:e}).locale(this.locale()).humanize(!t)}else{return this.localeData().invalidDate()}}function Zn(e){return this.from(Bi(),e)}function Gn(e,t){if(this.isValid()&&(C(e)&&e.isValid()||Bi(e).isValid())){return _n({from:this,to:e}).locale(this.locale()).humanize(!t)}else{return this.localeData().invalidDate()}}function Qn(e){return this.to(Bi(),e)}function Xn(e){var t;if(e===undefined){return this._locale._abbr}else{t=pi(e);if(t!=null){this._locale=t}return this}}var Kn=S("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){if(e===undefined){return this.localeData()}else{return this.locale(e)}});function Jn(){return this._locale}function es(e){e=G(e);switch(e){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}if(e==="week"){this.weekday(0)}if(e==="isoWeek"){this.isoWeekday(1)}if(e==="quarter"){this.month(Math.floor(this.month()/3)*3)}return this}function ts(e){e=G(e);if(e===undefined||e==="millisecond"){return this}if(e==="date"){e="day"}return this.startOf(e).add(1,e==="isoWeek"?"week":e).subtract(1,"ms")}function is(){return this._d.valueOf()-(this._offset||0)*6e4}function ns(){return Math.floor(this.valueOf()/1e3)}function ss(){return new Date(this.valueOf())}function rs(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function as(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function os(){return this.isValid()?this.toISOString():null}function ls(){return g(this)}function us(){return c({},p(this))}function fs(){return p(this).overflow}function cs(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}re(0,["gg",2],0,function(){return this.weekYear()%100});re(0,["GG",2],0,function(){return this.isoWeekYear()%100});function ds(e,t){re(0,[e,e.length],0,t)}ds("gggg","weekYear");ds("ggggg","weekYear");ds("GGGG","isoWeekYear");ds("GGGGG","isoWeekYear");Z("weekYear","gg");Z("isoWeekYear","GG");K("weekYear",1);K("isoWeekYear",1);$e("G",Ce);$e("g",Ce);$e("GG",me,ce);$e("gg",me,ce);$e("GGGG",be,he);$e("gggg",be,he);$e("GGGGG",we,pe);$e("ggggg",we,pe);Fe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,i,n){t[n.substr(0,2)]=_(e)});Fe(["gg","GG"],function(e,i,n,s){i[s]=t.parseTwoDigitYear(e)});function hs(e){return vs.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function ps(e){return vs.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function ms(){return Tt(this.year(),1,4)}function gs(){var e=this.localeData()._week;return Tt(this.year(),e.dow,e.doy)}function vs(e,t,i,n,s){var r;if(e==null){return Ct(this,n,s).year}else{r=Tt(e,n,s);if(t>r){t=r}return ys.call(this,e,t,i,n,s)}}function ys(e,t,i,n,s){var r=xt(e,t,i,n,s),a=bt(r.year,0,r.dayOfYear);this.year(a.getUTCFullYear());this.month(a.getUTCMonth());this.date(a.getUTCDate());return this}re("Q",0,"Qo","quarter");Z("quarter","Q");K("quarter",7);$e("Q",fe);Oe("Q",function(e,t){t[Ne]=(_(e)-1)*3});function bs(e){return e==null?Math.ceil((this.month()+1)/3):this.month((e-1)*3+this.month()%3)}re("D",["DD",2],"Do","date");Z("date","D");K("date",9);$e("D",me);$e("DD",me,ce);$e("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient});Oe(["D","DD"],Ue);Oe("Do",function(e,t){t[Ue]=_(e.match(me)[0])});var ws=Ge("Date",true);re("DDD",["DDDD",3],"DDDo","dayOfYear");Z("dayOfYear","DDD");K("dayOfYear",4);$e("DDD",ye);$e("DDDD",de);Oe(["DDD","DDDD"],function(e,t,i){i._dayOfYear=_(e)});function xs(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return e==null?t:this.add(e-t,"d")}re("m",["mm",2],0,"minute");Z("minute","m");K("minute",14);$e("m",me);$e("mm",me,ce);Oe(["m","mm"],Re);var Cs=Ge("Minutes",false);re("s",["ss",2],0,"second");Z("second","s");K("second",15);$e("s",me);$e("ss",me,ce);Oe(["s","ss"],He);var Ts=Ge("Seconds",false);re("S",0,0,function(){return~~(this.millisecond()/100)});re(0,["SS",2],0,function(){return~~(this.millisecond()/10)});re(0,["SSS",3],0,"millisecond");re(0,["SSSS",4],0,function(){return this.millisecond()*10});re(0,["SSSSS",5],0,function(){return this.millisecond()*100});re(0,["SSSSSS",6],0,function(){return this.millisecond()*1e3});re(0,["SSSSSSS",7],0,function(){return this.millisecond()*1e4});re(0,["SSSSSSSS",8],0,function(){return this.millisecond()*1e5});re(0,["SSSSSSSSS",9],0,function(){return this.millisecond()*1e6});Z("millisecond","ms");K("millisecond",16);$e("S",ye,fe);$e("SS",ye,ce);$e("SSS",ye,de);var _s;for(_s="SSSS";_s.length<=9;_s+="S"){$e(_s,xe)}function ks(e,t){t[ze]=_(("0."+e)*1e3)}for(_s="S";_s.length<=9;_s+="S"){Oe(_s,ks)}var Ds=Ge("Milliseconds",false);re("z",0,0,"zoneAbbr");re("zz",0,0,"zoneName");function Ss(){return this._isUTC?"UTC":""}function $s(){return this._isUTC?"Coordinated Universal Time":""}var As=x.prototype;As.add=En;As.calendar=On;As.clone=Fn;As.diff=Hn;As.endOf=ts;As.format=Wn;As.from=qn;As.fromNow=Zn;As.to=Gn;As.toNow=Qn;As.get=Ke;As.invalidAt=fs;As.isAfter=In;As.isBefore=jn;As.isBetween=Nn;As.isSame=Un;As.isSameOrAfter=Ln;As.isSameOrBefore=Rn;As.isValid=ls;As.lang=Kn;As.locale=Xn;As.localeData=Jn;As.max=qi;As.min=Wi;As.parsingFlags=us;As.set=Je;As.startOf=es;As.subtract=Mn;As.toArray=rs;As.toObject=as;As.toDate=ss;As.toISOString=Vn;As.inspect=Bn;As.toJSON=os;As.toString=Yn;As.unix=ns;As.valueOf=is;As.creationData=cs;As.year=qe;As.isLeapYear=Ze;As.weekYear=hs;As.isoWeekYear=ps;As.quarter=As.quarters=bs;As.month=ct;As.daysInMonth=dt;As.week=As.weeks=$t;As.isoWeek=As.isoWeeks=At;As.weeksInYear=gs;As.isoWeeksInYear=ms;As.date=ws;As.day=As.days=Rt;As.weekday=Ht;As.isoWeekday=zt;As.dayOfYear=xs;As.hour=As.hours=ni;As.minute=As.minutes=Cs;As.second=As.seconds=Ts;As.millisecond=As.milliseconds=Ds;As.utcOffset=cn;As.utc=hn;As.local=pn;As.parseZone=mn;As.hasAlignedHourOffset=gn;As.isDST=vn;As.isLocal=bn;As.isUtcOffset=wn;As.isUtc=xn;As.isUTC=xn;As.zoneAbbr=Ss;As.zoneName=$s;As.dates=S("dates accessor is deprecated. Use date instead.",ws);As.months=S("months accessor is deprecated. Use month instead",ct);As.years=S("years accessor is deprecated. Use year instead",qe);As.zone=S("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",dn);As.isDSTShifted=S("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",yn);function Es(e){return Bi(e*1e3)}function Ms(){return Bi.apply(null,arguments).parseZone()}function Ps(e){return e}var Os=O.prototype;Os.calendar=j;Os.longDateFormat=U;Os.invalidDate=R;Os.ordinal=Y;Os.preparse=Ps;Os.postformat=Ps;Os.relativeTime=B;Os.pastFuture=W;Os.set=M;Os.months=rt;Os.monthsShort=ot;Os.monthsParse=ut;Os.monthsRegex=gt;Os.monthsShortRegex=pt;Os.week=_t;Os.firstDayOfYear=St;Os.firstDayOfWeek=Dt;Os.weekdays=Ot;Os.weekdaysMin=Nt;Os.weekdaysShort=It;Os.weekdaysParse=Lt;Os.weekdaysRegex=Vt;Os.weekdaysShortRegex=Wt;Os.weekdaysMinRegex=Zt;Os.isPM=ei;Os.meridiem=ii;function Fs(e,t,i,n){var s=pi();var r=d().set(n,t);return s[i](r,e)}function Is(e,t,i){if(o(e)){t=e;e=undefined}e=e||"";if(t!=null){return Fs(e,t,i,"month")}var n;var s=[];for(n=0;n<12;n++){s[n]=Fs(e,n,i,"month")}return s}function js(e,t,i,n){if(typeof e==="boolean"){if(o(t)){i=t;t=undefined}t=t||""}else{t=e;i=t;e=false;if(o(t)){i=t;t=undefined}t=t||""}var s=pi(),r=e?s._week.dow:0;if(i!=null){return Fs(t,(i+r)%7,n,"day")}var a;var l=[];for(a=0;a<7;a++){l[a]=Fs(t,(a+r)%7,n,"day")}return l}function Ns(e,t){return Is(e,t,"months")}function Us(e,t){return Is(e,t,"monthsShort")}function Ls(e,t,i){return js(e,t,i,"weekdays")}function Rs(e,t,i){return js(e,t,i,"weekdaysShort")}function Hs(e,t,i){return js(e,t,i,"weekdaysMin")}ci("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,i=_(e%100/10)===1?"th":t===1?"st":t===2?"nd":t===3?"rd":"th";return e+i}});t.lang=S("moment.lang is deprecated. Use moment.locale instead.",ci);t.langData=S("moment.langData is deprecated. Use moment.localeData instead.",pi);var zs=Math.abs;function Ys(){var e=this._data;this._milliseconds=zs(this._milliseconds);this._days=zs(this._days);this._months=zs(this._months);e.milliseconds=zs(e.milliseconds);e.seconds=zs(e.seconds);e.minutes=zs(e.minutes);e.hours=zs(e.hours);e.months=zs(e.months);e.years=zs(e.years);return this}function Vs(e,t,i,n){var s=_n(t,i);e._milliseconds+=n*s._milliseconds;e._days+=n*s._days;e._months+=n*s._months;return e._bubble()}function Bs(e,t){return Vs(this,e,t,1)}function Ws(e,t){return Vs(this,e,t,-1)}function qs(e){if(e<0){return Math.floor(e)}else{return Math.ceil(e)}}function Zs(){var e=this._milliseconds;var t=this._days;var i=this._months;var n=this._data;var s,r,a,o,l;if(!(e>=0&&t>=0&&i>=0||e<=0&&t<=0&&i<=0)){e+=qs(Qs(i)+t)*864e5;t=0;i=0}n.milliseconds=e%1e3;s=T(e/1e3);n.seconds=s%60;r=T(s/60);n.minutes=r%60;a=T(r/60);n.hours=a%24;t+=T(a/24);l=T(Gs(t));i+=l;t-=qs(Qs(l));o=T(i/12);i%=12;n.days=t;n.months=i;n.years=o;return this}function Gs(e){return e*4800/146097}function Qs(e){return e*146097/4800}function Xs(e){if(!this.isValid()){return NaN}var t;var i;var n=this._milliseconds;e=G(e);if(e==="month"||e==="year"){t=this._days+n/864e5;i=this._months+Gs(t);return e==="month"?i:i/12}else{t=this._days+Math.round(Qs(this._months));switch(e){case"week":return t/7+n/6048e5;case"day":return t+n/864e5;case"hour":return t*24+n/36e5;case"minute":return t*1440+n/6e4;case"second":return t*86400+n/1e3;case"millisecond":return Math.floor(t*864e5)+n;default:throw new Error("Unknown unit "+e)}}}function Ks(){if(!this.isValid()){return NaN}return this._milliseconds+this._days*864e5+this._months%12*2592e6+_(this._months/12)*31536e6}function Js(e){return function(){return this.as(e)}}var er=Js("ms");var tr=Js("s");var ir=Js("m");var nr=Js("h");var sr=Js("d");var rr=Js("w");var ar=Js("M");var or=Js("y");function lr(){return _n(this)}function ur(e){e=G(e);return this.isValid()?this[e+"s"]():NaN}function fr(e){return function(){return this.isValid()?this._data[e]:NaN}}var cr=fr("milliseconds");var dr=fr("seconds");var hr=fr("minutes");var pr=fr("hours");var mr=fr("days");var gr=fr("months");var vr=fr("years");function yr(){return T(this.days()/7)}var br=Math.round;var wr={ss:44,s:45,m:45,h:22,d:26,M:11};function xr(e,t,i,n,s){return s.relativeTime(t||1,!!i,e,n)}function Cr(e,t,i){var n=_n(e).abs();var s=br(n.as("s"));var r=br(n.as("m"));var a=br(n.as("h"));var o=br(n.as("d"));var l=br(n.as("M"));var u=br(n.as("y"));var f=s<=wr.ss&&["s",s]||s<wr.s&&["ss",s]||r<=1&&["m"]||r<wr.m&&["mm",r]||a<=1&&["h"]||a<wr.h&&["hh",a]||o<=1&&["d"]||o<wr.d&&["dd",o]||l<=1&&["M"]||l<wr.M&&["MM",l]||u<=1&&["y"]||["yy",u];f[2]=t;f[3]=+e>0;f[4]=i;return xr.apply(null,f)}function Tr(e){if(e===undefined){return br}if(typeof e==="function"){br=e;return true}return false}function _r(e,t){if(wr[e]===undefined){return false}if(t===undefined){return wr[e]}wr[e]=t;if(e==="s"){wr.ss=t-1}return true}function kr(e){if(!this.isValid()){return this.localeData().invalidDate()}var t=this.localeData();var i=Cr(this,!e,t);if(e){i=t.pastFuture(+this,i)}return t.postformat(i)}var Dr=Math.abs;function Sr(e){return(e>0)-(e<0)||+e}function $r(){if(!this.isValid()){return this.localeData().invalidDate()}var e=Dr(this._milliseconds)/1e3;var t=Dr(this._days);var i=Dr(this._months);var n,s,r;n=T(e/60);s=T(n/60);e%=60;n%=60;r=T(i/12);i%=12;var a=r;var o=i;var l=t;var u=s;var f=n;var c=e?e.toFixed(3).replace(/\.?0+$/,""):"";var d=this.asSeconds();if(!d){return"P0D"}var h=d<0?"-":"";var p=Sr(this._months)!==Sr(d)?"-":"";var m=Sr(this._days)!==Sr(d)?"-":"";var g=Sr(this._milliseconds)!==Sr(d)?"-":"";return h+"P"+(a?p+a+"Y":"")+(o?p+o+"M":"")+(l?m+l+"D":"")+(u||f||c?"T":"")+(u?g+u+"H":"")+(f?g+f+"M":"")+(c?g+c+"S":"")}var Ar=nn.prototype;Ar.isValid=en;Ar.abs=Ys;Ar.add=Bs;Ar.subtract=Ws;Ar.as=Xs;Ar.asMilliseconds=er;Ar.asSeconds=tr;Ar.asMinutes=ir;Ar.asHours=nr;Ar.asDays=sr;Ar.asWeeks=rr;Ar.asMonths=ar;Ar.asYears=or;Ar.valueOf=Ks;Ar._bubble=Zs;Ar.clone=lr;Ar.get=ur;Ar.milliseconds=cr;Ar.seconds=dr;Ar.minutes=hr;Ar.hours=pr;Ar.days=mr;Ar.weeks=yr;Ar.months=gr;Ar.years=vr;Ar.humanize=kr;Ar.toISOString=$r;Ar.toString=$r;Ar.toJSON=$r;Ar.locale=Xn;Ar.localeData=Jn;Ar.toIsoString=S("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",$r);Ar.lang=Kn;re("X",0,0,"unix");re("x",0,0,"valueOf");$e("x",Ce);$e("X",ke);Oe("X",function(e,t,i){i._d=new Date(parseFloat(e,10)*1e3)});Oe("x",function(e,t,i){i._d=new Date(_(e))});t.version="2.20.1";i(Bi);t.fn=As;t.min=Gi;t.max=Qi;t.now=Xi;t.utc=d;t.unix=Es;t.months=Ns;t.isDate=l;t.locale=ci;t.invalid=v;t.duration=_n;t.isMoment=C;t.weekdays=Ls;t.parseZone=Ms;t.localeData=pi;t.isDuration=sn;t.monthsShort=Us;t.weekdaysMin=Hs;t.defineLocale=di;t.updateLocale=hi;t.locales=mi;t.weekdaysShort=Rs;t.normalizeUnits=G;t.relativeTimeRounding=Tr;t.relativeTimeThreshold=_r;t.calendarFormat=Pn;t.prototype=As;t.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"YYYY-[W]WW",MONTH:"YYYY-MM"};return t});(function(e){"use strict";var t=typeof window==="undefined"?null:window;if(typeof define==="function"&&define.amd){define(function(){return e(t)})}else if(typeof module!=="undefined"){module.exports=e(t)}else{t.DOMPurify=e(t)}})(function e(t){"use strict";var i=function(t){return e(t)};i.version="0.7.4";if(!t||!t.document||t.document.nodeType!==9){i.isSupported=false;return i}var n=t.document;var s=n;var r=t.DocumentFragment;var a=t.HTMLTemplateElement;var o=t.NodeFilter;var l=t.NamedNodeMap||t.MozNamedAttrMap;var u=t.Text;var f=t.Comment;var c=t.DOMParser;if(typeof a==="function"){var d=n.createElement("template");if(d.content&&d.content.ownerDocument){n=d.content.ownerDocument}}var h=n.implementation;var p=n.createNodeIterator;var m=n.getElementsByTagName;var g=n.createDocumentFragment;var v=s.importNode;var y={};i.isSupported=typeof h.createHTMLDocument!=="undefined"&&n.documentMode!==9;var b=function(e,t){var i=t.length;while(i--){if(typeof t[i]==="string"){t[i]=t[i].toLowerCase()}e[t[i]]=true}return e};var w=function(e){var t={};var i;for(i in e){if(e.hasOwnProperty(i)){t[i]=e[i]}}return t};var x=null;var C=b({},["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr","svg","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","switch","symbol","text","textpath","title","tref","tspan","view","vkern","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feMerge","feMergeNode","feMorphology","feOffset","feSpecularLighting","feTile","feTurbulence","math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmuliscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mpspace","msqrt","mystyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover","#text"]);var T=null;var _=b({},["accept","action","align","alt","autocomplete","background","bgcolor","border","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","coords","datetime","default","dir","disabled","download","enctype","face","for","headers","height","hidden","high","href","hreflang","id","ismap","label","lang","list","loop","low","max","maxlength","media","method","min","multiple","name","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","rows","rowspan","spellcheck","scope","selected","shape","size","span","srclang","start","src","step","style","summary","tabindex","title","type","usemap","valign","value","width","xmlns","accent-height","accumulate","additivive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","clip","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","mode","min","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","surfacescale","targetx","targety","transform","text-anchor","text-decoration","text-rendering","textlength","u1","u2","unicode","values","viewbox","visibility","vert-adv-y","vert-origin-x","vert-origin-y","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","y","y1","y2","z","zoomandpan","accent","accentunder","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","display","displaystyle","fence","frame","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]);var k=null;var D=null;var S=true;var $=false;var A=false;var E=false;var M=/\{\{[\s\S]*|[\s\S]*\}\}/gm;var P=/<%[\s\S]*|[\s\S]*%>/gm;var O=false;var F=false;var I=false;var j=false;var N=true;var U=true;var L=b({},["audio","head","math","script","style","svg","video"]);var R=b({},["audio","video","img","source"]);var H=b({},["alt","class","for","id","label","name","pattern","placeholder","summary","title","value","style","xmlns"]);var z=null;var Y=n.createElement("form");var V=function(e){if(typeof e!=="object"){e={}}x="ALLOWED_TAGS"in e?b({},e.ALLOWED_TAGS):C;T="ALLOWED_ATTR"in e?b({},e.ALLOWED_ATTR):_;k="FORBID_TAGS"in e?b({},e.FORBID_TAGS):{};D="FORBID_ATTR"in e?b({},e.FORBID_ATTR):{};S=e.ALLOW_DATA_ATTR!==false;$=e.ALLOW_UNKNOWN_PROTOCOLS||false;A=e.SAFE_FOR_JQUERY||false;E=e.SAFE_FOR_TEMPLATES||false;O=e.WHOLE_DOCUMENT||false;F=e.RETURN_DOM||false;I=e.RETURN_DOM_FRAGMENT||false;j=e.RETURN_DOM_IMPORT||false;N=e.SANITIZE_DOM!==false;U=e.KEEP_CONTENT!==false;if(E){S=false}if(I){F=true}if(e.ADD_TAGS){if(x===C){x=w(x)}b(x,e.ADD_TAGS)}if(e.ADD_ATTR){if(T===_){T=w(T)}b(T,e.ADD_ATTR)}if(U){x["#text"]=true}if(Object&&"freeze"in Object){Object.freeze(e)}z=e};var B=function(e){try{e.parentNode.removeChild(e)}catch(t){e.outerHTML=""}};var W=function(e){var t,i;try{t=(new c).parseFromString(e,"text/html")}catch(e){}if(!t){t=h.createHTMLDocument("");i=t.body;i.parentNode.removeChild(i.parentNode.firstElementChild);i.outerHTML=e}if(typeof t.getElementsByTagName==="function"){return t.getElementsByTagName(O?"html":"body")[0]}return m.call(t,O?"html":"body")[0]};var q=function(e){return p.call(e.ownerDocument||e,e,o.SHOW_ELEMENT|o.SHOW_COMMENT|o.SHOW_TEXT,function(){return o.FILTER_ACCEPT},false)};var Z=function(e){if(e instanceof u||e instanceof f){return false}if(typeof e.nodeName!=="string"||typeof e.textContent!=="string"||typeof e.removeChild!=="function"||!(e.attributes instanceof l)||typeof e.removeAttribute!=="function"||typeof e.setAttribute!=="function"){return true}return false};var G=function(e){var t,i;ie("beforeSanitizeElements",e,null);if(Z(e)){B(e);return true}t=e.nodeName.toLowerCase();ie("uponSanitizeElement",e,{tagName:t});if(!x[t]||k[t]){if(U&&!L[t]&&typeof e.insertAdjacentHTML==="function"){try{e.insertAdjacentHTML("AfterEnd",e.innerHTML)}catch(e){}}B(e);return true}if(A&&!e.firstElementChild&&(!e.content||!e.content.firstElementChild)){e.innerHTML=e.textContent.replace(/</g,"&lt;")}if(E&&e.nodeType===3){i=e.textContent;i=i.replace(M," ");i=i.replace(P," ");e.textContent=i}ie("afterSanitizeElements",e,null);return false};var Q=/^data-[\w.\u00B7-\uFFFF-]/;var X=/^(?:(?:(?:f|ht)tps?|mailto|tel):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i;var K=/^(?:\w+script|data):/i;var J=/[\x00-\x20\xA0\u1680\u180E\u2000-\u2029\u205f\u3000]/g;var ee=function(e){var i,s,r,a,o,l,u,f;ie("beforeSanitizeAttributes",e,null);l=e.attributes;if(!l){return}u={attrName:"",attrValue:"",keepAttr:true};f=l.length;while(f--){i=l[f];s=i.name;r=i.value;a=s.toLowerCase();u.attrName=a;u.attrValue=r;u.keepAttr=true;ie("uponSanitizeAttribute",e,u);r=u.attrValue;if(a==="name"&&e.nodeName==="IMG"&&l.id){o=l.id;l=Array.prototype.slice.apply(l);e.removeAttribute("id");e.removeAttribute(s);if(l.indexOf(o)>f){e.setAttribute("id",o.value)}}else{if(s==="id"){e.setAttribute(s,"")}e.removeAttribute(s)}if(!u.keepAttr){continue}if(N&&(a==="id"||a==="name")&&(r in t||r in n||r in Y)){continue}if(E){r=r.replace(M," ");r=r.replace(P," ")}if(T[a]&&!D[a]&&(H[a]||X.test(r.replace(J,""))||a==="src"&&r.indexOf("data:")===0&&R[e.nodeName.toLowerCase()])||S&&Q.test(a)||$&&!K.test(r.replace(J,""))){try{e.setAttribute(s,r)}catch(e){}}}ie("afterSanitizeAttributes",e,null)};var te=function(e){var t;var i=q(e);ie("beforeSanitizeShadowDOM",e,null);while(t=i.nextNode()){ie("uponSanitizeShadowNode",t,null);if(G(t)){continue}if(t.content instanceof r){te(t.content)}ee(t)}ie("afterSanitizeShadowDOM",e,null)};var ie=function(e,t,n){if(!y[e]){return}y[e].forEach(function(e){e.call(i,t,n,z)})};i.sanitize=function(e,n){var a,o,l,u,f;if(!e){e=""}if(typeof e!=="string"){if(typeof e.toString!=="function"){throw new TypeError("toString is not a function")}else{e=e.toString()}}if(!i.isSupported){if(typeof t.toStaticHTML==="object"||typeof t.toStaticHTML==="function"){return t.toStaticHTML(e)}return e}V(n);if(!F&&!O&&e.indexOf("<")===-1){return e}a=W(e);if(!a){return F?null:""}u=q(a);while(o=u.nextNode()){if(o.nodeType===3&&o===l){continue}if(G(o)){continue}if(o.content instanceof r){te(o.content)}ee(o);l=o}if(F){if(I){f=g.call(a.ownerDocument);while(a.firstChild){f.appendChild(a.firstChild)}}else{f=a}if(j){f=v.call(s,f,true)}return f}return O?a.outerHTML:a.innerHTML};i.addHook=function(e,t){if(typeof t!=="function"){return}y[e]=y[e]||[];y[e].push(t)};i.removeHook=function(e){if(y[e]){y[e].pop()}};i.removeHooks=function(e){if(y[e]){y[e]=[]}};i.removeAllHooks=function(){y=[]};return i});(function e(t){"use strict";if(typeof define==="function"&&define.amd){define(t)}else if(typeof module!="undefined"&&typeof module.exports!="undefined"){module.exports=t()}else{window["KvSortable"]=t()}})(function e(){"use strict";if(typeof window=="undefined"||!window.document){return function e(){throw new Error("KvSortable.js requires a window with a document")}}var t,i,n,s,r,a,o,l,u,f,c,d,h,p,m,g,v,y={},b,w,x,C=/\s+/g,T=/left|right|inline/,_="KvSortable"+(new Date).getTime(),k=window,D=k.document,S=k.parseInt,$=k.jQuery||k.Zepto,A=k.Polymer,E=false,M=!!("draggable"in D.createElement("div")),P=function(e){if(!!navigator.userAgent.match(/Trident.*rv[ :]?11\./)){return false}e=D.createElement("x");e.style.cssText="pointer-events:auto";return e.style.pointerEvents==="auto"}(),O=false,F=Math.abs,I=Math.min,j=[],N=[],U=se(function(e,t,i){if(i&&t.scroll){var n=i[_],s,r,a=t.scrollSensitivity,o=t.scrollSpeed,c=e.clientX,d=e.clientY,h=window.innerWidth,p=window.innerHeight,m,g,v,b;if(u!==i){l=t.scroll;u=i;f=t.scrollFn;if(l===true){l=i;do{if(l.offsetWidth<l.scrollWidth||l.offsetHeight<l.scrollHeight){break}}while(l=l.parentNode)}}if(l){s=l;r=l.getBoundingClientRect();m=(F(r.right-c)<=a)-(F(r.left-c)<=a);g=(F(r.bottom-d)<=a)-(F(r.top-d)<=a)}if(!(m||g)){m=(h-c<=a)-(c<=a);g=(p-d<=a)-(d<=a);(m||g)&&(s=k)}if(y.vx!==m||y.vy!==g||y.el!==s){y.el=s;y.vx=m;y.vy=g;clearInterval(y.pid);if(s){y.pid=setInterval(function(){b=g?g*o:0;v=m?m*o:0;if("function"===typeof f){return f.call(n,v,b,e)}if(s===k){k.scrollTo(k.pageXOffset+v,k.pageYOffset+b)}else{s.scrollTop+=b;s.scrollLeft+=v}},24)}}}},30),L=function(e){function t(e,t){if(e===void 0||e===true){e=i.name}if(typeof e==="function"){return e}else{return function(i,n){var s=n.options.group.name;return t?e:e&&(e.join?e.indexOf(s)>-1:s==e)}}}var i={};var n=e.group;if(!n||typeof n!="object"){n={name:n}}i.name=n.name;i.checkPull=t(n.pull,true);i.checkPut=t(n.put);i.revertClone=n.revertClone;e.group=i};function R(e,t){if(!(e&&e.nodeType&&e.nodeType===1)){throw"KvSortable: `el` must be HTMLElement, and not "+{}.toString.call(e)}this.el=e;this.options=t=re({},t);e[_]=this;var i={group:Math.random(),sort:true,disabled:false,store:null,handle:null,scroll:true,scrollSensitivity:30,scrollSpeed:10,draggable:/[uo]l/i.test(e.nodeName)?"li":">*",ghostClass:"kvsortable-ghost",chosenClass:"kvsortable-chosen",dragClass:"kvsortable-drag",ignore:"a, img",filter:null,preventOnFilter:true,animation:0,setData:function(e,t){e.setData("Text",t.textContent)},dropBubble:false,dragoverBubble:false,dataIdAttr:"data-id",delay:0,forceFallback:false,fallbackClass:"kvsortable-fallback",fallbackOnBody:false,fallbackTolerance:0,fallbackOffset:{x:0,y:0}};for(var n in i){!(n in t)&&(t[n]=i[n])}L(t);for(var s in this){if(s.charAt(0)==="_"&&typeof this[s]==="function"){this[s]=this[s].bind(this)}}this.nativeDraggable=t.forceFallback?false:M;B(e,"mousedown",this._onTapStart);B(e,"touchstart",this._onTapStart);B(e,"pointerdown",this._onTapStart);if(this.nativeDraggable){B(e,"dragover",this);B(e,"dragenter",this)}N.push(this._onDragOver);t.store&&this.sort(t.store.get(this))}R.prototype={constructor:R,_onTapStart:function(e){var i=this,n=this.el,s=this.options,r=s.preventOnFilter,a=e.type,l=e.touches&&e.touches[0],u=(l||e).target,f=e.target.shadowRoot&&e.path[0]||u,c=s.filter,d;oe(n);if(t){return}if(a==="mousedown"&&e.button!==0||s.disabled){return}u=z(u,s.draggable,n);if(!u){return}if(o===u){return}d=ie(u,s.draggable);if(typeof c==="function"){if(c.call(this,e,u,this)){Q(i,f,"filter",u,n,d);r&&e.preventDefault();return}}else if(c){c=c.split(",").some(function(e){e=z(f,e.trim(),n);if(e){Q(i,e,"filter",u,n,d);return true}});if(c){r&&e.preventDefault();return}}if(s.handle&&!z(f,s.handle,n)){return}this._prepareDragStart(e,l,u,d)},_prepareDragStart:function(e,n,s,l){var u=this,f=u.el,c=u.options,d=f.ownerDocument,h;if(s&&!t&&s.parentNode===f){b=e;r=f;t=s;i=t.parentNode;a=t.nextSibling;o=s;g=c.group;p=l;this._lastX=(n||e).clientX;this._lastY=(n||e).clientY;t.style["will-change"]="transform";h=function(){u._disableDelayedDrag();t.draggable=u.nativeDraggable;q(t,c.chosenClass,true);u._triggerDragStart(e,n);Q(u,r,"choose",t,r,p)};c.ignore.split(",").forEach(function(e){G(t,e.trim(),K)});B(d,"mouseup",u._onDrop);B(d,"touchend",u._onDrop);B(d,"touchcancel",u._onDrop);B(d,"pointercancel",u._onDrop);B(d,"selectstart",u);if(c.delay){B(d,"mouseup",u._disableDelayedDrag);B(d,"touchend",u._disableDelayedDrag);B(d,"touchcancel",u._disableDelayedDrag);B(d,"mousemove",u._disableDelayedDrag);B(d,"touchmove",u._disableDelayedDrag);B(d,"pointermove",u._disableDelayedDrag);u._dragStartTimer=setTimeout(h,c.delay)}else{h()}}},_disableDelayedDrag:function(){var e=this.el.ownerDocument;clearTimeout(this._dragStartTimer);W(e,"mouseup",this._disableDelayedDrag);W(e,"touchend",this._disableDelayedDrag);W(e,"touchcancel",this._disableDelayedDrag);W(e,"mousemove",this._disableDelayedDrag);W(e,"touchmove",this._disableDelayedDrag);W(e,"pointermove",this._disableDelayedDrag)},_triggerDragStart:function(e,i){i=i||(e.pointerType=="touch"?e:null);if(i){b={target:t,clientX:i.clientX,clientY:i.clientY};this._onDragStart(b,"touch")}else if(!this.nativeDraggable){this._onDragStart(b,true)}else{B(t,"dragend",this);B(r,"dragstart",this._onDragStart)}try{if(D.selection){setTimeout(function(){D.selection.empty()})}else{window.getSelection().removeAllRanges()}}catch(e){}},_dragStarted:function(){if(r&&t){var e=this.options;q(t,e.ghostClass,true);q(t,e.dragClass,false);R.active=this;Q(this,r,"start",t,r,p)}else{this._nulling()}},_emulateDragOver:function(){if(w){if(this._lastX===w.clientX&&this._lastY===w.clientY){return}this._lastX=w.clientX;this._lastY=w.clientY;if(!P){Z(n,"display","none")}var e=D.elementFromPoint(w.clientX,w.clientY),t=e,i=N.length;if(t){do{if(t[_]){while(i--){N[i]({clientX:w.clientX,clientY:w.clientY,target:e,rootEl:t})}break}e=t}while(t=t.parentNode)}if(!P){Z(n,"display","")}}},_onTouchMove:function(e){if(b){var t=this.options,i=t.fallbackTolerance,s=t.fallbackOffset,r=e.touches?e.touches[0]:e,a=r.clientX-b.clientX+s.x,o=r.clientY-b.clientY+s.y,l=e.touches?"translate3d("+a+"px,"+o+"px,0)":"translate("+a+"px,"+o+"px)";if(!R.active){if(i&&I(F(r.clientX-this._lastX),F(r.clientY-this._lastY))<i){return}this._dragStarted()}this._appendGhost();x=true;w=r;Z(n,"webkitTransform",l);Z(n,"mozTransform",l);Z(n,"msTransform",l);Z(n,"transform",l);e.preventDefault()}},_appendGhost:function(){if(!n){var e=t.getBoundingClientRect(),i=Z(t),s=this.options,a;n=t.cloneNode(true);q(n,s.ghostClass,false);q(n,s.fallbackClass,true);q(n,s.dragClass,true);Z(n,"top",e.top-S(i.marginTop,10));Z(n,"left",e.left-S(i.marginLeft,10));Z(n,"width",e.width);Z(n,"height",e.height);Z(n,"opacity","0.8");Z(n,"position","fixed");Z(n,"zIndex","100000");Z(n,"pointerEvents","none");s.fallbackOnBody&&D.body.appendChild(n)||r.appendChild(n);a=n.getBoundingClientRect();Z(n,"width",e.width*2-a.width);Z(n,"height",e.height*2-a.height)}},_onDragStart:function(e,i){var n=e.dataTransfer,a=this.options;this._offUpEvents();if(g.checkPull(this,this,t,e)){s=ae(t);s.draggable=false;s.style["will-change"]="";Z(s,"display","none");q(s,this.options.chosenClass,false);r.insertBefore(s,t);Q(this,r,"clone",t)}q(t,a.dragClass,true);if(i){if(i==="touch"){B(D,"touchmove",this._onTouchMove);B(D,"touchend",this._onDrop);B(D,"touchcancel",this._onDrop);B(D,"pointermove",this._onTouchMove);B(D,"pointerup",this._onDrop)}else{B(D,"mousemove",this._onTouchMove);B(D,"mouseup",this._onDrop)}this._loopId=setInterval(this._emulateDragOver,50)}else{if(n){n.effectAllowed="move";a.setData&&a.setData.call(this,n,t)}B(D,"drop",this);setTimeout(this._dragStarted,0)}},_onDragOver:function(e){var o=this.el,l,u,f,p,m=this.options,y=m.group,b=R.active,w=g===y,C=false,k=m.sort;if(e.preventDefault!==void 0){e.preventDefault();!m.dragoverBubble&&e.stopPropagation()}if(t.animated){return}x=true;if(b&&!m.disabled&&(w?k||(p=!r.contains(t)):v===this||(b.lastPullMode=g.checkPull(this,b,t,e))&&y.checkPut(this,b,t,e))&&(e.rootEl===void 0||e.rootEl===this.el)){U(e,m,this.el);if(O){return}l=z(e.target,m.draggable,o);u=t.getBoundingClientRect();if(v!==this){v=this;C=true}if(p){H(b,true);i=r;if(s||a){r.insertBefore(t,s||a)}else if(!k){r.appendChild(t)}return}if(o.children.length===0||o.children[0]===n||o===e.target&&(l=ee(o,e))){if(l){if(l.animated){return}f=l.getBoundingClientRect()}H(b,w);if(X(r,o,t,u,l,f,e)!==false){if(!t.contains(o)){o.appendChild(t);i=o}this._animate(u,t);l&&this._animate(f,l)}}else if(l&&!l.animated&&l!==t&&l.parentNode[_]!==void 0){if(c!==l){c=l;d=Z(l);h=Z(l.parentNode)}f=l.getBoundingClientRect();var D=f.right-f.left,S=f.bottom-f.top,$=T.test(d.cssFloat+d.display)||h.display=="flex"&&h["flex-direction"].indexOf("row")===0,A=l.offsetWidth>t.offsetWidth,E=l.offsetHeight>t.offsetHeight,M=($?(e.clientX-f.left)/D:(e.clientY-f.top)/S)>.5,P=l.nextElementSibling,F=X(r,o,t,u,l,f,e),I=false;if(F!==false){O=true;setTimeout(J,30);H(b,w);if(F===1||F===-1){I=F===1}else if($){var j=t.offsetTop,N=l.offsetTop;if(j===N){I=l.previousElementSibling===t&&!A||M&&A}else if(l.previousElementSibling===t||t.previousElementSibling===l){I=(e.clientY-f.top)/S>.5}else{I=N>j}}else if(!C){I=P!==t&&!E||M&&E}if(!t.contains(o)){if(I&&!P){o.appendChild(t)}else{l.parentNode.insertBefore(t,I?P:l)}}i=t.parentNode;this._animate(u,t);this._animate(f,l)}}}},_animate:function(e,t){var i=this.options.animation;if(i){var n=t.getBoundingClientRect();if(e.nodeType===1){e=e.getBoundingClientRect()}Z(t,"transition","none");Z(t,"transform","translate3d("+(e.left-n.left)+"px,"+(e.top-n.top)+"px,0)");t.offsetWidth;Z(t,"transition","all "+i+"ms");Z(t,"transform","translate3d(0,0,0)");clearTimeout(t.animated);t.animated=setTimeout(function(){Z(t,"transition","");Z(t,"transform","");t.animated=false},i)}},_offUpEvents:function(){var e=this.el.ownerDocument;W(D,"touchmove",this._onTouchMove);W(D,"pointermove",this._onTouchMove);W(e,"mouseup",this._onDrop);W(e,"touchend",this._onDrop);W(e,"pointerup",this._onDrop);W(e,"touchcancel",this._onDrop);W(e,"selectstart",this)},_onDrop:function(e){var o=this.el,l=this.options;clearInterval(this._loopId);clearInterval(y.pid);clearTimeout(this._dragStartTimer);W(D,"mousemove",this._onTouchMove);if(this.nativeDraggable){W(D,"drop",this);W(o,"dragstart",this._onDragStart)}this._offUpEvents();if(e){if(x){e.preventDefault();!l.dropBubble&&e.stopPropagation()}n&&n.parentNode.removeChild(n);if(r===i||R.active.lastPullMode!=="clone"){s&&s.parentNode.removeChild(s)}if(t){if(this.nativeDraggable){W(t,"dragend",this)}K(t);t.style["will-change"]="";q(t,this.options.ghostClass,false);q(t,this.options.chosenClass,false);if(r!==i){m=ie(t,l.draggable);if(m>=0){Q(null,i,"add",t,r,p,m);Q(this,r,"remove",t,r,p,m);Q(null,i,"sort",t,r,p,m);Q(this,r,"sort",t,r,p,m)}}else{if(t.nextSibling!==a){m=ie(t,l.draggable);if(m>=0){Q(this,r,"update",t,r,p,m);Q(this,r,"sort",t,r,p,m)}}}if(R.active){if(m==null||m===-1){m=p}Q(this,r,"end",t,r,p,m);this.save()}}}this._nulling()},_nulling:function(){r=t=i=n=a=s=o=l=u=b=w=x=m=c=d=v=g=R.active=null;j.forEach(function(e){e.checked=true});j.length=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragover":case"dragenter":if(t){this._onDragOver(e);V(e)}break;case"selectstart":e.preventDefault();break}},toArray:function(){var e=[],t,i=this.el.children,n=0,s=i.length,r=this.options;for(;n<s;n++){t=i[n];if(z(t,r.draggable,this.el)){e.push(t.getAttribute(r.dataIdAttr)||te(t))}}return e},sort:function(e){var t={},i=this.el;this.toArray().forEach(function(e,n){var s=i.children[n];if(z(s,this.options.draggable,i)){t[e]=s}},this);e.forEach(function(e){if(t[e]){i.removeChild(t[e]);i.appendChild(t[e])}})},save:function(){var e=this.options.store;e&&e.set(this)},closest:function(e,t){return z(e,t||this.options.draggable,this.el)},option:function(e,t){var i=this.options;if(t===void 0){return i[e]}else{i[e]=t;if(e==="group"){L(i)}}},destroy:function(){var e=this.el;e[_]=null;W(e,"mousedown",this._onTapStart);W(e,"touchstart",this._onTapStart);W(e,"pointerdown",this._onTapStart);if(this.nativeDraggable){W(e,"dragover",this);W(e,"dragenter",this)}Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),function(e){e.removeAttribute("draggable")});N.splice(N.indexOf(this._onDragOver),1);this._onDrop();this.el=e=null}};function H(e,i){if(e.lastPullMode!=="clone"){i=true}if(s&&s.state!==i){Z(s,"display",i?"none":"");if(!i){if(s.state){if(e.options.group.revertClone){r.insertBefore(s,a);e._animate(t,s)}else{r.insertBefore(s,t)}}}s.state=i}}function z(e,t,i){if(e){i=i||D;do{if(t===">*"&&e.parentNode===i||ne(e,t)){return e}}while(e=Y(e))}return null}function Y(e){var t=e.host;return t&&t.nodeType?t:e.parentNode}function V(e){if(e.dataTransfer){e.dataTransfer.dropEffect="move"}e.preventDefault()}function B(e,t,i){e.addEventListener(t,i,E)}function W(e,t,i){e.removeEventListener(t,i,E)}function q(e,t,i){if(e){if(e.classList){e.classList[i?"add":"remove"](t)}else{var n=(" "+e.className+" ").replace(C," ").replace(" "+t+" "," ");e.className=(n+(i?" "+t:"")).replace(C," ")}}}function Z(e,t,i){var n=e&&e.style;if(n){if(i===void 0){if(D.defaultView&&D.defaultView.getComputedStyle){i=D.defaultView.getComputedStyle(e,"")}else if(e.currentStyle){i=e.currentStyle}return t===void 0?i:i[t]}else{if(!(t in n)){t="-webkit-"+t}n[t]=i+(typeof i==="string"?"":"px")}}}function G(e,t,i){if(e){var n=e.getElementsByTagName(t),s=0,r=n.length;if(i){for(;s<r;s++){i(n[s],s)}}return n}return[]}function Q(e,t,i,n,r,a,o){e=e||t[_];var l=D.createEvent("Event"),u=e.options,f="on"+i.charAt(0).toUpperCase()+i.substr(1);l.initEvent(i,true,true);l.to=t;l.from=r||t;l.item=n||t;l.clone=s;l.oldIndex=a;l.newIndex=o;t.dispatchEvent(l);if(u[f]){u[f].call(e,l)}}function X(e,t,i,n,s,r,a){var o,l=e[_],u=l.options.onMove,f;o=D.createEvent("Event");o.initEvent("move",true,true);o.to=t;o.from=e;o.dragged=i;o.draggedRect=n;o.related=s||t;o.relatedRect=r||t.getBoundingClientRect();e.dispatchEvent(o);if(u){f=u.call(l,o,a)}return f}function K(e){e.draggable=false}function J(){O=false}function ee(e,t){var i=e.lastElementChild,n=i.getBoundingClientRect();return(t.clientY-(n.top+n.height)>5||t.clientX-(n.right+n.width)>5)&&i}function te(e){var t=e.tagName+e.className+e.src+e.href+e.textContent,i=t.length,n=0;while(i--){n+=t.charCodeAt(i)}return n.toString(36)}function ie(e,t){var i=0;if(!e||!e.parentNode){return-1}while(e&&(e=e.previousElementSibling)){if(e.nodeName.toUpperCase()!=="TEMPLATE"&&(t===">*"||ne(e,t))){i++}}return i}function ne(e,t){if(e){t=t.split(".");var i=t.shift().toUpperCase(),n=new RegExp("\\s("+t.join("|")+")(?=\\s)","g");return(i===""||e.nodeName.toUpperCase()==i)&&(!t.length||((" "+e.className+" ").match(n)||[]).length==t.length)}return false}function se(e,t){var i,n;return function(){if(i===void 0){i=arguments;n=this;setTimeout(function(){if(i.length===1){e.call(n,i[0])}else{e.apply(n,i)}i=void 0},t)}}}function re(e,t){if(e&&t){for(var i in t){if(t.hasOwnProperty(i)){e[i]=t[i]}}}return e}function ae(e){return $?$(e).clone(true)[0]:A&&A.dom?A.dom(e).cloneNode(true):e.cloneNode(true)}function oe(e){var t=e.getElementsByTagName("input");var i=t.length;while(i--){var n=t[i];n.checked&&j.push(n)}}B(D,"touchmove",function(e){if(R.active){e.preventDefault()}});try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){E={capture:false,passive:false}}}))}catch(e){}R.utils={on:B,off:W,css:Z,find:G,is:function(e,t){return!!z(e,t,e)},extend:re,throttle:se,closest:z,toggleClass:q,clone:ae,index:ie};R.create=function(e,t){return new R(e,t)};R.version="1.5.1";return R});(function(e){"use strict";if(typeof define==="function"&&define.amd){define(["jquery"],e)}else{e(jQuery)}})(function(e){"use strict";e.fn.kvsortable=function(t){var i,n=arguments;this.each(function(){var s=e(this),r=s.data("kvsortable");if(!r&&(t instanceof Object||!t)){r=new KvSortable(this,t);s.data("kvsortable",r)}if(r){if(t==="widget"){i=r}else if(t==="destroy"){r.destroy();s.removeData("kvsortable")}else if(typeof r[t]==="function"){i=r[t].apply(r,[].slice.call(n,1))}else if(t in r.options){i=r.option.apply(r,n)}}});return i===void 0?this:i}});(function(e){"use strict";if(typeof define==="function"&&define.amd){define(["jquery"],e)}else{if(typeof module==="object"&&module.exports){module.exports=e(require("jquery"))}else{e(window.jQuery)}}})(function(e){"use strict";e.fn.fileinputLocales={};e.fn.fileinputThemes={};String.prototype.setTokens=function(e){var t=this.toString(),i,n;for(i in e){if(e.hasOwnProperty(i)){n=new RegExp("{"+i+"}","g");t=t.replace(n,e[i])}}return t};var t,i;t={FRAMES:".kv-preview-thumb",SORT_CSS:"file-sortable",OBJECT_PARAMS:'<param name="controller" value="true" />\n'+'<param name="allowFullScreen" value="true" />\n'+'<param name="allowScriptAccess" value="always" />\n'+'<param name="autoPlay" value="false" />\n'+'<param name="autoStart" value="false" />\n'+'<param name="quality" value="high" />\n',DEFAULT_PREVIEW:'<div class="file-preview-other">\n'+'<span class="{previewFileIconClass}">{previewFileIcon}</span>\n'+"</div>",MODAL_ID:"kvFileinputModal",MODAL_EVENTS:["show","shown","hide","hidden","loaded"],objUrl:window.URL||window.webkitURL,compare:function(e,t,i){return e!==undefined&&(i?e===t:e.match(t))},isIE:function(e){if(navigator.appName!=="Microsoft Internet Explorer"){return false}if(e===10){return new RegExp("msie\\s"+e,"i").test(navigator.userAgent)}var t=document.createElement("div"),i;t.innerHTML="\x3c!--[if IE "+e+"]> <i></i> <![endif]--\x3e";i=t.getElementsByTagName("i").length;document.body.appendChild(t);t.parentNode.removeChild(t);return i},initModal:function(t){var i=e("body");if(i.length){t.appendTo(i)}},isEmpty:function(t,i){return t===undefined||t===null||t.length===0||i&&e.trim(t)===""},isArray:function(e){return Array.isArray(e)||Object.prototype.toString.call(e)==="[object Array]"},ifSet:function(e,t,i){i=i||"";return t&&typeof t==="object"&&e in t?t[e]:i},cleanArray:function(e){if(!(e instanceof Array)){e=[]}return e.filter(function(e){return e!==undefined&&e!==null})},spliceArray:function(e,t){var i,n=0,s=[];if(!(e instanceof Array)){return[]}for(i=0;i<e.length;i++){if(i!==t){s[n]=e[i];n++}}return s},getNum:function(e,t){t=t||0;if(typeof e==="number"){return e}if(typeof e==="string"){e=parseFloat(e)}return isNaN(e)?t:e},hasFileAPISupport:function(){return!!(window.File&&window.FileReader)},hasDragDropSupport:function(){var e=document.createElement("div");return!t.isIE(9)&&(e.draggable!==undefined||e.ondragstart!==undefined&&e.ondrop!==undefined)},hasFileUploadSupport:function(){return t.hasFileAPISupport()&&window.FormData},hasBlobSupport:function(){try{return!!window.Blob&&Boolean(new Blob)}catch(e){return false}},hasArrayBufferViewSupport:function(){try{return new Blob([new Uint8Array(100)]).size===100}catch(e){return false}},dataURI2Blob:function(e){var i=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,n=t.hasBlobSupport(),s,r,a,o,l,u,f=(n||i)&&window.atob&&window.ArrayBuffer&&window.Uint8Array;if(!f){return null}if(e.split(",")[0].indexOf("base64")>=0){s=atob(e.split(",")[1])}else{s=decodeURIComponent(e.split(",")[1])}r=new ArrayBuffer(s.length);a=new Uint8Array(r);for(o=0;o<s.length;o+=1){a[o]=s.charCodeAt(o)}l=e.split(",")[0].split(":")[1].split(";")[0];if(n){return new Blob([t.hasArrayBufferViewSupport()?a:r],{type:l})}u=new i;u.append(r);return u.getBlob(l)},arrayBuffer2String:function(e){if(window.TextDecoder){return new TextDecoder("utf-8").decode(e)}var t=Array.prototype.slice.apply(new Uint8Array(e)),i="",n=0,s,r,a,o;s=t.length;while(n<s){r=t[n++];switch(r>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:i+=String.fromCharCode(r);break;case 12:case 13:a=t[n++];i+=String.fromCharCode((r&31)<<6|a&63);break;case 14:a=t[n++];o=t[n++];i+=String.fromCharCode((r&15)<<12|(a&63)<<6|(o&63)<<0);break}}return i},isHtml:function(e){var t=document.createElement("div");t.innerHTML=e;for(var i=t.childNodes,n=i.length;n--;){if(i[n].nodeType===1){return true}}return false},isSvg:function(e){return e.match(/^\s*<\?xml/i)&&(e.match(/<!DOCTYPE svg/i)||e.match(/<svg/i))},getMimeType:function(e,t,i){switch(e){case"ffd8ffe0":case"ffd8ffe1":case"ffd8ffe2":return"image/jpeg";case"89504E47":return"image/png";case"47494638":return"image/gif";case"49492a00":return"image/tiff";case"52494646":return"image/webp";case"66747970":return"video/3gp";case"4f676753":return"video/ogg";case"1a45dfa3":return"video/mkv";case"000001ba":case"000001b3":return"video/mpeg";case"3026b275":return"video/wmv";case"25504446":return"application/pdf";case"25215053":return"application/ps";case"504b0304":case"504b0506":case"504b0508":return"application/zip";case"377abcaf":return"application/7z";case"75737461":return"application/tar";case"7801730d":return"application/dmg";default:switch(e.substring(0,6)){case"435753":return"application/x-shockwave-flash";case"494433":return"audio/mp3";case"425a68":return"application/bzip";default:switch(e.substring(0,4)){case"424d":return"image/bmp";case"fffb":return"audio/mp3";case"4d5a":return"application/exe";case"1f9d":case"1fa0":return"application/zip";case"1f8b":return"application/gzip";default:return t&&!t.match(/[^\u0000-\u007f]/)?"application/text-plain":i}}}},addCss:function(e,t){e.removeClass(t).addClass(t)},getElement:function(i,n,s){return t.isEmpty(i)||t.isEmpty(i[n])?s:e(i[n])},uniqId:function(){return Math.round((new Date).getTime())+"_"+Math.round(Math.random()*100)},htmlEncode:function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")},replaceTags:function(t,i){var n=t;if(!i){return n}e.each(i,function(e,t){if(typeof t==="function"){t=t()}n=n.split(e).join(t)});return n},cleanMemory:function(e){var i=e.is("img")?e.attr("src"):e.find("source").attr("src");t.objUrl.revokeObjectURL(i)},findFileName:function(e){var t=e.lastIndexOf("/");if(t===-1){t=e.lastIndexOf("\\")}return e.split(e.substring(t,t+1)).pop()},checkFullScreen:function(){return document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement||document.msFullscreenElement},toggleFullScreen:function(e){var i=document,n=i.documentElement;if(n&&e&&!t.checkFullScreen()){if(n.requestFullscreen){n.requestFullscreen()}else if(n.msRequestFullscreen){n.msRequestFullscreen()}else if(n.mozRequestFullScreen){n.mozRequestFullScreen()}else if(n.webkitRequestFullscreen){n.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)}}else{if(i.exitFullscreen){i.exitFullscreen()}else if(i.msExitFullscreen){i.msExitFullscreen()}else if(i.mozCancelFullScreen){i.mozCancelFullScreen()}else if(i.webkitExitFullscreen){i.webkitExitFullscreen()}}},moveArray:function(e,t,i){if(i>=e.length){var n=i-e.length;while(n--+1){e.push(undefined)}}e.splice(i,0,e.splice(t,1)[0]);return e},cleanZoomCache:function(e){var t=e.closest(".kv-zoom-cache-theme");if(!t.length){t=e.closest(".kv-zoom-cache")}t.remove()},setOrientation:function(e,t){var i=new DataView(e),n=0,s=1,r,a,o;if(i.getUint16(n)!==65496||e.length<2){if(t){t()}return}n+=2;r=i.byteLength;while(n<r-2){a=i.getUint16(n);n+=2;switch(a){case 65505:o=i.getUint16(n);r=o-n;n+=2;break;case 274:s=i.getUint16(n+6,false);r=0;break}}if(t){t(s)}},validateOrientation:function(e,i){if(!window.FileReader||!window.DataView){return}var n=new FileReader,s;n.onloadend=function(){s=n.result;t.setOrientation(s,i)};n.readAsArrayBuffer(e)},adjustOrientedImage:function(e,t){var i,n,s;if(!e.hasClass("is-portrait-gt4")){return}if(t){e.css({width:e.parent().height()});return}else{e.css({height:"auto",width:e.height()})}i=e.parent().offset().top;n=e.offset().top;s=i-n;e.css("margin-top",s)},closeButton:function(e){e=e?"close "+e:"close";return'<button type="button" class="'+e+'" aria-label="Close">\n'+'  <span aria-hidden="true">&times;</span>\n'+"</button>"}};i=function(i,n){var s=this;s.$element=e(i);s.$parent=s.$element.parent();if(!s._validate()){return}s.isPreviewable=t.hasFileAPISupport();s.isIE9=t.isIE(9);s.isIE10=t.isIE(10);if(s.isPreviewable||s.isIE9){s._init(n);s._listen()}s.$element.removeClass("file-loading")};i.prototype={constructor:i,_cleanup:function(){var e=this;e.reader=null;e.formdata={};e.uploadCount=0;e.uploadStatus={};e.uploadLog=[];e.uploadAsyncCount=0;e.loadedImages=[];e.totalImagesCount=0;e.ajaxRequests=[];e.clearStack();e.fileInputCleared=false;e.fileBatchCompleted=true;if(!e.isPreviewable){e.showPreview=false}e.isError=false;e.ajaxAborted=false;e.cancelling=false},_init:function(i,n){var s=this,r,a=s.$element,o,l,u;s.options=i;e.each(i,function(e,i){switch(e){case"minFileCount":case"maxFileCount":case"minFileSize":case"maxFileSize":case"maxFilePreviewSize":case"resizeImageQuality":case"resizeIfSizeMoreThan":case"progressUploadThreshold":case"initialPreviewCount":case"zoomModalHeight":case"minImageHeight":case"maxImageHeight":case"minImageWidth":case"maxImageWidth":s[e]=t.getNum(i);break;default:s[e]=i;break}});if(s.rtl){u=s.previewZoomButtonIcons.prev;s.previewZoomButtonIcons.prev=s.previewZoomButtonIcons.next;s.previewZoomButtonIcons.next=u}if(!n){s._cleanup()}s.$form=a.closest("form");s._initTemplateDefaults();s.uploadFileAttr=!t.isEmpty(a.attr("name"))?a.attr("name"):"file_data";l=s._getLayoutTemplate("progress");s.progressTemplate=l.replace("{class}",s.progressClass);s.progressCompleteTemplate=l.replace("{class}",s.progressCompleteClass);s.progressErrorTemplate=l.replace("{class}",s.progressErrorClass);s.dropZoneEnabled=t.hasDragDropSupport()&&s.dropZoneEnabled;s.isDisabled=a.attr("disabled")||a.attr("readonly");if(s.isDisabled){a.attr("disabled",true)}s.isAjaxUpload=t.hasFileUploadSupport()&&!t.isEmpty(s.uploadUrl);s.isClickable=s.browseOnZoneClick&&s.showPreview&&(s.isAjaxUpload&&s.dropZoneEnabled||!t.isEmpty(s.defaultPreviewContent));s.slug=typeof i.slugCallback==="function"?i.slugCallback:s._slugDefault;s.mainTemplate=s.showCaption?s._getLayoutTemplate("main1"):s._getLayoutTemplate("main2");s.captionTemplate=s._getLayoutTemplate("caption");s.previewGenericTemplate=s._getPreviewTemplate("generic");if(!s.imageCanvas&&s.resizeImage&&(s.maxImageWidth||s.maxImageHeight)){s.imageCanvas=document.createElement("canvas");s.imageCanvasContext=s.imageCanvas.getContext("2d")}if(t.isEmpty(a.attr("id"))){a.attr("id",t.uniqId())}s.namespace=".fileinput_"+a.attr("id").replace(/-/g,"_");if(s.$container===undefined){s.$container=s._createContainer()}else{s._refreshContainer()}o=s.$container;s.$dropZone=o.find(".file-drop-zone");s.$progress=o.find(".kv-upload-progress");s.$btnUpload=o.find(".fileinput-upload");s.$captionContainer=t.getElement(i,"elCaptionContainer",o.find(".file-caption"));s.$caption=t.getElement(i,"elCaptionText",o.find(".file-caption-name"));if(!t.isEmpty(s.msgPlaceholder)){r=a.attr("multiple")?s.filePlural:s.fileSingle;s.$caption.attr("placeholder",s.msgPlaceholder.replace("{files}",r))}s.$captionIcon=s.$captionContainer.find(".file-caption-icon");if(s.mainClass.indexOf("input-group-lg")>-1){t.addCss(s.$captionIcon,"icon-lg")}else{s.$captionIcon.removeClass("icon-lg")}s.$previewContainer=t.getElement(i,"elPreviewContainer",o.find(".file-preview"));s.$preview=t.getElement(i,"elPreviewImage",o.find(".file-preview-thumbnails"));s.$previewStatus=t.getElement(i,"elPreviewStatus",o.find(".file-preview-status"));s.$errorContainer=t.getElement(i,"elErrorContainer",s.$previewContainer.find(".kv-fileinput-error"));s._validateDisabled();if(!t.isEmpty(s.msgErrorClass)){t.addCss(s.$errorContainer,s.msgErrorClass)}if(!n){s.$errorContainer.hide();s.previewInitId="preview-"+t.uniqId();s._initPreviewCache();s._initPreview(true);s._initPreviewActions();s._setFileDropZoneTitle();if(s.$parent.hasClass("file-loading")){s.$container.insertBefore(s.$parent);s.$parent.remove()}}if(a.attr("disabled")){s.disable()}s._initZoom();if(s.hideThumbnailContent){t.addCss(s.$preview,"hide-content")}},_initTemplateDefaults:function(){var i=this,n,s,r,a,o,l,u,f,c,d,h,p,m,g,v,y,b,w,x,C,T,_,k,D,S,$,A,E,M,P,O,F,I,j,N,U,L,R;n="{preview}\n"+'<div class="kv-upload-progress kv-hidden"></div><div class="clearfix"></div>\n'+'<div class="input-group {class}">\n'+"  {caption}\n"+'<div class="input-group-btn">\n'+"      {remove}\n"+"      {cancel}\n"+"      {upload}\n"+"      {browse}\n"+"    </div>\n"+"</div>";s='{preview}\n<div class="kv-upload-progress kv-hidden"></div>\n<div class="clearfix"></div>\n{remove}\n{cancel}\n{upload}\n{browse}\n';r='<div class="file-preview {class}">\n'+"    {close}"+'    <div class="{dropClass}">\n'+'    <div class="file-preview-thumbnails">\n'+"    </div>\n"+'    <div class="clearfix"></div>'+'    <div class="file-preview-status text-center text-success"></div>\n'+'    <div class="kv-fileinput-error"></div>\n'+"    </div>\n"+"</div>";o=t.closeButton("fileinput-remove");a='<i class="glyphicon glyphicon-file"></i>';l='<div class="file-caption form-control {class}" tabindex="500">\n'+'  <span class="file-caption-icon"></span>\n'+'  <input class="file-caption-name" onkeydown="return false;" onpaste="return false;">\n'+"</div>";u='<button type="{type}" tabindex="500" title="{title}" class="{css}" '+"{status}>{icon} {label}</button>";f='<a href="{href}" tabindex="500" title="{title}" class="{css}" {status}>{icon} {label}</a>';c='<div tabindex="500" class="{css}" {status}>{icon} {label}</div>';d='<div id="'+t.MODAL_ID+'" class="file-zoom-dialog modal fade" '+'tabindex="-1" aria-labelledby="'+t.MODAL_ID+'Label"></div>';h='<div class="modal-dialog modal-lg{rtl}" role="document">\n'+'  <div class="modal-content">\n'+'    <div class="modal-header">\n'+'      <h5 class="modal-title">{heading}</h5>\n'+'      <span class="kv-zoom-title"></span>\n'+'      <div class="kv-zoom-actions">{toggleheader}{fullscreen}{borderless}{close}</div>\n'+"    </div>\n"+'    <div class="modal-body">\n'+'      <div class="floating-buttons"></div>\n'+'      <div class="kv-zoom-body file-zoom-content {zoomFrameClass}"></div>\n'+"{prev} {next}\n"+"    </div>\n"+"  </div>\n"+"</div>\n";p='<div class="progress">\n'+'    <div class="{class}" role="progressbar"'+' aria-valuenow="{percent}" aria-valuemin="0" aria-valuemax="100" style="width:{percent}%;">\n'+"        {status}\n"+"     </div>\n"+"</div>";m=" <samp>({sizeText})</samp>";g='<div class="file-thumbnail-footer">\n'+'    <div class="file-footer-caption" title="{caption}">\n'+'        <div class="file-caption-info">{caption}</div>\n'+'        <div class="file-size-info">{size}</div>\n'+"    </div>\n"+"    {progress}\n{indicator}\n{actions}\n"+"</div>";v='<div class="file-actions">\n'+'    <div class="file-footer-buttons">\n'+"        {download} {upload} {delete} {zoom} {other}"+"    </div>\n"+"</div>\n"+"{drag}\n"+'<div class="clearfix"></div>';y='<button type="button" class="kv-file-remove {removeClass}" '+'title="{removeTitle}" {dataUrl}{dataKey}>{removeIcon}</button>\n';b='<button type="button" class="kv-file-upload {uploadClass}" title="{uploadTitle}">'+"{uploadIcon}</button>";w='<button type="button" class="kv-file-download {downloadClass}" title="{downloadTitle}" '+'data-url="{downloadUrl}" data-caption="{caption}">{downloadIcon}</button>';x='<button type="button" class="kv-file-zoom {zoomClass}" '+'title="{zoomTitle}">{zoomIcon}</button>';C='<span class="file-drag-handle {dragClass}" title="{dragTitle}">{dragIcon}</span>';T='<div class="file-upload-indicator" title="{indicatorTitle}">{indicator}</div>';_='<div class="file-preview-frame {frameClass}" id="{previewId}" data-fileindex="{fileindex}"'+' data-template="{template}"';k=_+'><div class="kv-file-content">\n';D=_+' title="{caption}"><div class="kv-file-content">\n';S="</div>{footer}\n</div>\n";$="{content}\n";A='<div class="kv-preview-data file-preview-html" title="{caption}" {style}>{data}</div>\n';E='<img src="{data}" class="file-preview-image kv-preview-data" title="{caption}" '+'alt="{caption}" {style}>\n';M='<textarea class="kv-preview-data file-preview-text" title="{caption}" readonly {style}>'+"{data}</textarea>\n";P='<iframe class="kv-preview-data file-preview-office" '+'src="https://docs.google.com/gview?url={data}&embedded=true" {style}></iframe>';O='<video class="kv-preview-data file-preview-video" controls {style}>\n'+'<source src="{data}" type="{type}">\n'+t.DEFAULT_PREVIEW+"\n</video>\n";F='<audio class="kv-preview-data file-preview-audio" controls {style}>\n<source src="{data}" '+'type="{type}">\n'+t.DEFAULT_PREVIEW+"\n</audio>\n";I='<embed class="kv-preview-data file-preview-flash" src="{data}" type="application/x-shockwave-flash" {style}>\n';N='<embed class="kv-preview-data file-preview-pdf" src="{data}" type="application/pdf" {style}>\n';j='<object class="kv-preview-data file-preview-object file-object {typeCss}" '+'data="{data}" type="{type}" {style}>\n'+'<param name="movie" value="{caption}" />\n'+t.OBJECT_PARAMS+" "+t.DEFAULT_PREVIEW+"\n</object>\n";U='<div class="kv-preview-data file-preview-other-frame" {style}>\n'+t.DEFAULT_PREVIEW+"\n</div>\n";L='<div class="kv-zoom-cache" style="display:none">{zoomContent}</div>';R={width:"100%",height:"100%","min-height":"480px"};i.defaults={layoutTemplates:{main1:n,main2:s,preview:r,close:o,fileIcon:a,caption:l,modalMain:d,modal:h,progress:p,size:m,footer:g,indicator:T,actions:v,actionDelete:y,actionUpload:b,actionDownload:w,actionZoom:x,actionDrag:C,btnDefault:u,btnLink:f,btnBrowse:c,zoomCache:L},previewMarkupTags:{tagBefore1:k,tagBefore2:D,tagAfter:S},previewContentTemplates:{generic:$,html:A,image:E,text:M,office:P,video:O,audio:F,flash:I,object:j,pdf:N,other:U},allowedPreviewTypes:["image","html","text","video","audio","flash","pdf","object"],previewTemplates:{},previewSettings:{image:{width:"auto",height:"auto","max-width":"100%","max-height":"100%"},html:{width:"213px",height:"160px"},text:{width:"213px",height:"160px"},office:{width:"213px",height:"160px"},video:{width:"213px",height:"160px"},audio:{width:"100%",height:"30px"},flash:{width:"213px",height:"160px"},object:{width:"213px",height:"160px"},pdf:{width:"213px",height:"160px"},other:{width:"213px",height:"160px"}},previewSettingsSmall:{image:{width:"auto",height:"auto","max-width":"100%","max-height":"100%"},html:{width:"100%",height:"160px"},text:{width:"100%",height:"160px"},office:{width:"100%",height:"160px"},video:{width:"100%",height:"auto"},audio:{width:"100%",height:"30px"},flash:{width:"100%",height:"auto"},object:{width:"100%",height:"auto"},pdf:{width:"100%",height:"160px"},other:{width:"100%",height:"160px"}},previewZoomSettings:{image:{width:"auto",height:"auto","max-width":"100%","max-height":"100%"},html:R,text:R,office:{width:"100%",height:"100%","max-width":"100%","min-height":"480px"},video:{width:"auto",height:"100%","max-width":"100%"},audio:{width:"100%",height:"30px"},flash:{width:"auto",height:"480px"},object:{width:"auto",height:"100%","max-width":"100%","min-height":"480px"},pdf:R,other:{width:"auto",height:"100%","min-height":"480px"}},fileTypeSettings:{image:function(e,i){return t.compare(e,"image.*")&&!t.compare(e,/(tiff?|wmf)$/i)||t.compare(i,/\.(gif|png|jpe?g)$/i)},html:function(e,i){return t.compare(e,"text/html")||t.compare(i,/\.(htm|html)$/i)},office:function(e,i){return t.compare(e,/(word|excel|powerpoint|office|iwork-pages|tiff?)$/i)||t.compare(i,/\.(rtf|docx?|xlsx?|pptx?|pps|potx?|ods|odt|pages|ai|dxf|ttf|tiff?|wmf|e?ps)$/i)},text:function(e,i){return t.compare(e,"text.*")||t.compare(i,/\.(xml|javascript)$/i)||t.compare(i,/\.(txt|md|csv|nfo|ini|json|php|js|css)$/i)},video:function(e,i){return t.compare(e,"video.*")&&(t.compare(e,/(ogg|mp4|mp?g|mov|webm|3gp)$/i)||t.compare(i,/\.(og?|mp4|webm|mp?g|mov|3gp)$/i))},audio:function(e,i){return t.compare(e,"audio.*")&&(t.compare(i,/(ogg|mp3|mp?g|wav)$/i)||t.compare(i,/\.(og?|mp3|mp?g|wav)$/i))},flash:function(e,i){return t.compare(e,"application/x-shockwave-flash",true)||t.compare(i,/\.(swf)$/i)},pdf:function(e,i){return t.compare(e,"application/pdf",true)||t.compare(i,/\.(pdf)$/i)},object:function(){return true},other:function(){return true}},fileActionSettings:{showRemove:true,showUpload:true,showDownload:true,showZoom:true,showDrag:true,removeIcon:'<i class="glyphicon glyphicon-trash"></i>',removeClass:"btn btn-kv btn-default btn-outline-secondary",removeErrorClass:"btn btn-kv btn-danger",removeTitle:"Remove file",uploadIcon:'<i class="glyphicon glyphicon-upload"></i>',uploadClass:"btn btn-kv btn-default btn-outline-secondary",uploadTitle:"Upload file",uploadRetryIcon:'<i class="glyphicon glyphicon-repeat"></i>',uploadRetryTitle:"Retry upload",downloadIcon:'<i class="glyphicon glyphicon-download"></i>',downloadClass:"btn btn-kv btn-default btn-outline-secondary",downloadTitle:"Download file",zoomIcon:'<i class="glyphicon glyphicon-zoom-in"></i>',zoomClass:"btn btn-kv btn-default btn-outline-secondary",zoomTitle:"View Details",dragIcon:'<i class="glyphicon glyphicon-move"></i>',dragClass:"text-info",dragTitle:"Move / Rearrange",dragSettings:{},indicatorNew:'<i class="glyphicon glyphicon-plus-sign text-warning"></i>',indicatorSuccess:'<i class="glyphicon glyphicon-ok-sign text-success"></i>',indicatorError:'<i class="glyphicon glyphicon-exclamation-sign text-danger"></i>',indicatorLoading:'<i class="glyphicon glyphicon-hourglass text-muted"></i>',indicatorNewTitle:"Not uploaded yet",indicatorSuccessTitle:"Uploaded",indicatorErrorTitle:"Upload Error",indicatorLoadingTitle:"Uploading ..."}};e.each(i.defaults,function(t,n){if(t==="allowedPreviewTypes"){if(i.allowedPreviewTypes===undefined){i.allowedPreviewTypes=n}return}i[t]=e.extend(true,{},n,i[t])});i._initPreviewTemplates()},_initPreviewTemplates:function(){var i=this,n=i.defaults,s=i.previewMarkupTags,r,a=s.tagAfter;e.each(n.previewContentTemplates,function(e,n){if(t.isEmpty(i.previewTemplates[e])){r=s.tagBefore2;if(e==="generic"||e==="image"||e==="html"||e==="text"){r=s.tagBefore1}i.previewTemplates[e]=r+n+a}})},_initPreviewCache:function(){var i=this;i.previewCache={data:{},init:function(){var e=i.initialPreview;if(e.length>0&&!t.isArray(e)){e=e.split(i.initialPreviewDelimiter)}i.previewCache.data={content:e,config:i.initialPreviewConfig,tags:i.initialPreviewThumbTags}},count:function(){return!!i.previewCache.data&&!!i.previewCache.data.content?i.previewCache.data.content.length:0},get:function(n,s){var r="init_"+n,a=i.previewCache.data,o=a.config[n],l=a.content[n],u=i.previewInitId+"-"+r,f,c,d,h,p,m,g,v=t.ifSet("previewAsData",o,i.initialPreviewAsData),y=function(e,n,s,r,a,o,l,u,f){u=" file-preview-initial "+t.SORT_CSS+(u?" "+u:"");return i._generatePreviewTemplate(e,n,s,r,a,false,null,u,o,l,f)};if(!l){return""}s=s===undefined?true:s;d=t.ifSet("type",o,i.initialPreviewFileType||"generic");p=t.ifSet("filename",o,t.ifSet("caption",o));m=t.ifSet("filetype",o,d);h=i.previewCache.footer(n,s,o&&o.size||null);g=t.ifSet("frameClass",o);if(v){f=y(d,l,p,m,u,h,r,g)}else{f=y("generic",l,p,m,u,h,r,g,d).setTokens({content:a.content[n]})}if(a.tags.length&&a.tags[n]){f=t.replaceTags(f,a.tags[n])}if(!t.isEmpty(o)&&!t.isEmpty(o.frameAttr)){c=e(document.createElement("div")).html(f);c.find(".file-preview-initial").attr(o.frameAttr);f=c.html();c.remove()}return f},add:function(e,n,s,r){var a=i.previewCache.data,o;if(!t.isArray(e)){e=e.split(i.initialPreviewDelimiter)}if(r){o=a.content.push(e)-1;a.config[o]=n;a.tags[o]=s}else{o=e.length-1;a.content=e;a.config=n;a.tags=s}i.previewCache.data=a;return o},set:function(e,n,s,r){var a=i.previewCache.data,o,l;if(!e||!e.length){return}if(!t.isArray(e)){e=e.split(i.initialPreviewDelimiter)}l=e.filter(function(e){return e!==null});if(!l.length){return}if(a.content===undefined){a.content=[]}if(a.config===undefined){a.config=[]}if(a.tags===undefined){a.tags=[]}if(r){for(o=0;o<e.length;o++){if(e[o]){a.content.push(e[o])}}for(o=0;o<n.length;o++){if(n[o]){a.config.push(n[o])}}for(o=0;o<s.length;o++){if(s[o]){a.tags.push(s[o])}}}else{a.content=e;a.config=n;a.tags=s}i.previewCache.data=a},unset:function(e){var t=i.previewCache.count();if(!t){return}if(t===1){i.previewCache.data.content=[];i.previewCache.data.config=[];i.previewCache.data.tags=[];i.initialPreview=[];i.initialPreviewConfig=[];i.initialPreviewThumbTags=[];return}i.previewCache.data.content.splice(e,1);i.previewCache.data.config.splice(e,1);i.previewCache.data.tags.splice(e,1)},out:function(){var e="",t,n=i.previewCache.count(),s;if(n===0){return{content:"",caption:""}}for(s=0;s<n;s++){e+=i.previewCache.get(s)}t=i._getMsgSelected(n);return{content:e,caption:t}},footer:function(e,n,s){var r=i.previewCache.data||{};if(t.isEmpty(r.content)){return""}if(t.isEmpty(r.config)||t.isEmpty(r.config[e])){r.config[e]={}}n=n===undefined?true:n;var a=r.config[e],o=t.ifSet("caption",a),l,u=t.ifSet("width",a,"auto"),f=t.ifSet("url",a,false),c=t.ifSet("key",a,null),d=i.fileActionSettings,h=i.initialPreviewShowDelete||false,p=a.downloadUrl||i.initialPreviewDownloadUrl||"",m=a.filename||a.caption||"",g=!!p,v=t.ifSet("showDelete",a,t.ifSet("showDelete",d,h)),y=t.ifSet("showDownload",a,t.ifSet("showDownload",d,g)),b=t.ifSet("showZoom",a,t.ifSet("showZoom",d,true)),w=t.ifSet("showDrag",a,t.ifSet("showDrag",d,true)),x=f===false&&n;y=y&&a.downloadUrl!==false&&!!p;l=i._renderFileActions(false,y,v,b,w,x,f,c,true,p,m);return i._getLayoutTemplate("footer").setTokens({progress:i._renderThumbProgress(),actions:l,caption:o,size:i._getSize(s),width:u,indicator:""})}};i.previewCache.init()},_handler:function(e,t,i){var n=this,s=n.namespace,r=t.split(" ").join(s+" ")+s;if(!e||!e.length){return}e.off(r).on(r,i)},_log:function(e){var t=this,i=t.$element.attr("id");if(i){e='"'+i+'": '+e}if(typeof window.console.log!=="undefined"){window.console.log(e)}else{window.alert(e)}},_validate:function(){var e=this,t=e.$element.attr("type")==="file";if(!t){e._log('The input "type" must be set to "file" for initializing the "bootstrap-fileinput" plugin.')}return t},_errorsExist:function(){var t=this,i,n=t.$errorContainer.find("li");if(n.length){return true}i=e(document.createElement("div")).html(t.$errorContainer.html());i.find(".kv-error-close").remove();i.find("ul").remove();return!!e.trim(i.text()).length},_errorHandler:function(e,t){var i=this,n=e.target.error,s=function(e){i._showError(e.replace("{name}",t))};if(n.code===n.NOT_FOUND_ERR){s(i.msgFileNotFound)}else if(n.code===n.SECURITY_ERR){s(i.msgFileSecured)}else if(n.code===n.NOT_READABLE_ERR){s(i.msgFileNotReadable)}else if(n.code===n.ABORT_ERR){s(i.msgFilePreviewAborted)}else{s(i.msgFilePreviewError)}},_addError:function(e){var t=this,i=t.$errorContainer;if(e&&i.length){i.html(t.errorCloseButton+e);t._handler(i.find(".kv-error-close"),"click",function(){setTimeout(function(){if(t.showPreview&&!t.getFrames().length){t.clear()}i.fadeOut("slow")},10)})}},_setValidationError:function(e){var i=this;e=(e?e+" ":"")+"has-error";i.$container.removeClass(e).addClass("has-error");t.addCss(i.$captionContainer,"is-invalid")},_resetErrors:function(e){var t=this,i=t.$errorContainer;t.isError=false;t.$container.removeClass("has-error");t.$captionContainer.removeClass("is-invalid");i.html("");if(e){i.fadeOut("slow")}else{i.hide()}},_showFolderError:function(e){var t=this,i=t.$errorContainer,n;if(!e){return}n=t.msgFoldersNotAllowed.replace("{n}",e);t._addError(n);t._setValidationError();i.fadeIn(800);t._raise("filefoldererror",[e,n])},_showUploadError:function(e,t,i){var n=this,s=n.$errorContainer,r=i||"fileuploaderror",a=t&&t.id?'<li data-file-id="'+t.id+'">'+e+"</li>":"<li>"+e+"</li>";if(s.find("ul").length===0){n._addError("<ul>"+a+"</ul>")}else{s.find("ul").append(a)}s.fadeIn(800);n._raise(r,[t,e]);n._setValidationError("file-input-new");return true},_showError:function(e,t,i){var n=this,s=n.$errorContainer,r=i||"fileerror";t=t||{};t.reader=n.reader;n._addError(e);s.fadeIn(800);n._raise(r,[t,e]);if(!n.isAjaxUpload){n._clearFileInput()}n._setValidationError("file-input-new");n.$btnUpload.attr("disabled",true);return true},_noFilesError:function(e){var t=this,i=t.minFileCount>1?t.filePlural:t.fileSingle,n=t.msgFilesTooLess.replace("{n}",t.minFileCount).replace("{files}",i),s=t.$errorContainer;t._addError(n);t.isError=true;t._updateFileDetails(0);s.fadeIn(800);t._raise("fileerror",[e,n]);t._clearFileInput();t._setValidationError()},_parseError:function(t,i,n,s){var r=this,a=e.trim(n+""),o,l=i.responseJSON!==undefined&&i.responseJSON.error!==undefined?i.responseJSON.error:i.responseText;if(r.cancelling&&r.msgUploadAborted){a=r.msgUploadAborted}if(r.showAjaxErrorDetails&&l){l=e.trim(l.replace(/\n\s*\n/g,"\n"));o=l.length?"<pre>"+l+"</pre>":"";a+=a?o:l}if(!a){a=r.msgAjaxError.replace("{operation}",t)}r.cancelling=false;return s?"<b>"+s+": </b>"+a:a},_parseFileType:function(e,i){var n=this,s,r,a,o,l=n.allowedPreviewTypes||[];if(e==="application/text-plain"){return"text"}for(o=0;o<l.length;o++){a=l[o];s=n.fileTypeSettings[a];r=s(e,i)?a:"";if(!t.isEmpty(r)){return r}}return"other"},_getPreviewIcon:function(t){var i=this,n,s=null;if(t&&t.indexOf(".")>-1){n=t.split(".").pop();if(i.previewFileIconSettings){s=i.previewFileIconSettings[n]||i.previewFileIconSettings[n.toLowerCase()]||null}if(i.previewFileExtSettings){e.each(i.previewFileExtSettings,function(e,t){if(i.previewFileIconSettings[e]&&t(n)){s=i.previewFileIconSettings[e];return}})}}return s},_parseFilePreviewIcon:function(e,t){var i=this,n=i._getPreviewIcon(t)||i.previewFileIcon,s=e;if(s.indexOf("{previewFileIcon}")>-1){s=s.setTokens({previewFileIconClass:i.previewFileIconClass,previewFileIcon:n})}return s},_raise:function(t,i){var n=this,s=e.Event(t);if(i!==undefined){n.$element.trigger(s,i)}else{n.$element.trigger(s)}if(s.isDefaultPrevented()||s.result===false){return false}switch(t){case"filebatchuploadcomplete":case"filebatchuploadsuccess":case"fileuploaded":case"fileclear":case"filecleared":case"filereset":case"fileerror":case"filefoldererror":case"fileuploaderror":case"filebatchuploaderror":case"filedeleteerror":case"filecustomerror":case"filesuccessremove":break;default:if(!n.ajaxAborted){n.ajaxAborted=s.result}break}return true},_listenFullScreen:function(e){var t=this,i=t.$modal,n,s;if(!i||!i.length){return}n=i&&i.find(".btn-fullscreen");s=i&&i.find(".btn-borderless");if(!n.length||!s.length){return}n.removeClass("active").attr("aria-pressed","false");s.removeClass("active").attr("aria-pressed","false");if(e){n.addClass("active").attr("aria-pressed","true")}else{s.addClass("active").attr("aria-pressed","true")}if(i.hasClass("file-zoom-fullscreen")){t._maximizeZoomDialog()}else{if(e){t._maximizeZoomDialog()}else{s.removeClass("active").attr("aria-pressed","false")}}},_listen:function(){var i=this,n=i.$element,s=i.$form,r=i.$container,a;i._handler(n,"change",e.proxy(i._change,i));if(i.showBrowse){i._handler(i.$btnFile,"click",e.proxy(i._browse,i))}i._handler(r.find(".fileinput-remove:not([disabled])"),"click",e.proxy(i.clear,i));i._handler(r.find(".fileinput-cancel"),"click",e.proxy(i.cancel,i));i._initDragDrop();i._handler(s,"reset",e.proxy(i.clear,i));if(!i.isAjaxUpload){i._handler(s,"submit",e.proxy(i._submitForm,i))}i._handler(i.$container.find(".fileinput-upload"),"click",e.proxy(i._uploadClick,i));i._handler(e(window),"resize",function(){i._listenFullScreen(screen.width===window.innerWidth&&screen.height===window.innerHeight)});a="webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange";i._handler(e(document),a,function(){i._listenFullScreen(t.checkFullScreen())});i._autoFitContent();i._initClickable()},_autoFitContent:function(){var t=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,i=this,n=t<400?i.previewSettingsSmall||i.defaults.previewSettingsSmall:i.previewSettings||i.defaults.previewSettings,s;e.each(n,function(e,t){s=".file-preview-frame .file-preview-"+e;i.$preview.find(s+".kv-preview-data,"+s+" .kv-preview-data").css(t)})},_initClickable:function(){var i=this,n;if(!i.isClickable){return}n=i.isAjaxUpload?i.$dropZone:i.$preview.find(".file-default-preview");t.addCss(n,"clickable");n.attr("tabindex",-1);i._handler(n,"click",function(t){var s=e(t.target);if(!n.find(".kv-fileinput-error:visible").length&&(!s.parents(".file-preview-thumbnails").length||s.parents(".file-default-preview").length)){i.$element.trigger("click");n.blur()}})},_initDragDrop:function(){var t=this,i=t.$dropZone;if(t.isAjaxUpload&&t.dropZoneEnabled&&t.showPreview){t._handler(i,"dragenter dragover",e.proxy(t._zoneDragEnter,t));t._handler(i,"dragleave",e.proxy(t._zoneDragLeave,t));t._handler(i,"drop",e.proxy(t._zoneDrop,t));t._handler(e(document),"dragenter dragover drop",t._zoneDragDropInit)}},_zoneDragDropInit:function(e){e.stopPropagation();e.preventDefault()},_zoneDragEnter:function(i){var n=this,s=e.inArray("Files",i.originalEvent.dataTransfer.types)>-1;n._zoneDragDropInit(i);if(n.isDisabled||!s){i.originalEvent.dataTransfer.effectAllowed="none";i.originalEvent.dataTransfer.dropEffect="none";return}t.addCss(n.$dropZone,"file-highlighted")},_zoneDragLeave:function(e){var t=this;t._zoneDragDropInit(e);if(t.isDisabled){return}t.$dropZone.removeClass("file-highlighted")},_zoneDrop:function(e){var i=this;e.preventDefault();if(i.isDisabled||t.isEmpty(e.originalEvent.dataTransfer.files)){return}i._change(e,"dragdrop");i.$dropZone.removeClass("file-highlighted")},_uploadClick:function(e){var i=this,n=i.$container.find(".fileinput-upload"),s,r=!n.hasClass("disabled")&&t.isEmpty(n.attr("disabled"));if(e&&e.isDefaultPrevented()){return}if(!i.isAjaxUpload){if(r&&n.attr("type")!=="submit"){s=n.closest("form");if(s.length){s.trigger("submit")}e.preventDefault()}return}e.preventDefault();if(r){i.upload()}},_submitForm:function(){var e=this;return e._isFileSelectionValid()&&!e._abort({})},_clearPreview:function(){var i=this,n=i.$preview,s=i.showUploadedThumbs?i.getFrames(":not(.file-preview-success)"):i.getFrames();s.each(function(){var i=e(this);i.remove();t.cleanZoomCache(n.find("#zoom-"+i.attr("id")))});if(!i.getFrames().length||!i.showPreview){i._resetUpload()}i._validateDefaultPreview()},_initSortable:function(){var i=this,n=i.$preview,s,r="."+t.SORT_CSS;if(!window.KvSortable||n.find(r).length===0){return}s={handle:".drag-handle-init",dataIdAttr:"data-preview-id",scroll:false,draggable:r,onSort:function(n){var s=n.oldIndex,r=n.newIndex,a,o;i.initialPreview=t.moveArray(i.initialPreview,s,r);i.initialPreviewConfig=t.moveArray(i.initialPreviewConfig,s,r);i.previewCache.init();for(var l=0;l<i.initialPreviewConfig.length;l++){if(i.initialPreviewConfig[l]!==null){o=e(n.item);a=o.closest(t.FRAMES);a.attr("data-fileindex","init_"+l).attr("data-fileindex","init_"+l)}}i._raise("filesorted",{previewId:e(n.item).attr("id"),oldIndex:s,newIndex:r,stack:i.initialPreviewConfig})}};if(n.data("kvsortable")){n.kvsortable("destroy")}e.extend(true,s,i.fileActionSettings.dragSettings);n.kvsortable(s)},_setPreviewContent:function(e){var t=this;t.$preview.html(e);t._autoFitContent()},_initPreview:function(e){var i=this,n=i.initialCaption||"",s;if(!i.previewCache.count()){i._clearPreview();if(e){i._setCaption(n)}else{i._initCaption()}return}s=i.previewCache.out();n=e&&i.initialCaption?i.initialCaption:s.caption;i._setPreviewContent(s.content);i._setInitThumbAttr();i._setCaption(n);i._initSortable();if(!t.isEmpty(s.content)){i.$container.removeClass("file-input-new")}},_getZoomButton:function(e){var t=this,i=t.previewZoomButtonIcons[e],n=t.previewZoomButtonClasses[e],s=' title="'+(t.previewZoomButtonTitles[e]||"")+'" ',r=s+(e==="close"?' data-dismiss="modal" aria-hidden="true"':"");if(e==="fullscreen"||e==="borderless"||e==="toggleheader"){r+=' data-toggle="button" aria-pressed="false" autocomplete="off"'}return'<button type="button" class="'+n+" btn-"+e+'"'+r+">"+i+"</button>"},_getModalContent:function(){var e=this;return e._getLayoutTemplate("modal").setTokens({rtl:e.rtl?" kv-rtl":"",zoomFrameClass:e.frameClass,heading:e.msgZoomModalHeading,prev:e._getZoomButton("prev"),next:e._getZoomButton("next"),toggleheader:e._getZoomButton("toggleheader"),fullscreen:e._getZoomButton("fullscreen"),borderless:e._getZoomButton("borderless"),close:e._getZoomButton("close")})},_listenModalEvent:function(e){var i=this,n=i.$modal,s=function(e){return{sourceEvent:e,previewId:n.data("previewId"),modal:n}};n.on(e+".bs.modal",function(r){var a=n.find(".btn-fullscreen"),o=n.find(".btn-borderless");i._raise("filezoom"+e,s(r));if(e==="shown"){o.removeClass("active").attr("aria-pressed","false");a.removeClass("active").attr("aria-pressed","false");if(n.hasClass("file-zoom-fullscreen")){i._maximizeZoomDialog();if(t.checkFullScreen()){a.addClass("active").attr("aria-pressed","true")}else{o.addClass("active").attr("aria-pressed","true")}}}})},_initZoom:function(){var i=this,n,s=i._getLayoutTemplate("modalMain"),r="#"+t.MODAL_ID;if(!i.showPreview){return}i.$modal=e(r);if(!i.$modal||!i.$modal.length){n=e(document.createElement("div")).html(s).insertAfter(i.$container);i.$modal=e(r).insertBefore(n);n.remove()}t.initModal(i.$modal);i.$modal.html(i._getModalContent());e.each(t.MODAL_EVENTS,function(e,t){i._listenModalEvent(t)})},_initZoomButtons:function(){var t=this,i=t.$modal.data("previewId")||"",n,s,r=t.getFrames().toArray(),a=r.length,o=t.$modal.find(".btn-prev"),l=t.$modal.find(".btn-next");if(r.length<2){o.hide();l.hide();return}else{o.show();l.show()}if(!a){return}n=e(r[0]);s=e(r[a-1]);o.removeAttr("disabled");l.removeAttr("disabled");if(n.length&&n.attr("id")===i){o.attr("disabled",true)}if(s.length&&s.attr("id")===i){l.attr("disabled",true)}},_maximizeZoomDialog:function(){var t=this,i=t.$modal,n=i.find(".modal-header:visible"),s=i.find(".modal-footer:visible"),r=i.find(".modal-body"),a=e(window).height(),o=0;i.addClass("file-zoom-fullscreen");if(n&&n.length){a-=n.outerHeight(true)}if(s&&s.length){a-=s.outerHeight(true)}if(r&&r.length){o=r.outerHeight(true)-r.height();a-=o}i.find(".kv-zoom-body").height(a)},_resizeZoomDialog:function(e){var i=this,n=i.$modal,s=n.find(".btn-fullscreen"),r=n.find(".btn-borderless");if(n.hasClass("file-zoom-fullscreen")){t.toggleFullScreen(false);if(!e){if(!s.hasClass("active")){n.removeClass("file-zoom-fullscreen");i.$modal.find(".kv-zoom-body").css("height",i.zoomModalHeight)}else{s.removeClass("active").attr("aria-pressed","false")}}else{if(!s.hasClass("active")){n.removeClass("file-zoom-fullscreen");i._resizeZoomDialog(true);if(r.hasClass("active")){r.removeClass("active").attr("aria-pressed","false")}}}}else{if(!e){i._maximizeZoomDialog();return}t.toggleFullScreen(true)}n.focus()},_setZoomContent:function(i,n){var s=this,r,a,o,l,u,f,c,d=i.attr("id"),h=s.$modal,p=h.find(".btn-prev"),m=h.find(".btn-next"),g,v=h.find(".btn-fullscreen"),y=h.find(".btn-borderless"),b,w,x=h.find(".btn-toggleheader"),C=s.$preview.find("#zoom-"+d);a=C.attr("data-template")||"generic";r=C.find(".kv-file-content");o=r.length?r.html():"";b=i.data("caption")||"";w=i.data("size")||"";l=b+" "+w;h.find(".kv-zoom-title").attr("title",e("<div/>").html(l).text()).html(l);u=h.find(".kv-zoom-body");h.removeClass("kv-single-content");if(n){g=u.addClass("file-thumb-loading").clone().insertAfter(u);u.html(o).hide();g.fadeOut("fast",function(){u.fadeIn("fast",function(){u.removeClass("file-thumb-loading")});g.remove()})}else{u.html(o)}c=s.previewZoomSettings[a];if(c){f=u.find(".kv-preview-data");t.addCss(f,"file-zoom-detail");e.each(c,function(e,t){f.css(e,t);if(f.attr("width")&&e==="width"||f.attr("height")&&e==="height"){f.removeAttr(e)}})}h.data("previewId",d);var T=u.find("img");if(T.length){t.adjustOrientedImage(T,true)}s._handler(p,"click",function(){s._zoomSlideShow("prev",d)});s._handler(m,"click",function(){s._zoomSlideShow("next",d)});s._handler(v,"click",function(){s._resizeZoomDialog(true)});s._handler(y,"click",function(){s._resizeZoomDialog(false)});s._handler(x,"click",function(){var e=h.find(".modal-header"),t=h.find(".modal-body .floating-buttons"),i,n=e.find(".kv-zoom-actions"),r=function(t){var i=s.$modal.find(".kv-zoom-body"),n=s.zoomModalHeight;if(h.hasClass("file-zoom-fullscreen")){n=i.outerHeight(true);if(!t){n=n-e.outerHeight(true)}}i.css("height",t?n+t:n)};if(e.is(":visible")){i=e.outerHeight(true);e.slideUp("slow",function(){n.find(".btn").appendTo(t);r(i)})}else{t.find(".btn").appendTo(n);e.slideDown("slow",function(){r()})}h.focus()});s._handler(h,"keydown",function(e){var t=e.which||e.keyCode;if(t===37&&!p.attr("disabled")){s._zoomSlideShow("prev",d)}if(t===39&&!m.attr("disabled")){s._zoomSlideShow("next",d)}})},_zoomPreview:function(e){var i=this,n,s=i.$modal;if(!e.length){throw"Cannot zoom to detailed preview!"}t.initModal(s);s.html(i._getModalContent());n=e.closest(t.FRAMES);i._setZoomContent(n);s.modal("show");i._initZoomButtons()},_zoomSlideShow:function(t,i){var n=this,s=n.$modal.find(".kv-zoom-actions .btn-"+t),r,a,o=n.getFrames().toArray(),l=o.length,u;if(s.attr("disabled")){return}for(a=0;a<l;a++){if(e(o[a]).attr("id")===i){u=t==="prev"?a-1:a+1;break}}if(u<0||u>=l||!o[u]){return}r=e(o[u]);if(r.length){n._setZoomContent(r,true)}n._initZoomButtons();n._raise("filezoom"+t,{previewId:i,modal:n.$modal})},_initZoomButton:function(){var t=this;t.$preview.find(".kv-file-zoom").each(function(){var i=e(this);t._handler(i,"click",function(){t._zoomPreview(i)})})},_clearObjects:function(t){t.find("video audio").each(function(){this.pause();e(this).remove()});t.find("img object div").each(function(){e(this).remove()})},_clearFileInput:function(){var i=this,n=i.$element,s,r,a;i.fileInputCleared=true;if(t.isEmpty(n.val())){return}if(i.isIE9||i.isIE10){s=n.closest("form");r=e(document.createElement("form"));a=e(document.createElement("div"));n.before(a);if(s.length){s.after(r)}else{a.after(r)}r.append(n).trigger("reset");a.before(n).remove();r.remove()}else{n.val("")}},_resetUpload:function(){var e=this;e.uploadCache={content:[],config:[],tags:[],append:true};e.uploadCount=0;e.uploadStatus={};e.uploadLog=[];e.uploadAsyncCount=0;e.loadedImages=[];e.totalImagesCount=0;e.$btnUpload.removeAttr("disabled");e._setProgress(0);e.$progress.hide();e._resetErrors(false);e.ajaxAborted=false;e.ajaxRequests=[];e._resetCanvas();e.cacheInitialPreview={};if(e.overwriteInitial){e.initialPreview=[];e.initialPreviewConfig=[];e.initialPreviewThumbTags=[];e.previewCache.data={content:[],config:[],tags:[]}}},_resetCanvas:function(){var e=this;if(e.canvas&&e.imageCanvasContext){e.imageCanvasContext.clearRect(0,0,e.canvas.width,e.canvas.height)}},_hasInitialPreview:function(){var e=this;return!e.overwriteInitial&&e.previewCache.count()},_resetPreview:function(){var e=this,t,i;if(e.previewCache.count()){t=e.previewCache.out();e._setPreviewContent(t.content);e._setInitThumbAttr();i=e.initialCaption?e.initialCaption:t.caption;e._setCaption(i)}else{e._clearPreview();e._initCaption()}if(e.showPreview){e._initZoom();e._initSortable()}},_clearDefaultPreview:function(){var e=this;e.$preview.find(".file-default-preview").remove()},_validateDefaultPreview:function(){var e=this;if(!e.showPreview||t.isEmpty(e.defaultPreviewContent)){return}e._setPreviewContent('<div class="file-default-preview">'+e.defaultPreviewContent+"</div>");e.$container.removeClass("file-input-new");e._initClickable()},_resetPreviewThumbs:function(e){var t=this,i;if(e){t._clearPreview();t.clearStack();return}if(t._hasInitialPreview()){i=t.previewCache.out();t._setPreviewContent(i.content);t._setInitThumbAttr();t._setCaption(i.caption);t._initPreviewActions()}else{t._clearPreview()}},_getLayoutTemplate:function(e){var i=this,n=i.layoutTemplates[e];if(t.isEmpty(i.customLayoutTags)){return n}return t.replaceTags(n,i.customLayoutTags)},_getPreviewTemplate:function(e){var i=this,n=i.previewTemplates[e];if(t.isEmpty(i.customPreviewTags)){return n}return t.replaceTags(n,i.customPreviewTags)},_getOutData:function(e,t,i){var n=this;e=e||{};t=t||{};i=i||n.filestack.slice(0)||{};return{form:n.formdata,files:i,filenames:n.filenames,filescount:n.getFilesCount(),extra:n._getExtraData(),response:t,reader:n.reader,jqXHR:e}},_getMsgSelected:function(e){var t=this,i=e===1?t.fileSingle:t.filePlural;return e>0?t.msgSelected.replace("{n}",e).replace("{files}",i):t.msgNoFilesSelected},_getFrame:function(t){var i=this,n=e("#"+t);if(!n.length){i._log('Invalid thumb frame with id: "'+t+'".');return null}return n},_getThumbs:function(e){e=e||"";return this.getFrames(":not(.file-preview-initial)"+e)},_getExtraData:function(e,t){var i=this,n=i.uploadExtraData;if(typeof i.uploadExtraData==="function"){n=i.uploadExtraData(e,t)}return n},_initXhr:function(e,t,i){var n=this;if(e.upload){e.upload.addEventListener("progress",function(e){var s=0,r=e.total,a=e.loaded||e.position;if(e.lengthComputable){s=Math.floor(a/r*100)}if(t){n._setAsyncUploadStatus(t,s,i)}else{n._setProgress(s)}},false)}return e},_mergeAjaxCallback:function(e,t,i){var n=this,s=n.ajaxSettings,r=n.mergeAjaxCallbacks,a;if(i==="delete"){s=n.ajaxDeleteSettings;r=n.mergeAjaxDeleteCallbacks}a=s[e];if(r&&typeof a==="function"){if(r==="before"){s[e]=function(){a.apply(this,arguments);t.apply(this,arguments)}}else{s[e]=function(){t.apply(this,arguments);a.apply(this,arguments)}}}else{s[e]=t}if(i==="delete"){n.ajaxDeleteSettings=s}else{n.ajaxSettings=s}},_ajaxSubmit:function(t,i,n,s,r,a){var o=this,l;if(!o._raise("filepreajax",[r,a])){return}o._uploadExtra(r,a);o._mergeAjaxCallback("beforeSend",t);o._mergeAjaxCallback("success",i);o._mergeAjaxCallback("complete",n);o._mergeAjaxCallback("error",s);l=e.extend(true,{},{xhr:function(){var t=e.ajaxSettings.xhr();return o._initXhr(t,r,o.getFileStack().length)},url:a&&o.uploadUrlThumb?o.uploadUrlThumb:o.uploadUrl,type:"POST",dataType:"json",data:o.formdata,cache:false,processData:false,contentType:false},o.ajaxSettings);o.ajaxRequests.push(e.ajax(l))},_mergeArray:function(e,i){var n=this,s=t.cleanArray(n[e]),r=t.cleanArray(i);n[e]=s.concat(r)},_initUploadSuccess:function(i,n,s){var r=this,a,o,l,u,f,c,d,h,p;if(!r.showPreview||typeof i!=="object"||e.isEmptyObject(i)){return}if(i.initialPreview!==undefined&&i.initialPreview.length>0){r.hasInitData=true;c=i.initialPreview||[];d=i.initialPreviewConfig||[];h=i.initialPreviewThumbTags||[];a=i.append===undefined||i.append;if(c.length>0&&!t.isArray(c)){c=c.split(r.initialPreviewDelimiter)}r._mergeArray("initialPreview",c);r._mergeArray("initialPreviewConfig",d);r._mergeArray("initialPreviewThumbTags",h);if(n!==undefined){if(!s){l=r.previewCache.add(c,d[0],h[0],a);o=r.previewCache.get(l,false);u=e(document.createElement("div")).html(o).hide().insertAfter(n);f=u.find(".kv-zoom-cache");if(f&&f.length){f.insertAfter(n)}n.fadeOut("slow",function(){var e=u.find(".file-preview-frame");if(e&&e.length){e.insertBefore(n).fadeIn("slow").css("display:inline-block")}r._initPreviewActions();r._clearFileInput();t.cleanZoomCache(r.$preview.find("#zoom-"+n.attr("id")));n.remove();u.remove();r._initSortable()})}else{p=n.attr("data-fileindex");r.uploadCache.content[p]=c[0];r.uploadCache.config[p]=d[0]||[];r.uploadCache.tags[p]=h[0]||[];r.uploadCache.append=a}}else{r.previewCache.set(c,d,h,a);r._initPreview();r._initPreviewActions()}}},_initSuccessThumbs:function(){var i=this;if(!i.showPreview){return}i._getThumbs(t.FRAMES+".file-preview-success").each(function(){var n=e(this),s=i.$preview,r=n.find(".kv-file-remove");r.removeAttr("disabled");i._handler(r,"click",function(){var e=n.attr("id"),r=i._raise("filesuccessremove",[e,n.attr("data-fileindex")]);t.cleanMemory(n);if(r===false){return}n.fadeOut("slow",function(){t.cleanZoomCache(s.find("#zoom-"+e));n.remove();if(!i.getFrames().length){i.reset()}})})})},_checkAsyncComplete:function(){var t=this,i,n;for(n=0;n<t.filestack.length;n++){if(t.filestack[n]){i=t.previewInitId+"-"+n;if(e.inArray(i,t.uploadLog)===-1){return false}}}return t.uploadAsyncCount===t.uploadLog.length},_uploadExtra:function(t,i){var n=this,s=n._getExtraData(t,i);if(s.length===0){return}e.each(s,function(e,t){n.formdata.append(e,t)})},_uploadSingle:function(i,n){var s=this,r=s.getFileStack().length,a=new FormData,o,l=s.previewInitId+"-"+i,u,f,c,d,h=s.filestack.length>0||!e.isEmptyObject(s.uploadExtraData),p,m=e("#"+l).find(".file-thumb-progress"),g,v,y,b,w,x={id:l,index:i};s.formdata=a;if(s.showPreview){u=e("#"+l+":not(.file-preview-initial)");c=u.find(".kv-file-upload");d=u.find(".kv-file-remove");m.show()}if(r===0||!h||c&&c.hasClass("disabled")||s._abort(x)){return}w=function(e,t){if(!p){s.updateStack(e,undefined)}s.uploadLog.push(t);if(s._checkAsyncComplete()){s.fileBatchCompleted=true}};f=function(){var e=s.uploadCache,i,n,r,a=0,o=s.cacheInitialPreview;if(!s.fileBatchCompleted){return}if(o&&o.content){a=o.content.length}setTimeout(function(){var l=s.getFileStack(true).length===0;if(s.showPreview){s.previewCache.set(e.content,e.config,e.tags,e.append);if(a){for(n=0;n<e.content.length;n++){r=n+a;o.content[r]=e.content[n];if(o.config.length){o.config[r]=e.config[n]}if(o.tags.length){o.tags[r]=e.tags[n]}}s.initialPreview=t.cleanArray(o.content);s.initialPreviewConfig=t.cleanArray(o.config);s.initialPreviewThumbTags=t.cleanArray(o.tags)}else{s.initialPreview=e.content;s.initialPreviewConfig=e.config;s.initialPreviewThumbTags=e.tags}s.cacheInitialPreview={};if(s.hasInitData){s._initPreview();s._initPreviewActions()}}s.unlock(l);if(l){s._clearFileInput()}i=s.$preview.find(".file-preview-initial");if(s.uploadAsync&&i.length){t.addCss(i,t.SORT_CSS);s._initSortable()}s._raise("filebatchuploadcomplete",[s.filestack,s._getExtraData()]);s.uploadCount=0;s.uploadStatus={};s.uploadLog=[];s._setProgress(101);s.ajaxAborted=false},100)};g=function(r){o=s._getOutData(r);s.fileBatchCompleted=false;if(!n){s.ajaxAborted=false}if(s.showPreview){if(!u.hasClass("file-preview-success")){s._setThumbStatus(u,"Loading");t.addCss(u,"file-uploading")}c.attr("disabled",true);d.attr("disabled",true)}if(!n){s.lock()}s._raise("filepreupload",[o,l,i]);e.extend(true,x,o);if(s._abort(x)){r.abort();if(!n){s._setThumbStatus(u,"New");u.removeClass("file-uploading");c.removeAttr("disabled");d.removeAttr("disabled");s.unlock()}s._setProgressCancelled()}};v=function(r,a,f){var d=s.showPreview&&u.attr("id")?u.attr("id"):l;o=s._getOutData(f,r);e.extend(true,x,o);setTimeout(function(){if(t.isEmpty(r)||t.isEmpty(r.error)){if(s.showPreview){s._setThumbStatus(u,"Success");c.hide();s._initUploadSuccess(r,u,n);s._setProgress(101,m)}s._raise("fileuploaded",[o,d,i]);if(!n){s.updateStack(i,undefined)}else{w(i,d)}}else{p=true;s._showUploadError(r.error,x);s._setPreviewError(u,i,s.filestack[i],s.retryErrorUploads);if(!s.retryErrorUploads){c.hide()}if(n){w(i,d)}s._setProgress(101,e("#"+d).find(".file-thumb-progress"),s.msgUploadError)}},100)};y=function(){setTimeout(function(){if(s.showPreview){c.removeAttr("disabled");d.removeAttr("disabled");u.removeClass("file-uploading")}if(!n){s.unlock(false);s._clearFileInput()}else{f()}s._initSuccessThumbs()},100)};b=function(t,r,a){var o=s.ajaxOperations.uploadThumb,f=s._parseError(o,t,a,n&&s.filestack[i].name?s.filestack[i].name:null);p=true;setTimeout(function(){if(n){w(i,l)}s.uploadStatus[l]=100;s._setPreviewError(u,i,s.filestack[i],s.retryErrorUploads);if(!s.retryErrorUploads){c.hide()}e.extend(true,x,s._getOutData(t));s._setProgress(101,m,s.msgAjaxProgressError.replace("{operation}",o));s._setProgress(101,e("#"+l).find(".file-thumb-progress"),s.msgUploadError);s._showUploadError(f,x)},100)};a.append(s.uploadFileAttr,s.filestack[i],s.filenames[i]);a.append("file_id",i);s._ajaxSubmit(g,v,y,b,l,i)},_uploadBatch:function(){var i=this,n=i.filestack,s=n.length,r={},a,o,l,u,f=i.filestack.length>0||!e.isEmptyObject(i.uploadExtraData),c;i.formdata=new FormData;if(s===0||!f||i._abort(r)){return}c=function(){e.each(n,function(e){i.updateStack(e,undefined)});i._clearFileInput()};a=function(n){i.lock();var s=i._getOutData(n);i.ajaxAborted=false;if(i.showPreview){i._getThumbs().each(function(){var n=e(this),s=n.find(".kv-file-upload"),r=n.find(".kv-file-remove");if(!n.hasClass("file-preview-success")){i._setThumbStatus(n,"Loading");t.addCss(n,"file-uploading")}s.attr("disabled",true);r.attr("disabled",true)})}i._raise("filebatchpreupload",[s]);if(i._abort(s)){n.abort();i._getThumbs().each(function(){var t=e(this),n=t.find(".kv-file-upload"),s=t.find(".kv-file-remove");if(t.hasClass("file-preview-loading")){i._setThumbStatus(t,"New");t.removeClass("file-uploading")}n.removeAttr("disabled");s.removeAttr("disabled")});i._setProgressCancelled()}};o=function(n,s,r){var a=i._getOutData(r,n),o=0,l=i._getThumbs(":not(.file-preview-success)"),u=t.isEmpty(n)||t.isEmpty(n.errorkeys)?[]:n.errorkeys;if(t.isEmpty(n)||t.isEmpty(n.error)){i._raise("filebatchuploadsuccess",[a]);c();if(i.showPreview){l.each(function(){var t=e(this);i._setThumbStatus(t,"Success");t.removeClass("file-uploading");t.find(".kv-file-upload").hide().removeAttr("disabled")});i._initUploadSuccess(n)}else{i.reset()}i._setProgress(101)}else{if(i.showPreview){l.each(function(){var t=e(this),n=t.attr("data-fileindex");t.removeClass("file-uploading");t.find(".kv-file-upload").removeAttr("disabled");t.find(".kv-file-remove").removeAttr("disabled");if(u.length===0||e.inArray(o,u)!==-1){i._setPreviewError(t,n,i.filestack[n],i.retryErrorUploads);if(!i.retryErrorUploads){t.find(".kv-file-upload").hide();i.updateStack(n,undefined)}}else{t.find(".kv-file-upload").hide();i._setThumbStatus(t,"Success");i.updateStack(n,undefined)}if(!t.hasClass("file-preview-error")||i.retryErrorUploads){o++}});i._initUploadSuccess(n)}i._showUploadError(n.error,a,"filebatchuploaderror");i._setProgress(101,i.$progress,i.msgUploadError)}};u=function(){i.unlock();i._initSuccessThumbs();i._clearFileInput();i._raise("filebatchuploadcomplete",[i.filestack,i._getExtraData()])};l=function(t,n,r){var a=i._getOutData(t),o=i.ajaxOperations.uploadBatch,l=i._parseError(o,t,r);i._showUploadError(l,a,"filebatchuploaderror");i.uploadFileCount=s-1;if(!i.showPreview){return}i._getThumbs().each(function(){var t=e(this),n=t.attr("data-fileindex");t.removeClass("file-uploading");if(i.filestack[n]!==undefined){i._setPreviewError(t)}});i._getThumbs().removeClass("file-uploading");i._getThumbs(" .kv-file-upload").removeAttr("disabled");i._getThumbs(" .kv-file-delete").removeAttr("disabled");i._setProgress(101,i.$progress,i.msgAjaxProgressError.replace("{operation}",o))};e.each(n,function(e,s){if(!t.isEmpty(n[e])){i.formdata.append(i.uploadFileAttr,s,i.filenames[e])}});i._ajaxSubmit(a,o,u,l)},_uploadExtraOnly:function(){var e=this,i={},n,s,r,a;e.formdata=new FormData;if(e._abort(i)){return}n=function(t){e.lock();var n=e._getOutData(t);e._raise("filebatchpreupload",[n]);e._setProgress(50);i.data=n;i.xhr=t;if(e._abort(i)){t.abort();e._setProgressCancelled()}};s=function(i,n,s){var r=e._getOutData(s,i);if(t.isEmpty(i)||t.isEmpty(i.error)){e._raise("filebatchuploadsuccess",[r]);e._clearFileInput();e._initUploadSuccess(i);e._setProgress(101)}else{e._showUploadError(i.error,r,"filebatchuploaderror")}};r=function(){e.unlock();e._clearFileInput();e._raise("filebatchuploadcomplete",[e.filestack,e._getExtraData()])};a=function(t,n,s){var r=e._getOutData(t),a=e.ajaxOperations.uploadExtra,o=e._parseError(a,t,s);i.data=r;e._showUploadError(o,r,"filebatchuploaderror");e._setProgress(101,e.$progress,e.msgAjaxProgressError.replace("{operation}",a))};e._ajaxSubmit(n,s,r,a)},_deleteFileIndex:function(i){var n=this,s=i.attr("data-fileindex");if(s.substring(0,5)==="init_"){s=parseInt(s.replace("init_",""));n.initialPreview=t.spliceArray(n.initialPreview,s);n.initialPreviewConfig=t.spliceArray(n.initialPreviewConfig,s);n.initialPreviewThumbTags=t.spliceArray(n.initialPreviewThumbTags,s);n.getFrames().each(function(){var t=e(this),i=t.attr("data-fileindex");if(i.substring(0,5)==="init_"){i=parseInt(i.replace("init_",""));if(i>s){i--;t.attr("data-fileindex","init_"+i)}}});if(n.uploadAsync){n.cacheInitialPreview=n.getPreview()}}},_initFileActions:function(){var i=this,n=i.$preview;if(!i.showPreview){return}i._initZoomButton();i.getFrames(" .kv-file-remove").each(function(){var s=e(this),r=s.closest(t.FRAMES),a,o=r.attr("id"),l=r.attr("data-fileindex"),u,f,c;i._handler(s,"click",function(){c=i._raise("filepreremove",[o,l]);if(c===false||!i._validateMinCount()){return false}a=r.hasClass("file-preview-error");t.cleanMemory(r);r.fadeOut("slow",function(){t.cleanZoomCache(n.find("#zoom-"+o));i.updateStack(l,undefined);i._clearObjects(r);r.remove();if(o&&a){i.$errorContainer.find('li[data-file-id="'+o+'"]').fadeOut("fast",function(){e(this).remove();if(!i._errorsExist()){i._resetErrors()}})}i._clearFileInput();var s=i.getFileStack(true),c=i.previewCache.count(),d=s.length,h=i.showPreview&&i.getFrames().length;if(d===0&&c===0&&!h){i.reset()}else{u=c+d;f=u>1?i._getMsgSelected(u):s[0]?i._getFileNames()[0]:"";i._setCaption(f)}i._raise("fileremoved",[o,l])})})});i.getFrames(" .kv-file-upload").each(function(){var n=e(this);i._handler(n,"click",function(){var e=n.closest(t.FRAMES),s=e.attr("data-fileindex");i.$progress.hide();if(e.hasClass("file-preview-error")&&!i.retryErrorUploads){return}i._uploadSingle(s,false)})})},_initPreviewActions:function(){var i=this,n=i.$preview,s=i.deleteExtraData||{},r=t.FRAMES+" .kv-file-remove",a=i.fileActionSettings,o=a.removeClass,l=a.removeErrorClass,u=function(){var e=i.isAjaxUpload?i.previewCache.count():i.$element.get(0).files.length;if(!n.find(t.FRAMES).length&&!e){i._setCaption("");i.reset();i.initialCaption=""}};i._initZoomButton();n.find(r).each(function(){var r=e(this),a=r.data("url")||i.deleteUrl,f=r.data("key"),c,d,h;if(t.isEmpty(a)||f===undefined){return}var p=r.closest(t.FRAMES),m=i.previewCache.data,g,v,y=p.attr("data-fileindex"),b,w;y=parseInt(y.replace("init_",""));b=t.isEmpty(m.config)&&t.isEmpty(m.config[y])?null:m.config[y];w=t.isEmpty(b)||t.isEmpty(b.extra)?s:b.extra;if(typeof w==="function"){w=w()}v={id:r.attr("id"),key:f,extra:w};c=function(e){i.ajaxAborted=false;i._raise("filepredelete",[f,e,w]);if(i._abort()){e.abort()}else{r.removeClass(l);t.addCss(p,"file-uploading");t.addCss(r,"disabled "+o)}};d=function(e,s,a){var c,d;if(!t.isEmpty(e)&&!t.isEmpty(e.error)){v.jqXHR=a;v.response=e;i._showError(e.error,v,"filedeleteerror");p.removeClass("file-uploading");r.removeClass("disabled "+o).addClass(l);u();return}p.removeClass("file-uploading").addClass("file-deleted");p.fadeOut("slow",function(){y=parseInt(p.attr("data-fileindex").replace("init_",""));i.previewCache.unset(y);c=i.previewCache.count();d=c>0?i._getMsgSelected(c):"";i._deleteFileIndex(p);i._setCaption(d);i._raise("filedeleted",[f,a,w]);t.cleanZoomCache(n.find("#zoom-"+p.attr("id")));i._clearObjects(p);p.remove();u()})};h=function(e,t,n){var s=i.ajaxOperations.deleteThumb,a=i._parseError(s,e,n);v.jqXHR=e;v.response={};i._showError(a,v,"filedeleteerror");p.removeClass("file-uploading");r.removeClass("disabled "+o).addClass(l);u()};i._mergeAjaxCallback("beforeSend",c,"delete");i._mergeAjaxCallback("success",d,"delete");i._mergeAjaxCallback("error",h,"delete");g=e.extend(true,{},{url:a,type:"POST",dataType:"json",data:e.extend(true,{},{key:f},w)},i.ajaxDeleteSettings);i._handler(r,"click",function(){if(!i._validateMinCount()){return false}i.ajaxAborted=false;i._raise("filebeforedelete",[f,w]);if(i.ajaxAborted instanceof Promise){i.ajaxAborted.then(function(t){if(!t){e.ajax(g)}})}else{if(!i.ajaxAborted){e.ajax(g)}}})});i.getFrames(" .kv-file-download").each(function(){var t=e(this);i._handler(t,"click",function(){var e=document.createElement("a");e.href=t.attr("data-url");e.download=t.attr("data-caption");e.target="_blank";e.click()})})},_hideFileIcon:function(){var e=this;if(e.overwriteInitial){e.$captionContainer.removeClass("icon-visible")}},_showFileIcon:function(){var e=this;t.addCss(e.$captionContainer,"icon-visible")},_getSize:function(t){var i=this,n=parseFloat(t),s,r=i.fileSizeGetter,a,o;if(!e.isNumeric(t)||!e.isNumeric(n)){return""}if(typeof r==="function"){o=r(n)}else{if(n===0){o="0.00 B"}else{s=Math.floor(Math.log(n)/Math.log(1024));a=["B","KB","MB","GB","TB","PB","EB","ZB","YB"];o=(n/Math.pow(1024,s)).toFixed(2)*1+" "+a[s]}}return i._getLayoutTemplate("size").replace("{sizeText}",o)},_generatePreviewTemplate:function(i,n,s,r,a,o,l,u,f,c,d){var h=this,p=h.slug(s),m,g="",v="",y=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,b=y<400?h.previewSettingsSmall[i]||h.defaults.previewSettingsSmall[i]:h.previewSettings[i]||h.defaults.previewSettings[i],w=f||h._renderFileFooter(p,l,"auto",o),x=h._getPreviewIcon(s),C="type-default",T=x&&h.preferIconicPreview,_=x&&h.preferIconicZoomPreview,k;if(b){e.each(b,function(e,t){v+=e+":"+t+";"})}k=function(n,o,l,f){var m=l?"zoom-"+a:a,g=h._getPreviewTemplate(n),y=(u||"")+" "+f;if(h.frameClass){y=h.frameClass+" "+y}if(l){y=y.replace(" "+t.SORT_CSS,"")}g=h._parseFilePreviewIcon(g,s);if(n==="text"){o=t.htmlEncode(o)}if(i==="object"&&!r){e.each(h.defaults.fileTypeSettings,function(e,t){if(e==="object"||e==="other"){return}if(t(s,r)){C="type-"+e}})}return g.setTokens({previewId:m,caption:p,frameClass:y,type:r,fileindex:c,typeCss:C,footer:w,data:o,template:d||i,style:v?'style="'+v+'"':""})};c=c||a.slice(a.lastIndexOf("-")+1);if(h.fileActionSettings.showZoom){g=k(_?"other":i,n,true,"kv-zoom-thumb")}g="\n"+h._getLayoutTemplate("zoomCache").replace("{zoomContent}",g);m=k(T?"other":i,n,false,"kv-preview-thumb");return m+g},_previewDefault:function(i,n,s){var r=this,a=r.$preview;if(!r.showPreview){return}var o=i?i.name:"",l=i?i.type:"",u,f=i.size||0,c=r.slug(o),d=s===true&&!r.isAjaxUpload,h=t.objUrl.createObjectURL(i);r._clearDefaultPreview();u=r._generatePreviewTemplate("other",h,o,l,n,d,f);a.append("\n"+u);r._setThumbAttr(n,c,f);if(s===true&&r.isAjaxUpload){r._setThumbStatus(e("#"+n),"Error")}},_previewFile:function(e,i,n,s,r,a){if(!this.showPreview){return}var o=this,l=i?i.name:"",u=a.type,f=a.name,c=o._parseFileType(u,l),d=o.allowedPreviewTypes,h,p=o.allowedPreviewMimeTypes,m=o.$preview,g=i.size||0,v=d&&d.indexOf(c)>=0,y=p&&p.indexOf(u)!==-1,b=c==="text"||c==="html"||c==="image"?n.target.result:r;if(c==="html"&&o.purifyHtml&&window.DOMPurify){b=window.DOMPurify.sanitize(b)}if(v||y){h=o._generatePreviewTemplate(c,b,l,u,s,false,g);o._clearDefaultPreview();m.append("\n"+h);var w=m.find("#"+s+" img");if(w.length&&o.autoOrientImage){t.validateOrientation(i,function(e){if(!e){o._validateImage(s,f,u,g,b);return}var n=m.find("#zoom-"+s+" img"),r="rotate-"+e;if(e>4){r+=w.width()>w.height()?" is-portrait-gt4":" is-landscape-gt4"}t.addCss(w,r);t.addCss(n,r);o._raise("fileimageoriented",{$img:w,file:i});o._validateImage(s,f,u,g,b);t.adjustOrientedImage(w)})}else{o._validateImage(s,f,u,g,b)}}else{o._previewDefault(i,s)}o._setThumbAttr(s,f,g);o._initSortable()},_setThumbAttr:function(t,i,n){var s=this,r=e("#"+t);if(r.length){n=n&&n>0?s._getSize(n):"";r.data({caption:i,size:n})}},_setInitThumbAttr:function(){var e=this,i=e.previewCache.data,n=e.previewCache.count(),s,r,a,o;if(n===0){return}for(var l=0;l<n;l++){s=i.config[l];o=e.previewInitId+"-"+"init_"+l;r=t.ifSet("caption",s,t.ifSet("filename",s));a=t.ifSet("size",s);e._setThumbAttr(o,r,a)}},_slugDefault:function(e){return t.isEmpty(e)?"":String(e).replace(/[\[\]\/\{}:;#%=\(\)\*\+\?\\\^\$\|<>&"']/g,"_")},_readFiles:function(i){this.reader=new FileReader;var n=this,s=n.$element,r=n.$preview,a=n.reader,o=n.$previewContainer,l=n.$previewStatus,u=n.msgLoading,f=n.msgProgress,c=n.previewInitId,d=i.length,h=n.fileTypeSettings,p=n.filestack.length,m,g=n.allowedFileTypes,v=g?g.length:0,y=n.allowedFileExtensions,b=t.isEmpty(y)?"":y.join(", "),w=n.maxFilePreviewSize&&parseFloat(n.maxFilePreviewSize),x=r.length&&(!w||isNaN(w)),C=function(t,s,r,a){var o=e.extend(true,{},n._getOutData({},{},i),{id:r,index:a}),l={id:r,index:a,file:s,files:i},u;n._previewDefault(s,r,true);if(n.isAjaxUpload){n.addToStack(undefined);setTimeout(function(){m(a+1)},100)}else{d=0}n._initFileActions();u=e("#"+r);u.find(".kv-file-upload").hide();if(n.removeFromPreviewOnError){u.remove()}n.isError=n.isAjaxUpload?n._showUploadError(t,o):n._showError(t,l);n._updateFileDetails(d)};n.loadedImages=[];n.totalImagesCount=0;e.each(i,function(e,t){var i=n.fileTypeSettings.image;if(i&&i(t.type)){n.totalImagesCount++}});m=function(T){if(t.isEmpty(s.attr("multiple"))){d=1}if(T>=d){if(n.isAjaxUpload&&n.filestack.length>0){n._raise("filebatchselected",[n.getFileStack()])}else{n._raise("filebatchselected",[i])}o.removeClass("file-thumb-loading");l.html("");return}var _=p+T,k=c+"-"+_,D=i[T],S,$,A,E=h.text,M=h.image,P=h.html,O,F,I,j,N=D.name?n.slug(D.name):"",U=(D.size||0)/1e3,L="",R=t.objUrl.createObjectURL(D),H=0,z="",Y,V=0,B,W,q,Z,G=function(){var e=f.setTokens({index:T+1,files:d,percent:50,name:N});setTimeout(function(){l.html(e);n._updateFileDetails(d);m(T+1)},100);n._raise("fileloaded",[D,k,T,a])};if(v>0){for($=0;$<v;$++){I=g[$];j=n.msgFileTypes[I]||I;z+=$===0?j:", "+j}}if(N===false){m(T+1);return}if(N.length===0){A=n.msgInvalidFileName.replace("{name}",t.htmlEncode(D.name));C(A,D,k,T);return}if(!t.isEmpty(y)){L=new RegExp("\\.("+y.join("|")+")$","i")}S=U.toFixed(2);if(n.maxFileSize>0&&U>n.maxFileSize){A=n.msgSizeTooLarge.setTokens({name:N,size:S,maxSize:n.maxFileSize});C(A,D,k,T);return}if(n.minFileSize!==null&&U<=t.getNum(n.minFileSize)){A=n.msgSizeTooSmall.setTokens({name:N,size:S,minSize:n.minFileSize});C(A,D,k,T);return}if(!t.isEmpty(g)&&t.isArray(g)){for($=0;$<g.length;$+=1){O=g[$];Y=h[O];H+=!Y||typeof Y!=="function"?0:Y(D.type,D.name)?1:0}if(H===0){A=n.msgInvalidFileType.setTokens({name:N,types:z});C(A,D,k,T);return}}if(H===0&&!t.isEmpty(y)&&t.isArray(y)&&!t.isEmpty(L)){F=t.compare(N,L);H+=t.isEmpty(F)?0:F.length;if(H===0){A=n.msgInvalidFileExtension.setTokens({name:N,extensions:b});C(A,D,k,T);return}}if(!n.showPreview){if(n.isAjaxUpload){n.addToStack(D)}setTimeout(function(){m(T+1);n._updateFileDetails(d)},100);n._raise("fileloaded",[D,k,T,a]);return}if(!x&&U>w){n.addToStack(D);o.addClass("file-thumb-loading");n._previewDefault(D,k);n._initFileActions();n._updateFileDetails(d);m(T+1);return}if(r.length&&FileReader!==undefined){B=E(D.type,N);W=P(D.type,N);q=M(D.type,N);l.html(u.replace("{index}",T+1).replace("{files}",d));o.addClass("file-thumb-loading");a.onerror=function(e){n._errorHandler(e,N)};a.onload=function(i){var s,r,o,l,u=[],f,c,d=function(e){var t=new FileReader;t.onerror=function(e){n._errorHandler(e,N)};t.onload=function(e){n._previewFile(T,D,e,k,R,r);n._initFileActions();G()};if(e){t.readAsText(D,n.textEncoding)}else{t.readAsDataURL(D)}};r={name:N,type:D.type};e.each(h,function(e,t){if(e!=="object"&&e!=="other"&&t(D.type,N)){V++}});if(V===0){o=new Uint8Array(i.target.result);for($=0;$<o.length;$++){l=o[$].toString(16);u.push(l)}s=u.join("").toLowerCase().substring(0,8);c=t.getMimeType(s,"","");if(t.isEmpty(c)){f=t.arrayBuffer2String(a.result);c=t.isSvg(f)?"image/svg+xml":t.getMimeType(s,f,D.type)}r={name:N,type:c};B=E(c,"");W=P(c,"");q=M(c,"");Z=B||W;if(Z||q){d(Z);return}}n._previewFile(T,D,i,k,R,r);n._initFileActions();G()};a.onprogress=function(e){if(e.lengthComputable){var t=e.loaded/e.total*100,i=Math.ceil(t);A=f.setTokens({index:T+1,files:d,percent:i,name:N});setTimeout(function(){l.html(A)},100)}};if(B||W){a.readAsText(D,n.textEncoding)}else{if(q){a.readAsDataURL(D)}else{a.readAsArrayBuffer(D)}}}else{n._previewDefault(D,k);setTimeout(function(){m(T+1);n._updateFileDetails(d)},100);n._raise("fileloaded",[D,k,T,a])}n.addToStack(D)};m(0);n._updateFileDetails(d,false)},_updateFileDetails:function(e){var i=this,n=i.$element,s=i.getFileStack(),r=t.isIE(9)&&t.findFileName(n.val())||n[0].files[0]&&n[0].files[0].name||s.length&&s[0].name||"",a=i.slug(r),o=i.isAjaxUpload?s.length:e,l=i.previewCache.count()+o,u=o===1?a:i._getMsgSelected(l);if(i.isError){i.$previewContainer.removeClass("file-thumb-loading");i.$previewStatus.html("");i.$captionContainer.removeClass("icon-visible")}else{i._showFileIcon()}i._setCaption(u,i.isError);i.$container.removeClass("file-input-new file-input-ajax-new");if(arguments.length===1){i._raise("fileselect",[e,a])}if(i.previewCache.count()){i._initPreviewActions()}},_setThumbStatus:function(e,t){var i=this;if(!i.showPreview){return}var n="indicator"+t,s=n+"Title",r="file-preview-"+t.toLowerCase(),a=e.find(".file-upload-indicator"),o=i.fileActionSettings;e.removeClass("file-preview-success file-preview-error file-preview-loading");if(t==="Success"){e.find(".file-drag-handle").remove()}a.html(o[n]);a.attr("title",o[s]);e.addClass(r);if(t==="Error"&&!i.retryErrorUploads){e.find(".kv-file-upload").attr("disabled",true)}},_setProgressCancelled:function(){var e=this;e._setProgress(101,e.$progress,e.msgCancelled)},_setProgress:function(e,i,n){var s=this,r=Math.min(e,100),a,o=s.progressUploadThreshold,l=e<=100?s.progressTemplate:s.progressCompleteTemplate,u=r<100?s.progressTemplate:n?s.progressErrorTemplate:l;i=i||s.$progress;if(!t.isEmpty(u)){if(o&&r>o&&e<=100){a=u.setTokens({percent:o,status:s.msgUploadThreshold})}else{a=u.setTokens({percent:r,status:e>100?s.msgUploadEnd:r+"%"})}i.html(a);if(n){i.find('[role="progressbar"]').html(n)}}},_setFileDropZoneTitle:function(){var e=this,i=e.$container.find(".file-drop-zone"),n=e.dropZoneTitle,s;if(e.isClickable){s=t.isEmpty(e.$element.attr("multiple"))?e.fileSingle:e.filePlural;n+=e.dropZoneClickTitle.replace("{files}",s)}i.find("."+e.dropZoneTitleClass).remove();if(!e.isAjaxUpload||!e.showPreview||i.length===0||e.getFileStack().length>0||!e.dropZoneEnabled){return}if(i.find(t.FRAMES).length===0&&t.isEmpty(e.defaultPreviewContent)){i.prepend('<div class="'+e.dropZoneTitleClass+'">'+n+"</div>")}e.$container.removeClass("file-input-new");t.addCss(e.$container,"file-input-ajax-new")},_setAsyncUploadStatus:function(t,i,n){var s=this,r=0;s._setProgress(i,e("#"+t).find(".file-thumb-progress"));s.uploadStatus[t]=i;e.each(s.uploadStatus,function(e,t){r+=t});s._setProgress(Math.floor(r/n))},_validateMinCount:function(){var e=this,t=e.isAjaxUpload?e.getFileStack().length:e.$element.get(0).files.length;if(e.validateInitialCount&&e.minFileCount>0&&e._getFileCount(t-1)<e.minFileCount){e._noFilesError({});return false}return true},_getFileCount:function(e){var t=this,i=0;if(t.validateInitialCount&&!t.overwriteInitial){i=t.previewCache.count();e+=i}return e},_getFileId:function(e){var t=this,i=t.generateFileId,n;if(typeof i==="function"){return i(e,event)}if(!e){return null}n=String(e.webkitRelativePath||e.fileName||e.name||null);if(!n){return null}return e.size+"-"+n.replace(/[^0-9a-zA-Z_-]/gim,"")},_getFileName:function(e){return e&&e.name?this.slug(e.name):undefined},_getFileIds:function(e){var t=this;return t.fileids.filter(function(t){return e?t!==undefined:t!==undefined&&t!==null})},_getFileNames:function(e){var t=this;return t.filenames.filter(function(t){return e?t!==undefined:t!==undefined&&t!==null})},_setPreviewError:function(e,t,i,n){var s=this;if(t!==undefined){s.updateStack(t,i)}if(!s.showPreview){return}if(s.removeFromPreviewOnError&&!n){e.remove();return}else{s._setThumbStatus(e,"Error")}s._refreshUploadButton(e,n)},_refreshUploadButton:function(e,t){var i=this,n=e.find(".kv-file-upload"),s=i.fileActionSettings,r=s.uploadIcon,a=s.uploadTitle;if(!n.length){return}if(t){r=s.uploadRetryIcon;a=s.uploadRetryTitle}n.attr("title",a).html(r)},_checkDimensions:function(e,i,n,s,r,a,o){var l=this,u,f,c=i==="Small"?"min":"max",d=l[c+"Image"+a],h,p;if(t.isEmpty(d)||!n.length){return}h=n[0];f=a==="Width"?h.naturalWidth||h.width:h.naturalHeight||h.height;p=i==="Small"?f>=d:f<=d;if(p){return}u=l["msgImage"+a+i].setTokens({name:r,size:d});l._showUploadError(u,o);l._setPreviewError(s,e,null)},_validateImage:function(t,i,n,s,r){var a=this,o=a.$preview,l,u,f,c=o.find("#"+t),d=c.attr("data-fileindex"),h=c.find("img"),p;i=i||"Untitled";h.one("load",function(){u=c.width();f=o.width();if(u>f){h.css("width","100%")}l={ind:d,id:t};a._checkDimensions(d,"Small",h,c,i,"Width",l);a._checkDimensions(d,"Small",h,c,i,"Height",l);if(!a.resizeImage){a._checkDimensions(d,"Large",h,c,i,"Width",l);a._checkDimensions(d,"Large",h,c,i,"Height",l)}a._raise("fileimageloaded",[t]);try{p=window.piexif?window.piexif.load(r):null}catch(e){p=null}a.loadedImages.push({ind:d,img:h,thumb:c,pid:t,typ:n,siz:s,validated:false,imgData:r,exifObj:p});c.data("exif",p);a._validateAllImages()}).one("error",function(){a._raise("fileimageloaderror",[t])}).each(function(){if(this.complete){e(this).trigger("load")}else{if(this.error){e(this).trigger("error")}}})},_validateAllImages:function(){var e=this,t,i={val:0},n=e.loadedImages.length,s,r,a=e.resizeIfSizeMoreThan;if(n!==e.totalImagesCount){return}e._raise("fileimagesloaded");if(!e.resizeImage){return}for(t=0;t<e.loadedImages.length;t++){s=e.loadedImages[t];if(s.validated){continue}r=s.siz;if(r&&r>a*1e3){e._getResizedImage(s,i,n)}e.loadedImages[t].validated=true}},_getResizedImage:function(i,n,s){var r=this,a=e(i.img)[0],o=a.naturalWidth,l=a.naturalHeight,u,f=1,c=r.maxImageWidth||o,d=r.maxImageHeight||l,h=!!(o&&l),p,m,g=r.imageCanvas,v,y=r.imageCanvasContext,b=i.typ,w=i.pid,x=i.ind,C=i.thumb,T,_,k=i.exifObj,D;T=function(e,t,i){if(r.isAjaxUpload){r._showUploadError(e,t,i)}else{r._showError(e,t,i)}r._setPreviewError(C,x)};if(!r.filestack[x]||!h||o<=c&&l<=d){if(h&&r.filestack[x]){r._raise("fileimageresized",[w,x])}n.val++;if(n.val===s){r._raise("fileimagesresized")}if(!h){T(r.msgImageResizeError,{id:w,index:x},"fileimageresizeerror");return}}b=b||r.resizeDefaultImageType;p=o>c;m=l>d;if(r.resizePreference==="width"){f=p?c/o:m?d/l:1}else{f=m?d/l:p?c/o:1}r._resetCanvas();o*=f;l*=f;g.width=o;g.height=l;try{y.drawImage(a,0,0,o,l);v=g.toDataURL(b,r.resizeQuality);if(k){D=window.piexif.dump(k);v=window.piexif.insert(D,v)}u=t.dataURI2Blob(v);r.filestack[x]=u;r._raise("fileimageresized",[w,x]);n.val++;if(n.val===s){r._raise("fileimagesresized",[undefined,undefined])}if(!(u instanceof Blob)){T(r.msgImageResizeError,{id:w,index:x},"fileimageresizeerror")}}catch(e){n.val++;if(n.val===s){r._raise("fileimagesresized",[undefined,undefined])}_=r.msgImageResizeException.replace("{errors}",e.message);T(_,{id:w,index:x},"fileimageresizeexception")}},_initBrowse:function(e){var t=this;if(t.showBrowse){t.$btnFile=e.find(".btn-file");t.$btnFile.append(t.$element)}else{t.$element.hide()}},_initCaption:function(){var e=this,i=e.initialCaption||"";if(e.overwriteInitial||t.isEmpty(i)){e.$caption.val("");return false}e._setCaption(i);return true},_setCaption:function(i,n){var s=this,r,a,o,l,u,f=s.getFileStack();if(!s.$caption.length){return}s.$captionContainer.removeClass("icon-visible");if(n){r=e("<div>"+s.msgValidationError+"</div>").text();l=f.length;if(l){u=l===1&&f[0]?s._getFileNames()[0]:s._getMsgSelected(l)}else{u=s._getMsgSelected(s.msgNo)}a=t.isEmpty(i)?u:i;o='<span class="'+s.msgValidationErrorClass+'">'+s.msgValidationErrorIcon+"</span>"}else{if(t.isEmpty(i)){return}r=e("<div>"+i+"</div>").text();a=r;o=s._getLayoutTemplate("fileIcon")}s.$captionContainer.addClass("icon-visible");s.$caption.attr("title",r).val(a);s.$captionIcon.html(o)},_createContainer:function(){var t=this,i={class:"file-input file-input-new"+(t.rtl?" kv-rtl":"")},n=e(document.createElement("div")).attr(i).html(t._renderMain());t.$element.before(n);t._initBrowse(n);if(t.theme){n.addClass("theme-"+t.theme)}return n},_refreshContainer:function(){var e=this,t=e.$container;t.before(e.$element);t.html(e._renderMain());e._initBrowse(t);e._validateDisabled()},_validateDisabled:function(){var e=this;e.$caption.attr({readonly:e.isDisabled})},_renderMain:function(){var e=this,t=e.isAjaxUpload&&e.dropZoneEnabled?" file-drop-zone":"file-drop-disabled",i=!e.showClose?"":e._getLayoutTemplate("close"),n=!e.showPreview?"":e._getLayoutTemplate("preview").setTokens({class:e.previewClass,dropClass:t}),s=e.isDisabled?e.captionClass+" file-caption-disabled":e.captionClass,r=e.captionTemplate.setTokens({class:s+" kv-fileinput-caption"});return e.mainTemplate.setTokens({class:e.mainClass+(!e.showBrowse&&e.showCaption?" no-browse":""),preview:n,close:i,caption:r,upload:e._renderButton("upload"),remove:e._renderButton("remove"),cancel:e._renderButton("cancel"),browse:e._renderButton("browse")})},_renderButton:function(e){var i=this,n=i._getLayoutTemplate("btnDefault"),s=i[e+"Class"],r=i[e+"Title"],a=i[e+"Icon"],o=i[e+"Label"],l=i.isDisabled?" disabled":"",u="button";switch(e){case"remove":if(!i.showRemove){return""}break;case"cancel":if(!i.showCancel){return""}s+=" kv-hidden";break;case"upload":if(!i.showUpload){return""}if(i.isAjaxUpload&&!i.isDisabled){n=i._getLayoutTemplate("btnLink").replace("{href}",i.uploadUrl)}else{u="submit"}break;case"browse":if(!i.showBrowse){return""}n=i._getLayoutTemplate("btnBrowse");break;default:return""}s+=e==="browse"?" btn-file":" fileinput-"+e+" fileinput-"+e+"-button";if(!t.isEmpty(o)){o=' <span class="'+i.buttonLabelClass+'">'+o+"</span>"}return n.setTokens({type:u,css:s,title:r,status:l,icon:a,label:o})},_renderThumbProgress:function(){var e=this;return'<div class="file-thumb-progress kv-hidden">'+e.progressTemplate.setTokens({percent:"0",status:e.msgUploadBegin})+"</div>"},_renderFileFooter:function(e,i,n,s){var r=this,a=r.fileActionSettings,o=a.showRemove,l=a.showDrag,u=a.showUpload,f=a.showZoom,c,d=r._getLayoutTemplate("footer"),h=r._getLayoutTemplate("indicator"),p=s?a.indicatorError:a.indicatorNew,m=s?a.indicatorErrorTitle:a.indicatorNewTitle,g=h.setTokens({indicator:p,indicatorTitle:m});i=r._getSize(i);if(r.isAjaxUpload){c=d.setTokens({actions:r._renderFileActions(u,false,o,f,l,false,false,false),caption:e,size:i,width:n,progress:r._renderThumbProgress(),indicator:g})}else{c=d.setTokens({actions:r._renderFileActions(false,false,false,f,l,false,false,false),caption:e,size:i,width:n,progress:"",indicator:g})}c=t.replaceTags(c,r.previewThumbTags);return c},_renderFileActions:function(e,t,i,n,s,r,a,o,l,u,f){if(!e&&!t&&!i&&!n&&!s){return""}var c=this,d=a===false?"":' data-url="'+a+'"',h=o===false?"":' data-key="'+o+'"',p="",m="",g="",v="",y="",b,w=c._getLayoutTemplate("actions"),x=c.fileActionSettings,C=c.otherActionButtons.setTokens({dataKey:h,key:o}),T=r?x.removeClass+" disabled":x.removeClass;if(i){p=c._getLayoutTemplate("actionDelete").setTokens({removeClass:T,removeIcon:x.removeIcon,removeTitle:x.removeTitle,dataUrl:d,dataKey:h,key:o})}if(e){m=c._getLayoutTemplate("actionUpload").setTokens({uploadClass:x.uploadClass,uploadIcon:x.uploadIcon,uploadTitle:x.uploadTitle})}if(t){g=c._getLayoutTemplate("actionDownload").setTokens({downloadClass:x.downloadClass,downloadIcon:x.downloadIcon,downloadTitle:x.downloadTitle,downloadUrl:u||c.initialPreviewDownloadUrl});g=g.setTokens({filename:f,key:o})}if(n){v=c._getLayoutTemplate("actionZoom").setTokens({zoomClass:x.zoomClass,zoomIcon:x.zoomIcon,zoomTitle:x.zoomTitle})}if(s&&l){b="drag-handle-init "+x.dragClass;y=c._getLayoutTemplate("actionDrag").setTokens({dragClass:b,dragTitle:x.dragTitle,dragIcon:x.dragIcon})}return w.setTokens({delete:p,upload:m,download:g,zoom:v,drag:y,other:C})},_browse:function(e){var t=this;t._raise("filebrowse");if(e&&e.isDefaultPrevented()){return}if(t.isError&&!t.isAjaxUpload){t.clear()}t.$captionContainer.focus()},_filterDuplicate:function(e,t,i){var n=this,s=n._getFileId(e);if(s&&i&&i.indexOf(s)>-1){return}if(!i){i=[]}t.push(e);i.push(s)},_change:function(i){var n=this,s=n.$element;if(!n.isAjaxUpload&&t.isEmpty(s.val())&&n.fileInputCleared){n.fileInputCleared=false;return}n.fileInputCleared=false;var r=[],a,o,l=arguments.length>1,u=n.isAjaxUpload,f,c,d=l?i.originalEvent.dataTransfer.files:s.get(0).files,h=n.filestack.length,p=t.isEmpty(s.attr("multiple")),m=p&&h>0,g=0,v=n._getFileIds(),y=function(t,i,s,r){var a=e.extend(true,{},n._getOutData({},{},d),{id:s,index:r}),o={id:s,index:r,file:i,files:d};return n.isAjaxUpload?n._showUploadError(t,a):n._showError(t,o)};n.reader=null;n._resetUpload();n._hideFileIcon();if(n.isAjaxUpload){n.$container.find(".file-drop-zone ."+n.dropZoneTitleClass).remove()}if(l){e.each(d,function(e,t){if(t&&!t.type&&t.size!==undefined&&t.size%4096===0){g++}else{n._filterDuplicate(t,r,v)}})}else{if(i.target&&i.target.files===undefined){d=i.target.value?[{name:i.target.value.replace(/^.+\\/,"")}]:[]}else{d=i.target.files||{}}if(u){e.each(d,function(e,t){n._filterDuplicate(t,r,v)})}else{r=d}}if(t.isEmpty(r)||r.length===0){if(!u){n.clear()}n._showFolderError(g);n._raise("fileselectnone");return}n._resetErrors();c=r.length;o=n._getFileCount(n.isAjaxUpload?n.getFileStack().length+c:c);if(n.maxFileCount>0&&o>n.maxFileCount){if(!n.autoReplace||c>n.maxFileCount){f=n.autoReplace&&c>n.maxFileCount?c:o;a=n.msgFilesTooMany.replace("{m}",n.maxFileCount).replace("{n}",f);n.isError=y(a,null,null,null);n.$captionContainer.removeClass("icon-visible");n._setCaption("",true);n.$container.removeClass("file-input-new file-input-ajax-new");return}if(o>n.maxFileCount){n._resetPreviewThumbs(u)}}else{if(!u||m){n._resetPreviewThumbs(false);if(m){n.clearStack()}}else{if(u&&h===0&&(!n.previewCache.count()||n.overwriteInitial)){n._resetPreviewThumbs(true)}}}if(n.isPreviewable){n._readFiles(r)}else{n._updateFileDetails(1)}n._showFolderError(g)},_abort:function(t){var i=this,n;if(i.ajaxAborted&&typeof i.ajaxAborted==="object"&&i.ajaxAborted.message!==undefined){n=e.extend(true,{},i._getOutData(),t);n.abortData=i.ajaxAborted.data||{};n.abortMessage=i.ajaxAborted.message;i._setProgress(101,i.$progress,i.msgCancelled);i._showUploadError(i.ajaxAborted.message,n,"filecustomerror");i.cancel();return true}return!!i.ajaxAborted},_resetFileStack:function(){var i=this,n=0,s=[],r=[],a=[];i._getThumbs().each(function(){var o=e(this),l=o.attr("data-fileindex"),u=i.filestack[l],f=o.attr("id"),c;if(l==="-1"||l===-1){return}if(u!==undefined){s[n]=u;r[n]=i._getFileName(u);a[n]=i._getFileId(u);o.attr({id:i.previewInitId+"-"+n,"data-fileindex":n});n++}else{c="uploaded-"+t.uniqId();o.attr({id:c,"data-fileindex":"-1"});i.$preview.find("#zoom-"+f).attr("id","zoom-"+c)}});i.filestack=s;i.filenames=r;i.fileids=a},_isFileSelectionValid:function(e){var t=this;e=e||0;if(t.required&&!t.getFilesCount()){t.$errorContainer.html("");t._showUploadError(t.msgFileRequired);return false}if(t.minFileCount>0&&t._getFileCount(e)<t.minFileCount){t._noFilesError({});return false}return true},clearStack:function(){var e=this;e.filestack=[];e.filenames=[];e.fileids=[];return e.$element},updateStack:function(e,t){var i=this;i.filestack[e]=t;i.filenames[e]=i._getFileName(t);i.fileids[e]=t&&i._getFileId(t)||null;return i.$element},addToStack:function(e){var t=this;t.filestack.push(e);t.filenames.push(t._getFileName(e));t.fileids.push(t._getFileId(e));return t.$element},getFileStack:function(e){var t=this;return t.filestack.filter(function(t){return e?t!==undefined:t!==undefined&&t!==null})},getFilesCount:function(){var e=this,t=e.isAjaxUpload?e.getFileStack().length:e.$element.get(0).files.length;return e._getFileCount(t)},lock:function(){var e=this;e._resetErrors();e.disable();if(e.showRemove){e.$container.find(".fileinput-remove").hide()}if(e.showCancel){e.$container.find(".fileinput-cancel").show()}e._raise("filelock",[e.filestack,e._getExtraData()]);return e.$element},unlock:function(e){var t=this;if(e===undefined){e=true}t.enable();if(t.showCancel){t.$container.find(".fileinput-cancel").hide()}if(t.showRemove){t.$container.find(".fileinput-remove").show()}if(e){t._resetFileStack()}t._raise("fileunlock",[t.filestack,t._getExtraData()]);return t.$element},cancel:function(){var t=this,i=t.ajaxRequests,n=i.length,s;if(n>0){for(s=0;s<n;s+=1){t.cancelling=true;i[s].abort()}}t._setProgressCancelled();t._getThumbs().each(function(){var i=e(this),n=i.attr("data-fileindex");i.removeClass("file-uploading");if(t.filestack[n]!==undefined){i.find(".kv-file-upload").removeClass("disabled").removeAttr("disabled");i.find(".kv-file-remove").removeClass("disabled").removeAttr("disabled")}t.unlock()});return t.$element},clear:function(){var i=this,n;if(!i._raise("fileclear")){return}i.$btnUpload.removeAttr("disabled");i._getThumbs().find("video,audio,img").each(function(){t.cleanMemory(e(this))});i._resetUpload();i.clearStack();i._clearFileInput();i._resetErrors(true);if(i._hasInitialPreview()){i._showFileIcon();i._resetPreview();i._initPreviewActions();i.$container.removeClass("file-input-new")}else{i._getThumbs().each(function(){i._clearObjects(e(this))});if(i.isAjaxUpload){i.previewCache.data={}}i.$preview.html("");n=!i.overwriteInitial&&i.initialCaption.length>0?i.initialCaption:"";i.$caption.attr("title","").val(n);t.addCss(i.$container,"file-input-new");i._validateDefaultPreview()}if(i.$container.find(t.FRAMES).length===0){if(!i._initCaption()){i.$captionContainer.removeClass("icon-visible")}}i._hideFileIcon();i._raise("filecleared");i.$captionContainer.focus();i._setFileDropZoneTitle();return i.$element},reset:function(){var e=this;if(!e._raise("filereset")){return}e._resetPreview();e.$container.find(".fileinput-filename").text("");t.addCss(e.$container,"file-input-new");if(e.getFrames().length||e.isAjaxUpload&&e.dropZoneEnabled){e.$container.removeClass("file-input-new")}e.clearStack();e.formdata={};e._setFileDropZoneTitle();return e.$element},disable:function(){var e=this;e.isDisabled=true;e._raise("filedisabled");e.$element.attr("disabled","disabled");e.$container.find(".kv-fileinput-caption").addClass("file-caption-disabled");e.$container.find(".fileinput-remove, .fileinput-upload, .file-preview-frame button").attr("disabled",true);t.addCss(e.$container.find(".btn-file"),"disabled");e._initDragDrop();return e.$element},enable:function(){var e=this;e.isDisabled=false;e._raise("fileenabled");e.$element.removeAttr("disabled");e.$container.find(".kv-fileinput-caption").removeClass("file-caption-disabled");e.$container.find(".fileinput-remove, .fileinput-upload, .file-preview-frame button").removeAttr("disabled");e.$container.find(".btn-file").removeClass("disabled");e._initDragDrop();return e.$element},upload:function(){var i=this,n=i.getFileStack().length,s,r,a,o=!e.isEmptyObject(i._getExtraData());if(!i.isAjaxUpload||i.isDisabled||!i._isFileSelectionValid(n)){return}i._resetUpload();if(n===0&&!o){i._showUploadError(i.msgUploadEmpty);return}i.$progress.show();i.uploadCount=0;i.uploadStatus={};i.uploadLog=[];i.lock();i._setProgress(2);if(n===0&&o){i._uploadExtraOnly();return}a=i.filestack.length;i.hasInitData=false;if(i.uploadAsync){r=i._getOutData();i._raise("filebatchpreupload",[r]);i.fileBatchCompleted=false;i.uploadCache={content:[],config:[],tags:[],append:true};i.uploadAsyncCount=i.getFileStack().length;for(s=0;s<a;s++){i.uploadCache.content[s]=null;i.uploadCache.config[s]=null;i.uploadCache.tags[s]=null}i.$preview.find(".file-preview-initial").removeClass(t.SORT_CSS);i._initSortable();i.cacheInitialPreview=i.getPreview();for(s=0;s<a;s++){if(i.filestack[s]){i._uploadSingle(s,true)}}return}i._uploadBatch();return i.$element},destroy:function(){var t=this,i=t.$form,n=t.$container,s=t.$element,r=t.namespace;e(document).off(r);e(window).off(r);if(i&&i.length){i.off(r)}if(t.isAjaxUpload){t._clearFileInput()}t._cleanup();t._initPreviewCache();s.insertBefore(n).off(r).removeData();n.off().remove();return s},refresh:function(i,n){var s=this,r=s.$element;if(typeof i!=="object"||t.isEmpty(i)){i=s.options}else{i=e.extend(true,{},s.options,i)}s._init(i,true);s._listen();if(n){r.trigger("change"+s.namespace)}return r},zoom:function(e){var i=this,n=i._getFrame(e),s=i.$modal;if(!n){return}t.initModal(s);s.html(i._getModalContent());i._setZoomContent(n);s.modal("show");i._initZoomButtons()},getExif:function(e){var t=this,i=t._getFrame(e);return i&&i.data("exif")||null},getFrames:function(e){var i=this;e=e||"";return i.$preview.find(t.FRAMES+e)},getPreview:function(){var e=this;return{content:e.initialPreview,config:e.initialPreviewConfig,tags:e.initialPreviewThumbTags}}};e.fn.fileinput=function(n){if(!t.hasFileAPISupport()&&!t.isIE(9)){return}var s=Array.apply(null,arguments),r=[];s.shift();this.each(function(){var a=e(this),o=a.data("fileinput"),l=typeof n==="object"&&n,u=l.theme||a.data("theme"),f={},c={},d=l.language||a.data("language")||e.fn.fileinput.defaults.language||"en",h;if(!o){if(u){c=e.fn.fileinputThemes[u]||{}}if(d!=="en"&&!t.isEmpty(e.fn.fileinputLocales[d])){f=e.fn.fileinputLocales[d]||{}}h=e.extend(true,{},e.fn.fileinput.defaults,c,e.fn.fileinputLocales.en,f,l,a.data());o=new i(this,h);a.data("fileinput",o)}if(typeof n==="string"){r.push(o[n].apply(o,s))}});switch(r.length){case 0:return this;case 1:return r[0];default:return r}};e.fn.fileinput.defaults={language:"en",showCaption:true,showBrowse:true,showPreview:true,showRemove:true,showUpload:true,showCancel:true,showClose:true,showUploadedThumbs:true,browseOnZoneClick:false,autoReplace:false,autoOrientImage:true,required:false,rtl:false,hideThumbnailContent:false,generateFileId:null,previewClass:"",captionClass:"",frameClass:"krajee-default",mainClass:"file-caption-main",mainTemplate:null,purifyHtml:true,fileSizeGetter:null,initialCaption:"",initialPreview:[],initialPreviewDelimiter:"*$$*",initialPreviewAsData:false,initialPreviewFileType:"image",initialPreviewConfig:[],initialPreviewThumbTags:[],previewThumbTags:{},initialPreviewShowDelete:true,initialPreviewDownloadUrl:"",removeFromPreviewOnError:false,deleteUrl:"",deleteExtraData:{},overwriteInitial:true,previewZoomButtonIcons:{prev:'<i class="glyphicon glyphicon-triangle-left"></i>',next:'<i class="glyphicon glyphicon-triangle-right"></i>',toggleheader:'<i class="glyphicon glyphicon-resize-vertical"></i>',fullscreen:'<i class="glyphicon glyphicon-fullscreen"></i>',borderless:'<i class="glyphicon glyphicon-resize-full"></i>',close:'<i class="glyphicon glyphicon-remove"></i>'},previewZoomButtonClasses:{prev:"btn btn-navigate",next:"btn btn-navigate",toggleheader:"btn btn-kv btn-default btn-outline-secondary",fullscreen:"btn btn-kv btn-default btn-outline-secondary",borderless:"btn btn-kv btn-default btn-outline-secondary",close:"btn btn-kv btn-default btn-outline-secondary"},preferIconicPreview:false,preferIconicZoomPreview:false,allowedPreviewTypes:undefined,allowedPreviewMimeTypes:null,allowedFileTypes:null,allowedFileExtensions:null,defaultPreviewContent:null,customLayoutTags:{},customPreviewTags:{},previewFileIcon:'<i class="glyphicon glyphicon-file"></i>',previewFileIconClass:"file-other-icon",previewFileIconSettings:{},previewFileExtSettings:{},buttonLabelClass:"hidden-xs",browseIcon:'<i class="glyphicon glyphicon-folder-open"></i>&nbsp;',browseClass:"btn btn-primary",removeIcon:'<i class="glyphicon glyphicon-trash"></i>',removeClass:"btn btn-default btn-secondary",cancelIcon:'<i class="glyphicon glyphicon-ban-circle"></i>',cancelClass:"btn btn-default btn-secondary",uploadIcon:'<i class="glyphicon glyphicon-upload"></i>',uploadClass:"btn btn-default btn-secondary",uploadUrl:null,uploadUrlThumb:null,uploadAsync:true,uploadExtraData:{},zoomModalHeight:480,minImageWidth:null,minImageHeight:null,maxImageWidth:null,maxImageHeight:null,resizeImage:false,resizePreference:"width",resizeQuality:.92,resizeDefaultImageType:"image/jpeg",resizeIfSizeMoreThan:0,minFileSize:0,maxFileSize:0,maxFilePreviewSize:25600,minFileCount:0,maxFileCount:0,validateInitialCount:false,msgValidationErrorClass:"text-danger",msgValidationErrorIcon:'<i class="glyphicon glyphicon-exclamation-sign"></i> ',msgErrorClass:"file-error-message",progressThumbClass:"progress-bar bg-success progress-bar-success progress-bar-striped active",progressClass:"progress-bar bg-success progress-bar-success progress-bar-striped active",progressCompleteClass:"progress-bar bg-success progress-bar-success",progressErrorClass:"progress-bar bg-danger progress-bar-danger",progressUploadThreshold:99,previewFileType:"image",elCaptionContainer:null,elCaptionText:null,elPreviewContainer:null,elPreviewImage:null,elPreviewStatus:null,elErrorContainer:null,errorCloseButton:t.closeButton("kv-error-close"),slugCallback:null,dropZoneEnabled:true,dropZoneTitleClass:"file-drop-zone-title",fileActionSettings:{},otherActionButtons:"",textEncoding:"UTF-8",ajaxSettings:{},ajaxDeleteSettings:{},showAjaxErrorDetails:true,mergeAjaxCallbacks:false,mergeAjaxDeleteCallbacks:false,retryErrorUploads:true};e.fn.fileinputLocales.en={fileSingle:"file",filePlural:"files",browseLabel:"Browse &hellip;",removeLabel:"Remove",removeTitle:"Clear selected files",cancelLabel:"Cancel",cancelTitle:"Abort ongoing upload",uploadLabel:"Upload",uploadTitle:"Upload selected files",msgNo:"No",msgNoFilesSelected:"No files selected",msgCancelled:"Cancelled",msgPlaceholder:"Select {files}...",msgZoomModalHeading:"Detailed Preview",msgFileRequired:"You must select a file to upload.",msgSizeTooSmall:'File "{name}" (<b>{size} KB</b>) is too small and must be larger than <b>{minSize} KB</b>.',msgSizeTooLarge:'File "{name}" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>.',msgFilesTooLess:"You must select at least <b>{n}</b> {files} to upload.",msgFilesTooMany:"Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>.",msgFileNotFound:'File "{name}" not found!',msgFileSecured:'Security restrictions prevent reading the file "{name}".',msgFileNotReadable:'File "{name}" is not readable.',msgFilePreviewAborted:'File preview aborted for "{name}".',msgFilePreviewError:'An error occurred while reading the file "{name}".',msgInvalidFileName:'Invalid or unsupported characters in file name "{name}".',msgInvalidFileType:'Invalid type for file "{name}". Only "{types}" files are supported.',msgInvalidFileExtension:'Invalid extension for file "{name}". Only "{extensions}" files are supported.',msgFileTypes:{image:"image",html:"HTML",text:"text",video:"video",audio:"audio",flash:"flash",pdf:"PDF",object:"object"},msgUploadAborted:"The file upload was aborted",msgUploadThreshold:"Processing...",msgUploadBegin:"Initializing...",msgUploadEnd:"Done",msgUploadEmpty:"No valid data available for upload.",msgUploadError:"Error",msgValidationError:"Validation Error",msgLoading:"Loading file {index} of {files} &hellip;",msgProgress:"Loading file {index} of {files} - {name} - {percent}% completed.",msgSelected:"{n} {files} selected",msgFoldersNotAllowed:"Drag & drop files only! {n} folder(s) dropped were skipped.",msgImageWidthSmall:'Width of image file "{name}" must be at least {size} px.',msgImageHeightSmall:'Height of image file "{name}" must be at least {size} px.',msgImageWidthLarge:'Width of image file "{name}" cannot exceed {size} px.',msgImageHeightLarge:'Height of image file "{name}" cannot exceed {size} px.',msgImageResizeError:"Could not get the image dimensions to resize.",msgImageResizeException:"Error while resizing the image.<pre>{errors}</pre>",msgAjaxError:"Something went wrong with the {operation} operation. Please try again later!",msgAjaxProgressError:"{operation} failed",ajaxOperations:{deleteThumb:"file delete",uploadThumb:"file upload",uploadBatch:"batch file upload",uploadExtra:"form data upload"},dropZoneTitle:"Drag & drop files here &hellip;",dropZoneClickTitle:"<br>(or click to select {files})",previewZoomButtonTitles:{prev:"View previous file",next:"View next file",toggleheader:"Toggle header",fullscreen:"Toggle full screen",borderless:"Toggle borderless mode",close:"Close detailed preview"}};e.fn.fileinput.Constructor=i;e(document).ready(function(){var t=e("input.file[type=file]");if(t.length){t.fileinput()}})});(function(e){"use strict";e.fn.fileinputThemes.gly={fileActionSettings:{removeIcon:'<i class="glyphicon glyphicon-trash"></i>',uploadIcon:'<i class="glyphicon glyphicon-upload"></i>',zoomIcon:'<i class="glyphicon glyphicon-zoom-in"></i>',dragIcon:'<i class="glyphicon glyphicon-move"></i>',indicatorNew:'<i class="glyphicon glyphicon-plus-sign text-warning"></i>',indicatorSuccess:'<i class="glyphicon glyphicon-ok-sign text-success"></i>',indicatorError:'<i class="glyphicon glyphicon-exclamation-sign text-danger"></i>',indicatorLoading:'<i class="glyphicon glyphicon-hourglass text-muted"></i>'},layoutTemplates:{fileIcon:'<i class="glyphicon glyphicon-file kv-caption-icon"></i>'},previewZoomButtonIcons:{prev:'<i class="glyphicon glyphicon-triangle-left"></i>',next:'<i class="glyphicon glyphicon-triangle-right"></i>',toggleheader:'<i class="glyphicon glyphicon-resize-vertical"></i>',fullscreen:'<i class="glyphicon glyphicon-fullscreen"></i>',borderless:'<i class="glyphicon glyphicon-resize-full"></i>',close:'<i class="glyphicon glyphicon-remove"></i>'},previewFileIcon:'<i class="glyphicon glyphicon-file"></i>',browseIcon:'<i class="glyphicon glyphicon-folder-open"></i>&nbsp;',removeIcon:'<i class="glyphicon glyphicon-trash"></i>',cancelIcon:'<i class="glyphicon glyphicon-ban-circle"></i>',uploadIcon:'<i class="glyphicon glyphicon-upload"></i>',msgValidationErrorIcon:'<i class="glyphicon glyphicon-exclamation-sign"></i> '}})(window.jQuery);(function(e){if(typeof define==="function"&&define.amd)define(["jquery"],e);else if(typeof exports==="object")e(require("jquery"));else e(jQuery)})(function(e,t){if(!("indexOf"in Array.prototype)){Array.prototype.indexOf=function(e,i){if(i===t)i=0;if(i<0)i+=this.length;if(i<0)i=0;for(var n=this.length;i<n;i++){if(i in this&&this[i]===e){return i}}return-1}}function i(){var e,t,i,n,s,r,a,o;t=(new Date).toString();i=((a=t.split("(")[1])!=null?a.slice(0,-1):0)||t.split(" ");if(i instanceof Array){r=[];for(var n=0,s=i.length;n<s;n++){o=i[n];if((e=(a=o.match(/\b[A-Z]+\b/))!==null)?a[0]:0){r.push(e)}}i=r.pop()}return i}function n(){return new Date(Date.UTC.apply(Date,arguments))}var s=function(n,s){var r=this;this.element=e(n);this.container=s.container||"body";this.language=s.language||this.element.data("date-language")||"en";this.language=this.language in a?this.language:this.language.split("-")[0];this.language=this.language in a?this.language:"en";this.isRTL=a[this.language].rtl||false;this.formatType=s.formatType||this.element.data("format-type")||"standard";this.format=o.parseFormat(s.format||this.element.data("date-format")||a[this.language].format||o.getDefaultFormat(this.formatType,"input"),this.formatType);this.isInline=false;this.isVisible=false;this.isInput=this.element.is("input");this.fontAwesome=s.fontAwesome||this.element.data("font-awesome")||false;this.bootcssVer=s.bootcssVer||(this.isInput?this.element.is(".form-control")?3:2:this.bootcssVer=this.element.is(".input-group")?3:2);this.component=this.element.is(".date")?this.bootcssVer===3?this.element.find(".input-group-addon .glyphicon-th, .input-group-addon .glyphicon-time, .input-group-addon .glyphicon-remove, .input-group-addon .glyphicon-calendar, .input-group-addon .fa-calendar, .input-group-addon .fa-clock-o").parent():this.element.find(".add-on .icon-th, .add-on .icon-time, .add-on .icon-calendar, .add-on .fa-calendar, .add-on .fa-clock-o").parent():false;this.componentReset=this.element.is(".date")?this.bootcssVer===3?this.element.find(".input-group-addon .glyphicon-remove, .input-group-addon .fa-times").parent():this.element.find(".add-on .icon-remove, .add-on .fa-times").parent():false;this.hasInput=this.component&&this.element.find("input").length;if(this.component&&this.component.length===0){this.component=false}this.linkField=s.linkField||this.element.data("link-field")||false;this.linkFormat=o.parseFormat(s.linkFormat||this.element.data("link-format")||o.getDefaultFormat(this.formatType,"link"),this.formatType);this.minuteStep=s.minuteStep||this.element.data("minute-step")||5;this.pickerPosition=s.pickerPosition||this.element.data("picker-position")||"bottom-right";this.showMeridian=s.showMeridian||this.element.data("show-meridian")||false;this.initialDate=s.initialDate||new Date;this.zIndex=s.zIndex||this.element.data("z-index")||t;this.title=typeof s.title==="undefined"?false:s.title;this.timezone=s.timezone||i();this.icons={leftArrow:this.fontAwesome?"fa-arrow-left":this.bootcssVer===3?"glyphicon-arrow-left":"icon-arrow-left",rightArrow:this.fontAwesome?"fa-arrow-right":this.bootcssVer===3?"glyphicon-arrow-right":"icon-arrow-right"};this.icontype=this.fontAwesome?"fa":"glyphicon";this._attachEvents();this.clickedOutside=function(t){if(e(t.target).closest(".datetimepicker").length===0){r.hide()}};this.formatViewType="datetime";if("formatViewType"in s){this.formatViewType=s.formatViewType}else if("formatViewType"in this.element.data()){this.formatViewType=this.element.data("formatViewType")}this.minView=0;if("minView"in s){this.minView=s.minView}else if("minView"in this.element.data()){this.minView=this.element.data("min-view")}this.minView=o.convertViewMode(this.minView);this.maxView=o.modes.length-1;if("maxView"in s){this.maxView=s.maxView}else if("maxView"in this.element.data()){this.maxView=this.element.data("max-view")}this.maxView=o.convertViewMode(this.maxView);this.wheelViewModeNavigation=false;if("wheelViewModeNavigation"in s){this.wheelViewModeNavigation=s.wheelViewModeNavigation}else if("wheelViewModeNavigation"in this.element.data()){this.wheelViewModeNavigation=this.element.data("view-mode-wheel-navigation")}this.wheelViewModeNavigationInverseDirection=false;if("wheelViewModeNavigationInverseDirection"in s){this.wheelViewModeNavigationInverseDirection=s.wheelViewModeNavigationInverseDirection}else if("wheelViewModeNavigationInverseDirection"in this.element.data()){this.wheelViewModeNavigationInverseDirection=this.element.data("view-mode-wheel-navigation-inverse-dir")}this.wheelViewModeNavigationDelay=100;if("wheelViewModeNavigationDelay"in s){this.wheelViewModeNavigationDelay=s.wheelViewModeNavigationDelay}else if("wheelViewModeNavigationDelay"in this.element.data()){this.wheelViewModeNavigationDelay=this.element.data("view-mode-wheel-navigation-delay")}this.startViewMode=2;if("startView"in s){this.startViewMode=s.startView}else if("startView"in this.element.data()){this.startViewMode=this.element.data("start-view")}this.startViewMode=o.convertViewMode(this.startViewMode);this.viewMode=this.startViewMode;this.viewSelect=this.minView;if("viewSelect"in s){this.viewSelect=s.viewSelect}else if("viewSelect"in this.element.data()){this.viewSelect=this.element.data("view-select")}this.viewSelect=o.convertViewMode(this.viewSelect);this.forceParse=true;if("forceParse"in s){this.forceParse=s.forceParse}else if("dateForceParse"in this.element.data()){this.forceParse=this.element.data("date-force-parse")}var l=this.bootcssVer===3?o.templateV3:o.template;while(l.indexOf("{iconType}")!==-1){l=l.replace("{iconType}",this.icontype)}while(l.indexOf("{leftArrow}")!==-1){l=l.replace("{leftArrow}",this.icons.leftArrow)}while(l.indexOf("{rightArrow}")!==-1){l=l.replace("{rightArrow}",this.icons.rightArrow)}this.picker=e(l).appendTo(this.isInline?this.element:this.container).on({click:e.proxy(this.click,this),mousedown:e.proxy(this.mousedown,this)});if(this.wheelViewModeNavigation){if(e.fn.mousewheel){this.picker.on({mousewheel:e.proxy(this.mousewheel,this)})}else{console.log("Mouse Wheel event is not supported. Please include the jQuery Mouse Wheel plugin before enabling this option")}}if(this.isInline){this.picker.addClass("datetimepicker-inline")}else{this.picker.addClass("datetimepicker-dropdown-"+this.pickerPosition+" dropdown-menu")}if(this.isRTL){this.picker.addClass("datetimepicker-rtl");var u=this.bootcssVer===3?".prev span, .next span":".prev i, .next i";this.picker.find(u).toggleClass(this.icons.leftArrow+" "+this.icons.rightArrow)}e(document).on("mousedown touchend",this.clickedOutside);this.autoclose=false;if("autoclose"in s){this.autoclose=s.autoclose}else if("dateAutoclose"in this.element.data()){this.autoclose=this.element.data("date-autoclose")}this.keyboardNavigation=true;if("keyboardNavigation"in s){this.keyboardNavigation=s.keyboardNavigation}else if("dateKeyboardNavigation"in this.element.data()){this.keyboardNavigation=this.element.data("date-keyboard-navigation")}this.todayBtn=s.todayBtn||this.element.data("date-today-btn")||false;this.clearBtn=s.clearBtn||this.element.data("date-clear-btn")||false;this.todayHighlight=s.todayHighlight||this.element.data("date-today-highlight")||false;this.weekStart=0;if(typeof s.weekStart!=="undefined"){this.weekStart=s.weekStart}else if(typeof this.element.data("date-weekstart")!=="undefined"){this.weekStart=this.element.data("date-weekstart")}else if(typeof a[this.language].weekStart!=="undefined"){this.weekStart=a[this.language].weekStart}this.weekStart=this.weekStart%7;this.weekEnd=(this.weekStart+6)%7;this.onRenderDay=function(e){var t=(s.onRenderDay||function(){return[]})(e);if(typeof t==="string"){t=[t]}var i=["day"];return i.concat(t?t:[])};this.onRenderHour=function(e){var t=(s.onRenderHour||function(){return[]})(e);var i=["hour"];if(typeof t==="string"){t=[t]}return i.concat(t?t:[])};this.onRenderMinute=function(e){var t=(s.onRenderMinute||function(){return[]})(e);var i=["minute"];if(typeof t==="string"){t=[t]}if(e<this.startDate||e>this.endDate){i.push("disabled")}else if(Math.floor(this.date.getUTCMinutes()/this.minuteStep)===Math.floor(e.getUTCMinutes()/this.minuteStep)){i.push("active")}return i.concat(t?t:[])};this.onRenderYear=function(e){var t=(s.onRenderYear||function(){return[]})(e);var i=["year"];if(typeof t==="string"){t=[t]}if(this.date.getUTCFullYear()===e.getUTCFullYear()){i.push("active")}var n=e.getUTCFullYear();var r=this.endDate.getUTCFullYear();if(e<this.startDate||n>r){i.push("disabled")}return i.concat(t?t:[])};this.onRenderMonth=function(e){var t=(s.onRenderMonth||function(){return[]})(e);var i=["month"];if(typeof t==="string"){t=[t]}return i.concat(t?t:[])};this.startDate=new Date(-8639968443048e3);this.endDate=new Date(8639968443048e3);this.datesDisabled=[];this.daysOfWeekDisabled=[];this.setStartDate(s.startDate||this.element.data("date-startdate"));this.setEndDate(s.endDate||this.element.data("date-enddate"));this.setDatesDisabled(s.datesDisabled||this.element.data("date-dates-disabled"));this.setDaysOfWeekDisabled(s.daysOfWeekDisabled||this.element.data("date-days-of-week-disabled"));this.setMinutesDisabled(s.minutesDisabled||this.element.data("date-minute-disabled"));this.setHoursDisabled(s.hoursDisabled||this.element.data("date-hour-disabled"));this.fillDow();this.fillMonths();this.update();this.showMode();if(this.isInline){this.show()}};s.prototype={constructor:s,_events:[],_attachEvents:function(){this._detachEvents();if(this.isInput){this._events=[[this.element,{focus:e.proxy(this.show,this),keyup:e.proxy(this.update,this),keydown:e.proxy(this.keydown,this)}]]}else if(this.component&&this.hasInput){this._events=[[this.element.find("input"),{focus:e.proxy(this.show,this),keyup:e.proxy(this.update,this),keydown:e.proxy(this.keydown,this)}],[this.component,{click:e.proxy(this.show,this)}]];if(this.componentReset){this._events.push([this.componentReset,{click:e.proxy(this.reset,this)}])}}else if(this.element.is("div")){this.isInline=true}else{this._events=[[this.element,{click:e.proxy(this.show,this)}]]}for(var t=0,i,n;t<this._events.length;t++){i=this._events[t][0];n=this._events[t][1];i.on(n)}},_detachEvents:function(){for(var e=0,t,i;e<this._events.length;e++){t=this._events[e][0];i=this._events[e][1];t.off(i)}this._events=[]},show:function(t){this.picker.show();this.height=this.component?this.component.outerHeight():this.element.outerHeight();if(this.forceParse){this.update()}this.place();e(window).on("resize",e.proxy(this.place,this));if(t){t.stopPropagation();t.preventDefault()}this.isVisible=true;this.element.trigger({type:"show",date:this.date})},hide:function(){if(!this.isVisible)return;if(this.isInline)return;this.picker.hide();e(window).off("resize",this.place);this.viewMode=this.startViewMode;this.showMode();if(!this.isInput){e(document).off("mousedown",this.hide)}if(this.forceParse&&(this.isInput&&this.element.val()||this.hasInput&&this.element.find("input").val()))this.setValue();this.isVisible=false;this.element.trigger({type:"hide",date:this.date})},remove:function(){this._detachEvents();e(document).off("mousedown",this.clickedOutside);this.picker.remove();delete this.picker;delete this.element.data().datetimepicker},getDate:function(){var e=this.getUTCDate();if(e===null){return null}return new Date(e.getTime()+e.getTimezoneOffset()*6e4)},getUTCDate:function(){return this.date},getInitialDate:function(){return this.initialDate},setInitialDate:function(e){this.initialDate=e},setDate:function(e){this.setUTCDate(new Date(e.getTime()-e.getTimezoneOffset()*6e4))},setUTCDate:function(e){if(e>=this.startDate&&e<=this.endDate){this.date=e;this.setValue();this.viewDate=this.date;this.fill()}else{this.element.trigger({type:"outOfRange",date:e,startDate:this.startDate,endDate:this.endDate})}},setFormat:function(e){this.format=o.parseFormat(e,this.formatType);var t;if(this.isInput){t=this.element}else if(this.component){t=this.element.find("input")}if(t&&t.val()){this.setValue()}},setValue:function(){var t=this.getFormattedDate();if(!this.isInput){if(this.component){this.element.find("input").val(t)}this.element.data("date",t)}else{this.element.val(t)}if(this.linkField){e("#"+this.linkField).val(this.getFormattedDate(this.linkFormat))}},getFormattedDate:function(e){e=e||this.format;return o.formatDate(this.date,e,this.language,this.formatType,this.timezone)},setStartDate:function(e){this.startDate=e||this.startDate;if(this.startDate.valueOf()!==8639968443048e3){this.startDate=o.parseDate(this.startDate,this.format,this.language,this.formatType,this.timezone)}this.update();this.updateNavArrows()},setEndDate:function(e){this.endDate=e||this.endDate;if(this.endDate.valueOf()!==8639968443048e3){this.endDate=o.parseDate(this.endDate,this.format,this.language,this.formatType,this.timezone)}this.update();this.updateNavArrows()},setDatesDisabled:function(t){this.datesDisabled=t||[];if(!e.isArray(this.datesDisabled)){this.datesDisabled=this.datesDisabled.split(/,\s*/)}var i=this;this.datesDisabled=e.map(this.datesDisabled,function(e){return o.parseDate(e,i.format,i.language,i.formatType,i.timezone).toDateString()});this.update();this.updateNavArrows()},setTitle:function(e,t){return this.picker.find(e).find("th:eq(1)").text(this.title===false?t:this.title)},setDaysOfWeekDisabled:function(t){this.daysOfWeekDisabled=t||[];if(!e.isArray(this.daysOfWeekDisabled)){this.daysOfWeekDisabled=this.daysOfWeekDisabled.split(/,\s*/)}this.daysOfWeekDisabled=e.map(this.daysOfWeekDisabled,function(e){return parseInt(e,10)});this.update();this.updateNavArrows()},setMinutesDisabled:function(t){this.minutesDisabled=t||[];if(!e.isArray(this.minutesDisabled)){this.minutesDisabled=this.minutesDisabled.split(/,\s*/)}this.minutesDisabled=e.map(this.minutesDisabled,function(e){return parseInt(e,10)});this.update();this.updateNavArrows()},setHoursDisabled:function(t){this.hoursDisabled=t||[];if(!e.isArray(this.hoursDisabled)){this.hoursDisabled=this.hoursDisabled.split(/,\s*/)}this.hoursDisabled=e.map(this.hoursDisabled,function(e){return parseInt(e,10)});this.update();this.updateNavArrows()},place:function(){if(this.isInline)return;if(!this.zIndex){var t=0;e("div").each(function(){var i=parseInt(e(this).css("zIndex"),10);if(i>t){t=i}});this.zIndex=t+10}var i,n,s,r;if(this.container instanceof e){r=this.container.offset()}else{r=e(this.container).offset()}if(this.component){i=this.component.offset();s=i.left;if(this.pickerPosition==="bottom-left"||this.pickerPosition==="top-left"){s+=this.component.outerWidth()-this.picker.outerWidth()}}else{i=this.element.offset();s=i.left;if(this.pickerPosition==="bottom-left"||this.pickerPosition==="top-left"){s+=this.element.outerWidth()-this.picker.outerWidth()}}var a=document.body.clientWidth||window.innerWidth;if(s+220>a){s=a-220}if(this.pickerPosition==="top-left"||this.pickerPosition==="top-right"){n=i.top-this.picker.outerHeight()}else{n=i.top+this.height}n=n-r.top;s=s-r.left;this.picker.css({top:n,left:s,zIndex:this.zIndex})},hour_minute:"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]",update:function(){var e,t=false;if(arguments&&arguments.length&&(typeof arguments[0]==="string"||arguments[0]instanceof Date)){e=arguments[0];t=true}else{e=(this.isInput?this.element.val():this.element.find("input").val())||this.element.data("date")||this.initialDate;if(typeof e==="string"){e=e.replace(/^\s+|\s+$/g,"")}}if(!e){e=new Date;t=false}if(typeof e==="string"){if(new RegExp(this.hour_minute).test(e)||new RegExp(this.hour_minute+":[0-5][0-9]").test(e)){e=this.getDate()}}this.date=o.parseDate(e,this.format,this.language,this.formatType,this.timezone);if(t)this.setValue();if(this.date<this.startDate){this.viewDate=new Date(this.startDate)}else if(this.date>this.endDate){this.viewDate=new Date(this.endDate)}else{this.viewDate=new Date(this.date)}this.fill()},fillDow:function(){var e=this.weekStart,t="<tr>";while(e<this.weekStart+7){t+='<th class="dow">'+a[this.language].daysMin[e++%7]+"</th>"}t+="</tr>";this.picker.find(".datetimepicker-days thead").append(t)},fillMonths:function(){var e="";var t=new Date(this.viewDate);for(var i=0;i<12;i++){t.setUTCMonth(i);var n=this.onRenderMonth(t);e+='<span class="'+n.join(" ")+'">'+a[this.language].monthsShort[i]+"</span>"}this.picker.find(".datetimepicker-months td").html(e)},fill:function(){if(!this.date||!this.viewDate){return}var t=new Date(this.viewDate),i=t.getUTCFullYear(),s=t.getUTCMonth(),l=t.getUTCDate(),u=t.getUTCHours(),f=this.startDate.getUTCFullYear(),c=this.startDate.getUTCMonth(),d=this.endDate.getUTCFullYear(),h=this.endDate.getUTCMonth()+1,p=new n(this.date.getUTCFullYear(),this.date.getUTCMonth(),this.date.getUTCDate()).valueOf(),m=new Date;this.setTitle(".datetimepicker-days",a[this.language].months[s]+" "+i);if(this.formatViewType==="time"){var g=this.getFormattedDate();this.setTitle(".datetimepicker-hours",g);this.setTitle(".datetimepicker-minutes",g)}else{this.setTitle(".datetimepicker-hours",l+" "+a[this.language].months[s]+" "+i);this.setTitle(".datetimepicker-minutes",l+" "+a[this.language].months[s]+" "+i)}this.picker.find("tfoot th.today").text(a[this.language].today||a["en"].today).toggle(this.todayBtn!==false);this.picker.find("tfoot th.clear").text(a[this.language].clear||a["en"].clear).toggle(this.clearBtn!==false);this.updateNavArrows();this.fillMonths();var v=n(i,s-1,28,0,0,0,0),y=o.getDaysInMonth(v.getUTCFullYear(),v.getUTCMonth());v.setUTCDate(y);v.setUTCDate(y-(v.getUTCDay()-this.weekStart+7)%7);var b=new Date(v);b.setUTCDate(b.getUTCDate()+42);b=b.valueOf();var w=[];var x;while(v.valueOf()<b){if(v.getUTCDay()===this.weekStart){w.push("<tr>")}x=this.onRenderDay(v);if(v.getUTCFullYear()<i||v.getUTCFullYear()===i&&v.getUTCMonth()<s){x.push("old")}else if(v.getUTCFullYear()>i||v.getUTCFullYear()===i&&v.getUTCMonth()>s){x.push("new")}if(this.todayHighlight&&v.getUTCFullYear()===m.getFullYear()&&v.getUTCMonth()===m.getMonth()&&v.getUTCDate()===m.getDate()){x.push("today")}if(v.valueOf()===p){x.push("active")}if(v.valueOf()+864e5<=this.startDate||v.valueOf()>this.endDate||e.inArray(v.getUTCDay(),this.daysOfWeekDisabled)!==-1||e.inArray(v.toDateString(),this.datesDisabled)!==-1){x.push("disabled")}w.push('<td class="'+x.join(" ")+'">'+v.getUTCDate()+"</td>");if(v.getUTCDay()===this.weekEnd){w.push("</tr>")}v.setUTCDate(v.getUTCDate()+1)}this.picker.find(".datetimepicker-days tbody").empty().append(w.join(""));w=[];var C="",T="",_="";var k=this.hoursDisabled||[];t=new Date(this.viewDate);for(var D=0;D<24;D++){t.setUTCHours(D);x=this.onRenderHour(t);if(k.indexOf(D)!==-1){x.push("disabled")}var S=n(i,s,l,D);if(S.valueOf()+36e5<=this.startDate||S.valueOf()>this.endDate){x.push("disabled")}else if(u===D){x.push("active")}if(this.showMeridian&&a[this.language].meridiem.length===2){T=D<12?a[this.language].meridiem[0]:a[this.language].meridiem[1];if(T!==_){if(_!==""){w.push("</fieldset>")}w.push('<fieldset class="hour"><legend>'+T.toUpperCase()+"</legend>")}_=T;C=D%12?D%12:12;if(D<12){x.push("hour_am")}else{x.push("hour_pm")}w.push('<span class="'+x.join(" ")+'">'+C+"</span>");if(D===23){w.push("</fieldset>")}}else{C=D+":00";w.push('<span class="'+x.join(" ")+'">'+C+"</span>")}}this.picker.find(".datetimepicker-hours td").html(w.join(""));w=[];C="";T="";_="";var $=this.minutesDisabled||[];t=new Date(this.viewDate);for(var D=0;D<60;D+=this.minuteStep){if($.indexOf(D)!==-1)continue;t.setUTCMinutes(D);t.setUTCSeconds(0);x=this.onRenderMinute(t);if(this.showMeridian&&a[this.language].meridiem.length===2){T=u<12?a[this.language].meridiem[0]:a[this.language].meridiem[1];if(T!==_){if(_!==""){w.push("</fieldset>")}w.push('<fieldset class="minute"><legend>'+T.toUpperCase()+"</legend>")}_=T;C=u%12?u%12:12;w.push('<span class="'+x.join(" ")+'">'+C+":"+(D<10?"0"+D:D)+"</span>");if(D===59){w.push("</fieldset>")}}else{C=D+":00";w.push('<span class="'+x.join(" ")+'">'+u+":"+(D<10?"0"+D:D)+"</span>")}}this.picker.find(".datetimepicker-minutes td").html(w.join(""));var A=this.date.getUTCFullYear();var E=this.setTitle(".datetimepicker-months",i).end().find(".month").removeClass("active");if(A===i){E.eq(this.date.getUTCMonth()).addClass("active")}if(i<f||i>d){E.addClass("disabled")}if(i===f){E.slice(0,c).addClass("disabled")}if(i===d){E.slice(h).addClass("disabled")}w="";i=parseInt(i/10,10)*10;var M=this.setTitle(".datetimepicker-years",i+"-"+(i+9)).end().find("td");i-=1;t=new Date(this.viewDate);for(var D=-1;D<11;D++){t.setUTCFullYear(i);x=this.onRenderYear(t);if(D===-1||D===10){x.push(r)}w+='<span class="'+x.join(" ")+'">'+i+"</span>";i+=1}M.html(w);this.place()},updateNavArrows:function(){var e=new Date(this.viewDate),t=e.getUTCFullYear(),i=e.getUTCMonth(),n=e.getUTCDate(),s=e.getUTCHours();switch(this.viewMode){case 0:if(t<=this.startDate.getUTCFullYear()&&i<=this.startDate.getUTCMonth()&&n<=this.startDate.getUTCDate()&&s<=this.startDate.getUTCHours()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(t>=this.endDate.getUTCFullYear()&&i>=this.endDate.getUTCMonth()&&n>=this.endDate.getUTCDate()&&s>=this.endDate.getUTCHours()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break;case 1:if(t<=this.startDate.getUTCFullYear()&&i<=this.startDate.getUTCMonth()&&n<=this.startDate.getUTCDate()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(t>=this.endDate.getUTCFullYear()&&i>=this.endDate.getUTCMonth()&&n>=this.endDate.getUTCDate()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break;case 2:if(t<=this.startDate.getUTCFullYear()&&i<=this.startDate.getUTCMonth()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(t>=this.endDate.getUTCFullYear()&&i>=this.endDate.getUTCMonth()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break;case 3:case 4:if(t<=this.startDate.getUTCFullYear()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(t>=this.endDate.getUTCFullYear()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break}},mousewheel:function(t){t.preventDefault();t.stopPropagation();if(this.wheelPause){return}this.wheelPause=true;var i=t.originalEvent;var n=i.wheelDelta;var s=n>0?1:n===0?0:-1;if(this.wheelViewModeNavigationInverseDirection){s=-s}this.showMode(s);setTimeout(e.proxy(function(){this.wheelPause=false},this),this.wheelViewModeNavigationDelay)},click:function(t){t.stopPropagation();t.preventDefault();var i=e(t.target).closest("span, td, th, legend");if(i.is("."+this.icontype)){i=e(i).parent().closest("span, td, th, legend")}if(i.length===1){if(i.is(".disabled")){this.element.trigger({type:"outOfRange",date:this.viewDate,startDate:this.startDate,endDate:this.endDate});return}switch(i[0].nodeName.toLowerCase()){case"th":switch(i[0].className){case"switch":this.showMode(1);break;case"prev":case"next":var s=o.modes[this.viewMode].navStep*(i[0].className==="prev"?-1:1);switch(this.viewMode){case 0:this.viewDate=this.moveHour(this.viewDate,s);break;case 1:this.viewDate=this.moveDate(this.viewDate,s);break;case 2:this.viewDate=this.moveMonth(this.viewDate,s);break;case 3:case 4:this.viewDate=this.moveYear(this.viewDate,s);break}this.fill();this.element.trigger({type:i[0].className+":"+this.convertViewModeText(this.viewMode),date:this.viewDate,startDate:this.startDate,endDate:this.endDate});break;case"clear":this.reset();if(this.autoclose){this.hide()}break;case"today":var r=new Date;r=n(r.getFullYear(),r.getMonth(),r.getDate(),r.getHours(),r.getMinutes(),r.getSeconds(),0);if(r<this.startDate)r=this.startDate;else if(r>this.endDate)r=this.endDate;this.viewMode=this.startViewMode;this.showMode(0);this._setDate(r);this.fill();if(this.autoclose){this.hide()}break}break;case"span":if(!i.is(".disabled")){var a=this.viewDate.getUTCFullYear(),l=this.viewDate.getUTCMonth(),u=this.viewDate.getUTCDate(),f=this.viewDate.getUTCHours(),c=this.viewDate.getUTCMinutes(),d=this.viewDate.getUTCSeconds();if(i.is(".month")){this.viewDate.setUTCDate(1);l=i.parent().find("span").index(i);u=this.viewDate.getUTCDate();this.viewDate.setUTCMonth(l);this.element.trigger({type:"changeMonth",date:this.viewDate});if(this.viewSelect>=3){this._setDate(n(a,l,u,f,c,d,0))}}else if(i.is(".year")){this.viewDate.setUTCDate(1);a=parseInt(i.text(),10)||0;this.viewDate.setUTCFullYear(a);this.element.trigger({type:"changeYear",date:this.viewDate});if(this.viewSelect>=4){this._setDate(n(a,l,u,f,c,d,0))}}else if(i.is(".hour")){f=parseInt(i.text(),10)||0;if(i.hasClass("hour_am")||i.hasClass("hour_pm")){if(f===12&&i.hasClass("hour_am")){f=0}else if(f!==12&&i.hasClass("hour_pm")){f+=12}}this.viewDate.setUTCHours(f);this.element.trigger({type:"changeHour",date:this.viewDate});if(this.viewSelect>=1){this._setDate(n(a,l,u,f,c,d,0))}}else if(i.is(".minute")){c=parseInt(i.text().substr(i.text().indexOf(":")+1),10)||0;this.viewDate.setUTCMinutes(c);this.element.trigger({type:"changeMinute",date:this.viewDate});if(this.viewSelect>=0){this._setDate(n(a,l,u,f,c,d,0))}}if(this.viewMode!==0){var h=this.viewMode;this.showMode(-1);this.fill();if(h===this.viewMode&&this.autoclose){this.hide()}}else{this.fill();if(this.autoclose){this.hide()}}}break;case"td":if(i.is(".day")&&!i.is(".disabled")){var u=parseInt(i.text(),10)||1;var a=this.viewDate.getUTCFullYear(),l=this.viewDate.getUTCMonth(),f=this.viewDate.getUTCHours(),c=this.viewDate.getUTCMinutes(),d=this.viewDate.getUTCSeconds();if(i.is(".old")){if(l===0){l=11;a-=1}else{l-=1}}else if(i.is(".new")){if(l===11){l=0;a+=1}else{l+=1}}this.viewDate.setUTCFullYear(a);this.viewDate.setUTCMonth(l,u);this.element.trigger({type:"changeDay",date:this.viewDate});if(this.viewSelect>=2){this._setDate(n(a,l,u,f,c,d,0))}}var h=this.viewMode;this.showMode(-1);this.fill();if(h===this.viewMode&&this.autoclose){this.hide()}break}}},_setDate:function(e,t){if(!t||t==="date")this.date=e;if(!t||t==="view")this.viewDate=e;this.fill();this.setValue();var i;if(this.isInput){i=this.element}else if(this.component){i=this.element.find("input")}if(i){i.change()}this.element.trigger({type:"changeDate",date:this.getDate()});if(e===null)this.date=this.viewDate},moveMinute:function(e,t){if(!t)return e;var i=new Date(e.valueOf());i.setUTCMinutes(i.getUTCMinutes()+t*this.minuteStep);return i},moveHour:function(e,t){if(!t)return e;var i=new Date(e.valueOf());i.setUTCHours(i.getUTCHours()+t);return i},moveDate:function(e,t){if(!t)return e;var i=new Date(e.valueOf());i.setUTCDate(i.getUTCDate()+t);return i},moveMonth:function(e,t){if(!t)return e;var i=new Date(e.valueOf()),n=i.getUTCDate(),s=i.getUTCMonth(),r=Math.abs(t),a,o;t=t>0?1:-1;if(r===1){o=t===-1?function(){return i.getUTCMonth()===s}:function(){return i.getUTCMonth()!==a};a=s+t;i.setUTCMonth(a);if(a<0||a>11)a=(a+12)%12}else{for(var l=0;l<r;l++)i=this.moveMonth(i,t);a=i.getUTCMonth();i.setUTCDate(n);o=function(){return a!==i.getUTCMonth()}}while(o()){i.setUTCDate(--n);i.setUTCMonth(a)}return i},moveYear:function(e,t){return this.moveMonth(e,t*12)},dateWithinRange:function(e){return e>=this.startDate&&e<=this.endDate},keydown:function(e){if(this.picker.is(":not(:visible)")){if(e.keyCode===27)this.show();return}var t=false,i,n,s;switch(e.keyCode){case 27:this.hide();e.preventDefault();break;case 37:case 39:if(!this.keyboardNavigation)break;i=e.keyCode===37?-1:1;var r=this.viewMode;if(e.ctrlKey){r+=2}else if(e.shiftKey){r+=1}if(r===4){n=this.moveYear(this.date,i);s=this.moveYear(this.viewDate,i)}else if(r===3){n=this.moveMonth(this.date,i);s=this.moveMonth(this.viewDate,i)}else if(r===2){n=this.moveDate(this.date,i);s=this.moveDate(this.viewDate,i)}else if(r===1){n=this.moveHour(this.date,i);s=this.moveHour(this.viewDate,i)}else if(r===0){n=this.moveMinute(this.date,i);s=this.moveMinute(this.viewDate,i)}if(this.dateWithinRange(n)){this.date=n;this.viewDate=s;this.setValue();this.update();e.preventDefault();t=true}break;case 38:case 40:if(!this.keyboardNavigation)break;i=e.keyCode===38?-1:1;r=this.viewMode;if(e.ctrlKey){r+=2}else if(e.shiftKey){r+=1}if(r===4){n=this.moveYear(this.date,i);s=this.moveYear(this.viewDate,i)}else if(r===3){n=this.moveMonth(this.date,i);s=this.moveMonth(this.viewDate,i)}else if(r===2){n=this.moveDate(this.date,i*7);s=this.moveDate(this.viewDate,i*7)}else if(r===1){if(this.showMeridian){n=this.moveHour(this.date,i*6);s=this.moveHour(this.viewDate,i*6)}else{n=this.moveHour(this.date,i*4);s=this.moveHour(this.viewDate,i*4)}}else if(r===0){n=this.moveMinute(this.date,i*4);s=this.moveMinute(this.viewDate,i*4)}if(this.dateWithinRange(n)){this.date=n;this.viewDate=s;this.setValue();this.update();e.preventDefault();t=true}break;case 13:if(this.viewMode!==0){var a=this.viewMode;this.showMode(-1);this.fill();if(a===this.viewMode&&this.autoclose){this.hide()}}else{this.fill();if(this.autoclose){this.hide()}}e.preventDefault();break;case 9:this.hide();break}if(t){var o;if(this.isInput){o=this.element}else if(this.component){o=this.element.find("input")}if(o){o.change()}this.element.trigger({type:"changeDate",date:this.getDate()})}},showMode:function(e){if(e){var t=Math.max(0,Math.min(o.modes.length-1,this.viewMode+e));if(t>=this.minView&&t<=this.maxView){this.element.trigger({type:"changeMode",date:this.viewDate,oldViewMode:this.viewMode,newViewMode:t});this.viewMode=t}}this.picker.find(">div").hide().filter(".datetimepicker-"+o.modes[this.viewMode].clsName).css("display","block");this.updateNavArrows()},reset:function(){this._setDate(null,"date")},convertViewModeText:function(e){switch(e){case 4:return"decade";case 3:return"year";case 2:return"month";case 1:return"day";case 0:return"hour"}}};var r=e.fn.datetimepicker;e.fn.datetimepicker=function(i){var n=Array.apply(null,arguments);n.shift();var r;this.each(function(){var a=e(this),o=a.data("datetimepicker"),l=typeof i==="object"&&i;if(!o){a.data("datetimepicker",o=new s(this,e.extend({},e.fn.datetimepicker.defaults,l)))}if(typeof i==="string"&&typeof o[i]==="function"){r=o[i].apply(o,n);if(r!==t){return false}}});if(r!==t)return r;else return this};e.fn.datetimepicker.defaults={};e.fn.datetimepicker.Constructor=s;var a=e.fn.datetimepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sun"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa","Su"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],meridiem:["am","pm"],suffix:["st","nd","rd","th"],today:"Today",clear:"Clear"}};var o={modes:[{clsName:"minutes",navFnc:"Hours",navStep:1},{clsName:"hours",navFnc:"Date",navStep:1},{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10}],isLeapYear:function(e){return e%4===0&&e%100!==0||e%400===0},getDaysInMonth:function(e,t){return[31,o.isLeapYear(e)?29:28,31,30,31,30,31,31,30,31,30,31][t]},getDefaultFormat:function(e,t){if(e==="standard"){if(t==="input")return"yyyy-mm-dd hh:ii";else return"yyyy-mm-dd hh:ii:ss"}else if(e==="php"){if(t==="input")return"Y-m-d H:i";else return"Y-m-d H:i:s"}else{throw new Error("Invalid format type.")}},validParts:function(e){if(e==="standard"){return/t|hh?|HH?|p|P|z|Z|ii?|ss?|dd?|DD?|mm?|MM?|yy(?:yy)?/g}else if(e==="php"){return/[dDjlNwzFmMnStyYaABgGhHis]/g}else{throw new Error("Invalid format type.")}},nonpunctuation:/[^ -\/:-@\[-`{-~\t\n\rTZ]+/g,parseFormat:function(e,t){var i=e.replace(this.validParts(t),"\0").split("\0"),n=e.match(this.validParts(t));if(!i||!i.length||!n||n.length===0){throw new Error("Invalid date format.")}return{separators:i,parts:n}},parseDate:function(t,i,r,o,l){if(t instanceof Date){var u=new Date(t.valueOf()-t.getTimezoneOffset()*6e4);u.setMilliseconds(0);return u}if(/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(t)){i=this.parseFormat("yyyy-mm-dd",o)}if(/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(t)){i=this.parseFormat("yyyy-mm-dd hh:ii",o)}if(/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(t)){i=this.parseFormat("yyyy-mm-dd hh:ii:ss",o)}if(/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(t)){var f=/([-+]\d+)([dmwy])/,c=t.match(/([-+]\d+)([dmwy])/g),d,h;t=new Date;for(var p=0;p<c.length;p++){d=f.exec(c[p]);h=parseInt(d[1]);switch(d[2]){case"d":t.setUTCDate(t.getUTCDate()+h);break;case"m":t=s.prototype.moveMonth.call(s.prototype,t,h);break;case"w":t.setUTCDate(t.getUTCDate()+h*7);break;case"y":t=s.prototype.moveYear.call(s.prototype,t,h);break}}return n(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),0)}var c=t&&t.toString().match(this.nonpunctuation)||[],t=new Date(0,0,0,0,0,0,0),m={},g=["hh","h","ii","i","ss","s","yyyy","yy","M","MM","m","mm","D","DD","d","dd","H","HH","p","P","z","Z"],v={hh:function(e,t){return e.setUTCHours(t)},h:function(e,t){return e.setUTCHours(t)},HH:function(e,t){return e.setUTCHours(t===12?0:t)},H:function(e,t){return e.setUTCHours(t===12?0:t)},ii:function(e,t){return e.setUTCMinutes(t)},i:function(e,t){return e.setUTCMinutes(t)},ss:function(e,t){return e.setUTCSeconds(t)},s:function(e,t){return e.setUTCSeconds(t)},yyyy:function(e,t){return e.setUTCFullYear(t)},yy:function(e,t){return e.setUTCFullYear(2e3+t)},m:function(e,t){t-=1;while(t<0)t+=12;t%=12;e.setUTCMonth(t);while(e.getUTCMonth()!==t)if(isNaN(e.getUTCMonth()))return e;else e.setUTCDate(e.getUTCDate()-1);return e},d:function(e,t){return e.setUTCDate(t)},p:function(e,t){return e.setUTCHours(t===1?e.getUTCHours()+12:e.getUTCHours())},z:function(){return l}},y,b,d;v["M"]=v["MM"]=v["mm"]=v["m"];v["dd"]=v["d"];v["P"]=v["p"];v["Z"]=v["z"];t=n(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds());if(c.length===i.parts.length){for(var p=0,w=i.parts.length;p<w;p++){y=parseInt(c[p],10);d=i.parts[p];if(isNaN(y)){switch(d){case"MM":b=e(a[r].months).filter(function(){var e=this.slice(0,c[p].length),t=c[p].slice(0,e.length);return e===t});y=e.inArray(b[0],a[r].months)+1;break;case"M":b=e(a[r].monthsShort).filter(function(){var e=this.slice(0,c[p].length),t=c[p].slice(0,e.length);return e.toLowerCase()===t.toLowerCase()});y=e.inArray(b[0],a[r].monthsShort)+1;break;case"p":case"P":y=e.inArray(c[p].toLowerCase(),a[r].meridiem);break;case"z":case"Z":l;break}}m[d]=y}for(var p=0,x;p<g.length;p++){x=g[p];if(x in m&&!isNaN(m[x]))v[x](t,m[x])}}return t},formatDate:function(t,i,n,s,r){if(t===null){return""}var l;if(s==="standard"){l={t:t.getTime(),yy:t.getUTCFullYear().toString().substring(2),yyyy:t.getUTCFullYear(),m:t.getUTCMonth()+1,M:a[n].monthsShort[t.getUTCMonth()],MM:a[n].months[t.getUTCMonth()],d:t.getUTCDate(),D:a[n].daysShort[t.getUTCDay()],DD:a[n].days[t.getUTCDay()],p:a[n].meridiem.length===2?a[n].meridiem[t.getUTCHours()<12?0:1]:"",h:t.getUTCHours(),i:t.getUTCMinutes(),s:t.getUTCSeconds(),z:r};if(a[n].meridiem.length===2){l.H=l.h%12===0?12:l.h%12}else{l.H=l.h}l.HH=(l.H<10?"0":"")+l.H;l.P=l.p.toUpperCase();l.Z=l.z;l.hh=(l.h<10?"0":"")+l.h;l.ii=(l.i<10?"0":"")+l.i;l.ss=(l.s<10?"0":"")+l.s;l.dd=(l.d<10?"0":"")+l.d;l.mm=(l.m<10?"0":"")+l.m}else if(s==="php"){l={y:t.getUTCFullYear().toString().substring(2),Y:t.getUTCFullYear(),F:a[n].months[t.getUTCMonth()],M:a[n].monthsShort[t.getUTCMonth()],n:t.getUTCMonth()+1,t:o.getDaysInMonth(t.getUTCFullYear(),t.getUTCMonth()),j:t.getUTCDate(),l:a[n].days[t.getUTCDay()],D:a[n].daysShort[t.getUTCDay()],w:t.getUTCDay(),N:t.getUTCDay()===0?7:t.getUTCDay(),S:t.getUTCDate()%10<=a[n].suffix.length?a[n].suffix[t.getUTCDate()%10-1]:"",a:a[n].meridiem.length===2?a[n].meridiem[t.getUTCHours()<12?0:1]:"",g:t.getUTCHours()%12===0?12:t.getUTCHours()%12,G:t.getUTCHours(),i:t.getUTCMinutes(),s:t.getUTCSeconds()};l.m=(l.n<10?"0":"")+l.n;l.d=(l.j<10?"0":"")+l.j;l.A=l.a.toString().toUpperCase();l.h=(l.g<10?"0":"")+l.g;l.H=(l.G<10?"0":"")+l.G;l.i=(l.i<10?"0":"")+l.i;l.s=(l.s<10?"0":"")+l.s}else{throw new Error("Invalid format type.")}var t=[],u=e.extend([],i.separators);for(var f=0,c=i.parts.length;f<c;f++){if(u.length){t.push(u.shift())}t.push(l[i.parts[f]])}if(u.length){t.push(u.shift())}return t.join("")},convertViewMode:function(e){switch(e){case 4:case"decade":e=4;break;case 3:case"year":e=3;break;case 2:case"month":e=2;break;case 1:case"day":e=1;break;case 0:case"hour":e=0;break}return e},headTemplate:"<thead>"+"<tr>"+'<th class="prev"><i class="{iconType} {leftArrow}"/></th>'+'<th colspan="5" class="switch"></th>'+'<th class="next"><i class="{iconType} {rightArrow}"/></th>'+"</tr>"+"</thead>",headTemplateV3:"<thead>"+"<tr>"+'<th class="prev"><span class="{iconType} {leftArrow}"></span> </th>'+'<th colspan="5" class="switch"></th>'+'<th class="next"><span class="{iconType} {rightArrow}"></span> </th>'+"</tr>"+"</thead>",contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:"<tfoot>"+'<tr><th colspan="7" class="today"></th></tr>'+'<tr><th colspan="7" class="clear"></th></tr>'+"</tfoot>"};o.template='<div class="datetimepicker">'+'<div class="datetimepicker-minutes">'+'<table class=" table-condensed">'+o.headTemplate+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-hours">'+'<table class=" table-condensed">'+o.headTemplate+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-days">'+'<table class=" table-condensed">'+o.headTemplate+"<tbody></tbody>"+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-months">'+'<table class="table-condensed">'+o.headTemplate+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-years">'+'<table class="table-condensed">'+o.headTemplate+o.contTemplate+o.footTemplate+"</table>"+"</div>"+"</div>";o.templateV3='<div class="datetimepicker">'+'<div class="datetimepicker-minutes">'+'<table class=" table-condensed">'+o.headTemplateV3+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-hours">'+'<table class=" table-condensed">'+o.headTemplateV3+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-days">'+'<table class=" table-condensed">'+o.headTemplateV3+"<tbody></tbody>"+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-months">'+'<table class="table-condensed">'+o.headTemplateV3+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-years">'+'<table class="table-condensed">'+o.headTemplateV3+o.contTemplate+o.footTemplate+"</table>"+"</div>"+"</div>";e.fn.datetimepicker.DPGlobal=o;e.fn.datetimepicker.noConflict=function(){e.fn.datetimepicker=r;return this};e(document).on("focus.datetimepicker.data-api click.datetimepicker.data-api",'[data-provide="datetimepicker"]',function(t){var i=e(this);if(i.data("datetimepicker"))return;t.preventDefault();i.datetimepicker("show")});e(function(){e('[data-provide="datetimepicker-inline"]').datetimepicker()})});(function(e){"use strict";var t=function(t,i){this.options=e.extend({},e.fn.editableform.defaults,i);this.$div=e(t);if(!this.options.scope){this.options.scope=this}};t.prototype={constructor:t,initInput:function(){this.input=this.options.input;this.value=this.input.str2value(this.options.value);this.input.prerender()},initTemplate:function(){this.$form=e(e.fn.editableform.template)},initButtons:function(){var t=this.$form.find(".editable-buttons");t.append(e.fn.editableform.buttons);if(this.options.showbuttons==="bottom"){t.addClass("editable-buttons-bottom")}},render:function(){this.$loading=e(e.fn.editableform.loading);this.$div.empty().append(this.$loading);this.initTemplate();if(this.options.showbuttons){this.initButtons()}else{this.$form.find(".editable-buttons").remove()}this.showLoading();this.isSaving=false;this.$div.triggerHandler("rendering");this.initInput();this.$form.find("div.editable-input").append(this.input.$tpl);this.$div.append(this.$form);e.when(this.input.render()).then(e.proxy(function(){if(!this.options.showbuttons){this.input.autosubmit()}this.$form.find(".editable-cancel").click(e.proxy(this.cancel,this));if(this.input.error){this.error(this.input.error);this.$form.find(".editable-submit").attr("disabled",true);this.input.$input.attr("disabled",true);this.$form.submit(function(e){e.preventDefault()})}else{this.error(false);this.input.$input.removeAttr("disabled");this.$form.find(".editable-submit").removeAttr("disabled");var t=this.value===null||this.value===undefined||this.value===""?this.options.defaultValue:this.value;this.input.value2input(t);this.$form.submit(e.proxy(this.submit,this))}this.$div.triggerHandler("rendered");this.showForm();if(this.input.postrender){this.input.postrender()}},this))},cancel:function(){this.$div.triggerHandler("cancel")},showLoading:function(){var e,t;if(this.$form){e=this.$form.outerWidth();t=this.$form.outerHeight();if(e){this.$loading.width(e)}if(t){this.$loading.height(t)}this.$form.hide()}else{e=this.$loading.parent().width();if(e){this.$loading.width(e)}}this.$loading.show()},showForm:function(e){this.$loading.hide();this.$form.show();if(e!==false){this.input.activate()}this.$div.triggerHandler("show")},error:function(t){var i=this.$form.find(".control-group"),n=this.$form.find(".editable-error-block"),s;if(t===false){i.removeClass(e.fn.editableform.errorGroupClass);n.removeClass(e.fn.editableform.errorBlockClass).empty().hide()}else{if(t){s=(""+t).split("\n");for(var r=0;r<s.length;r++){s[r]=e("<div>").text(s[r]).html()}t=s.join("<br>")}i.addClass(e.fn.editableform.errorGroupClass);n.addClass(e.fn.editableform.errorBlockClass).html(t).show()}},submit:function(t){t.stopPropagation();t.preventDefault();var i=this.input.input2value();var n=this.validate(i);if(e.type(n)==="object"&&n.newValue!==undefined){i=n.newValue;this.input.value2input(i);if(typeof n.msg==="string"){this.error(n.msg);this.showForm();return}}else if(n){this.error(n);this.showForm();return}if(!this.options.savenochange&&this.input.value2str(i)==this.input.value2str(this.value)){this.$div.triggerHandler("nochange");return}var s=this.input.value2submit(i);this.isSaving=true;e.when(this.save(s)).done(e.proxy(function(e){this.isSaving=false;var t=typeof this.options.success==="function"?this.options.success.call(this.options.scope,e,i):null;if(t===false){this.error(false);this.showForm(false);return}if(typeof t==="string"){this.error(t);this.showForm();return}if(t&&typeof t==="object"&&t.hasOwnProperty("newValue")){i=t.newValue}this.error(false);this.value=i;this.$div.triggerHandler("save",{newValue:i,submitValue:s,response:e})},this)).fail(e.proxy(function(e){this.isSaving=false;var t;if(typeof this.options.error==="function"){t=this.options.error.call(this.options.scope,e,i)}else{t=typeof e==="string"?e:e.responseText||e.statusText||"Unknown error!"}this.error(t);this.showForm()},this))},save:function(t){this.options.pk=e.fn.editableutils.tryParseJson(this.options.pk,true);var i=typeof this.options.pk==="function"?this.options.pk.call(this.options.scope):this.options.pk,n=!!(typeof this.options.url==="function"||this.options.url&&(this.options.send==="always"||this.options.send==="auto"&&i!==null&&i!==undefined)),s;if(n){this.showLoading();s={name:this.options.name||"",value:t,pk:i};if(typeof this.options.params==="function"){s=this.options.params.call(this.options.scope,s)}else{this.options.params=e.fn.editableutils.tryParseJson(this.options.params,true);e.extend(s,this.options.params)}if(typeof this.options.url==="function"){return this.options.url.call(this.options.scope,s)}else{return e.ajax(e.extend({url:this.options.url,data:s,type:"POST"},this.options.ajaxOptions))}}},validate:function(e){if(e===undefined){e=this.value}if(typeof this.options.validate==="function"){return this.options.validate.call(this.options.scope,e)}},option:function(e,t){if(e in this.options){this.options[e]=t}if(e==="value"){this.setValue(t)}},setValue:function(e,t){if(t){this.value=this.input.str2value(e)}else{this.value=e}if(this.$form&&this.$form.is(":visible")){this.input.value2input(this.value)}}};e.fn.editableform=function(i){var n=arguments;return this.each(function(){var s=e(this),r=s.data("editableform"),a=typeof i==="object"&&i;if(!r){s.data("editableform",r=new t(this,a))}if(typeof i==="string"){r[i].apply(r,Array.prototype.slice.call(n,1))}})};e.fn.editableform.Constructor=t;e.fn.editableform.defaults={type:"text",url:null,params:null,name:null,pk:null,value:null,defaultValue:null,send:"auto",validate:null,success:null,error:null,ajaxOptions:null,showbuttons:true,scope:null,savenochange:false};e.fn.editableform.template='<form class="form-inline editableform">'+'<div class="control-group">'+'<div><div class="editable-input"></div><div class="editable-buttons"></div></div>'+'<div class="editable-error-block"></div>'+"</div>"+"</form>";e.fn.editableform.loading='<div class="editableform-loading"></div>';e.fn.editableform.buttons='<button type="submit" class="editable-submit">ok</button>'+'<button type="button" class="editable-cancel">cancel</button>';e.fn.editableform.errorGroupClass=null;e.fn.editableform.errorBlockClass="editable-error";e.fn.editableform.engine="jquery"})(window.jQuery);(function(e){"use strict";e.fn.editableutils={inherit:function(e,t){var i=function(){};i.prototype=t.prototype;e.prototype=new i;e.prototype.constructor=e;e.superclass=t.prototype},setCursorPosition:function(e,t){if(e.setSelectionRange){e.setSelectionRange(t,t)}else if(e.createTextRange){var i=e.createTextRange();i.collapse(true);i.moveEnd("character",t);i.moveStart("character",t);i.select()}},tryParseJson:function(e,t){if(typeof e==="string"&&e.length&&e.match(/^[\{\[].*[\}\]]$/)){if(t){try{e=new Function("return "+e)()}catch(e){}finally{return e}}else{e=new Function("return "+e)()}}return e},sliceObj:function(t,i,n){var s,r,a={};if(!e.isArray(i)||!i.length){return a}for(var o=0;o<i.length;o++){s=i[o];if(t.hasOwnProperty(s)){a[s]=t[s]}if(n===true){continue}r=s.toLowerCase();if(t.hasOwnProperty(r)){a[s]=t[r]}}return a},getConfigData:function(t){var i={};e.each(t.data(),function(e,t){if(typeof t!=="object"||t&&typeof t==="object"&&(t.constructor===Object||t.constructor===Array)){i[e]=t}});return i},objectKeys:function(e){if(Object.keys){return Object.keys(e)}else{if(e!==Object(e)){throw new TypeError("Object.keys called on a non-object")}var t=[],i;for(i in e){if(Object.prototype.hasOwnProperty.call(e,i)){t.push(i)}}return t}},escape:function(t){return e("<div>").text(t).html()},itemsByValue:function(t,i,n){if(!i||t===null){return[]}if(typeof n!=="function"){var s=n||"value";n=function(e){return e[s]}}var r=e.isArray(t),a=[],o=this;e.each(i,function(i,s){if(s.children){a=a.concat(o.itemsByValue(t,s.children,n))}else{if(r){if(e.grep(t,function(e){return e==(s&&typeof s==="object"?n(s):s)}).length){a.push(s)}}else{var l=s&&typeof s==="object"?n(s):s;if(t==l){a.push(s)}}}});return a},createInput:function(t){var i,n,s,r=t.type;if(r==="date"){if(t.mode==="inline"){if(e.fn.editabletypes.datefield){r="datefield"}else if(e.fn.editabletypes.dateuifield){r="dateuifield"}}else{if(e.fn.editabletypes.date){r="date"}else if(e.fn.editabletypes.dateui){r="dateui"}}if(r==="date"&&!e.fn.editabletypes.date){r="combodate"}}if(r==="datetime"&&t.mode==="inline"){r="datetimefield"}if(r==="wysihtml5"&&!e.fn.editabletypes[r]){r="textarea"}if(typeof e.fn.editabletypes[r]==="function"){i=e.fn.editabletypes[r];n=this.sliceObj(t,this.objectKeys(i.defaults));s=new i(n);return s}else{e.error("Unknown type: "+r);return false}},supportsTransitions:function(){var e=document.body||document.documentElement,t=e.style,i="transition",n=["Moz","Webkit","Khtml","O","ms"];if(typeof t[i]==="string"){return true}i=i.charAt(0).toUpperCase()+i.substr(1);for(var s=0;s<n.length;s++){if(typeof t[n[s]+i]==="string"){return true}}return false}}})(window.jQuery);(function(e){"use strict";var t=function(e,t){this.init(e,t)};var i=function(e,t){this.init(e,t)};t.prototype={containerName:null,containerDataName:null,innerCss:null,containerClass:"editable-container editable-popup",defaults:{},init:function(i,n){this.$element=e(i);this.options=e.extend({},e.fn.editableContainer.defaults,n);this.splitOptions();this.formOptions.scope=this.$element[0];this.initContainer();this.delayedHide=false;this.$element.on("destroyed",e.proxy(function(){this.destroy()},this));if(!e(document).data("editable-handlers-attached")){e(document).on("keyup.editable",function(t){if(t.which===27){e(".editable-open").editableContainer("hide")}});e(document).on("click.editable",function(i){var n=e(i.target),s,r=[".editable-container",".ui-datepicker-header",".datepicker",".modal-backdrop",".bootstrap-wysihtml5-insert-image-modal",".bootstrap-wysihtml5-insert-link-modal"];if(!e.contains(document.documentElement,i.target)){return}if(n.is(document)){return}for(s=0;s<r.length;s++){if(n.is(r[s])||n.parents(r[s]).length){return}}t.prototype.closeOthers(i.target)});e(document).data("editable-handlers-attached",true)}},splitOptions:function(){this.containerOptions={};this.formOptions={};if(!e.fn[this.containerName]){throw new Error(this.containerName+" not found. Have you included corresponding js file?")}for(var t in this.options){if(t in this.defaults){this.containerOptions[t]=this.options[t]}else{this.formOptions[t]=this.options[t]}}},tip:function(){return this.container()?this.container().$tip:null},container:function(){var e;if(this.containerDataName){if(e=this.$element.data(this.containerDataName)){return e}}e=this.$element.data(this.containerName);return e},call:function(){this.$element[this.containerName].apply(this.$element,arguments)},initContainer:function(){this.call(this.containerOptions)},renderForm:function(){this.$form.editableform(this.formOptions).on({save:e.proxy(this.save,this),nochange:e.proxy(function(){this.hide("nochange")},this),cancel:e.proxy(function(){this.hide("cancel")},this),show:e.proxy(function(){if(this.delayedHide){this.hide(this.delayedHide.reason);this.delayedHide=false}else{this.setPosition()}},this),rendering:e.proxy(this.setPosition,this),resize:e.proxy(this.setPosition,this),rendered:e.proxy(function(){this.$element.triggerHandler("shown",e(this.options.scope).data("editable"))},this)}).editableform("render")},show:function(t){this.$element.addClass("editable-open");if(t!==false){this.closeOthers(this.$element[0])}this.innerShow();this.tip().addClass(this.containerClass);if(this.$form){}this.$form=e("<div>");if(this.tip().is(this.innerCss)){this.tip().append(this.$form)}else{this.tip().find(this.innerCss).append(this.$form)}this.renderForm()},hide:function(e){if(!this.tip()||!this.tip().is(":visible")||!this.$element.hasClass("editable-open")){return}if(this.$form.data("editableform").isSaving){this.delayedHide={reason:e};return}else{this.delayedHide=false}this.$element.removeClass("editable-open");this.innerHide();this.$element.triggerHandler("hidden",e||"manual")},innerShow:function(){},innerHide:function(){},toggle:function(e){if(this.container()&&this.tip()&&this.tip().is(":visible")){this.hide()}else{this.show(e)}},setPosition:function(){},save:function(e,t){this.$element.triggerHandler("save",t);this.hide("save")},option:function(e,t){this.options[e]=t;if(e in this.containerOptions){this.containerOptions[e]=t;this.setContainerOption(e,t)}else{this.formOptions[e]=t;if(this.$form){this.$form.editableform("option",e,t)}}},setContainerOption:function(e,t){this.call("option",e,t)},destroy:function(){this.hide();this.innerDestroy();this.$element.off("destroyed");this.$element.removeData("editableContainer")},innerDestroy:function(){},closeOthers:function(t){e(".editable-open").each(function(i,n){if(n===t||e(n).find(t).length){return}var s=e(n),r=s.data("editableContainer");if(!r){return}if(r.options.onblur==="cancel"){s.data("editableContainer").hide("onblur")}else if(r.options.onblur==="submit"){s.data("editableContainer").tip().find("form").submit()}})},activate:function(){if(this.tip&&this.tip().is(":visible")&&this.$form){this.$form.data("editableform").input.activate()}}};e.fn.editableContainer=function(n){var s=arguments;return this.each(function(){var r=e(this),a="editableContainer",o=r.data(a),l=typeof n==="object"&&n,u=l.mode==="inline"?i:t;if(!o){r.data(a,o=new u(this,l))}if(typeof n==="string"){o[n].apply(o,Array.prototype.slice.call(s,1))}})};e.fn.editableContainer.Popup=t;e.fn.editableContainer.Inline=i;e.fn.editableContainer.defaults={value:null,placement:"top",autohide:true,onblur:"cancel",anim:false,mode:"popup"};jQuery.event.special.destroyed={remove:function(e){if(e.handler){e.handler()}}}})(window.jQuery);(function(e){"use strict";e.extend(e.fn.editableContainer.Inline.prototype,e.fn.editableContainer.Popup.prototype,{containerName:"editableform",innerCss:".editable-inline",containerClass:"editable-container editable-inline",initContainer:function(){this.$tip=e("<span></span>");if(!this.options.anim){this.options.anim=0}},splitOptions:function(){this.containerOptions={};this.formOptions=this.options},tip:function(){return this.$tip},innerShow:function(){this.$element.hide();this.tip().insertAfter(this.$element).show()},innerHide:function(){this.$tip.hide(this.options.anim,e.proxy(function(){this.$element.show();this.innerDestroy()},this))},innerDestroy:function(){if(this.tip()){this.tip().empty().remove()}}})})(window.jQuery);(function(e){"use strict";var t=function(t,i){this.$element=e(t);this.options=e.extend({},e.fn.editable.defaults,i,e.fn.editableutils.getConfigData(this.$element));if(this.options.selector){this.initLive()}else{this.init()}if(this.options.highlight&&!e.fn.editableutils.supportsTransitions()){this.options.highlight=false}};t.prototype={constructor:t,init:function(){var t=false,i,n;this.options.name=this.options.name||this.$element.attr("id");this.options.scope=this.$element[0];this.input=e.fn.editableutils.createInput(this.options);if(!this.input){return}if(this.options.value===undefined||this.options.value===null){this.value=this.input.html2value(e.trim(this.$element.html()));t=true}else{this.options.value=e.fn.editableutils.tryParseJson(this.options.value,true);if(typeof this.options.value==="string"){this.value=this.input.str2value(this.options.value)}else{this.value=this.options.value}}this.$element.addClass("editable");if(this.input.type==="textarea"){this.$element.addClass("editable-pre-wrapped")}if(this.options.toggle!=="manual"){this.$element.addClass("editable-click");this.$element.on(this.options.toggle+".editable",e.proxy(function(e){if(!this.options.disabled){e.preventDefault()}if(this.options.toggle==="mouseenter"){this.show()}else{var t=this.options.toggle!=="click";this.toggle(t)}},this))}else{this.$element.attr("tabindex",-1)}if(typeof this.options.display==="function"){this.options.autotext="always"}switch(this.options.autotext){case"always":i=true;break;case"auto":i=!e.trim(this.$element.text()).length&&this.value!==null&&this.value!==undefined&&!t;break;default:i=false}e.when(i?this.render():true).then(e.proxy(function(){if(this.options.disabled){this.disable()}else{this.enable()}this.$element.triggerHandler("init",this)},this))},initLive:function(){var t=this.options.selector;this.options.selector=false;this.options.autotext="never";this.$element.on(this.options.toggle+".editable",t,e.proxy(function(t){var i=e(t.target);if(!i.data("editable")){if(i.hasClass(this.options.emptyclass)){i.empty()}i.editable(this.options).trigger(t)}},this))},render:function(e){if(this.options.display===false){return}if(this.input.value2htmlFinal){return this.input.value2html(this.value,this.$element[0],this.options.display,e)}else if(typeof this.options.display==="function"){return this.options.display.call(this.$element[0],this.value,e)}else{return this.input.value2html(this.value,this.$element[0])}},enable:function(){this.options.disabled=false;this.$element.removeClass("editable-disabled");this.handleEmpty(this.isEmpty);if(this.options.toggle!=="manual"){if(this.$element.attr("tabindex")==="-1"){this.$element.removeAttr("tabindex")}}},disable:function(){this.options.disabled=true;this.hide();this.$element.addClass("editable-disabled");this.handleEmpty(this.isEmpty);this.$element.attr("tabindex",-1)},toggleDisabled:function(){if(this.options.disabled){this.enable()}else{this.disable()}},option:function(t,i){if(t&&typeof t==="object"){e.each(t,e.proxy(function(t,i){this.option(e.trim(t),i)},this));return}this.options[t]=i;if(t==="disabled"){return i?this.disable():this.enable()}if(t==="value"){this.setValue(i)}if(this.container){this.container.option(t,i)}if(this.input.option){this.input.option(t,i)}},handleEmpty:function(t){if(this.options.display===false){return}if(t!==undefined){this.isEmpty=t}else{if(typeof this.input.isEmpty==="function"){this.isEmpty=this.input.isEmpty(this.$element)}else{this.isEmpty=e.trim(this.$element.html())===""}}if(!this.options.disabled){if(this.isEmpty){this.$element.html(this.options.emptytext);if(this.options.emptyclass){this.$element.addClass(this.options.emptyclass)}}else if(this.options.emptyclass){this.$element.removeClass(this.options.emptyclass)}}else{if(this.isEmpty){this.$element.empty();if(this.options.emptyclass){this.$element.removeClass(this.options.emptyclass)}}}},show:function(t){if(this.options.disabled){return}if(!this.container){var i=e.extend({},this.options,{value:this.value,input:this.input});this.$element.editableContainer(i);this.$element.on("save.internal",e.proxy(this.save,this));this.container=this.$element.data("editableContainer")}else if(this.container.tip().is(":visible")){return}this.container.show(t)},hide:function(){if(this.container){this.container.hide()}},toggle:function(e){if(this.container&&this.container.tip().is(":visible")){this.hide()}else{this.show(e)}},save:function(e,t){if(this.options.unsavedclass){var i=false;i=i||typeof this.options.url==="function";i=i||this.options.display===false;i=i||t.response!==undefined;i=i||this.options.savenochange&&this.input.value2str(this.value)!==this.input.value2str(t.newValue);if(i){this.$element.removeClass(this.options.unsavedclass)}else{this.$element.addClass(this.options.unsavedclass)}}if(this.options.highlight){var n=this.$element,s=n.css("background-color");n.css("background-color",this.options.highlight);setTimeout(function(){if(s==="transparent"){s=""}n.css("background-color",s);n.addClass("editable-bg-transition");setTimeout(function(){n.removeClass("editable-bg-transition")},1700)},10)}this.setValue(t.newValue,false,t.response)},validate:function(){if(typeof this.options.validate==="function"){return this.options.validate.call(this,this.value)}},setValue:function(t,i,n){if(i){this.value=this.input.str2value(t)}else{this.value=t}if(this.container){this.container.option("value",this.value)}e.when(this.render(n)).then(e.proxy(function(){this.handleEmpty()},this))},activate:function(){if(this.container){this.container.activate()}},destroy:function(){this.disable();if(this.container){this.container.destroy()}this.input.destroy();if(this.options.toggle!=="manual"){this.$element.removeClass("editable-click");this.$element.off(this.options.toggle+".editable")}this.$element.off("save.internal");this.$element.removeClass("editable editable-open editable-disabled");this.$element.removeData("editable")}};e.fn.editable=function(i){var n={},s=arguments,r="editable";switch(i){case"validate":this.each(function(){var t=e(this),i=t.data(r),s;if(i&&(s=i.validate())){n[i.options.name]=s}});return n;case"getValue":if(arguments.length===2&&arguments[1]===true){n=this.eq(0).data(r).value}else{this.each(function(){var t=e(this),i=t.data(r);if(i&&i.value!==undefined&&i.value!==null){n[i.options.name]=i.input.value2submit(i.value)}})}return n;case"submit":var a=arguments[1]||{},o=this,l=this.editable("validate");if(e.isEmptyObject(l)){var u={};if(o.length===1){var f=o.data("editable");var c={name:f.options.name||"",value:f.input.value2submit(f.value),pk:typeof f.options.pk==="function"?f.options.pk.call(f.options.scope):f.options.pk};if(typeof f.options.params==="function"){c=f.options.params.call(f.options.scope,c)}else{f.options.params=e.fn.editableutils.tryParseJson(f.options.params,true);e.extend(c,f.options.params)}u={url:f.options.url,data:c,type:"POST"};a.success=a.success||f.options.success;a.error=a.error||f.options.error}else{var d=this.editable("getValue");u={url:a.url,data:d,type:"POST"}}u.success=typeof a.success==="function"?function(e){a.success.call(o,e,a)}:e.noop;u.error=typeof a.error==="function"?function(){a.error.apply(o,arguments)}:e.noop;if(a.ajaxOptions){e.extend(u,a.ajaxOptions)}if(a.data){e.extend(u.data,a.data)}e.ajax(u)}else{if(typeof a.error==="function"){a.error.call(o,l)}}return this}return this.each(function(){var n=e(this),a=n.data(r),o=typeof i==="object"&&i;if(o&&o.selector){a=new t(this,o);return}if(!a){n.data(r,a=new t(this,o))}if(typeof i==="string"){a[i].apply(a,Array.prototype.slice.call(s,1))}})};e.fn.editable.defaults={type:"text",disabled:false,toggle:"click",emptytext:"Empty",autotext:"auto",value:null,display:null,emptyclass:"editable-empty",unsavedclass:"editable-unsaved",selector:null,highlight:"#FFFF80"}})(window.jQuery);(function(e){"use strict";e.fn.editabletypes={};var t=function(){};t.prototype={init:function(t,i,n){this.type=t;this.options=e.extend({},n,i)},prerender:function(){this.$tpl=e(this.options.tpl);this.$input=this.$tpl;this.$clear=null;this.error=null},render:function(){},value2html:function(t,i){e(i)[this.options.escape?"text":"html"](e.trim(t))},html2value:function(t){return e("<div>").html(t).text()},value2str:function(e){return e},str2value:function(e){return e},value2submit:function(e){return e},value2input:function(e){this.$input.val(e)},input2value:function(){return this.$input.val()},activate:function(){if(this.$input.is(":visible")){this.$input.focus()}},clear:function(){this.$input.val(null)},escape:function(t){return e("<div>").text(t).html()},autosubmit:function(){},destroy:function(){},setClass:function(){if(this.options.inputclass){this.$input.addClass(this.options.inputclass)}},setAttr:function(e){if(this.options[e]!==undefined&&this.options[e]!==null){this.$input.attr(e,this.options[e])}},option:function(e,t){this.options[e]=t}};t.defaults={tpl:"",inputclass:null,escape:true,scope:null,showbuttons:true};e.extend(e.fn.editabletypes,{abstractinput:t})})(window.jQuery);(function(e){"use strict";var t=function(e){};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){var t=e.Deferred();this.error=null;this.onSourceReady(function(){this.renderList();t.resolve()},function(){this.error=this.options.sourceError;t.resolve()});return t.promise()},html2value:function(e){return null},value2html:function(t,i,n,s){var r=e.Deferred(),a=function(){if(typeof n==="function"){n.call(i,t,this.sourceData,s)}else{this.value2htmlFinal(t,i)}r.resolve()};if(t===null){a.call(this)}else{this.onSourceReady(a,function(){r.resolve()})}return r.promise()},onSourceReady:function(t,i){var n;if(e.isFunction(this.options.source)){n=this.options.source.call(this.options.scope);this.sourceData=null}else{n=this.options.source}if(this.options.sourceCache&&e.isArray(this.sourceData)){t.call(this);return}try{n=e.fn.editableutils.tryParseJson(n,false)}catch(e){i.call(this);return}if(typeof n==="string"){if(this.options.sourceCache){var s=n,r;if(!e(document).data(s)){e(document).data(s,{})}r=e(document).data(s);if(r.loading===false&&r.sourceData){this.sourceData=r.sourceData;this.doPrepend();t.call(this);return}else if(r.loading===true){r.callbacks.push(e.proxy(function(){this.sourceData=r.sourceData;this.doPrepend();t.call(this)},this));r.err_callbacks.push(e.proxy(i,this));return}else{r.loading=true;r.callbacks=[];r.err_callbacks=[]}}var a=e.extend({url:n,type:"get",cache:false,dataType:"json",success:e.proxy(function(n){if(r){r.loading=false}this.sourceData=this.makeArray(n);if(e.isArray(this.sourceData)){if(r){r.sourceData=this.sourceData;e.each(r.callbacks,function(){this.call()})}this.doPrepend();t.call(this)}else{i.call(this);if(r){e.each(r.err_callbacks,function(){this.call()})}}},this),error:e.proxy(function(){i.call(this);if(r){r.loading=false;e.each(r.err_callbacks,function(){this.call()})}},this)},this.options.sourceOptions);e.ajax(a)}else{this.sourceData=this.makeArray(n);if(e.isArray(this.sourceData)){this.doPrepend();t.call(this)}else{i.call(this)}}},doPrepend:function(){if(this.options.prepend===null||this.options.prepend===undefined){return}if(!e.isArray(this.prependData)){if(e.isFunction(this.options.prepend)){this.options.prepend=this.options.prepend.call(this.options.scope)}this.options.prepend=e.fn.editableutils.tryParseJson(this.options.prepend,true);if(typeof this.options.prepend==="string"){this.options.prepend={"":this.options.prepend}}this.prependData=this.makeArray(this.options.prepend)}if(e.isArray(this.prependData)&&e.isArray(this.sourceData)){this.sourceData=this.prependData.concat(this.sourceData)}},renderList:function(){},value2htmlFinal:function(e,t){},makeArray:function(t){var i,n,s=[],r,a;if(!t||typeof t==="string"){return null}if(e.isArray(t)){a=function(e,t){n={value:e,text:t};if(i++>=2){return false}};for(var o=0;o<t.length;o++){r=t[o];if(typeof r==="object"){i=0;e.each(r,a);if(i===1){s.push(n)}else if(i>1){if(r.children){r.children=this.makeArray(r.children)}s.push(r)}}else{s.push({value:r,text:r})}}}else{e.each(t,function(e,t){s.push({value:e,text:t})})}return s},option:function(e,t){this.options[e]=t;if(e==="source"){this.sourceData=null}if(e==="prepend"){this.prependData=null}}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{source:null,prepend:false,sourceError:"Error when loading list",sourceCache:true,sourceOptions:null});e.fn.editabletypes.list=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("text",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){this.renderClear();this.setClass();this.setAttr("placeholder")},activate:function(){if(this.$input.is(":visible")){this.$input.focus();e.fn.editableutils.setCursorPosition(this.$input.get(0),this.$input.val().length);if(this.toggleClear){this.toggleClear()}}},renderClear:function(){if(this.options.clear){this.$clear=e('<span class="editable-clear-x"></span>');this.$input.after(this.$clear).css("padding-right",24).keyup(e.proxy(function(t){if(~e.inArray(t.keyCode,[40,38,9,13,27])){return}clearTimeout(this.t);var i=this;this.t=setTimeout(function(){i.toggleClear(t)},100)},this)).parent().css("position","relative");this.$clear.click(e.proxy(this.clear,this))}},postrender:function(){},toggleClear:function(e){if(!this.$clear){return}var t=this.$input.val().length,i=this.$clear.is(":visible");if(t&&!i){this.$clear.show()}if(!t&&i){this.$clear.hide()}},clear:function(){this.$clear.hide();this.$input.val("").focus()}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="text">',placeholder:null,clear:true});e.fn.editabletypes.text=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("textarea",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){this.setClass();this.setAttr("placeholder");this.setAttr("rows");this.$input.keydown(function(t){if(t.ctrlKey&&t.which===13){e(this).closest("form").submit()}})},activate:function(){e.fn.editabletypes.text.prototype.activate.call(this)}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:"<textarea></textarea>",inputclass:"input-large",placeholder:null,rows:7});e.fn.editabletypes.textarea=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("select",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.list);e.extend(t.prototype,{renderList:function(){this.$input.empty();var t=function(i,n){var s;if(e.isArray(n)){for(var r=0;r<n.length;r++){s={};if(n[r].children){s.label=n[r].text;i.append(t(e("<optgroup>",s),n[r].children))}else{s.value=n[r].value;if(n[r].disabled){s.disabled=true}i.append(e("<option>",s).text(n[r].text))}}}return i};t(this.$input,this.sourceData);this.setClass();this.$input.on("keydown.editable",function(t){if(t.which===13){e(this).closest("form").submit()}})},value2htmlFinal:function(t,i){var n="",s=e.fn.editableutils.itemsByValue(t,this.sourceData);if(s.length){n=s[0].text}e.fn.editabletypes.abstractinput.prototype.value2html.call(this,n,i)},autosubmit:function(){this.$input.off("keydown.editable").on("change.editable",function(){e(this).closest("form").submit()})}});t.defaults=e.extend({},e.fn.editabletypes.list.defaults,{tpl:"<select></select>"});e.fn.editabletypes.select=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("checklist",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.list);e.extend(t.prototype,{renderList:function(){var t,i;this.$tpl.empty();if(!e.isArray(this.sourceData)){return}for(var n=0;n<this.sourceData.length;n++){t=e("<label>").append(e("<input>",{type:"checkbox",value:this.sourceData[n].value})).append(e("<span>").text(" "+this.sourceData[n].text));e("<div>").append(t).appendTo(this.$tpl)}this.$input=this.$tpl.find('input[type="checkbox"]');this.setClass()},value2str:function(t){return e.isArray(t)?t.sort().join(e.trim(this.options.separator)):""},str2value:function(t){var i,n=null;if(typeof t==="string"&&t.length){i=new RegExp("\\s*"+e.trim(this.options.separator)+"\\s*");n=t.split(i)}else if(e.isArray(t)){n=t}else{n=[t]}return n},value2input:function(t){this.$input.prop("checked",false);if(e.isArray(t)&&t.length){this.$input.each(function(i,n){var s=e(n);e.each(t,function(e,t){if(s.val()==t){s.prop("checked",true)}})})}},input2value:function(){var t=[];this.$input.filter(":checked").each(function(i,n){t.push(e(n).val())});return t},value2htmlFinal:function(t,i){var n=[],s=e.fn.editableutils.itemsByValue(t,this.sourceData),r=this.options.escape;if(s.length){e.each(s,function(t,i){var s=r?e.fn.editableutils.escape(i.text):i.text;n.push(s)});e(i).html(n.join("<br>"))}else{e(i).empty()}},activate:function(){this.$input.first().focus()},autosubmit:function(){this.$input.on("keydown",function(t){if(t.which===13){e(this).closest("form").submit()}})}});t.defaults=e.extend({},e.fn.editabletypes.list.defaults,{tpl:'<div class="editable-checklist"></div>',inputclass:null,separator:","});e.fn.editabletypes.checklist=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("password",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.text);e.extend(t.prototype,{value2html:function(t,i){if(t){e(i).text("[hidden]")}else{e(i).empty()}},html2value:function(e){return null}});t.defaults=e.extend({},e.fn.editabletypes.text.defaults,{tpl:'<input type="password">'});e.fn.editabletypes.password=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("email",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.text);t.defaults=e.extend({},e.fn.editabletypes.text.defaults,{tpl:'<input type="email">'});e.fn.editabletypes.email=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("url",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.text);t.defaults=e.extend({},e.fn.editabletypes.text.defaults,{tpl:'<input type="url">'});e.fn.editabletypes.url=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("tel",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.text);t.defaults=e.extend({},e.fn.editabletypes.text.defaults,{tpl:'<input type="tel">'});e.fn.editabletypes.tel=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("number",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.text);e.extend(t.prototype,{render:function(){t.superclass.render.call(this);this.setAttr("min");this.setAttr("max");this.setAttr("step")},postrender:function(){if(this.$clear){this.$clear.css({right:24})}}});t.defaults=e.extend({},e.fn.editabletypes.text.defaults,{tpl:'<input type="number">',inputclass:"input-mini",min:null,max:null,step:null});e.fn.editabletypes.number=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("range",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.number);e.extend(t.prototype,{render:function(){this.$input=this.$tpl.filter("input");this.setClass();this.setAttr("min");this.setAttr("max");this.setAttr("step");this.$input.on("input",function(){e(this).siblings("output").text(e(this).val())})},activate:function(){this.$input.focus()}});t.defaults=e.extend({},e.fn.editabletypes.number.defaults,{tpl:'<input type="range"><output style="width: 30px; display: inline-block"></output>',inputclass:"input-medium"});e.fn.editabletypes.range=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("time",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){this.setClass()}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="time">'});e.fn.editabletypes.time=t})(window.jQuery);(function(e){"use strict";var t=function(i){this.init("select2",i,t.defaults);i.select2=i.select2||{};this.sourceData=null;if(i.placeholder){i.select2.placeholder=i.placeholder}if(!i.select2.tags&&i.source){var n=i.source;if(e.isFunction(i.source)){n=i.source.call(i.scope)}if(typeof n==="string"){i.select2.ajax=i.select2.ajax||{};if(!i.select2.ajax.data){i.select2.ajax.data=function(e){return{query:e}}}if(!i.select2.ajax.results){i.select2.ajax.results=function(e){return{results:e}}}i.select2.ajax.url=n}else{this.sourceData=this.convertSource(n);i.select2.data=this.sourceData}}this.options.select2=e.extend({},t.defaults.select2,i.select2);this.isMultiple=this.options.select2.tags||this.options.select2.multiple;this.isRemote="ajax"in this.options.select2;this.idFunc=this.options.select2.id;if(typeof this.idFunc!=="function"){var s=this.idFunc||"id";this.idFunc=function(e){return e[s]}}this.formatSelection=this.options.select2.formatSelection;if(typeof this.formatSelection!=="function"){this.formatSelection=function(e){return e.text}}};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){this.setClass();if(this.isRemote){this.$input.on("select2-loaded",e.proxy(function(e){this.sourceData=e.items.results},this))}if(this.isMultiple){this.$input.on("change",function(){e(this).closest("form").parent().triggerHandler("resize")})}},value2html:function(i,n){var s="",r,a=this;if(this.options.select2.tags){r=i}else if(this.sourceData){r=e.fn.editableutils.itemsByValue(i,this.sourceData,this.idFunc)}else{}if(e.isArray(r)){s=[];e.each(r,function(e,t){s.push(t&&typeof t==="object"?a.formatSelection(t):t)})}else if(r){s=a.formatSelection(r)}s=e.isArray(s)?s.join(this.options.viewseparator):s;t.superclass.value2html.call(this,s,n)},html2value:function(e){return this.options.select2.tags?this.str2value(e,this.options.viewseparator):null},value2input:function(t){if(e.isArray(t)){t=t.join(this.getSeparator())}if(!this.$input.data("select2")){this.$input.val(t);this.$input.select2(this.options.select2)}else{this.$input.val(t).trigger("change",true)}if(this.isRemote&&!this.isMultiple&&!this.options.select2.initSelection){var i=this.options.select2.id,n=this.options.select2.formatSelection;if(!i&&!n){var s=e(this.options.scope);if(!s.data("editable").isEmpty){var r={id:t,text:s.text()};this.$input.select2("data",r)}}}},input2value:function(){return this.$input.select2("val")},str2value:function(t,i){if(typeof t!=="string"||!this.isMultiple){return t}i=i||this.getSeparator();var n,s,r;if(t===null||t.length<1){return null}n=t.split(i);for(s=0,r=n.length;s<r;s=s+1){n[s]=e.trim(n[s])}return n},autosubmit:function(){this.$input.on("change",function(t,i){if(!i){e(this).closest("form").submit()}})},getSeparator:function(){return this.options.select2.separator||e.fn.select2.defaults.separator},convertSource:function(t){if(e.isArray(t)&&t.length&&t[0].value!==undefined){for(var i=0;i<t.length;i++){if(t[i].value!==undefined){t[i].id=t[i].value;delete t[i].value}}}return t},destroy:function(){if(this.$input.data("select2")){this.$input.select2("destroy")}}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="hidden">',select2:null,placeholder:null,source:null,viewseparator:", "});e.fn.editabletypes.select2=t})(window.jQuery);(function(e){var t=function(t,i){this.$element=e(t);if(!this.$element.is("input")){e.error("Combodate should be applied to INPUT element");return}this.options=e.extend({},e.fn.combodate.defaults,i,this.$element.data());this.init()};t.prototype={constructor:t,init:function(){this.map={day:["D","date"],month:["M","month"],year:["Y","year"],hour:["[Hh]","hours"],minute:["m","minutes"],second:["s","seconds"],ampm:["[Aa]",""]};this.$widget=e('<span class="combodate"></span>').html(this.getTemplate());this.initCombos();this.$widget.on("change","select",e.proxy(function(t){this.$element.val(this.getValue()).change();if(this.options.smartDays){if(e(t.target).is(".month")||e(t.target).is(".year")){this.fillCombo("day")}}},this));this.$widget.find("select").css("width","auto");this.$element.hide().after(this.$widget);this.setValue(this.$element.val()||this.options.value)},getTemplate:function(){var t=this.options.template;e.each(this.map,function(e,i){i=i[0];var n=new RegExp(i+"+"),s=i.length>1?i.substring(1,2):i;t=t.replace(n,"{"+s+"}")});t=t.replace(/ /g,"&nbsp;");e.each(this.map,function(e,i){i=i[0];var n=i.length>1?i.substring(1,2):i;t=t.replace("{"+n+"}",'<select class="'+e+'"></select>')});return t},initCombos:function(){for(var e in this.map){var t=this.$widget.find("."+e);this["$"+e]=t.length?t:null;this.fillCombo(e)}},fillCombo:function(e){var t=this["$"+e];if(!t){return}var i="fill"+e.charAt(0).toUpperCase()+e.slice(1);var n=this[i]();var s=t.val();t.empty();for(var r=0;r<n.length;r++){t.append('<option value="'+n[r][0]+'">'+n[r][1]+"</option>")}t.val(s)},fillCommon:function(e){var t=[],i;if(this.options.firstItem==="name"){i=moment.relativeTime||moment.langData()._relativeTime;var n=typeof i[e]==="function"?i[e](1,true,e,false):i[e];n=n.split(" ").reverse()[0];t.push(["",n])}else if(this.options.firstItem==="empty"){t.push(["",""])}return t},fillDay:function(){var e=this.fillCommon("d"),t,i,n=this.options.template.indexOf("DD")!==-1,s=31;if(this.options.smartDays&&this.$month&&this.$year){var r=parseInt(this.$month.val(),10);var a=parseInt(this.$year.val(),10);if(!isNaN(r)&&!isNaN(a)){s=moment([a,r]).daysInMonth()}}for(i=1;i<=s;i++){t=n?this.leadZero(i):i;e.push([i,t])}return e},fillMonth:function(){var e=this.fillCommon("M"),t,i,n=this.options.template.indexOf("MMMM")!==-1,s=this.options.template.indexOf("MMM")!==-1,r=this.options.template.indexOf("MM")!==-1;for(i=0;i<=11;i++){if(n){t=moment().date(1).month(i).format("MMMM")}else if(s){t=moment().date(1).month(i).format("MMM")}else if(r){t=this.leadZero(i+1)}else{t=i+1}e.push([i,t])}return e},fillYear:function(){var e=[],t,i,n=this.options.template.indexOf("YYYY")!==-1;for(i=this.options.maxYear;i>=this.options.minYear;i--){t=n?i:(i+"").substring(2);e[this.options.yearDescending?"push":"unshift"]([i,t])}e=this.fillCommon("y").concat(e);return e},fillHour:function(){var e=this.fillCommon("h"),t,i,n=this.options.template.indexOf("h")!==-1,s=this.options.template.indexOf("H")!==-1,r=this.options.template.toLowerCase().indexOf("hh")!==-1,a=n?1:0,o=n?12:23;for(i=a;i<=o;i++){t=r?this.leadZero(i):i;e.push([i,t])}return e},fillMinute:function(){var e=this.fillCommon("m"),t,i,n=this.options.template.indexOf("mm")!==-1;for(i=0;i<=59;i+=this.options.minuteStep){t=n?this.leadZero(i):i;e.push([i,t])}return e},fillSecond:function(){var e=this.fillCommon("s"),t,i,n=this.options.template.indexOf("ss")!==-1;for(i=0;i<=59;i+=this.options.secondStep){t=n?this.leadZero(i):i;e.push([i,t])}return e},fillAmpm:function(){var e=this.options.template.indexOf("a")!==-1,t=this.options.template.indexOf("A")!==-1,i=[["am",e?"am":"AM"],["pm",e?"pm":"PM"]];return i},getValue:function(t){var i,n={},s=this,r=false;e.each(this.map,function(e,t){if(e==="ampm"){return}var i=e==="day"?1:0;n[e]=s["$"+e]?parseInt(s["$"+e].val(),10):i;if(isNaN(n[e])){r=true;return false}});if(r){return""}if(this.$ampm){if(n.hour===12){n.hour=this.$ampm.val()==="am"?0:12}else{n.hour=this.$ampm.val()==="am"?n.hour:n.hour+12}}i=moment([n.year,n.month,n.day,n.hour,n.minute,n.second]);this.highlight(i);t=t===undefined?this.options.format:t;if(t===null){return i.isValid()?i:null}else{return i.isValid()?i.format(t):""}},setValue:function(t){if(!t){return}var i=typeof t==="string"?moment(t,this.options.format):moment(t),n=this,s={};function r(t,i){var n={};t.children("option").each(function(t,s){var r=e(s).attr("value"),a;if(r==="")return;a=Math.abs(r-i);if(typeof n.distance==="undefined"||a<n.distance){n={value:r,distance:a}}});return n.value}if(i.isValid()){e.each(this.map,function(e,t){if(e==="ampm"){return}s[e]=i[t[1]]()});if(this.$ampm){if(s.hour>=12){s.ampm="pm";if(s.hour>12){s.hour-=12}}else{s.ampm="am";if(s.hour===0){s.hour=12}}}e.each(s,function(e,t){if(n["$"+e]){if(e==="minute"&&n.options.minuteStep>1&&n.options.roundTime){t=r(n["$"+e],t)}if(e==="second"&&n.options.secondStep>1&&n.options.roundTime){t=r(n["$"+e],t)}n["$"+e].val(t)}});if(this.options.smartDays){this.fillCombo("day")}this.$element.val(i.format(this.options.format)).change()}},highlight:function(e){if(!e.isValid()){if(this.options.errorClass){this.$widget.addClass(this.options.errorClass)}else{if(!this.borderColor){this.borderColor=this.$widget.find("select").css("border-color")}this.$widget.find("select").css("border-color","red")}}else{if(this.options.errorClass){this.$widget.removeClass(this.options.errorClass)}else{this.$widget.find("select").css("border-color",this.borderColor)}}},leadZero:function(e){return e<=9?"0"+e:e},destroy:function(){this.$widget.remove();this.$element.removeData("combodate").show()}};e.fn.combodate=function(i){var n,s=Array.apply(null,arguments);s.shift();if(i==="getValue"&&this.length&&(n=this.eq(0).data("combodate"))){return n.getValue.apply(n,s)}return this.each(function(){var n=e(this),r=n.data("combodate"),a=typeof i=="object"&&i;if(!r){n.data("combodate",r=new t(this,a))}if(typeof i=="string"&&typeof r[i]=="function"){r[i].apply(r,s)}})};e.fn.combodate.defaults={format:"DD-MM-YYYY HH:mm",template:"D / MMM / YYYY   H : mm",value:null,minYear:1970,maxYear:2015,yearDescending:true,minuteStep:5,secondStep:1,firstItem:"empty",errorClass:null,roundTime:true,smartDays:false}})(window.jQuery);(function(e){"use strict";var t=function(i){this.init("combodate",i,t.defaults);if(!this.options.viewformat){this.options.viewformat=this.options.format}i.combodate=e.fn.editableutils.tryParseJson(i.combodate,true);this.options.combodate=e.extend({},t.defaults.combodate,i.combodate,{format:this.options.format,template:this.options.template})};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){this.$input.combodate(this.options.combodate);if(e.fn.editableform.engine==="bs3"){this.$input.siblings().find("select").addClass("form-control")}if(this.options.inputclass){this.$input.siblings().find("select").addClass(this.options.inputclass)}},value2html:function(e,i){var n=e?e.format(this.options.viewformat):"";t.superclass.value2html.call(this,n,i)},html2value:function(e){return e?moment(e,this.options.viewformat):null},value2str:function(e){return e?e.format(this.options.format):""},str2value:function(e){return e?moment(e,this.options.format):null},value2submit:function(e){return this.value2str(e)},value2input:function(e){this.$input.combodate("setValue",e)},input2value:function(){return this.$input.combodate("getValue",null)},activate:function(){this.$input.siblings(".combodate").find("select").eq(0).focus()},autosubmit:function(){}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="text">',inputclass:null,format:"YYYY-MM-DD",viewformat:null,template:"D / MMM / YYYY",combodate:null});e.fn.editabletypes.combodate=t})(window.jQuery);(function(e){"use strict";var t=e.fn.editableform.Constructor.prototype.initInput;e.extend(e.fn.editableform.Constructor.prototype,{initTemplate:function(){this.$form=e(e.fn.editableform.template);this.$form.find(".control-group").addClass("form-group");this.$form.find(".editable-error-block").addClass("help-block")},initInput:function(){t.apply(this);var i=this.input.options.inputclass===null||this.input.options.inputclass===false;var n="input-sm";var s="text,select,textarea,password,email,url,tel,number,range,time,typeaheadjs".split(",");if(~e.inArray(this.input.type,s)){this.input.$input.addClass("form-control");if(i){this.input.options.inputclass=n;this.input.$input.addClass(n)}}var r=this.$form.find(".editable-buttons");var a=i?[n]:this.input.options.inputclass.split(" ");for(var o=0;o<a.length;o++){if(a[o].toLowerCase()==="input-lg"){r.find("button").removeClass("btn-sm").addClass("btn-lg")}}}});e.fn.editableform.buttons='<button type="submit" class="btn btn-primary btn-sm editable-submit">'+'<i class="glyphicon glyphicon-ok"></i>'+"</button>"+'<button type="button" class="btn btn-default btn-sm editable-cancel">'+'<i class="glyphicon glyphicon-remove"></i>'+"</button>";e.fn.editableform.errorGroupClass="has-error";e.fn.editableform.errorBlockClass=null;e.fn.editableform.engine="bs3"})(window.jQuery);(function(e){"use strict";e.extend(e.fn.editableContainer.Popup.prototype,{containerName:"popover",containerDataName:"bs.popover",innerCss:".popover-content",defaults:e.fn.popover.Constructor.DEFAULTS,initContainer:function(){e.extend(this.containerOptions,{trigger:"manual",selector:false,content:" ",template:this.defaults.template});var t;if(this.$element.data("template")){t=this.$element.data("template");this.$element.removeData("template")}this.call(this.containerOptions);if(t){this.$element.data("template",t)}},innerShow:function(){this.call("show")},innerHide:function(){this.call("hide")},innerDestroy:function(){this.call("destroy")},setContainerOption:function(e,t){this.container().options[e]=t},setPosition:function(){(function(){var e=this.tip();var t=typeof this.options.placement=="function"?this.options.placement.call(this,e[0],this.$element[0]):this.options.placement;var i=/\s?auto?\s?/i;var n=i.test(t);if(n){t=t.replace(i,"")||"top"}var s=this.getPosition();var r=e[0].offsetWidth;var a=e[0].offsetHeight;if(n){var o=this.$element.parent();var l=t;var u=document.documentElement.scrollTop||document.body.scrollTop;var f=this.options.container=="body"?window.innerWidth:o.outerWidth();var c=this.options.container=="body"?window.innerHeight:o.outerHeight();var d=this.options.container=="body"?0:o.offset().left;t=t=="bottom"&&s.top+s.height+a-u>c?"top":t=="top"&&s.top-u-a<0?"bottom":t=="right"&&s.right+r>f?"left":t=="left"&&s.left-r<d?"right":t;e.removeClass(l).addClass(t)}var h=this.getCalculatedOffset(t,s,r,a);this.applyPlacement(h,t)}).call(this.container())}})})(window.jQuery);(function(e){function t(){return new Date(Date.UTC.apply(Date,arguments))}function i(){var e=new Date;return t(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate())}var n=function(t,i){var n=this;this._process_options(i);this.element=e(t);this.isInline=false;this.isInput=this.element.is("input");this.component=this.element.is(".date")?this.element.find(".add-on, .btn"):false;this.hasInput=this.component&&this.element.find("input").length;if(this.component&&this.component.length===0)this.component=false;this.picker=e(d.template);this._buildEvents();this._attachEvents();if(this.isInline){this.picker.addClass("datepicker-inline").appendTo(this.element)}else{this.picker.addClass("datepicker-dropdown dropdown-menu")}if(this.o.rtl){this.picker.addClass("datepicker-rtl");this.picker.find(".prev i, .next i").toggleClass("icon-arrow-left icon-arrow-right")}this.viewMode=this.o.startView;if(this.o.calendarWeeks)this.picker.find("tfoot th.today").attr("colspan",function(e,t){return parseInt(t)+1});this._allow_update=false;this.setStartDate(this.o.startDate);this.setEndDate(this.o.endDate);this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);this.fillDow();this.fillMonths();this._allow_update=true;this.update();this.showMode();if(this.isInline){this.show()}};n.prototype={constructor:n,_process_options:function(t){this._o=e.extend({},this._o,t);var i=this.o=e.extend({},this._o);var n=i.language;if(!c[n]){n=n.split("-")[0];if(!c[n])n=u.language}i.language=n;switch(i.startView){case 2:case"decade":i.startView=2;break;case 1:case"year":i.startView=1;break;default:i.startView=0}switch(i.minViewMode){case 1:case"months":i.minViewMode=1;break;case 2:case"years":i.minViewMode=2;break;default:i.minViewMode=0}i.startView=Math.max(i.startView,i.minViewMode);i.weekStart%=7;i.weekEnd=(i.weekStart+6)%7;var s=d.parseFormat(i.format);if(i.startDate!==-Infinity){i.startDate=d.parseDate(i.startDate,s,i.language)}if(i.endDate!==Infinity){i.endDate=d.parseDate(i.endDate,s,i.language)}i.daysOfWeekDisabled=i.daysOfWeekDisabled||[];if(!e.isArray(i.daysOfWeekDisabled))i.daysOfWeekDisabled=i.daysOfWeekDisabled.split(/[,\s]*/);i.daysOfWeekDisabled=e.map(i.daysOfWeekDisabled,function(e){return parseInt(e,10)})},_events:[],_secondaryEvents:[],_applyEvents:function(e){for(var t=0,i,n;t<e.length;t++){i=e[t][0];n=e[t][1];i.on(n)}},_unapplyEvents:function(e){for(var t=0,i,n;t<e.length;t++){i=e[t][0];n=e[t][1];i.off(n)}},_buildEvents:function(){if(this.isInput){this._events=[[this.element,{focus:e.proxy(this.show,this),keyup:e.proxy(this.update,this),keydown:e.proxy(this.keydown,this)}]]}else if(this.component&&this.hasInput){this._events=[[this.element.find("input"),{focus:e.proxy(this.show,this),keyup:e.proxy(this.update,this),keydown:e.proxy(this.keydown,this)}],[this.component,{click:e.proxy(this.show,this)}]]}else if(this.element.is("div")){this.isInline=true}else{this._events=[[this.element,{click:e.proxy(this.show,this)}]]}this._secondaryEvents=[[this.picker,{click:e.proxy(this.click,this)}],[e(window),{resize:e.proxy(this.place,this)}],[e(document),{mousedown:e.proxy(function(e){if(!(this.element.is(e.target)||this.element.find(e.target).size()||this.picker.is(e.target)||this.picker.find(e.target).size())){this.hide()}},this)}]]},_attachEvents:function(){this._detachEvents();this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents();this._applyEvents(this._secondaryEvents)},_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents)},_trigger:function(t,i){var n=i||this.date,s=new Date(n.getTime()+n.getTimezoneOffset()*6e4);this.element.trigger({type:t,date:s,format:e.proxy(function(e){var t=e||this.o.format;return d.formatDate(n,t,this.o.language)},this)})},show:function(e){if(!this.isInline)this.picker.appendTo("body");this.picker.show();this.height=this.component?this.component.outerHeight():this.element.outerHeight();this.place();this._attachSecondaryEvents();if(e){e.preventDefault()}this._trigger("show")},hide:function(e){if(this.isInline)return;if(!this.picker.is(":visible"))return;this.picker.hide().detach();this._detachSecondaryEvents();this.viewMode=this.o.startView;this.showMode();if(this.o.forceParse&&(this.isInput&&this.element.val()||this.hasInput&&this.element.find("input").val()))this.setValue();this._trigger("hide")},remove:function(){this.hide();this._detachEvents();this._detachSecondaryEvents();this.picker.remove();delete this.element.data().datepicker;if(!this.isInput){delete this.element.data().date}},getDate:function(){var e=this.getUTCDate();return new Date(e.getTime()+e.getTimezoneOffset()*6e4)},getUTCDate:function(){return this.date},setDate:function(e){this.setUTCDate(new Date(e.getTime()-e.getTimezoneOffset()*6e4))},setUTCDate:function(e){this.date=e;this.setValue()},setValue:function(){var e=this.getFormattedDate();if(!this.isInput){if(this.component){this.element.find("input").val(e)}}else{this.element.val(e)}},getFormattedDate:function(e){if(e===undefined)e=this.o.format;return d.formatDate(this.date,e,this.o.language)},setStartDate:function(e){this._process_options({startDate:e});this.update();this.updateNavArrows()},setEndDate:function(e){this._process_options({endDate:e});this.update();this.updateNavArrows()},setDaysOfWeekDisabled:function(e){this._process_options({daysOfWeekDisabled:e});this.update();this.updateNavArrows()},place:function(){if(this.isInline)return;var t=parseInt(this.element.parents().filter(function(){return e(this).css("z-index")!="auto"}).first().css("z-index"))+10;var i=this.component?this.component.parent().offset():this.element.offset();var n=this.component?this.component.outerHeight(true):this.element.outerHeight(true);this.picker.css({top:i.top+n,left:i.left,zIndex:t})},_allow_update:true,update:function(){if(!this._allow_update)return;var e,t=false;if(arguments&&arguments.length&&(typeof arguments[0]==="string"||arguments[0]instanceof Date)){e=arguments[0];t=true}else{e=this.isInput?this.element.val():this.element.data("date")||this.element.find("input").val();delete this.element.data().date}this.date=d.parseDate(e,this.o.format,this.o.language);if(t)this.setValue();if(this.date<this.o.startDate){this.viewDate=new Date(this.o.startDate)}else if(this.date>this.o.endDate){this.viewDate=new Date(this.o.endDate)}else{this.viewDate=new Date(this.date)}this.fill()},fillDow:function(){var e=this.o.weekStart,t="<tr>";if(this.o.calendarWeeks){var i='<th class="cw">&nbsp;</th>';t+=i;this.picker.find(".datepicker-days thead tr:first-child").prepend(i)}while(e<this.o.weekStart+7){t+='<th class="dow">'+c[this.o.language].daysMin[e++%7]+"</th>"}t+="</tr>";this.picker.find(".datepicker-days thead").append(t)},fillMonths:function(){var e="",t=0;while(t<12){e+='<span class="month">'+c[this.o.language].monthsShort[t++]+"</span>"}this.picker.find(".datepicker-months td").html(e)},setRange:function(t){if(!t||!t.length)delete this.range;else this.range=e.map(t,function(e){return e.valueOf()});this.fill()},getClassNames:function(t){var i=[],n=this.viewDate.getUTCFullYear(),s=this.viewDate.getUTCMonth(),r=this.date.valueOf(),a=new Date;if(t.getUTCFullYear()<n||t.getUTCFullYear()==n&&t.getUTCMonth()<s){i.push("old")}else if(t.getUTCFullYear()>n||t.getUTCFullYear()==n&&t.getUTCMonth()>s){i.push("new")}if(this.o.todayHighlight&&t.getUTCFullYear()==a.getFullYear()&&t.getUTCMonth()==a.getMonth()&&t.getUTCDate()==a.getDate()){i.push("today")}if(r&&t.valueOf()==r){i.push("active")}if(t.valueOf()<this.o.startDate||t.valueOf()>this.o.endDate||e.inArray(t.getUTCDay(),this.o.daysOfWeekDisabled)!==-1){i.push("disabled")}if(this.range){if(t>this.range[0]&&t<this.range[this.range.length-1]){i.push("range")}if(e.inArray(t.valueOf(),this.range)!=-1){i.push("selected")}}return i},fill:function(){var i=new Date(this.viewDate),n=i.getUTCFullYear(),s=i.getUTCMonth(),r=this.o.startDate!==-Infinity?this.o.startDate.getUTCFullYear():-Infinity,a=this.o.startDate!==-Infinity?this.o.startDate.getUTCMonth():-Infinity,o=this.o.endDate!==Infinity?this.o.endDate.getUTCFullYear():Infinity,l=this.o.endDate!==Infinity?this.o.endDate.getUTCMonth():Infinity,u=this.date&&this.date.valueOf(),f;this.picker.find(".datepicker-days thead th.datepicker-switch").text(c[this.o.language].months[s]+" "+n);this.picker.find("tfoot th.today").text(c[this.o.language].today).toggle(this.o.todayBtn!==false);this.picker.find("tfoot th.clear").text(c[this.o.language].clear).toggle(this.o.clearBtn!==false);this.updateNavArrows();this.fillMonths();var h=t(n,s-1,28,0,0,0,0),p=d.getDaysInMonth(h.getUTCFullYear(),h.getUTCMonth());h.setUTCDate(p);h.setUTCDate(p-(h.getUTCDay()-this.o.weekStart+7)%7);var m=new Date(h);m.setUTCDate(m.getUTCDate()+42);m=m.valueOf();var g=[];var v;while(h.valueOf()<m){if(h.getUTCDay()==this.o.weekStart){g.push("<tr>");if(this.o.calendarWeeks){var y=new Date(+h+(this.o.weekStart-h.getUTCDay()-7)%7*864e5),b=new Date(+y+(7+4-y.getUTCDay())%7*864e5),w=new Date(+(w=t(b.getUTCFullYear(),0,1))+(7+4-w.getUTCDay())%7*864e5),x=(b-w)/864e5/7+1;g.push('<td class="cw">'+x+"</td>")}}v=this.getClassNames(h);v.push("day");var C=this.o.beforeShowDay(h);if(C===undefined)C={};else if(typeof C==="boolean")C={enabled:C};else if(typeof C==="string")C={classes:C};if(C.enabled===false)v.push("disabled");if(C.classes)v=v.concat(C.classes.split(/\s+/));if(C.tooltip)f=C.tooltip;v=e.unique(v);g.push('<td class="'+v.join(" ")+'"'+(f?' title="'+f+'"':"")+">"+h.getUTCDate()+"</td>");if(h.getUTCDay()==this.o.weekEnd){g.push("</tr>")}h.setUTCDate(h.getUTCDate()+1)}this.picker.find(".datepicker-days tbody").empty().append(g.join(""));var T=this.date&&this.date.getUTCFullYear();var _=this.picker.find(".datepicker-months").find("th:eq(1)").text(n).end().find("span").removeClass("active");if(T&&T==n){_.eq(this.date.getUTCMonth()).addClass("active")}if(n<r||n>o){_.addClass("disabled")}if(n==r){_.slice(0,a).addClass("disabled")}if(n==o){_.slice(l+1).addClass("disabled")}g="";n=parseInt(n/10,10)*10;var k=this.picker.find(".datepicker-years").find("th:eq(1)").text(n+"-"+(n+9)).end().find("td");n-=1;for(var D=-1;D<11;D++){g+='<span class="year'+(D==-1?" old":D==10?" new":"")+(T==n?" active":"")+(n<r||n>o?" disabled":"")+'">'+n+"</span>";n+=1}k.html(g)},updateNavArrows:function(){if(!this._allow_update)return;var e=new Date(this.viewDate),t=e.getUTCFullYear(),i=e.getUTCMonth();switch(this.viewMode){case 0:if(this.o.startDate!==-Infinity&&t<=this.o.startDate.getUTCFullYear()&&i<=this.o.startDate.getUTCMonth()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(this.o.endDate!==Infinity&&t>=this.o.endDate.getUTCFullYear()&&i>=this.o.endDate.getUTCMonth()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break;case 1:case 2:if(this.o.startDate!==-Infinity&&t<=this.o.startDate.getUTCFullYear()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(this.o.endDate!==Infinity&&t>=this.o.endDate.getUTCFullYear()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break}},click:function(i){i.preventDefault();var n=e(i.target).closest("span, td, th");if(n.length==1){switch(n[0].nodeName.toLowerCase()){case"th":switch(n[0].className){case"datepicker-switch":this.showMode(1);break;case"prev":case"next":var s=d.modes[this.viewMode].navStep*(n[0].className=="prev"?-1:1);switch(this.viewMode){case 0:this.viewDate=this.moveMonth(this.viewDate,s);break;case 1:case 2:this.viewDate=this.moveYear(this.viewDate,s);break}this.fill();break;case"today":var r=new Date;r=t(r.getFullYear(),r.getMonth(),r.getDate(),0,0,0);this.showMode(-2);var a=this.o.todayBtn=="linked"?null:"view";this._setDate(r,a);break;case"clear":var o;if(this.isInput)o=this.element;else if(this.component)o=this.element.find("input");if(o)o.val("").change();this._trigger("changeDate");this.update();if(this.o.autoclose)this.hide();break}break;case"span":if(!n.is(".disabled")){this.viewDate.setUTCDate(1);if(n.is(".month")){var l=1;var u=n.parent().find("span").index(n);var f=this.viewDate.getUTCFullYear();this.viewDate.setUTCMonth(u);this._trigger("changeMonth",this.viewDate);if(this.o.minViewMode===1){this._setDate(t(f,u,l,0,0,0,0))}}else{var f=parseInt(n.text(),10)||0;var l=1;var u=0;this.viewDate.setUTCFullYear(f);this._trigger("changeYear",this.viewDate);if(this.o.minViewMode===2){this._setDate(t(f,u,l,0,0,0,0))}}this.showMode(-1);this.fill()}break;case"td":if(n.is(".day")&&!n.is(".disabled")){var l=parseInt(n.text(),10)||1;var f=this.viewDate.getUTCFullYear(),u=this.viewDate.getUTCMonth();if(n.is(".old")){if(u===0){u=11;f-=1}else{u-=1}}else if(n.is(".new")){if(u==11){u=0;f+=1}else{u+=1}}this._setDate(t(f,u,l,0,0,0,0))}break}}},_setDate:function(e,t){if(!t||t=="date")this.date=new Date(e);if(!t||t=="view")this.viewDate=new Date(e);this.fill();this.setValue();this._trigger("changeDate");var i;if(this.isInput){i=this.element}else if(this.component){i=this.element.find("input")}if(i){i.change();if(this.o.autoclose&&(!t||t=="date")){this.hide()}}},moveMonth:function(e,t){if(!t)return e;var i=new Date(e.valueOf()),n=i.getUTCDate(),s=i.getUTCMonth(),r=Math.abs(t),a,o;t=t>0?1:-1;if(r==1){o=t==-1?function(){return i.getUTCMonth()==s}:function(){return i.getUTCMonth()!=a};a=s+t;i.setUTCMonth(a);if(a<0||a>11)a=(a+12)%12}else{for(var l=0;l<r;l++)i=this.moveMonth(i,t);a=i.getUTCMonth();i.setUTCDate(n);o=function(){return a!=i.getUTCMonth()}}while(o()){i.setUTCDate(--n);i.setUTCMonth(a)}return i},moveYear:function(e,t){return this.moveMonth(e,t*12)},dateWithinRange:function(e){return e>=this.o.startDate&&e<=this.o.endDate},keydown:function(e){if(this.picker.is(":not(:visible)")){if(e.keyCode==27)this.show();return}var t=false,i,n,s,r,a;switch(e.keyCode){case 27:this.hide();e.preventDefault();break;case 37:case 39:if(!this.o.keyboardNavigation)break;i=e.keyCode==37?-1:1;if(e.ctrlKey){r=this.moveYear(this.date,i);a=this.moveYear(this.viewDate,i)}else if(e.shiftKey){r=this.moveMonth(this.date,i);a=this.moveMonth(this.viewDate,i)}else{r=new Date(this.date);r.setUTCDate(this.date.getUTCDate()+i);a=new Date(this.viewDate);a.setUTCDate(this.viewDate.getUTCDate()+i)}if(this.dateWithinRange(r)){this.date=r;this.viewDate=a;this.setValue();this.update();e.preventDefault();t=true}break;case 38:case 40:if(!this.o.keyboardNavigation)break;i=e.keyCode==38?-1:1;if(e.ctrlKey){r=this.moveYear(this.date,i);a=this.moveYear(this.viewDate,i)}else if(e.shiftKey){r=this.moveMonth(this.date,i);a=this.moveMonth(this.viewDate,i)}else{r=new Date(this.date);r.setUTCDate(this.date.getUTCDate()+i*7);a=new Date(this.viewDate);a.setUTCDate(this.viewDate.getUTCDate()+i*7)}if(this.dateWithinRange(r)){this.date=r;this.viewDate=a;this.setValue();this.update();e.preventDefault();t=true}break;case 13:this.hide();e.preventDefault();break;case 9:this.hide();break}if(t){this._trigger("changeDate");var o;if(this.isInput){o=this.element}else if(this.component){o=this.element.find("input")}if(o){o.change()}}},showMode:function(e){if(e){this.viewMode=Math.max(this.o.minViewMode,Math.min(2,this.viewMode+e))}this.picker.find(">div").hide().filter(".datepicker-"+d.modes[this.viewMode].clsName).css("display","block");this.updateNavArrows()}};var s=function(t,i){this.element=e(t);this.inputs=e.map(i.inputs,function(e){return e.jquery?e[0]:e});delete i.inputs;e(this.inputs).datepicker(i).bind("changeDate",e.proxy(this.dateUpdated,this));this.pickers=e.map(this.inputs,function(t){return e(t).data("datepicker")});this.updateDates()};s.prototype={updateDates:function(){this.dates=e.map(this.pickers,function(e){return e.date});this.updateRanges()},updateRanges:function(){var t=e.map(this.dates,function(e){return e.valueOf()});e.each(this.pickers,function(e,i){i.setRange(t)})},dateUpdated:function(t){var i=e(t.target).data("datepicker"),n=i.getUTCDate(),s=e.inArray(t.target,this.inputs),r=this.inputs.length;if(s==-1)return;if(n<this.dates[s]){while(s>=0&&n<this.dates[s]){this.pickers[s--].setUTCDate(n)}}else if(n>this.dates[s]){while(s<r&&n>this.dates[s]){this.pickers[s++].setUTCDate(n)}}this.updateDates()},remove:function(){e.map(this.pickers,function(e){e.remove()});delete this.element.data().datepicker}};function r(t,i){var n=e(t).data(),s={},r,a=new RegExp("^"+i.toLowerCase()+"([A-Z])"),i=new RegExp("^"+i.toLowerCase());for(var o in n)if(i.test(o)){r=o.replace(a,function(e,t){return t.toLowerCase()});s[r]=n[o]}return s}function a(t){var i={};if(!c[t]){t=t.split("-")[0];if(!c[t])return}var n=c[t];e.each(f,function(e,t){if(t in n)i[t]=n[t]});return i}var o=e.fn.datepicker;var l=e.fn.datepicker=function(t){var i=Array.apply(null,arguments);i.shift();var o,l;this.each(function(){var l=e(this),f=l.data("datepicker"),c=typeof t=="object"&&t;if(!f){var d=r(this,"date"),h=e.extend({},u,d,c),p=a(h.language),m=e.extend({},u,p,d,c);if(l.is(".input-daterange")||m.inputs){var g={inputs:m.inputs||l.find("input").toArray()};l.data("datepicker",f=new s(this,e.extend(m,g)))}else{l.data("datepicker",f=new n(this,m))}}if(typeof t=="string"&&typeof f[t]=="function"){o=f[t].apply(f,i);if(o!==undefined)return false}});if(o!==undefined)return o;else return this};var u=e.fn.datepicker.defaults={autoclose:false,beforeShowDay:e.noop,calendarWeeks:false,clearBtn:false,daysOfWeekDisabled:[],endDate:Infinity,forceParse:true,format:"mm/dd/yyyy",keyboardNavigation:true,language:"en",minViewMode:0,rtl:false,startDate:-Infinity,startView:0,todayBtn:false,todayHighlight:false,weekStart:0};var f=e.fn.datepicker.locale_opts=["format","rtl","weekStart"];e.fn.datepicker.Constructor=n;var c=e.fn.datepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sun"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa","Su"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear"}};var d={modes:[{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10}],isLeapYear:function(e){return e%4===0&&e%100!==0||e%400===0},getDaysInMonth:function(e,t){return[31,d.isLeapYear(e)?29:28,31,30,31,30,31,31,30,31,30,31][t]},validParts:/dd?|DD?|mm?|MM?|yy(?:yy)?/g,nonpunctuation:/[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,parseFormat:function(e){var t=e.replace(this.validParts,"\0").split("\0"),i=e.match(this.validParts);if(!t||!t.length||!i||i.length===0){throw new Error("Invalid date format.")}return{separators:t,parts:i}},parseDate:function(i,s,r){if(i instanceof Date)return i;if(typeof s==="string")s=d.parseFormat(s);if(/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(i)){var a=/([\-+]\d+)([dmwy])/,o=i.match(/([\-+]\d+)([dmwy])/g),l,u;i=new Date;for(var f=0;f<o.length;f++){l=a.exec(o[f]);u=parseInt(l[1]);switch(l[2]){case"d":i.setUTCDate(i.getUTCDate()+u);break;case"m":i=n.prototype.moveMonth.call(n.prototype,i,u);break;case"w":i.setUTCDate(i.getUTCDate()+u*7);break;case"y":i=n.prototype.moveYear.call(n.prototype,i,u);break}}return t(i.getUTCFullYear(),i.getUTCMonth(),i.getUTCDate(),0,0,0)}var o=i&&i.match(this.nonpunctuation)||[],i=new Date,h={},p=["yyyy","yy","M","MM","m","mm","d","dd"],m={yyyy:function(e,t){return e.setUTCFullYear(t)},yy:function(e,t){return e.setUTCFullYear(2e3+t)},m:function(e,t){t-=1;while(t<0)t+=12;t%=12;e.setUTCMonth(t);while(e.getUTCMonth()!=t)e.setUTCDate(e.getUTCDate()-1);return e},d:function(e,t){return e.setUTCDate(t)}},g,v,l;m["M"]=m["MM"]=m["mm"]=m["m"];m["dd"]=m["d"];i=t(i.getFullYear(),i.getMonth(),i.getDate(),0,0,0);var y=s.parts.slice();if(o.length!=y.length){y=e(y).filter(function(t,i){return e.inArray(i,p)!==-1}).toArray()}if(o.length==y.length){for(var f=0,b=y.length;f<b;f++){g=parseInt(o[f],10);l=y[f];if(isNaN(g)){switch(l){case"MM":v=e(c[r].months).filter(function(){var e=this.slice(0,o[f].length),t=o[f].slice(0,e.length);return e==t});g=e.inArray(v[0],c[r].months)+1;break;case"M":v=e(c[r].monthsShort).filter(function(){var e=this.slice(0,o[f].length),t=o[f].slice(0,e.length);return e==t});g=e.inArray(v[0],c[r].monthsShort)+1;break}}h[l]=g}for(var f=0,w;f<p.length;f++){w=p[f];if(w in h&&!isNaN(h[w]))m[w](i,h[w])}}return i},formatDate:function(t,i,n){if(typeof i==="string")i=d.parseFormat(i);var s={d:t.getUTCDate(),D:c[n].daysShort[t.getUTCDay()],DD:c[n].days[t.getUTCDay()],m:t.getUTCMonth()+1,M:c[n].monthsShort[t.getUTCMonth()],MM:c[n].months[t.getUTCMonth()],yy:t.getUTCFullYear().toString().substring(2),yyyy:t.getUTCFullYear()};s.dd=(s.d<10?"0":"")+s.d;s.mm=(s.m<10?"0":"")+s.m;var t=[],r=e.extend([],i.separators);for(var a=0,o=i.parts.length;a<=o;a++){if(r.length)t.push(r.shift());t.push(s[i.parts[a]])}return t.join("")},headTemplate:"<thead>"+"<tr>"+'<th class="prev"><i class="icon-arrow-left"/></th>'+'<th colspan="5" class="datepicker-switch"></th>'+'<th class="next"><i class="icon-arrow-right"/></th>'+"</tr>"+"</thead>",contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'};d.template='<div class="datepicker">'+'<div class="datepicker-days">'+'<table class=" table-condensed">'+d.headTemplate+"<tbody></tbody>"+d.footTemplate+"</table>"+"</div>"+'<div class="datepicker-months">'+'<table class="table-condensed">'+d.headTemplate+d.contTemplate+d.footTemplate+"</table>"+"</div>"+'<div class="datepicker-years">'+'<table class="table-condensed">'+d.headTemplate+d.contTemplate+d.footTemplate+"</table>"+"</div>"+"</div>";e.fn.datepicker.DPGlobal=d;e.fn.datepicker.noConflict=function(){e.fn.datepicker=o;return this};e(document).on("focus.datepicker.data-api click.datepicker.data-api",'[data-provide="datepicker"]',function(t){var i=e(this);if(i.data("datepicker"))return;t.preventDefault();l.call(i,"show")});e(function(){l.call(e('[data-provide="datepicker-inline"]'))})})(window.jQuery);(function(e){"use strict";e.fn.bdatepicker=e.fn.datepicker.noConflict();if(!e.fn.datepicker){e.fn.datepicker=e.fn.bdatepicker}var t=function(e){this.init("date",e,t.defaults);this.initPicker(e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{initPicker:function(t,i){if(!this.options.viewformat){this.options.viewformat=this.options.format}t.datepicker=e.fn.editableutils.tryParseJson(t.datepicker,true);this.options.datepicker=e.extend({},i.datepicker,t.datepicker,{format:this.options.viewformat});this.options.datepicker.language=this.options.datepicker.language||"en";this.dpg=e.fn.bdatepicker.DPGlobal;this.parsedFormat=this.dpg.parseFormat(this.options.format);this.parsedViewFormat=this.dpg.parseFormat(this.options.viewformat)},render:function(){this.$input.bdatepicker(this.options.datepicker);if(this.options.clear){this.$clear=e('<a href="#"></a>').html(this.options.clear).click(e.proxy(function(e){e.preventDefault();e.stopPropagation();this.clear()},this));this.$tpl.parent().append(e('<div class="editable-clear">').append(this.$clear))}},value2html:function(e,i){var n=e?this.dpg.formatDate(e,this.parsedViewFormat,this.options.datepicker.language):"";t.superclass.value2html.call(this,n,i)},html2value:function(e){return this.parseDate(e,this.parsedViewFormat)},value2str:function(e){return e?this.dpg.formatDate(e,this.parsedFormat,this.options.datepicker.language):""},str2value:function(e){return this.parseDate(e,this.parsedFormat)},value2submit:function(e){return this.value2str(e)},value2input:function(e){this.$input.bdatepicker("update",e)},input2value:function(){return this.$input.data("datepicker").date},activate:function(){},clear:function(){this.$input.data("datepicker").date=null;this.$input.find(".active").removeClass("active");if(!this.options.showbuttons){this.$input.closest("form").submit()}},autosubmit:function(){this.$input.on("mouseup",".day",function(t){if(e(t.currentTarget).is(".old")||e(t.currentTarget).is(".new")){return}var i=e(this).closest("form");setTimeout(function(){i.submit()},200)})},parseDate:function(e,t){var i=null,n;if(e){i=this.dpg.parseDate(e,t,this.options.datepicker.language);if(typeof e==="string"){n=this.dpg.formatDate(i,t,this.options.datepicker.language);if(e!==n){i=null}}}return i}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<div class="editable-date well"></div>',inputclass:null,format:"yyyy-mm-dd",viewformat:null,datepicker:{weekStart:0,startView:0,minViewMode:0,autoclose:false},clear:"&times; clear"});e.fn.editabletypes.date=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("datefield",e,t.defaults);this.initPicker(e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.date);e.extend(t.prototype,{render:function(){this.$input=this.$tpl.find("input");this.setClass();this.setAttr("placeholder");this.$tpl.bdatepicker(this.options.datepicker);this.$input.off("focus keydown");this.$input.keyup(e.proxy(function(){this.$tpl.removeData("date");this.$tpl.bdatepicker("update")},this))},value2input:function(e){this.$input.val(e?this.dpg.formatDate(e,this.parsedViewFormat,this.options.datepicker.language):"");this.$tpl.bdatepicker("update")},input2value:function(){return this.html2value(this.$input.val())},activate:function(){e.fn.editabletypes.text.prototype.activate.call(this)},autosubmit:function(){}});t.defaults=e.extend({},e.fn.editabletypes.date.defaults,{tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',inputclass:"input-small",datepicker:{weekStart:0,startView:0,minViewMode:0,autoclose:true}});e.fn.editabletypes.datefield=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("datetime",e,t.defaults);this.initPicker(e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{initPicker:function(t,i){if(!this.options.viewformat){this.options.viewformat=this.options.format}t.datetimepicker=e.fn.editableutils.tryParseJson(t.datetimepicker,true);this.options.datetimepicker=e.extend({},i.datetimepicker,t.datetimepicker,{format:this.options.viewformat});this.options.datetimepicker.language=this.options.datetimepicker.language||"en";this.dpg=e.fn.datetimepicker.DPGlobal;this.parsedFormat=this.dpg.parseFormat(this.options.format,this.options.formatType);this.parsedViewFormat=this.dpg.parseFormat(this.options.viewformat,this.options.formatType)},render:function(){this.$input.datetimepicker(this.options.datetimepicker);this.$input.on("changeMode",function(t){var i=e(this).closest("form").parent();setTimeout(function(){i.triggerHandler("resize")},0)});if(this.options.clear){this.$clear=e('<a href="#"></a>').html(this.options.clear).click(e.proxy(function(e){e.preventDefault();e.stopPropagation();this.clear()},this));this.$tpl.parent().append(e('<div class="editable-clear">').append(this.$clear))}},value2html:function(e,i){var n=e?this.dpg.formatDate(this.toUTC(e),this.parsedViewFormat,this.options.datetimepicker.language,this.options.formatType):"";if(i){t.superclass.value2html.call(this,n,i)}else{return n}},html2value:function(e){var t=this.parseDate(e,this.parsedViewFormat);return t?this.fromUTC(t):null},value2str:function(e){return e?this.dpg.formatDate(this.toUTC(e),this.parsedFormat,this.options.datetimepicker.language,this.options.formatType):""},str2value:function(e){var t=this.parseDate(e,this.parsedFormat);return t?this.fromUTC(t):null},value2submit:function(e){return this.value2str(e)},value2input:function(e){if(e){this.$input.data("datetimepicker").setDate(e)}},input2value:function(){var e=this.$input.data("datetimepicker");return e.date?e.getDate():null},activate:function(){},clear:function(){this.$input.data("datetimepicker").date=null;this.$input.find(".active").removeClass("active");if(!this.options.showbuttons){this.$input.closest("form").submit()}},autosubmit:function(){this.$input.on("mouseup",".minute",function(t){var i=e(this).closest("form");setTimeout(function(){i.submit()},200)})},toUTC:function(e){return e?new Date(e.valueOf()-e.getTimezoneOffset()*6e4):e},fromUTC:function(e){return e?new Date(e.valueOf()+e.getTimezoneOffset()*6e4):e},parseDate:function(e,t){var i=null,n;if(e){i=this.dpg.parseDate(e,t,this.options.datetimepicker.language,this.options.formatType);if(typeof e==="string"){n=this.dpg.formatDate(i,t,this.options.datetimepicker.language,this.options.formatType);if(e!==n){i=null}}}return i}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<div class="editable-date well"></div>',inputclass:null,format:"yyyy-mm-dd hh:ii",formatType:"standard",viewformat:null,datetimepicker:{todayHighlight:false,autoclose:false},clear:"&times; clear"});e.fn.editabletypes.datetime=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("datetimefield",e,t.defaults);this.initPicker(e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.datetime);e.extend(t.prototype,{render:function(){this.$input=this.$tpl.find("input");this.setClass();this.setAttr("placeholder");this.$tpl.datetimepicker(this.options.datetimepicker);this.$input.off("focus keydown");this.$input.keyup(e.proxy(function(){this.$tpl.removeData("date");this.$tpl.datetimepicker("update")},this))},value2input:function(e){this.$input.val(this.value2html(e));this.$tpl.datetimepicker("update")},input2value:function(){return this.html2value(this.$input.val())},activate:function(){e.fn.editabletypes.text.prototype.activate.call(this)},autosubmit:function(){}});t.defaults=e.extend({},e.fn.editabletypes.datetime.defaults,{tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',inputclass:"input-medium",datetimepicker:{todayHighlight:false,autoclose:true}});e.fn.editabletypes.datetimefield=t})(window.jQuery);(function(e){"use strict";var t=null;var i=function(e){var t=arguments,i=true,n=1;e=e.replace(/%s/g,function(){var e=t[n++];if(typeof e==="undefined"){i=false;return""}return e});return i?e:""};var n=function(t,i,n,s){var r="";e.each(t,function(e,t){if(t[i]===s){r=t[n];return false}return true});return r};var s=function(t,i){var n=-1;e.each(t,function(e,t){if(t.field===i){n=e;return false}return true});return n};var r=function(t){var i,n,s,r=0,a=[];for(i=0;i<t[0].length;i++){r+=t[0][i].colspan||1}for(i=0;i<t.length;i++){a[i]=[];for(n=0;n<r;n++){a[i][n]=false}}for(i=0;i<t.length;i++){for(n=0;n<t[i].length;n++){var o=t[i][n],l=o.rowspan||1,u=o.colspan||1,f=e.inArray(false,a[i]);if(u===1){o.fieldIndex=f;if(typeof o.field==="undefined"){o.field=f}}for(s=0;s<l;s++){a[i+s][f]=true}for(s=0;s<u;s++){a[i][f+s]=true}}}};var a=function(){if(t===null){var i=e("<p/>").addClass("fixed-table-scroll-inner"),n=e("<div/>").addClass("fixed-table-scroll-outer"),s,r;n.append(i);e("body").append(n);s=i[0].offsetWidth;n.css("overflow","scroll");r=i[0].offsetWidth;if(s===r){r=n[0].clientWidth}n.remove();t=s-r}return t};var o=function(t,n,s,r){var a=n;if(typeof n==="string"){var o=n.split(".");if(o.length>1){a=window;e.each(o,function(e,t){a=a[t]})}else{a=window[n]}}if(typeof a==="object"){return a}if(typeof a==="function"){return a.apply(t,s||[])}if(!a&&typeof n==="string"&&i.apply(this,[n].concat(s))){return i.apply(this,[n].concat(s))}return r};var l=function(t,i,n){var s=Object.getOwnPropertyNames(t),r=Object.getOwnPropertyNames(i),a="";if(n){if(s.length!==r.length){return false}}for(var o=0;o<s.length;o++){a=s[o];if(e.inArray(a,r)>-1){if(t[a]!==i[a]){return false}}}return true};var u=function(e){if(typeof e==="string"){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;").replace(/`/g,"&#x60;")}return e};var f=function(e){for(var t in e){var i=t.split(/(?=[A-Z])/).join("-").toLowerCase();if(i!==t){e[i]=e[t];delete e[t]}}return e};var c=function(e,t,i){var n=e;if(typeof t!=="string"||e.hasOwnProperty(t)){return i?u(e[t]):e[t]}var s=t.split(".");for(var r in s){if(s.hasOwnProperty(r)){n=n&&n[s[r]]}}return i?u(n):n};var d=function(){return!!(navigator.userAgent.indexOf("MSIE ")>0||!!navigator.userAgent.match(/Trident.*rv\:11\./))};var h=function(){if(!Object.keys){Object.keys=function(){var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),i=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],n=i.length;return function(s){if(typeof s!=="object"&&(typeof s!=="function"||s===null)){throw new TypeError("Object.keys called on non-object")}var r=[],a,o;for(a in s){if(e.call(s,a)){r.push(a)}}if(t){for(o=0;o<n;o++){if(e.call(s,i[o])){r.push(i[o])}}}return r}}()}};var p=function(t,i){this.options=i;this.$el=e(t);this.$el_=this.$el.clone();this.timeoutId_=0;this.timeoutFooter_=0;this.init()};p.DEFAULTS={classes:"table table-hover",sortClass:undefined,locale:undefined,height:undefined,undefinedText:"-",sortName:undefined,sortOrder:"asc",sortStable:false,striped:false,columns:[[]],data:[],totalField:"total",dataField:"rows",method:"get",url:undefined,ajax:undefined,cache:true,contentType:"application/json",dataType:"json",ajaxOptions:{},queryParams:function(e){return e},queryParamsType:"limit",responseHandler:function(e){return e},pagination:false,onlyInfoPagination:false,paginationLoop:true,sidePagination:"client",totalRows:0,pageNumber:1,pageSize:10,pageList:[10,25,50,100],paginationHAlign:"right",paginationVAlign:"bottom",paginationDetailHAlign:"left",paginationPreText:"&lsaquo;",paginationNextText:"&rsaquo;",search:false,searchOnEnterKey:false,strictSearch:false,searchAlign:"right",selectItemName:"btSelectItem",showHeader:true,showFooter:false,showColumns:false,showPaginationSwitch:false,showRefresh:false,showToggle:false,buttonsAlign:"right",smartDisplay:true,escape:false,minimumCountColumns:1,idField:undefined,uniqueId:undefined,cardView:false,detailView:false,detailFormatter:function(e,t){return""},trimOnSearch:true,clickToSelect:false,singleSelect:false,toolbar:undefined,toolbarAlign:"left",checkboxHeader:true,sortable:true,silentSort:true,maintainSelected:false,searchTimeOut:500,searchText:"",iconSize:undefined,buttonsClass:"default",iconsPrefix:"glyphicon",icons:{paginationSwitchDown:"glyphicon-collapse-down icon-chevron-down",paginationSwitchUp:"glyphicon-collapse-up icon-chevron-up",refresh:"glyphicon-refresh icon-refresh",toggle:"glyphicon-list-alt icon-list-alt",columns:"glyphicon-th icon-th",detailOpen:"glyphicon-plus icon-plus",detailClose:"glyphicon-minus icon-minus"},customSearch:e.noop,customSort:e.noop,rowStyle:function(e,t){return{}},rowAttributes:function(e,t){return{}},footerStyle:function(e,t){return{}},onAll:function(e,t){return false},onClickCell:function(e,t,i,n){return false},onDblClickCell:function(e,t,i,n){return false},onClickRow:function(e,t){return false},onDblClickRow:function(e,t){return false},onSort:function(e,t){return false},onCheck:function(e){return false},onUncheck:function(e){return false},onCheckAll:function(e){return false},onUncheckAll:function(e){return false},onCheckSome:function(e){return false},onUncheckSome:function(e){return false},onLoadSuccess:function(e){return false},onLoadError:function(e){return false},onColumnSwitch:function(e,t){return false},onPageChange:function(e,t){return false},onSearch:function(e){return false},onToggle:function(e){return false},onPreBody:function(e){return false},onPostBody:function(){return false},onPostHeader:function(){return false},onExpandRow:function(e,t,i){return false},onCollapseRow:function(e,t){return false},onRefreshOptions:function(e){return false},onRefresh:function(e){return false},onResetView:function(){return false}};p.LOCALES={};p.LOCALES["en-US"]=p.LOCALES.en={formatLoadingMessage:function(){return"Loading, please wait..."},formatRecordsPerPage:function(e){return i("%s rows per page",e)},formatShowingRows:function(e,t,n){return i("Showing %s to %s of %s rows",e,t,n)},formatDetailPagination:function(e){return i("Showing %s rows",e)},formatSearch:function(){return"Search"},formatNoMatches:function(){return"No matching records found"},formatPaginationSwitch:function(){return"Hide/Show pagination"},formatRefresh:function(){return"Refresh"},formatToggle:function(){return"Toggle"},formatColumns:function(){return"Columns"},formatAllRows:function(){return"All"}};e.extend(p.DEFAULTS,p.LOCALES["en-US"]);p.COLUMN_DEFAULTS={radio:false,checkbox:false,checkboxEnabled:true,field:undefined,title:undefined,titleTooltip:undefined,class:undefined,align:undefined,halign:undefined,falign:undefined,valign:undefined,width:undefined,sortable:false,order:"asc",visible:true,switchable:true,clickToSelect:true,formatter:undefined,footerFormatter:undefined,events:undefined,sorter:undefined,sortName:undefined,cellStyle:undefined,searchable:true,searchFormatter:true,cardVisible:true,escape:false};p.EVENTS={"all.bs.table":"onAll","click-cell.bs.table":"onClickCell","dbl-click-cell.bs.table":"onDblClickCell","click-row.bs.table":"onClickRow","dbl-click-row.bs.table":"onDblClickRow","sort.bs.table":"onSort","check.bs.table":"onCheck","uncheck.bs.table":"onUncheck","check-all.bs.table":"onCheckAll","uncheck-all.bs.table":"onUncheckAll","check-some.bs.table":"onCheckSome","uncheck-some.bs.table":"onUncheckSome","load-success.bs.table":"onLoadSuccess","load-error.bs.table":"onLoadError","column-switch.bs.table":"onColumnSwitch","page-change.bs.table":"onPageChange","search.bs.table":"onSearch","toggle.bs.table":"onToggle","pre-body.bs.table":"onPreBody","post-body.bs.table":"onPostBody","post-header.bs.table":"onPostHeader","expand-row.bs.table":"onExpandRow","collapse-row.bs.table":"onCollapseRow","refresh-options.bs.table":"onRefreshOptions","reset-view.bs.table":"onResetView","refresh.bs.table":"onRefresh"};p.prototype.init=function(){this.initLocale();this.initContainer();this.initTable();this.initHeader();this.initData();this.initHiddenRows();this.initFooter();this.initToolbar();this.initPagination();this.initBody();this.initSearchText();this.initServer()};p.prototype.initLocale=function(){if(this.options.locale){var t=this.options.locale.split(/-|_/);t[0].toLowerCase();if(t[1])t[1].toUpperCase();if(e.fn.bootstrapTable.locales[this.options.locale]){e.extend(this.options,e.fn.bootstrapTable.locales[this.options.locale])}else if(e.fn.bootstrapTable.locales[t.join("-")]){e.extend(this.options,e.fn.bootstrapTable.locales[t.join("-")])}else if(e.fn.bootstrapTable.locales[t[0]]){e.extend(this.options,e.fn.bootstrapTable.locales[t[0]])}}};p.prototype.initContainer=function(){this.$container=e(['<div class="bootstrap-table">','<div class="fixed-table-toolbar"></div>',this.options.paginationVAlign==="top"||this.options.paginationVAlign==="both"?'<div class="fixed-table-pagination" style="clear: both;"></div>':"",'<div class="fixed-table-container">','<div class="fixed-table-header"><table></table></div>','<div class="fixed-table-body">','<div class="fixed-table-loading">',this.options.formatLoadingMessage(),"</div>","</div>",'<div class="fixed-table-footer"><table><tr></tr></table></div>',this.options.paginationVAlign==="bottom"||this.options.paginationVAlign==="both"?'<div class="fixed-table-pagination"></div>':"","</div>","</div>"].join(""));this.$container.insertAfter(this.$el);this.$tableContainer=this.$container.find(".fixed-table-container");this.$tableHeader=this.$container.find(".fixed-table-header");this.$tableBody=this.$container.find(".fixed-table-body");this.$tableLoading=this.$container.find(".fixed-table-loading");this.$tableFooter=this.$container.find(".fixed-table-footer");this.$toolbar=this.$container.find(".fixed-table-toolbar");this.$pagination=this.$container.find(".fixed-table-pagination");this.$tableBody.append(this.$el);this.$container.after('<div class="clearfix"></div>');this.$el.addClass(this.options.classes);if(this.options.striped){this.$el.addClass("table-striped")}if(e.inArray("table-no-bordered",this.options.classes.split(" "))!==-1){this.$tableContainer.addClass("table-no-bordered")}};p.prototype.initTable=function(){var t=this,i=[],n=[];this.$header=this.$el.find(">thead");if(!this.$header.length){this.$header=e("<thead></thead>").appendTo(this.$el)}this.$header.find("tr").each(function(){var t=[];e(this).find("th").each(function(){if(typeof e(this).data("field")!=="undefined"){e(this).data("field",e(this).data("field")+"")}t.push(e.extend({},{title:e(this).html(),class:e(this).attr("class"),titleTooltip:e(this).attr("title"),rowspan:e(this).attr("rowspan")?+e(this).attr("rowspan"):undefined,colspan:e(this).attr("colspan")?+e(this).attr("colspan"):undefined},e(this).data()))});i.push(t)});if(!e.isArray(this.options.columns[0])){this.options.columns=[this.options.columns]}this.options.columns=e.extend(true,[],i,this.options.columns);this.columns=[];r(this.options.columns);e.each(this.options.columns,function(i,n){e.each(n,function(n,s){s=e.extend({},p.COLUMN_DEFAULTS,s);if(typeof s.fieldIndex!=="undefined"){t.columns[s.fieldIndex]=s}t.options.columns[i][n]=s})});if(this.options.data.length){return}var s=[];this.$el.find(">tbody>tr").each(function(i){var r={};r._id=e(this).attr("id");r._class=e(this).attr("class");r._data=f(e(this).data());e(this).find(">td").each(function(n){var a=e(this),o=+a.attr("colspan")||1,l=+a.attr("rowspan")||1,u,c;for(;s[i]&&s[i][n];n++);for(u=n;u<n+o;u++){for(c=i;c<i+l;c++){if(!s[c]){s[c]=[]}s[c][u]=true}}var d=t.columns[n].field;r[d]=e(this).html();r["_"+d+"_id"]=e(this).attr("id");r["_"+d+"_class"]=e(this).attr("class");r["_"+d+"_rowspan"]=e(this).attr("rowspan");r["_"+d+"_colspan"]=e(this).attr("colspan");r["_"+d+"_title"]=e(this).attr("title");r["_"+d+"_data"]=f(e(this).data())});n.push(r)});this.options.data=n;if(n.length)this.fromHtml=true};p.prototype.initHeader=function(){var t=this,n={},s=[];this.header={fields:[],styles:[],classes:[],formatters:[],events:[],sorters:[],sortNames:[],cellStyles:[],searchables:[]};e.each(this.options.columns,function(r,a){s.push("<tr>");if(r===0&&!t.options.cardView&&t.options.detailView){s.push(i('<th class="detail" rowspan="%s"><div class="fht-cell"></div></th>',t.options.columns.length))}e.each(a,function(e,r){var a="",o="",l="",f="",c=i(' class="%s"',r["class"]),d=t.options.sortOrder||r.order,h="px",p=r.width;if(r.width!==undefined&&!t.options.cardView){if(typeof r.width==="string"){if(r.width.indexOf("%")!==-1){h="%"}}}if(r.width&&typeof r.width==="string"){p=r.width.replace("%","").replace("px","")}o=i("text-align: %s; ",r.halign?r.halign:r.align);l=i("text-align: %s; ",r.align);f=i("vertical-align: %s; ",r.valign);f+=i("width: %s; ",(r.checkbox||r.radio)&&!p?"36px":p?p+h:undefined);if(typeof r.fieldIndex!=="undefined"){t.header.fields[r.fieldIndex]=r.field;t.header.styles[r.fieldIndex]=l+f;t.header.classes[r.fieldIndex]=c;t.header.formatters[r.fieldIndex]=r.formatter;t.header.events[r.fieldIndex]=r.events;t.header.sorters[r.fieldIndex]=r.sorter;t.header.sortNames[r.fieldIndex]=r.sortName;t.header.cellStyles[r.fieldIndex]=r.cellStyle;t.header.searchables[r.fieldIndex]=r.searchable;if(!r.visible){return}if(t.options.cardView&&!r.cardVisible){return}n[r.field]=r}s.push("<th"+i(' title="%s"',r.titleTooltip),r.checkbox||r.radio?i(' class="bs-checkbox %s"',r["class"]||""):c,i(' style="%s"',o+f),i(' rowspan="%s"',r.rowspan),i(' colspan="%s"',r.colspan),i(' data-field="%s"',r.field),">");s.push(i('<div class="th-inner %s">',t.options.sortable&&r.sortable?"sortable both":""));a=t.options.escape?u(r.title):r.title;if(r.checkbox){if(!t.options.singleSelect&&t.options.checkboxHeader){a='<input name="btSelectAll" type="checkbox" />'}t.header.stateField=r.field}if(r.radio){a="";t.header.stateField=r.field;t.options.singleSelect=true}s.push(a);s.push("</div>");s.push('<div class="fht-cell"></div>');s.push("</div>");s.push("</th>")});s.push("</tr>")});this.$header.html(s.join(""));this.$header.find("th[data-field]").each(function(t){e(this).data(n[e(this).data("field")])});this.$container.off("click",".th-inner").on("click",".th-inner",function(i){var n=e(this);if(t.options.detailView){if(n.closest(".bootstrap-table")[0]!==t.$container[0])return false}if(t.options.sortable&&n.parent().data().sortable){t.onSort(i)}});this.$header.children().children().off("keypress").on("keypress",function(i){if(t.options.sortable&&e(this).data().sortable){var n=i.keyCode||i.which;if(n==13){t.onSort(i)}}});e(window).off("resize.bootstrap-table");if(!this.options.showHeader||this.options.cardView){this.$header.hide();this.$tableHeader.hide();this.$tableLoading.css("top",0)}else{this.$header.show();this.$tableHeader.show();this.$tableLoading.css("top",this.$header.outerHeight()+1);this.getCaret();e(window).on("resize.bootstrap-table",e.proxy(this.resetWidth,this))}this.$selectAll=this.$header.find('[name="btSelectAll"]');this.$selectAll.off("click").on("click",function(){var i=e(this).prop("checked");t[i?"checkAll":"uncheckAll"]();t.updateSelected()})};p.prototype.initFooter=function(){if(!this.options.showFooter||this.options.cardView){this.$tableFooter.hide()}else{this.$tableFooter.show()}};p.prototype.initData=function(e,t){if(t==="append"){this.data=this.data.concat(e)}else if(t==="prepend"){this.data=[].concat(e).concat(this.data)}else{this.data=e||this.options.data}if(t==="append"){this.options.data=this.options.data.concat(e)}else if(t==="prepend"){this.options.data=[].concat(e).concat(this.options.data)}else{this.options.data=this.data}if(this.options.sidePagination==="server"){return}this.initSort()};p.prototype.initSort=function(){var t=this,n=this.options.sortName,s=this.options.sortOrder==="desc"?-1:1,r=e.inArray(this.options.sortName,this.header.fields),a=0;if(this.options.customSort!==e.noop){this.options.customSort.apply(this,[this.options.sortName,this.options.sortOrder]);return}if(r!==-1){if(this.options.sortStable){e.each(this.data,function(e,t){if(!t.hasOwnProperty("_position"))t._position=e})}this.data.sort(function(i,a){if(t.header.sortNames[r]){n=t.header.sortNames[r]}var l=c(i,n,t.options.escape),u=c(a,n,t.options.escape),f=o(t.header,t.header.sorters[r],[l,u]);if(f!==undefined){return s*f}if(l===undefined||l===null){l=""}if(u===undefined||u===null){u=""}if(t.options.sortStable&&l===u){l=i._position;u=a._position}if(e.isNumeric(l)&&e.isNumeric(u)){l=parseFloat(l);u=parseFloat(u);if(l<u){return s*-1}return s}if(l===u){return 0}if(typeof l!=="string"){l=l.toString()}if(l.localeCompare(u)===-1){return s*-1}return s});if(this.options.sortClass!==undefined){clearTimeout(a);a=setTimeout(function(){t.$el.removeClass(t.options.sortClass);var e=t.$header.find(i('[data-field="%s"]',t.options.sortName).index()+1);t.$el.find(i("tr td:nth-child(%s)",e)).addClass(t.options.sortClass)},250)}}};p.prototype.onSort=function(t){var i=t.type==="keypress"?e(t.currentTarget):e(t.currentTarget).parent(),n=this.$header.find("th").eq(i.index());this.$header.add(this.$header_).find("span.order").remove();if(this.options.sortName===i.data("field")){this.options.sortOrder=this.options.sortOrder==="asc"?"desc":"asc"}else{this.options.sortName=i.data("field");this.options.sortOrder=i.data("order")==="asc"?"desc":"asc"}this.trigger("sort",this.options.sortName,this.options.sortOrder);i.add(n).data("order",this.options.sortOrder);this.getCaret();if(this.options.sidePagination==="server"){this.initServer(this.options.silentSort);return}this.initSort();this.initBody()};p.prototype.initToolbar=function(){var t=this,n=[],s=0,r,a,l=0;if(this.$toolbar.find(".bs-bars").children().length){e("body").append(e(this.options.toolbar))}this.$toolbar.html("");if(typeof this.options.toolbar==="string"||typeof this.options.toolbar==="object"){e(i('<div class="bs-bars pull-%s"></div>',this.options.toolbarAlign)).appendTo(this.$toolbar).append(e(this.options.toolbar))}n=[i('<div class="columns columns-%s btn-group pull-%s">',this.options.buttonsAlign,this.options.buttonsAlign)];if(typeof this.options.icons==="string"){this.options.icons=o(null,this.options.icons)}if(this.options.showPaginationSwitch){n.push(i('<button class="btn'+i(" btn-%s",this.options.buttonsClass)+i(" btn-%s",this.options.iconSize)+'" type="button" name="paginationSwitch" aria-label="pagination Switch" title="%s">',this.options.formatPaginationSwitch()),i('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.paginationSwitchDown),"</button>")}if(this.options.showRefresh){n.push(i('<button class="btn'+i(" btn-%s",this.options.buttonsClass)+i(" btn-%s",this.options.iconSize)+'" type="button" name="refresh" aria-label="refresh" title="%s">',this.options.formatRefresh()),i('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.refresh),"</button>")}if(this.options.showToggle){n.push(i('<button class="btn'+i(" btn-%s",this.options.buttonsClass)+i(" btn-%s",this.options.iconSize)+'" type="button" name="toggle" aria-label="toggle" title="%s">',this.options.formatToggle()),i('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.toggle),"</button>")}if(this.options.showColumns){n.push(i('<div class="keep-open btn-group" title="%s">',this.options.formatColumns()),'<button type="button" aria-label="columns" class="btn'+i(" btn-%s",this.options.buttonsClass)+i(" btn-%s",this.options.iconSize)+' dropdown-toggle" data-toggle="dropdown">',i('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.columns),' <span class="caret"></span>',"</button>",'<ul class="dropdown-menu" role="menu">');e.each(this.columns,function(e,s){if(s.radio||s.checkbox){return}if(t.options.cardView&&!s.cardVisible){return}var r=s.visible?' checked="checked"':"";if(s.switchable){n.push(i('<li role="menuitem">'+'<label><input type="checkbox" data-field="%s" value="%s"%s> %s</label>'+"</li>",s.field,e,r,s.title));l++}});n.push("</ul>","</div>")}n.push("</div>");if(this.showToolbar||n.length>2){this.$toolbar.append(n.join(""))}if(this.options.showPaginationSwitch){this.$toolbar.find('button[name="paginationSwitch"]').off("click").on("click",e.proxy(this.togglePagination,this))}if(this.options.showRefresh){this.$toolbar.find('button[name="refresh"]').off("click").on("click",e.proxy(this.refresh,this))}if(this.options.showToggle){this.$toolbar.find('button[name="toggle"]').off("click").on("click",function(){t.toggleView()})}if(this.options.showColumns){r=this.$toolbar.find(".keep-open");if(l<=this.options.minimumCountColumns){r.find("input").prop("disabled",true)}r.find("li").off("click").on("click",function(e){e.stopImmediatePropagation()});r.find("input").off("click").on("click",function(){var i=e(this);t.toggleColumn(e(this).val(),i.prop("checked"),false);t.trigger("column-switch",e(this).data("field"),i.prop("checked"))})}if(this.options.search){n=[];n.push('<div class="pull-'+this.options.searchAlign+' search">',i('<input class="form-control'+i(" input-%s",this.options.iconSize)+'" type="text" placeholder="%s">',this.options.formatSearch()),"</div>");this.$toolbar.append(n.join(""));a=this.$toolbar.find(".search input");a.off("keyup drop blur").on("keyup drop blur",function(i){if(t.options.searchOnEnterKey&&i.keyCode!==13){return}if(e.inArray(i.keyCode,[37,38,39,40])>-1){return}clearTimeout(s);s=setTimeout(function(){t.onSearch(i)},t.options.searchTimeOut)});if(d()){a.off("mouseup").on("mouseup",function(e){clearTimeout(s);s=setTimeout(function(){t.onSearch(e)},t.options.searchTimeOut)})}}};p.prototype.onSearch=function(t){var i=e.trim(e(t.currentTarget).val());if(this.options.trimOnSearch&&e(t.currentTarget).val()!==i){e(t.currentTarget).val(i)}if(i===this.searchText){return}this.searchText=i;this.options.searchText=i;this.options.pageNumber=1;this.initSearch();this.updatePagination();this.trigger("search",i)};p.prototype.initSearch=function(){var t=this;if(this.options.sidePagination!=="server"){if(this.options.customSearch!==e.noop){this.options.customSearch.apply(this,[this.searchText]);return}var i=this.searchText&&(this.options.escape?u(this.searchText):this.searchText).toLowerCase();var n=e.isEmptyObject(this.filterColumns)?null:this.filterColumns;this.data=n?e.grep(this.options.data,function(t,i){for(var s in n){if(e.isArray(n[s])&&e.inArray(t[s],n[s])===-1||!e.isArray(n[s])&&t[s]!==n[s]){return false}}return true}):this.options.data;this.data=i?e.grep(this.data,function(n,r){for(var a=0;a<t.header.fields.length;a++){if(!t.header.searchables[a]){continue}var l=e.isNumeric(t.header.fields[a])?parseInt(t.header.fields[a],10):t.header.fields[a];var u=t.columns[s(t.columns,l)];var f;if(typeof l==="string"){f=n;var c=l.split(".");for(var d=0;d<c.length;d++){f=f[c[d]]}if(u&&u.searchFormatter){f=o(u,t.header.formatters[a],[f,n,r],f)}}else{f=n[l]}if(typeof f==="string"||typeof f==="number"){if(t.options.strictSearch){if((f+"").toLowerCase()===i){return true}}else{if((f+"").toLowerCase().indexOf(i)!==-1){return true}}}}return false}):this.data}};p.prototype.initPagination=function(){if(!this.options.pagination){this.$pagination.hide();return}else{this.$pagination.show()}var t=this,n=[],s=false,r,a,o,l,u,f,c,d,h,p=this.getData(),m=this.options.pageList;if(this.options.sidePagination!=="server"){this.options.totalRows=p.length}this.totalPages=0;if(this.options.totalRows){if(this.options.pageSize===this.options.formatAllRows()){this.options.pageSize=this.options.totalRows;s=true}else if(this.options.pageSize===this.options.totalRows){var g=typeof this.options.pageList==="string"?this.options.pageList.replace("[","").replace("]","").replace(/ /g,"").toLowerCase().split(","):this.options.pageList;if(e.inArray(this.options.formatAllRows().toLowerCase(),g)>-1){s=true}}this.totalPages=~~((this.options.totalRows-1)/this.options.pageSize)+1;this.options.totalPages=this.totalPages}if(this.totalPages>0&&this.options.pageNumber>this.totalPages){this.options.pageNumber=this.totalPages}this.pageFrom=(this.options.pageNumber-1)*this.options.pageSize+1;this.pageTo=this.options.pageNumber*this.options.pageSize;if(this.pageTo>this.options.totalRows){this.pageTo=this.options.totalRows}n.push('<div class="pull-'+this.options.paginationDetailHAlign+' pagination-detail">','<span class="pagination-info">',this.options.onlyInfoPagination?this.options.formatDetailPagination(this.options.totalRows):this.options.formatShowingRows(this.pageFrom,this.pageTo,this.options.totalRows),"</span>");if(!this.options.onlyInfoPagination){n.push('<span class="page-list">');var v=[i('<span class="btn-group %s">',this.options.paginationVAlign==="top"||this.options.paginationVAlign==="both"?"dropdown":"dropup"),'<button type="button" class="btn'+i(" btn-%s",this.options.buttonsClass)+i(" btn-%s",this.options.iconSize)+' dropdown-toggle" data-toggle="dropdown">','<span class="page-size">',s?this.options.formatAllRows():this.options.pageSize,"</span>",' <span class="caret"></span>',"</button>",'<ul class="dropdown-menu" role="menu">'];if(typeof this.options.pageList==="string"){var y=this.options.pageList.replace("[","").replace("]","").replace(/ /g,"").split(",");m=[];e.each(y,function(e,i){m.push(i.toUpperCase()===t.options.formatAllRows().toUpperCase()?t.options.formatAllRows():+i)})}e.each(m,function(e,n){if(!t.options.smartDisplay||e===0||m[e-1]<t.options.totalRows){var r;if(s){r=n===t.options.formatAllRows()?' class="active"':""}else{r=n===t.options.pageSize?' class="active"':""}v.push(i('<li role="menuitem"%s><a href="#">%s</a></li>',r,n))}});v.push("</ul></span>");n.push(this.options.formatRecordsPerPage(v.join("")));n.push("</span>");n.push("</div>",'<div class="pull-'+this.options.paginationHAlign+' pagination">','<ul class="pagination'+i(" pagination-%s",this.options.iconSize)+'">','<li class="page-pre"><a href="#">'+this.options.paginationPreText+"</a></li>");if(this.totalPages<5){a=1;o=this.totalPages}else{a=this.options.pageNumber-2;o=a+4;if(a<1){a=1;o=5}if(o>this.totalPages){o=this.totalPages;a=o-4}}if(this.totalPages>=6){if(this.options.pageNumber>=3){n.push('<li class="page-first'+(1===this.options.pageNumber?" active":"")+'">','<a href="#">',1,"</a>","</li>");a++}if(this.options.pageNumber>=4){if(this.options.pageNumber==4||this.totalPages==6||this.totalPages==7){a--}else{n.push('<li class="page-first-separator disabled">','<a href="#">...</a>',"</li>")}o--}}if(this.totalPages>=7){if(this.options.pageNumber>=this.totalPages-2){a--}}if(this.totalPages==6){if(this.options.pageNumber>=this.totalPages-2){o++}}else if(this.totalPages>=7){if(this.totalPages==7||this.options.pageNumber>=this.totalPages-3){o++}}for(r=a;r<=o;r++){n.push('<li class="page-number'+(r===this.options.pageNumber?" active":"")+'">','<a href="#">',r,"</a>","</li>")}if(this.totalPages>=8){if(this.options.pageNumber<=this.totalPages-4){n.push('<li class="page-last-separator disabled">','<a href="#">...</a>',"</li>")}}if(this.totalPages>=6){if(this.options.pageNumber<=this.totalPages-3){n.push('<li class="page-last'+(this.totalPages===this.options.pageNumber?" active":"")+'">','<a href="#">',this.totalPages,"</a>","</li>")}}n.push('<li class="page-next"><a href="#">'+this.options.paginationNextText+"</a></li>","</ul>","</div>")}this.$pagination.html(n.join(""));if(!this.options.onlyInfoPagination){l=this.$pagination.find(".page-list a");u=this.$pagination.find(".page-first");f=this.$pagination.find(".page-pre");c=this.$pagination.find(".page-next");d=this.$pagination.find(".page-last");h=this.$pagination.find(".page-number");if(this.options.smartDisplay){if(this.totalPages<=1){this.$pagination.find("div.pagination").hide()}if(m.length<2||this.options.totalRows<=m[0]){this.$pagination.find("span.page-list").hide()}this.$pagination[this.getData().length?"show":"hide"]()}if(!this.options.paginationLoop){if(this.options.pageNumber===1){f.addClass("disabled")}if(this.options.pageNumber===this.totalPages){c.addClass("disabled")}}if(s){this.options.pageSize=this.options.formatAllRows()}l.off("click").on("click",e.proxy(this.onPageListChange,this));u.off("click").on("click",e.proxy(this.onPageFirst,this));f.off("click").on("click",e.proxy(this.onPagePre,this));c.off("click").on("click",e.proxy(this.onPageNext,this));d.off("click").on("click",e.proxy(this.onPageLast,this));h.off("click").on("click",e.proxy(this.onPageNumber,this))}};p.prototype.updatePagination=function(t){if(t&&e(t.currentTarget).hasClass("disabled")){return}if(!this.options.maintainSelected){this.resetRows()}this.initPagination();if(this.options.sidePagination==="server"){this.initServer()}else{this.initBody()}this.trigger("page-change",this.options.pageNumber,this.options.pageSize)};p.prototype.onPageListChange=function(t){var i=e(t.currentTarget);i.parent().addClass("active").siblings().removeClass("active");this.options.pageSize=i.text().toUpperCase()===this.options.formatAllRows().toUpperCase()?this.options.formatAllRows():+i.text();this.$toolbar.find(".page-size").text(this.options.pageSize);this.updatePagination(t);return false};p.prototype.onPageFirst=function(e){this.options.pageNumber=1;this.updatePagination(e);return false};p.prototype.onPagePre=function(e){if(this.options.pageNumber-1===0){this.options.pageNumber=this.options.totalPages}else{this.options.pageNumber--}this.updatePagination(e);return false};p.prototype.onPageNext=function(e){if(this.options.pageNumber+1>this.options.totalPages){this.options.pageNumber=1}else{this.options.pageNumber++}this.updatePagination(e);return false};p.prototype.onPageLast=function(e){this.options.pageNumber=this.totalPages;this.updatePagination(e);return false};p.prototype.onPageNumber=function(t){if(this.options.pageNumber===+e(t.currentTarget).text()){return}this.options.pageNumber=+e(t.currentTarget).text();this.updatePagination(t);return false};p.prototype.initRow=function(t,s,r,a){var l=this,f,d=[],h={},p=[],m="",g={},v=[];if(e.inArray(t,this.hiddenRows)>-1){return}h=o(this.options,this.options.rowStyle,[t,s],h);if(h&&h.css){for(f in h.css){p.push(f+": "+h.css[f])}}g=o(this.options,this.options.rowAttributes,[t,s],g);if(g){for(f in g){v.push(i('%s="%s"',f,u(g[f])))}}if(t._data&&!e.isEmptyObject(t._data)){e.each(t._data,function(e,t){if(e==="index"){return}m+=i(' data-%s="%s"',e,t)})}d.push("<tr",i(" %s",v.join(" ")),i(' id="%s"',e.isArray(t)?undefined:t._id),i(' class="%s"',h.classes||(e.isArray(t)?undefined:t._class)),i(' data-index="%s"',s),i(' data-uniqueid="%s"',t[this.options.uniqueId]),i("%s",m),">");if(this.options.cardView){d.push(i('<td colspan="%s"><div class="card-views">',this.header.fields.length))}if(!this.options.cardView&&this.options.detailView){d.push("<td>",'<a class="detail-icon" href="#">',i('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.detailOpen),"</a>","</td>")}e.each(this.header.fields,function(r,a){var f="",m=c(t,a,l.options.escape),g="",v="",y={},b="",w=l.header.classes[r],x="",C="",T="",_="",k=l.columns[r];if(l.fromHtml&&typeof m==="undefined"){return}if(!k.visible){return}if(l.options.cardView&&!k.cardVisible){return}if(k.escape){m=u(m)}h=i('style="%s"',p.concat(l.header.styles[r]).join("; "));if(t["_"+a+"_id"]){b=i(' id="%s"',t["_"+a+"_id"])}if(t["_"+a+"_class"]){w=i(' class="%s"',t["_"+a+"_class"])}if(t["_"+a+"_rowspan"]){C=i(' rowspan="%s"',t["_"+a+"_rowspan"])}if(t["_"+a+"_colspan"]){T=i(' colspan="%s"',t["_"+a+"_colspan"])}if(t["_"+a+"_title"]){_=i(' title="%s"',t["_"+a+"_title"])}y=o(l.header,l.header.cellStyles[r],[m,t,s,a],y);if(y.classes){w=i(' class="%s"',y.classes)}if(y.css){var D=[];for(var S in y.css){D.push(S+": "+y.css[S])}h=i('style="%s"',D.concat(l.header.styles[r]).join("; "))}g=o(k,l.header.formatters[r],[m,t,s],m);if(t["_"+a+"_data"]&&!e.isEmptyObject(t["_"+a+"_data"])){e.each(t["_"+a+"_data"],function(e,t){if(e==="index"){return}x+=i(' data-%s="%s"',e,t)})}if(k.checkbox||k.radio){v=k.checkbox?"checkbox":v;v=k.radio?"radio":v;f=[i(l.options.cardView?'<div class="card-view %s">':'<td class="bs-checkbox %s">',k["class"]||""),"<input"+i(' data-index="%s"',s)+i(' name="%s"',l.options.selectItemName)+i(' type="%s"',v)+i(' value="%s"',t[l.options.idField])+i(' checked="%s"',g===true||(m||g&&g.checked)?"checked":undefined)+i(' disabled="%s"',!k.checkboxEnabled||g&&g.disabled?"disabled":undefined)+" />",l.header.formatters[r]&&typeof g==="string"?g:"",l.options.cardView?"</div>":"</td>"].join("");t[l.header.stateField]=g===true||g&&g.checked}else{g=typeof g==="undefined"||g===null?l.options.undefinedText:g;f=l.options.cardView?['<div class="card-view">',l.options.showHeader?i('<span class="title" %s>%s</span>',h,n(l.columns,"field","title",a)):"",i('<span class="value">%s</span>',g),"</div>"].join(""):[i("<td%s %s %s %s %s %s %s>",b,w,h,x,C,T,_),g,"</td>"].join("");if(l.options.cardView&&l.options.smartDisplay&&g===""){f='<div class="card-view"></div>'}}d.push(f)});if(this.options.cardView){d.push("</div></td>")}d.push("</tr>");return d.join(" ")};p.prototype.initBody=function(t){var n=this,r=[],a=this.getData();this.trigger("pre-body",a);this.$body=this.$el.find(">tbody");if(!this.$body.length){this.$body=e("<tbody></tbody>").appendTo(this.$el)}if(!this.options.pagination||this.options.sidePagination==="server"){this.pageFrom=1;this.pageTo=a.length}var l=e(document.createDocumentFragment());var u;for(var f=this.pageFrom-1;f<this.pageTo;f++){var d=a[f];var h=this.initRow(d,f,a,l);u=u||!!h;if(h&&h!==true){l.append(h)}}if(!u){l.append('<tr class="no-records-found">'+i('<td colspan="%s">%s</td>',this.$header.find("th").length,this.options.formatNoMatches())+"</tr>")}this.$body.html(l);if(!t){this.scrollTo(0)}this.$body.find("> tr[data-index] > td").off("click dblclick").on("click dblclick",function(t){var r=e(this),a=r.parent(),o=n.data[a.data("index")],l=r[0].cellIndex,u=n.getVisibleFields(),f=u[n.options.detailView&&!n.options.cardView?l-1:l],d=n.columns[s(n.columns,f)],h=c(o,f,n.options.escape);if(r.find(".detail-icon").length){return}n.trigger(t.type==="click"?"click-cell":"dbl-click-cell",f,h,o,r);n.trigger(t.type==="click"?"click-row":"dbl-click-row",o,a,f);if(t.type==="click"&&n.options.clickToSelect&&d.clickToSelect){var p=a.find(i('[name="%s"]',n.options.selectItemName));if(p.length){p[0].click()}}});this.$body.find("> tr[data-index] > td > .detail-icon").off("click").on("click",function(){var t=e(this),s=t.parent().parent(),r=s.data("index"),l=a[r];if(s.next().is("tr.detail-view")){t.find("i").attr("class",i("%s %s",n.options.iconsPrefix,n.options.icons.detailOpen));n.trigger("collapse-row",r,l);s.next().remove()}else{t.find("i").attr("class",i("%s %s",n.options.iconsPrefix,n.options.icons.detailClose));s.after(i('<tr class="detail-view"><td colspan="%s"></td></tr>',s.find("td").length));var u=s.next().find("td");var f=o(n.options,n.options.detailFormatter,[r,l,u],"");if(u.length===1){u.append(f)}n.trigger("expand-row",r,l,u)}n.resetView();return false});this.$selectItem=this.$body.find(i('[name="%s"]',this.options.selectItemName));this.$selectItem.off("click").on("click",function(t){t.stopImmediatePropagation();var i=e(this),s=i.prop("checked"),r=n.data[i.data("index")];if(n.options.maintainSelected&&e(this).is(":radio")){e.each(n.options.data,function(e,t){t[n.header.stateField]=false})}r[n.header.stateField]=s;if(n.options.singleSelect){n.$selectItem.not(this).each(function(){n.data[e(this).data("index")][n.header.stateField]=false});n.$selectItem.filter(":checked").not(this).prop("checked",false)}n.updateSelected();n.trigger(s?"check":"uncheck",r,i)});e.each(this.header.events,function(t,i){if(!i){return}if(typeof i==="string"){i=o(null,i)}var s=n.header.fields[t],r=e.inArray(s,n.getVisibleFields());if(n.options.detailView&&!n.options.cardView){r+=1}for(var a in i){n.$body.find(">tr:not(.no-records-found)").each(function(){var t=e(this),o=t.find(n.options.cardView?".card-view":"td").eq(r),l=a.indexOf(" "),u=a.substring(0,l),f=a.substring(l+1),c=i[a];o.find(f).off(u).on(u,function(e){var i=t.data("index"),r=n.data[i],a=r[s];c.apply(this,[e,a,r,i])})})}});this.updateSelected();this.resetView();this.trigger("post-body",a)};p.prototype.initServer=function(t,i,n){var s=this,r={},a={searchText:this.searchText,sortName:this.options.sortName,sortOrder:this.options.sortOrder},l;if(this.options.pagination){a.pageSize=this.options.pageSize===this.options.formatAllRows()?this.options.totalRows:this.options.pageSize;a.pageNumber=this.options.pageNumber}if(!(n||this.options.url)&&!this.options.ajax){return}if(this.options.queryParamsType==="limit"){a={search:a.searchText,sort:a.sortName,order:a.sortOrder};if(this.options.pagination){a.offset=this.options.pageSize===this.options.formatAllRows()?0:this.options.pageSize*(this.options.pageNumber-1);a.limit=this.options.pageSize===this.options.formatAllRows()?this.options.totalRows:this.options.pageSize}}if(!e.isEmptyObject(this.filterColumnsPartial)){a.filter=JSON.stringify(this.filterColumnsPartial,null)}r=o(this.options,this.options.queryParams,[a],r);e.extend(r,i||{});if(r===false){return}if(!t){this.$tableLoading.show()}l=e.extend({},o(null,this.options.ajaxOptions),{type:this.options.method,url:n||this.options.url,data:this.options.contentType==="application/json"&&this.options.method==="post"?JSON.stringify(r):r,cache:this.options.cache,contentType:this.options.contentType,dataType:this.options.dataType,success:function(e){e=o(s.options,s.options.responseHandler,[e],e);s.load(e);s.trigger("load-success",e);if(!t)s.$tableLoading.hide()},error:function(e){s.trigger("load-error",e.status,e);if(!t)s.$tableLoading.hide()}});if(this.options.ajax){o(this,this.options.ajax,[l],null)}else{if(this._xhr&&this._xhr.readyState!==4){this._xhr.abort()}this._xhr=e.ajax(l)}};p.prototype.initSearchText=function(){if(this.options.search){if(this.options.searchText!==""){var e=this.$toolbar.find(".search input");e.val(this.options.searchText);this.onSearch({currentTarget:e})}}};p.prototype.getCaret=function(){var t=this;e.each(this.$header.find("th"),function(i,n){e(n).find(".sortable").removeClass("desc asc").addClass(e(n).data("field")===t.options.sortName?t.options.sortOrder:"both")})};p.prototype.updateSelected=function(){var t=this.$selectItem.filter(":enabled").length&&this.$selectItem.filter(":enabled").length===this.$selectItem.filter(":enabled").filter(":checked").length;this.$selectAll.add(this.$selectAll_).prop("checked",t);this.$selectItem.each(function(){e(this).closest("tr")[e(this).prop("checked")?"addClass":"removeClass"]("selected")})};p.prototype.updateRows=function(){var t=this;this.$selectItem.each(function(){t.data[e(this).data("index")][t.header.stateField]=e(this).prop("checked")})};p.prototype.resetRows=function(){var t=this;e.each(this.data,function(e,i){t.$selectAll.prop("checked",false);t.$selectItem.prop("checked",false);if(t.header.stateField){i[t.header.stateField]=false}});this.initHiddenRows()};p.prototype.trigger=function(t){var i=Array.prototype.slice.call(arguments,1);t+=".bs.table";this.options[p.EVENTS[t]].apply(this.options,i);this.$el.trigger(e.Event(t),i);this.options.onAll(t,i);this.$el.trigger(e.Event("all.bs.table"),[t,i])};p.prototype.resetHeader=function(){clearTimeout(this.timeoutId_);this.timeoutId_=setTimeout(e.proxy(this.fitHeader,this),this.$el.is(":hidden")?100:0)};p.prototype.fitHeader=function(){var t=this,n,s,r,o;if(t.$el.is(":hidden")){t.timeoutId_=setTimeout(e.proxy(t.fitHeader,t),100);return}n=this.$tableBody.get(0);s=n.scrollWidth>n.clientWidth&&n.scrollHeight>n.clientHeight+this.$header.outerHeight()?a():0;this.$el.css("margin-top",-this.$header.outerHeight());r=e(":focus");if(r.length>0){var l=r.parents("th");if(l.length>0){var u=l.attr("data-field");if(u!==undefined){var f=this.$header.find("[data-field='"+u+"']");if(f.length>0){f.find(":input").addClass("focus-temp")}}}}this.$header_=this.$header.clone(true,true);this.$selectAll_=this.$header_.find('[name="btSelectAll"]');this.$tableHeader.css({"margin-right":s}).find("table").css("width",this.$el.outerWidth()).html("").attr("class",this.$el.attr("class")).append(this.$header_);o=e(".focus-temp:visible:eq(0)");if(o.length>0){o.focus();this.$header.find(".focus-temp").removeClass("focus-temp")}this.$header.find("th[data-field]").each(function(n){t.$header_.find(i('th[data-field="%s"]',e(this).data("field"))).data(e(this).data())});var c=this.getVisibleFields(),d=this.$header_.find("th");this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function(n){var s=e(this),r=n;if(t.options.detailView&&!t.options.cardView){if(n===0){t.$header_.find("th.detail").find(".fht-cell").width(s.innerWidth())}r=n-1}var a=t.$header_.find(i('th[data-field="%s"]',c[r]));if(a.length>1){a=e(d[s[0].cellIndex])}a.find(".fht-cell").width(s.innerWidth())});this.$tableBody.off("scroll").on("scroll",function(){t.$tableHeader.scrollLeft(e(this).scrollLeft());if(t.options.showFooter&&!t.options.cardView){t.$tableFooter.scrollLeft(e(this).scrollLeft())}});t.trigger("post-header")};p.prototype.resetFooter=function(){var t=this,n=t.getData(),s=[];if(!this.options.showFooter||this.options.cardView){return}if(!this.options.cardView&&this.options.detailView){s.push('<td><div class="th-inner">&nbsp;</div><div class="fht-cell"></div></td>')}e.each(this.columns,function(e,r){var a,l="",u="",f=[],c={},d=i(' class="%s"',r["class"]);if(!r.visible){return}if(t.options.cardView&&!r.cardVisible){return}l=i("text-align: %s; ",r.falign?r.falign:r.align);u=i("vertical-align: %s; ",r.valign);c=o(null,t.options.footerStyle);if(c&&c.css){for(a in c.css){f.push(a+": "+c.css[a])}}s.push("<td",d,i(' style="%s"',l+u+f.concat().join("; ")),">");s.push('<div class="th-inner">');s.push(o(r,r.footerFormatter,[n],"&nbsp;")||"&nbsp;");s.push("</div>");s.push('<div class="fht-cell"></div>');s.push("</div>");s.push("</td>")});this.$tableFooter.find("tr").html(s.join(""));this.$tableFooter.show();clearTimeout(this.timeoutFooter_);this.timeoutFooter_=setTimeout(e.proxy(this.fitFooter,this),this.$el.is(":hidden")?100:0)};p.prototype.fitFooter=function(){var t=this,i,n,s;clearTimeout(this.timeoutFooter_);if(this.$el.is(":hidden")){this.timeoutFooter_=setTimeout(e.proxy(this.fitFooter,this),100);return}n=this.$el.css("width");s=n>this.$tableBody.width()?a():0;this.$tableFooter.css({"margin-right":s}).find("table").css("width",n).attr("class",this.$el.attr("class"));i=this.$tableFooter.find("td");this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function(t){var n=e(this);i.eq(t).find(".fht-cell").width(n.innerWidth())})};p.prototype.toggleColumn=function(e,t,n){if(e===-1){return}this.columns[e].visible=t;this.initHeader();this.initSearch();this.initPagination();this.initBody();if(this.options.showColumns){var s=this.$toolbar.find(".keep-open input").prop("disabled",false);if(n){s.filter(i('[value="%s"]',e)).prop("checked",t)}if(s.filter(":checked").length<=this.options.minimumCountColumns){s.filter(":checked").prop("disabled",true)}}};p.prototype.getVisibleFields=function(){var t=this,i=[];e.each(this.header.fields,function(e,n){var r=t.columns[s(t.columns,n)];if(!r.visible){return}i.push(n)});return i};p.prototype.resetView=function(e){var t=0;if(e&&e.height){this.options.height=e.height}this.$selectAll.prop("checked",this.$selectItem.length>0&&this.$selectItem.length===this.$selectItem.filter(":checked").length);if(this.options.height){var i=this.$toolbar.outerHeight(true),n=this.$pagination.outerHeight(true),s=this.options.height-i-n;this.$tableContainer.css("height",s+"px")}if(this.options.cardView){this.$el.css("margin-top","0");this.$tableContainer.css("padding-bottom","0");this.$tableFooter.hide();return}if(this.options.showHeader&&this.options.height){this.$tableHeader.show();this.resetHeader();t+=this.$header.outerHeight()}else{this.$tableHeader.hide();this.trigger("post-header")}if(this.options.showFooter){this.resetFooter();if(this.options.height){t+=this.$tableFooter.outerHeight()+1}}this.getCaret();this.$tableContainer.css("padding-bottom",t+"px");this.trigger("reset-view")};p.prototype.getData=function(t){return this.searchText||!e.isEmptyObject(this.filterColumns)||!e.isEmptyObject(this.filterColumnsPartial)?t?this.data.slice(this.pageFrom-1,this.pageTo):this.data:t?this.options.data.slice(this.pageFrom-1,this.pageTo):this.options.data};p.prototype.load=function(t){var i=false;if(this.options.sidePagination==="server"){this.options.totalRows=t[this.options.totalField];i=t.fixedScroll;t=t[this.options.dataField]}else if(!e.isArray(t)){i=t.fixedScroll;t=t.data}this.initData(t);this.initSearch();this.initPagination();this.initBody(i)};p.prototype.append=function(e){this.initData(e,"append");this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.prepend=function(e){this.initData(e,"prepend");this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.remove=function(t){var i=this.options.data.length,n,s;if(!t.hasOwnProperty("field")||!t.hasOwnProperty("values")){return}for(n=i-1;n>=0;n--){s=this.options.data[n];if(!s.hasOwnProperty(t.field)){continue}if(e.inArray(s[t.field],t.values)!==-1){this.options.data.splice(n,1);if(this.options.sidePagination==="server"){this.options.totalRows-=1}}}if(i===this.options.data.length){return}this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.removeAll=function(){if(this.options.data.length>0){this.options.data.splice(0,this.options.data.length);this.initSearch();this.initPagination();this.initBody(true)}};p.prototype.getRowByUniqueId=function(e){var t=this.options.uniqueId,i=this.options.data.length,n=null,s,r,a;for(s=i-1;s>=0;s--){r=this.options.data[s];if(r.hasOwnProperty(t)){a=r[t]}else if(r._data.hasOwnProperty(t)){a=r._data[t]}else{continue}if(typeof a==="string"){e=e.toString()}else if(typeof a==="number"){if(Number(a)===a&&a%1===0){e=parseInt(e)}else if(a===Number(a)&&a!==0){e=parseFloat(e)}}if(a===e){n=r;break}}return n};p.prototype.removeByUniqueId=function(e){var t=this.options.data.length,i=this.getRowByUniqueId(e);if(i){this.options.data.splice(this.options.data.indexOf(i),1)}if(t===this.options.data.length){return}this.initSearch();this.initPagination();this.initBody(true)};p.prototype.updateByUniqueId=function(t){var i=this;var n=e.isArray(t)?t:[t];e.each(n,function(t,n){var s;if(!n.hasOwnProperty("id")||!n.hasOwnProperty("row")){return}s=e.inArray(i.getRowByUniqueId(n.id),i.options.data);if(s===-1){return}e.extend(i.options.data[s],n.row)});this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.insertRow=function(e){if(!e.hasOwnProperty("index")||!e.hasOwnProperty("row")){return}this.data.splice(e.index,0,e.row);this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.updateRow=function(t){var i=this;var n=e.isArray(t)?t:[t];e.each(n,function(t,n){if(!n.hasOwnProperty("index")||!n.hasOwnProperty("row")){return}e.extend(i.options.data[n.index],n.row)});this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.initHiddenRows=function(){this.hiddenRows=[]};p.prototype.showRow=function(e){this.toggleRow(e,true)};p.prototype.hideRow=function(e){this.toggleRow(e,false)};p.prototype.toggleRow=function(t,i){var n,s;if(t.hasOwnProperty("index")){n=this.getData()[t.index]}else if(t.hasOwnProperty("uniqueId")){n=this.getRowByUniqueId(t.uniqueId)}if(!n){return}s=e.inArray(n,this.hiddenRows);if(!i&&s===-1){this.hiddenRows.push(n)}else if(i&&s>-1){this.hiddenRows.splice(s,1)}this.initBody(true)};p.prototype.getHiddenRows=function(t){var i=this,n=this.getData(),s=[];e.each(n,function(t,n){if(e.inArray(n,i.hiddenRows)>-1){s.push(n)}});this.hiddenRows=s;return s};p.prototype.mergeCells=function(t){var i=t.index,n=e.inArray(t.field,this.getVisibleFields()),s=t.rowspan||1,r=t.colspan||1,a,o,l=this.$body.find(">tr"),u;if(this.options.detailView&&!this.options.cardView){n+=1}u=l.eq(i).find(">td").eq(n);if(i<0||n<0||i>=this.data.length){return}for(a=i;a<i+s;a++){for(o=n;o<n+r;o++){l.eq(a).find(">td").eq(o).hide()}}u.attr("rowspan",s).attr("colspan",r).show()};p.prototype.updateCell=function(e){if(!e.hasOwnProperty("index")||!e.hasOwnProperty("field")||!e.hasOwnProperty("value")){return}this.data[e.index][e.field]=e.value;if(e.reinit===false){return}this.initSort();this.initBody(true)};p.prototype.getOptions=function(){return this.options};p.prototype.getSelections=function(){var t=this;return e.grep(this.options.data,function(e){return e[t.header.stateField]===true})};p.prototype.getAllSelections=function(){var t=this;return e.grep(this.options.data,function(e){return e[t.header.stateField]})};p.prototype.checkAll=function(){this.checkAll_(true)};p.prototype.uncheckAll=function(){this.checkAll_(false)};p.prototype.checkInvert=function(){var t=this;var i=t.$selectItem.filter(":enabled");var n=i.filter(":checked");i.each(function(){e(this).prop("checked",!e(this).prop("checked"))});t.updateRows();t.updateSelected();t.trigger("uncheck-some",n);n=t.getSelections();t.trigger("check-some",n)};p.prototype.checkAll_=function(e){var t;if(!e){t=this.getSelections()}this.$selectAll.add(this.$selectAll_).prop("checked",e);this.$selectItem.filter(":enabled").prop("checked",e);this.updateRows();if(e){t=this.getSelections()}this.trigger(e?"check-all":"uncheck-all",t)};p.prototype.check=function(e){this.check_(true,e)};p.prototype.uncheck=function(e){this.check_(false,e)};p.prototype.check_=function(e,t){var n=this.$selectItem.filter(i('[data-index="%s"]',t)).prop("checked",e);this.data[t][this.header.stateField]=e;this.updateSelected();this.trigger(e?"check":"uncheck",this.data[t],n)};p.prototype.checkBy=function(e){this.checkBy_(true,e)};p.prototype.uncheckBy=function(e){this.checkBy_(false,e)};p.prototype.checkBy_=function(t,n){if(!n.hasOwnProperty("field")||!n.hasOwnProperty("values")){return}var s=this,r=[];e.each(this.options.data,function(a,o){if(!o.hasOwnProperty(n.field)){return false}if(e.inArray(o[n.field],n.values)!==-1){var l=s.$selectItem.filter(":enabled").filter(i('[data-index="%s"]',a)).prop("checked",t);o[s.header.stateField]=t;r.push(o);s.trigger(t?"check":"uncheck",o,l)}});this.updateSelected();this.trigger(t?"check-some":"uncheck-some",r)};p.prototype.destroy=function(){this.$el.insertBefore(this.$container);e(this.options.toolbar).insertBefore(this.$el);this.$container.next().remove();this.$container.remove();this.$el.html(this.$el_.html()).css("margin-top","0").attr("class",this.$el_.attr("class")||"")};p.prototype.showLoading=function(){this.$tableLoading.show()};p.prototype.hideLoading=function(){this.$tableLoading.hide()};p.prototype.togglePagination=function(){this.options.pagination=!this.options.pagination;var e=this.$toolbar.find('button[name="paginationSwitch"] i');if(this.options.pagination){e.attr("class",this.options.iconsPrefix+" "+this.options.icons.paginationSwitchDown)}else{e.attr("class",this.options.iconsPrefix+" "+this.options.icons.paginationSwitchUp)}this.updatePagination()};p.prototype.refresh=function(e){if(e&&e.url){this.options.url=e.url}if(e&&e.pageNumber){this.options.pageNumber=e.pageNumber}if(e&&e.pageSize){this.options.pageSize=e.pageSize}this.initServer(e&&e.silent,e&&e.query,e&&e.url);this.trigger("refresh",e)};p.prototype.resetWidth=function(){if(this.options.showHeader&&this.options.height){this.fitHeader()}if(this.options.showFooter){this.fitFooter()}};p.prototype.showColumn=function(e){this.toggleColumn(s(this.columns,e),true,true)};p.prototype.hideColumn=function(e){this.toggleColumn(s(this.columns,e),false,true)};p.prototype.getHiddenColumns=function(){return e.grep(this.columns,function(e){return!e.visible})};p.prototype.getVisibleColumns=function(){return e.grep(this.columns,function(e){return e.visible})};p.prototype.toggleAllColumns=function(t){e.each(this.columns,function(e,i){this.columns[e].visible=t});this.initHeader();this.initSearch();this.initPagination();this.initBody();if(this.options.showColumns){var i=this.$toolbar.find(".keep-open input").prop("disabled",false);if(i.filter(":checked").length<=this.options.minimumCountColumns){i.filter(":checked").prop("disabled",true)}}};p.prototype.showAllColumns=function(){this.toggleAllColumns(true)};p.prototype.hideAllColumns=function(){this.toggleAllColumns(false)};p.prototype.filterBy=function(t){this.filterColumns=e.isEmptyObject(t)?{}:t;this.options.pageNumber=1;this.initSearch();this.updatePagination()};p.prototype.scrollTo=function(e){if(typeof e==="string"){e=e==="bottom"?this.$tableBody[0].scrollHeight:0}if(typeof e==="number"){this.$tableBody.scrollTop(e)}if(typeof e==="undefined"){return this.$tableBody.scrollTop()}};p.prototype.getScrollPosition=function(){return this.scrollTo()};p.prototype.selectPage=function(e){if(e>0&&e<=this.options.totalPages){this.options.pageNumber=e;this.updatePagination()}};p.prototype.prevPage=function(){if(this.options.pageNumber>1){this.options.pageNumber--;this.updatePagination()}};p.prototype.nextPage=function(){if(this.options.pageNumber<this.options.totalPages){this.options.pageNumber++;this.updatePagination()}};p.prototype.toggleView=function(){this.options.cardView=!this.options.cardView;this.initHeader();this.initBody();this.trigger("toggle",this.options.cardView)};p.prototype.refreshOptions=function(t){if(l(this.options,t,true)){return}this.options=e.extend(this.options,t);this.trigger("refresh-options",this.options);this.destroy();this.init()};p.prototype.resetSearch=function(e){var t=this.$toolbar.find(".search input");t.val(e||"");this.onSearch({currentTarget:t})};p.prototype.expandRow_=function(e,t){var n=this.$body.find(i('> tr[data-index="%s"]',t));if(n.next().is("tr.detail-view")===(e?false:true)){n.find("> td > .detail-icon").click()}};p.prototype.expandRow=function(e){this.expandRow_(true,e)};p.prototype.collapseRow=function(e){this.expandRow_(false,e)};p.prototype.expandAllRows=function(t){if(t){var n=this.$body.find(i('> tr[data-index="%s"]',0)),s=this,r=null,a=false,o=-1;if(!n.next().is("tr.detail-view")){n.find("> td > .detail-icon").click();a=true}else if(!n.next().next().is("tr.detail-view")){n.next().find(".detail-icon").click();a=true}if(a){try{o=setInterval(function(){r=s.$body.find("tr.detail-view").last().find(".detail-icon");if(r.length>0){r.click()}else{clearInterval(o)}},1)}catch(e){clearInterval(o)}}}else{var l=this.$body.children();for(var u=0;u<l.length;u++){this.expandRow_(true,e(l[u]).data("index"))}}};p.prototype.collapseAllRows=function(t){if(t){this.expandRow_(false,0)}else{var i=this.$body.children();for(var n=0;n<i.length;n++){this.expandRow_(false,e(i[n]).data("index"))}}};p.prototype.updateFormatText=function(e,t){if(this.options[i("format%s",e)]){if(typeof t==="string"){this.options[i("format%s",e)]=function(){return t}}else if(typeof t==="function"){this.options[i("format%s",e)]=t}}this.initToolbar();this.initPagination();this.initBody()};var m=["getOptions","getSelections","getAllSelections","getData","load","append","prepend","remove","removeAll","insertRow","updateRow","updateCell","updateByUniqueId","removeByUniqueId","getRowByUniqueId","showRow","hideRow","getHiddenRows","mergeCells","checkAll","uncheckAll","checkInvert","check","uncheck","checkBy","uncheckBy","refresh","resetView","resetWidth","destroy","showLoading","hideLoading","showColumn","hideColumn","getHiddenColumns","getVisibleColumns","showAllColumns","hideAllColumns","filterBy","scrollTo","getScrollPosition","selectPage","prevPage","nextPage","togglePagination","toggleView","refreshOptions","resetSearch","expandRow","collapseRow","expandAllRows","collapseAllRows","updateFormatText"];e.fn.bootstrapTable=function(t){var i,n=Array.prototype.slice.call(arguments,1);this.each(function(){var s=e(this),r=s.data("bootstrap.table"),a=e.extend({},p.DEFAULTS,s.data(),typeof t==="object"&&t);if(typeof t==="string"){if(e.inArray(t,m)<0){throw new Error("Unknown method: "+t)}if(!r){return}i=r[t].apply(r,n);if(t==="destroy"){s.removeData("bootstrap.table")}}if(!r){s.data("bootstrap.table",r=new p(this,a))}});return typeof i==="undefined"?this:i};e.fn.bootstrapTable.Constructor=p;e.fn.bootstrapTable.defaults=p.DEFAULTS;e.fn.bootstrapTable.columnDefaults=p.COLUMN_DEFAULTS;e.fn.bootstrapTable.locales=p.LOCALES;e.fn.bootstrapTable.methods=m;e.fn.bootstrapTable.utils={sprintf:i,getFieldIndex:s,compareObjects:l,calculateObjectValue:o,getItemField:c,objectKeys:h,isIEBrowser:d};e(function(){e('[data-toggle="table"]').bootstrapTable()})})(jQuery);!function(e){"use strict";var t={};var i=[{base:"A",letters:"Aâ¶ï¼¡ÃÃÃáº¦áº¤áºªáº¨ÃÄÄáº°áº®áº´áº²È¦Ç ÃÇáº¢ÃÇºÇÈÈáº áº¬áº¶á¸ÄÈºâ±¯"},{base:"AA",letters:"ê²"},{base:"AE",letters:"ÃÇ¼Ç¢"},{base:"AO",letters:"ê´"},{base:"AU",letters:"ê¶"},{base:"AV",letters:"ê¸êº"},{base:"AY",letters:"ê¼"},{base:"B",letters:"Bâ·ï¼¢á¸á¸á¸ÉÆÆ"},{base:"C",letters:"Câ¸ï¼£ÄÄÄÄÃá¸ÆÈ»ê¾"},{base:"D",letters:"Dâ¹ï¼¤á¸Äá¸á¸á¸á¸ÄÆÆÆê¹"},{base:"DZ",letters:"Ç±Ç"},{base:"Dz",letters:"Ç²Ç"},{base:"E",letters:"Eâºï¼¥ÃÃÃá»áº¾á»á»áº¼Äá¸á¸ÄÄÃáººÄÈÈáº¸á»È¨á¸Äá¸á¸ÆÆ"},{base:"F",letters:"Fâ»ï¼¦á¸Æê»"},{base:"G",letters:"Gâ¼ï¼§Ç´Äá¸ ÄÄ Ç¦Ä¢Ç¤Æê ê½ê¾"},{base:"H",letters:"Hâ½ï¼¨Ä¤á¸¢á¸¦Èá¸¤á¸¨á¸ªÄ¦â±§â±µê"},{base:"I",letters:"Iâ¾ï¼©ÃÃÃÄ¨ÄªÄ¬Ä°Ãá¸®á»ÇÈÈá»Ä®á¸¬Æ"},{base:"J",letters:"Jâ¿ï¼ªÄ´É"},{base:"K",letters:"Kâï¼«á¸°Ç¨á¸²Ä¶á¸´Æâ±©êêêê¢"},{base:"L",letters:"Lâï¼¬Ä¿Ä¹Ä½á¸¶á¸¸Ä»á¸¼á¸ºÅÈ½â±¢â± êêê"},{base:"LJ",letters:"Ç"},{base:"Lj",letters:"Ç"},{base:"M",letters:"Mâï¼­á¸¾á¹á¹â±®Æ"},{base:"N",letters:"Nâï¼®Ç¸ÅÃá¹Åá¹Åá¹á¹È Æêê¤"},{base:"NJ",letters:"Ç"},{base:"Nj",letters:"Ç"},{base:"O",letters:"Oâï¼¯ÃÃÃá»á»á»á»Ãá¹È¬á¹Åá¹á¹ÅÈ®È°ÃÈªá»ÅÇÈÈÆ á»á»á» á»á»¢á»á»ÇªÇ¬ÃÇ¾ÆÆêê"},{base:"OI",letters:"Æ¢"},{base:"OO",letters:"ê"},{base:"OU",letters:"È¢"},{base:"OE",letters:"ÂÅ"},{base:"oe",letters:"ÂÅ"},{base:"P",letters:"Pâï¼°á¹á¹Æ¤â±£êêê"},{base:"Q",letters:"Qâï¼±êêÉ"},{base:"R",letters:"Râï¼²Åá¹ÅÈÈá¹á¹Åá¹Éâ±¤êê¦ê"},{base:"S",letters:"Sâï¼³áºÅá¹¤Åá¹ Å á¹¦á¹¢á¹¨ÈÅâ±¾ê¨ê"},{base:"T",letters:"Tâï¼´á¹ªÅ¤á¹¬ÈÅ¢á¹°á¹®Å¦Æ¬Æ®È¾ê"},{base:"TZ",letters:"ê¨"},{base:"U",letters:"Uâï¼µÃÃÃÅ¨á¹¸Åªá¹ºÅ¬ÃÇÇÇÇá»¦Å®Å°ÇÈÈÆ¯á»ªá»¨á»®á»¬á»°á»¤á¹²Å²á¹¶á¹´É"},{base:"V",letters:"Vâï¼¶á¹¼á¹¾Æ²êÉ"},{base:"VY",letters:"ê "},{base:"W",letters:"Wâï¼·áºáºÅ´áºáºáºâ±²"},{base:"X",letters:"Xâï¼¸áºáº"},{base:"Y",letters:"Yâï¼¹á»²ÃÅ¶á»¸È²áºÅ¸á»¶á»´Æ³Éá»¾"},{base:"Z",letters:"Zâï¼ºÅ¹áºÅ»Å½áºáºÆµÈ¤â±¿â±«ê¢"},{base:"a",letters:"aâï½áºÃ Ã¡Ã¢áº§áº¥áº«áº©Ã£ÄÄáº±áº¯áºµáº³È§Ç¡Ã¤Çáº£Ã¥Ç»ÇÈÈáº¡áº­áº·á¸Äâ±¥É"},{base:"aa",letters:"ê³"},{base:"ae",letters:"Ã¦Ç½Ç£"},{base:"ao",letters:"êµ"},{base:"au",letters:"ê·"},{base:"av",letters:"ê¹ê»"},{base:"ay",letters:"ê½"},{base:"b",letters:"bâï½á¸á¸á¸ÆÆÉ"},{base:"c",letters:"câï½ÄÄÄÄÃ§á¸ÆÈ¼ê¿â"},{base:"d",letters:"dâï½á¸Äá¸á¸á¸á¸ÄÆÉÉêº"},{base:"dz",letters:"Ç³Ç"},{base:"e",letters:"eâï½Ã¨Ã©Ãªá»áº¿á»á»áº½Äá¸á¸ÄÄÃ«áº»ÄÈÈáº¹á»È©á¸Äá¸á¸ÉÉÇ"},{base:"f",letters:"fâï½á¸Æê¼"},{base:"g",letters:"gâï½ÇµÄá¸¡ÄÄ¡Ç§Ä£Ç¥É ê¡áµ¹ê¿"},{base:"h",letters:"hâï½Ä¥á¸£á¸§Èá¸¥á¸©á¸«áºÄ§â±¨â±¶É¥"},{base:"hv",letters:"Æ"},{base:"i",letters:"iâï½Ã¬Ã­Ã®Ä©Ä«Ä­Ã¯á¸¯á»ÇÈÈá»Ä¯á¸­É¨Ä±"},{base:"j",letters:"jâï½ÄµÇ°É"},{base:"k",letters:"kâï½á¸±Ç©á¸³Ä·á¸µÆâ±ªêêêê£"},{base:"l",letters:"lâï½ÅÄºÄ¾á¸·á¸¹Ä¼á¸½á¸»Å¿ÅÆÉ«â±¡êêê"},{base:"lj",letters:"Ç"},{base:"m",letters:"mâï½á¸¿á¹á¹É±É¯"},{base:"n",letters:"nâï½Ç¹ÅÃ±á¹Åá¹Åá¹á¹ÆÉ²Åêê¥"},{base:"nj",letters:"Ç"},{base:"o",letters:"oâï½Ã²Ã³Ã´á»á»á»á»Ãµá¹È­á¹Åá¹á¹ÅÈ¯È±Ã¶È«á»ÅÇÈÈÆ¡á»á»á»¡á»á»£á»á»Ç«Ç­Ã¸Ç¿ÉêêÉµ"},{base:"oi",letters:"Æ£"},{base:"ou",letters:"È£"},{base:"oo",letters:"ê"},{base:"p",letters:"pâï½á¹á¹Æ¥áµ½êêê"},{base:"q",letters:"qâ ï½Éêê"},{base:"r",letters:"râ¡ï½Åá¹ÅÈÈá¹á¹Åá¹ÉÉ½êê§ê"},{base:"s",letters:"sâ¢ï½ÃÅá¹¥Åá¹¡Å¡á¹§á¹£á¹©ÈÅÈ¿ê©êáº"},{base:"t",letters:"tâ£ï½á¹«áºÅ¥á¹­ÈÅ£á¹±á¹¯Å§Æ­Êâ±¦ê"},{base:"tz",letters:"ê©"},{base:"u",letters:"uâ¤ï½Ã¹ÃºÃ»Å©á¹¹Å«á¹»Å­Ã¼ÇÇÇÇá»§Å¯Å±ÇÈÈÆ°á»«á»©á»¯á»­á»±á»¥á¹³Å³á¹·á¹µÊ"},{base:"v",letters:"vâ¥ï½á¹½á¹¿ÊêÊ"},{base:"vy",letters:"ê¡"},{base:"w",letters:"wâ¦ï½áºáºÅµáºáºáºáºâ±³"},{base:"x",letters:"xâ§ï½áºáº"},{base:"y",letters:"yâ¨ï½á»³Ã½Å·á»¹È³áºÃ¿á»·áºá»µÆ´Éá»¿"},{base:"z",letters:"zâ©ï½ÅºáºÅ¼Å¾áºáºÆ¶È¥Éâ±¬ê£"}];var n=function(){for(var e=0;e<i.length;e++){var n=i[e].letters;for(var s=0;s<n.length;s++){t[n[s]]=i[e].base}}};var s=function(e){return e.replace(/[^\u0000-\u007E]/g,function(e){return t[e]||e})};e.extend(e.fn.bootstrapTable.defaults,{searchAccentNeutralise:false});var r=e.fn.bootstrapTable.Constructor,a=r.prototype.init,o=r.prototype.initSearch;r.prototype.init=function(){if(this.options.searchAccentNeutralise){n()}a.apply(this,Array.prototype.slice.apply(arguments))};r.prototype.initSearch=function(){var t=this;if(this.options.sidePagination!=="server"){var i=this.searchText&&this.searchText.toLowerCase();var n=e.isEmptyObject(this.filterColumns)?null:this.filterColumns;this.data=n?e.grep(this.options.data,function(e,t){for(var i in n){if(e[i]!==n[i]){return false}}return true}):this.options.data;this.data=i?e.grep(this.data,function(n,r){for(var a in n){a=e.isNumeric(a)?parseInt(a,10):a;var o=n[a],l=t.columns[e.fn.bootstrapTable.utils.getFieldIndex(t.columns,a)],u=e.inArray(a,t.header.fields);if(l&&l.searchFormatter){o=e.fn.bootstrapTable.utils.calculateObjectValue(l,t.header.formatters[u],[o,n,r],o)}var f=e.inArray(a,t.header.fields);if(f!==-1&&t.header.searchables[f]&&(typeof o==="string"||typeof o==="number")){if(t.options.searchAccentNeutralise){o=s(o);i=s(i)}if(t.options.strictSearch){if((o+"").toLowerCase()===i){return true}}else{if((o+"").toLowerCase().indexOf(i)!==-1){return true}}}}return false}):this.data}}}(jQuery);(function(e){"use strict";var t={sortOrder:"bs.table.sortOrder",sortName:"bs.table.sortName",pageNumber:"bs.table.pageNumber",pageList:"bs.table.pageList",columns:"bs.table.columns",searchText:"bs.table.searchText",filterControl:"bs.table.filterControl"};var i=function(e){var t=e.$header;if(e.options.height){t=e.$tableHeader}return t};var n=function(e){var t="select, input";if(e.options.height){t="table select, table input"}return t};var s=function(){return!!navigator.cookieEnabled};var r=function(e,t){var i=-1;for(var n=0;n<t.length;n++){if(e.toLowerCase()===t[n].toLowerCase()){i=n;break}}return i};var a=function(e,t,i){if(!e.options.cookie||!s()||e.options.cookieIdTable===""){return}if(r(t,e.options.cookiesEnabled)===-1){return}t=e.options.cookieIdTable+"."+t;switch(e.options.cookieStorage){case"cookieStorage":document.cookie=[t,"=",i,"; expires="+e.options.cookieExpire,e.options.cookiePath?"; path="+e.options.cookiePath:"",e.options.cookieDomain?"; domain="+e.options.cookieDomain:"",e.options.cookieSecure?"; secure":""].join("");break;case"localStorage":localStorage.setItem(t,i);break;case"sessionStorage":sessionStorage.setItem(t,i);break;default:return false}return true};var o=function(e,t,i){if(!i){return null}if(r(i,e.options.cookiesEnabled)===-1){return null}i=t+"."+i;switch(e.options.cookieStorage){case"cookieStorage":return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*"+encodeURIComponent(i).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=\\s*([^;]*).*$)|^.*$"),"$1"))||null;case"localStorage":return localStorage.getItem(i);case"sessionStorage":return sessionStorage.getItem(i);default:return null}};var l=function(e,t,i){i=t+"."+i;switch(e.options.cookieStorage){case"cookieStorage":document.cookie=[encodeURIComponent(i),"=","; expires=Thu, 01 Jan 1970 00:00:00 GMT",e.options.cookiePath?"; path="+e.options.cookiePath:"",e.options.cookieDomain?"; domain="+e.options.cookieDomain:""].join("");break;case"localStorage":localStorage.removeItem(i);break;case"sessionStorage":sessionStorage.removeItem(i);break}return true};var u=function(e){var t=e.replace(/[0-9]*/,"");e=e.replace(/[A-Za-z]{1,2}}/,"");switch(t.toLowerCase()){case"s":e=+e;break;case"mi":e=e*60;break;case"h":e=e*60*60;break;case"d":e=e*24*60*60;break;case"m":e=e*30*24*60*60;break;case"y":e=e*365*24*60*60;break;default:e=undefined;break}return e===undefined?"":"; max-age="+e};var f=function(s){setTimeout(function(){var r=JSON.parse(o(s,s.options.cookieIdTable,t.filterControl));if(!s.options.filterControlValuesLoaded&&r){s.options.filterControlValuesLoaded=true;var a={},l=i(s),u=n(s),f=function(t,i){e(i).each(function(i,n){e(t).val(n.text);a[n.field]=n.text})};l.find(u).each(function(){var t=e(this).closest("[data-field]").data("field"),i=e.grep(r,function(e){return e.field===t});f(this,i)});s.initColumnSearch(a)}},250)};e.extend(e.fn.bootstrapTable.defaults,{cookie:false,cookieExpire:"2h",cookiePath:null,cookieDomain:null,cookieSecure:null,cookieIdTable:"",cookiesEnabled:["bs.table.sortOrder","bs.table.sortName","bs.table.pageNumber","bs.table.pageList","bs.table.columns","bs.table.searchText","bs.table.filterControl"],cookieStorage:"cookieStorage",filterControls:[],filterControlValuesLoaded:false});e.fn.bootstrapTable.methods.push("getCookies");e.fn.bootstrapTable.methods.push("deleteCookie");e.extend(e.fn.bootstrapTable.utils,{setCookie:a,getCookie:o});var c=e.fn.bootstrapTable.Constructor,d=c.prototype.init,h=c.prototype.initTable,p=c.prototype.initServer,m=c.prototype.onSort,g=c.prototype.onPageNumber,v=c.prototype.onPageListChange,y=c.prototype.onPageFirst,b=c.prototype.onPagePre,w=c.prototype.onPageNext,x=c.prototype.onPageLast,C=c.prototype.toggleColumn,T=c.prototype.selectPage,_=c.prototype.onSearch;c.prototype.init=function(){var e=0;this.options.filterControls=[];this.options.filterControlValuesLoaded=false;this.options.cookiesEnabled=typeof this.options.cookiesEnabled==="string"?this.options.cookiesEnabled.replace("[","").replace("]","").replace(/ /g,"").toLowerCase().split(","):this.options.cookiesEnabled;if(this.options.filterControl){var i=this;this.$el.on("column-search.bs.table",function(e,n,s){var r=true;for(var o=0;o<i.options.filterControls.length;o++){if(i.options.filterControls[o].field===n){i.options.filterControls[o].text=s;r=false;break}}if(r){i.options.filterControls.push({field:n,text:s})}a(i,t.filterControl,JSON.stringify(i.options.filterControls))}).on("post-body.bs.table",f(i))}d.apply(this,Array.prototype.slice.apply(arguments))};c.prototype.initServer=function(){var i=this,n=[],s=function(e){return e.filterControl&&e.filterControl==="select"},r=function(e){return e.filterData&&e.filterData!=="column"},a=function(){var e=JSON.parse(o(i,i.options.cookieIdTable,t.filterControl));return i.options.cookie&&e};n=e.grep(i.columns,function(e){return s(e)&&!r(e)});c.prototype.initServer=p;if(this.options.filterControl&&a()&&n.length===0){return}p.apply(this,Array.prototype.slice.apply(arguments))};c.prototype.initTable=function(){h.apply(this,Array.prototype.slice.apply(arguments));this.initCookie()};c.prototype.initCookie=function(){if(!this.options.cookie){return}if(this.options.cookieIdTable===""||this.options.cookieExpire===""||!s()){throw new Error("Configuration error. Please review the cookieIdTable, cookieExpire properties, if those properties are ok, then this browser does not support the cookies")}var i=o(this,this.options.cookieIdTable,t.sortOrder),n=o(this,this.options.cookieIdTable,t.sortName),r=o(this,this.options.cookieIdTable,t.pageNumber),a=o(this,this.options.cookieIdTable,t.pageList),l=JSON.parse(o(this,this.options.cookieIdTable,t.columns)),u=o(this,this.options.cookieIdTable,t.searchText);this.options.sortOrder=i?i:this.options.sortOrder;this.options.sortName=n?n:this.options.sortName;this.options.pageNumber=r?+r:this.options.pageNumber;this.options.pageSize=a?a===this.options.formatAllRows()?a:+a:this.options.pageSize;this.options.searchText=u?u:"";if(l){e.each(this.columns,function(t,i){i.visible=e.inArray(i.field,l)!==-1})}};c.prototype.onSort=function(){m.apply(this,Array.prototype.slice.apply(arguments));a(this,t.sortOrder,this.options.sortOrder);a(this,t.sortName,this.options.sortName)};c.prototype.onPageNumber=function(){g.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,this.options.pageNumber)};c.prototype.onPageListChange=function(){v.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageList,this.options.pageSize)};c.prototype.onPageFirst=function(){y.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,this.options.pageNumber)};c.prototype.onPagePre=function(){b.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,this.options.pageNumber)};c.prototype.onPageNext=function(){w.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,this.options.pageNumber)};c.prototype.onPageLast=function(){x.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,this.options.pageNumber)};c.prototype.toggleColumn=function(){C.apply(this,Array.prototype.slice.apply(arguments));var i=[];e.each(this.columns,function(e,t){if(t.visible){i.push(t.field)}});a(this,t.columns,JSON.stringify(i))};c.prototype.selectPage=function(e){T.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,e)};c.prototype.onSearch=function(){var i=Array.prototype.slice.apply(arguments);_.apply(this,i);if(e(i[0].currentTarget).parent().hasClass("search")){a(this,t.searchText,this.searchText)}};c.prototype.getCookies=function(){var i=this;var n={};e.each(t,function(e,t){n[e]=o(i,i.options.cookieIdTable,t);if(e==="columns"){n[e]=JSON.parse(n[e])}});return n};c.prototype.deleteCookie=function(e){if(e===""||!s()){return}l(this,this.options.cookieIdTable,t[e])}})(jQuery);!function(e){"use strict";var t=e.fn.bootstrapTable.utils.calculateObjectValue,i=e.fn.bootstrapTable.utils.sprintf;var n=function(t){var i=document.createElement("textarea");e(i).html(t);document.body.appendChild(i);i.select();try{document.execCommand("copy")}catch(e){console.log("Oops, unable to copy")}e(i).remove()};e.extend(e.fn.bootstrapTable.defaults,{copyBtn:false,copyWHiddenBtn:false,copyDelemeter:", "});e.fn.bootstrapTable.methods.push("copyColumnsToClipboard","copyColumnsToClipboardWithHidden");var s=e.fn.bootstrapTable.Constructor,r=s.prototype.initToolbar;s.prototype.initToolbar=function(){r.apply(this,Array.prototype.slice.apply(arguments));var e=this,t=this.$toolbar.find(">.btn-group");if(this.options.clickToSelect||this.options.singleSelect){if(this.options.copyBtn){var i="<button class='btn btn-default' id='copyBtn'><span class='glyphicon glyphicon-copy icon-pencil'></span></button>";t.append(i);t.find("#copyBtn").click(function(){e.copyColumnsToClipboard()})}if(this.options.copyWHiddenBtn){var n="<button class='btn btn-default' id='copyWHiddenBtn'><span class='badge'><span class='glyphicon glyphicon-copy icon-pencil'></span></span></button>";t.append(n);t.find("#copyWHiddenBtn").click(function(){e.copyColumnsToClipboardWithHidden()})}}};s.prototype.copyColumnsToClipboard=function(){var i=this,s="",r=this.options.copyDelemeter;e.each(i.getSelections(),function(n,a){e.each(i.options.columns[0],function(e,o){if(o.field!=="state"&&o.field!=="RowNumber"&&o.visible){if(a[o.field]!==null){s+=t(o,i.header.formatters[e],[a[o.field],a,n],a[o.field])}s+=r}});s+="\r\n"});n(s)};s.prototype.copyColumnsToClipboardWithHidden=function(){var i=this,s="",r=this.options.copyDelemeter;e.each(i.getSelections(),function(n,a){e.each(i.options.columns[0],function(e,o){if(o.field!="state"&&o.field!=="RowNumber"){if(a[o.field]!==null){s+=t(o,i.header.formatters[e],[a[o.field],a,n],a[o.field])}s+=r}});s+="\r\n"});n(s)}}(jQuery);(function(e){"use strict";e.extend(e.fn.bootstrapTable.defaults,{editable:true,onEditableInit:function(){return false},onEditableSave:function(e,t,i,n){return false},onEditableShown:function(e,t,i,n){return false},onEditableHidden:function(e,t,i,n){return false}});e.extend(e.fn.bootstrapTable.Constructor.EVENTS,{"editable-init.bs.table":"onEditableInit","editable-save.bs.table":"onEditableSave","editable-shown.bs.table":"onEditableShown","editable-hidden.bs.table":"onEditableHidden"});var t=e.fn.bootstrapTable.Constructor,i=t.prototype.initTable,n=t.prototype.initBody;t.prototype.initTable=function(){var t=this;i.apply(this,Array.prototype.slice.apply(arguments));if(!this.options.editable){return}e.each(this.columns,function(i,n){if(!n.editable){return}var s={},r=[],a="editable-";var o=function(e,t){var i=e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()});if(i.slice(0,a.length)==a){var n=i.replace(a,"data-");s[n]=t}};e.each(t.options,o);n.formatter=n.formatter||function(e,t,i){return e};n._formatter=n._formatter?n._formatter:n.formatter;n.formatter=function(i,a,l){var u=n._formatter?n._formatter(i,a,l):i;e.each(n,o);e.each(s,function(e,t){r.push(" "+e+'="'+t+'"')});var f=false;if(n.editable.hasOwnProperty("noeditFormatter")){f=n.editable.noeditFormatter(i,a,l)}if(f===false){return['<a href="javascript:void(0)"',' data-name="'+n.field+'"',' data-pk="'+a[t.options.idField]+'"',' data-value="'+u+'"',r.join(""),">"+"</a>"].join("")}else{return f}}})};t.prototype.initBody=function(){var t=this;n.apply(this,Array.prototype.slice.apply(arguments));if(!this.options.editable){return}e.each(this.columns,function(i,n){if(!n.editable){return}t.$body.find('a[data-name="'+n.field+'"]').editable(n.editable).off("save").on("save",function(i,s){var r=t.getData(),a=e(this).parents("tr[data-index]").data("index"),o=r[a],l=o[n.field];e(this).data("value",s.submitValue);o[n.field]=s.submitValue;t.trigger("editable-save",n.field,o,l,e(this));t.resetFooter()});t.$body.find('a[data-name="'+n.field+'"]').editable(n.editable).off("shown").on("shown",function(i,s){var r=t.getData(),a=e(this).parents("tr[data-index]").data("index"),o=r[a];t.trigger("editable-shown",n.field,o,e(this),s)});t.$body.find('a[data-name="'+n.field+'"]').editable(n.editable).off("hidden").on("hidden",function(i,s){var r=t.getData(),a=e(this).parents("tr[data-index]").data("index"),o=r[a];t.trigger("editable-hidden",n.field,o,e(this),s)})});this.trigger("editable-init")}})(jQuery);(function(e){"use strict";var t=e.fn.bootstrapTable.utils.sprintf;var i={json:"JSON",xml:"XML",png:"PNG",csv:"CSV",txt:"TXT",sql:"SQL",doc:"MS-Word",excel:"MS-Excel",xlsx:"MS-Excel (OpenXML)",powerpoint:"MS-Powerpoint",pdf:"PDF"};e.extend(e.fn.bootstrapTable.defaults,{showExport:false,exportDataType:"basic",exportTypes:["json","xml","csv","txt","sql","excel"],exportOptions:{}});e.extend(e.fn.bootstrapTable.defaults.icons,{export:"glyphicon-export icon-share"});e.extend(e.fn.bootstrapTable.locales,{formatExport:function(){return"Export data"}});e.extend(e.fn.bootstrapTable.defaults,e.fn.bootstrapTable.locales);var n=e.fn.bootstrapTable.Constructor,s=n.prototype.initToolbar;n.prototype.initToolbar=function(){this.showToolbar=this.options.showExport;s.apply(this,Array.prototype.slice.apply(arguments));if(this.options.showExport){var n=this,r=this.$toolbar.find(">.btn-group"),a=r.find("div.export");if(!a.length){a=e(['<div class="export btn-group">','<button class="btn'+t(" btn-%s",this.options.buttonsClass)+t(" btn-%s",this.options.iconSize)+' dropdown-toggle" aria-label="export type" '+'title="'+this.options.formatExport()+'" '+'data-toggle="dropdown" type="button">',t('<i class="%s %s"></i> ',this.options.iconsPrefix,this.options.icons.export),'<span class="caret"></span>',"</button>",'<ul class="dropdown-menu" role="menu">',"</ul>","</div>"].join("")).appendTo(r);var o=a.find(".dropdown-menu"),l=this.options.exportTypes;if(typeof this.options.exportTypes==="string"){var u=this.options.exportTypes.slice(1,-1).replace(/ /g,"").split(",");l=[];e.each(u,function(e,t){l.push(t.slice(1,-1))})}e.each(l,function(e,t){if(i.hasOwnProperty(t)){o.append(['<li role="menuitem" data-type="'+t+'">','<a href="javascript:void(0)">',i[t],"</a>","</li>"].join(""))}});o.find("li").click(function(){var t=e(this).data("type"),i=function(){n.$el.tableExport(e.extend({},n.options.exportOptions,{type:t,escape:false}))};if(n.options.exportDataType==="all"&&n.options.pagination){n.$el.one(n.options.sidePagination==="server"?"post-body.bs.table":"page-change.bs.table",function(){i();n.togglePagination()});n.togglePagination()}else if(n.options.exportDataType==="selected"){var s=n.getData(),r=n.getAllSelections();if(n.options.sidePagination==="server"){s={total:n.options.totalRows};s[n.options.dataField]=n.getData();r={total:n.options.totalRows};r[n.options.dataField]=n.getAllSelections()}n.load(r);i();n.load(s)}else{i()}})}}}})(jQuery);(function(e){"use strict";var t=function(t,i){var n={};function s(t,r){if(Object(t)!==t){n[r]=t}else if(e.isArray(t)){for(var a=0,o=t.length;a<o;a++){s(t[a],r?r+i.options.flatSeparator+a:""+a);if(o==0){n[r]=[]}}}else{var l=true;for(var u in t){l=false;s(t[u],r?r+i.options.flatSeparator+u:u)}if(l){n[r]={}}}}s(t,"");return n};var i=function(i,n){var s=[];e.each(!e.isArray(i)?[i]:i,function(e,i){s.push(t(i,n))});return s};e.extend(e.fn.bootstrapTable.defaults,{flat:false,flatSeparator:"."});var n=e.fn.bootstrapTable.Constructor,s=n.prototype.initData;n.prototype.initData=function(e,t){if(this.options.flat){e=i(e?e:this.options.data,this)}s.apply(this,[e,t])}})(jQuery);!function(e){"use strict";e.extend(e.fn.bootstrapTable.defaults,{multipleSearch:false,delimeter:" "});var t=e.fn.bootstrapTable.Constructor,i=t.prototype.initSearch;t.prototype.initSearch=function(){if(this.options.multipleSearch){if(this.searchText===undefined){return}var t=this.searchText.split(this.options.delimeter),n=this,s=e.isEmptyObject(this.filterColumns)?null:this.filterColumns,r=[];if(t.length===1){i.apply(this,Array.prototype.slice.apply(arguments))}else{for(var a=0;a<t.length;a++){var o=t[a].trim();r=o?e.grep(r.length===0?this.options.data:r,function(t,i){for(var s in t){s=e.isNumeric(s)?parseInt(s,10):s;var r=t[s],a=n.columns[e.fn.bootstrapTable.utils.getFieldIndex(n.columns,s)],l=e.inArray(s,n.header.fields);if(a&&a.searchFormatter){r=e.fn.bootstrapTable.utils.calculateObjectValue(a,n.header.formatters[l],[r,t,i],r)}var u=e.inArray(s,n.header.fields);if(u!==-1&&n.header.searchables[u]&&(typeof r==="string"||typeof r==="number")){if(n.options.strictSearch){if((r+"").toLowerCase()===o){return true}}else{if((r+"").toLowerCase().indexOf(o)!==-1){return true}}}}return false}):this.data}this.data=r}}else{i.apply(this,Array.prototype.slice.apply(arguments))}}}(jQuery);(function(e){"use strict";var t=false;var i=function(t){var i=t.$sortModal.selector,n=i.substr(1);if(!e(n).hasClass("modal")){var s='  <div class="modal fade" id="'+n+'" tabindex="-1" role="dialog" aria-labelledby="'+n+'Label" aria-hidden="true">';s+='         <div class="modal-dialog">';s+='             <div class="modal-content">';s+='                 <div class="modal-header">';s+='                     <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>';s+='                     <h4 class="modal-title" id="'+n+'Label">'+t.options.formatMultipleSort()+"</h4>";s+="                 </div>";s+='                 <div class="modal-body">';s+='                     <div class="bootstrap-table">';s+='                         <div class="fixed-table-toolbar">';s+='                             <div class="bars">';s+='                                 <div id="toolbar">';s+='                                     <button id="add" type="button" class="btn btn-default"><i class="'+t.options.iconsPrefix+" "+t.options.icons.plus+'"></i> '+t.options.formatAddLevel()+"</button>";s+='                                     <button id="delete" type="button" class="btn btn-default" disabled><i class="'+t.options.iconsPrefix+" "+t.options.icons.minus+'"></i> '+t.options.formatDeleteLevel()+"</button>";s+="                                 </div>";s+="                             </div>";s+="                         </div>";s+='                         <div class="fixed-table-container">';s+='                             <table id="multi-sort" class="table">';s+="                                 <thead>";s+="                                     <tr>";s+="                                         <th></th>";s+='                                         <th><div class="th-inner">'+t.options.formatColumn()+"</div></th>";s+='                                         <th><div class="th-inner">'+t.options.formatOrder()+"</div></th>";s+="                                     </tr>";s+="                                 </thead>";s+="                                 <tbody></tbody>";s+="                             </table>";s+="                         </div>";s+="                     </div>";s+="                 </div>";s+='                 <div class="modal-footer">';s+='                     <button type="button" class="btn btn-default" data-dismiss="modal">'+t.options.formatCancel()+"</button>";s+='                     <button type="button" class="btn btn-primary">'+t.options.formatSort()+"</button>";s+="                 </div>";s+="             </div>";s+="         </div>";s+="     </div>";e("body").append(e(s));t.$sortModal=e(i);var r=t.$sortModal.find("tbody > tr");t.$sortModal.off("click","#add").on("click","#add",function(){var e=t.$sortModal.find(".multi-sort-name:first option").length,i=t.$sortModal.find("tbody tr").length;if(i<e){i++;t.addLevel();t.setButtonStates()}});t.$sortModal.off("click","#delete").on("click","#delete",function(){var e=t.$sortModal.find(".multi-sort-name:first option").length,i=t.$sortModal.find("tbody tr").length;if(i>1&&i<=e){i--;t.$sortModal.find("tbody tr:last").remove();t.setButtonStates()}});t.$sortModal.off("click",".btn-primary").on("click",".btn-primary",function(){var i=t.$sortModal.find("tbody > tr"),n=t.$sortModal.find("div.alert"),s=[],r=[];t.options.sortPriority=e.map(i,function(t){var i=e(t),n=i.find(".multi-sort-name").val(),r=i.find(".multi-sort-order").val();s.push(n);return{sortName:n,sortOrder:r}});var a=s.sort();for(var o=0;o<s.length-1;o++){if(a[o+1]==a[o]){r.push(a[o])}}if(r.length>0){if(n.length===0){n='<div class="alert alert-danger" role="alert"><strong>'+t.options.formatDuplicateAlertTitle()+"</strong> "+t.options.formatDuplicateAlertDescription()+"</div>";e(n).insertBefore(t.$sortModal.find(".bars"))}}else{if(n.length===1){e(n).remove()}t.$sortModal.modal("hide");t.options.sortName="";if(t.options.sidePagination==="server"){t.options.queryParams=function(e){e.multiSort=t.options.sortPriority;return e};t.initServer(t.options.silentSort);return}t.onMultipleSort()}});if(t.options.sortPriority===null||t.options.sortPriority.length===0){if(t.options.sortName){t.options.sortPriority=[{sortName:t.options.sortName,sortOrder:t.options.sortOrder}]}}if(t.options.sortPriority!==null&&t.options.sortPriority.length>0){if(r.length<t.options.sortPriority.length&&typeof t.options.sortPriority==="object"){for(var a=0;a<t.options.sortPriority.length;a++){t.addLevel(a,t.options.sortPriority[a])}}}else{t.addLevel(0)}t.setButtonStates()}};e.extend(e.fn.bootstrapTable.defaults,{showMultiSort:false,sortPriority:null,onMultipleSort:function(){return false}});e.extend(e.fn.bootstrapTable.defaults.icons,{sort:"glyphicon-sort",plus:"glyphicon-plus",minus:"glyphicon-minus"});e.extend(e.fn.bootstrapTable.Constructor.EVENTS,{"multiple-sort.bs.table":"onMultipleSort"});e.extend(e.fn.bootstrapTable.locales,{formatMultipleSort:function(){return"Multiple Sort"},formatAddLevel:function(){return"Add Level"},formatDeleteLevel:function(){return"Delete Level"},formatColumn:function(){return"Column"},formatOrder:function(){return"Order"},formatSortBy:function(){return"Sort by"},formatThenBy:function(){return"Then by"},formatSort:function(){return"Sort"},formatCancel:function(){return"Cancel"},formatDuplicateAlertTitle:function(){return"Duplicate(s) detected!"},formatDuplicateAlertDescription:function(){return"Please remove or change any duplicate column."},formatSortOrders:function(){return{asc:"Ascending",desc:"Descending"}}});e.extend(e.fn.bootstrapTable.defaults,e.fn.bootstrapTable.locales);var n=e.fn.bootstrapTable.Constructor,s=n.prototype.initToolbar;n.prototype.initToolbar=function(){this.showToolbar=true;var n=this,r="#sortModal_"+this.$el.attr("id");this.$sortModal=e(r);s.apply(this,Array.prototype.slice.apply(arguments));if(this.options.showMultiSort){var a=this.$toolbar.find(">.btn-group").first(),o=this.$toolbar.find("div.multi-sort");if(!o.length){o='  <button class="multi-sort btn btn-default'+(this.options.iconSize===undefined?"":" btn-"+this.options.iconSize)+'" type="button" data-toggle="modal" data-target="'+r+'" title="'+this.options.formatMultipleSort()+'">';o+='     <i class="'+this.options.iconsPrefix+" "+this.options.icons.sort+'"></i>';o+="</button>";a.append(o);i(n)}this.$el.on("sort.bs.table",function(){t=true});this.$el.on("multiple-sort.bs.table",function(){t=false});this.$el.on("load-success.bs.table",function(){if(!t&&n.options.sortPriority!==null&&typeof n.options.sortPriority==="object"&&n.options.sidePagination!=="server"){n.onMultipleSort()}});this.$el.on("column-switch.bs.table",function(e,t){for(var s=0;s<n.options.sortPriority.length;s++){if(n.options.sortPriority[s].sortName===t){n.options.sortPriority.splice(s,1)}}n.assignSortableArrows();n.$sortModal.remove();i(n)});this.$el.on("reset-view.bs.table",function(){if(!t&&n.options.sortPriority!==null&&typeof n.options.sortPriority==="object"){n.assignSortableArrows()}})}};n.prototype.onMultipleSort=function(){var t=this;var i=function(e,t){return e>t?1:e<t?-1:0};var n=function(n,s){var r=[],a=[];for(var o=0;o<t.options.sortPriority.length;o++){var l=t.options.sortPriority[o].sortOrder==="desc"?-1:1,u=n[t.options.sortPriority[o].sortName],f=s[t.options.sortPriority[o].sortName];if(u===undefined||u===null){u=""}if(f===undefined||f===null){f=""}if(e.isNumeric(u)&&e.isNumeric(f)){u=parseFloat(u);f=parseFloat(f)}if(typeof u!=="string"){u=u.toString()}r.push(l*i(u,f));a.push(l*i(f,u))}return i(r,a)};this.data.sort(function(e,t){return n(e,t)});this.initBody();this.assignSortableArrows();this.trigger("multiple-sort")};n.prototype.addLevel=function(t,i){var n=t===0?this.options.formatSortBy():this.options.formatThenBy();this.$sortModal.find("tbody").append(e("<tr>").append(e("<td>").text(n)).append(e("<td>").append(e('<select class="form-control multi-sort-name">'))).append(e("<td>").append(e('<select class="form-control multi-sort-order">'))));var s=this.$sortModal.find(".multi-sort-name").last(),r=this.$sortModal.find(".multi-sort-order").last();e.each(this.columns,function(e,t){if(t.sortable===false||t.visible===false){return true}s.append('<option value="'+t.field+'">'+t.title+"</option>")});e.each(this.options.formatSortOrders(),function(e,t){r.append('<option value="'+e+'">'+t+"</option>")});if(i!==undefined){s.find('option[value="'+i.sortName+'"]').attr("selected",true);r.find('option[value="'+i.sortOrder+'"]').attr("selected",true)}};n.prototype.assignSortableArrows=function(){var t=this,i=t.$header.find("th");for(var n=0;n<i.length;n++){for(var s=0;s<t.options.sortPriority.length;s++){if(e(i[n]).data("field")===t.options.sortPriority[s].sortName){e(i[n]).find(".sortable").removeClass("desc asc").addClass(t.options.sortPriority[s].sortOrder)}}}};n.prototype.setButtonStates=function(){var e=this.$sortModal.find(".multi-sort-name:first option").length,t=this.$sortModal.find("tbody tr").length;if(t==e){this.$sortModal.find("#add").attr("disabled","disabled")}if(t>1){this.$sortModal.find("#delete").removeAttr("disabled")}if(t<e){this.$sortModal.find("#add").removeAttr("disabled")}if(t==1){this.$sortModal.find("#delete").attr("disabled","disabled")}}})(jQuery);function alphanum(e,t){function i(e){var t=[],i=0,n=-1,s=0,r,a;while(r=(a=e.charAt(i++)).charCodeAt(0)){var o=r===46||r>=48&&r<=57;if(o!==s){t[++n]="";s=o}t[n]+=a}return t}function n(e){if(typeof e==="number"){e=""+e}if(!e){e=""}return e}var s=i(n(e));var r=i(n(t));for(x=0;s[x]&&r[x];x++){if(s[x]!==r[x]){var a=Number(s[x]),o=Number(r[x]);if(a==s[x]&&o==r[x]){return a-o}else{return s[x]>r[x]?1:-1}}}return s.length-r.length}function numericOnly(e,t){function i(e){e=e.replace(new RegExp(/[^0-9]/g),"");return parseInt(e,10)}return i(e)-i(t)}!function(e){"use strict";function t(e){var t=e.$header;if(e.options.height){t=e.$tableHeader}return t}function i(e){return t(e).find("[data-filter-field]")}function n(t){var n=i(t);if(!e.isEmptyObject(t.filterColumnsPartial)){n.each(function(i,n){var s=e(n),r=s.attr("data-filter-field"),a=t.filterColumnsPartial[r];if(s.is("select")){s.val(a).trigger("change")}else{s.val(a)}})}}function s(t,i){var n=false,s,r,a=0;e.each(t.columns,function(t,a){s="hidden";r=[];if(!a.visible){return}if(!a.filter){r.push('<div class="no-filter"></div>')}else{var o=a.filter.class?" "+a.filter.class:"";r.push('<div style="margin: 0px 2px 2px 2px;" class="filter'+o+'">');if(a.searchable){n=true;s="visible"}switch(a.filter.type.toLowerCase()){case"input":r.push('<input type="text" data-filter-field="'+a.field+'" style="width: 100%; visibility:'+s+'">');break;case"select":r.push('<select data-filter-field="'+a.field+'" style="width: 100%; visibility:'+s+'"></select>');break}}e.each(i.children().children(),function(t,i){i=e(i);if(i.data("field")===a.field){i.find(".fht-cell").append(r.join(""));return false}})});if(n){var o=i.find("input"),l=i.find("select");if(o.length>0){o.off("keyup").on("keyup",function(e){clearTimeout(a);a=setTimeout(function(){t.onColumnSearch(e)},t.options.searchTimeOut)});o.off("mouseup").on("mouseup",function(i){var n=e(this),s=n.val();if(s===""){return}setTimeout(function(){var e=n.val();if(e===""){clearTimeout(a);a=setTimeout(function(){t.onColumnSearch(i)},t.options.searchTimeOut)}},1)})}if(l.length>0){l.on("select2:select",function(e){t.onColumnSearch(e)})}}else{i.find(".filter").hide()}}function r(i){var n=t(i);e.each(i.columns,function(e,t){if(t.filter&&t.filter.type==="select"){var s=n.find("select[data-filter-field="+t.field+"]");if(s.length>0&&!s.data().select2){t.filter.data.unshift("");var r={placeholder:"",allowClear:true,data:t.filter.data,dropdownParent:i.$el.closest(".bootstrap-table")};s.select2(r);s.on("select2:unselecting",function(e){e.preventDefault();s.val(null).trigger("change");i.searchText=undefined;i.onColumnSearch(e)})}}})}e.extend(e.fn.bootstrapTable.defaults,{filter:false,filterValues:{}});e.extend(e.fn.bootstrapTable.COLUMN_DEFAULTS,{filter:undefined});var a=e.fn.bootstrapTable.Constructor,o=a.prototype.init,l=a.prototype.initHeader,u=a.prototype.initSearch;a.prototype.init=function(){if(this.options.filter){var t=this;if(!e.isEmptyObject(t.options.filterValues)){t.filterColumnsPartial=t.options.filterValues;t.options.filterValues={}}this.$el.on("reset-view.bs.table",function(){if(!t.options.height){return}if(t.$tableHeader.find("select").length>0||t.$tableHeader.find("input").length>0){return}s(t,t.$tableHeader)}).on("post-header.bs.table",function(){var e=0;r(t);clearTimeout(e);e=setTimeout(function(){n(t)},t.options.searchTimeOut-1e3)}).on("column-switch.bs.table",function(e,i){n(t)})}o.apply(this,Array.prototype.slice.apply(arguments))};a.prototype.initHeader=function(){l.apply(this,Array.prototype.slice.apply(arguments));if(this.options.filter){s(this,this.$header)}};a.prototype.initSearch=function(){u.apply(this,Array.prototype.slice.apply(arguments));var t=this,i=t.filterColumnsPartial;if(t.options.sidePagination==="client"){this.data=e.grep(this.data,function(n,s){for(var r in i){var a=t.columns[e.fn.bootstrapTable.utils.getFieldIndex(t.columns,r)],o=i[r].toLowerCase(),l=n[r];l=e.fn.bootstrapTable.utils.calculateObjectValue(t.header,t.header.formatters[e.inArray(r,t.header.fields)],[l,n,s],l);if(a.filterStrictSearch){if(!(e.inArray(r,t.header.fields)!==-1&&(typeof l==="string"||typeof l==="number")&&l.toString().toLowerCase()===o.toString().toLowerCase())){return false}}else{if(!(e.inArray(r,t.header.fields)!==-1&&(typeof l==="string"||typeof l==="number")&&(l+"").toLowerCase().indexOf(o)!==-1)){return false}}}return true})}};a.prototype.onColumnSearch=function(t){var i=e(t.currentTarget).attr("data-filter-field"),n=e.trim(e(t.currentTarget).val());if(e.isEmptyObject(this.filterColumnsPartial)){this.filterColumnsPartial={}}if(n){this.filterColumnsPartial[i]=n}else{delete this.filterColumnsPartial[i]}this.options.pageNumber=1;this.onSearch(t)};a.prototype.setFilterData=function(i,n){var s=this,r=t(s),a=r.find('select[data-filter-field="'+i+'"]');n.unshift("");a.empty();a.select2({data:n,placeholder:"",allowClear:true,dropdownParent:s.$el.closest(".bootstrap-table")});e.each(this.columns,function(e,t){if(t.field===i){t.filter.data=n;return false}})};a.prototype.setFilterValues=function(e){this.filterColumnsPartial=e};e.fn.bootstrapTable.methods.push("setFilterData");e.fn.bootstrapTable.methods.push("setFilterValues")}(jQuery);(function(e){"use strict";var t=e.fn.bootstrapTable.utils.sprintf;e.extend(e.fn.bootstrapTable.defaults,{stickyHeader:false});var i=e.fn.bootstrapTable.Constructor,n=i.prototype.initHeader;i.prototype.initHeader=function(){var i=this;n.apply(this,Array.prototype.slice.apply(arguments));if(!this.options.stickyHeader){return}var s=this.$tableBody.find("table"),r=s.attr("id"),a=s.attr("id")+"-sticky-header",o=a+"-sticky-header-container",l=a+"_sticky_anchor_begin",u=a+"_sticky_anchor_end";s.before(t('<div id="%s" class="hidden"></div>',o));s.before(t('<div id="%s"></div>',l));s.after(t('<div id="%s"></div>',u));s.find("thead").attr("id",a);this.$stickyHeader=e(e("#"+a).clone(true,true));this.$stickyHeader.removeAttr("id");e(window).on("resize."+r,s,f);e(window).on("scroll."+r,s,f);s.closest(".fixed-table-container").find(".fixed-table-body").on("scroll."+r,s,c);this.$el.on("all.bs.table",function(t){i.$stickyHeader=e(e("#"+a).clone(true,true));i.$stickyHeader.removeAttr("id")});function f(t){var n=t.data;var s=n.find("thead").attr("id");if(n.length<1||e("#"+r).length<1){e(window).off("resize."+r);e(window).off("scroll."+r);n.closest(".fixed-table-container").find(".fixed-table-body").off("scroll."+r);return}var a="0";if(i.options.stickyHeaderOffsetY)a=i.options.stickyHeaderOffsetY.replace("px","");var f=e(window).scrollTop();var d=e("#"+l).offset().top-a;var h=e("#"+u).offset().top-a-e("#"+s).css("height").replace("px","");if(f>d&&f<=h){e.each(i.$stickyHeader.find("tr").eq(0).find("th"),function(t,i){e(i).css("min-width",e("#"+s+" tr").eq(0).find("th").eq(t).css("width"))});e("#"+o).removeClass("hidden").addClass("fix-sticky fixed-table-container");e("#"+o).css("top",a+"px");var p=e('<div style="position:absolute;width:100%;overflow-x:hidden;" />');e("#"+o).html(p.append(i.$stickyHeader));c(t)}else{e("#"+o).removeClass("fix-sticky").addClass("hidden")}}function c(t){var i=t.data;var n=i.find("thead").attr("id");e("#"+o).css("width",+i.closest(".fixed-table-body").css("width").replace("px","")+1);e("#"+o+" thead").parent().scrollLeft(Math.abs(e("#"+n).position().left))}}})(jQuery);function setPageAlert(e,t,i){var n=window.translations[t]?window.translations[t]:t;e=e==="error"?"danger":e;$("#alerts").html($('<div class="alert alert-dismissable alert-fadeout fade in alert-'+e+'" role="alert">'+'<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>'+n+"</div>"));if(i!==undefined){window.setTimeout(function(){$(".alert-fadeout").fadeTo(1e3,0).slideUp(1e3,function(){$(this).remove()})},i)}}function clearPageAlert(){$("#alerts").html("")}var FormMapper=function(){var e=function e(t,i){if(t===i.value){i.checked=true}else{t=i.defaultChecked?i.defaultChecked:false}};var t=function e(t,i){if($.type(t)==="undefined"||t===null){t=i.defaultValue?i.defaultValue:""}i.value=new Date(t).toISOString().split("T")[0]};var i=function t(i,n){e(i,n)};var n=function e(t,i){if($.type(t)==="undefined"||t===null){t=i.defaultValue?i.defaultValue:""}t=$.isArray(t)?t:[t];for(var n=0;n<i.options.length;n++){i.options[n].selected|=t.indexOf(i.options[n].value)>-1}$(i).trigger("change")};var s=function e(t,i){if($.type(t)==="undefined"||t===null){t="core.placeholder"}i.value=t.toString()||t;$(i).trigger("change")};var r=function e(t,i){if($.type(t)==="undefined"||t===null||t===""){t="core.placeholder"}t=window.translations[t]?window.translations[t]:t;$("#"+i).html(t)};var a=function e(t,i){if($.type(t)==="undefined"||t===null){i.value=""}else{i.value=t}};var o=function r(o,l){if(!l){return}var u=l.type||l[0].type;switch(u){case"radio":i(o,l);break;case"checkbox":e(o,l);break;case"select-multiple":n(o,l);break;case"select":case"select-one":s(o,l);break;case"date":t(o,l);break;default:a(o,l);break}};var l=function e(t,i){for(var n in t){if(!t.hasOwnProperty(n)){continue}var s=t[n].value;if($.type(s)==="object"){e(s,i)}else if(t[n].name==="static"){r(s,n)}else{var a=i.elements.namedItem(n);o(s,a)}}};return{mapDataToCheckboxField:e,mapDataToDateField:t,mapDataToRadioField:i,mapDataToSelectField:s,mapDataToSelectMultipleField:n,mapDataToTextField:a,mapDataToField:o,mapDataToForm:l}}();$("form").submit(function(){$(".readonly-select").prop("disabled",false);$(".readonly-required").prop("required",true)});var NoteSaveButton=function(e){var t=$.summernote.ui;var i=t.button({contents:'<i class="fa fa-child"/>Save',tooltip:"save",click:function(){$.post(window.location.pathname,e.invoke("code"))}});return i.render()};$("#pageedit").on("click",function(){if($(this).hasClass("active")){$(".inlineedit").summernote("destroy")}else{$(".inlineedit").summernote({lang:lang,focus:true,buttons:{save:NoteSaveButton},toolbar:[["style",["style"]],["font",["fontname","fontsize"]],["textstyle",["bold","italic","underline","strikethrough","superscript","subscript","clear"]],["color",["color"]],["para",["ul","ol","paragraph","height"]],["insert",["picture","link","video"]],["table",["table"]],["hr",["hr"]],["view",["fullscreen","codeview"]],["edit",["undo","redo"]],["help",["help"]],["save",["save"]]]})}});var Router=function(){var e="";var t=[];var i=function e(t,i){i=i===undefined?[]:i;this.base=this.base===undefined?"":this.base;var n=this.routes[t];if(n===undefined){return undefined}var s=this.base+n.path;for(var r in i){if(i.hasOwnProperty(r)){s=s.replace("{"+r+"}",i[r])}}return s};var n=function e(t){this.base=t};var s=function e(t){this.routes=t};return{generatePath:i,setBasePath:n,setRoutes:s}}();function debounce(e,t,i){var n;return function(){var s=this,r=arguments;var a=function(){n=null;if(!i){e.apply(s,r)}};var o=i&&!n;clearTimeout(n);n=setTimeout(a,t);if(o){e.apply(s,r)}}}$(document).ready(function(){moment.locale(lang);$.extend($.fn.bootstrapTable.defaults,$.fn.bootstrapTable.locales[lang])});$(document).ready(function(){$.fn.select2.defaults.set("language",lang);$.fn.select2.defaults.set("minimumResultsForSearch",11);$.fn.select2.defaults.set("width","resolve");$("select").select2();$(".select2.select2-container").css("width","100%");$(".datetimepicker-input").datetimepicker({locale:lang,showClear:true,showClose:true,showTodayButton:true,allowInputToggle:true});$(".readonly-required").prop("required",false);$(".readonly-select").prop("disabled",true)});$(document).ready(function(){$(".add-module-selector").on("click",function(){console.log({data:$(this).attr("data-module")});$(".record-add-form").hide();$(".record-add-form").filter("."+$(this).attr("data-module")).show()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFyay1kZWZhdWx0LmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJhcnIiLCJnZXRQcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwic2xpY2UiLCJjb25jYXQiLCJwdXNoIiwiaW5kZXhPZiIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImhhc093blByb3BlcnR5IiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwiY2FsbCIsInN1cHBvcnQiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidmVyc2lvbiIsImpRdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwiaW5pdCIsInJ0cmltIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsInByb3RvdHlwZSIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwibGVuZ3RoIiwidG9BcnJheSIsImdldCIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImNhbGxiYWNrIiwibWFwIiwiZWxlbSIsImkiLCJhcHBseSIsImFyZ3VtZW50cyIsImZpcnN0IiwiZXEiLCJsYXN0IiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwibmFtZSIsInNyYyIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzRnVuY3Rpb24iLCJpc1BsYWluT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsIm9iaiIsInR5cGUiLCJpc1dpbmRvdyIsImlzTnVtZXJpYyIsImlzTmFOIiwicGFyc2VGbG9hdCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiaXNBcnJheUxpa2UiLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJncmVwIiwiaW52ZXJ0IiwiY2FsbGJhY2tJbnZlcnNlIiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwidmFsdWUiLCJndWlkIiwicHJveHkiLCJ0bXAiLCJhcmdzIiwibm93IiwiRGF0ZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsIl8iLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJkaXNhYmxlZEFuY2VzdG9yIiwiYWRkQ29tYmluYXRvciIsImRpc2FibGVkIiwiZGlyIiwibmV4dCIsImNoaWxkTm9kZXMiLCJub2RlVHlwZSIsImUiLCJlbHMiLCJzZWVkIiwibSIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsIm5vZGVOYW1lIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsImpvaW4iLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImtleSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwiZG9jdW1lbnRFbGVtZW50Iiwibm9kZSIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInZhbCIsInNwZWNpZmllZCIsImVzY2FwZSIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsIj4iLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5IiwidG9rZW5zIiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsInRva2VuIiwiY29tcGlsZWQiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyaXNTaW1wbGUiLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2IiwidGFyZ2V0cyIsImwiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInNpYmxpbmciLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsImNyZWF0ZU9wdGlvbnMiLCJvYmplY3QiLCJmbGFnIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsIndhaXQiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJnZXREYXRhIiwiSlNPTiIsInBhcnNlIiwiZGF0YUF0dHIiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsInN3YXAiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiaGlkZSIsInRvZ2dsZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsIndyYXBNYXAiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwicmh0bWwiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJjcmVhdGVUZXh0Tm9kZSIsImh0bWxQcmVmaWx0ZXIiLCJkaXYiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJmaXgiLCJoYW5kbGVyUXVldWUiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJwcm9wcyIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXIiLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicnNjcmlwdFR5cGVNYXNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm1hcmdpbiIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJtYXJnaW5MZWZ0IiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJ3aWR0aCIsIm1hcmdpblJpZ2h0IiwicGl4ZWxNYXJnaW5SaWdodFZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxNYXJnaW5SaWdodCIsInJlbGlhYmxlTWFyZ2luTGVmdCIsImN1ckNTUyIsImNvbXB1dGVkIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94IiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmbG9hdCIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwiVHdlZW4iLCJlYXNpbmciLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImhlaWdodCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwib3B0cyIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiYW5pbSIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwiY29tcGxldGUiLCJ0aW1lciIsIioiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJmb2N1c2luIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInMiLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicmxvY2FsUHJvdG9jb2wiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJtb2RpZmllZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsImNsaWVudFRvcCIsInBhZ2VYT2Zmc2V0IiwiY2xpZW50TGVmdCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJyZXF1aXJlIiwiZmVhdHVyZSIsImZpbGVhcGkiLCJmaWxlcyIsImZvcm1kYXRhIiwiRm9ybURhdGEiLCJoYXNQcm9wIiwiYXR0cjIiLCJhamF4U3VibWl0Iiwib25TdWNjZXNzIiwibG9nIiwiYWN0aW9uIiwiJGZvcm0iLCJpZnJhbWVTcmMiLCJ2ZXRvIiwiYmVmb3JlU2VyaWFsaXplIiwicXgiLCJmb3JtVG9BcnJheSIsInNlbWFudGljIiwiZmlsdGVyaW5nIiwib3B0aW9uc0RhdGEiLCJleHRyYURhdGEiLCJiZWZvcmVTdWJtaXQiLCJxIiwiY2FsbGJhY2tzIiwicmVzZXRGb3JtIiwiY2xlYXJGb3JtIiwiaW5jbHVkZUhpZGRlbiIsIm9sZFN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwic3VjY2Vzc0FyZ3VtZW50cyIsInJlcGxhY2VUYXJnZXQiLCJvbGRFcnJvciIsIm9sZENvbXBsZXRlIiwiZmlsZUlucHV0cyIsImhhc0ZpbGVJbnB1dHMiLCJtcCIsIm11bHRpcGFydCIsImZpbGVBUEkiLCJzaG91bGRVc2VGcmFtZSIsImpxeGhyIiwiaWZyYW1lIiwiY2xvc2VLZWVwQWxpdmUiLCJmaWxlVXBsb2FkSWZyYW1lIiwiZmlsZVVwbG9hZFhociIsImsiLCJkZWVwU2VyaWFsaXplIiwic2VyaWFsaXplZCIsInBhcnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemVkRGF0YSIsInVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwibG9hZGVkIiwidG90YWwiLCJsZW5ndGhDb21wdXRhYmxlIiwiY2VpbCIsIm8iLCJmb3JtRGF0YSIsImZvcm0iLCJnIiwiJGlvIiwiaW8iLCJzdWIiLCJ0aW1lZE91dCIsInRpbWVvdXRIYW5kbGUiLCJnZXRUaW1lIiwiJGJvZHkiLCJpZnJhbWVUYXJnZXQiLCJhYm9ydGVkIiwicmVzcG9uc2VYTUwiLCJjb250ZW50V2luZG93IiwiZXhlY0NvbW1hbmQiLCJpZ25vcmUiLCJjbGsiLCJjbGtfeCIsImNsa195IiwiQ0xJRU5UX1RJTUVPVVRfQUJPUlQiLCJTRVJWRVJfQUJPUlQiLCJnZXREb2MiLCJmcmFtZSIsImNzcmZfdG9rZW4iLCJjc3JmX3BhcmFtIiwiZG9TdWJtaXQiLCJldCIsInNraXBFbmNvZGluZ092ZXJyaWRlIiwiZW5jb2RpbmciLCJlbmN0eXBlIiwiY2IiLCJjaGVja1N0YXRlIiwiZXh0cmFJbnB1dHMiLCJzdWJtaXRGbiIsImZvcmNlU3luYyIsImRvbUNoZWNrQ291bnQiLCJjYWxsYmFja1Byb2Nlc3NlZCIsImRldGFjaEV2ZW50IiwiZXJyTXNnIiwiaXNYbWwiLCJYTUxEb2N1bWVudCIsIm9wZXJhIiwiZG9jUm9vdCIsImNvbnRlbnQtdHlwZSIsIk51bWJlciIsImR0Iiwic2NyIiwidGV4dGFyZWEiLCJ0YSIsInByZSIsInRvWG1sIiwiaHR0cERhdGEiLCJBY3RpdmVYT2JqZWN0IiwibG9hZFhNTCIsImFqYXhGb3JtIiwiZGVsZWdhdGlvbiIsImMiLCJkb0FqYXhTdWJtaXQiLCJjYXB0dXJlU3VibWl0dGluZ0VsZW1lbnQiLCJhamF4Rm9ybVVuYmluZCIsIiRlbCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJmb3JtSWQiLCJlbHMyIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwiam1heCIsImZpZWxkVmFsdWUiLCJyZXF1aXJlZCIsIiRpbnB1dCIsImZvcm1TZXJpYWxpemUiLCJmaWVsZFNlcmlhbGl6ZSIsInN1Y2Nlc3NmdWwiLCJ0YWdOYW1lIiwib3BzIiwib3AiLCJjbGVhckZpZWxkcyIsImNsZWFySW5wdXRzIiwicmUiLCJkZWZhdWx0Q2hlY2tlZCIsIm11bHRpcGxlIiwiZGVmYXVsdFNlbGVjdGVkIiwiZm9yRWwiLCJlbmFibGUiLCIkc2VsIiwiZGVidWciLCJwb3N0RXJyb3IiLCJ0cmFuc2l0aW9uRW5kIiwidHJhbnNFbmRFdmVudE5hbWVzIiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsInRyYW5zaXRpb24iLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsImNhbGxlZCIsImJzVHJhbnNpdGlvbkVuZCIsImRpc21pc3MiLCJBbGVydCIsImNsb3NlIiwiVkVSU0lPTiIsIlRSQU5TSVRJT05fRFVSQVRJT04iLCIkdGhpcyIsIiRwYXJlbnQiLCJyZW1vdmVFbGVtZW50IiwiUGx1Z2luIiwiYWxlcnQiLCJDb25zdHJ1Y3RvciIsIkJ1dHRvbiIsImVsZW1lbnQiLCIkZWxlbWVudCIsIkRFRkFVTFRTIiwiaXNMb2FkaW5nIiwibG9hZGluZ1RleHQiLCJzZXRTdGF0ZSIsImQiLCJyZXNldFRleHQiLCJjaGFuZ2VkIiwiJGJ0biIsIkNhcm91c2VsIiwiJGluZGljYXRvcnMiLCJwYXVzZWQiLCJzbGlkaW5nIiwiJGFjdGl2ZSIsIiRpdGVtcyIsImtleWJvYXJkIiwia2V5ZG93biIsInBhdXNlIiwiY3ljbGUiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJnZXRJdGVtSW5kZXgiLCJpdGVtIiwiZ2V0SXRlbUZvckRpcmVjdGlvbiIsImRpcmVjdGlvbiIsImFjdGl2ZUluZGV4Iiwid2lsbFdyYXAiLCJkZWx0YSIsIml0ZW1JbmRleCIsInNsaWRlIiwiJG5leHQiLCJpc0N5Y2xpbmciLCJzbGlkZUV2ZW50IiwiJG5leHRJbmRpY2F0b3IiLCJzbGlkRXZlbnQiLCJjYXJvdXNlbCIsImNsaWNrSGFuZGxlciIsIiR0YXJnZXQiLCJzbGlkZUluZGV4IiwiJGNhcm91c2VsIiwiQ29sbGFwc2UiLCIkdHJpZ2dlciIsInRyYW5zaXRpb25pbmciLCJnZXRQYXJlbnQiLCJhZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJkaW1lbnNpb24iLCJoYXNXaWR0aCIsImFjdGl2ZXNEYXRhIiwiYWN0aXZlcyIsInN0YXJ0RXZlbnQiLCJzY3JvbGxTaXplIiwiZ2V0VGFyZ2V0RnJvbVRyaWdnZXIiLCJpc09wZW4iLCJjb2xsYXBzZSIsImJhY2tkcm9wIiwiRHJvcGRvd24iLCJjbGVhck1lbnVzIiwiaXNBY3RpdmUiLCJkZXNjIiwiZHJvcGRvd24iLCJNb2RhbCIsIiRkaWFsb2ciLCIkYmFja2Ryb3AiLCJpc1Nob3duIiwib3JpZ2luYWxCb2R5UGFkIiwic2Nyb2xsYmFyV2lkdGgiLCJpZ25vcmVCYWNrZHJvcENsaWNrIiwicmVtb3RlIiwiQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiIsIl9yZWxhdGVkVGFyZ2V0IiwiY2hlY2tTY3JvbGxiYXIiLCJzZXRTY3JvbGxiYXIiLCJyZXNpemUiLCJhZGp1c3REaWFsb2ciLCJlbmZvcmNlRm9jdXMiLCJoaWRlTW9kYWwiLCJoYW5kbGVVcGRhdGUiLCJyZXNldEFkanVzdG1lbnRzIiwicmVzZXRTY3JvbGxiYXIiLCJyZW1vdmVCYWNrZHJvcCIsImRvQW5pbWF0ZSIsImNhbGxiYWNrUmVtb3ZlIiwibW9kYWxJc092ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJib2R5SXNPdmVyZmxvd2luZyIsInBhZGRpbmdSaWdodCIsImZ1bGxXaW5kb3dXaWR0aCIsImlubmVyV2lkdGgiLCJkb2N1bWVudEVsZW1lbnRSZWN0IiwicmlnaHQiLCJhYnMiLCJjbGllbnRXaWR0aCIsIm1lYXN1cmVTY3JvbGxiYXIiLCJib2R5UGFkIiwic2Nyb2xsRGl2IiwibW9kYWwiLCJzaG93RXZlbnQiLCJUb29sdGlwIiwiaG92ZXJTdGF0ZSIsImluU3RhdGUiLCJwbGFjZW1lbnQiLCJ0ZW1wbGF0ZSIsInRpdGxlIiwidmlld3BvcnQiLCJnZXRPcHRpb25zIiwiJHZpZXdwb3J0IiwidHJpZ2dlcnMiLCJldmVudEluIiwiZXZlbnRPdXQiLCJlbnRlciIsImxlYXZlIiwiX29wdGlvbnMiLCJmaXhUaXRsZSIsImdldERlZmF1bHRzIiwiZ2V0RGVsZWdhdGVPcHRpb25zIiwiZGVmYXVsdHMiLCJ0aXAiLCJpc0luU3RhdGVUcnVlIiwiaW5Eb20iLCIkdGlwIiwidGlwSWQiLCJnZXRVSUQiLCJzZXRDb250ZW50IiwiYXV0b1Rva2VuIiwiYXV0b1BsYWNlIiwiZ2V0UG9zaXRpb24iLCJhY3R1YWxXaWR0aCIsImFjdHVhbEhlaWdodCIsIm9yZ1BsYWNlbWVudCIsInZpZXdwb3J0RGltIiwiYm90dG9tIiwiY2FsY3VsYXRlZE9mZnNldCIsImdldENhbGN1bGF0ZWRPZmZzZXQiLCJhcHBseVBsYWNlbWVudCIsInByZXZIb3ZlclN0YXRlIiwibWFyZ2luVG9wIiwicm91bmQiLCJnZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEiLCJpc1ZlcnRpY2FsIiwiYXJyb3dEZWx0YSIsImFycm93T2Zmc2V0UG9zaXRpb24iLCJyZXBsYWNlQXJyb3ciLCJhcnJvdyIsImdldFRpdGxlIiwiJGUiLCJpc0JvZHkiLCJlbFJlY3QiLCJpc1N2ZyIsIlNWR0VsZW1lbnQiLCJlbE9mZnNldCIsInNjcm9sbCIsIm91dGVyRGltcyIsInZpZXdwb3J0UGFkZGluZyIsInZpZXdwb3J0RGltZW5zaW9ucyIsInRvcEVkZ2VPZmZzZXQiLCJib3R0b21FZGdlT2Zmc2V0IiwibGVmdEVkZ2VPZmZzZXQiLCJyaWdodEVkZ2VPZmZzZXQiLCIkYXJyb3ciLCJ0b2dnbGVFbmFibGVkIiwiZGVzdHJveSIsInRvb2x0aXAiLCJQb3BvdmVyIiwiZ2V0Q29udGVudCIsInBvcG92ZXIiLCJTY3JvbGxTcHkiLCIkc2Nyb2xsRWxlbWVudCIsIm9mZnNldHMiLCJhY3RpdmVUYXJnZXQiLCJyZWZyZXNoIiwiZ2V0U2Nyb2xsSGVpZ2h0Iiwib2Zmc2V0TWV0aG9kIiwib2Zmc2V0QmFzZSIsIiRocmVmIiwibWF4U2Nyb2xsIiwiYWN0aXZhdGUiLCJjbGVhciIsInNjcm9sbHNweSIsIiRzcHkiLCJUYWIiLCIkdWwiLCIkcHJldmlvdXMiLCJoaWRlRXZlbnQiLCJ0YWIiLCJBZmZpeCIsImNoZWNrUG9zaXRpb24iLCJjaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCIsImFmZml4ZWQiLCJ1bnBpbiIsInBpbm5lZE9mZnNldCIsIlJFU0VUIiwiZ2V0U3RhdGUiLCJvZmZzZXRCb3R0b20iLCJ0YXJnZXRIZWlnaHQiLCJpbml0aWFsaXppbmciLCJjb2xsaWRlclRvcCIsImNvbGxpZGVySGVpZ2h0IiwiZ2V0UGlubmVkT2Zmc2V0IiwiYWZmaXgiLCJhZmZpeFR5cGUiLCJTMiIsInNlbGVjdDIiLCJyZXF1aXJlanMiLCJ1bmRlZiIsIm1haW4iLCJyZXEiLCJtYWtlTWFwIiwiZGVmaW5lZCIsIndhaXRpbmciLCJjb25maWciLCJkZWZpbmluZyIsImFwcyIsImpzU3VmZml4UmVnRXhwIiwibm9ybWFsaXplIiwiYmFzZU5hbWUiLCJuYW1lUGFydHMiLCJuYW1lU2VnbWVudCIsIm1hcFZhbHVlIiwiZm91bmRNYXAiLCJsYXN0SW5kZXgiLCJmb3VuZEkiLCJmb3VuZFN0YXJNYXAiLCJzdGFySSIsIm5vcm1hbGl6ZWRCYXNlUGFydHMiLCJiYXNlUGFydHMiLCJzdGFyTWFwIiwibm9kZUlkQ29tcGF0IiwiY2hhckF0IiwibWFrZVJlcXVpcmUiLCJyZWxOYW1lIiwibWFrZU5vcm1hbGl6ZSIsIm1ha2VMb2FkIiwiZGVwTmFtZSIsImNhbGxEZXAiLCJzcGxpdFByZWZpeCIsInN1YnN0cmluZyIsIm1ha2VSZWxQYXJ0cyIsInJlbFBhcnRzIiwicGx1Z2luIiwicmVsUmVzb3VyY2VOYW1lIiwiZiIsInByIiwibWFrZUNvbmZpZyIsInVyaSIsImRlcHMiLCJjanNNb2R1bGUiLCJjYWxsYmFja1R5cGUiLCJ1c2luZ0V4cG9ydHMiLCJhbHQiLCJjZmciLCJfZGVmaW5lZCIsIlV0aWxzIiwiRXh0ZW5kIiwiQ2hpbGRDbGFzcyIsIlN1cGVyQ2xhc3MiLCJfX2hhc1Byb3AiLCJCYXNlQ29uc3RydWN0b3IiLCJfX3N1cGVyX18iLCJnZXRNZXRob2RzIiwidGhlQ2xhc3MiLCJtZXRob2RzIiwibWV0aG9kTmFtZSIsIkRlY29yYXRlIiwiRGVjb3JhdG9yQ2xhc3MiLCJkZWNvcmF0ZWRNZXRob2RzIiwic3VwZXJNZXRob2RzIiwiRGVjb3JhdGVkQ2xhc3MiLCJhcmdDb3VudCIsImNhbGxlZENvbnN0cnVjdG9yIiwiZGlzcGxheU5hbWUiLCJjdHIiLCJzdXBlck1ldGhvZCIsImNhbGxlZE1ldGhvZCIsIm9yaWdpbmFsTWV0aG9kIiwiZGVjb3JhdGVkTWV0aG9kIiwiT2JzZXJ2YWJsZSIsImxpc3RlbmVycyIsIl90eXBlIiwiaW52b2tlIiwiZ2VuZXJhdGVDaGFycyIsImNoYXJzIiwicmFuZG9tQ2hhciIsImZsb29yIiwiX2NvbnZlcnREYXRhIiwib3JpZ2luYWxLZXkiLCJkYXRhTGV2ZWwiLCJoYXNTY3JvbGwiLCJpbm5lckhlaWdodCIsInNjcm9sbFdpZHRoIiwiZXNjYXBlTWFya3VwIiwibWFya3VwIiwicmVwbGFjZU1hcCIsIlxcIiwiJiIsIjwiLCJcIiIsIiciLCIvIiwiYXBwZW5kTWFueSIsIiRub2RlcyIsInN1YnN0ciIsIiRqcU5vZGVzIiwiUmVzdWx0cyIsImRhdGFBZGFwdGVyIiwicmVuZGVyIiwiJHJlc3VsdHMiLCJkaXNwbGF5TWVzc2FnZSIsImhpZGVMb2FkaW5nIiwiJG1lc3NhZ2UiLCJoaWRlTWVzc2FnZXMiLCIkb3B0aW9ucyIsIiRvcHRpb24iLCIkZHJvcGRvd24iLCIkcmVzdWx0c0NvbnRhaW5lciIsInNvcnRlciIsImhpZ2hsaWdodEZpcnN0SXRlbSIsIiRzZWxlY3RlZCIsImVuc3VyZUhpZ2hsaWdodFZpc2libGUiLCJzZXRDbGFzc2VzIiwic2VsZWN0ZWRJZHMiLCJzaG93TG9hZGluZyIsImxvYWRpbmdNb3JlIiwibG9hZGluZyIsIiRsb2FkaW5nIiwicm9sZSIsImFyaWEtc2VsZWN0ZWQiLCJfcmVzdWx0SWQiLCJsYWJlbCIsIiRsYWJlbCIsIiRjaGlsZHJlbiIsImNoaWxkIiwiJGNoaWxkIiwiJGNoaWxkcmVuQ29udGFpbmVyIiwiJGNvbnRhaW5lciIsIiRoaWdobGlnaHRlZCIsImdldEhpZ2hsaWdodGVkUmVzdWx0cyIsImN1cnJlbnRJbmRleCIsIm5leHRJbmRleCIsImN1cnJlbnRPZmZzZXQiLCJuZXh0VG9wIiwibmV4dE9mZnNldCIsIm91dGVySGVpZ2h0IiwibmV4dEJvdHRvbSIsIm1vdXNld2hlZWwiLCJkZWx0YVkiLCJpc0F0VG9wIiwiaXNBdEJvdHRvbSIsIm9mZnNldERlbHRhIiwiS0VZUyIsIkJBQ0tTUEFDRSIsIlRBQiIsIkVOVEVSIiwiU0hJRlQiLCJDVFJMIiwiQUxUIiwiRVNDIiwiU1BBQ0UiLCJQQUdFX1VQIiwiUEFHRV9ET1dOIiwiRU5EIiwiSE9NRSIsIkxFRlQiLCJVUCIsIlJJR0hUIiwiRE9XTiIsIkRFTEVURSIsIkJhc2VTZWxlY3Rpb24iLCIkc2VsZWN0aW9uIiwiX3RhYmluZGV4IiwicmVzdWx0c0lkIiwiX2hhbmRsZUJsdXIiLCJ1cGRhdGUiLCJfYXR0YWNoQ2xvc2VIYW5kbGVyIiwiX2RldGFjaENsb3NlSGFuZGxlciIsIiRzZWxlY3QiLCIkYWxsIiwiJHNlbGVjdGlvbkNvbnRhaW5lciIsIlNpbmdsZVNlbGVjdGlvbiIsInNlbGVjdGlvbkNvbnRhaW5lciIsIiRyZW5kZXJlZCIsImZvcm1hdHRlZCIsIk11bHRpcGxlU2VsZWN0aW9uIiwiJHJlbW92ZSIsIiRzZWxlY3Rpb25zIiwiUGxhY2Vob2xkZXIiLCJkZWNvcmF0ZWQiLCJwbGFjZWhvbGRlciIsIm5vcm1hbGl6ZVBsYWNlaG9sZGVyIiwiY3JlYXRlUGxhY2Vob2xkZXIiLCIkcGxhY2Vob2xkZXIiLCJzaW5nbGVQbGFjZWhvbGRlciIsIm11bHRpcGxlU2VsZWN0aW9ucyIsIkFsbG93Q2xlYXIiLCJfaGFuZGxlQ2xlYXIiLCJfaGFuZGxlS2V5Ym9hcmRDbGVhciIsIiRjbGVhciIsInVuc2VsZWN0RGF0YSIsInByZXZlbnRlZCIsIlNlYXJjaCIsIiRzZWFyY2giLCIkc2VhcmNoQ29udGFpbmVyIiwiX3RyYW5zZmVyVGFiSW5kZXgiLCJfa2V5VXBQcmV2ZW50ZWQiLCIkcHJldmlvdXNDaG9pY2UiLCJzZWFyY2hSZW1vdmVDaG9pY2UiLCJtc2llIiwiZG9jdW1lbnRNb2RlIiwiZGlzYWJsZUlucHV0RXZlbnRzIiwiaGFuZGxlU2VhcmNoIiwic2VhcmNoSGFkRm9jdXMiLCJyZXNpemVTZWFyY2giLCJ0ZXJtIiwibWluaW11bVdpZHRoIiwiRXZlbnRSZWxheSIsInJlbGF5RXZlbnRzIiwicHJldmVudGFibGVFdmVudHMiLCJUcmFuc2xhdGlvbiIsImRpY3QiLCJ0cmFuc2xhdGlvbiIsIl9jYWNoZSIsImxvYWRQYXRoIiwicGF0aCIsInRyYW5zbGF0aW9ucyIsImRpYWNyaXRpY3MiLCLikrYiLCLvvKEiLCLDgCIsIsOBIiwiw4IiLCLhuqYiLCLhuqQiLCLhuqoiLCLhuqgiLCLDgyIsIsSAIiwixIIiLCLhurAiLCLhuq4iLCLhurQiLCLhurIiLCLIpiIsIsegIiwiw4QiLCLHniIsIuG6oiIsIsOFIiwix7oiLCLHjSIsIsiAIiwiyIIiLCLhuqAiLCLhuqwiLCLhurYiLCLhuIAiLCLEhCIsIsi6Iiwi4rGvIiwi6pyyIiwiw4YiLCLHvCIsIseiIiwi6py0Iiwi6py2Iiwi6py4Iiwi6py6Iiwi6py8Iiwi4pK3Iiwi77yiIiwi4biCIiwi4biEIiwi4biGIiwiyYMiLCLGgiIsIsaBIiwi4pK4Iiwi77yjIiwixIYiLCLEiCIsIsSKIiwixIwiLCLDhyIsIuG4iCIsIsaHIiwiyLsiLCLqnL4iLCLikrkiLCLvvKQiLCLhuIoiLCLEjiIsIuG4jCIsIuG4kCIsIuG4kiIsIuG4jiIsIsSQIiwixosiLCLGiiIsIsaJIiwi6p25Iiwix7EiLCLHhCIsIseyIiwix4UiLCLikroiLCLvvKUiLCLDiCIsIsOJIiwiw4oiLCLhu4AiLCLhur4iLCLhu4QiLCLhu4IiLCLhurwiLCLEkiIsIuG4lCIsIuG4liIsIsSUIiwixJYiLCLDiyIsIuG6uiIsIsSaIiwiyIQiLCLIhiIsIuG6uCIsIuG7hiIsIsioIiwi4bicIiwixJgiLCLhuJgiLCLhuJoiLCLGkCIsIsaOIiwi4pK7Iiwi77ymIiwi4bieIiwixpEiLCLqnbsiLCLikrwiLCLvvKciLCLHtCIsIsScIiwi4bigIiwixJ4iLCLEoCIsIsemIiwixKIiLCLHpCIsIsaTIiwi6p6gIiwi6p29Iiwi6p2+Iiwi4pK9Iiwi77yoIiwixKQiLCLhuKIiLCLhuKYiLCLIniIsIuG4pCIsIuG4qCIsIuG4qiIsIsSmIiwi4rGnIiwi4rG1Iiwi6p6NIiwi4pK+Iiwi77ypIiwiw4wiLCLDjSIsIsOOIiwixKgiLCLEqiIsIsSsIiwixLAiLCLDjyIsIuG4riIsIuG7iCIsIsePIiwiyIgiLCLIiiIsIuG7iiIsIsSuIiwi4bisIiwixpciLCLikr8iLCLvvKoiLCLEtCIsIsmIIiwi4pOAIiwi77yrIiwi4biwIiwix6giLCLhuLIiLCLEtiIsIuG4tCIsIsaYIiwi4rGpIiwi6p2AIiwi6p2CIiwi6p2EIiwi6p6iIiwi4pOBIiwi77ysIiwixL8iLCLEuSIsIsS9Iiwi4bi2Iiwi4bi4IiwixLsiLCLhuLwiLCLhuLoiLCLFgSIsIsi9Iiwi4rGiIiwi4rGgIiwi6p2IIiwi6p2GIiwi6p6AIiwix4ciLCLHiCIsIuKTgiIsIu+8rSIsIuG4viIsIuG5gCIsIuG5giIsIuKxriIsIsacIiwi4pODIiwi77yuIiwix7giLCLFgyIsIsORIiwi4bmEIiwixYciLCLhuYYiLCLFhSIsIuG5iiIsIuG5iCIsIsigIiwixp0iLCLqnpAiLCLqnqQiLCLHiiIsIseLIiwi4pOEIiwi77yvIiwiw5IiLCLDkyIsIsOUIiwi4buSIiwi4buQIiwi4buWIiwi4buUIiwiw5UiLCLhuYwiLCLIrCIsIuG5jiIsIsWMIiwi4bmQIiwi4bmSIiwixY4iLCLIriIsIsiwIiwiw5YiLCLIqiIsIuG7jiIsIsWQIiwix5EiLCLIjCIsIsiOIiwixqAiLCLhu5wiLCLhu5oiLCLhu6AiLCLhu54iLCLhu6IiLCLhu4wiLCLhu5giLCLHqiIsIsesIiwiw5giLCLHviIsIsaGIiwixp8iLCLqnYoiLCLqnYwiLCLGoiIsIuqdjiIsIsiiIiwi4pOFIiwi77ywIiwi4bmUIiwi4bmWIiwixqQiLCLisaMiLCLqnZAiLCLqnZIiLCLqnZQiLCLik4YiLCLvvLEiLCLqnZYiLCLqnZgiLCLJiiIsIuKThyIsIu+8siIsIsWUIiwi4bmYIiwixZgiLCLIkCIsIsiSIiwi4bmaIiwi4bmcIiwixZYiLCLhuZ4iLCLJjCIsIuKxpCIsIuqdmiIsIuqepiIsIuqegiIsIuKTiCIsIu+8syIsIuG6niIsIsWaIiwi4bmkIiwixZwiLCLhuaAiLCLFoCIsIuG5piIsIuG5oiIsIuG5qCIsIsiYIiwixZ4iLCLisb4iLCLqnqgiLCLqnoQiLCLik4kiLCLvvLQiLCLhuaoiLCLFpCIsIuG5rCIsIsiaIiwixaIiLCLhubAiLCLhua4iLCLFpiIsIsasIiwixq4iLCLIviIsIuqehiIsIuqcqCIsIuKTiiIsIu+8tSIsIsOZIiwiw5oiLCLDmyIsIsWoIiwi4bm4IiwixaoiLCLhuboiLCLFrCIsIsOcIiwix5siLCLHlyIsIseVIiwix5kiLCLhu6YiLCLFriIsIsWwIiwix5MiLCLIlCIsIsiWIiwixq8iLCLhu6oiLCLhu6giLCLhu64iLCLhu6wiLCLhu7AiLCLhu6QiLCLhubIiLCLFsiIsIuG5tiIsIuG5tCIsIsmEIiwi4pOLIiwi77y2Iiwi4bm8Iiwi4bm+IiwixrIiLCLqnZ4iLCLJhSIsIuqdoCIsIuKTjCIsIu+8tyIsIuG6gCIsIuG6giIsIsW0Iiwi4bqGIiwi4bqEIiwi4bqIIiwi4rGyIiwi4pONIiwi77y4Iiwi4bqKIiwi4bqMIiwi4pOOIiwi77y5Iiwi4buyIiwiw50iLCLFtiIsIuG7uCIsIsiyIiwi4bqOIiwixbgiLCLhu7YiLCLhu7QiLCLGsyIsIsmOIiwi4bu+Iiwi4pOPIiwi77y6IiwixbkiLCLhupAiLCLFuyIsIsW9Iiwi4bqSIiwi4bqUIiwixrUiLCLIpCIsIuKxvyIsIuKxqyIsIuqdoiIsIuKTkCIsIu+9gSIsIuG6miIsIsOgIiwiw6EiLCLDoiIsIuG6pyIsIuG6pSIsIuG6qyIsIuG6qSIsIsOjIiwixIEiLCLEgyIsIuG6sSIsIuG6ryIsIuG6tSIsIuG6syIsIsinIiwix6EiLCLDpCIsIsefIiwi4bqjIiwiw6UiLCLHuyIsIseOIiwiyIEiLCLIgyIsIuG6oSIsIuG6rSIsIuG6tyIsIuG4gSIsIsSFIiwi4rGlIiwiyZAiLCLqnLMiLCLDpiIsIse9Iiwix6MiLCLqnLUiLCLqnLciLCLqnLkiLCLqnLsiLCLqnL0iLCLik5EiLCLvvYIiLCLhuIMiLCLhuIUiLCLhuIciLCLGgCIsIsaDIiwiyZMiLCLik5IiLCLvvYMiLCLEhyIsIsSJIiwixIsiLCLEjSIsIsOnIiwi4biJIiwixogiLCLIvCIsIuqcvyIsIuKGhCIsIuKTkyIsIu+9hCIsIuG4iyIsIsSPIiwi4biNIiwi4biRIiwi4biTIiwi4biPIiwixJEiLCLGjCIsIsmWIiwiyZciLCLqnboiLCLHsyIsIseGIiwi4pOUIiwi772FIiwiw6giLCLDqSIsIsOqIiwi4buBIiwi4bq/Iiwi4buFIiwi4buDIiwi4bq9IiwixJMiLCLhuJUiLCLhuJciLCLElSIsIsSXIiwiw6siLCLhursiLCLEmyIsIsiFIiwiyIciLCLhurkiLCLhu4ciLCLIqSIsIuG4nSIsIsSZIiwi4biZIiwi4bibIiwiyYciLCLJmyIsIsedIiwi4pOVIiwi772GIiwi4bifIiwixpIiLCLqnbwiLCLik5YiLCLvvYciLCLHtSIsIsSdIiwi4bihIiwixJ8iLCLEoSIsIsenIiwixKMiLCLHpSIsIsmgIiwi6p6hIiwi4bW5Iiwi6p2/Iiwi4pOXIiwi772IIiwixKUiLCLhuKMiLCLhuKciLCLInyIsIuG4pSIsIuG4qSIsIuG4qyIsIuG6liIsIsSnIiwi4rGoIiwi4rG2IiwiyaUiLCLGlSIsIuKTmCIsIu+9iSIsIsOsIiwiw60iLCLDriIsIsSpIiwixKsiLCLErSIsIsOvIiwi4bivIiwi4buJIiwix5AiLCLIiSIsIsiLIiwi4buLIiwixK8iLCLhuK0iLCLJqCIsIsSxIiwi4pOZIiwi772KIiwixLUiLCLHsCIsIsmJIiwi4pOaIiwi772LIiwi4bixIiwix6kiLCLhuLMiLCLEtyIsIuG4tSIsIsaZIiwi4rGqIiwi6p2BIiwi6p2DIiwi6p2FIiwi6p6jIiwi4pObIiwi772MIiwixYAiLCLEuiIsIsS+Iiwi4bi3Iiwi4bi5IiwixLwiLCLhuL0iLCLhuLsiLCLFvyIsIsWCIiwixpoiLCLJqyIsIuKxoSIsIuqdiSIsIuqegSIsIuqdhyIsIseJIiwi4pOcIiwi772NIiwi4bi/Iiwi4bmBIiwi4bmDIiwiybEiLCLJryIsIuKTnSIsIu+9jiIsIse5IiwixYQiLCLDsSIsIuG5hSIsIsWIIiwi4bmHIiwixYYiLCLhuYsiLCLhuYkiLCLGniIsIsmyIiwixYkiLCLqnpEiLCLqnqUiLCLHjCIsIuKTniIsIu+9jyIsIsOyIiwiw7MiLCLDtCIsIuG7kyIsIuG7kSIsIuG7lyIsIuG7lSIsIsO1Iiwi4bmNIiwiyK0iLCLhuY8iLCLFjSIsIuG5kSIsIuG5kyIsIsWPIiwiyK8iLCLIsSIsIsO2IiwiyKsiLCLhu48iLCLFkSIsIseSIiwiyI0iLCLIjyIsIsahIiwi4budIiwi4bubIiwi4buhIiwi4bufIiwi4bujIiwi4buNIiwi4buZIiwix6siLCLHrSIsIsO4Iiwix78iLCLJlCIsIuqdiyIsIuqdjSIsIsm1IiwixqMiLCLIoyIsIuqdjyIsIuKTnyIsIu+9kCIsIuG5lSIsIuG5lyIsIsalIiwi4bW9Iiwi6p2RIiwi6p2TIiwi6p2VIiwi4pOgIiwi772RIiwiyYsiLCLqnZciLCLqnZkiLCLik6EiLCLvvZIiLCLFlSIsIuG5mSIsIsWZIiwiyJEiLCLIkyIsIuG5myIsIuG5nSIsIsWXIiwi4bmfIiwiyY0iLCLJvSIsIuqdmyIsIuqepyIsIuqegyIsIuKToiIsIu+9kyIsIsOfIiwixZsiLCLhuaUiLCLFnSIsIuG5oSIsIsWhIiwi4bmnIiwi4bmjIiwi4bmpIiwiyJkiLCLFnyIsIsi/Iiwi6p6pIiwi6p6FIiwi4bqbIiwi4pOjIiwi772UIiwi4bmrIiwi4bqXIiwixaUiLCLhua0iLCLImyIsIsWjIiwi4bmxIiwi4bmvIiwixaciLCLGrSIsIsqIIiwi4rGmIiwi6p6HIiwi6pypIiwi4pOkIiwi772VIiwiw7kiLCLDuiIsIsO7IiwixakiLCLhubkiLCLFqyIsIuG5uyIsIsWtIiwiw7wiLCLHnCIsIseYIiwix5YiLCLHmiIsIuG7pyIsIsWvIiwixbEiLCLHlCIsIsiVIiwiyJciLCLGsCIsIuG7qyIsIuG7qSIsIuG7ryIsIuG7rSIsIuG7sSIsIuG7pSIsIuG5syIsIsWzIiwi4bm3Iiwi4bm1IiwiyokiLCLik6UiLCLvvZYiLCLhub0iLCLhub8iLCLKiyIsIuqdnyIsIsqMIiwi6p2hIiwi4pOmIiwi772XIiwi4bqBIiwi4bqDIiwixbUiLCLhuociLCLhuoUiLCLhupgiLCLhuokiLCLisbMiLCLik6ciLCLvvZgiLCLhuosiLCLhuo0iLCLik6giLCLvvZkiLCLhu7MiLCLDvSIsIsW3Iiwi4bu5IiwiyLMiLCLhuo8iLCLDvyIsIuG7tyIsIuG6mSIsIuG7tSIsIsa0IiwiyY8iLCLhu78iLCLik6kiLCLvvZoiLCLFuiIsIuG6kSIsIsW8Iiwixb4iLCLhupMiLCLhupUiLCLGtiIsIsilIiwiyYAiLCLisawiLCLqnaMiLCLOhiIsIs6IIiwizokiLCLOiiIsIs6qIiwizowiLCLOjiIsIs6rIiwizo8iLCLOrCIsIs6tIiwizq4iLCLOryIsIs+KIiwizpAiLCLPjCIsIs+NIiwiz4siLCLOsCIsIs+JIiwiz4IiLCJCYXNlQWRhcHRlciIsInF1ZXJ5IiwiZ2VuZXJhdGVSZXN1bHRJZCIsIlNlbGVjdEFkYXB0ZXIiLCJjdXJyZW50RGF0YSIsInVuc2VsZWN0IiwiYWRkT3B0aW9ucyIsIm5vcm1hbGl6ZWREYXRhIiwiX25vcm1hbGl6ZUl0ZW0iLCJBcnJheUFkYXB0ZXIiLCJjb252ZXJ0VG9PcHRpb25zIiwiZWxtIiwiJGV4aXN0aW5nIiwiZXhpc3RpbmdJZHMiLCJvbmx5SXRlbSIsIiRleGlzdGluZ09wdGlvbiIsImV4aXN0aW5nRGF0YSIsIm5ld0RhdGEiLCIkbmV3T3B0aW9uIiwiQWpheEFkYXB0ZXIiLCJhamF4T3B0aW9ucyIsIl9hcHBseURlZmF1bHRzIiwicHJvY2Vzc1Jlc3VsdHMiLCJmYWlsdXJlIiwiJHJlcXVlc3QiLCJfcmVxdWVzdCIsInJlcXVlc3QiLCJfcXVlcnlUaW1lb3V0IiwiVGFncyIsInRhZ3MiLCJjcmVhdGVUYWciLCJpbnNlcnRUYWciLCJfcmVtb3ZlT2xkVGFncyIsInBhZ2UiLCJ3cmFwcGVyIiwiY2hlY2tDaGlsZHJlbiIsIm9wdGlvblRleHQiLCJwYXJhbXNUZXJtIiwiY2hlY2tUZXh0IiwiX2xhc3RUYWciLCJUb2tlbml6ZXIiLCJ0b2tlbml6ZXIiLCJjcmVhdGVBbmRTZWxlY3QiLCIkZXhpc3RpbmdPcHRpb25zIiwidG9rZW5EYXRhIiwic2VwYXJhdG9ycyIsInRlcm1DaGFyIiwicGFydFBhcmFtcyIsIk1pbmltdW1JbnB1dExlbmd0aCIsIm1pbmltdW1JbnB1dExlbmd0aCIsIm1pbmltdW0iLCJNYXhpbXVtSW5wdXRMZW5ndGgiLCJtYXhpbXVtSW5wdXRMZW5ndGgiLCJtYXhpbXVtIiwiTWF4aW11bVNlbGVjdGlvbkxlbmd0aCIsIm1heGltdW1TZWxlY3Rpb25MZW5ndGgiLCJzaG93U2VhcmNoIiwiSGlkZVBsYWNlaG9sZGVyIiwicmVtb3ZlUGxhY2Vob2xkZXIiLCJtb2RpZmllZERhdGEiLCJJbmZpbml0ZVNjcm9sbCIsImxhc3RQYXJhbXMiLCIkbG9hZGluZ01vcmUiLCJjcmVhdGVMb2FkaW5nTW9yZSIsInNob3dMb2FkaW5nTW9yZSIsImlzTG9hZE1vcmVWaXNpYmxlIiwibG9hZGluZ01vcmVPZmZzZXQiLCJsb2FkTW9yZSIsInBhZ2luYXRpb24iLCJtb3JlIiwiQXR0YWNoQm9keSIsIiRkcm9wZG93blBhcmVudCIsInNldHVwUmVzdWx0c0V2ZW50cyIsIl9zaG93RHJvcGRvd24iLCJfYXR0YWNoUG9zaXRpb25pbmdIYW5kbGVyIiwiX3Bvc2l0aW9uRHJvcGRvd24iLCJfcmVzaXplRHJvcGRvd24iLCJfaGlkZURyb3Bkb3duIiwiX2RldGFjaFBvc2l0aW9uaW5nSGFuZGxlciIsIiRkcm9wZG93bkNvbnRhaW5lciIsInNjcm9sbEV2ZW50IiwicmVzaXplRXZlbnQiLCJvcmllbnRhdGlvbkV2ZW50IiwiJHdhdGNoZXJzIiwieCIsInkiLCJldiIsIiR3aW5kb3ciLCJpc0N1cnJlbnRseUFib3ZlIiwiaXNDdXJyZW50bHlCZWxvdyIsIm5ld0RpcmVjdGlvbiIsImVub3VnaFJvb21BYm92ZSIsImVub3VnaFJvb21CZWxvdyIsIiRvZmZzZXRQYXJlbnQiLCJvdXRlcldpZHRoIiwiY291bnRSZXN1bHRzIiwiTWluaW11bVJlc3VsdHNGb3JTZWFyY2giLCJtaW5pbXVtUmVzdWx0c0ZvclNlYXJjaCIsIkluZmluaXR5IiwiU2VsZWN0T25DbG9zZSIsIl9oYW5kbGVTZWxlY3RPbkNsb3NlIiwib3JpZ2luYWxTZWxlY3QyRXZlbnQiLCIkaGlnaGxpZ2h0ZWRSZXN1bHRzIiwiQ2xvc2VPblNlbGVjdCIsIl9zZWxlY3RUcmlnZ2VyZWQiLCJlcnJvckxvYWRpbmciLCJpbnB1dFRvb0xvbmciLCJvdmVyQ2hhcnMiLCJpbnB1dFRvb1Nob3J0IiwicmVtYWluaW5nQ2hhcnMiLCJtYXhpbXVtU2VsZWN0ZWQiLCJub1Jlc3VsdHMiLCJzZWFyY2hpbmciLCJSZXN1bHRzTGlzdCIsIlNlbGVjdGlvblNlYXJjaCIsIkRJQUNSSVRJQ1MiLCJTZWxlY3REYXRhIiwiQXJyYXlEYXRhIiwiQWpheERhdGEiLCJEcm9wZG93blNlYXJjaCIsIkVuZ2xpc2hUcmFuc2xhdGlvbiIsIkRlZmF1bHRzIiwidG9rZW5TZXBhcmF0b3JzIiwiUXVlcnkiLCJhbWRCYXNlIiwiaW5pdFNlbGVjdGlvbiIsIkluaXRTZWxlY3Rpb24iLCJyZXN1bHRzQWRhcHRlciIsInNlbGVjdE9uQ2xvc2UiLCJkcm9wZG93bkFkYXB0ZXIiLCJTZWFyY2hhYmxlRHJvcGRvd24iLCJjbG9zZU9uU2VsZWN0IiwiZHJvcGRvd25Dc3NDbGFzcyIsImRyb3Bkb3duQ3NzIiwiYWRhcHREcm9wZG93bkNzc0NsYXNzIiwiRHJvcGRvd25DU1MiLCJzZWxlY3Rpb25BZGFwdGVyIiwiYWxsb3dDbGVhciIsImNvbnRhaW5lckNzc0NsYXNzIiwiY29udGFpbmVyQ3NzIiwiYWRhcHRDb250YWluZXJDc3NDbGFzcyIsIkNvbnRhaW5lckNTUyIsImxhbmd1YWdlIiwibGFuZ3VhZ2VQYXJ0cyIsImJhc2VMYW5ndWFnZSIsImxhbmd1YWdlcyIsImxhbmd1YWdlTmFtZXMiLCJhbWRMYW5ndWFnZUJhc2UiLCJiYXNlVHJhbnNsYXRpb24iLCJjdXN0b21UcmFuc2xhdGlvbiIsInN0cmlwRGlhY3JpdGljcyIsImRyb3Bkb3duQXV0b1dpZHRoIiwidGVtcGxhdGVSZXN1bHQiLCJ0ZW1wbGF0ZVNlbGVjdGlvbiIsInRoZW1lIiwiY2FtZWxLZXkiLCJjb252ZXJ0ZWREYXRhIiwiT3B0aW9ucyIsImZyb21FbGVtZW50IiwiSW5wdXRDb21wYXQiLCJleGNsdWRlZERhdGEiLCJkYXRhc2V0IiwiU2VsZWN0MiIsIl9nZW5lcmF0ZUlkIiwiRGF0YUFkYXB0ZXIiLCJfcGxhY2VDb250YWluZXIiLCJTZWxlY3Rpb25BZGFwdGVyIiwiRHJvcGRvd25BZGFwdGVyIiwiUmVzdWx0c0FkYXB0ZXIiLCJfYmluZEFkYXB0ZXJzIiwiX3JlZ2lzdGVyRG9tRXZlbnRzIiwiX3JlZ2lzdGVyRGF0YUV2ZW50cyIsIl9yZWdpc3RlclNlbGVjdGlvbkV2ZW50cyIsIl9yZWdpc3RlckRyb3Bkb3duRXZlbnRzIiwiX3JlZ2lzdGVyUmVzdWx0c0V2ZW50cyIsIl9yZWdpc3RlckV2ZW50cyIsImluaXRpYWxEYXRhIiwiX3N5bmNBdHRyaWJ1dGVzIiwiX3Jlc29sdmVXaWR0aCIsIldJRFRIIiwic3R5bGVXaWR0aCIsImVsZW1lbnRXaWR0aCIsIl9zeW5jQSIsIl9zeW5jUyIsIl9zeW5jU3VidHJlZSIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJNb3pNdXRhdGlvbk9ic2VydmVyIiwiX29ic2VydmVyIiwibXV0YXRpb25zIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJub25SZWxheUV2ZW50cyIsInRvZ2dsZURyb3Bkb3duIiwiYWRkZWROb2RlcyIsInJlbW92ZWROb2RlcyIsImFjdHVhbFRyaWdnZXIiLCJwcmVUcmlnZ2VyTWFwIiwicHJlVHJpZ2dlck5hbWUiLCJwcmVUcmlnZ2VyQXJncyIsIm5ld1ZhbCIsImRpc2Nvbm5lY3QiLCJ0aGlzTWV0aG9kcyIsImluc3RhbmNlT3B0aW9ucyIsImluc3RhbmNlIiwiJGpzY29tcCIsInNjb3BlIiwiZmluZEludGVybmFsIiwidSIsIkMiLCJEIiwiTyIsIkFTU1VNRV9FUzUiLCJBU1NVTUVfTk9fTkFUSVZFX01BUCIsIkFTU1VNRV9OT19OQVRJVkVfU0VUIiwiZGVmaW5lUHJvcGVydGllcyIsImdldEdsb2JhbCIsInBvbHlmaWxsIiwidGFibGVFeHBvcnQiLCJ0Ym9keVNlbGVjdG9yIiwidGZvb3RTZWxlY3RvciIsIlAiLCJjZWxsSW5kZXgiLCJyb3dJbmRleCIsInIiLCJ5YSIsIlIiLCJLIiwiemEiLCJpZ25vcmVDb2x1bW4iLCJRIiwiQiIsImgiLCJvbklnbm9yZVJvdyIsImlnbm9yZVJvdyIsIkciLCJmb3JFYWNoIiwiWSIsImxhIiwiY29uc29sZUxvZyIsIm91dHB1dCIsIm91dHB1dE1vZGUiLCJMIiwiVVJMIiwid2Via2l0VVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwic2F2ZUFzIiwiZmlsZU5hbWUiLCJIIiwibWEiLCJjb2xzcGFuIiwidGV4dFBvcyIsInRhYmxlIiwiY29sdW1ucyIsImNvbHVtbiIsImhhbGlnbiIsInJvd3NwYW4iLCJ2YWxpZ24iLCJyb3ciLCJmb250U2l6ZSIsIm5hIiwiaW1hZ2VzIiwib2EiLCJBYSIsIkltYWdlIiwiY3Jvc3NPcmlnaW4iLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwidG9EYXRhVVJMIiwicGEiLCJaIiwiTSIsImFhIiwianNwZGYiLCJkdyIsImRoIiwic2V0RHJhd0NvbG9yIiwic2V0RmlsbENvbG9yIiwic2V0TGluZVdpZHRoIiwibWluIiwiYWRkSW1hZ2UiLCJFYSIsInFhIiwib25BdXRvdGFibGVUZXh0IiwicHJldmlvdXNTaWJsaW5nIiwiaW50ZXJuYWwiLCJnZXRGb250U2l6ZSIsInNldEZvbnRUeXBlIiwiZ2V0U3RyaW5nVW5pdFdpZHRoIiwiYXV0b1RhYmxlVGV4dCIsImJhIiwiZWEiLCJudW1iZXJzIiwidGhvdXNhbmRzU2VwYXJhdG9yIiwiZGVjaW1hbE1hcmsiLCJCYSIsInoiLCJoYXNBdHRyaWJ1dGUiLCJvbkNlbGxIdG1sRGF0YSIsImJvb3RzdHJhcFRhYmxlIiwiaHRtbENvbnRlbnQiLCJleGNlbEZpbGVGb3JtYXQiLCJvbkNlbGxEYXRhIiwiQ2EiLCJyYSIsImFsaWduIiwiYmNvbG9yIiwiY29sb3IiLCJmc3R5bGUiLCJjdXJyZW50U3R5bGUiLCJwYXJlbnRFbGVtZW50IiwiZmEiLCJTaGVldE5hbWVzIiwiU2hlZXRzIiwic2EiLCJBcnJheUJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJEYSIsIlhMU1giLCJ1dGlscyIsImVuY29kZV9jZWxsIiwiU1NGIiwiX3RhYmxlIiwiVVRDIiwiZW5jb2RlX3JhbmdlIiwibXNTYXZlT3JPcGVuQmxvYiIsIkJsb2IiLCJ3cml0ZSIsImRvd25sb2FkIiwiY3JlYXRlRXZlbnQiLCJjYSIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJjcmVhdGVFdmVudE9iamVjdCIsImZpcmVFdmVudCIsIm9uY2xpY2siLCJyZXZva2VPYmplY3RVUkwiLCJjc3ZFbmNsb3N1cmUiLCJjc3ZTZXBhcmF0b3IiLCJjc3ZVc2VCT00iLCJkaXNwbGF5VGFibGVOYW1lIiwiZXhjZWxSVEwiLCJleGNlbHN0eWxlcyIsImV4cG9ydEhpZGRlbkNlbGxzIiwianNvblNjb3BlIiwib3JpZW50YXRpb24iLCJmb3JtYXQiLCJtYXJnaW5zIiwib25Eb2NDcmVhdGVkIiwiYXV0b3RhYmxlIiwiY2VsbFBhZGRpbmciLCJyb3dIZWlnaHQiLCJmaWxsQ29sb3IiLCJ0ZXh0Q29sb3IiLCJmb250U3R5bGUiLCJoZWFkZXJTdHlsZXMiLCJhbHRlcm5hdGVSb3dTdHlsZXMiLCJvbkFmdGVyQXV0b3RhYmxlIiwib25CZWZvcmVBdXRvdGFibGUiLCJvblRhYmxlIiwib3V0cHV0SW1hZ2VzIiwib25Nc29OdW1iZXJGb3JtYXQiLCJwZGZtYWtlIiwiZG9jRGVmaW5pdGlvbiIsInBhZ2VPcmllbnRhdGlvbiIsImRlZmF1bHRTdHlsZSIsImZvbnQiLCJmb250cyIsInRoZWFkU2VsZWN0b3IiLCJ0YWJsZU5hbWUiLCJ3b3Jrc2hlZXROYW1lIiwiSSIsIlUiLCJoYSIsInRvTG9jYWxlU3RyaW5nIiwiQSIsIlMiLCJpYSIsInN0cmluZ2lmeSIsIkoiLCJqYSIsIkYiLCJFIiwiTiIsIlQiLCJ0b0lTT1N0cmluZyIsIlYiLCJ1YSIsImthIiwiYm9va1R5cGUiLCJib29rU1NUIiwiaHRtbDJjYW52YXMiLCJhdG9iIiwidmEiLCJjb2xTcGFuIiwicm93U3BhbiIsImhlYWRlclJvd3MiLCJ3aWR0aHMiLCJwZGZNYWtlIiwiUm9ib3RvIiwibm9ybWFsIiwiYm9sZCIsIml0YWxpY3MiLCJib2xkaXRhbGljcyIsImNyZWF0ZVBkZiIsImdldEJ1ZmZlciIsImRpbSIsInBhZ2VzcGxpdCIsIndhIiwianNQREYiLCJhZGRIVE1MIiwiVyIsImEwIiwiYTEiLCJhMiIsImEzIiwiYTQiLCJkYSIsIlgiLCJ4YSIsInJvd3MiLCJyb3dvcHRpb25zIiwiYmVmb3JlUGFnZUNvbnRlbnQiLCJwYWdlQ291bnQiLCJoZWFkZXJSb3ciLCJjcmVhdGVkSGVhZGVyQ2VsbCIsImRhdGFLZXkiLCJjb250ZW50V2lkdGgiLCJoZWlnaHRSYXRpbyIsImNyZWF0ZWRDZWxsIiwiZHJhd0hlYWRlckNlbGwiLCJkcmF3Q2VsbCIsImZpbGxTdHlsZSIsImtpZHMiLCJoZWFkZXJyb3dzIiwiYXV0b1RhYmxlIiwic3RhcnRZIiwiYXV0b1RhYmxlRW5kUG9zWSIsIm1vbWVudCIsImhvb2tDYWxsYmFjayIsInNldEhvb2tDYWxsYmFjayIsImlzT2JqZWN0IiwiaXNPYmplY3RFbXB0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJpc1VuZGVmaW5lZCIsImlzTnVtYmVyIiwiaXNEYXRlIiwicmVzIiwiaGFzT3duUHJvcCIsInZhbHVlT2YiLCJjcmVhdGVVVEMiLCJsb2NhbGUiLCJzdHJpY3QiLCJjcmVhdGVMb2NhbE9yVVRDIiwidXRjIiwiZGVmYXVsdFBhcnNpbmdGbGFncyIsInVudXNlZFRva2VucyIsInVudXNlZElucHV0IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRNb250aCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJpc28iLCJwYXJzZWREYXRlUGFydHMiLCJtZXJpZGllbSIsInJmYzI4MjIiLCJ3ZWVrZGF5TWlzbWF0Y2giLCJnZXRQYXJzaW5nRmxhZ3MiLCJfcGYiLCJzb21lIiwiZnVuIiwiaXNWYWxpZCIsIl9pc1ZhbGlkIiwiZmxhZ3MiLCJwYXJzZWRQYXJ0cyIsImlzTm93VmFsaWQiLCJfZCIsImludmFsaWRXZWVrZGF5IiwiX3N0cmljdCIsImJpZ0hvdXIiLCJpc0Zyb3plbiIsImNyZWF0ZUludmFsaWQiLCJOYU4iLCJtb21lbnRQcm9wZXJ0aWVzIiwiY29weUNvbmZpZyIsImZyb20iLCJfaXNBTW9tZW50T2JqZWN0IiwiX2kiLCJfZiIsIl9sIiwiX3R6bSIsIl9pc1VUQyIsIl9vZmZzZXQiLCJfbG9jYWxlIiwidXBkYXRlSW5Qcm9ncmVzcyIsIk1vbWVudCIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50IiwiYWJzRmxvb3IiLCJudW1iZXIiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwiY29tcGFyZUFycmF5cyIsImFycmF5MSIsImFycmF5MiIsImRvbnRDb252ZXJ0IiwibGVuZ3RoRGlmZiIsImRpZmZzIiwic3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzIiwiZGVwcmVjYXRlIiwiZmlyc3RUaW1lIiwiZGVwcmVjYXRpb25IYW5kbGVyIiwiZGVwcmVjYXRpb25zIiwiZGVwcmVjYXRlU2ltcGxlIiwiRnVuY3Rpb24iLCJfY29uZmlnIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50IiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJfb3JkaW5hbFBhcnNlIiwibWVyZ2VDb25maWdzIiwicGFyZW50Q29uZmlnIiwiY2hpbGRDb25maWciLCJMb2NhbGUiLCJkZWZhdWx0Q2FsZW5kYXIiLCJzYW1lRGF5IiwibmV4dERheSIsIm5leHRXZWVrIiwibGFzdERheSIsImxhc3RXZWVrIiwic2FtZUVsc2UiLCJjYWxlbmRhciIsIm1vbSIsIl9jYWxlbmRhciIsImRlZmF1bHRMb25nRGF0ZUZvcm1hdCIsIkxUUyIsIkxUIiwiTEwiLCJMTEwiLCJMTExMIiwibG9uZ0RhdGVGb3JtYXQiLCJfbG9uZ0RhdGVGb3JtYXQiLCJmb3JtYXRVcHBlciIsImRlZmF1bHRJbnZhbGlkRGF0ZSIsImludmFsaWREYXRlIiwiX2ludmFsaWREYXRlIiwiZGVmYXVsdE9yZGluYWwiLCJkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIm9yZGluYWwiLCJfb3JkaW5hbCIsImRlZmF1bHRSZWxhdGl2ZVRpbWUiLCJmdXR1cmUiLCJwYXN0Iiwic3MiLCJtbSIsImhoIiwiZGQiLCJNTSIsInl5IiwicmVsYXRpdmVUaW1lIiwid2l0aG91dFN1ZmZpeCIsImlzRnV0dXJlIiwiX3JlbGF0aXZlVGltZSIsInBhc3RGdXR1cmUiLCJhbGlhc2VzIiwiYWRkVW5pdEFsaWFzIiwic2hvcnRoYW5kIiwibG93ZXJDYXNlIiwibm9ybWFsaXplVW5pdHMiLCJ1bml0cyIsIm5vcm1hbGl6ZU9iamVjdFVuaXRzIiwiaW5wdXRPYmplY3QiLCJub3JtYWxpemVkSW5wdXQiLCJub3JtYWxpemVkUHJvcCIsInByaW9yaXRpZXMiLCJhZGRVbml0UHJpb3JpdHkiLCJwcmlvcml0eSIsImdldFByaW9yaXRpemVkVW5pdHMiLCJ1bml0c09iaiIsInplcm9GaWxsIiwidGFyZ2V0TGVuZ3RoIiwiZm9yY2VTaWduIiwiYWJzTnVtYmVyIiwiemVyb3NUb0ZpbGwiLCJzaWduIiwicG93IiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJwYWRkZWQiLCJsb2NhbGVEYXRhIiwicmVtb3ZlRm9ybWF0dGluZ1Rva2VucyIsIm1ha2VGb3JtYXRGdW5jdGlvbiIsImFycmF5IiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwicmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zIiwibWF0Y2gxIiwibWF0Y2gyIiwibWF0Y2gzIiwibWF0Y2g0IiwibWF0Y2g2IiwibWF0Y2gxdG8yIiwibWF0Y2gzdG80IiwibWF0Y2g1dG82IiwibWF0Y2gxdG8zIiwibWF0Y2gxdG80IiwibWF0Y2gxdG82IiwibWF0Y2hVbnNpZ25lZCIsIm1hdGNoU2lnbmVkIiwibWF0Y2hPZmZzZXQiLCJtYXRjaFNob3J0T2Zmc2V0IiwibWF0Y2hUaW1lc3RhbXAiLCJtYXRjaFdvcmQiLCJyZWdleGVzIiwiYWRkUmVnZXhUb2tlbiIsInJlZ2V4Iiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsInVuZXNjYXBlRm9ybWF0IiwicmVnZXhFc2NhcGUiLCJwMSIsInAyIiwicDMiLCJwNCIsImFkZFBhcnNlVG9rZW4iLCJhZGRXZWVrUGFyc2VUb2tlbiIsIl93IiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJfYSIsIllFQVIiLCJNT05USCIsIkRBVEUiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJXRUVLIiwiV0VFS0RBWSIsInllYXIiLCJwYXJzZVR3b0RpZ2l0WWVhciIsImRheXNJblllYXIiLCJpc0xlYXBZZWFyIiwiZ2V0U2V0WWVhciIsIm1ha2VHZXRTZXQiLCJnZXRJc0xlYXBZZWFyIiwia2VlcFRpbWUiLCJzZXQkMSIsIm1vbnRoIiwiZGF0ZSIsImRheXNJbk1vbnRoIiwic3RyaW5nR2V0Iiwic3RyaW5nU2V0IiwicHJpb3JpdGl6ZWQiLCJtb2QiLCJtb2RNb250aCIsIm1vbnRoc1Nob3J0IiwibW9udGhzIiwibW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwibW9udGhzUGFyc2UiLCJNT05USFNfSU5fRk9STUFUIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsImxvY2FsZU1vbnRocyIsIl9tb250aHMiLCJpc0Zvcm1hdCIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsImxvY2FsZU1vbnRoc1Nob3J0IiwiX21vbnRoc1Nob3J0IiwiaGFuZGxlU3RyaWN0UGFyc2UiLCJtb250aE5hbWUiLCJpaSIsImxsYyIsInRvTG9jYWxlTG93ZXJDYXNlIiwiX21vbnRoc1BhcnNlIiwiX2xvbmdNb250aHNQYXJzZSIsIl9zaG9ydE1vbnRoc1BhcnNlIiwibG9jYWxlTW9udGhzUGFyc2UiLCJfbW9udGhzUGFyc2VFeGFjdCIsInNldE1vbnRoIiwiZGF5T2ZNb250aCIsImdldFNldE1vbnRoIiwiZ2V0RGF5c0luTW9udGgiLCJkZWZhdWx0TW9udGhzU2hvcnRSZWdleCIsImNvbXB1dGVNb250aHNQYXJzZSIsIl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IiwiX21vbnRoc1Nob3J0UmVnZXgiLCJkZWZhdWx0TW9udGhzUmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzUmVnZXgiLCJjbXBMZW5SZXYiLCJzaG9ydFBpZWNlcyIsImxvbmdQaWVjZXMiLCJtaXhlZFBpZWNlcyIsImNyZWF0ZURhdGUiLCJtcyIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJjcmVhdGVVVENEYXRlIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENGdWxsWWVhciIsImZpcnN0V2Vla09mZnNldCIsImRvdyIsImRveSIsImZ3ZCIsImZ3ZGx3IiwiZ2V0VVRDRGF5IiwiZGF5T2ZZZWFyRnJvbVdlZWtzIiwid2VlayIsIndlZWtkYXkiLCJsb2NhbFdlZWtkYXkiLCJ3ZWVrT2Zmc2V0IiwiZGF5T2ZZZWFyIiwicmVzWWVhciIsInJlc0RheU9mWWVhciIsIndlZWtPZlllYXIiLCJyZXNXZWVrIiwid2Vla3NJblllYXIiLCJ3ZWVrT2Zmc2V0TmV4dCIsImxvY2FsZVdlZWsiLCJfd2VlayIsImRlZmF1bHRMb2NhbGVXZWVrIiwibG9jYWxlRmlyc3REYXlPZldlZWsiLCJsb2NhbGVGaXJzdERheU9mWWVhciIsImdldFNldFdlZWsiLCJnZXRTZXRJU09XZWVrIiwid2Vla2RheXNNaW4iLCJ3ZWVrZGF5c1Nob3J0Iiwid2Vla2RheXMiLCJ3ZWVrZGF5c01pblJlZ2V4Iiwid2Vla2RheXNTaG9ydFJlZ2V4Iiwid2Vla2RheXNSZWdleCIsIndlZWtkYXlzUGFyc2UiLCJwYXJzZVdlZWtkYXkiLCJwYXJzZUlzb1dlZWtkYXkiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXMiLCJsb2NhbGVXZWVrZGF5cyIsIl93ZWVrZGF5cyIsImRheSIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0IiwibG9jYWxlV2Vla2RheXNTaG9ydCIsIl93ZWVrZGF5c1Nob3J0IiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluIiwibG9jYWxlV2Vla2RheXNNaW4iLCJfd2Vla2RheXNNaW4iLCJoYW5kbGVTdHJpY3RQYXJzZSQxIiwid2Vla2RheU5hbWUiLCJfd2Vla2RheXNQYXJzZSIsIl9zaG9ydFdlZWtkYXlzUGFyc2UiLCJfbWluV2Vla2RheXNQYXJzZSIsImxvY2FsZVdlZWtkYXlzUGFyc2UiLCJfd2Vla2RheXNQYXJzZUV4YWN0IiwiX2Z1bGxXZWVrZGF5c1BhcnNlIiwiZ2V0U2V0RGF5T2ZXZWVrIiwiZ2V0RGF5IiwiZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIiwiZ2V0U2V0SVNPRGF5T2ZXZWVrIiwiZGVmYXVsdFdlZWtkYXlzUmVnZXgiLCJjb21wdXRlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1N0cmljdFJlZ2V4IiwiX3dlZWtkYXlzUmVnZXgiLCJkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsIl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJtaW5QaWVjZXMiLCJtaW5wIiwic2hvcnRwIiwibG9uZ3AiLCJoRm9ybWF0IiwiaG91cnMiLCJrRm9ybWF0IiwibWludXRlcyIsInNlY29uZHMiLCJsb3dlcmNhc2UiLCJtYXRjaE1lcmlkaWVtIiwiX21lcmlkaWVtUGFyc2UiLCJrSW5wdXQiLCJfaXNQbSIsImlzUE0iLCJfbWVyaWRpZW0iLCJwb3MxIiwicG9zMiIsImxvY2FsZUlzUE0iLCJkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSIsImxvY2FsZU1lcmlkaWVtIiwiaXNMb3dlciIsImdldFNldEhvdXIiLCJiYXNlQ29uZmlnIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIm1lcmlkaWVtUGFyc2UiLCJsb2NhbGVzIiwibG9jYWxlRmFtaWxpZXMiLCJnbG9iYWxMb2NhbGUiLCJub3JtYWxpemVMb2NhbGUiLCJjaG9vc2VMb2NhbGUiLCJuYW1lcyIsImxvYWRMb2NhbGUiLCJvbGRMb2NhbGUiLCJfYWJiciIsImFsaWFzZWRSZXF1aXJlIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwiZ2V0TG9jYWxlIiwiZGVmaW5lTG9jYWxlIiwiYWJiciIsInBhcmVudExvY2FsZSIsInVwZGF0ZUxvY2FsZSIsInRtcExvY2FsZSIsImxpc3RMb2NhbGVzIiwiY2hlY2tPdmVyZmxvdyIsIl9vdmVyZmxvd0RheU9mWWVhciIsIl9vdmVyZmxvd1dlZWtzIiwiX292ZXJmbG93V2Vla2RheSIsImN1cnJlbnREYXRlQXJyYXkiLCJub3dWYWx1ZSIsIl91c2VVVEMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRNb250aCIsImdldERhdGUiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsImV4cGVjdGVkV2Vla2RheSIsInllYXJUb1VzZSIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9kYXlPZlllYXIiLCJfbmV4dERheSIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwid2Vla1llYXIiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJHRyIsImNyZWF0ZUxvY2FsIiwiY3VyV2VlayIsImdnIiwiZXh0ZW5kZWRJc29SZWdleCIsImJhc2ljSXNvUmVnZXgiLCJ0elJlZ2V4IiwiaXNvRGF0ZXMiLCJpc29UaW1lcyIsImFzcE5ldEpzb25SZWdleCIsImNvbmZpZ0Zyb21JU08iLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0IiwiY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCIsImV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MiLCJ5ZWFyU3RyIiwibW9udGhTdHIiLCJkYXlTdHIiLCJob3VyU3RyIiwibWludXRlU3RyIiwic2Vjb25kU3RyIiwidW50cnVuY2F0ZVllYXIiLCJwcmVwcm9jZXNzUkZDMjgyMiIsImNoZWNrV2Vla2RheSIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsIndlZWtkYXlQcm92aWRlZCIsIndlZWtkYXlBY3R1YWwiLCJvYnNPZmZzZXRzIiwiVVQiLCJHTVQiLCJFRFQiLCJFU1QiLCJDRFQiLCJDU1QiLCJNRFQiLCJNU1QiLCJQRFQiLCJQU1QiLCJjYWxjdWxhdGVPZmZzZXQiLCJvYnNPZmZzZXQiLCJtaWxpdGFyeU9mZnNldCIsIm51bU9mZnNldCIsImhtIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJwYXJzZWRBcnJheSIsImNvbmZpZ0Zyb21TdHJpbmciLCJjcmVhdGVGcm9tSW5wdXRGYWxsYmFjayIsIklTT184NjAxIiwiUkZDXzI4MjIiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsIm1lcmlkaWVtRml4V3JhcCIsImhvdXIiLCJpc1BtIiwibWVyaWRpZW1Ib3VyIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInNjb3JlIiwiY29uZmlnRnJvbU9iamVjdCIsIm1pbnV0ZSIsIm1pbGxpc2Vjb25kIiwiY3JlYXRlRnJvbUNvbmZpZyIsInByZXBhcmVDb25maWciLCJwcmVwYXJzZSIsImNvbmZpZ0Zyb21JbnB1dCIsImlzVVRDIiwicHJvdG90eXBlTWluIiwib3RoZXIiLCJwcm90b3R5cGVNYXgiLCJwaWNrQnkiLCJtb21lbnRzIiwib3JkZXJpbmciLCJpc0R1cmF0aW9uVmFsaWQiLCJ1bml0SGFzRGVjaW1hbCIsImlzVmFsaWQkMSIsImNyZWF0ZUludmFsaWQkMSIsImNyZWF0ZUR1cmF0aW9uIiwiRHVyYXRpb24iLCJ5ZWFycyIsInF1YXJ0ZXJzIiwicXVhcnRlciIsIndlZWtzIiwiZGF5cyIsIm1pbGxpc2Vjb25kcyIsIl9taWxsaXNlY29uZHMiLCJfZGF5cyIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwiYWJzUm91bmQiLCJzZXBhcmF0b3IiLCJ1dGNPZmZzZXQiLCJvZmZzZXRGcm9tU3RyaW5nIiwiY2h1bmtPZmZzZXQiLCJjaHVuayIsImNsb25lV2l0aE9mZnNldCIsIm1vZGVsIiwic2V0VGltZSIsImxvY2FsIiwiZ2V0RGF0ZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwiZ2V0U2V0T2Zmc2V0Iiwia2VlcExvY2FsVGltZSIsImtlZXBNaW51dGVzIiwibG9jYWxBZGp1c3QiLCJfY2hhbmdlSW5Qcm9ncmVzcyIsImFkZFN1YnRyYWN0IiwiZ2V0U2V0Wm9uZSIsInNldE9mZnNldFRvVVRDIiwic2V0T2Zmc2V0VG9Mb2NhbCIsInNldE9mZnNldFRvUGFyc2VkT2Zmc2V0IiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRGF5bGlnaHRTYXZpbmdUaW1lIiwiaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkIiwiX2lzRFNUU2hpZnRlZCIsImlzVXRjT2Zmc2V0IiwiaXNVdGMiLCJhc3BOZXRSZWdleCIsImlzb1JlZ2V4IiwiZGlmZlJlcyIsInBhcnNlSXNvIiwibW9tZW50c0RpZmZlcmVuY2UiLCJpbnZhbGlkIiwiaW5wIiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImlzQWZ0ZXIiLCJpc0JlZm9yZSIsImNyZWF0ZUFkZGVyIiwicGVyaW9kIiwiZHVyIiwiaXNBZGRpbmciLCJnZXRDYWxlbmRhckZvcm1hdCIsIm15TW9tZW50IiwiY2FsZW5kYXIkMSIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJsb2NhbElucHV0IiwiZW5kT2YiLCJpc0JldHdlZW4iLCJpbmNsdXNpdml0eSIsImlzU2FtZSIsImlucHV0TXMiLCJpc1NhbWVPckFmdGVyIiwiaXNTYW1lT3JCZWZvcmUiLCJhc0Zsb2F0Iiwiem9uZURlbHRhIiwibW9udGhEaWZmIiwid2hvbGVNb250aERpZmYiLCJhbmNob3IiLCJhbmNob3IyIiwiYWRqdXN0IiwiZGVmYXVsdEZvcm1hdCIsImRlZmF1bHRGb3JtYXRVdGMiLCJrZWVwT2Zmc2V0IiwidG9EYXRlIiwiem9uZSIsImRhdGV0aW1lIiwiaW5wdXRTdHJpbmciLCJwb3N0Zm9ybWF0IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJuZXdMb2NhbGVEYXRhIiwiaXNvV2Vla2RheSIsInVuaXgiLCJ0b09iamVjdCIsInRvSlNPTiIsImlzVmFsaWQkMiIsInBhcnNpbmdGbGFncyIsImludmFsaWRBdCIsImNyZWF0aW9uRGF0YSIsImlzb1dlZWtZZWFyIiwiYWRkV2Vla1llYXJGb3JtYXRUb2tlbiIsImdldFNldFdlZWtZZWFyIiwiZ2V0U2V0V2Vla1llYXJIZWxwZXIiLCJnZXRTZXRJU09XZWVrWWVhciIsImlzb1dlZWsiLCJnZXRJU09XZWVrc0luWWVhciIsImdldFdlZWtzSW5ZZWFyIiwid2Vla0luZm8iLCJ3ZWVrc1RhcmdldCIsInNldFdlZWtBbGwiLCJkYXlPZlllYXJEYXRhIiwiZ2V0U2V0UXVhcnRlciIsImdldFNldERheU9mTW9udGgiLCJnZXRTZXREYXlPZlllYXIiLCJnZXRTZXRNaW51dGUiLCJnZXRTZXRTZWNvbmQiLCJwYXJzZU1zIiwiZ2V0U2V0TWlsbGlzZWNvbmQiLCJnZXRab25lQWJiciIsImdldFpvbmVOYW1lIiwiaXNvV2Vla3MiLCJpc29XZWVrc0luWWVhciIsInBhcnNlWm9uZSIsImlzRFNUIiwiem9uZUFiYnIiLCJ6b25lTmFtZSIsImRhdGVzIiwiaXNEU1RTaGlmdGVkIiwiY3JlYXRlVW5peCIsImNyZWF0ZUluWm9uZSIsInByZVBhcnNlUG9zdEZvcm1hdCIsInByb3RvJDEiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwiZ2V0JDEiLCJmaWVsZCIsImxpc3RNb250aHNJbXBsIiwib3V0IiwibGlzdFdlZWtkYXlzSW1wbCIsImxvY2FsZVNvcnRlZCIsImxpc3RNb250aHMiLCJsaXN0TW9udGhzU2hvcnQiLCJsaXN0V2Vla2RheXMiLCJsaXN0V2Vla2RheXNTaG9ydCIsImxpc3RXZWVrZGF5c01pbiIsImxhbmdEYXRhIiwibWF0aEFicyIsImFkZFN1YnRyYWN0JDEiLCJhZGQkMSIsInN1YnRyYWN0JDEiLCJhYnNDZWlsIiwiYnViYmxlIiwibW9udGhzRnJvbURheXMiLCJtb250aHNUb0RheXMiLCJkYXlzVG9Nb250aHMiLCJhcyIsInZhbHVlT2YkMSIsIm1ha2VBcyIsImFsaWFzIiwiYXNNaWxsaXNlY29uZHMiLCJhc1NlY29uZHMiLCJhc01pbnV0ZXMiLCJhc0hvdXJzIiwiYXNEYXlzIiwiYXNXZWVrcyIsImFzTW9udGhzIiwiYXNZZWFycyIsImNsb25lJDEiLCJnZXQkMiIsIm1ha2VHZXR0ZXIiLCJ0aHJlc2hvbGRzIiwic3Vic3RpdHV0ZVRpbWVBZ28iLCJyZWxhdGl2ZVRpbWUkMSIsInBvc05lZ0R1cmF0aW9uIiwiZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmciLCJyb3VuZGluZ0Z1bmN0aW9uIiwiZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkIiwidGhyZXNob2xkIiwibGltaXQiLCJ3aXRoU3VmZml4IiwiYWJzJDEiLCJ0b0lTT1N0cmluZyQxIiwidG9GaXhlZCIsInRvdGFsU2lnbiIsInltU2lnbiIsImRheXNTaWduIiwiaG1zU2lnbiIsInByb3RvJDIiLCJ0b0lzb1N0cmluZyIsInJlbGF0aXZlVGltZVJvdW5kaW5nIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwiSFRNTDVfRk1UIiwiREFURVRJTUVfTE9DQUwiLCJEQVRFVElNRV9MT0NBTF9TRUNPTkRTIiwiREFURVRJTUVfTE9DQUxfTVMiLCJUSU1FIiwiVElNRV9TRUNPTkRTIiwiVElNRV9NUyIsIkRPTVB1cmlmeSIsImlzU3VwcG9ydGVkIiwib3JpZ2luYWxEb2N1bWVudCIsIkRvY3VtZW50RnJhZ21lbnQiLCJIVE1MVGVtcGxhdGVFbGVtZW50IiwiTm9kZUZpbHRlciIsIk5hbWVkTm9kZU1hcCIsIk1vek5hbWVkQXR0ck1hcCIsIlRleHQiLCJDb21tZW50IiwiY3JlYXRlTm9kZUl0ZXJhdG9yIiwiaW1wb3J0Tm9kZSIsIl9hZGRUb1NldCIsIl9jbG9uZU9iaiIsIm5ld09iamVjdCIsInByb3BlcnR5IiwiQUxMT1dFRF9UQUdTIiwiREVGQVVMVF9BTExPV0VEX1RBR1MiLCJBTExPV0VEX0FUVFIiLCJERUZBVUxUX0FMTE9XRURfQVRUUiIsIkZPUkJJRF9UQUdTIiwiRk9SQklEX0FUVFIiLCJBTExPV19EQVRBX0FUVFIiLCJBTExPV19VTktOT1dOX1BST1RPQ09MUyIsIlNBRkVfRk9SX0pRVUVSWSIsIlNBRkVfRk9SX1RFTVBMQVRFUyIsIk1VU1RBQ0hFX0VYUFIiLCJFUkJfRVhQUiIsIldIT0xFX0RPQ1VNRU5UIiwiUkVUVVJOX0RPTSIsIlJFVFVSTl9ET01fRlJBR01FTlQiLCJSRVRVUk5fRE9NX0lNUE9SVCIsIlNBTklUSVpFX0RPTSIsIktFRVBfQ09OVEVOVCIsIkZPUkJJRF9DT05URU5UUyIsIkRBVEFfVVJJX1RBR1MiLCJVUklfU0FGRV9BVFRSSUJVVEVTIiwiQ09ORklHIiwiZm9ybUVsZW1lbnQiLCJfcGFyc2VDb25maWciLCJBRERfVEFHUyIsIkFERF9BVFRSIiwiZnJlZXplIiwiX2ZvcmNlUmVtb3ZlIiwib3V0ZXJIVE1MIiwiX2luaXREb2N1bWVudCIsImRpcnR5IiwiX2NyZWF0ZUl0ZXJhdG9yIiwiU0hPV19FTEVNRU5UIiwiU0hPV19DT01NRU5UIiwiU0hPV19URVhUIiwiRklMVEVSX0FDQ0VQVCIsIl9pc0Nsb2JiZXJlZCIsIl9zYW5pdGl6ZUVsZW1lbnRzIiwiY3VycmVudE5vZGUiLCJfZXhlY3V0ZUhvb2siLCJpbnNlcnRBZGphY2VudEhUTUwiLCJEQVRBX0FUVFIiLCJJU19BTExPV0VEX1VSSSIsIklTX1NDUklQVF9PUl9EQVRBIiwiQVRUUl9XSElURVNQQUNFIiwiX3Nhbml0aXplQXR0cmlidXRlcyIsImxjTmFtZSIsImlkQXR0ciIsImhvb2tFdmVudCIsImF0dHJOYW1lIiwiYXR0clZhbHVlIiwia2VlcEF0dHIiLCJfc2FuaXRpemVTaGFkb3dET00iLCJzaGFkb3dOb2RlIiwic2hhZG93SXRlcmF0b3IiLCJuZXh0Tm9kZSIsImVudHJ5UG9pbnQiLCJzYW5pdGl6ZSIsIm9sZE5vZGUiLCJub2RlSXRlcmF0b3IiLCJyZXR1cm5Ob2RlIiwidG9TdGF0aWNIVE1MIiwiYWRkSG9vayIsImhvb2tGdW5jdGlvbiIsInJlbW92ZUhvb2siLCJyZW1vdmVIb29rcyIsInJlbW92ZUFsbEhvb2tzIiwia3Zzb3J0YWJsZU1vZHVsZSIsImt2c29ydGFibGVGYWN0b3J5Iiwia3Zzb3J0YWJsZUVycm9yIiwiZHJhZ0VsIiwicGFyZW50RWwiLCJnaG9zdEVsIiwiY2xvbmVFbCIsInJvb3RFbCIsIm5leHRFbCIsImxhc3REb3duRWwiLCJzY3JvbGxFbCIsInNjcm9sbFBhcmVudEVsIiwic2Nyb2xsQ3VzdG9tRm4iLCJsYXN0RWwiLCJsYXN0Q1NTIiwibGFzdFBhcmVudENTUyIsIm9sZEluZGV4IiwibmV3SW5kZXgiLCJhY3RpdmVHcm91cCIsInB1dEt2U29ydGFibGUiLCJhdXRvU2Nyb2xsIiwidGFwRXZ0IiwidG91Y2hFdnQiLCJtb3ZlZCIsIlJfU1BBQ0UiLCJSX0ZMT0FUIiwiWmVwdG8iLCJQb2x5bWVyIiwiY2FwdHVyZU1vZGUiLCJzdXBwb3J0RHJhZ2dhYmxlIiwic3VwcG9ydENzc1BvaW50ZXJFdmVudHMiLCJwb2ludGVyRXZlbnRzIiwiX3NpbGVudCIsInNhdmVkSW5wdXRDaGVja2VkIiwidG91Y2hEcmFnT3Zlckxpc3RlbmVycyIsIl9hdXRvU2Nyb2xsIiwiX3Rocm90dGxlIiwiX3RoaXMiLCJzZW5zIiwic2Nyb2xsU2Vuc2l0aXZpdHkiLCJzY3JvbGxTcGVlZCIsIndpbldpZHRoIiwid2luSGVpZ2h0IiwidngiLCJ2eSIsInNjcm9sbE9mZnNldFgiLCJzY3JvbGxPZmZzZXRZIiwic2Nyb2xsRm4iLCJwaWQiLCJfcHJlcGFyZUdyb3VwIiwidG9GbiIsInB1bGwiLCJncm91cCIsImZyb21Hcm91cCIsIm9yaWdpbmFsR3JvdXAiLCJjaGVja1B1bGwiLCJjaGVja1B1dCIsInB1dCIsInJldmVydENsb25lIiwiS3ZTb3J0YWJsZSIsIl9leHRlbmQiLCJzdG9yZSIsImRyYWdnYWJsZSIsImdob3N0Q2xhc3MiLCJjaG9zZW5DbGFzcyIsImRyYWdDbGFzcyIsInByZXZlbnRPbkZpbHRlciIsInNldERhdGEiLCJkYXRhVHJhbnNmZXIiLCJkcm9wQnViYmxlIiwiZHJhZ292ZXJCdWJibGUiLCJkYXRhSWRBdHRyIiwiZm9yY2VGYWxsYmFjayIsImZhbGxiYWNrQ2xhc3MiLCJmYWxsYmFja09uQm9keSIsImZhbGxiYWNrVG9sZXJhbmNlIiwiZmFsbGJhY2tPZmZzZXQiLCJuYXRpdmVEcmFnZ2FibGUiLCJfb24iLCJfb25UYXBTdGFydCIsIl9vbkRyYWdPdmVyIiwidG91Y2giLCJvcmlnaW5hbFRhcmdldCIsInNoYWRvd1Jvb3QiLCJzdGFydEluZGV4IiwiX3NhdmVJbnB1dENoZWNrZWRTdGF0ZSIsIl9jbG9zZXN0IiwiX2luZGV4IiwiX2Rpc3BhdGNoRXZlbnQiLCJjcml0ZXJpYSIsIl9wcmVwYXJlRHJhZ1N0YXJ0IiwiZHJhZ1N0YXJ0Rm4iLCJfbGFzdFgiLCJfbGFzdFkiLCJfZGlzYWJsZURlbGF5ZWREcmFnIiwiX3RvZ2dsZUNsYXNzIiwiX3RyaWdnZXJEcmFnU3RhcnQiLCJfZmluZCIsIl9kaXNhYmxlRHJhZ2dhYmxlIiwiX29uRHJvcCIsIl9kcmFnU3RhcnRUaW1lciIsIl9vZmYiLCJfb25EcmFnU3RhcnQiLCJnZXRTZWxlY3Rpb24iLCJyZW1vdmVBbGxSYW5nZXMiLCJfZHJhZ1N0YXJ0ZWQiLCJfbnVsbGluZyIsIl9lbXVsYXRlRHJhZ092ZXIiLCJfY3NzIiwiZWxlbWVudEZyb21Qb2ludCIsIl9vblRvdWNoTW92ZSIsImR4IiwiZHkiLCJ0cmFuc2xhdGUzZCIsIl9hcHBlbmRHaG9zdCIsImdob3N0UmVjdCIsInVzZUZhbGxiYWNrIiwiX29mZlVwRXZlbnRzIiwiX2Nsb25lIiwiX2xvb3BJZCIsImVmZmVjdEFsbG93ZWQiLCJkcmFnUmVjdCIsInRhcmdldFJlY3QiLCJyZXZlcnQiLCJhY3RpdmVLdlNvcnRhYmxlIiwiaXNPd25lciIsImlzTW92aW5nQmV0d2Vlbkt2U29ydGFibGUiLCJjYW5Tb3J0IiwibGFzdFB1bGxNb2RlIiwiX2Nsb25lSGlkZSIsIl9naG9zdElzTGFzdCIsIl9vbk1vdmUiLCJfYW5pbWF0ZSIsImZsb2F0aW5nIiwiY3NzRmxvYXQiLCJpc1dpZGUiLCJpc0xvbmciLCJoYWxmd2F5IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibW92ZVZlY3RvciIsIl91bnNpbGVudCIsImVsVG9wIiwidGdUb3AiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJldlJlY3QiLCJjdXJyZW50UmVjdCIsInNhdmUiLCJoYW5kbGVFdmVudCIsIl9nbG9iYWxEcmFnT3ZlciIsIml0ZW1zIiwia3Zzb3J0YWJsZSIsImN0eCIsIl9tYXRjaGVzIiwiX2dldFBhcmVudE9ySG9zdCIsImRyb3BFZmZlY3QiLCJjbGFzc0xpc3QiLCJ0YXJnZXRFbCIsImZyb21FbCIsIm9uTmFtZSIsInRvRWwiLCJvcmlnaW5hbEV2dCIsIm9uTW92ZUZuIiwib25Nb3ZlIiwicmV0VmFsIiwiZHJhZ2dlZCIsImRyYWdnZWRSZWN0IiwicmVsYXRlZFJlY3QiLCJsYXN0RWxlbWVudENoaWxkIiwic3RyIiwic3VtIiwiZHN0IiwiZG9tIiwiaW5wdXRzIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJ0aHJvdHRsZSIsImNyZWF0ZSIsImZpbGVpbnB1dExvY2FsZXMiLCJmaWxlaW5wdXRUaGVtZXMiLCJzZXRUb2tlbnMiLCJyZXBsYWNlUGFpcnMiLCIkaCIsIkZpbGVJbnB1dCIsIkZSQU1FUyIsIlNPUlRfQ1NTIiwiT0JKRUNUX1BBUkFNUyIsIkRFRkFVTFRfUFJFVklFVyIsIk1PREFMX0lEIiwiTU9EQUxfRVZFTlRTIiwib2JqVXJsIiwiZXhhY3QiLCJpc0lFIiwidmVyIiwiYXBwTmFtZSIsImluaXRNb2RhbCIsIiRtb2RhbCIsImlzRW1wdHkiLCJpZlNldCIsIm5lZWRsZSIsImhheXN0YWNrIiwiZGVmIiwiY2xlYW5BcnJheSIsInNwbGljZUFycmF5IiwiZ2V0TnVtIiwiaGFzRmlsZUFQSVN1cHBvcnQiLCJGaWxlIiwiRmlsZVJlYWRlciIsImhhc0RyYWdEcm9wU3VwcG9ydCIsIm9uZHJhZ3N0YXJ0Iiwib25kcm9wIiwiaGFzRmlsZVVwbG9hZFN1cHBvcnQiLCJoYXNCbG9iU3VwcG9ydCIsIkJvb2xlYW4iLCJoYXNBcnJheUJ1ZmZlclZpZXdTdXBwb3J0Iiwic2l6ZSIsImRhdGFVUkkyQmxvYiIsImRhdGFVUkkiLCJCbG9iQnVpbGRlciIsIldlYktpdEJsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiY2FuQmxvYiIsImJ5dGVTdHIiLCJhcnJheUJ1ZmZlciIsImludEFycmF5IiwibWltZVN0ciIsImJiIiwiY2FuUHJvY2VlZCIsImdldEJsb2IiLCJhcnJheUJ1ZmZlcjJTdHJpbmciLCJidWZmZXIiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImNoYXIyIiwiY2hhcjMiLCJpc0h0bWwiLCJnZXRNaW1lVHlwZSIsInNpZ25hdHVyZSIsImFkZENzcyIsImdldEVsZW1lbnQiLCJ1bmlxSWQiLCJodG1sRW5jb2RlIiwicmVwbGFjZVRhZ3MiLCJjbGVhbk1lbW9yeSIsIiR0aHVtYiIsImZpbmRGaWxlTmFtZSIsImZpbGVQYXRoIiwic2VwSW5kZXgiLCJsYXN0SW5kZXhPZiIsImNoZWNrRnVsbFNjcmVlbiIsImZ1bGxzY3JlZW5FbGVtZW50IiwibW96RnVsbFNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIm1zRnVsbHNjcmVlbkVsZW1lbnQiLCJ0b2dnbGVGdWxsU2NyZWVuIiwibWF4aW1pemUiLCJkZSIsInJlcXVlc3RGdWxsc2NyZWVuIiwibXNSZXF1ZXN0RnVsbHNjcmVlbiIsIm1velJlcXVlc3RGdWxsU2NyZWVuIiwid2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4iLCJFbGVtZW50IiwiQUxMT1dfS0VZQk9BUkRfSU5QVVQiLCJleGl0RnVsbHNjcmVlbiIsIm1zRXhpdEZ1bGxzY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwid2Via2l0RXhpdEZ1bGxzY3JlZW4iLCJtb3ZlQXJyYXkiLCJjbGVhblpvb21DYWNoZSIsIiRjYWNoZSIsInNldE9yaWVudGF0aW9uIiwic2Nhbm5lciIsIkRhdGFWaWV3IiwibWF4Qnl0ZXMiLCJ1SW50MTYiLCJleGlmTGVuZ3RoIiwiZ2V0VWludDE2IiwiYnl0ZUxlbmd0aCIsInZhbGlkYXRlT3JpZW50YXRpb24iLCJyZWFkZXIiLCJvbmxvYWRlbmQiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImFkanVzdE9yaWVudGVkSW1hZ2UiLCIkaW1nIiwiaXNab29tIiwib2Zmc2V0Q29udFRvcCIsIm5ld1RvcCIsImNsb3NlQnV0dG9uIiwiX3ZhbGlkYXRlIiwiaXNQcmV2aWV3YWJsZSIsImlzSUU5IiwiaXNJRTEwIiwiX2luaXQiLCJfbGlzdGVuIiwiX2NsZWFudXAiLCJ1cGxvYWRDb3VudCIsInVwbG9hZFN0YXR1cyIsInVwbG9hZExvZyIsInVwbG9hZEFzeW5jQ291bnQiLCJsb2FkZWRJbWFnZXMiLCJ0b3RhbEltYWdlc0NvdW50IiwiYWpheFJlcXVlc3RzIiwiY2xlYXJTdGFjayIsImZpbGVJbnB1dENsZWFyZWQiLCJmaWxlQmF0Y2hDb21wbGV0ZWQiLCJzaG93UHJldmlldyIsImlzRXJyb3IiLCJhamF4QWJvcnRlZCIsImNhbmNlbGxpbmciLCJyZWZyZXNoTW9kZSIsIiRjb250IiwicnRsIiwicHJldmlld1pvb21CdXR0b25JY29ucyIsIl9pbml0VGVtcGxhdGVEZWZhdWx0cyIsInVwbG9hZEZpbGVBdHRyIiwiX2dldExheW91dFRlbXBsYXRlIiwicHJvZ3Jlc3NUZW1wbGF0ZSIsInByb2dyZXNzQ2xhc3MiLCJwcm9ncmVzc0NvbXBsZXRlVGVtcGxhdGUiLCJwcm9ncmVzc0NvbXBsZXRlQ2xhc3MiLCJwcm9ncmVzc0Vycm9yVGVtcGxhdGUiLCJwcm9ncmVzc0Vycm9yQ2xhc3MiLCJkcm9wWm9uZUVuYWJsZWQiLCJpc0FqYXhVcGxvYWQiLCJ1cGxvYWRVcmwiLCJpc0NsaWNrYWJsZSIsImJyb3dzZU9uWm9uZUNsaWNrIiwiZGVmYXVsdFByZXZpZXdDb250ZW50Iiwic2x1ZyIsInNsdWdDYWxsYmFjayIsIl9zbHVnRGVmYXVsdCIsIm1haW5UZW1wbGF0ZSIsInNob3dDYXB0aW9uIiwiY2FwdGlvblRlbXBsYXRlIiwicHJldmlld0dlbmVyaWNUZW1wbGF0ZSIsIl9nZXRQcmV2aWV3VGVtcGxhdGUiLCJpbWFnZUNhbnZhcyIsInJlc2l6ZUltYWdlIiwibWF4SW1hZ2VXaWR0aCIsIm1heEltYWdlSGVpZ2h0IiwiaW1hZ2VDYW52YXNDb250ZXh0IiwiX2NyZWF0ZUNvbnRhaW5lciIsIl9yZWZyZXNoQ29udGFpbmVyIiwiJGRyb3Bab25lIiwiJHByb2dyZXNzIiwiJGJ0blVwbG9hZCIsIiRjYXB0aW9uQ29udGFpbmVyIiwiJGNhcHRpb24iLCJtc2dQbGFjZWhvbGRlciIsImZpbGVQbHVyYWwiLCJmaWxlU2luZ2xlIiwiJGNhcHRpb25JY29uIiwibWFpbkNsYXNzIiwiJHByZXZpZXdDb250YWluZXIiLCIkcHJldmlldyIsIiRwcmV2aWV3U3RhdHVzIiwiJGVycm9yQ29udGFpbmVyIiwiX3ZhbGlkYXRlRGlzYWJsZWQiLCJtc2dFcnJvckNsYXNzIiwicHJldmlld0luaXRJZCIsIl9pbml0UHJldmlld0NhY2hlIiwiX2luaXRQcmV2aWV3IiwiX2luaXRQcmV2aWV3QWN0aW9ucyIsIl9zZXRGaWxlRHJvcFpvbmVUaXRsZSIsIl9pbml0Wm9vbSIsImhpZGVUaHVtYm5haWxDb250ZW50IiwidE1haW4xIiwidE1haW4yIiwidFByZXZpZXciLCJ0RmlsZUljb24iLCJ0Q2xvc2UiLCJ0Q2FwdGlvbiIsInRCdG5EZWZhdWx0IiwidEJ0bkxpbmsiLCJ0QnRuQnJvd3NlIiwidE1vZGFsTWFpbiIsInRNb2RhbCIsInRQcm9ncmVzcyIsInRTaXplIiwidEZvb3RlciIsInRBY3Rpb25zIiwidEFjdGlvbkRlbGV0ZSIsInRBY3Rpb25VcGxvYWQiLCJ0QWN0aW9uRG93bmxvYWQiLCJ0QWN0aW9uWm9vbSIsInRBY3Rpb25EcmFnIiwidEluZGljYXRvciIsInRUYWdCZWYiLCJ0VGFnQmVmMSIsInRUYWdCZWYyIiwidFRhZ0FmdCIsInRHZW5lcmljIiwidEh0bWwiLCJ0SW1hZ2UiLCJ0VGV4dCIsInRPZmZpY2UiLCJ0VmlkZW8iLCJ0QXVkaW8iLCJ0Rmxhc2giLCJ0T2JqZWN0IiwidFBkZiIsInRPdGhlciIsInRab29tQ2FjaGUiLCJ2RGVmYXVsdERpbSIsIm1pbi1oZWlnaHQiLCJsYXlvdXRUZW1wbGF0ZXMiLCJtYWluMSIsIm1haW4yIiwicHJldmlldyIsImZpbGVJY29uIiwibW9kYWxNYWluIiwiZm9vdGVyIiwiaW5kaWNhdG9yIiwiYWN0aW9ucyIsImFjdGlvbkRlbGV0ZSIsImFjdGlvblVwbG9hZCIsImFjdGlvbkRvd25sb2FkIiwiYWN0aW9uWm9vbSIsImFjdGlvbkRyYWciLCJidG5EZWZhdWx0IiwiYnRuTGluayIsImJ0bkJyb3dzZSIsInpvb21DYWNoZSIsInByZXZpZXdNYXJrdXBUYWdzIiwidGFnQmVmb3JlMSIsInRhZ0JlZm9yZTIiLCJ0YWdBZnRlciIsInByZXZpZXdDb250ZW50VGVtcGxhdGVzIiwiZ2VuZXJpYyIsIm9mZmljZSIsInZpZGVvIiwiYXVkaW8iLCJmbGFzaCIsInBkZiIsImFsbG93ZWRQcmV2aWV3VHlwZXMiLCJwcmV2aWV3VGVtcGxhdGVzIiwicHJldmlld1NldHRpbmdzIiwibWF4LXdpZHRoIiwibWF4LWhlaWdodCIsInByZXZpZXdTZXR0aW5nc1NtYWxsIiwicHJldmlld1pvb21TZXR0aW5ncyIsImZpbGVUeXBlU2V0dGluZ3MiLCJ2VHlwZSIsInZOYW1lIiwiZmlsZUFjdGlvblNldHRpbmdzIiwic2hvd1JlbW92ZSIsInNob3dVcGxvYWQiLCJzaG93RG93bmxvYWQiLCJzaG93Wm9vbSIsInNob3dEcmFnIiwicmVtb3ZlSWNvbiIsInJlbW92ZUVycm9yQ2xhc3MiLCJyZW1vdmVUaXRsZSIsInVwbG9hZEljb24iLCJ1cGxvYWRDbGFzcyIsInVwbG9hZFRpdGxlIiwidXBsb2FkUmV0cnlJY29uIiwidXBsb2FkUmV0cnlUaXRsZSIsImRvd25sb2FkSWNvbiIsImRvd25sb2FkQ2xhc3MiLCJkb3dubG9hZFRpdGxlIiwiem9vbUljb24iLCJ6b29tQ2xhc3MiLCJ6b29tVGl0bGUiLCJkcmFnSWNvbiIsImRyYWdUaXRsZSIsImRyYWdTZXR0aW5ncyIsImluZGljYXRvck5ldyIsImluZGljYXRvclN1Y2Nlc3MiLCJpbmRpY2F0b3JFcnJvciIsImluZGljYXRvckxvYWRpbmciLCJpbmRpY2F0b3JOZXdUaXRsZSIsImluZGljYXRvclN1Y2Nlc3NUaXRsZSIsImluZGljYXRvckVycm9yVGl0bGUiLCJpbmRpY2F0b3JMb2FkaW5nVGl0bGUiLCJzZXR0aW5nIiwiX2luaXRQcmV2aWV3VGVtcGxhdGVzIiwidGFnQmVmIiwidGFnQWZ0IiwicHJldmlld0NhY2hlIiwiaW5pdGlhbFByZXZpZXciLCJpbml0aWFsUHJldmlld0RlbGltaXRlciIsImluaXRpYWxQcmV2aWV3Q29uZmlnIiwiaW5pdGlhbFByZXZpZXdUaHVtYlRhZ3MiLCJpbmQiLCJwcmV2aWV3SWQiLCIkdG1wIiwiY2F0IiwiZnRyIiwiZm5hbWUiLCJmdHlwZSIsImZyYW1lQ2xhc3MiLCJhc0RhdGEiLCJpbml0aWFsUHJldmlld0FzRGF0YSIsInBhcnNlVGVtcGxhdGUiLCJkYXQiLCJmdCIsImZjIiwiX2dlbmVyYXRlUHJldmlld1RlbXBsYXRlIiwiaW5pdGlhbFByZXZpZXdGaWxlVHlwZSIsImZyYW1lQXR0ciIsImNoayIsInVuc2V0IiwiX2dldE1zZ1NlbGVjdGVkIiwiZnMiLCJpbml0UHJldmlld1Nob3dEZWwiLCJpbml0aWFsUHJldmlld1Nob3dEZWxldGUiLCJkVXJsIiwiZG93bmxvYWRVcmwiLCJpbml0aWFsUHJldmlld0Rvd25sb2FkVXJsIiwiZEZpbCIsImZpbGVuYW1lIiwiaW5pdFByZXZpZXdTaG93RHdsIiwic0RlbCIsInNEd2wiLCJzWm0iLCJzRHJnIiwiZGlzIiwiX3JlbmRlckZpbGVBY3Rpb25zIiwiX3JlbmRlclRodW1iUHJvZ3Jlc3MiLCJfZ2V0U2l6ZSIsIl9oYW5kbGVyIiwibnMiLCJfbG9nIiwiX2Vycm9yc0V4aXN0IiwiJGVyciIsIiRlcnJMaXN0IiwiX2Vycm9ySGFuZGxlciIsInNob3dFcnJvciIsIl9zaG93RXJyb3IiLCJOT1RfRk9VTkRfRVJSIiwibXNnRmlsZU5vdEZvdW5kIiwiU0VDVVJJVFlfRVJSIiwibXNnRmlsZVNlY3VyZWQiLCJOT1RfUkVBREFCTEVfRVJSIiwibXNnRmlsZU5vdFJlYWRhYmxlIiwiQUJPUlRfRVJSIiwibXNnRmlsZVByZXZpZXdBYm9ydGVkIiwibXNnRmlsZVByZXZpZXdFcnJvciIsIl9hZGRFcnJvciIsIiRlcnJvciIsImVycm9yQ2xvc2VCdXR0b24iLCJnZXRGcmFtZXMiLCJfc2V0VmFsaWRhdGlvbkVycm9yIiwiX3Jlc2V0RXJyb3JzIiwiZmFkZSIsIl9zaG93Rm9sZGVyRXJyb3IiLCJmb2xkZXJzIiwibXNnRm9sZGVyc05vdEFsbG93ZWQiLCJfcmFpc2UiLCJfc2hvd1VwbG9hZEVycm9yIiwiX2NsZWFyRmlsZUlucHV0IiwiX25vRmlsZXNFcnJvciIsIm1pbkZpbGVDb3VudCIsIm1zZ0ZpbGVzVG9vTGVzcyIsIl91cGRhdGVGaWxlRGV0YWlscyIsIl9wYXJzZUVycm9yIiwib3BlcmF0aW9uIiwiZXJyb3JUaHJvd24iLCJ0ZXh0UHJlIiwicmVzcG9uc2VKU09OIiwibXNnVXBsb2FkQWJvcnRlZCIsInNob3dBamF4RXJyb3JEZXRhaWxzIiwibXNnQWpheEVycm9yIiwiX3BhcnNlRmlsZVR5cGUiLCJfZ2V0UHJldmlld0ljb24iLCJleHQiLCJwcmV2aWV3RmlsZUljb25TZXR0aW5ncyIsInByZXZpZXdGaWxlRXh0U2V0dGluZ3MiLCJfcGFyc2VGaWxlUHJldmlld0ljb24iLCJpY24iLCJwcmV2aWV3RmlsZUljb24iLCJwcmV2aWV3RmlsZUljb25DbGFzcyIsIl9saXN0ZW5GdWxsU2NyZWVuIiwiaXNGdWxsU2NyZWVuIiwiJGJ0bkZ1bGwiLCIkYnRuQm9yZCIsIl9tYXhpbWl6ZVpvb21EaWFsb2ciLCJmdWxsU2NyZWVuRXZlbnRzIiwiX2NoYW5nZSIsInNob3dCcm93c2UiLCIkYnRuRmlsZSIsIl9icm93c2UiLCJjYW5jZWwiLCJfaW5pdERyYWdEcm9wIiwiX3N1Ym1pdEZvcm0iLCJfdXBsb2FkQ2xpY2siLCJzY3JlZW4iLCJfYXV0b0ZpdENvbnRlbnQiLCJfaW5pdENsaWNrYWJsZSIsIiR6b25lIiwiJHRhciIsIl96b25lRHJhZ0VudGVyIiwiX3pvbmVEcmFnTGVhdmUiLCJfem9uZURyb3AiLCJfem9uZURyYWdEcm9wSW5pdCIsImhhc0ZpbGVzIiwiaXNFbmFibGVkIiwiX2lzRmlsZVNlbGVjdGlvblZhbGlkIiwiX2Fib3J0IiwiX2NsZWFyUHJldmlldyIsIiRwIiwiJHRodW1icyIsInNob3dVcGxvYWRlZFRodW1icyIsIl9yZXNldFVwbG9hZCIsIl92YWxpZGF0ZURlZmF1bHRQcmV2aWV3IiwiX2luaXRTb3J0YWJsZSIsIm9uU29ydCIsIiRmcmFtZSIsIiRkcmFnRWwiLCJfc2V0UHJldmlld0NvbnRlbnQiLCJpc0luaXQiLCJjYXAiLCJpbml0aWFsQ2FwdGlvbiIsIl9zZXRDYXB0aW9uIiwiX2luaXRDYXB0aW9uIiwiX3NldEluaXRUaHVtYkF0dHIiLCJfZ2V0Wm9vbUJ1dHRvbiIsInByZXZpZXdab29tQnV0dG9uQ2xhc3NlcyIsInByZXZpZXdab29tQnV0dG9uVGl0bGVzIiwiX2dldE1vZGFsQ29udGVudCIsInpvb21GcmFtZUNsYXNzIiwiaGVhZGluZyIsIm1zZ1pvb21Nb2RhbEhlYWRpbmciLCJ0b2dnbGVoZWFkZXIiLCJmdWxsc2NyZWVuIiwiYm9yZGVybGVzcyIsIl9saXN0ZW5Nb2RhbEV2ZW50IiwiZ2V0UGFyYW1zIiwic291cmNlRXZlbnQiLCJtb2RhbElkIiwiX2luaXRab29tQnV0dG9ucyIsIiRmaXJzdCIsIiRsYXN0IiwidGh1bWJzIiwiJHByZXYiLCIkaGVhZCIsIiRmb290IiwiX3Jlc2l6ZVpvb21EaWFsb2ciLCJmdWxsU2NyZWVuIiwiem9vbU1vZGFsSGVpZ2h0IiwiX3NldFpvb21Db250ZW50IiwiJGNvbnRlbnQiLCJ0bXBsdCIsIiRkYXRhRWwiLCIkYnRuVG9naCIsIiR6b29tUHJldmlldyIsIl96b29tU2xpZGVTaG93IiwiJGhlYWRlciIsIiRmbG9hdEJhciIsImh0IiwiJGFjdGlvbnMiLCJfem9vbVByZXZpZXciLCIkdGFyZ0ZyYW1lIiwiX2luaXRab29tQnV0dG9uIiwiX2NsZWFyT2JqZWN0cyIsIiRzcmNGcm0iLCIkdG1wRnJtIiwiJHRtcEVsIiwidXBsb2FkQ2FjaGUiLCJfc2V0UHJvZ3Jlc3MiLCJfcmVzZXRDYW52YXMiLCJjYWNoZUluaXRpYWxQcmV2aWV3Iiwib3ZlcndyaXRlSW5pdGlhbCIsImNhbnZhcyIsImNsZWFyUmVjdCIsIl9oYXNJbml0aWFsUHJldmlldyIsIl9yZXNldFByZXZpZXciLCJfY2xlYXJEZWZhdWx0UHJldmlldyIsIl9yZXNldFByZXZpZXdUaHVtYnMiLCJpc0FqYXgiLCJjdXN0b21MYXlvdXRUYWdzIiwiY3VzdG9tUHJldmlld1RhZ3MiLCJfZ2V0T3V0RGF0YSIsInJlc3BvbnNlRGF0YSIsImZpbGVzRGF0YSIsImZpbGVzdGFjayIsImZpbGVuYW1lcyIsImZpbGVzY291bnQiLCJnZXRGaWxlc0NvdW50IiwiX2dldEV4dHJhRGF0YSIsInN0ckZpbGVzIiwibXNnU2VsZWN0ZWQiLCJtc2dOb0ZpbGVzU2VsZWN0ZWQiLCJfZ2V0RnJhbWUiLCJfZ2V0VGh1bWJzIiwidXBsb2FkRXh0cmFEYXRhIiwiX2luaXRYaHIiLCJ4aHJvYmoiLCJmaWxlQ291bnQiLCJwY3QiLCJfc2V0QXN5bmNVcGxvYWRTdGF0dXMiLCJfbWVyZ2VBamF4Q2FsbGJhY2siLCJzcmNGdW5jIiwibWVyZ2VBamF4Q2FsbGJhY2tzIiwidGFyZ0Z1bmMiLCJhamF4RGVsZXRlU2V0dGluZ3MiLCJtZXJnZUFqYXhEZWxldGVDYWxsYmFja3MiLCJfYWpheFN1Ym1pdCIsImZuQmVmb3JlIiwiZm5TdWNjZXNzIiwiZm5Db21wbGV0ZSIsImZuRXJyb3IiLCJfdXBsb2FkRXh0cmEiLCJnZXRGaWxlU3RhY2siLCJ1cGxvYWRVcmxUaHVtYiIsIl9tZXJnZUFycmF5IiwiYXJyMSIsImFycjIiLCJfaW5pdFVwbG9hZFN1Y2Nlc3MiLCJhbGxGaWxlcyIsIiRkaXYiLCIkbmV3Q2FjaGUiLCJoYXNJbml0RGF0YSIsIiRuZXdUaHVtYiIsIl9pbml0U3VjY2Vzc1RodW1icyIsIl9jaGVja0FzeW5jQ29tcGxldGUiLCJfdXBsb2FkU2luZ2xlIiwiaXNCYXRjaCIsIm91dERhdGEiLCJjaGtDb21wbGV0ZSIsIiRidG5EZWxldGUiLCJoYXNQb3N0RGF0YSIsInVwbG9hZEZhaWxlZCIsIiRwcm9nIiwidXBkYXRlVXBsb2FkTG9nIiwidXBkYXRlU3RhY2siLCIkaW5pdFRodW1icyIsInRyaWdnZXJSZXNldCIsInVubG9jayIsInVwbG9hZEFzeW5jIiwiX3NldFRodW1iU3RhdHVzIiwiX3NldFByb2dyZXNzQ2FuY2VsbGVkIiwiX3NldFByZXZpZXdFcnJvciIsInJldHJ5RXJyb3JVcGxvYWRzIiwibXNnVXBsb2FkRXJyb3IiLCJhamF4T3BlcmF0aW9ucyIsInVwbG9hZFRodW1iIiwibXNnQWpheFByb2dyZXNzRXJyb3IiLCJfdXBsb2FkQmF0Y2giLCJzZXRBbGxVcGxvYWRlZCIsImVycm9ya2V5cyIsInVwbG9hZEJhdGNoIiwidXBsb2FkRmlsZUNvdW50IiwiX3VwbG9hZEV4dHJhT25seSIsInVwbG9hZEV4dHJhIiwiX2RlbGV0ZUZpbGVJbmRleCIsIiRuRnJhbWUiLCJuSW5kIiwiZ2V0UHJldmlldyIsIl9pbml0RmlsZUFjdGlvbnMiLCJoYXNFcnJvciIsIl92YWxpZGF0ZU1pbkNvdW50IiwiaGFzVGh1bWIiLCJfZ2V0RmlsZU5hbWVzIiwiZGVsZXRlRXh0cmFEYXRhIiwiYnRuUmVtb3ZlIiwib3JpZ0NsYXNzIiwiZXJyQ2xhc3MiLCJyZXNldFByb2dyZXNzIiwidlVybCIsImRlbGV0ZVVybCIsInZLZXkiLCJkZWxldGVUaHVtYiIsIlByb21pc2UiLCJfaGlkZUZpbGVJY29uIiwiX3Nob3dGaWxlSWNvbiIsImJ5dGVzIiwiZmlsZVNpemVHZXR0ZXIiLCJzaXplcyIsImZvb3QiLCJ0ZW1wbCIsInByZXZDb250ZW50Iiwiem9vbUNvbnRlbnQiLCJzdHlsZUF0dHJpYnMiLCJzY3JlZW5XIiwiX3JlbmRlckZpbGVGb290ZXIiLCJoYXNJY29uU2V0dGluZyIsInR5cGVDc3MiLCJmb3JjZVByZXZJY29uIiwicHJlZmVySWNvbmljUHJldmlldyIsImZvcmNlWm9vbUljb24iLCJwcmVmZXJJY29uaWNab29tUHJldmlldyIsImZyYW1lQ3NzIiwiZmlsZWluZGV4IiwiX3ByZXZpZXdEZWZhdWx0IiwiX3NldFRodW1iQXR0ciIsIl9wcmV2aWV3RmlsZSIsInRoZUZpbGUiLCJmaWxlSW5mbyIsIm1pbWVzIiwiYWxsb3dlZFByZXZpZXdNaW1lVHlwZXMiLCJmc2l6ZSIsImNoa1R5cGVzIiwiY2hrTWltZXMiLCJpRGF0YSIsInB1cmlmeUh0bWwiLCJhdXRvT3JpZW50SW1hZ2UiLCJfdmFsaWRhdGVJbWFnZSIsIiR6b29tSW1nIiwiX3JlYWRGaWxlcyIsIiRzdGF0dXMiLCJtc2dMb2FkaW5nIiwibXNnUHJvZ3Jlc3MiLCJudW1GaWxlcyIsInJlYWRGaWxlIiwiZmlsZVR5cGVzIiwiYWxsb3dlZEZpbGVUeXBlcyIsInR5cExlbiIsImZpbGVFeHQiLCJhbGxvd2VkRmlsZUV4dGVuc2lvbnMiLCJzdHJFeHQiLCJtYXhQcmV2aWV3U2l6ZSIsIm1heEZpbGVQcmV2aWV3U2l6ZSIsImNhblByZXZpZXciLCJ0aHJvd0Vycm9yIiwiYWRkVG9TdGFjayIsInJlbW92ZUZyb21QcmV2aWV3T25FcnJvciIsImZTaXplS0IiLCJmblRleHQiLCJmbkltYWdlIiwiZm5IdG1sIiwidHlwIiwidHlwMSIsInR5cDIiLCJmaWxlU2l6ZSIsImZpbGVFeHRFeHByIiwicHJldmlld0RhdGEiLCJzdHJUeXBlcyIsImtub3duVHlwZXMiLCJpc1RleHQiLCJpc0ltYWdlIiwidHh0RmxhZyIsInByb2Nlc3NGaWxlTG9hZGVkIiwibXNnRmlsZVR5cGVzIiwibXNnSW52YWxpZEZpbGVOYW1lIiwibWF4RmlsZVNpemUiLCJtc2dTaXplVG9vTGFyZ2UiLCJtYXhTaXplIiwibWluRmlsZVNpemUiLCJtc2dTaXplVG9vU21hbGwiLCJtaW5TaXplIiwibXNnSW52YWxpZEZpbGVUeXBlIiwibXNnSW52YWxpZEZpbGVFeHRlbnNpb24iLCJleHRlbnNpb25zIiwiaGV4IiwidWludCIsImJ5dGUiLCJtaW1lIiwicmVhZFRleHRJbWFnZSIsInRleHRGbGFnIiwibmV3UmVhZGVyIiwidGhlRmlsZU5ldyIsInJlYWRBc1RleHQiLCJ0ZXh0RW5jb2RpbmciLCJyZWFkQXNEYXRhVVJMIiwib25wcm9ncmVzcyIsImZhY3QiLCJmaWxlU3RhY2siLCJuRmlsZXMiLCJpY29uIiwiJGluZGljYXRvciIsIm1zZ0NhbmNlbGxlZCIsInBjdExpbWl0IiwicHJvZ3Jlc3NVcGxvYWRUaHJlc2hvbGQiLCJtc2dVcGxvYWRUaHJlc2hvbGQiLCJtc2dVcGxvYWRFbmQiLCJkcm9wWm9uZVRpdGxlIiwiZHJvcFpvbmVDbGlja1RpdGxlIiwiZHJvcFpvbmVUaXRsZUNsYXNzIiwidmFsaWRhdGVJbml0aWFsQ291bnQiLCJfZ2V0RmlsZUNvdW50IiwiYWRkQ291bnQiLCJfZ2V0RmlsZUlkIiwiY3VzdG9tIiwiZ2VuZXJhdGVGaWxlSWQiLCJyZWxhdGl2ZVBhdGgiLCJ3ZWJraXRSZWxhdGl2ZVBhdGgiLCJfZ2V0RmlsZU5hbWUiLCJfZ2V0RmlsZUlkcyIsInNraXBOdWxsIiwiZmlsZWlkcyIsInJlcGVhdCIsIl9yZWZyZXNoVXBsb2FkQnV0dG9uIiwiX2NoZWNrRGltZW5zaW9ucyIsIiRpbWdFbCIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJ3MSIsIncyIiwiZXhpZk9iamVjdCIsInBpZXhpZiIsImltZyIsInRodW1iIiwic2l6IiwidmFsaWRhdGVkIiwiaW1nRGF0YSIsImV4aWZPYmoiLCJfdmFsaWRhdGVBbGxJbWFnZXMiLCJjb3VudGVyIiwibnVtSW1ncyIsInJlc2l6ZUlmU2l6ZU1vcmVUaGFuIiwiX2dldFJlc2l6ZWRJbWFnZSIsImJsb2IiLCJyYXRpbyIsIm1heEhlaWdodCIsImlzVmFsaWRJbWFnZSIsImNoa1dpZHRoIiwiY2hrSGVpZ2h0IiwiZXhpZlN0ciIsIm1zZ0ltYWdlUmVzaXplRXJyb3IiLCJyZXNpemVEZWZhdWx0SW1hZ2VUeXBlIiwicmVzaXplUHJlZmVyZW5jZSIsInJlc2l6ZVF1YWxpdHkiLCJkdW1wIiwibXNnSW1hZ2VSZXNpemVFeGNlcHRpb24iLCJfaW5pdEJyb3dzZSIsIm1zZ1ZhbGlkYXRpb25FcnJvciIsIm1zZ05vIiwibXNnVmFsaWRhdGlvbkVycm9yQ2xhc3MiLCJtc2dWYWxpZGF0aW9uRXJyb3JJY29uIiwiYXR0cmlicyIsIl9yZW5kZXJNYWluIiwicmVhZG9ubHkiLCJkcm9wQ3NzIiwic2hvd0Nsb3NlIiwicHJldmlld0NsYXNzIiwiZHJvcENsYXNzIiwiY2FwdGlvbkNsYXNzIiwiX3JlbmRlckJ1dHRvbiIsImJyb3dzZSIsImJ0blR5cGUiLCJzaG93Q2FuY2VsIiwiYnV0dG9uTGFiZWxDbGFzcyIsIm1zZ1VwbG9hZEJlZ2luIiwicmVtIiwiZHJnIiwidXBsIiwidEluZCIsImluZGljYXRvclRpdGxlIiwicHJldmlld1RodW1iVGFncyIsInNob3dVcGwiLCJzaG93RHduIiwic2hvd0RlbCIsImRGaWxlIiwiYnRuRGVsZXRlIiwiYnRuVXBsb2FkIiwiYnRuRG93bmxvYWQiLCJidG5ab29tIiwiYnRuRHJhZyIsIm90aGVyQnV0dG9ucyIsIm90aGVyQWN0aW9uQnV0dG9ucyIsImRhdGFVcmwiLCJkZWxldGUiLCJkcmFnIiwiX2ZpbHRlckR1cGxpY2F0ZSIsImZpbGVJZHMiLCJmaWxlSWQiLCJ0ZmlsZXMiLCJpc0RyYWdEcm9wIiwiaXNTaW5nbGVVcGxvYWQiLCJmbGFnU2luZ2xlIiwibWVzZyIsIm1heEZpbGVDb3VudCIsImF1dG9SZXBsYWNlIiwibXNnRmlsZXNUb29NYW55IiwiYWJvcnREYXRhIiwiYWJvcnRNZXNzYWdlIiwiX3Jlc2V0RmlsZVN0YWNrIiwibmV3c3RhY2siLCJuZXduYW1lcyIsIm5ld2lkcyIsIm5ld0lkIiwiZGF0YS1maWxlaW5kZXgiLCJjbnQiLCJtc2dGaWxlUmVxdWlyZWQiLCJ0b3RMZW4iLCJoYXNFeHRyYURhdGEiLCJtc2dVcGxvYWRFbXB0eSIsInRyaWdnZXJDaGFuZ2UiLCJmcmFtZUlkIiwiZ2V0RXhpZiIsImNzc0ZpbHRlciIsImZpbGVpbnB1dCIsInJldHZhbHMiLCJlbiIsImJyb3dzZUljb24iLCJicm93c2VDbGFzcyIsImNhbmNlbEljb24iLCJjYW5jZWxDbGFzcyIsIm1pbkltYWdlV2lkdGgiLCJtaW5JbWFnZUhlaWdodCIsInByb2dyZXNzVGh1bWJDbGFzcyIsInByZXZpZXdGaWxlVHlwZSIsImVsQ2FwdGlvbkNvbnRhaW5lciIsImVsQ2FwdGlvblRleHQiLCJlbFByZXZpZXdDb250YWluZXIiLCJlbFByZXZpZXdJbWFnZSIsImVsUHJldmlld1N0YXR1cyIsImVsRXJyb3JDb250YWluZXIiLCJicm93c2VMYWJlbCIsInJlbW92ZUxhYmVsIiwiY2FuY2VsTGFiZWwiLCJjYW5jZWxUaXRsZSIsInVwbG9hZExhYmVsIiwibXNnSW1hZ2VXaWR0aFNtYWxsIiwibXNnSW1hZ2VIZWlnaHRTbWFsbCIsIm1zZ0ltYWdlV2lkdGhMYXJnZSIsIm1zZ0ltYWdlSGVpZ2h0TGFyZ2UiLCJnbHkiLCJ0aW1lWm9uZUFiYnJldmlhdGlvbiIsImFiYnJldmlhdGlvbiIsImZvcm1hdHRlZFN0ciIsIm1hdGNoZWRTdHJpbmdzIiwicmVmIiwiVVRDRGF0ZSIsIkRhdGV0aW1lcGlja2VyIiwiaXNSVEwiLCJmb3JtYXRUeXBlIiwiRFBHbG9iYWwiLCJwYXJzZUZvcm1hdCIsImdldERlZmF1bHRGb3JtYXQiLCJpc0lubGluZSIsImlzVmlzaWJsZSIsImlzSW5wdXQiLCJmb250QXdlc29tZSIsImJvb3Rjc3NWZXIiLCJjb21wb25lbnQiLCJjb21wb25lbnRSZXNldCIsImhhc0lucHV0IiwibGlua0ZpZWxkIiwibGlua0Zvcm1hdCIsIm1pbnV0ZVN0ZXAiLCJwaWNrZXJQb3NpdGlvbiIsInNob3dNZXJpZGlhbiIsImluaXRpYWxEYXRlIiwidGltZXpvbmUiLCJpY29ucyIsImxlZnRBcnJvdyIsInJpZ2h0QXJyb3ciLCJpY29udHlwZSIsIl9hdHRhY2hFdmVudHMiLCJjbGlja2VkT3V0c2lkZSIsImZvcm1hdFZpZXdUeXBlIiwibWluVmlldyIsImNvbnZlcnRWaWV3TW9kZSIsIm1heFZpZXciLCJtb2RlcyIsIndoZWVsVmlld01vZGVOYXZpZ2F0aW9uIiwid2hlZWxWaWV3TW9kZU5hdmlnYXRpb25JbnZlcnNlRGlyZWN0aW9uIiwid2hlZWxWaWV3TW9kZU5hdmlnYXRpb25EZWxheSIsInN0YXJ0Vmlld01vZGUiLCJzdGFydFZpZXciLCJ2aWV3TW9kZSIsInZpZXdTZWxlY3QiLCJmb3JjZVBhcnNlIiwidGVtcGxhdGVWMyIsInBpY2tlciIsIm1vdXNlZG93biIsImF1dG9jbG9zZSIsImtleWJvYXJkTmF2aWdhdGlvbiIsInRvZGF5QnRuIiwiY2xlYXJCdG4iLCJ0b2RheUhpZ2hsaWdodCIsIndlZWtTdGFydCIsIndlZWtFbmQiLCJvblJlbmRlckRheSIsIm9uUmVuZGVySG91ciIsIm9uUmVuZGVyTWludXRlIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsIm9uUmVuZGVyWWVhciIsImN1cnJlbnRZZWFyIiwiZW5kWWVhciIsIm9uUmVuZGVyTW9udGgiLCJkYXRlc0Rpc2FibGVkIiwiZGF5c09mV2Vla0Rpc2FibGVkIiwic2V0U3RhcnREYXRlIiwic2V0RW5kRGF0ZSIsInNldERhdGVzRGlzYWJsZWQiLCJzZXREYXlzT2ZXZWVrRGlzYWJsZWQiLCJzZXRNaW51dGVzRGlzYWJsZWQiLCJtaW51dGVzRGlzYWJsZWQiLCJzZXRIb3Vyc0Rpc2FibGVkIiwiaG91cnNEaXNhYmxlZCIsImZpbGxEb3ciLCJmaWxsTW9udGhzIiwic2hvd01vZGUiLCJfZXZlbnRzIiwiX2RldGFjaEV2ZW50cyIsImtleXVwIiwicGxhY2UiLCJzZXRWYWx1ZSIsImRhdGV0aW1lcGlja2VyIiwiZ2V0SW5pdGlhbERhdGUiLCJzZXRJbml0aWFsRGF0ZSIsInNldERhdGUiLCJzZXRVVENEYXRlIiwidmlld0RhdGUiLCJmaWxsIiwic2V0Rm9ybWF0IiwiZ2V0Rm9ybWF0dGVkRGF0ZSIsImZvcm1hdERhdGUiLCJwYXJzZURhdGUiLCJ1cGRhdGVOYXZBcnJvd3MiLCJtVGhpcyIsInRvRGF0ZVN0cmluZyIsInNldFRpdGxlIiwiaW5kZXhfaGlnaGVzdCIsImluZGV4X2N1cnJlbnQiLCJjb250YWluZXJPZmZzZXQiLCJib2R5V2lkdGgiLCJob3VyX21pbnV0ZSIsImZyb21BcmdzIiwiZG93Q250IiwiZGF5c01pbiIsInNldFVUQ01vbnRoIiwiZGF5TW9udGgiLCJnZXRVVENIb3VycyIsInN0YXJ0WWVhciIsInN0YXJ0TW9udGgiLCJlbmRNb250aCIsInRvZGF5IiwicHJldk1vbnRoIiwibmV4dE1vbnRoIiwidHh0IiwibWVyaWRpYW4iLCJtZXJpZGlhbk9sZCIsInNldFVUQ0hvdXJzIiwiYWN0dWFsIiwic2V0VVRDU2Vjb25kcyIsInllYXJDb250Iiwid2hlZWxQYXVzZSIsIndoZWVsRGVsdGEiLCJtb2RlIiwibmF2U3RlcCIsIm1vdmVIb3VyIiwibW92ZURhdGUiLCJtb3ZlTW9udGgiLCJtb3ZlWWVhciIsImNvbnZlcnRWaWV3TW9kZVRleHQiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiX3NldERhdGUiLCJnZXRVVENTZWNvbmRzIiwib2xkVmlld01vZGUiLCJjaGFuZ2UiLCJtb3ZlTWludXRlIiwibmV3X2RhdGUiLCJtYWciLCJuZXdfbW9udGgiLCJkYXRlV2l0aGluUmFuZ2UiLCJkYXRlQ2hhbmdlZCIsIm5ld0RhdGUiLCJuZXdWaWV3RGF0ZSIsIm5ld1ZpZXdNb2RlIiwiY2xzTmFtZSIsImludGVybmFsX3JldHVybiIsImRheXNTaG9ydCIsIm5hdkZuYyIsInZhbGlkUGFydHMiLCJub25wdW5jdHVhdGlvbiIsImRhdGVVVEMiLCJzZXRNaWxsaXNlY29uZHMiLCJwYXJ0X3JlIiwic2V0dGVyc19vcmRlciIsInNldHRlcnNfbWFwIiwiSEgiLCJ5eXl5IiwiZmlsdGVyZWQiLCJERCIsInNlcHMiLCJoZWFkVGVtcGxhdGUiLCJoZWFkVGVtcGxhdGVWMyIsImNvbnRUZW1wbGF0ZSIsImZvb3RUZW1wbGF0ZSIsIkVkaXRhYmxlRm9ybSIsImVkaXRhYmxlZm9ybSIsImluaXRJbnB1dCIsInN0cjJ2YWx1ZSIsInByZXJlbmRlciIsImluaXRUZW1wbGF0ZSIsImluaXRCdXR0b25zIiwic2hvd2J1dHRvbnMiLCJpc1NhdmluZyIsIiR0cGwiLCJhdXRvc3VibWl0IiwidmFsdWUyaW5wdXQiLCJzaG93Rm9ybSIsInBvc3RyZW5kZXIiLCIkZ3JvdXAiLCIkYmxvY2siLCJsaW5lcyIsImVycm9yR3JvdXBDbGFzcyIsImVycm9yQmxvY2tDbGFzcyIsIm5ld1ZhbHVlIiwiaW5wdXQydmFsdWUiLCJ2YWxpZGF0ZSIsInNhdmVub2NoYW5nZSIsInZhbHVlMnN0ciIsInN1Ym1pdFZhbHVlIiwidmFsdWUyc3VibWl0IiwicGsiLCJlZGl0YWJsZXV0aWxzIiwidHJ5UGFyc2VKc29uIiwiY29udmVydFN0ciIsImVuZ2luZSIsImluaGVyaXQiLCJDaGlsZCIsIlBhcmVudCIsInN1cGVyY2xhc3MiLCJzZXRDdXJzb3JQb3NpdGlvbiIsInNldFNlbGVjdGlvblJhbmdlIiwiY3JlYXRlVGV4dFJhbmdlIiwicmFuZ2UiLCJtb3ZlRW5kIiwibW92ZVN0YXJ0Iiwic2FmZSIsInNsaWNlT2JqIiwiY2FzZVNlbnNpdGl2ZSIsImtleUxvd2VyIiwibmV3T2JqIiwiZ2V0Q29uZmlnRGF0YSIsIm9iamVjdEtleXMiLCJpdGVtc0J5VmFsdWUiLCJzb3VyY2VEYXRhIiwidmFsdWVQcm9wIiwiaWRLZXkiLCJpc1ZhbEFycmF5IiwiaXRlbVZhbHVlIiwiY3JlYXRlSW5wdXQiLCJUeXBlQ29uc3RydWN0b3IiLCJ0eXBlT3B0aW9ucyIsImVkaXRhYmxldHlwZXMiLCJkYXRlZmllbGQiLCJkYXRldWlmaWVsZCIsImRhdGV1aSIsInN1cHBvcnRzVHJhbnNpdGlvbnMiLCJQb3B1cCIsIklubGluZSIsImNvbnRhaW5lck5hbWUiLCJjb250YWluZXJEYXRhTmFtZSIsImlubmVyQ3NzIiwiY29udGFpbmVyQ2xhc3MiLCJlZGl0YWJsZUNvbnRhaW5lciIsInNwbGl0T3B0aW9ucyIsImZvcm1PcHRpb25zIiwiaW5pdENvbnRhaW5lciIsImRlbGF5ZWRIaWRlIiwiZXhjbHVkZV9jbGFzc2VzIiwiY2xvc2VPdGhlcnMiLCJjb250YWluZXJPcHRpb25zIiwicmVuZGVyRm9ybSIsIm5vY2hhbmdlIiwicmVhc29uIiwic2V0UG9zaXRpb24iLCJyZW5kZXJpbmciLCJyZW5kZXJlZCIsImNsb3NlQWxsIiwiaW5uZXJTaG93IiwiaW5uZXJIaWRlIiwic2V0Q29udGFpbmVyT3B0aW9uIiwiaW5uZXJEZXN0cm95IiwiZWMiLCJvbmJsdXIiLCJhdXRvaGlkZSIsImRlc3Ryb3llZCIsIkVkaXRhYmxlIiwiZWRpdGFibGUiLCJpbml0TGl2ZSIsImhpZ2hsaWdodCIsImlzVmFsdWVCeVRleHQiLCJkb0F1dG90ZXh0IiwiZmluYWxpemUiLCJodG1sMnZhbHVlIiwiYXV0b3RleHQiLCJlbXB0eWNsYXNzIiwidmFsdWUyaHRtbEZpbmFsIiwidmFsdWUyaHRtbCIsImhhbmRsZUVtcHR5IiwidG9nZ2xlRGlzYWJsZWQiLCJlbXB0eXRleHQiLCJ1bnNhdmVkY2xhc3MiLCJzZW50IiwiYmdDb2xvciIsImRhdGFrZXkiLCIkZWxlbXMiLCJlcnJvcnMiLCJBYnN0cmFjdElucHV0IiwidHBsIiwic2V0Q2xhc3MiLCJpbnB1dGNsYXNzIiwic2V0QXR0ciIsImFic3RyYWN0aW5wdXQiLCJMaXN0Iiwib25Tb3VyY2VSZWFkeSIsInJlbmRlckxpc3QiLCJzb3VyY2VFcnJvciIsInNvdXJjZUNhY2hlIiwiY2FjaGVJRCIsImRvUHJlcGVuZCIsImVycl9jYWxsYmFja3MiLCJzb3VyY2VPcHRpb25zIiwicHJlcGVuZERhdGEiLCJpdGVyYXRlSXRlbSIsInJlbmRlckNsZWFyIiwidG9nZ2xlQ2xlYXIiLCJUZXh0YXJlYSIsIlNlbGVjdCIsImZpbGxJdGVtcyIsIkNoZWNrbGlzdCIsInJlZyIsImNoZWNrbGlzdCIsIlBhc3N3b3JkIiwiRW1haWwiLCJlbWFpbCIsIlVybCIsIlRlbCIsInRlbCIsIk51bWJlcklucHV0IiwiUmFuZ2UiLCJUaW1lIiwiY29udmVydFNvdXJjZSIsImlzTXVsdGlwbGUiLCJpc1JlbW90ZSIsImlkRnVuYyIsImZvcm1hdFNlbGVjdGlvbiIsInZpZXdzZXBhcmF0b3IiLCJnZXRTZXBhcmF0b3IiLCJjdXN0b21JZCIsImN1c3RvbVRleHQiLCJpc0luaXRpYWwiLCJDb21ib2RhdGUiLCJjb21ib2RhdGUiLCJhbXBtIiwiJHdpZGdldCIsImdldFRlbXBsYXRlIiwiaW5pdENvbWJvcyIsImdldFZhbHVlIiwic21hcnREYXlzIiwiZmlsbENvbWJvIiwiJGMiLCIkY29tYm8iLCJmaWxsQ29tbW9uIiwicmVsVGltZSIsImZpcnN0SXRlbSIsImZpbGxEYXkiLCJ0d29EaWdpdCIsImRheXNDb3VudCIsIiRtb250aCIsIiR5ZWFyIiwibGVhZFplcm8iLCJmaWxsTW9udGgiLCJsb25nTmFtZXMiLCJzaG9ydE5hbWVzIiwiZmlsbFllYXIiLCJtYXhZZWFyIiwibWluWWVhciIsInllYXJEZXNjZW5kaW5nIiwiZmlsbEhvdXIiLCJoMTIiLCJoMjQiLCJmaWxsTWludXRlIiwiZmlsbFNlY29uZCIsInNlY29uZFN0ZXAiLCJmaWxsQW1wbSIsImFtcG1MIiwiYW1wbVUiLCJub3RTZWxlY3RlZCIsIiRhbXBtIiwiZ2V0TmVhcmVzdCIsIm9wdFZhbHVlIiwiZGlzdGFuY2UiLCJyb3VuZFRpbWUiLCJlcnJvckNsYXNzIiwiYm9yZGVyQ29sb3IiLCJ2aWV3Zm9ybWF0IiwicEluaXRJbnB1dCIsImVtcHR5SW5wdXRDbGFzcyIsImRlZmF1bHRDbGFzcyIsInN0ZHR5cGVzIiwiZG9jU2Nyb2xsIiwicGFyZW50V2lkdGgiLCJwYXJlbnRIZWlnaHQiLCJwYXJlbnRMZWZ0IiwiVVRDVG9kYXkiLCJEYXRlcGlja2VyIiwiX3Byb2Nlc3Nfb3B0aW9ucyIsIl9idWlsZEV2ZW50cyIsImNhbGVuZGFyV2Vla3MiLCJfYWxsb3dfdXBkYXRlIiwiX28iLCJtaW5WaWV3TW9kZSIsIl9zZWNvbmRhcnlFdmVudHMiLCJfYXBwbHlFdmVudHMiLCJldnMiLCJfdW5hcHBseUV2ZW50cyIsIl9hdHRhY2hTZWNvbmRhcnlFdmVudHMiLCJfZGV0YWNoU2Vjb25kYXJ5RXZlbnRzIiwiX3RyaWdnZXIiLCJhbHRkYXRlIiwibG9jYWxfZGF0ZSIsImFsdGZvcm1hdCIsImRhdGVwaWNrZXIiLCJjZWxsIiwic2V0UmFuZ2UiLCJnZXRDbGFzc05hbWVzIiwiY2xzIiwid3MiLCJ5dGgiLCJjYWxXZWVrIiwiYmVmb3JlU2hvd0RheSIsIkRhdGVSYW5nZVBpY2tlciIsImRhdGVVcGRhdGVkIiwicGlja2VycyIsInVwZGF0ZURhdGVzIiwidXBkYXRlUmFuZ2VzIiwiZHAiLCJvcHRzX2Zyb21fZWwiLCJpbmtleSIsIm9wdHNfZnJvbV9sb2NhbGUiLCJsb2NhbGVfb3B0cyIsInRoaXNfcmV0dXJuIiwiZWxvcHRzIiwieG9wdHMiLCJsb2NvcHRzIiwicm9wdHMiLCJmcGFydHMiLCJiZGF0ZXBpY2tlciIsImluaXRQaWNrZXIiLCJkcGciLCJwYXJzZWRGb3JtYXQiLCJwYXJzZWRWaWV3Rm9ybWF0IiwiZm9ybWF0dGVkQmFjayIsIkRhdGVGaWVsZCIsIkRhdGVUaW1lIiwidG9VVEMiLCJmcm9tVVRDIiwiRGF0ZVRpbWVGaWVsZCIsImRhdGV0aW1lZmllbGQiLCJjYWNoZWRXaWR0aCIsInNwcmludGYiLCJnZXRQcm9wZXJ0eUZyb21PdGhlciIsImdldEZpZWxkSW5kZXgiLCJzZXRGaWVsZEluZGV4IiwidG90YWxDb2wiLCJmaWVsZEluZGV4IiwiZ2V0U2Nyb2xsQmFyV2lkdGgiLCJpbm5lciIsIm91dGVyIiwiY2FsY3VsYXRlT2JqZWN0VmFsdWUiLCJjb21wYXJlT2JqZWN0cyIsIm9iamVjdEEiLCJvYmplY3RCIiwiY29tcGFyZUxlbmd0aCIsIm9iamVjdEFQcm9wZXJ0aWVzIiwib2JqZWN0QlByb3BlcnRpZXMiLCJwcm9wTmFtZSIsImVzY2FwZUhUTUwiLCJnZXRSZWFsRGF0YUF0dHIiLCJhdXhBdHRyIiwiZ2V0SXRlbUZpZWxkIiwiaXNJRUJyb3dzZXIiLCJoYXNEb250RW51bUJ1ZyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZG9udEVudW1zIiwiZG9udEVudW1zTGVuZ3RoIiwiQm9vdHN0cmFwVGFibGUiLCIkZWxfIiwidGltZW91dElkXyIsInRpbWVvdXRGb290ZXJfIiwic29ydENsYXNzIiwidW5kZWZpbmVkVGV4dCIsInNvcnROYW1lIiwic3RyaXBlZCIsInRvdGFsRmllbGQiLCJkYXRhRmllbGQiLCJxdWVyeVBhcmFtcyIsInF1ZXJ5UGFyYW1zVHlwZSIsInJlc3BvbnNlSGFuZGxlciIsIm9ubHlJbmZvUGFnaW5hdGlvbiIsInBhZ2luYXRpb25Mb29wIiwic2lkZVBhZ2luYXRpb24iLCJ0b3RhbFJvd3MiLCJwYWdlTnVtYmVyIiwicGFnZVNpemUiLCJwYWdlTGlzdCIsInBhZ2luYXRpb25IQWxpZ24iLCJwYWdpbmF0aW9uVkFsaWduIiwicGFnaW5hdGlvbkRldGFpbEhBbGlnbiIsInBhZ2luYXRpb25QcmVUZXh0IiwicGFnaW5hdGlvbk5leHRUZXh0Iiwic2VhcmNoIiwic2VhcmNoT25FbnRlcktleSIsInN0cmljdFNlYXJjaCIsInNlYXJjaEFsaWduIiwic2VsZWN0SXRlbU5hbWUiLCJzaG93SGVhZGVyIiwic2hvd0Zvb3RlciIsInNob3dDb2x1bW5zIiwic2hvd1BhZ2luYXRpb25Td2l0Y2giLCJzaG93UmVmcmVzaCIsInNob3dUb2dnbGUiLCJidXR0b25zQWxpZ24iLCJzbWFydERpc3BsYXkiLCJtaW5pbXVtQ291bnRDb2x1bW5zIiwiaWRGaWVsZCIsInVuaXF1ZUlkIiwiY2FyZFZpZXciLCJkZXRhaWxWaWV3IiwiZGV0YWlsRm9ybWF0dGVyIiwidHJpbU9uU2VhcmNoIiwiY2xpY2tUb1NlbGVjdCIsInNpbmdsZVNlbGVjdCIsInRvb2xiYXIiLCJ0b29sYmFyQWxpZ24iLCJjaGVja2JveEhlYWRlciIsInNvcnRhYmxlIiwic2lsZW50U29ydCIsIm1haW50YWluU2VsZWN0ZWQiLCJzZWFyY2hUaW1lT3V0Iiwic2VhcmNoVGV4dCIsImljb25TaXplIiwiYnV0dG9uc0NsYXNzIiwiaWNvbnNQcmVmaXgiLCJwYWdpbmF0aW9uU3dpdGNoRG93biIsInBhZ2luYXRpb25Td2l0Y2hVcCIsImRldGFpbE9wZW4iLCJkZXRhaWxDbG9zZSIsImN1c3RvbVNlYXJjaCIsImN1c3RvbVNvcnQiLCJyb3dTdHlsZSIsInJvd0F0dHJpYnV0ZXMiLCJmb290ZXJTdHlsZSIsIm9uQWxsIiwib25DbGlja0NlbGwiLCJvbkRibENsaWNrQ2VsbCIsIm9uQ2xpY2tSb3ciLCJvbkRibENsaWNrUm93Iiwib25DaGVjayIsIm9uVW5jaGVjayIsIm9uQ2hlY2tBbGwiLCJvblVuY2hlY2tBbGwiLCJvbkNoZWNrU29tZSIsIm9uVW5jaGVja1NvbWUiLCJvbkxvYWRTdWNjZXNzIiwib25Mb2FkRXJyb3IiLCJvbkNvbHVtblN3aXRjaCIsIm9uUGFnZUNoYW5nZSIsIm9uU2VhcmNoIiwib25Ub2dnbGUiLCJvblByZUJvZHkiLCJvblBvc3RCb2R5Iiwib25Qb3N0SGVhZGVyIiwib25FeHBhbmRSb3ciLCIkZGV0YWlsIiwib25Db2xsYXBzZVJvdyIsIm9uUmVmcmVzaE9wdGlvbnMiLCJvblJlZnJlc2giLCJvblJlc2V0VmlldyIsIkxPQ0FMRVMiLCJmb3JtYXRMb2FkaW5nTWVzc2FnZSIsImZvcm1hdFJlY29yZHNQZXJQYWdlIiwiZm9ybWF0U2hvd2luZ1Jvd3MiLCJwYWdlRnJvbSIsInBhZ2VUbyIsImZvcm1hdERldGFpbFBhZ2luYXRpb24iLCJmb3JtYXRTZWFyY2giLCJmb3JtYXROb01hdGNoZXMiLCJmb3JtYXRQYWdpbmF0aW9uU3dpdGNoIiwiZm9ybWF0UmVmcmVzaCIsImZvcm1hdFRvZ2dsZSIsImZvcm1hdENvbHVtbnMiLCJmb3JtYXRBbGxSb3dzIiwiQ09MVU1OX0RFRkFVTFRTIiwiY2hlY2tib3hFbmFibGVkIiwidGl0bGVUb29sdGlwIiwiZmFsaWduIiwic3dpdGNoYWJsZSIsImZvcm1hdHRlciIsImZvb3RlckZvcm1hdHRlciIsImNlbGxTdHlsZSIsInNlYXJjaGFibGUiLCJzZWFyY2hGb3JtYXR0ZXIiLCJjYXJkVmlzaWJsZSIsIkVWRU5UUyIsImFsbC5icy50YWJsZSIsImNsaWNrLWNlbGwuYnMudGFibGUiLCJkYmwtY2xpY2stY2VsbC5icy50YWJsZSIsImNsaWNrLXJvdy5icy50YWJsZSIsImRibC1jbGljay1yb3cuYnMudGFibGUiLCJzb3J0LmJzLnRhYmxlIiwiY2hlY2suYnMudGFibGUiLCJ1bmNoZWNrLmJzLnRhYmxlIiwiY2hlY2stYWxsLmJzLnRhYmxlIiwidW5jaGVjay1hbGwuYnMudGFibGUiLCJjaGVjay1zb21lLmJzLnRhYmxlIiwidW5jaGVjay1zb21lLmJzLnRhYmxlIiwibG9hZC1zdWNjZXNzLmJzLnRhYmxlIiwibG9hZC1lcnJvci5icy50YWJsZSIsImNvbHVtbi1zd2l0Y2guYnMudGFibGUiLCJwYWdlLWNoYW5nZS5icy50YWJsZSIsInNlYXJjaC5icy50YWJsZSIsInRvZ2dsZS5icy50YWJsZSIsInByZS1ib2R5LmJzLnRhYmxlIiwicG9zdC1ib2R5LmJzLnRhYmxlIiwicG9zdC1oZWFkZXIuYnMudGFibGUiLCJleHBhbmQtcm93LmJzLnRhYmxlIiwiY29sbGFwc2Utcm93LmJzLnRhYmxlIiwicmVmcmVzaC1vcHRpb25zLmJzLnRhYmxlIiwicmVzZXQtdmlldy5icy50YWJsZSIsInJlZnJlc2guYnMudGFibGUiLCJpbml0TG9jYWxlIiwiaW5pdFRhYmxlIiwiaW5pdEhlYWRlciIsImluaXREYXRhIiwiaW5pdEhpZGRlblJvd3MiLCJpbml0Rm9vdGVyIiwiaW5pdFRvb2xiYXIiLCJpbml0UGFnaW5hdGlvbiIsImluaXRCb2R5IiwiaW5pdFNlYXJjaFRleHQiLCJpbml0U2VydmVyIiwiJHRhYmxlQ29udGFpbmVyIiwiJHRhYmxlSGVhZGVyIiwiJHRhYmxlQm9keSIsIiR0YWJsZUxvYWRpbmciLCIkdGFibGVGb290ZXIiLCIkdG9vbGJhciIsIiRwYWdpbmF0aW9uIiwiX2lkIiwiX2NsYXNzIiwiY3NwYW4iLCJyc3BhbiIsInR4IiwidHkiLCJmcm9tSHRtbCIsInZpc2libGVDb2x1bW5zIiwiZmllbGRzIiwiZm9ybWF0dGVycyIsInNvcnRlcnMiLCJzb3J0TmFtZXMiLCJjZWxsU3R5bGVzIiwic2VhcmNoYWJsZXMiLCJjbGFzc18iLCJ1bml0V2lkdGgiLCJzdGF0ZUZpZWxkIiwiZ2V0Q2FyZXQiLCJyZXNldFdpZHRoIiwiJHNlbGVjdEFsbCIsInVwZGF0ZVNlbGVjdGVkIiwiaW5pdFNvcnQiLCJ0aW1lb3V0SWQiLCJfcG9zaXRpb24iLCJsb2NhbGVDb21wYXJlIiwiJHRoaXNfIiwiJGhlYWRlcl8iLCIka2VlcE9wZW4iLCJzd2l0Y2hhYmxlQ291bnQiLCJzaG93VG9vbGJhciIsInRvZ2dsZVBhZ2luYXRpb24iLCJ0b2dnbGVWaWV3IiwidG9nZ2xlQ29sdW1uIiwiaW5pdFNlYXJjaCIsInVwZGF0ZVBhZ2luYXRpb24iLCJmaWx0ZXJDb2x1bW5zIiwicHJvcF9pbmRleCIsIiRhbGxTZWxlY3RlZCIsIiRwYWdlTGlzdCIsIiRwcmUiLCIkbnVtYmVyIiwidG90YWxQYWdlcyIsInBhZ2VMc3QiLCJvblBhZ2VMaXN0Q2hhbmdlIiwib25QYWdlRmlyc3QiLCJvblBhZ2VQcmUiLCJvblBhZ2VOZXh0Iiwib25QYWdlTGFzdCIsIm9uUGFnZU51bWJlciIsInJlc2V0Um93cyIsImluaXRSb3ciLCJwYXJlbnREb20iLCJjc3NlcyIsImRhdGFfIiwiaHRtbEF0dHJpYnV0ZXMiLCJoaWRkZW5Sb3dzIiwidmFsdWVfIiwiaWRfIiwicm93c3Bhbl8iLCJjb2xzcGFuXyIsInRpdGxlXyIsImNzc2VzXyIsImZpeGVkU2Nyb2xsIiwidHJGcmFnbWVudHMiLCJoYXNUciIsIiR0ZCIsIiR0ciIsImdldFZpc2libGVGaWVsZHMiLCIkc2VsZWN0SXRlbSIsInJlc2V0VmlldyIsInNpbGVudCIsImZpbHRlckNvbHVtbnNQYXJ0aWFsIiwiX3hociIsImNoZWNrQWxsIiwiJHNlbGVjdEFsbF8iLCJ1cGRhdGVSb3dzIiwicmVzZXRIZWFkZXIiLCJmaXRIZWFkZXIiLCJmaXhlZEJvZHkiLCJmb2N1c2VkIiwiZm9jdXNlZFRlbXAiLCIkdGgiLCIkaGVhZGVyVGgiLCJtYXJnaW4tcmlnaHQiLCJ2aXNpYmxlRmllbGRzIiwiJHRocyIsInJlc2V0Rm9vdGVyIiwiZml0Rm9vdGVyIiwiJGZvb3RlclRkIiwiZWxXaWR0aCIsIm5lZWRVcGRhdGUiLCJ0b29sYmFySGVpZ2h0IiwicGFnaW5hdGlvbkhlaWdodCIsInVzZUN1cnJlbnRQYWdlIiwicmVtb3ZlQWxsIiwiZ2V0Um93QnlVbmlxdWVJZCIsImRhdGFSb3ciLCJyb3dVbmlxdWVJZCIsInJlbW92ZUJ5VW5pcXVlSWQiLCJ1cGRhdGVCeVVuaXF1ZUlkIiwiYWxsUGFyYW1zIiwicm93SWQiLCJpbnNlcnRSb3ciLCJ1cGRhdGVSb3ciLCJzaG93Um93IiwidG9nZ2xlUm93IiwiaGlkZVJvdyIsImdldEhpZGRlblJvd3MiLCJtZXJnZUNlbGxzIiwidXBkYXRlQ2VsbCIsInJlaW5pdCIsImdldFNlbGVjdGlvbnMiLCJnZXRBbGxTZWxlY3Rpb25zIiwiY2hlY2tBbGxfIiwidW5jaGVja0FsbCIsImNoZWNrSW52ZXJ0IiwiY2hlY2tfIiwidW5jaGVjayIsImNoZWNrQnkiLCJjaGVja0J5XyIsInVuY2hlY2tCeSIsInNob3dDb2x1bW4iLCJoaWRlQ29sdW1uIiwiZ2V0SGlkZGVuQ29sdW1ucyIsImdldFZpc2libGVDb2x1bW5zIiwidG9nZ2xlQWxsQ29sdW1ucyIsInNob3dBbGxDb2x1bW5zIiwiaGlkZUFsbENvbHVtbnMiLCJmaWx0ZXJCeSIsImdldFNjcm9sbFBvc2l0aW9uIiwic2VsZWN0UGFnZSIsInByZXZQYWdlIiwibmV4dFBhZ2UiLCJyZWZyZXNoT3B0aW9ucyIsInJlc2V0U2VhcmNoIiwiZXhwYW5kUm93XyIsImV4cGFuZFJvdyIsImNvbGxhcHNlUm93IiwiZXhwYW5kQWxsUm93cyIsImlzU3ViVGFibGUiLCJkZXRhaWxJY29uIiwiZXhlY3V0ZUludGVydmFsIiwiaWRJbnRlcnZhbCIsInRycyIsImNvbGxhcHNlQWxsUm93cyIsInVwZGF0ZUZvcm1hdFRleHQiLCJhbGxvd2VkTWV0aG9kcyIsImNvbHVtbkRlZmF1bHRzIiwiZGlhY3JpdGljc01hcCIsImRlZmF1bHRBY2NlbnRzRGlhY3JpdGljcyIsImxldHRlcnMiLCJpbml0TmV1dHJhbGlzZXIiLCJyZW1vdmVEaWFjcml0aWNzIiwic2VhcmNoQWNjZW50TmV1dHJhbGlzZSIsIl9pbml0U2VhcmNoIiwiY29va2llSWRzIiwiZmlsdGVyQ29udHJvbCIsImdldEN1cnJlbnRIZWFkZXIiLCJnZXRDdXJyZW50U2VhcmNoQ29udHJvbHMiLCJzZWFyY2hDb250cm9scyIsImNvb2tpZUVuYWJsZWQiLCJpbkFycmF5Q29va2llc0VuYWJsZWQiLCJjb29raWVOYW1lIiwiY29va2llc0VuYWJsZWQiLCJzZXRDb29raWUiLCJjb29raWVWYWx1ZSIsImNvb2tpZSIsImNvb2tpZUlkVGFibGUiLCJjb29raWVTdG9yYWdlIiwiY29va2llRXhwaXJlIiwiY29va2llUGF0aCIsImNvb2tpZURvbWFpbiIsImNvb2tpZVNlY3VyZSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJzZXNzaW9uU3RvcmFnZSIsImdldENvb2tpZSIsImdldEl0ZW0iLCJkZWxldGVDb29raWUiLCJyZW1vdmVJdGVtIiwiY2FsY3VsYXRlRXhwaXJhdGlvbiIsImluaXRDb29raWVGaWx0ZXJzIiwicGFyc2VkQ29va2llRmlsdGVycyIsImZpbHRlckNvbnRyb2xWYWx1ZXNMb2FkZWQiLCJjYWNoZWRGaWx0ZXJzIiwiYXBwbHlDb29raWVGaWx0ZXJzIiwiZmlsdGVyZWRDb29raWVzIiwiaW5pdENvbHVtblNlYXJjaCIsImZpbHRlckNvbnRyb2xzIiwiX2luaXRUYWJsZSIsIl9pbml0U2VydmVyIiwiX29uU29ydCIsIl9vblBhZ2VOdW1iZXIiLCJfb25QYWdlTGlzdENoYW5nZSIsIl9vblBhZ2VGaXJzdCIsIl9vblBhZ2VQcmUiLCJfb25QYWdlTmV4dCIsIl9vblBhZ2VMYXN0IiwiX3RvZ2dsZUNvbHVtbiIsIl9zZWxlY3RQYWdlIiwiX29uU2VhcmNoIiwiaXNOZXdGaWVsZCIsInNlbGVjdHNXaXRob3V0RGVmYXVsdHMiLCJjb2x1bW5IYXNTZWxlY3RDb250cm9sIiwiY29sdW1uSGFzRGVmYXVsdFNlbGVjdFZhbHVlcyIsImZpbHRlckRhdGEiLCJjb29raWVzUHJlc2VudCIsImluaXRDb29raWUiLCJzb3J0T3JkZXJDb29raWUiLCJzb3J0T3JkZXJOYW1lQ29va2llIiwicGFnZU51bWJlckNvb2tpZSIsInBhZ2VMaXN0Q29va2llIiwiY29sdW1uc0Nvb2tpZSIsInNlYXJjaFRleHRDb29raWUiLCJnZXRDb29raWVzIiwiY29va2llcyIsImNvcHl0ZXh0IiwidGV4dEZpZWxkIiwiY29weUJ0biIsImNvcHlXSGlkZGVuQnRuIiwiY29weURlbGVtZXRlciIsIl9pbml0VG9vbGJhciIsIiRidG5Hcm91cCIsImNvcHlidG4iLCJjb3B5Q29sdW1uc1RvQ2xpcGJvYXJkIiwiY29weWhpZGRlbmJ0biIsImNvcHlDb2x1bW5zVG9DbGlwYm9hcmRXaXRoSGlkZGVuIiwiZGVsaW1ldCIsImluZHkiLCJvbkVkaXRhYmxlSW5pdCIsIm9uRWRpdGFibGVTYXZlIiwib2xkVmFsdWUiLCJvbkVkaXRhYmxlU2hvd24iLCJvbkVkaXRhYmxlSGlkZGVuIiwiZWRpdGFibGUtaW5pdC5icy50YWJsZSIsImVkaXRhYmxlLXNhdmUuYnMudGFibGUiLCJlZGl0YWJsZS1zaG93bi5icy50YWJsZSIsImVkaXRhYmxlLWhpZGRlbi5icy50YWJsZSIsIl9pbml0Qm9keSIsImVkaXRhYmxlT3B0aW9ucyIsImVkaXRhYmxlRGF0YU1hcmt1cCIsImVkaXRhYmxlRGF0YVByZWZpeCIsInByb2Nlc3NEYXRhT3B0aW9ucyIsImRhc2hLZXkiLCIkMSIsIl9mb3JtYXR0ZXIiLCJfZG9udF9lZGl0X2Zvcm1hdHRlciIsIm5vZWRpdEZvcm1hdHRlciIsIlRZUEVfTkFNRSIsInBuZyIsImNzdiIsInNxbCIsImV4Y2VsIiwieGxzeCIsInBvd2VycG9pbnQiLCJzaG93RXhwb3J0IiwiZXhwb3J0RGF0YVR5cGUiLCJleHBvcnRUeXBlcyIsImV4cG9ydE9wdGlvbnMiLCJleHBvcnQiLCJmb3JtYXRFeHBvcnQiLCIkZXhwb3J0IiwiJG1lbnUiLCJkb0V4cG9ydCIsInNlbGVjdGVkRGF0YSIsImZsYXQiLCJyZWN1cnNlIiwiZmxhdFNlcGFyYXRvciIsImZsYXRIZWxwZXIiLCJmbGF0QXJyYXkiLCJfaW5pdERhdGEiLCJtdWx0aXBsZVNlYXJjaCIsImRlbGltZXRlciIsInN0ckFycmF5IiwiZGF0YUZpbHRlcmVkIiwiaXNTaW5nbGVTb3J0Iiwic2hvd1NvcnRNb2RhbCIsIl9zZWxlY3RvciIsIiRzb3J0TW9kYWwiLCJzTW9kYWwiLCJmb3JtYXRNdWx0aXBsZVNvcnQiLCJwbHVzIiwiZm9ybWF0QWRkTGV2ZWwiLCJtaW51cyIsImZvcm1hdERlbGV0ZUxldmVsIiwiZm9ybWF0Q29sdW1uIiwiZm9ybWF0T3JkZXIiLCJmb3JtYXRDYW5jZWwiLCJmb3JtYXRTb3J0IiwiJHJvd3MiLCJhZGRMZXZlbCIsInNldEJ1dHRvblN0YXRlcyIsIiRhbGVydCIsInNvcnRQcmlvcml0eSIsIiRyb3ciLCJzb3J0ZWRfZmllbGRzIiwiZm9ybWF0RHVwbGljYXRlQWxlcnRUaXRsZSIsImZvcm1hdER1cGxpY2F0ZUFsZXJ0RGVzY3JpcHRpb24iLCJtdWx0aVNvcnQiLCJvbk11bHRpcGxlU29ydCIsInNob3dNdWx0aVNvcnQiLCJtdWx0aXBsZS1zb3J0LmJzLnRhYmxlIiwiZm9ybWF0U29ydEJ5IiwiZm9ybWF0VGhlbkJ5IiwiZm9ybWF0U29ydE9yZGVycyIsImFzYyIsInNvcnRNb2RhbElkIiwiJG11bHRpU29ydEJ0biIsImFzc2lnblNvcnRhYmxlQXJyb3dzIiwiY21wIiwiYXJyYXlDbXAiLCIkbXVsdGlTb3J0TmFtZSIsIiRtdWx0aVNvcnRPcmRlciIsImFscGhhbnVtIiwiY2h1bmtpZnkiLCJ0eiIsInN0cmluZ2Z5IiwibnVtZXJpY09ubHkiLCJzdHJpcE5vbk51bWJlciIsImdldEZpbHRlckZpZWxkcyIsInNldEZpbHRlclZhbHVlcyIsIiRmaWx0ZXJFbG1zIiwiZWxlIiwiJGVsZSIsImNyZWF0ZUZpbHRlciIsImVuYWJsZUZpbHRlciIsImZpbHRlckNsYXNzIiwiJGlucHV0cyIsIiRzZWxlY3RzIiwib25Db2x1bW5TZWFyY2giLCJpbml0U2VsZWN0MiIsIiRzZWxlY3RFbGUiLCJzZWxlY3QyT3B0cyIsImRyb3Bkb3duUGFyZW50IiwiZmlsdGVyVmFsdWVzIiwiX2luaXRIZWFkZXIiLCJmaWx0ZXJWYWx1ZSIsInJvd1ZhbHVlIiwiZmlsdGVyU3RyaWN0U2VhcmNoIiwic2V0RmlsdGVyRGF0YSIsInN0aWNreUhlYWRlciIsInRhYmxlX2lkIiwiaGVhZGVyX2lkIiwic3RpY2t5X2hlYWRlcl9jb250YWluZXJfaWQiLCJhbmNob3JfYmVnaW5faWQiLCJhbmNob3JfZW5kX2lkIiwiJHN0aWNreUhlYWRlciIsInJlbmRlcl9zdGlja3lfaGVhZGVyIiwibWF0Y2hfcG9zaXRpb25feCIsInRhYmxlX2hlYWRlcl9pZCIsImhlYWRlcl9oZWlnaHQiLCJzdGlja3lIZWFkZXJPZmZzZXRZIiwiZV9lbmQiLCJzY3JvbGxhYmxlX2RpdiIsInNldFBhZ2VBbGVydCIsImNsZWFyUGFnZUFsZXJ0IiwiRm9ybU1hcHBlciIsIm1hcERhdGFUb0NoZWNrYm94RmllbGQiLCJtYXBEYXRhVG9EYXRlRmllbGQiLCJtYXBEYXRhVG9SYWRpb0ZpZWxkIiwibWFwRGF0YVRvU2VsZWN0TXVsdGlwbGVGaWVsZCIsIm1hcERhdGFUb1NlbGVjdEZpZWxkIiwibWFwRGF0YVRvU3RhdGljRmllbGQiLCJtYXBEYXRhVG9UZXh0RmllbGQiLCJtYXBEYXRhVG9GaWVsZCIsIm1hcERhdGFUb0Zvcm0iLCJuYW1lZEl0ZW0iLCJOb3RlU2F2ZUJ1dHRvbiIsInVpIiwic3VtbWVybm90ZSIsInBvc3QiLCJwYXRobmFtZSIsIlJvdXRlciIsInJvdXRlcyIsImdlbmVyYXRlUGF0aCIsInBhcmFtZXRlcnMiLCJyb3V0ZSIsInNldEJhc2VQYXRoIiwic2V0Um91dGVzIiwiYWRkUm91dGVzIiwiZGVib3VuY2UiLCJpbW1lZGlhdGUiLCJsYXRlciIsImNhbGxOb3ciLCJzaG93Q2xlYXIiLCJzaG93VG9kYXlCdXR0b24iLCJhbGxvd0lucHV0VG9nZ2xlIl0sIm1hcHBpbmdzIjoiQ0FhQSxTQUFZQSxFQUFRQyxHQUVuQixhQUVBLFVBQVlDLFNBQVcsaUJBQW1CQSxPQUFPQyxVQUFZLFNBQVcsQ0FTdkVELE9BQU9DLFFBQVVILEVBQU9JLFNBQ3ZCSCxFQUFTRCxFQUFRLE1BQ2pCLFNBQVVLLEdBQ1QsSUFBTUEsRUFBRUQsU0FBVyxDQUNsQixNQUFNLElBQUlFLE1BQU8sNENBRWxCLE9BQU9MLEVBQVNJLFFBRVosQ0FDTkosRUFBU0QsYUFJQ08sU0FBVyxZQUFjQSxPQUFTQyxLQUFNLFNBQVVELEVBQVFFLEdBTXRFLGFBRUEsSUFBSUMsS0FFSixJQUFJTixFQUFXRyxFQUFPSCxTQUV0QixJQUFJTyxFQUFXQyxPQUFPQyxlQUV0QixJQUFJQyxFQUFRSixFQUFJSSxNQUVoQixJQUFJQyxFQUFTTCxFQUFJSyxPQUVqQixJQUFJQyxFQUFPTixFQUFJTSxLQUVmLElBQUlDLEVBQVVQLEVBQUlPLFFBRWxCLElBQUlDLEtBRUosSUFBSUMsRUFBV0QsRUFBV0MsU0FFMUIs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Q1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxLQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxLQUNWQyxJQUFVLEtBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsS0FDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLEtBQ1ZDLElBQVUsSUFDVkMsSUFBVSxJQUNWQyxJQUFVLElBQ1ZDLElBQVUsSUFDVkMs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a2IsTUFBTSxXQUVka3ZCLEVBQUUsd0JBQXdCamlCLEdBQUcsUUFBUSxXQUNqQ3BILFFBQVFpcUIsS0FBSzFvQixLQUFPOG5CLEVBQUVocUMsTUFBTStSLEtBQUssaUJBQ2pDaTRCLEVBQUUsb0JBQW9CNWtCLE9BQ3RCNGtCLEVBQUUsb0JBQW9CejVCLE9BQU8sSUFBSXk1QixFQUFFaHFDLE1BQU0rUixLQUFLLGdCQUFnQm1UIiwiZmlsZSI6ImFyay1kZWZhdWx0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjIuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTctMDMtMjBUMTg6NTlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjIuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2csXG5cblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0XHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRcdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG5cdH0sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2ltcGxlIHNlbGVjdG9yIHRoYXQgY2FuIGJlIGZpbHRlcmVkIGRpcmVjdGx5LCByZW1vdmluZyBub24tRWxlbWVudHNcblx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xuXHR9XG5cblx0Ly8gQ29tcGxleCBzZWxlY3RvciwgY29tcGFyZSB0aGUgdHdvIHNldHMsIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3QgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGpRdWVyeS5jYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHRkbyB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxuXHRcdH0gd2hpbGUgKFxuXHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcblx0XHQpO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogalF1ZXJ5LmlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIG5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIFwiPnRib2R5XCIsIGVsZW0gKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpLFxuXHRcdHZhbCA9IDA7XG5cblx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdGlmICggZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRpID0gNDtcblxuXHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdH0gZWxzZSB7XG5cdFx0aSA9IG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvSGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgKSB7XG5cdFx0dmFsID0gZWxlbVsgXCJvZmZzZXRcIiArIG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApIF07XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvYywgZG9jRWxlbSwgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHR3aW4gPSBkb2MuZGVmYXVsdFZpZXc7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHQvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhbm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0ID0ge1xuXHRcdFx0XHR0b3A6IHBhcmVudE9mZnNldC50b3AgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICksXG5cdFx0XHRcdGxlZnQ6IHBhcmVudE9mZnNldC5sZWZ0ICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuXG4vKiFcbiAqIGpRdWVyeSBGb3JtIFBsdWdpblxuICogdmVyc2lvbjogNC4yLjJcbiAqIFJlcXVpcmVzIGpRdWVyeSB2MS43LjIgb3IgbGF0ZXJcbiAqIFByb2plY3QgcmVwb3NpdG9yeTogaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS1mb3JtL2Zvcm1cblxuICogQ29weXJpZ2h0IDIwMTcgS2V2aW4gTW9ycmlzXG4gKiBDb3B5cmlnaHQgMjAwNiBNLiBBbHN1cFxuXG4gKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBMR1BMLTIuMSsgb3IgTUlUIGxpY2Vuc2VzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5LWZvcm0vZm9ybSNsaWNlbnNlXG5cbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuXHRcdGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcblx0fSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdC8vIE5vZGUvQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCByb290LCBqUXVlcnkgKSB7XG5cdFx0XHRpZiAodHlwZW9mIGpRdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0Ly8gcmVxdWlyZSgnalF1ZXJ5JykgcmV0dXJucyBhIGZhY3RvcnkgdGhhdCByZXF1aXJlcyB3aW5kb3cgdG8gYnVpbGQgYSBqUXVlcnkgaW5zdGFuY2UsIHdlIG5vcm1hbGl6ZSBob3cgd2UgdXNlIG1vZHVsZXNcblx0XHRcdFx0Ly8gdGhhdCByZXF1aXJlIHRoaXMgcGF0dGVybiBidXQgdGhlIHdpbmRvdyBwcm92aWRlZCBpcyBhIG5vb3AgaWYgaXQncyBkZWZpbmVkIChob3cganF1ZXJ5IHdvcmtzKVxuXHRcdFx0XHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKShyb290KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZmFjdG9yeShqUXVlcnkpO1xuXHRcdFx0cmV0dXJuIGpRdWVyeTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xuXHRcdGZhY3RvcnkoalF1ZXJ5KTtcblx0fVxuXG59KGZ1bmN0aW9uICgkKSB7XG4vKiBlc2xpbnQtZW5hYmxlICovXG5cdCd1c2Ugc3RyaWN0JztcblxuXHQvKlxuXHRcdFVzYWdlIE5vdGU6XG5cdFx0LS0tLS0tLS0tLS1cblx0XHREbyBub3QgdXNlIGJvdGggYWpheFN1Ym1pdCBhbmQgYWpheEZvcm0gb24gdGhlIHNhbWUgZm9ybS4gVGhlc2Vcblx0XHRmdW5jdGlvbnMgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4gVXNlIGFqYXhTdWJtaXQgaWYgeW91IHdhbnRcblx0XHR0byBiaW5kIHlvdXIgb3duIHN1Ym1pdCBoYW5kbGVyIHRvIHRoZSBmb3JtLiBGb3IgZXhhbXBsZSxcblxuXHRcdCQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdFx0JCgnI215Rm9ybScpLm9uKCdzdWJtaXQnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTsgLy8gPC0tIGltcG9ydGFudFxuXHRcdFx0XHQkKHRoaXMpLmFqYXhTdWJtaXQoe1xuXHRcdFx0XHRcdHRhcmdldDogJyNvdXRwdXQnXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHRVc2UgYWpheEZvcm0gd2hlbiB5b3Ugd2FudCB0aGUgcGx1Z2luIHRvIG1hbmFnZSBhbGwgdGhlIGV2ZW50IGJpbmRpbmdcblx0XHRmb3IgeW91LiBGb3IgZXhhbXBsZSxcblxuXHRcdCQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdFx0JCgnI215Rm9ybScpLmFqYXhGb3JtKHtcblx0XHRcdFx0dGFyZ2V0OiAnI291dHB1dCdcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0WW91IGNhbiBhbHNvIHVzZSBhamF4Rm9ybSB3aXRoIGRlbGVnYXRpb24gKHJlcXVpcmVzIGpRdWVyeSB2MS43KyksIHNvIHRoZVxuXHRcdGZvcm0gZG9lcyBub3QgaGF2ZSB0byBleGlzdCB3aGVuIHlvdSBpbnZva2UgYWpheEZvcm06XG5cblx0XHQkKCcjbXlGb3JtJykuYWpheEZvcm0oe1xuXHRcdFx0ZGVsZWdhdGlvbjogdHJ1ZSxcblx0XHRcdHRhcmdldDogJyNvdXRwdXQnXG5cdFx0fSk7XG5cblx0XHRXaGVuIHVzaW5nIGFqYXhGb3JtLCB0aGUgYWpheFN1Ym1pdCBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgZm9yIHlvdVxuXHRcdGF0IHRoZSBhcHByb3ByaWF0ZSB0aW1lLlxuXHQqL1xuXG5cdHZhciByQ1JMRiA9IC9cXHI/XFxuL2c7XG5cblx0LyoqXG5cdCAqIEZlYXR1cmUgZGV0ZWN0aW9uXG5cdCAqL1xuXHR2YXIgZmVhdHVyZSA9IHt9O1xuXG5cdGZlYXR1cmUuZmlsZWFwaSA9ICQoJzxpbnB1dCB0eXBlPVwiZmlsZVwiPicpLmdldCgwKS5maWxlcyAhPT0gdW5kZWZpbmVkO1xuXHRmZWF0dXJlLmZvcm1kYXRhID0gKHR5cGVvZiB3aW5kb3cuRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKTtcblxuXHR2YXIgaGFzUHJvcCA9ICEhJC5mbi5wcm9wO1xuXG5cdC8vIGF0dHIyIHVzZXMgcHJvcCB3aGVuIGl0IGNhbiBidXQgY2hlY2tzIHRoZSByZXR1cm4gdHlwZSBmb3Jcblx0Ly8gYW4gZXhwZWN0ZWQgc3RyaW5nLiBUaGlzIGFjY291bnRzIGZvciB0aGUgY2FzZSB3aGVyZSBhIGZvcm1cblx0Ly8gY29udGFpbnMgaW5wdXRzIHdpdGggbmFtZXMgbGlrZSBcImFjdGlvblwiIG9yIFwibWV0aG9kXCI7IGluIHRob3NlXG5cdC8vIGNhc2VzIFwicHJvcFwiIHJldHVybnMgdGhlIGVsZW1lbnRcblx0JC5mbi5hdHRyMiA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghaGFzUHJvcCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHZhciB2YWwgPSB0aGlzLnByb3AuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuXHRcdGlmICgodmFsICYmIHZhbC5qcXVlcnkpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmF0dHIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0fTtcblxuXHQvKipcblx0ICogYWpheFN1Ym1pdCgpIHByb3ZpZGVzIGEgbWVjaGFuaXNtIGZvciBpbW1lZGlhdGVseSBzdWJtaXR0aW5nXG5cdCAqIGFuIEhUTUwgZm9ybSB1c2luZyBBSkFYLlxuXHQgKlxuXHQgKiBAcGFyYW1cdHtvYmplY3R8c3RyaW5nfVx0b3B0aW9uc1x0XHRqcXVlcnkuZm9ybS5qcyBwYXJhbWV0ZXJzIG9yIGN1c3RvbSB1cmwgZm9yIHN1Ym1pc3Npb25cblx0ICogQHBhcmFtXHR7b2JqZWN0fVx0XHRkYXRhXHRcdGV4dHJhRGF0YVxuXHQgKiBAcGFyYW1cdHtzdHJpbmd9XHRcdGRhdGFUeXBlXHRhamF4IGRhdGFUeXBlXG5cdCAqIEBwYXJhbVx0e2Z1bmN0aW9ufVx0XHRvblN1Y2Nlc3NcdGFqYXggc3VjY2VzcyBjYWxsYmFjayBmdW5jdGlvblxuXHQgKi9cblx0JC5mbi5hamF4U3VibWl0ID0gZnVuY3Rpb24ob3B0aW9ucywgZGF0YSwgZGF0YVR5cGUsIG9uU3VjY2Vzcykge1xuXHRcdC8vIGZhc3QgZmFpbCBpZiBub3RoaW5nIHNlbGVjdGVkIChodHRwOi8vZGV2LmpxdWVyeS5jb20vdGlja2V0LzI3NTIpXG5cdFx0aWYgKCF0aGlzLmxlbmd0aCkge1xuXHRcdFx0bG9nKCdhamF4U3VibWl0OiBza2lwcGluZyBzdWJtaXQgcHJvY2VzcyAtIG5vIGVsZW1lbnQgc2VsZWN0ZWQnKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0LyogZXNsaW50IGNvbnNpc3RlbnQtdGhpczogW1wiZXJyb3JcIiwgXCIkZm9ybVwiXSAqL1xuXHRcdHZhciBtZXRob2QsIGFjdGlvbiwgdXJsLCAkZm9ybSA9IHRoaXM7XG5cblx0XHRpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdG9wdGlvbnMgPSB7c3VjY2Vzczogb3B0aW9uc307XG5cblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyB8fCAob3B0aW9ucyA9PT0gZmFsc2UgJiYgYXJndW1lbnRzLmxlbmd0aCA+IDApKSB7XG5cdFx0XHRvcHRpb25zID0ge1xuXHRcdFx0XHQndXJsJyAgICAgIDogb3B0aW9ucyxcblx0XHRcdFx0J2RhdGEnICAgICA6IGRhdGEsXG5cdFx0XHRcdCdkYXRhVHlwZScgOiBkYXRhVHlwZVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHR5cGVvZiBvblN1Y2Nlc3MgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0b3B0aW9ucy5zdWNjZXNzID0gb25TdWNjZXNzO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHR9XG5cblx0XHRtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgdGhpcy5hdHRyMignbWV0aG9kJyk7XG5cdFx0YWN0aW9uID0gb3B0aW9ucy51cmwgfHwgdGhpcy5hdHRyMignYWN0aW9uJyk7XG5cblx0XHR1cmwgPSAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpID8gJC50cmltKGFjdGlvbikgOiAnJztcblx0XHR1cmwgPSB1cmwgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYgfHwgJyc7XG5cdFx0aWYgKHVybCkge1xuXHRcdFx0Ly8gY2xlYW4gdXJsIChkb24ndCBpbmNsdWRlIGhhc2ggdmF1ZSlcblx0XHRcdHVybCA9ICh1cmwubWF0Y2goL14oW14jXSspLykgfHwgW10pWzFdO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7XG5cdFx0XHR1cmwgICAgICAgOiB1cmwsXG5cdFx0XHRzdWNjZXNzICAgOiAkLmFqYXhTZXR0aW5ncy5zdWNjZXNzLFxuXHRcdFx0dHlwZSAgICAgIDogbWV0aG9kIHx8ICQuYWpheFNldHRpbmdzLnR5cGUsXG5cdFx0XHRpZnJhbWVTcmMgOiAvXmh0dHBzL2kudGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZiB8fCAnJykgPyAnamF2YXNjcmlwdDpmYWxzZScgOiAnYWJvdXQ6YmxhbmsnXHRcdC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuXHRcdH0sIG9wdGlvbnMpO1xuXG5cdFx0Ly8gaG9vayBmb3IgbWFuaXB1bGF0aW5nIHRoZSBmb3JtIGRhdGEgYmVmb3JlIGl0IGlzIGV4dHJhY3RlZDtcblx0XHQvLyBjb252ZW5pZW50IGZvciB1c2Ugd2l0aCByaWNoIGVkaXRvcnMgbGlrZSB0aW55TUNFIG9yIEZDS0VkaXRvclxuXHRcdHZhciB2ZXRvID0ge307XG5cblx0XHR0aGlzLnRyaWdnZXIoJ2Zvcm0tcHJlLXNlcmlhbGl6ZScsIFt0aGlzLCBvcHRpb25zLCB2ZXRvXSk7XG5cblx0XHRpZiAodmV0by52ZXRvKSB7XG5cdFx0XHRsb2coJ2FqYXhTdWJtaXQ6IHN1Ym1pdCB2ZXRvZWQgdmlhIGZvcm0tcHJlLXNlcmlhbGl6ZSB0cmlnZ2VyJyk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIHByb3ZpZGUgb3Bwb3J0dW5pdHkgdG8gYWx0ZXIgZm9ybSBkYXRhIGJlZm9yZSBpdCBpcyBzZXJpYWxpemVkXG5cdFx0aWYgKG9wdGlvbnMuYmVmb3JlU2VyaWFsaXplICYmIG9wdGlvbnMuYmVmb3JlU2VyaWFsaXplKHRoaXMsIG9wdGlvbnMpID09PSBmYWxzZSkge1xuXHRcdFx0bG9nKCdhamF4U3VibWl0OiBzdWJtaXQgYWJvcnRlZCB2aWEgYmVmb3JlU2VyaWFsaXplIGNhbGxiYWNrJyk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdHZhciB0cmFkaXRpb25hbCA9IG9wdGlvbnMudHJhZGl0aW9uYWw7XG5cblx0XHRpZiAodHlwZW9mIHRyYWRpdGlvbmFsID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0dHJhZGl0aW9uYWwgPSAkLmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbDtcblx0XHR9XG5cblx0XHR2YXIgZWxlbWVudHMgPSBbXTtcblx0XHR2YXIgcXgsIGEgPSB0aGlzLmZvcm1Ub0FycmF5KG9wdGlvbnMuc2VtYW50aWMsIGVsZW1lbnRzLCBvcHRpb25zLmZpbHRlcmluZyk7XG5cblx0XHRpZiAob3B0aW9ucy5kYXRhKSB7XG5cdFx0XHR2YXIgb3B0aW9uc0RhdGEgPSAkLmlzRnVuY3Rpb24ob3B0aW9ucy5kYXRhKSA/IG9wdGlvbnMuZGF0YShhKSA6IG9wdGlvbnMuZGF0YTtcblxuXHRcdFx0b3B0aW9ucy5leHRyYURhdGEgPSBvcHRpb25zRGF0YTtcblx0XHRcdHF4ID0gJC5wYXJhbShvcHRpb25zRGF0YSwgdHJhZGl0aW9uYWwpO1xuXHRcdH1cblxuXHRcdC8vIGdpdmUgcHJlLXN1Ym1pdCBjYWxsYmFjayBhbiBvcHBvcnR1bml0eSB0byBhYm9ydCB0aGUgc3VibWl0XG5cdFx0aWYgKG9wdGlvbnMuYmVmb3JlU3VibWl0ICYmIG9wdGlvbnMuYmVmb3JlU3VibWl0KGEsIHRoaXMsIG9wdGlvbnMpID09PSBmYWxzZSkge1xuXHRcdFx0bG9nKCdhamF4U3VibWl0OiBzdWJtaXQgYWJvcnRlZCB2aWEgYmVmb3JlU3VibWl0IGNhbGxiYWNrJyk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIGZpcmUgdmV0b2FibGUgJ3ZhbGlkYXRlJyBldmVudFxuXHRcdHRoaXMudHJpZ2dlcignZm9ybS1zdWJtaXQtdmFsaWRhdGUnLCBbYSwgdGhpcywgb3B0aW9ucywgdmV0b10pO1xuXHRcdGlmICh2ZXRvLnZldG8pIHtcblx0XHRcdGxvZygnYWpheFN1Ym1pdDogc3VibWl0IHZldG9lZCB2aWEgZm9ybS1zdWJtaXQtdmFsaWRhdGUgdHJpZ2dlcicpO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHR2YXIgcSA9ICQucGFyYW0oYSwgdHJhZGl0aW9uYWwpO1xuXG5cdFx0aWYgKHF4KSB7XG5cdFx0XHRxID0gKHEgPyAocSArICcmJyArIHF4KSA6IHF4KTtcblx0XHR9XG5cblx0XHRpZiAob3B0aW9ucy50eXBlLnRvVXBwZXJDYXNlKCkgPT09ICdHRVQnKSB7XG5cdFx0XHRvcHRpb25zLnVybCArPSAob3B0aW9ucy51cmwuaW5kZXhPZignPycpID49IDAgPyAnJicgOiAnPycpICsgcTtcblx0XHRcdG9wdGlvbnMuZGF0YSA9IG51bGw7XHQvLyBkYXRhIGlzIG51bGwgZm9yICdnZXQnXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9wdGlvbnMuZGF0YSA9IHE7XHRcdC8vIGRhdGEgaXMgdGhlIHF1ZXJ5IHN0cmluZyBmb3IgJ3Bvc3QnXG5cdFx0fVxuXG5cdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuXG5cdFx0aWYgKG9wdGlvbnMucmVzZXRGb3JtKSB7XG5cdFx0XHRjYWxsYmFja3MucHVzaChmdW5jdGlvbigpIHtcblx0XHRcdFx0JGZvcm0ucmVzZXRGb3JtKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAob3B0aW9ucy5jbGVhckZvcm0pIHtcblx0XHRcdGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkZm9ybS5jbGVhckZvcm0ob3B0aW9ucy5pbmNsdWRlSGlkZGVuKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8vIHBlcmZvcm0gYSBsb2FkIG9uIHRoZSB0YXJnZXQgb25seSBpZiBkYXRhVHlwZSBpcyBub3QgcHJvdmlkZWRcblx0XHRpZiAoIW9wdGlvbnMuZGF0YVR5cGUgJiYgb3B0aW9ucy50YXJnZXQpIHtcblx0XHRcdHZhciBvbGRTdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzIHx8IGZ1bmN0aW9uKCl7fTtcblxuXHRcdFx0Y2FsbGJhY2tzLnB1c2goZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHtcblx0XHRcdFx0dmFyIHN1Y2Nlc3NBcmd1bWVudHMgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0Zm4gPSBvcHRpb25zLnJlcGxhY2VUYXJnZXQgPyAncmVwbGFjZVdpdGgnIDogJ2h0bWwnO1xuXG5cdFx0XHRcdCQob3B0aW9ucy50YXJnZXQpW2ZuXShkYXRhKS5lYWNoKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0b2xkU3VjY2Vzcy5hcHBseSh0aGlzLCBzdWNjZXNzQXJndW1lbnRzKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdH0gZWxzZSBpZiAob3B0aW9ucy5zdWNjZXNzKSB7XG5cdFx0XHRpZiAoJC5pc0FycmF5KG9wdGlvbnMuc3VjY2VzcykpIHtcblx0XHRcdFx0JC5tZXJnZShjYWxsYmFja3MsIG9wdGlvbnMuc3VjY2Vzcyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjYWxsYmFja3MucHVzaChvcHRpb25zLnN1Y2Nlc3MpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgeGhyKSB7IC8vIGpRdWVyeSAxLjQrIHBhc3NlcyB4aHIgYXMgM3JkIGFyZ1xuXHRcdFx0dmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgfHwgdGhpcztcdFx0Ly8galF1ZXJ5IDEuNCsgc3VwcG9ydHMgc2NvcGUgY29udGV4dFxuXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbWF4ID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7XG5cdFx0XHRcdGNhbGxiYWNrc1tpXS5hcHBseShjb250ZXh0LCBbZGF0YSwgc3RhdHVzLCB4aHIgfHwgJGZvcm0sICRmb3JtXSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGlmIChvcHRpb25zLmVycm9yKSB7XG5cdFx0XHR2YXIgb2xkRXJyb3IgPSBvcHRpb25zLmVycm9yO1xuXG5cdFx0XHRvcHRpb25zLmVycm9yID0gZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVycm9yKSB7XG5cdFx0XHRcdHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0IHx8IHRoaXM7XG5cblx0XHRcdFx0b2xkRXJyb3IuYXBwbHkoY29udGV4dCwgW3hociwgc3RhdHVzLCBlcnJvciwgJGZvcm1dKTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKG9wdGlvbnMuY29tcGxldGUpIHtcblx0XHRcdHZhciBvbGRDb21wbGV0ZSA9IG9wdGlvbnMuY29tcGxldGU7XG5cblx0XHRcdG9wdGlvbnMuY29tcGxldGUgPSBmdW5jdGlvbih4aHIsIHN0YXR1cykge1xuXHRcdFx0XHR2YXIgY29udGV4dCA9IG9wdGlvbnMuY29udGV4dCB8fCB0aGlzO1xuXG5cdFx0XHRcdG9sZENvbXBsZXRlLmFwcGx5KGNvbnRleHQsIFt4aHIsIHN0YXR1cywgJGZvcm1dKTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gYXJlIHRoZXJlIGZpbGVzIHRvIHVwbG9hZD9cblxuXHRcdC8vIFt2YWx1ZV0gKGlzc3VlICMxMTMpLCBhbHNvIHNlZSBjb21tZW50OlxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYWxzdXAvZm9ybS9jb21taXQvNTg4MzA2YWVkYmExZGUwMTM4ODAzMmQ1ZjQyYTYwMTU5ZWVhOTIyOCNjb21taXRjb21tZW50LTIxODAyMTlcblx0XHR2YXIgZmlsZUlucHV0cyA9ICQoJ2lucHV0W3R5cGU9ZmlsZV06ZW5hYmxlZCcsIHRoaXMpLmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAkKHRoaXMpLnZhbCgpICE9PSAnJztcblx0XHR9KTtcblx0XHR2YXIgaGFzRmlsZUlucHV0cyA9IGZpbGVJbnB1dHMubGVuZ3RoID4gMDtcblx0XHR2YXIgbXAgPSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSc7XG5cdFx0dmFyIG11bHRpcGFydCA9ICgkZm9ybS5hdHRyKCdlbmN0eXBlJykgPT09IG1wIHx8ICRmb3JtLmF0dHIoJ2VuY29kaW5nJykgPT09IG1wKTtcblx0XHR2YXIgZmlsZUFQSSA9IGZlYXR1cmUuZmlsZWFwaSAmJiBmZWF0dXJlLmZvcm1kYXRhO1xuXG5cdFx0bG9nKCdmaWxlQVBJIDonICsgZmlsZUFQSSk7XG5cblx0XHR2YXIgc2hvdWxkVXNlRnJhbWUgPSAoaGFzRmlsZUlucHV0cyB8fCBtdWx0aXBhcnQpICYmICFmaWxlQVBJO1xuXHRcdHZhciBqcXhocjtcblxuXHRcdC8vIG9wdGlvbnMuaWZyYW1lIGFsbG93cyB1c2VyIHRvIGZvcmNlIGlmcmFtZSBtb2RlXG5cdFx0Ly8gMDYtTk9WLTA5OiBub3cgZGVmYXVsdGluZyB0byBpZnJhbWUgbW9kZSBpZiBmaWxlIGlucHV0IGlzIGRldGVjdGVkXG5cdFx0aWYgKG9wdGlvbnMuaWZyYW1lICE9PSBmYWxzZSAmJiAob3B0aW9ucy5pZnJhbWUgfHwgc2hvdWxkVXNlRnJhbWUpKSB7XG5cdFx0XHQvLyBoYWNrIHRvIGZpeCBTYWZhcmkgaGFuZyAodGhhbmtzIHRvIFRpbSBNb2xlbmRpamsgZm9yIHRoaXMpXG5cdFx0XHQvLyBzZWU6IGh0dHA6Ly9ncm91cHMuZ29vZ2xlLmNvbS9ncm91cC9qcXVlcnktZGV2L2Jyb3dzZV90aHJlYWQvdGhyZWFkLzM2Mzk1YjdhYjUxMGRkNWRcblx0XHRcdGlmIChvcHRpb25zLmNsb3NlS2VlcEFsaXZlKSB7XG5cdFx0XHRcdCQuZ2V0KG9wdGlvbnMuY2xvc2VLZWVwQWxpdmUsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxeGhyID0gZmlsZVVwbG9hZElmcmFtZShhKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpxeGhyID0gZmlsZVVwbG9hZElmcmFtZShhKTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoKGhhc0ZpbGVJbnB1dHMgfHwgbXVsdGlwYXJ0KSAmJiBmaWxlQVBJKSB7XG5cdFx0XHRqcXhociA9IGZpbGVVcGxvYWRYaHIoYSk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0anF4aHIgPSAkLmFqYXgob3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0JGZvcm0ucmVtb3ZlRGF0YSgnanF4aHInKS5kYXRhKCdqcXhocicsIGpxeGhyKTtcblxuXHRcdC8vIGNsZWFyIGVsZW1lbnQgYXJyYXlcblx0XHRmb3IgKHZhciBrID0gMDsgayA8IGVsZW1lbnRzLmxlbmd0aDsgaysrKSB7XG5cdFx0XHRlbGVtZW50c1trXSA9IG51bGw7XG5cdFx0fVxuXG5cdFx0Ly8gZmlyZSAnbm90aWZ5JyBldmVudFxuXHRcdHRoaXMudHJpZ2dlcignZm9ybS1zdWJtaXQtbm90aWZ5JywgW3RoaXMsIG9wdGlvbnNdKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gdXRpbGl0eSBmbiBmb3IgZGVlcCBzZXJpYWxpemF0aW9uXG5cdFx0ZnVuY3Rpb24gZGVlcFNlcmlhbGl6ZShleHRyYURhdGEpIHtcblx0XHRcdHZhciBzZXJpYWxpemVkID0gJC5wYXJhbShleHRyYURhdGEsIG9wdGlvbnMudHJhZGl0aW9uYWwpLnNwbGl0KCcmJyk7XG5cdFx0XHR2YXIgbGVuID0gc2VyaWFsaXplZC5sZW5ndGg7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0XHR2YXIgaSwgcGFydDtcblxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdC8vICMyNTI7IHVuZG8gcGFyYW0gc3BhY2UgcmVwbGFjZW1lbnRcblx0XHRcdFx0c2VyaWFsaXplZFtpXSA9IHNlcmlhbGl6ZWRbaV0ucmVwbGFjZSgvXFwrL2csICcgJyk7XG5cdFx0XHRcdHBhcnQgPSBzZXJpYWxpemVkW2ldLnNwbGl0KCc9Jyk7XG5cdFx0XHRcdC8vICMyNzg7IHVzZSBhcnJheSBpbnN0ZWFkIG9mIG9iamVjdCBzdG9yYWdlLCBmYXZvcmluZyBhcnJheSBzZXJpYWxpemF0aW9uc1xuXHRcdFx0XHRyZXN1bHQucHVzaChbZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRbMF0pLCBkZWNvZGVVUklDb21wb25lbnQocGFydFsxXSldKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cblx0XHQvLyBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyIGZpbGUgdXBsb2FkcyAoYmlnIGhhdCB0aXAgdG8gZnJhbmNvaXMybWV0eilcblx0XHRmdW5jdGlvbiBmaWxlVXBsb2FkWGhyKGEpIHtcblx0XHRcdHZhciBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Zm9ybWRhdGEuYXBwZW5kKGFbaV0ubmFtZSwgYVtpXS52YWx1ZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHRpb25zLmV4dHJhRGF0YSkge1xuXHRcdFx0XHR2YXIgc2VyaWFsaXplZERhdGEgPSBkZWVwU2VyaWFsaXplKG9wdGlvbnMuZXh0cmFEYXRhKTtcblxuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgc2VyaWFsaXplZERhdGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRpZiAoc2VyaWFsaXplZERhdGFbaV0pIHtcblx0XHRcdFx0XHRcdGZvcm1kYXRhLmFwcGVuZChzZXJpYWxpemVkRGF0YVtpXVswXSwgc2VyaWFsaXplZERhdGFbaV1bMV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRvcHRpb25zLmRhdGEgPSBudWxsO1xuXG5cdFx0XHR2YXIgcyA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLmFqYXhTZXR0aW5ncywgb3B0aW9ucywge1xuXHRcdFx0XHRjb250ZW50VHlwZSA6IGZhbHNlLFxuXHRcdFx0XHRwcm9jZXNzRGF0YSA6IGZhbHNlLFxuXHRcdFx0XHRjYWNoZSAgICAgICA6IGZhbHNlLFxuXHRcdFx0XHR0eXBlICAgICAgICA6IG1ldGhvZCB8fCAnUE9TVCdcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAob3B0aW9ucy51cGxvYWRQcm9ncmVzcykge1xuXHRcdFx0XHQvLyB3b3JrYXJvdW5kIGJlY2F1c2UganFYSFIgZG9lcyBub3QgZXhwb3NlIHVwbG9hZCBwcm9wZXJ0eVxuXHRcdFx0XHRzLnhociA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciB4aHIgPSAkLmFqYXhTZXR0aW5ncy54aHIoKTtcblxuXHRcdFx0XHRcdGlmICh4aHIudXBsb2FkKSB7XG5cdFx0XHRcdFx0XHR4aHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHBlcmNlbnQgPSAwO1xuXHRcdFx0XHRcdFx0XHR2YXIgcG9zaXRpb24gPSBldmVudC5sb2FkZWQgfHwgZXZlbnQucG9zaXRpb247XHRcdFx0LyogZXZlbnQucG9zaXRpb24gaXMgZGVwcmVjYXRlZCAqL1xuXHRcdFx0XHRcdFx0XHR2YXIgdG90YWwgPSBldmVudC50b3RhbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoZXZlbnQubGVuZ3RoQ29tcHV0YWJsZSkge1xuXHRcdFx0XHRcdFx0XHRcdHBlcmNlbnQgPSBNYXRoLmNlaWwocG9zaXRpb24gLyB0b3RhbCAqIDEwMCk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRvcHRpb25zLnVwbG9hZFByb2dyZXNzKGV2ZW50LCBwb3NpdGlvbiwgdG90YWwsIHBlcmNlbnQpO1xuXHRcdFx0XHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB4aHI7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHMuZGF0YSA9IG51bGw7XG5cblx0XHRcdHZhciBiZWZvcmVTZW5kID0gcy5iZWZvcmVTZW5kO1xuXG5cdFx0XHRzLmJlZm9yZVNlbmQgPSBmdW5jdGlvbih4aHIsIG8pIHtcblx0XHRcdFx0Ly8gU2VuZCBGb3JtRGF0YSgpIHByb3ZpZGVkIGJ5IHVzZXJcblx0XHRcdFx0aWYgKG9wdGlvbnMuZm9ybURhdGEpIHtcblx0XHRcdFx0XHRvLmRhdGEgPSBvcHRpb25zLmZvcm1EYXRhO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG8uZGF0YSA9IGZvcm1kYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGJlZm9yZVNlbmQpIHtcblx0XHRcdFx0XHRiZWZvcmVTZW5kLmNhbGwodGhpcywgeGhyLCBvKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0cmV0dXJuICQuYWpheChzKTtcblx0XHR9XG5cblx0XHQvLyBwcml2YXRlIGZ1bmN0aW9uIGZvciBoYW5kbGluZyBmaWxlIHVwbG9hZHMgKGhhdCB0aXAgdG8gWUFIT08hKVxuXHRcdGZ1bmN0aW9uIGZpbGVVcGxvYWRJZnJhbWUoYSkge1xuXHRcdFx0dmFyIGZvcm0gPSAkZm9ybVswXSwgZWwsIGksIHMsIGcsIGlkLCAkaW8sIGlvLCB4aHIsIHN1YiwgbiwgdGltZWRPdXQsIHRpbWVvdXRIYW5kbGU7XG5cdFx0XHR2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG5cblx0XHRcdC8vICMzNDFcblx0XHRcdGRlZmVycmVkLmFib3J0ID0gZnVuY3Rpb24oc3RhdHVzKSB7XG5cdFx0XHRcdHhoci5hYm9ydChzdGF0dXMpO1xuXHRcdFx0fTtcblxuXHRcdFx0aWYgKGEpIHtcblx0XHRcdFx0Ly8gZW5zdXJlIHRoYXQgZXZlcnkgc2VyaWFsaXplZCBpbnB1dCBpcyBzdGlsbCBlbmFibGVkXG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGVsID0gJChlbGVtZW50c1tpXSk7XG5cdFx0XHRcdFx0aWYgKGhhc1Byb3ApIHtcblx0XHRcdFx0XHRcdGVsLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRzID0gJC5leHRlbmQodHJ1ZSwge30sICQuYWpheFNldHRpbmdzLCBvcHRpb25zKTtcblx0XHRcdHMuY29udGV4dCA9IHMuY29udGV4dCB8fCBzO1xuXHRcdFx0aWQgPSAnanFGb3JtSU8nICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdFx0XHR2YXIgb3duZXJEb2N1bWVudCA9IGZvcm0ub3duZXJEb2N1bWVudDtcblx0XHRcdHZhciAkYm9keSA9ICRmb3JtLmNsb3Nlc3QoJ2JvZHknKTtcblxuXHRcdFx0aWYgKHMuaWZyYW1lVGFyZ2V0KSB7XG5cdFx0XHRcdCRpbyA9ICQocy5pZnJhbWVUYXJnZXQsIG93bmVyRG9jdW1lbnQpO1xuXHRcdFx0XHRuID0gJGlvLmF0dHIyKCduYW1lJyk7XG5cdFx0XHRcdGlmICghbikge1xuXHRcdFx0XHRcdCRpby5hdHRyMignbmFtZScsIGlkKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZCA9IG47XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JGlvID0gJCgnPGlmcmFtZSBuYW1lPVwiJyArIGlkICsgJ1wiIHNyYz1cIicgKyBzLmlmcmFtZVNyYyArICdcIiAvPicsIG93bmVyRG9jdW1lbnQpO1xuXHRcdFx0XHQkaW8uY3NzKHtwb3NpdGlvbjogJ2Fic29sdXRlJywgdG9wOiAnLTEwMDBweCcsIGxlZnQ6ICctMTAwMHB4J30pO1xuXHRcdFx0fVxuXHRcdFx0aW8gPSAkaW9bMF07XG5cblxuXHRcdFx0eGhyID0geyAvLyBtb2NrIG9iamVjdFxuXHRcdFx0XHRhYm9ydGVkICAgICAgICAgICAgICAgOiAwLFxuXHRcdFx0XHRyZXNwb25zZVRleHQgICAgICAgICAgOiBudWxsLFxuXHRcdFx0XHRyZXNwb25zZVhNTCAgICAgICAgICAgOiBudWxsLFxuXHRcdFx0XHRzdGF0dXMgICAgICAgICAgICAgICAgOiAwLFxuXHRcdFx0XHRzdGF0dXNUZXh0ICAgICAgICAgICAgOiAnbi9hJyxcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzIDogZnVuY3Rpb24oKSB7fSxcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXIgICAgIDogZnVuY3Rpb24oKSB7fSxcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlciAgICAgIDogZnVuY3Rpb24oKSB7fSxcblx0XHRcdFx0YWJvcnQgICAgICAgICAgICAgICAgIDogZnVuY3Rpb24oc3RhdHVzKSB7XG5cdFx0XHRcdFx0dmFyIGUgPSAoc3RhdHVzID09PSAndGltZW91dCcgPyAndGltZW91dCcgOiAnYWJvcnRlZCcpO1xuXG5cdFx0XHRcdFx0bG9nKCdhYm9ydGluZyB1cGxvYWQuLi4gJyArIGUpO1xuXHRcdFx0XHRcdHRoaXMuYWJvcnRlZCA9IDE7XG5cblx0XHRcdFx0XHR0cnkgeyAvLyAjMjE0LCAjMjU3XG5cdFx0XHRcdFx0XHRpZiAoaW8uY29udGVudFdpbmRvdy5kb2N1bWVudC5leGVjQ29tbWFuZCkge1xuXHRcdFx0XHRcdFx0XHRpby5jb250ZW50V2luZG93LmRvY3VtZW50LmV4ZWNDb21tYW5kKCdTdG9wJyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBjYXRjaCAoaWdub3JlKSB7fVxuXG5cdFx0XHRcdFx0JGlvLmF0dHIoJ3NyYycsIHMuaWZyYW1lU3JjKTsgLy8gYWJvcnQgb3AgaW4gcHJvZ3Jlc3Ncblx0XHRcdFx0XHR4aHIuZXJyb3IgPSBlO1xuXHRcdFx0XHRcdGlmIChzLmVycm9yKSB7XG5cdFx0XHRcdFx0XHRzLmVycm9yLmNhbGwocy5jb250ZXh0LCB4aHIsIGUsIHN0YXR1cyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGcpIHtcblx0XHRcdFx0XHRcdCQuZXZlbnQudHJpZ2dlcignYWpheEVycm9yJywgW3hociwgcywgZV0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChzLmNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHRzLmNvbXBsZXRlLmNhbGwocy5jb250ZXh0LCB4aHIsIGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0ZyA9IHMuZ2xvYmFsO1xuXHRcdFx0Ly8gdHJpZ2dlciBhamF4IGdsb2JhbCBldmVudHMgc28gdGhhdCBhY3Rpdml0eS9ibG9jayBpbmRpY2F0b3JzIHdvcmsgbGlrZSBub3JtYWxcblx0XHRcdGlmIChnICYmICQuYWN0aXZlKysgPT09IDApIHtcblx0XHRcdFx0JC5ldmVudC50cmlnZ2VyKCdhamF4U3RhcnQnKTtcblx0XHRcdH1cblx0XHRcdGlmIChnKSB7XG5cdFx0XHRcdCQuZXZlbnQudHJpZ2dlcignYWpheFNlbmQnLCBbeGhyLCBzXSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzLmJlZm9yZVNlbmQgJiYgcy5iZWZvcmVTZW5kLmNhbGwocy5jb250ZXh0LCB4aHIsIHMpID09PSBmYWxzZSkge1xuXHRcdFx0XHRpZiAocy5nbG9iYWwpIHtcblx0XHRcdFx0XHQkLmFjdGl2ZS0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdCgpO1xuXG5cdFx0XHRcdHJldHVybiBkZWZlcnJlZDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHhoci5hYm9ydGVkKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdCgpO1xuXG5cdFx0XHRcdHJldHVybiBkZWZlcnJlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYWRkIHN1Ym1pdHRpbmcgZWxlbWVudCB0byBkYXRhIGlmIHdlIGtub3cgaXRcblx0XHRcdHN1YiA9IGZvcm0uY2xrO1xuXHRcdFx0aWYgKHN1Yikge1xuXHRcdFx0XHRuID0gc3ViLm5hbWU7XG5cdFx0XHRcdGlmIChuICYmICFzdWIuZGlzYWJsZWQpIHtcblx0XHRcdFx0XHRzLmV4dHJhRGF0YSA9IHMuZXh0cmFEYXRhIHx8IHt9O1xuXHRcdFx0XHRcdHMuZXh0cmFEYXRhW25dID0gc3ViLnZhbHVlO1xuXHRcdFx0XHRcdGlmIChzdWIudHlwZSA9PT0gJ2ltYWdlJykge1xuXHRcdFx0XHRcdFx0cy5leHRyYURhdGFbbiArICcueCddID0gZm9ybS5jbGtfeDtcblx0XHRcdFx0XHRcdHMuZXh0cmFEYXRhW24gKyAnLnknXSA9IGZvcm0uY2xrX3k7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciBDTElFTlRfVElNRU9VVF9BQk9SVCA9IDE7XG5cdFx0XHR2YXIgU0VSVkVSX0FCT1JUID0gMjtcblxuXHRcdFx0ZnVuY3Rpb24gZ2V0RG9jKGZyYW1lKSB7XG5cdFx0XHRcdC8qIGl0IGxvb2tzIGxpa2UgY29udGVudFdpbmRvdyBvciBjb250ZW50RG9jdW1lbnQgZG8gbm90XG5cdFx0XHRcdCAqIGNhcnJ5IHRoZSBwcm90b2NvbCBwcm9wZXJ0eSBpbiBpZTgsIHdoZW4gcnVubmluZyB1bmRlciBzc2xcblx0XHRcdFx0ICogZnJhbWUuZG9jdW1lbnQgaXMgdGhlIG9ubHkgdmFsaWQgcmVzcG9uc2UgZG9jdW1lbnQsIHNpbmNlXG5cdFx0XHRcdCAqIHRoZSBwcm90b2NvbCBpcyBrbm93IGJ1dCBub3Qgb24gdGhlIG90aGVyIHR3byBvYmplY3RzLiBzdHJhbmdlP1xuXHRcdFx0XHQgKiBcIlNhbWUgb3JpZ2luIHBvbGljeVwiIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2FtZV9vcmlnaW5fcG9saWN5XG5cdFx0XHRcdCAqL1xuXG5cdFx0XHRcdHZhciBkb2MgPSBudWxsO1xuXG5cdFx0XHRcdC8vIElFOCBjYXNjYWRpbmcgYWNjZXNzIGNoZWNrXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aWYgKGZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcblx0XHRcdFx0XHRcdGRvYyA9IGZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHQvLyBJRTggYWNjZXNzIGRlbmllZCB1bmRlciBzc2wgJiBtaXNzaW5nIHByb3RvY29sXG5cdFx0XHRcdFx0bG9nKCdjYW5ub3QgZ2V0IGlmcmFtZS5jb250ZW50V2luZG93IGRvY3VtZW50OiAnICsgZXJyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChkb2MpIHsgLy8gc3VjY2Vzc2Z1bCBnZXR0aW5nIGNvbnRlbnRcblx0XHRcdFx0XHRyZXR1cm4gZG9jO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHsgLy8gc2ltcGx5IGNoZWNraW5nIG1heSB0aHJvdyBpbiBpZTggdW5kZXIgc3NsIG9yIG1pc21hdGNoZWQgcHJvdG9jb2xcblx0XHRcdFx0XHRkb2MgPSBmcmFtZS5jb250ZW50RG9jdW1lbnQgPyBmcmFtZS5jb250ZW50RG9jdW1lbnQgOiBmcmFtZS5kb2N1bWVudDtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0Ly8gbGFzdCBhdHRlbXB0XG5cdFx0XHRcdFx0bG9nKCdjYW5ub3QgZ2V0IGlmcmFtZS5jb250ZW50RG9jdW1lbnQ6ICcgKyBlcnIpO1xuXHRcdFx0XHRcdGRvYyA9IGZyYW1lLmRvY3VtZW50O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGRvYztcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmFpbHMgQ1NSRiBoYWNrICh0aGFua3MgdG8gWXZhbiBCYXJ0aGVsZW15KVxuXHRcdFx0dmFyIGNzcmZfdG9rZW4gPSAkKCdtZXRhW25hbWU9Y3NyZi10b2tlbl0nKS5hdHRyKCdjb250ZW50Jyk7XG5cdFx0XHR2YXIgY3NyZl9wYXJhbSA9ICQoJ21ldGFbbmFtZT1jc3JmLXBhcmFtXScpLmF0dHIoJ2NvbnRlbnQnKTtcblxuXHRcdFx0aWYgKGNzcmZfcGFyYW0gJiYgY3NyZl90b2tlbikge1xuXHRcdFx0XHRzLmV4dHJhRGF0YSA9IHMuZXh0cmFEYXRhIHx8IHt9O1xuXHRcdFx0XHRzLmV4dHJhRGF0YVtjc3JmX3BhcmFtXSA9IGNzcmZfdG9rZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIHRha2UgYSBicmVhdGggc28gdGhhdCBwZW5kaW5nIHJlcGFpbnRzIGdldCBzb21lIGNwdSB0aW1lIGJlZm9yZSB0aGUgdXBsb2FkIHN0YXJ0c1xuXHRcdFx0ZnVuY3Rpb24gZG9TdWJtaXQoKSB7XG5cdFx0XHRcdC8vIG1ha2Ugc3VyZSBmb3JtIGF0dHJzIGFyZSBzZXRcblx0XHRcdFx0dmFyIHQgPSAkZm9ybS5hdHRyMigndGFyZ2V0JyksXG5cdFx0XHRcdFx0YSA9ICRmb3JtLmF0dHIyKCdhY3Rpb24nKSxcblx0XHRcdFx0XHRtcCA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhJyxcblx0XHRcdFx0XHRldCA9ICRmb3JtLmF0dHIoJ2VuY3R5cGUnKSB8fCAkZm9ybS5hdHRyKCdlbmNvZGluZycpIHx8IG1wO1xuXG5cdFx0XHRcdC8vIHVwZGF0ZSBmb3JtIGF0dHJzIGluIElFIGZyaWVuZGx5IHdheVxuXHRcdFx0XHRmb3JtLnNldEF0dHJpYnV0ZSgndGFyZ2V0JywgaWQpO1xuXHRcdFx0XHRpZiAoIW1ldGhvZCB8fCAvcG9zdC9pLnRlc3QobWV0aG9kKSkge1xuXHRcdFx0XHRcdGZvcm0uc2V0QXR0cmlidXRlKCdtZXRob2QnLCAnUE9TVCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChhICE9PSBzLnVybCkge1xuXHRcdFx0XHRcdGZvcm0uc2V0QXR0cmlidXRlKCdhY3Rpb24nLCBzLnVybCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZSBib3JrcyBpbiBzb21lIGNhc2VzIHdoZW4gc2V0dGluZyBlbmNvZGluZ1xuXHRcdFx0XHRpZiAoIXMuc2tpcEVuY29kaW5nT3ZlcnJpZGUgJiYgKCFtZXRob2QgfHwgL3Bvc3QvaS50ZXN0KG1ldGhvZCkpKSB7XG5cdFx0XHRcdFx0JGZvcm0uYXR0cih7XG5cdFx0XHRcdFx0XHRlbmNvZGluZyA6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJyxcblx0XHRcdFx0XHRcdGVuY3R5cGUgIDogJ211bHRpcGFydC9mb3JtLWRhdGEnXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBzdXBwb3J0IHRpbW91dFxuXHRcdFx0XHRpZiAocy50aW1lb3V0KSB7XG5cdFx0XHRcdFx0dGltZW91dEhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHR0aW1lZE91dCA9IHRydWU7IGNiKENMSUVOVF9USU1FT1VUX0FCT1JUKTtcblx0XHRcdFx0XHR9LCBzLnRpbWVvdXQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbG9vayBmb3Igc2VydmVyIGFib3J0c1xuXHRcdFx0XHRmdW5jdGlvbiBjaGVja1N0YXRlKCkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHR2YXIgc3RhdGUgPSBnZXREb2MoaW8pLnJlYWR5U3RhdGU7XG5cblx0XHRcdFx0XHRcdGxvZygnc3RhdGUgPSAnICsgc3RhdGUpO1xuXHRcdFx0XHRcdFx0aWYgKHN0YXRlICYmIHN0YXRlLnRvTG93ZXJDYXNlKCkgPT09ICd1bmluaXRpYWxpemVkJykge1xuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGNoZWNrU3RhdGUsIDUwKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdGxvZygnU2VydmVyIGFib3J0OiAnLCBlLCAnICgnLCBlLm5hbWUsICcpJyk7XG5cdFx0XHRcdFx0XHRjYihTRVJWRVJfQUJPUlQpO1x0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbGluZSBjYWxsYmFjay1yZXR1cm5cblx0XHRcdFx0XHRcdGlmICh0aW1lb3V0SGFuZGxlKSB7XG5cdFx0XHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRpbWVvdXRIYW5kbGUgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYWRkIFwiZXh0cmFcIiBkYXRhIHRvIGZvcm0gaWYgcHJvdmlkZWQgaW4gb3B0aW9uc1xuXHRcdFx0XHR2YXIgZXh0cmFJbnB1dHMgPSBbXTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGlmIChzLmV4dHJhRGF0YSkge1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgbiBpbiBzLmV4dHJhRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRpZiAocy5leHRyYURhdGEuaGFzT3duUHJvcGVydHkobikpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBpZiB1c2luZyB0aGUgJC5wYXJhbSBmb3JtYXQgdGhhdCBhbGxvd3MgZm9yIG11bHRpcGxlIHZhbHVlcyB3aXRoIHRoZSBzYW1lIG5hbWVcblx0XHRcdFx0XHRcdFx0XHRpZiAoJC5pc1BsYWluT2JqZWN0KHMuZXh0cmFEYXRhW25dKSAmJiBzLmV4dHJhRGF0YVtuXS5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpICYmIHMuZXh0cmFEYXRhW25dLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRleHRyYUlucHV0cy5wdXNoKFxuXHRcdFx0XHRcdFx0XHRcdFx0JCgnPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiJyArIHMuZXh0cmFEYXRhW25dLm5hbWUgKyAnXCI+Jywgb3duZXJEb2N1bWVudCkudmFsKHMuZXh0cmFEYXRhW25dLnZhbHVlKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuYXBwZW5kVG8oZm9ybSlbMF0pO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRleHRyYUlucHV0cy5wdXNoKFxuXHRcdFx0XHRcdFx0XHRcdFx0JCgnPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiJyArIG4gKyAnXCI+Jywgb3duZXJEb2N1bWVudCkudmFsKHMuZXh0cmFEYXRhW25dKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuYXBwZW5kVG8oZm9ybSlbMF0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghcy5pZnJhbWVUYXJnZXQpIHtcblx0XHRcdFx0XHRcdC8vIGFkZCBpZnJhbWUgdG8gZG9jIGFuZCBzdWJtaXQgdGhlIGZvcm1cblx0XHRcdFx0XHRcdCRpby5hcHBlbmRUbygkYm9keSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGlvLmF0dGFjaEV2ZW50KSB7XG5cdFx0XHRcdFx0XHRpby5hdHRhY2hFdmVudCgnb25sb2FkJywgY2IpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpby5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgY2IsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzZXRUaW1lb3V0KGNoZWNrU3RhdGUsIDE1KTtcblxuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRmb3JtLnN1Ym1pdCgpO1xuXG5cdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHQvLyBqdXN0IGluIGNhc2UgZm9ybSBoYXMgZWxlbWVudCB3aXRoIG5hbWUvaWQgb2YgJ3N1Ym1pdCdcblx0XHRcdFx0XHRcdHZhciBzdWJtaXRGbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKS5zdWJtaXQ7XG5cblx0XHRcdFx0XHRcdHN1Ym1pdEZuLmFwcGx5KGZvcm0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdC8vIHJlc2V0IGF0dHJzIGFuZCByZW1vdmUgXCJleHRyYVwiIGlucHV0IGVsZW1lbnRzXG5cdFx0XHRcdFx0Zm9ybS5zZXRBdHRyaWJ1dGUoJ2FjdGlvbicsIGEpO1xuXHRcdFx0XHRcdGZvcm0uc2V0QXR0cmlidXRlKCdlbmN0eXBlJywgZXQpOyAvLyAjMzgwXG5cdFx0XHRcdFx0aWYgKHQpIHtcblx0XHRcdFx0XHRcdGZvcm0uc2V0QXR0cmlidXRlKCd0YXJnZXQnLCB0KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0JGZvcm0ucmVtb3ZlQXR0cigndGFyZ2V0Jyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCQoZXh0cmFJbnB1dHMpLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzLmZvcmNlU3luYykge1xuXHRcdFx0XHRkb1N1Ym1pdCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2V0VGltZW91dChkb1N1Ym1pdCwgMTApOyAvLyB0aGlzIGxldHMgZG9tIHVwZGF0ZXMgcmVuZGVyXG5cdFx0XHR9XG5cblx0XHRcdHZhciBkYXRhLCBkb2MsIGRvbUNoZWNrQ291bnQgPSA1MCwgY2FsbGJhY2tQcm9jZXNzZWQ7XG5cblx0XHRcdGZ1bmN0aW9uIGNiKGUpIHtcblx0XHRcdFx0aWYgKHhoci5hYm9ydGVkIHx8IGNhbGxiYWNrUHJvY2Vzc2VkKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZG9jID0gZ2V0RG9jKGlvKTtcblx0XHRcdFx0aWYgKCFkb2MpIHtcblx0XHRcdFx0XHRsb2coJ2Nhbm5vdCBhY2Nlc3MgcmVzcG9uc2UgZG9jdW1lbnQnKTtcblx0XHRcdFx0XHRlID0gU0VSVkVSX0FCT1JUO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlID09PSBDTElFTlRfVElNRU9VVF9BQk9SVCAmJiB4aHIpIHtcblx0XHRcdFx0XHR4aHIuYWJvcnQoJ3RpbWVvdXQnKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoeGhyLCAndGltZW91dCcpO1xuXG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoZSA9PT0gU0VSVkVSX0FCT1JUICYmIHhocikge1xuXHRcdFx0XHRcdHhoci5hYm9ydCgnc2VydmVyIGFib3J0Jyk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KHhociwgJ2Vycm9yJywgJ3NlcnZlciBhYm9ydCcpO1xuXG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCFkb2MgfHwgZG9jLmxvY2F0aW9uLmhyZWYgPT09IHMuaWZyYW1lU3JjKSB7XG5cdFx0XHRcdFx0Ly8gcmVzcG9uc2Ugbm90IHJlY2VpdmVkIHlldFxuXHRcdFx0XHRcdGlmICghdGltZWRPdXQpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaW8uZGV0YWNoRXZlbnQpIHtcblx0XHRcdFx0XHRpby5kZXRhY2hFdmVudCgnb25sb2FkJywgY2IpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlvLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBjYiwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHN0YXR1cyA9ICdzdWNjZXNzJywgZXJyTXNnO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aWYgKHRpbWVkT3V0KSB7XG5cdFx0XHRcdFx0XHR0aHJvdyAndGltZW91dCc7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIGlzWG1sID0gcy5kYXRhVHlwZSA9PT0gJ3htbCcgfHwgZG9jLlhNTERvY3VtZW50IHx8ICQuaXNYTUxEb2MoZG9jKTtcblxuXHRcdFx0XHRcdGxvZygnaXNYbWw9JyArIGlzWG1sKTtcblxuXHRcdFx0XHRcdGlmICghaXNYbWwgJiYgd2luZG93Lm9wZXJhICYmIChkb2MuYm9keSA9PT0gbnVsbCB8fCAhZG9jLmJvZHkuaW5uZXJIVE1MKSkge1xuXHRcdFx0XHRcdFx0aWYgKC0tZG9tQ2hlY2tDb3VudCkge1xuXHRcdFx0XHRcdFx0XHQvLyBpbiBzb21lIGJyb3dzZXJzIChPcGVyYSkgdGhlIGlmcmFtZSBET00gaXMgbm90IGFsd2F5cyB0cmF2ZXJzYWJsZSB3aGVuXG5cdFx0XHRcdFx0XHRcdC8vIHRoZSBvbmxvYWQgY2FsbGJhY2sgZmlyZXMsIHNvIHdlIGxvb3AgYSBiaXQgdG8gYWNjb21tb2RhdGVcblx0XHRcdFx0XHRcdFx0bG9nKCdyZXF1ZWluZyBvbkxvYWQgY2FsbGJhY2ssIERPTSBub3QgYXZhaWxhYmxlJyk7XG5cdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoY2IsIDI1MCk7XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gbGV0IHRoaXMgZmFsbCB0aHJvdWdoIGJlY2F1c2Ugc2VydmVyIHJlc3BvbnNlIGNvdWxkIGJlIGFuIGVtcHR5IGRvY3VtZW50XG5cdFx0XHRcdFx0XHQvLyBsb2coJ0NvdWxkIG5vdCBhY2Nlc3MgaWZyYW1lIERPTSBhZnRlciBtdXRpcGxlIHRyaWVzLicpO1xuXHRcdFx0XHRcdFx0Ly8gdGhyb3cgJ0RPTUV4Y2VwdGlvbjogbm90IGF2YWlsYWJsZSc7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gbG9nKCdyZXNwb25zZSBkZXRlY3RlZCcpO1xuXHRcdFx0XHRcdHZhciBkb2NSb290ID0gZG9jLmJvZHkgPyBkb2MuYm9keSA6IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHR4aHIucmVzcG9uc2VUZXh0ID0gZG9jUm9vdCA/IGRvY1Jvb3QuaW5uZXJIVE1MIDogbnVsbDtcblx0XHRcdFx0XHR4aHIucmVzcG9uc2VYTUwgPSBkb2MuWE1MRG9jdW1lbnQgPyBkb2MuWE1MRG9jdW1lbnQgOiBkb2M7XG5cdFx0XHRcdFx0aWYgKGlzWG1sKSB7XG5cdFx0XHRcdFx0XHRzLmRhdGFUeXBlID0gJ3htbCc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHhoci5nZXRSZXNwb25zZUhlYWRlciA9IGZ1bmN0aW9uKGhlYWRlcil7XG5cdFx0XHRcdFx0XHR2YXIgaGVhZGVycyA9IHsnY29udGVudC10eXBlJzogcy5kYXRhVHlwZX07XG5cblx0XHRcdFx0XHRcdHJldHVybiBoZWFkZXJzW2hlYWRlci50b0xvd2VyQ2FzZSgpXTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdC8vIHN1cHBvcnQgZm9yIFhIUiAnc3RhdHVzJyAmICdzdGF0dXNUZXh0JyBlbXVsYXRpb24gOlxuXHRcdFx0XHRcdGlmIChkb2NSb290KSB7XG5cdFx0XHRcdFx0XHR4aHIuc3RhdHVzID0gTnVtYmVyKGRvY1Jvb3QuZ2V0QXR0cmlidXRlKCdzdGF0dXMnKSkgfHwgeGhyLnN0YXR1cztcblx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0ID0gZG9jUm9vdC5nZXRBdHRyaWJ1dGUoJ3N0YXR1c1RleHQnKSB8fCB4aHIuc3RhdHVzVGV4dDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgZHQgPSAocy5kYXRhVHlwZSB8fCAnJykudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHR2YXIgc2NyID0gLyhqc29ufHNjcmlwdHx0ZXh0KS8udGVzdChkdCk7XG5cblx0XHRcdFx0XHRpZiAoc2NyIHx8IHMudGV4dGFyZWEpIHtcblx0XHRcdFx0XHRcdC8vIHNlZSBpZiB1c2VyIGVtYmVkZGVkIHJlc3BvbnNlIGluIHRleHRhcmVhXG5cdFx0XHRcdFx0XHR2YXIgdGEgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RleHRhcmVhJylbMF07XG5cblx0XHRcdFx0XHRcdGlmICh0YSkge1xuXHRcdFx0XHRcdFx0XHR4aHIucmVzcG9uc2VUZXh0ID0gdGEudmFsdWU7XG5cdFx0XHRcdFx0XHRcdC8vIHN1cHBvcnQgZm9yIFhIUiAnc3RhdHVzJyAmICdzdGF0dXNUZXh0JyBlbXVsYXRpb24gOlxuXHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzID0gTnVtYmVyKHRhLmdldEF0dHJpYnV0ZSgnc3RhdHVzJykpIHx8IHhoci5zdGF0dXM7XG5cdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0ID0gdGEuZ2V0QXR0cmlidXRlKCdzdGF0dXNUZXh0JykgfHwgeGhyLnN0YXR1c1RleHQ7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoc2NyKSB7XG5cdFx0XHRcdFx0XHRcdC8vIGFjY291bnQgZm9yIGJyb3dzZXJzIGluamVjdGluZyBwcmUgYXJvdW5kIGpzb24gcmVzcG9uc2Vcblx0XHRcdFx0XHRcdFx0dmFyIHByZSA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgncHJlJylbMF07XG5cdFx0XHRcdFx0XHRcdHZhciBiID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKHByZSkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5yZXNwb25zZVRleHQgPSBwcmUudGV4dENvbnRlbnQgPyBwcmUudGV4dENvbnRlbnQgOiBwcmUuaW5uZXJUZXh0O1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGIpIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIucmVzcG9uc2VUZXh0ID0gYi50ZXh0Q29udGVudCA/IGIudGV4dENvbnRlbnQgOiBiLmlubmVyVGV4dDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChkdCA9PT0gJ3htbCcgJiYgIXhoci5yZXNwb25zZVhNTCAmJiB4aHIucmVzcG9uc2VUZXh0KSB7XG5cdFx0XHRcdFx0XHR4aHIucmVzcG9uc2VYTUwgPSB0b1htbCh4aHIucmVzcG9uc2VUZXh0KTtcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGRhdGEgPSBodHRwRGF0YSh4aHIsIGR0LCBzKTtcdFx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG5cblx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9ICdwYXJzZXJlcnJvcic7XG5cdFx0XHRcdFx0XHR4aHIuZXJyb3IgPSBlcnJNc2cgPSAoZXJyIHx8IHN0YXR1cyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdGxvZygnZXJyb3IgY2F1Z2h0OiAnLCBlcnIpO1xuXHRcdFx0XHRcdHN0YXR1cyA9ICdlcnJvcic7XG5cdFx0XHRcdFx0eGhyLmVycm9yID0gZXJyTXNnID0gKGVyciB8fCBzdGF0dXMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHhoci5hYm9ydGVkKSB7XG5cdFx0XHRcdFx0bG9nKCd1cGxvYWQgYWJvcnRlZCcpO1xuXHRcdFx0XHRcdHN0YXR1cyA9IG51bGw7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoeGhyLnN0YXR1cykgeyAvLyB3ZSd2ZSBzZXQgeGhyLnN0YXR1c1xuXHRcdFx0XHRcdHN0YXR1cyA9ICgoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkgfHwgeGhyLnN0YXR1cyA9PT0gMzA0KSA/ICdzdWNjZXNzJyA6ICdlcnJvcic7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBvcmRlcmluZyBvZiB0aGVzZSBjYWxsYmFja3MvdHJpZ2dlcnMgaXMgb2RkLCBidXQgdGhhdCdzIGhvdyAkLmFqYXggZG9lcyBpdFxuXHRcdFx0XHRpZiAoc3RhdHVzID09PSAnc3VjY2VzcycpIHtcblx0XHRcdFx0XHRpZiAocy5zdWNjZXNzKSB7XG5cdFx0XHRcdFx0XHRzLnN1Y2Nlc3MuY2FsbChzLmNvbnRleHQsIGRhdGEsICdzdWNjZXNzJywgeGhyKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHhoci5yZXNwb25zZVRleHQsICdzdWNjZXNzJywgeGhyKTtcblxuXHRcdFx0XHRcdGlmIChnKSB7XG5cdFx0XHRcdFx0XHQkLmV2ZW50LnRyaWdnZXIoJ2FqYXhTdWNjZXNzJywgW3hociwgc10pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKHN0YXR1cykge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgZXJyTXNnID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0ZXJyTXNnID0geGhyLnN0YXR1c1RleHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChzLmVycm9yKSB7XG5cdFx0XHRcdFx0XHRzLmVycm9yLmNhbGwocy5jb250ZXh0LCB4aHIsIHN0YXR1cywgZXJyTXNnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KHhociwgJ2Vycm9yJywgZXJyTXNnKTtcblx0XHRcdFx0XHRpZiAoZykge1xuXHRcdFx0XHRcdFx0JC5ldmVudC50cmlnZ2VyKCdhamF4RXJyb3InLCBbeGhyLCBzLCBlcnJNc2ddKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZykge1xuXHRcdFx0XHRcdCQuZXZlbnQudHJpZ2dlcignYWpheENvbXBsZXRlJywgW3hociwgc10pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGcgJiYgIS0tJC5hY3RpdmUpIHtcblx0XHRcdFx0XHQkLmV2ZW50LnRyaWdnZXIoJ2FqYXhTdG9wJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocy5jb21wbGV0ZSkge1xuXHRcdFx0XHRcdHMuY29tcGxldGUuY2FsbChzLmNvbnRleHQsIHhociwgc3RhdHVzKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrUHJvY2Vzc2VkID0gdHJ1ZTtcblx0XHRcdFx0aWYgKHMudGltZW91dCkge1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGNsZWFuIHVwXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCFzLmlmcmFtZVRhcmdldCkge1xuXHRcdFx0XHRcdFx0JGlvLnJlbW92ZSgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7IC8vIGFkZGluZyBlbHNlIHRvIGNsZWFuIHVwIGV4aXN0aW5nIGlmcmFtZSByZXNwb25zZS5cblx0XHRcdFx0XHRcdCRpby5hdHRyKCdzcmMnLCBzLmlmcmFtZVNyYyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHhoci5yZXNwb25zZVhNTCA9IG51bGw7XG5cdFx0XHRcdH0sIDEwMCk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciB0b1htbCA9ICQucGFyc2VYTUwgfHwgZnVuY3Rpb24ocywgZG9jKSB7IC8vIHVzZSBwYXJzZVhNTCBpZiBhdmFpbGFibGUgKGpRdWVyeSAxLjUrKVxuXHRcdFx0XHRpZiAod2luZG93LkFjdGl2ZVhPYmplY3QpIHtcblx0XHRcdFx0XHRkb2MgPSBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTERPTScpO1xuXHRcdFx0XHRcdGRvYy5hc3luYyA9ICdmYWxzZSc7XG5cdFx0XHRcdFx0ZG9jLmxvYWRYTUwocyk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2MgPSAobmV3IERPTVBhcnNlcigpKS5wYXJzZUZyb21TdHJpbmcocywgJ3RleHQveG1sJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gKGRvYyAmJiBkb2MuZG9jdW1lbnRFbGVtZW50ICYmIGRvYy5kb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09ICdwYXJzZXJlcnJvcicpID8gZG9jIDogbnVsbDtcblx0XHRcdH07XG5cdFx0XHR2YXIgcGFyc2VKU09OID0gJC5wYXJzZUpTT04gfHwgZnVuY3Rpb24ocykge1xuXHRcdFx0XHQvKiBqc2xpbnQgZXZpbDp0cnVlICovXG5cdFx0XHRcdHJldHVybiB3aW5kb3dbJ2V2YWwnXSgnKCcgKyBzICsgJyknKTtcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuXHRcdFx0fTtcblxuXHRcdFx0dmFyIGh0dHBEYXRhID0gZnVuY3Rpb24oeGhyLCB0eXBlLCBzKSB7IC8vIG1vc3RseSBsaWZ0ZWQgZnJvbSBqcTEuNC40XG5cblx0XHRcdFx0dmFyIGN0ID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdjb250ZW50LXR5cGUnKSB8fCAnJyxcblx0XHRcdFx0XHR4bWwgPSAoKHR5cGUgPT09ICd4bWwnIHx8ICF0eXBlKSAmJiBjdC5pbmRleE9mKCd4bWwnKSA+PSAwKSxcblx0XHRcdFx0XHRkYXRhID0geG1sID8geGhyLnJlc3BvbnNlWE1MIDogeGhyLnJlc3BvbnNlVGV4dDtcblxuXHRcdFx0XHRpZiAoeG1sICYmIGRhdGEuZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lID09PSAncGFyc2VyZXJyb3InKSB7XG5cdFx0XHRcdFx0aWYgKCQuZXJyb3IpIHtcblx0XHRcdFx0XHRcdCQuZXJyb3IoJ3BhcnNlcmVycm9yJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzICYmIHMuZGF0YUZpbHRlcikge1xuXHRcdFx0XHRcdGRhdGEgPSBzLmRhdGFGaWx0ZXIoZGF0YSwgdHlwZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdGlmICgodHlwZSA9PT0gJ2pzb24nIHx8ICF0eXBlKSAmJiBjdC5pbmRleE9mKCdqc29uJykgPj0gMCkge1xuXHRcdFx0XHRcdFx0ZGF0YSA9IHBhcnNlSlNPTihkYXRhKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCh0eXBlID09PSAnc2NyaXB0JyB8fCAhdHlwZSkgJiYgY3QuaW5kZXhPZignamF2YXNjcmlwdCcpID49IDApIHtcblx0XHRcdFx0XHRcdCQuZ2xvYmFsRXZhbChkYXRhKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdH07XG5cblx0XHRcdHJldHVybiBkZWZlcnJlZDtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIGFqYXhGb3JtKCkgcHJvdmlkZXMgYSBtZWNoYW5pc20gZm9yIGZ1bGx5IGF1dG9tYXRpbmcgZm9ybSBzdWJtaXNzaW9uLlxuXHQgKlxuXHQgKiBUaGUgYWR2YW50YWdlcyBvZiB1c2luZyB0aGlzIG1ldGhvZCBpbnN0ZWFkIG9mIGFqYXhTdWJtaXQoKSBhcmU6XG5cdCAqXG5cdCAqIDE6IFRoaXMgbWV0aG9kIHdpbGwgaW5jbHVkZSBjb29yZGluYXRlcyBmb3IgPGlucHV0IHR5cGU9XCJpbWFnZVwiPiBlbGVtZW50cyAoaWYgdGhlIGVsZW1lbnRcblx0ICpcdGlzIHVzZWQgdG8gc3VibWl0IHRoZSBmb3JtKS5cblx0ICogMi4gVGhpcyBtZXRob2Qgd2lsbCBpbmNsdWRlIHRoZSBzdWJtaXQgZWxlbWVudCdzIG5hbWUvdmFsdWUgZGF0YSAoZm9yIHRoZSBlbGVtZW50IHRoYXQgd2FzXG5cdCAqXHR1c2VkIHRvIHN1Ym1pdCB0aGUgZm9ybSkuXG5cdCAqIDMuIFRoaXMgbWV0aG9kIGJpbmRzIHRoZSBzdWJtaXQoKSBtZXRob2QgdG8gdGhlIGZvcm0gZm9yIHlvdS5cblx0ICpcblx0ICogVGhlIG9wdGlvbnMgYXJndW1lbnQgZm9yIGFqYXhGb3JtIHdvcmtzIGV4YWN0bHkgYXMgaXQgZG9lcyBmb3IgYWpheFN1Ym1pdC4gYWpheEZvcm0gbWVyZWx5XG5cdCAqIHBhc3NlcyB0aGUgb3B0aW9ucyBhcmd1bWVudCBhbG9uZyBhZnRlciBwcm9wZXJseSBiaW5kaW5nIGV2ZW50cyBmb3Igc3VibWl0IGVsZW1lbnRzIGFuZFxuXHQgKiB0aGUgZm9ybSBpdHNlbGYuXG5cdCAqL1xuXHQkLmZuLmFqYXhGb3JtID0gZnVuY3Rpb24ob3B0aW9ucywgZGF0YSwgZGF0YVR5cGUsIG9uU3VjY2Vzcykge1xuXHRcdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgfHwgKG9wdGlvbnMgPT09IGZhbHNlICYmIGFyZ3VtZW50cy5sZW5ndGggPiAwKSkge1xuXHRcdFx0b3B0aW9ucyA9IHtcblx0XHRcdFx0J3VybCcgICAgICA6IG9wdGlvbnMsXG5cdFx0XHRcdCdkYXRhJyAgICAgOiBkYXRhLFxuXHRcdFx0XHQnZGF0YVR5cGUnIDogZGF0YVR5cGVcblx0XHRcdH07XG5cblx0XHRcdGlmICh0eXBlb2Ygb25TdWNjZXNzID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdG9wdGlvbnMuc3VjY2VzcyA9IG9uU3VjY2Vzcztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0XHRvcHRpb25zLmRlbGVnYXRpb24gPSBvcHRpb25zLmRlbGVnYXRpb24gJiYgJC5pc0Z1bmN0aW9uKCQuZm4ub24pO1xuXG5cdFx0Ly8gaW4galF1ZXJ5IDEuMysgd2UgY2FuIGZpeCBtaXN0YWtlcyB3aXRoIHRoZSByZWFkeSBzdGF0ZVxuXHRcdGlmICghb3B0aW9ucy5kZWxlZ2F0aW9uICYmIHRoaXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHR2YXIgbyA9IHtzOiB0aGlzLnNlbGVjdG9yLCBjOiB0aGlzLmNvbnRleHR9O1xuXG5cdFx0XHRpZiAoISQuaXNSZWFkeSAmJiBvLnMpIHtcblx0XHRcdFx0bG9nKCdET00gbm90IHJlYWR5LCBxdWV1aW5nIGFqYXhGb3JtJyk7XG5cdFx0XHRcdCQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JChvLnMsIG8uYykuYWpheEZvcm0ob3B0aW9ucyk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBpcyB5b3VyIERPTSByZWFkeT8gIGh0dHA6Ly9kb2NzLmpxdWVyeS5jb20vVHV0b3JpYWxzOkludHJvZHVjaW5nXyQoZG9jdW1lbnQpLnJlYWR5KClcblx0XHRcdGxvZygndGVybWluYXRpbmc7IHplcm8gZWxlbWVudHMgZm91bmQgYnkgc2VsZWN0b3InICsgKCQuaXNSZWFkeSA/ICcnIDogJyAoRE9NIG5vdCByZWFkeSknKSk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmIChvcHRpb25zLmRlbGVnYXRpb24pIHtcblx0XHRcdCQoZG9jdW1lbnQpXG5cdFx0XHRcdC5vZmYoJ3N1Ym1pdC5mb3JtLXBsdWdpbicsIHRoaXMuc2VsZWN0b3IsIGRvQWpheFN1Ym1pdClcblx0XHRcdFx0Lm9mZignY2xpY2suZm9ybS1wbHVnaW4nLCB0aGlzLnNlbGVjdG9yLCBjYXB0dXJlU3VibWl0dGluZ0VsZW1lbnQpXG5cdFx0XHRcdC5vbignc3VibWl0LmZvcm0tcGx1Z2luJywgdGhpcy5zZWxlY3Rvciwgb3B0aW9ucywgZG9BamF4U3VibWl0KVxuXHRcdFx0XHQub24oJ2NsaWNrLmZvcm0tcGx1Z2luJywgdGhpcy5zZWxlY3Rvciwgb3B0aW9ucywgY2FwdHVyZVN1Ym1pdHRpbmdFbGVtZW50KTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuYWpheEZvcm1VbmJpbmQoKVxuXHRcdFx0Lm9uKCdzdWJtaXQuZm9ybS1wbHVnaW4nLCBvcHRpb25zLCBkb0FqYXhTdWJtaXQpXG5cdFx0XHQub24oJ2NsaWNrLmZvcm0tcGx1Z2luJywgb3B0aW9ucywgY2FwdHVyZVN1Ym1pdHRpbmdFbGVtZW50KTtcblx0fTtcblxuXHQvLyBwcml2YXRlIGV2ZW50IGhhbmRsZXJzXG5cdGZ1bmN0aW9uIGRvQWpheFN1Ym1pdChlKSB7XG5cdFx0LyoganNoaW50IHZhbGlkdGhpczp0cnVlICovXG5cdFx0dmFyIG9wdGlvbnMgPSBlLmRhdGE7XG5cblx0XHRpZiAoIWUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHsgLy8gaWYgZXZlbnQgaGFzIGJlZW4gY2FuY2VsZWQsIGRvbid0IHByb2NlZWRcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdCQoZS50YXJnZXQpLmNsb3Nlc3QoJ2Zvcm0nKS5hamF4U3VibWl0KG9wdGlvbnMpOyAvLyAjMzY1XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gY2FwdHVyZVN1Ym1pdHRpbmdFbGVtZW50KGUpIHtcblx0XHQvKiBqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cblx0XHR2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XG5cdFx0dmFyICRlbCA9ICQodGFyZ2V0KTtcblxuXHRcdGlmICghJGVsLmlzKCdbdHlwZT1zdWJtaXRdLFt0eXBlPWltYWdlXScpKSB7XG5cdFx0XHQvLyBpcyB0aGlzIGEgY2hpbGQgZWxlbWVudCBvZiB0aGUgc3VibWl0IGVsPyAgKGV4OiBhIHNwYW4gd2l0aGluIGEgYnV0dG9uKVxuXHRcdFx0dmFyIHQgPSAkZWwuY2xvc2VzdCgnW3R5cGU9c3VibWl0XScpO1xuXG5cdFx0XHRpZiAodC5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dGFyZ2V0ID0gdFswXTtcblx0XHR9XG5cblx0XHR2YXIgZm9ybSA9IHRhcmdldC5mb3JtO1xuXG5cdFx0Zm9ybS5jbGsgPSB0YXJnZXQ7XG5cblx0XHRpZiAodGFyZ2V0LnR5cGUgPT09ICdpbWFnZScpIHtcblx0XHRcdGlmICh0eXBlb2YgZS5vZmZzZXRYICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRmb3JtLmNsa194ID0gZS5vZmZzZXRYO1xuXHRcdFx0XHRmb3JtLmNsa195ID0gZS5vZmZzZXRZO1xuXG5cdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiAkLmZuLm9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHR2YXIgb2Zmc2V0ID0gJGVsLm9mZnNldCgpO1xuXG5cdFx0XHRcdGZvcm0uY2xrX3ggPSBlLnBhZ2VYIC0gb2Zmc2V0LmxlZnQ7XG5cdFx0XHRcdGZvcm0uY2xrX3kgPSBlLnBhZ2VZIC0gb2Zmc2V0LnRvcDtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9ybS5jbGtfeCA9IGUucGFnZVggLSB0YXJnZXQub2Zmc2V0TGVmdDtcblx0XHRcdFx0Zm9ybS5jbGtfeSA9IGUucGFnZVkgLSB0YXJnZXQub2Zmc2V0VG9wO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBjbGVhciBmb3JtIHZhcnNcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0Zm9ybS5jbGsgPSBmb3JtLmNsa194ID0gZm9ybS5jbGtfeSA9IG51bGw7XG5cdFx0fSwgMTAwKTtcblx0fVxuXG5cblx0Ly8gYWpheEZvcm1VbmJpbmQgdW5iaW5kcyB0aGUgZXZlbnQgaGFuZGxlcnMgdGhhdCB3ZXJlIGJvdW5kIGJ5IGFqYXhGb3JtXG5cdCQuZm4uYWpheEZvcm1VbmJpbmQgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoJ3N1Ym1pdC5mb3JtLXBsdWdpbiBjbGljay5mb3JtLXBsdWdpbicpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBmb3JtVG9BcnJheSgpIGdhdGhlcnMgZm9ybSBlbGVtZW50IGRhdGEgaW50byBhbiBhcnJheSBvZiBvYmplY3RzIHRoYXQgY2FuXG5cdCAqIGJlIHBhc3NlZCB0byBhbnkgb2YgdGhlIGZvbGxvd2luZyBhamF4IGZ1bmN0aW9uczogJC5nZXQsICQucG9zdCwgb3IgbG9hZC5cblx0ICogRWFjaCBvYmplY3QgaW4gdGhlIGFycmF5IGhhcyBib3RoIGEgJ25hbWUnIGFuZCAndmFsdWUnIHByb3BlcnR5LiBBbiBleGFtcGxlIG9mXG5cdCAqIGFuIGFycmF5IGZvciBhIHNpbXBsZSBsb2dpbiBmb3JtIG1pZ2h0IGJlOlxuXHQgKlxuXHQgKiBbIHsgbmFtZTogJ3VzZXJuYW1lJywgdmFsdWU6ICdqcmVzaWcnIH0sIHsgbmFtZTogJ3Bhc3N3b3JkJywgdmFsdWU6ICdzZWNyZXQnIH0gXVxuXHQgKlxuXHQgKiBJdCBpcyB0aGlzIGFycmF5IHRoYXQgaXMgcGFzc2VkIHRvIHByZS1zdWJtaXQgY2FsbGJhY2sgZnVuY3Rpb25zIHByb3ZpZGVkIHRvIHRoZVxuXHQgKiBhamF4U3VibWl0KCkgYW5kIGFqYXhGb3JtKCkgbWV0aG9kcy5cblx0ICovXG5cdCQuZm4uZm9ybVRvQXJyYXkgPSBmdW5jdGlvbihzZW1hbnRpYywgZWxlbWVudHMsIGZpbHRlcmluZykge1xuXHRcdHZhciBhID0gW107XG5cblx0XHRpZiAodGhpcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiBhO1xuXHRcdH1cblxuXHRcdHZhciBmb3JtID0gdGhpc1swXTtcblx0XHR2YXIgZm9ybUlkID0gdGhpcy5hdHRyKCdpZCcpO1xuXHRcdHZhciBlbHMgPSAoc2VtYW50aWMgfHwgdHlwZW9mIGZvcm0uZWxlbWVudHMgPT09ICd1bmRlZmluZWQnKSA/IGZvcm0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKSA6IGZvcm0uZWxlbWVudHM7XG5cdFx0dmFyIGVsczI7XG5cblx0XHRpZiAoZWxzKSB7XG5cdFx0XHRlbHMgPSAkLm1ha2VBcnJheShlbHMpOyAvLyBjb252ZXJ0IHRvIHN0YW5kYXJkIGFycmF5XG5cdFx0fVxuXG5cdFx0Ly8gIzM4NjsgYWNjb3VudCBmb3IgaW5wdXRzIG91dHNpZGUgdGhlIGZvcm0gd2hpY2ggdXNlIHRoZSAnZm9ybScgYXR0cmlidXRlXG5cdFx0Ly8gRmluZXNzZVJ1czogaW4gbm9uLUlFIGJyb3dzZXJzIG91dHNpZGUgZmllbGRzIGFyZSBhbHJlYWR5IGluY2x1ZGVkIGluIGZvcm0uZWxlbWVudHMuXG5cdFx0aWYgKGZvcm1JZCAmJiAoc2VtYW50aWMgfHwgLyhFZGdlfFRyaWRlbnQpXFwvLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSkge1xuXHRcdFx0ZWxzMiA9ICQoJzppbnB1dFtmb3JtPVwiJyArIGZvcm1JZCArICdcIl0nKS5nZXQoKTsgLy8gaGF0IHRpcCBAdGhldFxuXHRcdFx0aWYgKGVsczIubGVuZ3RoKSB7XG5cdFx0XHRcdGVscyA9IChlbHMgfHwgW10pLmNvbmNhdChlbHMyKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIWVscyB8fCAhZWxzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fVxuXG5cdFx0aWYgKCQuaXNGdW5jdGlvbihmaWx0ZXJpbmcpKSB7XG5cdFx0XHRlbHMgPSAkLm1hcChlbHMsIGZpbHRlcmluZyk7XG5cdFx0fVxuXG5cdFx0dmFyIGksIGosIG4sIHYsIGVsLCBtYXgsIGptYXg7XG5cblx0XHRmb3IgKGkgPSAwLCBtYXggPSBlbHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHtcblx0XHRcdGVsID0gZWxzW2ldO1xuXHRcdFx0biA9IGVsLm5hbWU7XG5cdFx0XHRpZiAoIW4gfHwgZWwuZGlzYWJsZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzZW1hbnRpYyAmJiBmb3JtLmNsayAmJiBlbC50eXBlID09PSAnaW1hZ2UnKSB7XG5cdFx0XHRcdC8vIGhhbmRsZSBpbWFnZSBpbnB1dHMgb24gdGhlIGZseSB3aGVuIHNlbWFudGljID09IHRydWVcblx0XHRcdFx0aWYgKGZvcm0uY2xrID09PSBlbCkge1xuXHRcdFx0XHRcdGEucHVzaCh7bmFtZTogbiwgdmFsdWU6ICQoZWwpLnZhbCgpLCB0eXBlOiBlbC50eXBlfSk7XG5cdFx0XHRcdFx0YS5wdXNoKHtuYW1lOiBuICsgJy54JywgdmFsdWU6IGZvcm0uY2xrX3h9LCB7bmFtZTogbiArICcueScsIHZhbHVlOiBmb3JtLmNsa195fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHYgPSAkLmZpZWxkVmFsdWUoZWwsIHRydWUpO1xuXHRcdFx0aWYgKHYgJiYgdi5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcblx0XHRcdFx0aWYgKGVsZW1lbnRzKSB7XG5cdFx0XHRcdFx0ZWxlbWVudHMucHVzaChlbCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yIChqID0gMCwgam1heCA9IHYubGVuZ3RoOyBqIDwgam1heDsgaisrKSB7XG5cdFx0XHRcdFx0YS5wdXNoKHtuYW1lOiBuLCB2YWx1ZTogdltqXX0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoZmVhdHVyZS5maWxlYXBpICYmIGVsLnR5cGUgPT09ICdmaWxlJykge1xuXHRcdFx0XHRpZiAoZWxlbWVudHMpIHtcblx0XHRcdFx0XHRlbGVtZW50cy5wdXNoKGVsKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBmaWxlcyA9IGVsLmZpbGVzO1xuXG5cdFx0XHRcdGlmIChmaWxlcy5sZW5ndGgpIHtcblx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgZmlsZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdGEucHVzaCh7bmFtZTogbiwgdmFsdWU6IGZpbGVzW2pdLCB0eXBlOiBlbC50eXBlfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vICMxODBcblx0XHRcdFx0XHRhLnB1c2goe25hbWU6IG4sIHZhbHVlOiAnJywgdHlwZTogZWwudHlwZX0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAodiAhPT0gbnVsbCAmJiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aWYgKGVsZW1lbnRzKSB7XG5cdFx0XHRcdFx0ZWxlbWVudHMucHVzaChlbCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YS5wdXNoKHtuYW1lOiBuLCB2YWx1ZTogdiwgdHlwZTogZWwudHlwZSwgcmVxdWlyZWQ6IGVsLnJlcXVpcmVkfSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCFzZW1hbnRpYyAmJiBmb3JtLmNsaykge1xuXHRcdFx0Ly8gaW5wdXQgdHlwZT09J2ltYWdlJyBhcmUgbm90IGZvdW5kIGluIGVsZW1lbnRzIGFycmF5ISBoYW5kbGUgaXQgaGVyZVxuXHRcdFx0dmFyICRpbnB1dCA9ICQoZm9ybS5jbGspLCBpbnB1dCA9ICRpbnB1dFswXTtcblxuXHRcdFx0biA9IGlucHV0Lm5hbWU7XG5cblx0XHRcdGlmIChuICYmICFpbnB1dC5kaXNhYmxlZCAmJiBpbnB1dC50eXBlID09PSAnaW1hZ2UnKSB7XG5cdFx0XHRcdGEucHVzaCh7bmFtZTogbiwgdmFsdWU6ICRpbnB1dC52YWwoKX0pO1xuXHRcdFx0XHRhLnB1c2goe25hbWU6IG4gKyAnLngnLCB2YWx1ZTogZm9ybS5jbGtfeH0sIHtuYW1lOiBuICsgJy55JywgdmFsdWU6IGZvcm0uY2xrX3l9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gYTtcblx0fTtcblxuXHQvKipcblx0ICogU2VyaWFsaXplcyBmb3JtIGRhdGEgaW50byBhICdzdWJtaXR0YWJsZScgc3RyaW5nLiBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBhIHN0cmluZ1xuXHQgKiBpbiB0aGUgZm9ybWF0OiBuYW1lMT12YWx1ZTEmYW1wO25hbWUyPXZhbHVlMlxuXHQgKi9cblx0JC5mbi5mb3JtU2VyaWFsaXplID0gZnVuY3Rpb24oc2VtYW50aWMpIHtcblx0XHQvLyBoYW5kIG9mZiB0byBqUXVlcnkucGFyYW0gZm9yIHByb3BlciBlbmNvZGluZ1xuXHRcdHJldHVybiAkLnBhcmFtKHRoaXMuZm9ybVRvQXJyYXkoc2VtYW50aWMpKTtcblx0fTtcblxuXHQvKipcblx0ICogU2VyaWFsaXplcyBhbGwgZmllbGQgZWxlbWVudHMgaW4gdGhlIGpRdWVyeSBvYmplY3QgaW50byBhIHF1ZXJ5IHN0cmluZy5cblx0ICogVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gYSBzdHJpbmcgaW4gdGhlIGZvcm1hdDogbmFtZTE9dmFsdWUxJmFtcDtuYW1lMj12YWx1ZTJcblx0ICovXG5cdCQuZm4uZmllbGRTZXJpYWxpemUgPSBmdW5jdGlvbihzdWNjZXNzZnVsKSB7XG5cdFx0dmFyIGEgPSBbXTtcblxuXHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuID0gdGhpcy5uYW1lO1xuXG5cdFx0XHRpZiAoIW4pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdiA9ICQuZmllbGRWYWx1ZSh0aGlzLCBzdWNjZXNzZnVsKTtcblxuXHRcdFx0aWYgKHYgJiYgdi5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIG1heCA9IHYubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHtcblx0XHRcdFx0XHRhLnB1c2goe25hbWU6IG4sIHZhbHVlOiB2W2ldfSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICh2ICE9PSBudWxsICYmIHR5cGVvZiB2ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRhLnB1c2goe25hbWU6IHRoaXMubmFtZSwgdmFsdWU6IHZ9KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIGhhbmQgb2ZmIHRvIGpRdWVyeS5wYXJhbSBmb3IgcHJvcGVyIGVuY29kaW5nXG5cdFx0cmV0dXJuICQucGFyYW0oYSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZhbHVlKHMpIG9mIHRoZSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC4gRm9yIGV4YW1wbGUsIGNvbnNpZGVyIHRoZSBmb2xsb3dpbmcgZm9ybTpcblx0ICpcblx0ICpcdDxmb3JtPjxmaWVsZHNldD5cblx0ICpcdFx0PGlucHV0IG5hbWU9XCJBXCIgdHlwZT1cInRleHRcIj5cblx0ICpcdFx0PGlucHV0IG5hbWU9XCJBXCIgdHlwZT1cInRleHRcIj5cblx0ICpcdFx0PGlucHV0IG5hbWU9XCJCXCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJCMVwiPlxuXHQgKlx0XHQ8aW5wdXQgbmFtZT1cIkJcIiB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIkIyXCI+XG5cdCAqXHRcdDxpbnB1dCBuYW1lPVwiQ1wiIHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwiQzFcIj5cblx0ICpcdFx0PGlucHV0IG5hbWU9XCJDXCIgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJDMlwiPlxuXHQgKlx0PC9maWVsZHNldD48L2Zvcm0+XG5cdCAqXG5cdCAqXHR2YXIgdiA9ICQoJ2lucHV0W3R5cGU9dGV4dF0nKS5maWVsZFZhbHVlKCk7XG5cdCAqXHQvLyBpZiBubyB2YWx1ZXMgYXJlIGVudGVyZWQgaW50byB0aGUgdGV4dCBpbnB1dHNcblx0ICpcdHYgPT09IFsnJywnJ11cblx0ICpcdC8vIGlmIHZhbHVlcyBlbnRlcmVkIGludG8gdGhlIHRleHQgaW5wdXRzIGFyZSAnZm9vJyBhbmQgJ2Jhcidcblx0ICpcdHYgPT09IFsnZm9vJywnYmFyJ11cblx0ICpcblx0ICpcdHZhciB2ID0gJCgnaW5wdXRbdHlwZT1jaGVja2JveF0nKS5maWVsZFZhbHVlKCk7XG5cdCAqXHQvLyBpZiBuZWl0aGVyIGNoZWNrYm94IGlzIGNoZWNrZWRcblx0ICpcdHYgPT09IHVuZGVmaW5lZFxuXHQgKlx0Ly8gaWYgYm90aCBjaGVja2JveGVzIGFyZSBjaGVja2VkXG5cdCAqXHR2ID09PSBbJ0IxJywgJ0IyJ11cblx0ICpcblx0ICpcdHZhciB2ID0gJCgnaW5wdXRbdHlwZT1yYWRpb10nKS5maWVsZFZhbHVlKCk7XG5cdCAqXHQvLyBpZiBuZWl0aGVyIHJhZGlvIGlzIGNoZWNrZWRcblx0ICpcdHYgPT09IHVuZGVmaW5lZFxuXHQgKlx0Ly8gaWYgZmlyc3QgcmFkaW8gaXMgY2hlY2tlZFxuXHQgKlx0diA9PT0gWydDMSddXG5cdCAqXG5cdCAqIFRoZSBzdWNjZXNzZnVsIGFyZ3VtZW50IGNvbnRyb2xzIHdoZXRoZXIgb3Igbm90IHRoZSBmaWVsZCBlbGVtZW50IG11c3QgYmUgJ3N1Y2Nlc3NmdWwnXG5cdCAqIChwZXIgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvaW50ZXJhY3QvZm9ybXMuaHRtbCNzdWNjZXNzZnVsLWNvbnRyb2xzKS5cblx0ICogVGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHN1Y2Nlc3NmdWwgYXJndW1lbnQgaXMgdHJ1ZS4gSWYgdGhpcyB2YWx1ZSBpcyBmYWxzZSB0aGUgdmFsdWUocylcblx0ICogZm9yIGVhY2ggZWxlbWVudCBpcyByZXR1cm5lZC5cblx0ICpcblx0ICogTm90ZTogVGhpcyBtZXRob2QgKmFsd2F5cyogcmV0dXJucyBhbiBhcnJheS4gSWYgbm8gdmFsaWQgdmFsdWUgY2FuIGJlIGRldGVybWluZWQgdGhlXG5cdCAqXHRhcnJheSB3aWxsIGJlIGVtcHR5LCBvdGhlcndpc2UgaXQgd2lsbCBjb250YWluIG9uZSBvciBtb3JlIHZhbHVlcy5cblx0ICovXG5cdCQuZm4uZmllbGRWYWx1ZSA9IGZ1bmN0aW9uKHN1Y2Nlc3NmdWwpIHtcblx0XHRmb3IgKHZhciB2YWwgPSBbXSwgaSA9IDAsIG1heCA9IHRoaXMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHtcblx0XHRcdHZhciBlbCA9IHRoaXNbaV07XG5cdFx0XHR2YXIgdiA9ICQuZmllbGRWYWx1ZShlbCwgc3VjY2Vzc2Z1bCk7XG5cblx0XHRcdGlmICh2ID09PSBudWxsIHx8IHR5cGVvZiB2ID09PSAndW5kZWZpbmVkJyB8fCAodi5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgJiYgIXYubGVuZ3RoKSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHYuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG5cdFx0XHRcdCQubWVyZ2UodmFsLCB2KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbC5wdXNoKHYpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBlbGVtZW50LlxuXHQgKi9cblx0JC5maWVsZFZhbHVlID0gZnVuY3Rpb24oZWwsIHN1Y2Nlc3NmdWwpIHtcblx0XHR2YXIgbiA9IGVsLm5hbWUsIHQgPSBlbC50eXBlLCB0YWcgPSBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAodHlwZW9mIHN1Y2Nlc3NmdWwgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRzdWNjZXNzZnVsID0gdHJ1ZTtcblx0XHR9XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1taXhlZC1vcGVyYXRvcnMgKi9cblx0XHRpZiAoc3VjY2Vzc2Z1bCAmJiAoIW4gfHwgZWwuZGlzYWJsZWQgfHwgdCA9PT0gJ3Jlc2V0JyB8fCB0ID09PSAnYnV0dG9uJyB8fFxuXHRcdFx0KHQgPT09ICdjaGVja2JveCcgfHwgdCA9PT0gJ3JhZGlvJykgJiYgIWVsLmNoZWNrZWQgfHxcblx0XHRcdCh0ID09PSAnc3VibWl0JyB8fCB0ID09PSAnaW1hZ2UnKSAmJiBlbC5mb3JtICYmIGVsLmZvcm0uY2xrICE9PSBlbCB8fFxuXHRcdFx0dGFnID09PSAnc2VsZWN0JyAmJiBlbC5zZWxlY3RlZEluZGV4ID09PSAtMSkpIHtcblx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLW1peGVkLW9wZXJhdG9ycyAqL1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0aWYgKHRhZyA9PT0gJ3NlbGVjdCcpIHtcblx0XHRcdHZhciBpbmRleCA9IGVsLnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdGlmIChpbmRleCA8IDApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBhID0gW10sIG9wcyA9IGVsLm9wdGlvbnM7XG5cdFx0XHR2YXIgb25lID0gKHQgPT09ICdzZWxlY3Qtb25lJyk7XG5cdFx0XHR2YXIgbWF4ID0gKG9uZSA/IGluZGV4ICsgMSA6IG9wcy5sZW5ndGgpO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gKG9uZSA/IGluZGV4IDogMCk7IGkgPCBtYXg7IGkrKykge1xuXHRcdFx0XHR2YXIgb3AgPSBvcHNbaV07XG5cblx0XHRcdFx0aWYgKG9wLnNlbGVjdGVkICYmICFvcC5kaXNhYmxlZCkge1xuXHRcdFx0XHRcdHZhciB2ID0gb3AudmFsdWU7XG5cblx0XHRcdFx0XHRpZiAoIXYpIHsgLy8gZXh0cmEgcGFpbiBmb3IgSUUuLi5cblx0XHRcdFx0XHRcdHYgPSAob3AuYXR0cmlidXRlcyAmJiBvcC5hdHRyaWJ1dGVzLnZhbHVlICYmICEob3AuYXR0cmlidXRlcy52YWx1ZS5zcGVjaWZpZWQpKSA/IG9wLnRleHQgOiBvcC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAob25lKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRhLnB1c2godik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICQoZWwpLnZhbCgpLnJlcGxhY2UockNSTEYsICdcXHJcXG4nKTtcblx0fTtcblxuXHQvKipcblx0ICogQ2xlYXJzIHRoZSBmb3JtIGRhdGEuIFRha2VzIHRoZSBmb2xsb3dpbmcgYWN0aW9ucyBvbiB0aGUgZm9ybSdzIGlucHV0IGZpZWxkczpcblx0ICogIC0gaW5wdXQgdGV4dCBmaWVsZHMgd2lsbCBoYXZlIHRoZWlyICd2YWx1ZScgcHJvcGVydHkgc2V0IHRvIHRoZSBlbXB0eSBzdHJpbmdcblx0ICogIC0gc2VsZWN0IGVsZW1lbnRzIHdpbGwgaGF2ZSB0aGVpciAnc2VsZWN0ZWRJbmRleCcgcHJvcGVydHkgc2V0IHRvIC0xXG5cdCAqICAtIGNoZWNrYm94IGFuZCByYWRpbyBpbnB1dHMgd2lsbCBoYXZlIHRoZWlyICdjaGVja2VkJyBwcm9wZXJ0eSBzZXQgdG8gZmFsc2Vcblx0ICogIC0gaW5wdXRzIG9mIHR5cGUgc3VibWl0LCBidXR0b24sIHJlc2V0LCBhbmQgaGlkZGVuIHdpbGwgKm5vdCogYmUgZWZmZWN0ZWRcblx0ICogIC0gYnV0dG9uIGVsZW1lbnRzIHdpbGwgKm5vdCogYmUgZWZmZWN0ZWRcblx0ICovXG5cdCQuZm4uY2xlYXJGb3JtID0gZnVuY3Rpb24oaW5jbHVkZUhpZGRlbikge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHQkKCdpbnB1dCxzZWxlY3QsdGV4dGFyZWEnLCB0aGlzKS5jbGVhckZpZWxkcyhpbmNsdWRlSGlkZGVuKTtcblx0XHR9KTtcblx0fTtcblxuXHQvKipcblx0ICogQ2xlYXJzIHRoZSBzZWxlY3RlZCBmb3JtIGVsZW1lbnRzLlxuXHQgKi9cblx0JC5mbi5jbGVhckZpZWxkcyA9ICQuZm4uY2xlYXJJbnB1dHMgPSBmdW5jdGlvbihpbmNsdWRlSGlkZGVuKSB7XG5cdFx0dmFyIHJlID0gL14oPzpjb2xvcnxkYXRlfGRhdGV0aW1lfGVtYWlsfG1vbnRofG51bWJlcnxwYXNzd29yZHxyYW5nZXxzZWFyY2h8dGVsfHRleHR8dGltZXx1cmx8d2VlaykkL2k7IC8vICdoaWRkZW4nIGlzIG5vdCBpbiB0aGlzIGxpc3RcblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdCA9IHRoaXMudHlwZSwgdGFnID0gdGhpcy50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmIChyZS50ZXN0KHQpIHx8IHRhZyA9PT0gJ3RleHRhcmVhJykge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gJyc7XG5cblx0XHRcdH0gZWxzZSBpZiAodCA9PT0gJ2NoZWNrYm94JyB8fCB0ID09PSAncmFkaW8nKSB7XG5cdFx0XHRcdHRoaXMuY2hlY2tlZCA9IGZhbHNlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKHRhZyA9PT0gJ3NlbGVjdCcpIHtcblx0XHRcdFx0dGhpcy5zZWxlY3RlZEluZGV4ID0gLTE7XG5cblx0XHRcdH0gZWxzZSBpZiAodCA9PT0gJ2ZpbGUnKSB7XG5cdFx0XHRcdGlmICgvTVNJRS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuXHRcdFx0XHRcdCQodGhpcykucmVwbGFjZVdpdGgoJCh0aGlzKS5jbG9uZSh0cnVlKSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JCh0aGlzKS52YWwoJycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoaW5jbHVkZUhpZGRlbikge1xuXHRcdFx0XHQvLyBpbmNsdWRlSGlkZGVuIGNhbiBiZSB0aGUgdmFsdWUgdHJ1ZSwgb3IgaXQgY2FuIGJlIGEgc2VsZWN0b3Igc3RyaW5nXG5cdFx0XHRcdC8vIGluZGljYXRpbmcgYSBzcGVjaWFsIHRlc3Q7IGZvciBleGFtcGxlOlxuXHRcdFx0XHQvLyAkKCcjbXlGb3JtJykuY2xlYXJGb3JtKCcuc3BlY2lhbDpoaWRkZW4nKVxuXHRcdFx0XHQvLyB0aGUgYWJvdmUgd291bGQgY2xlYW4gaGlkZGVuIGlucHV0cyB0aGF0IGhhdmUgdGhlIGNsYXNzIG9mICdzcGVjaWFsJ1xuXHRcdFx0XHRpZiAoKGluY2x1ZGVIaWRkZW4gPT09IHRydWUgJiYgL2hpZGRlbi8udGVzdCh0KSkgfHxcblx0XHRcdFx0XHQodHlwZW9mIGluY2x1ZGVIaWRkZW4gPT09ICdzdHJpbmcnICYmICQodGhpcykuaXMoaW5jbHVkZUhpZGRlbikpKSB7XG5cdFx0XHRcdFx0dGhpcy52YWx1ZSA9ICcnO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cblxuXHQvKipcblx0ICogUmVzZXRzIHRoZSBmb3JtIGRhdGEgb3IgaW5kaXZpZHVhbCBlbGVtZW50cy4gVGFrZXMgdGhlIGZvbGxvd2luZyBhY3Rpb25zXG5cdCAqIG9uIHRoZSBzZWxlY3RlZCB0YWdzOlxuXHQgKiAtIGFsbCBmaWVsZHMgd2l0aGluIGZvcm0gZWxlbWVudHMgd2lsbCBiZSByZXNldCB0byB0aGVpciBvcmlnaW5hbCB2YWx1ZVxuXHQgKiAtIGlucHV0IC8gdGV4dGFyZWEgLyBzZWxlY3QgZmllbGRzIHdpbGwgYmUgcmVzZXQgdG8gdGhlaXIgb3JpZ2luYWwgdmFsdWVcblx0ICogLSBvcHRpb24gLyBvcHRncm91cCBmaWVsZHMgKGZvciBtdWx0aS1zZWxlY3RzKSB3aWxsIGRlZmF1bHRlZCBpbmRpdmlkdWFsbHlcblx0ICogLSBub24tbXVsdGlwbGUgb3B0aW9ucyB3aWxsIGZpbmQgdGhlIHJpZ2h0IHNlbGVjdCB0byBkZWZhdWx0XG5cdCAqIC0gbGFiZWwgZWxlbWVudHMgd2lsbCBiZSBzZWFyY2hlZCBhZ2FpbnN0IGl0cyAnZm9yJyBhdHRyaWJ1dGVcblx0ICogLSBhbGwgb3RoZXJzIHdpbGwgYmUgc2VhcmNoZWQgZm9yIGFwcHJvcHJpYXRlIGNoaWxkcmVuIHRvIGRlZmF1bHRcblx0ICovXG5cdCQuZm4ucmVzZXRGb3JtID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlbCA9ICQodGhpcyk7XG5cdFx0XHR2YXIgdGFnID0gdGhpcy50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdHN3aXRjaCAodGFnKSB7XG5cdFx0XHRjYXNlICdpbnB1dCc6XG5cdFx0XHRcdHRoaXMuY2hlY2tlZCA9IHRoaXMuZGVmYXVsdENoZWNrZWQ7XG5cdFx0XHRcdFx0Ly8gZmFsbCB0aHJvdWdoXG5cblx0XHRcdGNhc2UgJ3RleHRhcmVhJzpcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHRoaXMuZGVmYXVsdFZhbHVlO1xuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRjYXNlICdvcHRpb24nOlxuXHRcdFx0Y2FzZSAnb3B0Z3JvdXAnOlxuXHRcdFx0XHR2YXIgc2VsZWN0ID0gZWwucGFyZW50cygnc2VsZWN0Jyk7XG5cblx0XHRcdFx0aWYgKHNlbGVjdC5sZW5ndGggJiYgc2VsZWN0WzBdLm11bHRpcGxlKSB7XG5cdFx0XHRcdFx0aWYgKHRhZyA9PT0gJ29wdGlvbicpIHtcblx0XHRcdFx0XHRcdHRoaXMuc2VsZWN0ZWQgPSB0aGlzLmRlZmF1bHRTZWxlY3RlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWwuZmluZCgnb3B0aW9uJykucmVzZXRGb3JtKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNlbGVjdC5yZXNldEZvcm0oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRjYXNlICdzZWxlY3QnOlxuXHRcdFx0XHRlbC5maW5kKCdvcHRpb24nKS5lYWNoKGZ1bmN0aW9uKGkpIHtcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0XHRcdFx0XHR0aGlzLnNlbGVjdGVkID0gdGhpcy5kZWZhdWx0U2VsZWN0ZWQ7XG5cdFx0XHRcdFx0aWYgKHRoaXMuZGVmYXVsdFNlbGVjdGVkICYmICFlbFswXS5tdWx0aXBsZSkge1xuXHRcdFx0XHRcdFx0ZWxbMF0uc2VsZWN0ZWRJbmRleCA9IGk7XG5cblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRjYXNlICdsYWJlbCc6XG5cdFx0XHRcdHZhciBmb3JFbCA9ICQoZWwuYXR0cignZm9yJykpO1xuXHRcdFx0XHR2YXIgbGlzdCA9IGVsLmZpbmQoJ2lucHV0LHNlbGVjdCx0ZXh0YXJlYScpO1xuXG5cdFx0XHRcdGlmIChmb3JFbFswXSkge1xuXHRcdFx0XHRcdGxpc3QudW5zaGlmdChmb3JFbFswXSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsaXN0LnJlc2V0Rm9ybSgpO1xuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRjYXNlICdmb3JtJzpcblx0XHRcdFx0XHQvLyBndWFyZCBhZ2FpbnN0IGFuIGlucHV0IHdpdGggdGhlIG5hbWUgb2YgJ3Jlc2V0J1xuXHRcdFx0XHRcdC8vIG5vdGUgdGhhdCBJRSByZXBvcnRzIHRoZSByZXNldCBmdW5jdGlvbiBhcyBhbiAnb2JqZWN0J1xuXHRcdFx0XHRpZiAodHlwZW9mIHRoaXMucmVzZXQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiB0aGlzLnJlc2V0ID09PSAnb2JqZWN0JyAmJiAhdGhpcy5yZXNldC5ub2RlVHlwZSkpIHtcblx0XHRcdFx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0ZWwuZmluZCgnZm9ybSxpbnB1dCxsYWJlbCxzZWxlY3QsdGV4dGFyZWEnKS5yZXNldEZvcm0oKTtcblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9KTtcblx0fTtcblxuXHQvKipcblx0ICogRW5hYmxlcyBvciBkaXNhYmxlcyBhbnkgbWF0Y2hpbmcgZWxlbWVudHMuXG5cdCAqL1xuXHQkLmZuLmVuYWJsZSA9IGZ1bmN0aW9uKGIpIHtcblx0XHRpZiAodHlwZW9mIGIgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRiID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5kaXNhYmxlZCA9ICFiO1xuXHRcdH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDaGVja3MvdW5jaGVja3MgYW55IG1hdGNoaW5nIGNoZWNrYm94ZXMgb3IgcmFkaW8gYnV0dG9ucyBhbmRcblx0ICogc2VsZWN0cy9kZXNlbGVjdHMgYW5kIG1hdGNoaW5nIG9wdGlvbiBlbGVtZW50cy5cblx0ICovXG5cdCQuZm4uc2VsZWN0ZWQgPSBmdW5jdGlvbihzZWxlY3QpIHtcblx0XHRpZiAodHlwZW9mIHNlbGVjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHNlbGVjdCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0ID0gdGhpcy50eXBlO1xuXG5cdFx0XHRpZiAodCA9PT0gJ2NoZWNrYm94JyB8fCB0ID09PSAncmFkaW8nKSB7XG5cdFx0XHRcdHRoaXMuY2hlY2tlZCA9IHNlbGVjdDtcblxuXHRcdFx0fSBlbHNlIGlmICh0aGlzLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ29wdGlvbicpIHtcblx0XHRcdFx0dmFyICRzZWwgPSAkKHRoaXMpLnBhcmVudCgnc2VsZWN0Jyk7XG5cblx0XHRcdFx0aWYgKHNlbGVjdCAmJiAkc2VsWzBdICYmICRzZWxbMF0udHlwZSA9PT0gJ3NlbGVjdC1vbmUnKSB7XG5cdFx0XHRcdFx0Ly8gZGVzZWxlY3QgYWxsIG90aGVyIG9wdGlvbnNcblx0XHRcdFx0XHQkc2VsLmZpbmQoJ29wdGlvbicpLnNlbGVjdGVkKGZhbHNlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3Q7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cblx0Ly8gZXhwb3NlIGRlYnVnIHZhclxuXHQkLmZuLmFqYXhTdWJtaXQuZGVidWcgPSBmYWxzZTtcblxuXHQvLyBoZWxwZXIgZm4gZm9yIGNvbnNvbGUgbG9nZ2luZ1xuXHRmdW5jdGlvbiBsb2coKSB7XG5cdFx0aWYgKCEkLmZuLmFqYXhTdWJtaXQuZGVidWcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgbXNnID0gJ1tqcXVlcnkuZm9ybV0gJyArIEFycmF5LnByb3RvdHlwZS5qb2luLmNhbGwoYXJndW1lbnRzLCAnJyk7XG5cblx0XHRpZiAod2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUubG9nKSB7XG5cdFx0XHR3aW5kb3cuY29uc29sZS5sb2cobXNnKTtcblxuXHRcdH0gZWxzZSBpZiAod2luZG93Lm9wZXJhICYmIHdpbmRvdy5vcGVyYS5wb3N0RXJyb3IpIHtcblx0XHRcdHdpbmRvdy5vcGVyYS5wb3N0RXJyb3IobXNnKTtcblx0XHR9XG5cdH1cbn0pKTtcblxuLyohXG4gKiBCb290c3RyYXAgdjMuMy43IChodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbSlcbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKi9cblxuaWYgKHR5cGVvZiBqUXVlcnkgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeScpXG59XG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciB2ZXJzaW9uID0gJC5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpXG4gIGlmICgodmVyc2lvblswXSA8IDIgJiYgdmVyc2lvblsxXSA8IDkpIHx8ICh2ZXJzaW9uWzBdID09IDEgJiYgdmVyc2lvblsxXSA9PSA5ICYmIHZlcnNpb25bMl0gPCAxKSB8fCAodmVyc2lvblswXSA+IDMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgalF1ZXJ5IHZlcnNpb24gMS45LjEgb3IgaGlnaGVyLCBidXQgbG93ZXIgdGhhbiB2ZXJzaW9uIDQnKVxuICB9XG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0cmFuc2l0aW9uLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdHJhbnNpdGlvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDU1MgVFJBTlNJVElPTiBTVVBQT1JUIChTaG91dG91dDogaHR0cDovL3d3dy5tb2Rlcm5penIuY29tLylcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib290c3RyYXAnKVxuXG4gICAgdmFyIHRyYW5zRW5kRXZlbnROYW1lcyA9IHtcbiAgICAgIFdlYmtpdFRyYW5zaXRpb24gOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICBNb3pUcmFuc2l0aW9uICAgIDogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgT1RyYW5zaXRpb24gICAgICA6ICdvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCcsXG4gICAgICB0cmFuc2l0aW9uICAgICAgIDogJ3RyYW5zaXRpb25lbmQnXG4gICAgfVxuXG4gICAgZm9yICh2YXIgbmFtZSBpbiB0cmFuc0VuZEV2ZW50TmFtZXMpIHtcbiAgICAgIGlmIChlbC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7IGVuZDogdHJhbnNFbmRFdmVudE5hbWVzW25hbWVdIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2UgLy8gZXhwbGljaXQgZm9yIGllOCAoICAuXy4pXG4gIH1cblxuICAvLyBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcbiAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZVxuICAgIHZhciAkZWwgPSB0aGlzXG4gICAgJCh0aGlzKS5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZSB9KVxuICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHsgaWYgKCFjYWxsZWQpICQoJGVsKS50cmlnZ2VyKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCkgfVxuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIGR1cmF0aW9uKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAkKGZ1bmN0aW9uICgpIHtcbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25FbmQoKVxuXG4gICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuXG5cbiAgICAkLmV2ZW50LnNwZWNpYWwuYnNUcmFuc2l0aW9uRW5kID0ge1xuICAgICAgYmluZFR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGRlbGVnYXRlVHlwZTogJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxuICAgICAgaGFuZGxlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoJChlLnRhcmdldCkuaXModGhpcykpIHJldHVybiBlLmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFsZXJ0LmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWxlcnRzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQUxFUlQgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGRpc21pc3MgPSAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB2YXIgQWxlcnQgICA9IGZ1bmN0aW9uIChlbCkge1xuICAgICQoZWwpLm9uKCdjbGljaycsIGRpc21pc3MsIHRoaXMuY2xvc2UpXG4gIH1cblxuICBBbGVydC5WRVJTSU9OID0gJzMuMy43J1xuXG4gIEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBBbGVydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgICA9ICQodGhpcylcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gJChzZWxlY3RvciA9PT0gJyMnID8gW10gOiBzZWxlY3RvcilcblxuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgICRwYXJlbnQgPSAkdGhpcy5jbG9zZXN0KCcuYWxlcnQnKVxuICAgIH1cblxuICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnY2xvc2UuYnMuYWxlcnQnKSlcblxuICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoKSB7XG4gICAgICAvLyBkZXRhY2ggZnJvbSBwYXJlbnQsIGZpcmUgZXZlbnQgdGhlbiBjbGVhbiB1cCBkYXRhXG4gICAgICAkcGFyZW50LmRldGFjaCgpLnRyaWdnZXIoJ2Nsb3NlZC5icy5hbGVydCcpLnJlbW92ZSgpXG4gICAgfVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgJHBhcmVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICRwYXJlbnRcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgcmVtb3ZlRWxlbWVudClcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKEFsZXJ0LlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIHJlbW92ZUVsZW1lbnQoKVxuICB9XG5cblxuICAvLyBBTEVSVCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLmFsZXJ0JylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hbGVydCcsIChkYXRhID0gbmV3IEFsZXJ0KHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0uY2FsbCgkdGhpcylcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWxlcnRcblxuICAkLmZuLmFsZXJ0ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWxlcnQuQ29uc3RydWN0b3IgPSBBbGVydFxuXG5cbiAgLy8gQUxFUlQgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFsZXJ0Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hbGVydCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFMRVJUIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmFsZXJ0LmRhdGEtYXBpJywgZGlzbWlzcywgQWxlcnQucHJvdG90eXBlLmNsb3NlKVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBidXR0b24uanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNidXR0b25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQlVUVE9OIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBCdXR0b24gPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgID0gJC5leHRlbmQoe30sIEJ1dHRvbi5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlXG4gIH1cblxuICBCdXR0b24uVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgQnV0dG9uLkRFRkFVTFRTID0ge1xuICAgIGxvYWRpbmdUZXh0OiAnbG9hZGluZy4uLidcbiAgfVxuXG4gIEJ1dHRvbi5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICB2YXIgZCAgICA9ICdkaXNhYmxlZCdcbiAgICB2YXIgJGVsICA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgdmFsICA9ICRlbC5pcygnaW5wdXQnKSA/ICd2YWwnIDogJ2h0bWwnXG4gICAgdmFyIGRhdGEgPSAkZWwuZGF0YSgpXG5cbiAgICBzdGF0ZSArPSAnVGV4dCdcblxuICAgIGlmIChkYXRhLnJlc2V0VGV4dCA9PSBudWxsKSAkZWwuZGF0YSgncmVzZXRUZXh0JywgJGVsW3ZhbF0oKSlcblxuICAgIC8vIHB1c2ggdG8gZXZlbnQgbG9vcCB0byBhbGxvdyBmb3JtcyB0byBzdWJtaXRcbiAgICBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgJGVsW3ZhbF0oZGF0YVtzdGF0ZV0gPT0gbnVsbCA/IHRoaXMub3B0aW9uc1tzdGF0ZV0gOiBkYXRhW3N0YXRlXSlcblxuICAgICAgaWYgKHN0YXRlID09ICdsb2FkaW5nVGV4dCcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlXG4gICAgICAgICRlbC5hZGRDbGFzcyhkKS5hdHRyKGQsIGQpLnByb3AoZCwgdHJ1ZSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0xvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoZCkucmVtb3ZlQXR0cihkKS5wcm9wKGQsIGZhbHNlKVxuICAgICAgfVxuICAgIH0sIHRoaXMpLCAwKVxuICB9XG5cbiAgQnV0dG9uLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNoYW5nZWQgPSB0cnVlXG4gICAgdmFyICRwYXJlbnQgPSB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nKVxuXG4gICAgaWYgKCRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICB2YXIgJGlucHV0ID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCcpXG4gICAgICBpZiAoJGlucHV0LnByb3AoJ3R5cGUnKSA9PSAncmFkaW8nKSB7XG4gICAgICAgIGlmICgkaW5wdXQucHJvcCgnY2hlY2tlZCcpKSBjaGFuZ2VkID0gZmFsc2VcbiAgICAgICAgJHBhcmVudC5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9IGVsc2UgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ2NoZWNrYm94Jykge1xuICAgICAgICBpZiAoKCRpbnB1dC5wcm9wKCdjaGVja2VkJykpICE9PSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSkgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9XG4gICAgICAkaW5wdXQucHJvcCgnY2hlY2tlZCcsIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKVxuICAgICAgaWYgKGNoYW5nZWQpICRpbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtcHJlc3NlZCcsICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSlcbiAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuICB9XG5cblxuICAvLyBCVVRUT04gUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYnV0dG9uJywgKGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMsIG9wdGlvbnMpKSlcblxuICAgICAgaWYgKG9wdGlvbiA9PSAndG9nZ2xlJykgZGF0YS50b2dnbGUoKVxuICAgICAgZWxzZSBpZiAob3B0aW9uKSBkYXRhLnNldFN0YXRlKG9wdGlvbilcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYnV0dG9uXG5cbiAgJC5mbi5idXR0b24gICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5idXR0b24uQ29uc3RydWN0b3IgPSBCdXR0b25cblxuXG4gIC8vIEJVVFRPTiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmJ1dHRvbi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYnV0dG9uID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQlVUVE9OIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgJGJ0biA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5idG4nKVxuICAgICAgUGx1Z2luLmNhbGwoJGJ0biwgJ3RvZ2dsZScpXG4gICAgICBpZiAoISgkKGUudGFyZ2V0KS5pcygnaW5wdXRbdHlwZT1cInJhZGlvXCJdLCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKSkpIHtcbiAgICAgICAgLy8gUHJldmVudCBkb3VibGUgY2xpY2sgb24gcmFkaW9zLCBhbmQgdGhlIGRvdWJsZSBzZWxlY3Rpb25zIChzbyBjYW5jZWxsYXRpb24pIG9uIGNoZWNrYm94ZXNcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIC8vIFRoZSB0YXJnZXQgY29tcG9uZW50IHN0aWxsIHJlY2VpdmUgdGhlIGZvY3VzXG4gICAgICAgIGlmICgkYnRuLmlzKCdpbnB1dCxidXR0b24nKSkgJGJ0bi50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIGVsc2UgJGJ0bi5maW5kKCdpbnB1dDp2aXNpYmxlLGJ1dHRvbjp2aXNpYmxlJykuZmlyc3QoKS50cmlnZ2VyKCdmb2N1cycpXG4gICAgICB9XG4gICAgfSlcbiAgICAub24oJ2ZvY3VzLmJzLmJ1dHRvbi5kYXRhLWFwaSBibHVyLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5idG4nKS50b2dnbGVDbGFzcygnZm9jdXMnLCAvXmZvY3VzKGluKT8kLy50ZXN0KGUudHlwZSkpXG4gICAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogY2Fyb3VzZWwuanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNjYXJvdXNlbFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENBUk9VU0VMIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBDYXJvdXNlbCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRpbmRpY2F0b3JzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuY2Fyb3VzZWwtaW5kaWNhdG9ycycpXG4gICAgdGhpcy5vcHRpb25zICAgICA9IG9wdGlvbnNcbiAgICB0aGlzLnBhdXNlZCAgICAgID0gbnVsbFxuICAgIHRoaXMuc2xpZGluZyAgICAgPSBudWxsXG4gICAgdGhpcy5pbnRlcnZhbCAgICA9IG51bGxcbiAgICB0aGlzLiRhY3RpdmUgICAgID0gbnVsbFxuICAgIHRoaXMuJGl0ZW1zICAgICAgPSBudWxsXG5cbiAgICB0aGlzLm9wdGlvbnMua2V5Ym9hcmQgJiYgdGhpcy4kZWxlbWVudC5vbigna2V5ZG93bi5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5rZXlkb3duLCB0aGlzKSlcblxuICAgIHRoaXMub3B0aW9ucy5wYXVzZSA9PSAnaG92ZXInICYmICEoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSAmJiB0aGlzLiRlbGVtZW50XG4gICAgICAub24oJ21vdXNlZW50ZXIuYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMucGF1c2UsIHRoaXMpKVxuICAgICAgLm9uKCdtb3VzZWxlYXZlLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmN5Y2xlLCB0aGlzKSlcbiAgfVxuXG4gIENhcm91c2VsLlZFUlNJT04gID0gJzMuMy43J1xuXG4gIENhcm91c2VsLlRSQU5TSVRJT05fRFVSQVRJT04gPSA2MDBcblxuICBDYXJvdXNlbC5ERUZBVUxUUyA9IHtcbiAgICBpbnRlcnZhbDogNTAwMCxcbiAgICBwYXVzZTogJ2hvdmVyJyxcbiAgICB3cmFwOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUua2V5ZG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVyblxuICAgIHN3aXRjaCAoZS53aGljaCkge1xuICAgICAgY2FzZSAzNzogdGhpcy5wcmV2KCk7IGJyZWFrXG4gICAgICBjYXNlIDM5OiB0aGlzLm5leHQoKTsgYnJlYWtcbiAgICAgIGRlZmF1bHQ6IHJldHVyblxuICAgIH1cblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmN5Y2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlIHx8ICh0aGlzLnBhdXNlZCA9IGZhbHNlKVxuXG4gICAgdGhpcy5pbnRlcnZhbCAmJiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpXG5cbiAgICB0aGlzLm9wdGlvbnMuaW50ZXJ2YWxcbiAgICAgICYmICF0aGlzLnBhdXNlZFxuICAgICAgJiYgKHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgkLnByb3h5KHRoaXMubmV4dCwgdGhpcyksIHRoaXMub3B0aW9ucy5pbnRlcnZhbCkpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmdldEl0ZW1JbmRleCA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdGhpcy4kaXRlbXMgPSBpdGVtLnBhcmVudCgpLmNoaWxkcmVuKCcuaXRlbScpXG4gICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmluZGV4KGl0ZW0gfHwgdGhpcy4kYWN0aXZlKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmdldEl0ZW1Gb3JEaXJlY3Rpb24gPSBmdW5jdGlvbiAoZGlyZWN0aW9uLCBhY3RpdmUpIHtcbiAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleChhY3RpdmUpXG4gICAgdmFyIHdpbGxXcmFwID0gKGRpcmVjdGlvbiA9PSAncHJldicgJiYgYWN0aXZlSW5kZXggPT09IDApXG4gICAgICAgICAgICAgICAgfHwgKGRpcmVjdGlvbiA9PSAnbmV4dCcgJiYgYWN0aXZlSW5kZXggPT0gKHRoaXMuJGl0ZW1zLmxlbmd0aCAtIDEpKVxuICAgIGlmICh3aWxsV3JhcCAmJiAhdGhpcy5vcHRpb25zLndyYXApIHJldHVybiBhY3RpdmVcbiAgICB2YXIgZGVsdGEgPSBkaXJlY3Rpb24gPT0gJ3ByZXYnID8gLTEgOiAxXG4gICAgdmFyIGl0ZW1JbmRleCA9IChhY3RpdmVJbmRleCArIGRlbHRhKSAlIHRoaXMuJGl0ZW1zLmxlbmd0aFxuICAgIHJldHVybiB0aGlzLiRpdGVtcy5lcShpdGVtSW5kZXgpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUudG8gPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgdmFyIHRoYXQgICAgICAgID0gdGhpc1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KHRoaXMuJGFjdGl2ZSA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLml0ZW0uYWN0aXZlJykpXG5cbiAgICBpZiAocG9zID4gKHRoaXMuJGl0ZW1zLmxlbmd0aCAtIDEpIHx8IHBvcyA8IDApIHJldHVyblxuXG4gICAgaWYgKHRoaXMuc2xpZGluZykgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQub25lKCdzbGlkLmJzLmNhcm91c2VsJywgZnVuY3Rpb24gKCkgeyB0aGF0LnRvKHBvcykgfSkgLy8geWVzLCBcInNsaWRcIlxuICAgIGlmIChhY3RpdmVJbmRleCA9PSBwb3MpIHJldHVybiB0aGlzLnBhdXNlKCkuY3ljbGUoKVxuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUocG9zID4gYWN0aXZlSW5kZXggPyAnbmV4dCcgOiAncHJldicsIHRoaXMuJGl0ZW1zLmVxKHBvcykpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUgfHwgKHRoaXMucGF1c2VkID0gdHJ1ZSlcblxuICAgIGlmICh0aGlzLiRlbGVtZW50LmZpbmQoJy5uZXh0LCAucHJldicpLmxlbmd0aCAmJiAkLnN1cHBvcnQudHJhbnNpdGlvbikge1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZClcbiAgICAgIHRoaXMuY3ljbGUodHJ1ZSlcbiAgICB9XG5cbiAgICB0aGlzLmludGVydmFsID0gY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnNsaWRpbmcpIHJldHVyblxuICAgIHJldHVybiB0aGlzLnNsaWRlKCduZXh0JylcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnNsaWRpbmcpIHJldHVyblxuICAgIHJldHVybiB0aGlzLnNsaWRlKCdwcmV2JylcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5zbGlkZSA9IGZ1bmN0aW9uICh0eXBlLCBuZXh0KSB7XG4gICAgdmFyICRhY3RpdmUgICA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLml0ZW0uYWN0aXZlJylcbiAgICB2YXIgJG5leHQgICAgID0gbmV4dCB8fCB0aGlzLmdldEl0ZW1Gb3JEaXJlY3Rpb24odHlwZSwgJGFjdGl2ZSlcbiAgICB2YXIgaXNDeWNsaW5nID0gdGhpcy5pbnRlcnZhbFxuICAgIHZhciBkaXJlY3Rpb24gPSB0eXBlID09ICduZXh0JyA/ICdsZWZ0JyA6ICdyaWdodCdcbiAgICB2YXIgdGhhdCAgICAgID0gdGhpc1xuXG4gICAgaWYgKCRuZXh0Lmhhc0NsYXNzKCdhY3RpdmUnKSkgcmV0dXJuICh0aGlzLnNsaWRpbmcgPSBmYWxzZSlcblxuICAgIHZhciByZWxhdGVkVGFyZ2V0ID0gJG5leHRbMF1cbiAgICB2YXIgc2xpZGVFdmVudCA9ICQuRXZlbnQoJ3NsaWRlLmJzLmNhcm91c2VsJywge1xuICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCxcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgfSlcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc2xpZGVFdmVudClcbiAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLnNsaWRpbmcgPSB0cnVlXG5cbiAgICBpc0N5Y2xpbmcgJiYgdGhpcy5wYXVzZSgpXG5cbiAgICBpZiAodGhpcy4kaW5kaWNhdG9ycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGluZGljYXRvcnMuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgdmFyICRuZXh0SW5kaWNhdG9yID0gJCh0aGlzLiRpbmRpY2F0b3JzLmNoaWxkcmVuKClbdGhpcy5nZXRJdGVtSW5kZXgoJG5leHQpXSlcbiAgICAgICRuZXh0SW5kaWNhdG9yICYmICRuZXh0SW5kaWNhdG9yLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgIH1cblxuICAgIHZhciBzbGlkRXZlbnQgPSAkLkV2ZW50KCdzbGlkLmJzLmNhcm91c2VsJywgeyByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LCBkaXJlY3Rpb246IGRpcmVjdGlvbiB9KSAvLyB5ZXMsIFwic2xpZFwiXG4gICAgaWYgKCQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ3NsaWRlJykpIHtcbiAgICAgICRuZXh0LmFkZENsYXNzKHR5cGUpXG4gICAgICAkbmV4dFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbiAgICAgICRhY3RpdmUuYWRkQ2xhc3MoZGlyZWN0aW9uKVxuICAgICAgJG5leHQuYWRkQ2xhc3MoZGlyZWN0aW9uKVxuICAgICAgJGFjdGl2ZVxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJG5leHQucmVtb3ZlQ2xhc3MoW3R5cGUsIGRpcmVjdGlvbl0uam9pbignICcpKS5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKFsnYWN0aXZlJywgZGlyZWN0aW9uXS5qb2luKCcgJykpXG4gICAgICAgICAgdGhhdC5zbGlkaW5nID0gZmFsc2VcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcihzbGlkRXZlbnQpXG4gICAgICAgICAgfSwgMClcbiAgICAgICAgfSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENhcm91c2VsLlRSQU5TSVRJT05fRFVSQVRJT04pXG4gICAgfSBlbHNlIHtcbiAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAkbmV4dC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgIHRoaXMuc2xpZGluZyA9IGZhbHNlXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc2xpZEV2ZW50KVxuICAgIH1cblxuICAgIGlzQ3ljbGluZyAmJiB0aGlzLmN5Y2xlKClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENBUk9VU0VMIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmNhcm91c2VsJylcbiAgICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIENhcm91c2VsLkRFRkFVTFRTLCAkdGhpcy5kYXRhKCksIHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uKVxuICAgICAgdmFyIGFjdGlvbiAgPSB0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnID8gb3B0aW9uIDogb3B0aW9ucy5zbGlkZVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmNhcm91c2VsJywgKGRhdGEgPSBuZXcgQ2Fyb3VzZWwodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ251bWJlcicpIGRhdGEudG8ob3B0aW9uKVxuICAgICAgZWxzZSBpZiAoYWN0aW9uKSBkYXRhW2FjdGlvbl0oKVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5pbnRlcnZhbCkgZGF0YS5wYXVzZSgpLmN5Y2xlKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uY2Fyb3VzZWxcblxuICAkLmZuLmNhcm91c2VsICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uY2Fyb3VzZWwuQ29uc3RydWN0b3IgPSBDYXJvdXNlbFxuXG5cbiAgLy8gQ0FST1VTRUwgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmNhcm91c2VsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5jYXJvdXNlbCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENBUk9VU0VMIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGhyZWZcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiA9ICR0aGlzLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykpIC8vIHN0cmlwIGZvciBpZTdcbiAgICBpZiAoISR0YXJnZXQuaGFzQ2xhc3MoJ2Nhcm91c2VsJykpIHJldHVyblxuICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sICR0YXJnZXQuZGF0YSgpLCAkdGhpcy5kYXRhKCkpXG4gICAgdmFyIHNsaWRlSW5kZXggPSAkdGhpcy5hdHRyKCdkYXRhLXNsaWRlLXRvJylcbiAgICBpZiAoc2xpZGVJbmRleCkgb3B0aW9ucy5pbnRlcnZhbCA9IGZhbHNlXG5cbiAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb25zKVxuXG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICR0YXJnZXQuZGF0YSgnYnMuY2Fyb3VzZWwnKS50byhzbGlkZUluZGV4KVxuICAgIH1cblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpJywgJ1tkYXRhLXNsaWRlXScsIGNsaWNrSGFuZGxlcilcbiAgICAub24oJ2NsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpJywgJ1tkYXRhLXNsaWRlLXRvXScsIGNsaWNrSGFuZGxlcilcblxuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJGNhcm91c2VsID0gJCh0aGlzKVxuICAgICAgUGx1Z2luLmNhbGwoJGNhcm91c2VsLCAkY2Fyb3VzZWwuZGF0YSgpKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNvbGxhcHNlLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY29sbGFwc2VcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qIGpzaGludCBsYXRlZGVmOiBmYWxzZSAqL1xuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENPTExBUFNFIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgICAgID0gJC5leHRlbmQoe30sIENvbGxhcHNlLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuJHRyaWdnZXIgICAgICA9ICQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJyArIGVsZW1lbnQuaWQgKyAnXCJdLCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXScpXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gbnVsbFxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy4kZWxlbWVudCwgdGhpcy4kdHJpZ2dlcilcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRvZ2dsZSkgdGhpcy50b2dnbGUoKVxuICB9XG5cbiAgQ29sbGFwc2UuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTiA9IDM1MFxuXG4gIENvbGxhcHNlLkRFRkFVTFRTID0ge1xuICAgIHRvZ2dsZTogdHJ1ZVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmRpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzV2lkdGggPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCd3aWR0aCcpXG4gICAgcmV0dXJuIGhhc1dpZHRoID8gJ3dpZHRoJyA6ICdoZWlnaHQnXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVyblxuXG4gICAgdmFyIGFjdGl2ZXNEYXRhXG4gICAgdmFyIGFjdGl2ZXMgPSB0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50LmNoaWxkcmVuKCcucGFuZWwnKS5jaGlsZHJlbignLmluLCAuY29sbGFwc2luZycpXG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgYWN0aXZlc0RhdGEgPSBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS50cmFuc2l0aW9uaW5nKSByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoJ3Nob3cuYnMuY29sbGFwc2UnKVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICBQbHVnaW4uY2FsbChhY3RpdmVzLCAnaGlkZScpXG4gICAgICBhY3RpdmVzRGF0YSB8fCBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJywgbnVsbClcbiAgICB9XG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVtkaW1lbnNpb25dKDApXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLiR0cmlnZ2VyXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlZCcpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UgaW4nKVtkaW1lbnNpb25dKCcnKVxuICAgICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAudHJpZ2dlcignc2hvd24uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB2YXIgc2Nyb2xsU2l6ZSA9ICQuY2FtZWxDYXNlKFsnc2Nyb2xsJywgZGltZW5zaW9uXS5qb2luKCctJykpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDb2xsYXBzZS5UUkFOU0lUSU9OX0RVUkFUSU9OKVtkaW1lbnNpb25dKHRoaXMuJGVsZW1lbnRbMF1bc2Nyb2xsU2l6ZV0pXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8ICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSByZXR1cm5cblxuICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudCgnaGlkZS5icy5jb2xsYXBzZScpXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcblxuICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0oKSlbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZSBpbicpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXG4gICAgdGhpcy4kdHJpZ2dlclxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZWQnKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDFcblxuICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDBcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgIC50cmlnZ2VyKCdoaWRkZW4uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICBbZGltZW5zaW9uXSgwKVxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTilcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpc1t0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpID8gJ2hpZGUnIDogJ3Nob3cnXSgpXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuZ2V0UGFyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkKHRoaXMub3B0aW9ucy5wYXJlbnQpXG4gICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInICsgdGhpcy5vcHRpb25zLnBhcmVudCArICdcIl0nKVxuICAgICAgLmVhY2goJC5wcm94eShmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGdldFRhcmdldEZyb21UcmlnZ2VyKCRlbGVtZW50KSwgJGVsZW1lbnQpXG4gICAgICB9LCB0aGlzKSlcbiAgICAgIC5lbmQoKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uICgkZWxlbWVudCwgJHRyaWdnZXIpIHtcbiAgICB2YXIgaXNPcGVuID0gJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJylcblxuICAgICRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgJHRyaWdnZXJcbiAgICAgIC50b2dnbGVDbGFzcygnY29sbGFwc2VkJywgIWlzT3BlbilcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRyaWdnZXIpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciB0YXJnZXQgPSAkdHJpZ2dlci5hdHRyKCdkYXRhLXRhcmdldCcpXG4gICAgICB8fCAoaHJlZiA9ICR0cmlnZ2VyLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuXG4gICAgcmV0dXJuICQodGFyZ2V0KVxuICB9XG5cblxuICAvLyBDT0xMQVBTRSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhICYmIG9wdGlvbnMudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3Qob3B0aW9uKSkgb3B0aW9ucy50b2dnbGUgPSBmYWxzZVxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScsIChkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jb2xsYXBzZVxuXG4gICQuZm4uY29sbGFwc2UgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5jb2xsYXBzZS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlXG5cblxuICAvLyBDT0xMQVBTRSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uY29sbGFwc2Uubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmNvbGxhcHNlID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ09MTEFQU0UgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuXG4gICAgaWYgKCEkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIHZhciAkdGFyZ2V0ID0gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRoaXMpXG4gICAgdmFyIGRhdGEgICAgPSAkdGFyZ2V0LmRhdGEoJ2JzLmNvbGxhcHNlJylcbiAgICB2YXIgb3B0aW9uICA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0aGlzLmRhdGEoKVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uKVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBkcm9wZG93bi5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2Ryb3Bkb3duc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIERST1BET1dOIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBiYWNrZHJvcCA9ICcuZHJvcGRvd24tYmFja2Ryb3AnXG4gIHZhciB0b2dnbGUgICA9ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXSdcbiAgdmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAkKGVsZW1lbnQpLm9uKCdjbGljay5icy5kcm9wZG93bicsIHRoaXMudG9nZ2xlKVxuICB9XG5cbiAgRHJvcGRvd24uVkVSU0lPTiA9ICczLjMuNydcblxuICBmdW5jdGlvbiBnZXRQYXJlbnQoJHRoaXMpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiAvI1tBLVphLXpdLy50ZXN0KHNlbGVjdG9yKSAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gc2VsZWN0b3IgJiYgJChzZWxlY3RvcilcblxuICAgIHJldHVybiAkcGFyZW50ICYmICRwYXJlbnQubGVuZ3RoID8gJHBhcmVudCA6ICR0aGlzLnBhcmVudCgpXG4gIH1cblxuICBmdW5jdGlvbiBjbGVhck1lbnVzKGUpIHtcbiAgICBpZiAoZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm5cbiAgICAkKGJhY2tkcm9wKS5yZW1vdmUoKVxuICAgICQodG9nZ2xlKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgICAgICAgID0gJCh0aGlzKVxuICAgICAgdmFyICRwYXJlbnQgICAgICAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHsgcmVsYXRlZFRhcmdldDogdGhpcyB9XG5cbiAgICAgIGlmICghJHBhcmVudC5oYXNDbGFzcygnb3BlbicpKSByZXR1cm5cblxuICAgICAgaWYgKGUgJiYgZS50eXBlID09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSAmJiAkLmNvbnRhaW5zKCRwYXJlbnRbMF0sIGUudGFyZ2V0KSkgcmV0dXJuXG5cbiAgICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnaGlkZS5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgICR0aGlzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgJHBhcmVudC5yZW1vdmVDbGFzcygnb3BlbicpLnRyaWdnZXIoJC5FdmVudCgnaGlkZGVuLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG4gICAgfSlcbiAgfVxuXG4gIERyb3Bkb3duLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyA9ICQodGhpcylcblxuICAgIGlmICgkdGhpcy5pcygnLmRpc2FibGVkLCA6ZGlzYWJsZWQnKSkgcmV0dXJuXG5cbiAgICB2YXIgJHBhcmVudCAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgdmFyIGlzQWN0aXZlID0gJHBhcmVudC5oYXNDbGFzcygnb3BlbicpXG5cbiAgICBjbGVhck1lbnVzKClcblxuICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgISRwYXJlbnQuY2xvc2VzdCgnLm5hdmJhci1uYXYnKS5sZW5ndGgpIHtcbiAgICAgICAgLy8gaWYgbW9iaWxlIHdlIHVzZSBhIGJhY2tkcm9wIGJlY2F1c2UgY2xpY2sgZXZlbnRzIGRvbid0IGRlbGVnYXRlXG4gICAgICAgICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICAgICAgLmFkZENsYXNzKCdkcm9wZG93bi1iYWNrZHJvcCcpXG4gICAgICAgICAgLmluc2VydEFmdGVyKCQodGhpcykpXG4gICAgICAgICAgLm9uKCdjbGljaycsIGNsZWFyTWVudXMpXG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0geyByZWxhdGVkVGFyZ2V0OiB0aGlzIH1cbiAgICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnc2hvdy5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgICR0aGlzXG4gICAgICAgIC50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKVxuXG4gICAgICAkcGFyZW50XG4gICAgICAgIC50b2dnbGVDbGFzcygnb3BlbicpXG4gICAgICAgIC50cmlnZ2VyKCQuRXZlbnQoJ3Nob3duLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCEvKDM4fDQwfDI3fDMyKS8udGVzdChlLndoaWNoKSB8fCAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm5cblxuICAgIHZhciAkdGhpcyA9ICQodGhpcylcblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGlmICgkdGhpcy5pcygnLmRpc2FibGVkLCA6ZGlzYWJsZWQnKSkgcmV0dXJuXG5cbiAgICB2YXIgJHBhcmVudCAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgdmFyIGlzQWN0aXZlID0gJHBhcmVudC5oYXNDbGFzcygnb3BlbicpXG5cbiAgICBpZiAoIWlzQWN0aXZlICYmIGUud2hpY2ggIT0gMjcgfHwgaXNBY3RpdmUgJiYgZS53aGljaCA9PSAyNykge1xuICAgICAgaWYgKGUud2hpY2ggPT0gMjcpICRwYXJlbnQuZmluZCh0b2dnbGUpLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgIHJldHVybiAkdGhpcy50cmlnZ2VyKCdjbGljaycpXG4gICAgfVxuXG4gICAgdmFyIGRlc2MgPSAnIGxpOm5vdCguZGlzYWJsZWQpOnZpc2libGUgYSdcbiAgICB2YXIgJGl0ZW1zID0gJHBhcmVudC5maW5kKCcuZHJvcGRvd24tbWVudScgKyBkZXNjKVxuXG4gICAgaWYgKCEkaXRlbXMubGVuZ3RoKSByZXR1cm5cblxuICAgIHZhciBpbmRleCA9ICRpdGVtcy5pbmRleChlLnRhcmdldClcblxuICAgIGlmIChlLndoaWNoID09IDM4ICYmIGluZGV4ID4gMCkgICAgICAgICAgICAgICAgIGluZGV4LS0gICAgICAgICAvLyB1cFxuICAgIGlmIChlLndoaWNoID09IDQwICYmIGluZGV4IDwgJGl0ZW1zLmxlbmd0aCAtIDEpIGluZGV4KysgICAgICAgICAvLyBkb3duXG4gICAgaWYgKCF+aW5kZXgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAwXG5cbiAgICAkaXRlbXMuZXEoaW5kZXgpLnRyaWdnZXIoJ2ZvY3VzJylcbiAgfVxuXG5cbiAgLy8gRFJPUERPV04gUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy5kcm9wZG93bicpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nLCAoZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dLmNhbGwoJHRoaXMpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmRyb3Bkb3duXG5cbiAgJC5mbi5kcm9wZG93biAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmRyb3Bkb3duLkNvbnN0cnVjdG9yID0gRHJvcGRvd25cblxuXG4gIC8vIERST1BET1dOIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5kcm9wZG93bi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uZHJvcGRvd24gPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBBUFBMWSBUTyBTVEFOREFSRCBEUk9QRE9XTiBFTEVNRU5UU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsIGNsZWFyTWVudXMpXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsICcuZHJvcGRvd24gZm9ybScsIGZ1bmN0aW9uIChlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCkgfSlcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlKVxuICAgIC5vbigna2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaScsIHRvZ2dsZSwgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24pXG4gICAgLm9uKCdrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgJy5kcm9wZG93bi1tZW51JywgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IG1vZGFsLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jbW9kYWxzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gTU9EQUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgICAgICAgPSBvcHRpb25zXG4gICAgdGhpcy4kYm9keSAgICAgICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJGVsZW1lbnQgICAgICAgICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRkaWFsb2cgICAgICAgICAgICAgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5tb2RhbC1kaWFsb2cnKVxuICAgIHRoaXMuJGJhY2tkcm9wICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLmlzU2hvd24gICAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcmlnaW5hbEJvZHlQYWQgICAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggICAgICA9IDBcbiAgICB0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdGUpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLmZpbmQoJy5tb2RhbC1jb250ZW50JylcbiAgICAgICAgLmxvYWQodGhpcy5vcHRpb25zLnJlbW90ZSwgJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdsb2FkZWQuYnMubW9kYWwnKVxuICAgICAgICB9LCB0aGlzKSlcbiAgICB9XG4gIH1cblxuICBNb2RhbC5WRVJTSU9OICA9ICczLjMuNydcblxuICBNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwXG4gIE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBNb2RhbC5ERUZBVUxUUyA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBzaG93OiB0cnVlXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KF9yZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgZSAgICA9ICQuRXZlbnQoJ3Nob3cuYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmICh0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSB0cnVlXG5cbiAgICB0aGlzLmNoZWNrU2Nyb2xsYmFyKClcbiAgICB0aGlzLnNldFNjcm9sbGJhcigpXG4gICAgdGhpcy4kYm9keS5hZGRDbGFzcygnbW9kYWwtb3BlbicpXG5cbiAgICB0aGlzLmVzY2FwZSgpXG4gICAgdGhpcy5yZXNpemUoKVxuXG4gICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLCAkLnByb3h5KHRoaXMuaGlkZSwgdGhpcykpXG5cbiAgICB0aGlzLiRkaWFsb2cub24oJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vbmUoJ21vdXNldXAuZGlzbWlzcy5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGF0LiRlbGVtZW50KSkgdGhhdC5pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoYXQuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICBpZiAoIXRoYXQuJGVsZW1lbnQucGFyZW50KCkubGVuZ3RoKSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnQuYXBwZW5kVG8odGhhdC4kYm9keSkgLy8gZG9uJ3QgbW92ZSBtb2RhbHMgZG9tIHBvc2l0aW9uXG4gICAgICB9XG5cbiAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgLnNob3coKVxuICAgICAgICAuc2Nyb2xsVG9wKDApXG5cbiAgICAgIHRoYXQuYWRqdXN0RGlhbG9nKClcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICB0aGF0LmVuZm9yY2VGb2N1cygpXG5cbiAgICAgIHZhciBlID0gJC5FdmVudCgnc2hvd24uYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICAgIHRyYW5zaXRpb24gP1xuICAgICAgICB0aGF0LiRkaWFsb2cgLy8gd2FpdCBmb3IgbW9kYWwgdG8gc2xpZGUgaW5cbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGUgPSAkLkV2ZW50KCdoaWRlLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKCF0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSBmYWxzZVxuXG4gICAgdGhpcy5lc2NhcGUoKVxuICAgIHRoaXMucmVzaXplKClcblxuICAgICQoZG9jdW1lbnQpLm9mZignZm9jdXNpbi5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAucmVtb3ZlQ2xhc3MoJ2luJylcbiAgICAgIC5vZmYoJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnKVxuICAgICAgLm9mZignbW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGRpYWxvZy5vZmYoJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkodGhpcy5oaWRlTW9kYWwsIHRoaXMpKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgdGhpcy5oaWRlTW9kYWwoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmVuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKGRvY3VtZW50KVxuICAgICAgLm9mZignZm9jdXNpbi5icy5tb2RhbCcpIC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgLm9uKCdmb2N1c2luLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZG9jdW1lbnQgIT09IGUudGFyZ2V0ICYmXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50WzBdICE9PSBlLnRhcmdldCAmJlxuICAgICAgICAgICAgIXRoaXMuJGVsZW1lbnQuaGFzKGUudGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcykpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuZXNjYXBlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmtleWJvYXJkKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUud2hpY2ggPT0gMjcgJiYgdGhpcy5oaWRlKClcbiAgICAgIH0sIHRoaXMpKVxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93bikge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2tleWRvd24uZGlzbWlzcy5icy5tb2RhbCcpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duKSB7XG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5icy5tb2RhbCcsICQucHJveHkodGhpcy5oYW5kbGVVcGRhdGUsIHRoaXMpKVxuICAgIH0gZWxzZSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuYnMubW9kYWwnKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlTW9kYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdGhpcy4kZWxlbWVudC5oaWRlKClcbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGJvZHkucmVtb3ZlQ2xhc3MoJ21vZGFsLW9wZW4nKVxuICAgICAgdGhhdC5yZXNldEFkanVzdG1lbnRzKClcbiAgICAgIHRoYXQucmVzZXRTY3JvbGxiYXIoKVxuICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdoaWRkZW4uYnMubW9kYWwnKVxuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kYmFja2Ryb3AgJiYgdGhpcy4kYmFja2Ryb3AucmVtb3ZlKClcbiAgICB0aGlzLiRiYWNrZHJvcCA9IG51bGxcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5iYWNrZHJvcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBhbmltYXRlID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID8gJ2ZhZGUnIDogJydcblxuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmJhY2tkcm9wKSB7XG4gICAgICB2YXIgZG9BbmltYXRlID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgYW5pbWF0ZVxuXG4gICAgICB0aGlzLiRiYWNrZHJvcCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICAgIC5hZGRDbGFzcygnbW9kYWwtYmFja2Ryb3AgJyArIGFuaW1hdGUpXG4gICAgICAgIC5hcHBlbmRUbyh0aGlzLiRib2R5KVxuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgdGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuXG4gICAgICAgIHRoaXMub3B0aW9ucy5iYWNrZHJvcCA9PSAnc3RhdGljJ1xuICAgICAgICAgID8gdGhpcy4kZWxlbWVudFswXS5mb2N1cygpXG4gICAgICAgICAgOiB0aGlzLmhpZGUoKVxuICAgICAgfSwgdGhpcykpXG5cbiAgICAgIGlmIChkb0FuaW1hdGUpIHRoaXMuJGJhY2tkcm9wWzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuXG4gICAgICB0aGlzLiRiYWNrZHJvcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm5cblxuICAgICAgZG9BbmltYXRlID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFjaylcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjYWxsYmFjaygpXG5cbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24gJiYgdGhpcy4kYmFja2Ryb3ApIHtcbiAgICAgIHRoaXMuJGJhY2tkcm9wLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAgIHZhciBjYWxsYmFja1JlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5yZW1vdmVCYWNrZHJvcCgpXG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgIHRoaXMuJGJhY2tkcm9wXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2tSZW1vdmUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgY2FsbGJhY2tSZW1vdmUoKVxuXG4gICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIC8vIHRoZXNlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcblxuICBNb2RhbC5wcm90b3R5cGUuaGFuZGxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWRqdXN0RGlhbG9nKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5hZGp1c3REaWFsb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1vZGFsSXNPdmVyZmxvd2luZyA9IHRoaXMuJGVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgcGFkZGluZ0xlZnQ6ICAhdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiBtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgIW1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJ1xuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICBwYWRkaW5nTGVmdDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6ICcnXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5jaGVja1Njcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnVsbFdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICBpZiAoIWZ1bGxXaW5kb3dXaWR0aCkgeyAvLyB3b3JrYXJvdW5kIGZvciBtaXNzaW5nIHdpbmRvdy5pbm5lcldpZHRoIGluIElFOFxuICAgICAgdmFyIGRvY3VtZW50RWxlbWVudFJlY3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGZ1bGxXaW5kb3dXaWR0aCA9IGRvY3VtZW50RWxlbWVudFJlY3QucmlnaHQgLSBNYXRoLmFicyhkb2N1bWVudEVsZW1lbnRSZWN0LmxlZnQpXG4gICAgfVxuICAgIHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgZnVsbFdpbmRvd1dpZHRoXG4gICAgdGhpcy5zY3JvbGxiYXJXaWR0aCA9IHRoaXMubWVhc3VyZVNjcm9sbGJhcigpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBib2R5UGFkID0gcGFyc2VJbnQoKHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCksIDEwKVxuICAgIHRoaXMub3JpZ2luYWxCb2R5UGFkID0gZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgfHwgJydcbiAgICBpZiAodGhpcy5ib2R5SXNPdmVyZmxvd2luZykgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBib2R5UGFkICsgdGhpcy5zY3JvbGxiYXJXaWR0aClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIHRoaXMub3JpZ2luYWxCb2R5UGFkKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm1lYXN1cmVTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7IC8vIHRoeCB3YWxzaFxuICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnXG4gICAgdGhpcy4kYm9keS5hcHBlbmQoc2Nyb2xsRGl2KVxuICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aFxuICAgIHRoaXMuJGJvZHlbMF0ucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KVxuICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aFxuICB9XG5cblxuICAvLyBNT0RBTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24sIF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMubW9kYWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgTW9kYWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMubW9kYWwnLCAoZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKF9yZWxhdGVkVGFyZ2V0KVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5zaG93KSBkYXRhLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLm1vZGFsXG5cbiAgJC5mbi5tb2RhbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLm1vZGFsLkNvbnN0cnVjdG9yID0gTW9kYWxcblxuXG4gIC8vIE1PREFMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5tb2RhbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4ubW9kYWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBNT0RBTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5tb2RhbC5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyIGhyZWYgICAgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB2YXIgb3B0aW9uICA9ICR0YXJnZXQuZGF0YSgnYnMubW9kYWwnKSA/ICd0b2dnbGUnIDogJC5leHRlbmQoeyByZW1vdGU6ICEvIy8udGVzdChocmVmKSAmJiBocmVmIH0sICR0YXJnZXQuZGF0YSgpLCAkdGhpcy5kYXRhKCkpXG5cbiAgICBpZiAoJHRoaXMuaXMoJ2EnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAkdGFyZ2V0Lm9uZSgnc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybiAvLyBvbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICAkdGFyZ2V0Lm9uZSgnaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkdGhpcy5pcygnOnZpc2libGUnKSAmJiAkdGhpcy50cmlnZ2VyKCdmb2N1cycpXG4gICAgICB9KVxuICAgIH0pXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uLCB0aGlzKVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0b29sdGlwLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdG9vbHRpcFxuICogSW5zcGlyZWQgYnkgdGhlIG9yaWdpbmFsIGpRdWVyeS50aXBzeSBieSBKYXNvbiBGcmFtZVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFRPT0xUSVAgUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBUb29sdGlwID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcHRpb25zICAgID0gbnVsbFxuICAgIHRoaXMuZW5hYmxlZCAgICA9IG51bGxcbiAgICB0aGlzLnRpbWVvdXQgICAgPSBudWxsXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuICAgIHRoaXMuJGVsZW1lbnQgICA9IG51bGxcbiAgICB0aGlzLmluU3RhdGUgICAgPSBudWxsXG5cbiAgICB0aGlzLmluaXQoJ3Rvb2x0aXAnLCBlbGVtZW50LCBvcHRpb25zKVxuICB9XG5cbiAgVG9vbHRpcC5WRVJTSU9OICA9ICczLjMuNydcblxuICBUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBUb29sdGlwLkRFRkFVTFRTID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIHZpZXdwb3J0OiB7XG4gICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgcGFkZGluZzogMFxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAodHlwZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuZW5hYmxlZCAgID0gdHJ1ZVxuICAgIHRoaXMudHlwZSAgICAgID0gdHlwZVxuICAgIHRoaXMuJGVsZW1lbnQgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgID0gdGhpcy5nZXRPcHRpb25zKG9wdGlvbnMpXG4gICAgdGhpcy4kdmlld3BvcnQgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgJCgkLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLnZpZXdwb3J0KSA/IHRoaXMub3B0aW9ucy52aWV3cG9ydC5jYWxsKHRoaXMsIHRoaXMuJGVsZW1lbnQpIDogKHRoaXMub3B0aW9ucy52aWV3cG9ydC5zZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMudmlld3BvcnQpKVxuICAgIHRoaXMuaW5TdGF0ZSAgID0geyBjbGljazogZmFsc2UsIGhvdmVyOiBmYWxzZSwgZm9jdXM6IGZhbHNlIH1cblxuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdIGluc3RhbmNlb2YgZG9jdW1lbnQuY29uc3RydWN0b3IgJiYgIXRoaXMub3B0aW9ucy5zZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgc2VsZWN0b3JgIG9wdGlvbiBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGluaXRpYWxpemluZyAnICsgdGhpcy50eXBlICsgJyBvbiB0aGUgd2luZG93LmRvY3VtZW50IG9iamVjdCEnKVxuICAgIH1cblxuICAgIHZhciB0cmlnZ2VycyA9IHRoaXMub3B0aW9ucy50cmlnZ2VyLnNwbGl0KCcgJylcblxuICAgIGZvciAodmFyIGkgPSB0cmlnZ2Vycy5sZW5ndGg7IGktLTspIHtcbiAgICAgIHZhciB0cmlnZ2VyID0gdHJpZ2dlcnNbaV1cblxuICAgICAgaWYgKHRyaWdnZXIgPT0gJ2NsaWNrJykge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy50b2dnbGUsIHRoaXMpKVxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9ICdtYW51YWwnKSB7XG4gICAgICAgIHZhciBldmVudEluICA9IHRyaWdnZXIgPT0gJ2hvdmVyJyA/ICdtb3VzZWVudGVyJyA6ICdmb2N1c2luJ1xuICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VsZWF2ZScgOiAnZm9jdXNvdXQnXG5cbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudEluICArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMuZW50ZXIsIHRoaXMpKVxuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKGV2ZW50T3V0ICsgJy4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy5sZWF2ZSwgdGhpcykpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLnNlbGVjdG9yID9cbiAgICAgICh0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgeyB0cmlnZ2VyOiAnbWFudWFsJywgc2VsZWN0b3I6ICcnIH0pKSA6XG4gICAgICB0aGlzLmZpeFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUb29sdGlwLkRFRkFVTFRTXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuZ2V0RGVmYXVsdHMoKSwgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpXG5cbiAgICBpZiAob3B0aW9ucy5kZWxheSAmJiB0eXBlb2Ygb3B0aW9ucy5kZWxheSA9PSAnbnVtYmVyJykge1xuICAgICAgb3B0aW9ucy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogb3B0aW9ucy5kZWxheSxcbiAgICAgICAgaGlkZTogb3B0aW9ucy5kZWxheVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWxlZ2F0ZU9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgID0ge31cbiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmdldERlZmF1bHRzKClcblxuICAgIHRoaXMuX29wdGlvbnMgJiYgJC5lYWNoKHRoaXMuX29wdGlvbnMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoZGVmYXVsdHNba2V5XSAhPSB2YWx1ZSkgb3B0aW9uc1trZXldID0gdmFsdWVcbiAgICB9KVxuXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA/XG4gICAgICBvYmogOiAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICBzZWxmID0gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgIH1cblxuICAgIGlmIChvYmogaW5zdGFuY2VvZiAkLkV2ZW50KSB7XG4gICAgICBzZWxmLmluU3RhdGVbb2JqLnR5cGUgPT0gJ2ZvY3VzaW4nID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChzZWxmLnRpcCgpLmhhc0NsYXNzKCdpbicpIHx8IHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSB7XG4gICAgICBzZWxmLmhvdmVyU3RhdGUgPSAnaW4nXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ2luJ1xuXG4gICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5zaG93KSByZXR1cm4gc2VsZi5zaG93KClcblxuICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSBzZWxmLnNob3coKVxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5zaG93KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaXNJblN0YXRlVHJ1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5pblN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5pblN0YXRlW2tleV0pIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgc2VsZiA9IG9iaiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IgP1xuICAgICAgb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICghc2VsZikge1xuICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iai5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c291dCcgPyAnZm9jdXMnIDogJ2hvdmVyJ10gPSBmYWxzZVxuICAgIH1cblxuICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgcmV0dXJuXG5cbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuXG4gICAgc2VsZi5ob3ZlclN0YXRlID0gJ291dCdcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuaGlkZSkgcmV0dXJuIHNlbGYuaGlkZSgpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ291dCcpIHNlbGYuaGlkZSgpXG4gICAgfSwgc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlID0gJC5FdmVudCgnc2hvdy5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKHRoaXMuaGFzQ29udGVudCgpICYmIHRoaXMuZW5hYmxlZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICAgIHZhciBpbkRvbSA9ICQuY29udGFpbnModGhpcy4kZWxlbWVudFswXS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy4kZWxlbWVudFswXSlcbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpbkRvbSkgcmV0dXJuXG4gICAgICB2YXIgdGhhdCA9IHRoaXNcblxuICAgICAgdmFyICR0aXAgPSB0aGlzLnRpcCgpXG5cbiAgICAgIHZhciB0aXBJZCA9IHRoaXMuZ2V0VUlEKHRoaXMudHlwZSlcblxuICAgICAgdGhpcy5zZXRDb250ZW50KClcbiAgICAgICR0aXAuYXR0cignaWQnLCB0aXBJZClcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScsIHRpcElkKVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikgJHRpcC5hZGRDbGFzcygnZmFkZScpXG5cbiAgICAgIHZhciBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5vcHRpb25zLnBsYWNlbWVudCA9PSAnZnVuY3Rpb24nID9cbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudC5jYWxsKHRoaXMsICR0aXBbMF0sIHRoaXMuJGVsZW1lbnRbMF0pIDpcbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudFxuXG4gICAgICB2YXIgYXV0b1Rva2VuID0gL1xccz9hdXRvP1xccz8vaVxuICAgICAgdmFyIGF1dG9QbGFjZSA9IGF1dG9Ub2tlbi50ZXN0KHBsYWNlbWVudClcbiAgICAgIGlmIChhdXRvUGxhY2UpIHBsYWNlbWVudCA9IHBsYWNlbWVudC5yZXBsYWNlKGF1dG9Ub2tlbiwgJycpIHx8ICd0b3AnXG5cbiAgICAgICR0aXBcbiAgICAgICAgLmRldGFjaCgpXG4gICAgICAgIC5jc3MoeyB0b3A6IDAsIGxlZnQ6IDAsIGRpc3BsYXk6ICdibG9jaycgfSlcbiAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcbiAgICAgICAgLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHRoaXMpXG5cbiAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIgPyAkdGlwLmFwcGVuZFRvKHRoaXMub3B0aW9ucy5jb250YWluZXIpIDogJHRpcC5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbnNlcnRlZC5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgICB2YXIgcG9zICAgICAgICAgID0gdGhpcy5nZXRQb3NpdGlvbigpXG4gICAgICB2YXIgYWN0dWFsV2lkdGggID0gJHRpcFswXS5vZmZzZXRXaWR0aFxuICAgICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgdmFyIG9yZ1BsYWNlbWVudCA9IHBsYWNlbWVudFxuICAgICAgICB2YXIgdmlld3BvcnREaW0gPSB0aGlzLmdldFBvc2l0aW9uKHRoaXMuJHZpZXdwb3J0KVxuXG4gICAgICAgIHBsYWNlbWVudCA9IHBsYWNlbWVudCA9PSAnYm90dG9tJyAmJiBwb3MuYm90dG9tICsgYWN0dWFsSGVpZ2h0ID4gdmlld3BvcnREaW0uYm90dG9tID8gJ3RvcCcgICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgJiYgcG9zLnRvcCAgICAtIGFjdHVhbEhlaWdodCA8IHZpZXdwb3J0RGltLnRvcCAgICA/ICdib3R0b20nIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICdyaWdodCcgICYmIHBvcy5yaWdodCAgKyBhY3R1YWxXaWR0aCAgPiB2aWV3cG9ydERpbS53aWR0aCAgPyAnbGVmdCcgICA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAnbGVmdCcgICAmJiBwb3MubGVmdCAgIC0gYWN0dWFsV2lkdGggIDwgdmlld3BvcnREaW0ubGVmdCAgID8gJ3JpZ2h0JyAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRcblxuICAgICAgICAkdGlwXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKG9yZ1BsYWNlbWVudClcbiAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KVxuICAgICAgfVxuXG4gICAgICB2YXIgY2FsY3VsYXRlZE9mZnNldCA9IHRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChjYWxjdWxhdGVkT2Zmc2V0LCBwbGFjZW1lbnQpXG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gdGhhdC5ob3ZlclN0YXRlXG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignc2hvd24uYnMuJyArIHRoYXQudHlwZSlcbiAgICAgICAgdGhhdC5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PSAnb3V0JykgdGhhdC5sZWF2ZSh0aGF0KVxuICAgICAgfVxuXG4gICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiR0aXAuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgICR0aXBcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5hcHBseVBsYWNlbWVudCA9IGZ1bmN0aW9uIChvZmZzZXQsIHBsYWNlbWVudCkge1xuICAgIHZhciAkdGlwICAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgaGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIC8vIG1hbnVhbGx5IHJlYWQgbWFyZ2lucyBiZWNhdXNlIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpbmNsdWRlcyBkaWZmZXJlbmNlXG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tdG9wJyksIDEwKVxuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VJbnQoJHRpcC5jc3MoJ21hcmdpbi1sZWZ0JyksIDEwKVxuXG4gICAgLy8gd2UgbXVzdCBjaGVjayBmb3IgTmFOIGZvciBpZSA4LzlcbiAgICBpZiAoaXNOYU4obWFyZ2luVG9wKSkgIG1hcmdpblRvcCAgPSAwXG4gICAgaWYgKGlzTmFOKG1hcmdpbkxlZnQpKSBtYXJnaW5MZWZ0ID0gMFxuXG4gICAgb2Zmc2V0LnRvcCAgKz0gbWFyZ2luVG9wXG4gICAgb2Zmc2V0LmxlZnQgKz0gbWFyZ2luTGVmdFxuXG4gICAgLy8gJC5mbi5vZmZzZXQgZG9lc24ndCByb3VuZCBwaXhlbCB2YWx1ZXNcbiAgICAvLyBzbyB3ZSB1c2Ugc2V0T2Zmc2V0IGRpcmVjdGx5IHdpdGggb3VyIG93biBmdW5jdGlvbiBCLTBcbiAgICAkLm9mZnNldC5zZXRPZmZzZXQoJHRpcFswXSwgJC5leHRlbmQoe1xuICAgICAgdXNpbmc6IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAkdGlwLmNzcyh7XG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKHByb3BzLnRvcCksXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChwcm9wcy5sZWZ0KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sIG9mZnNldCksIDApXG5cbiAgICAkdGlwLmFkZENsYXNzKCdpbicpXG5cbiAgICAvLyBjaGVjayB0byBzZWUgaWYgcGxhY2luZyB0aXAgaW4gbmV3IG9mZnNldCBjYXVzZWQgdGhlIHRpcCB0byByZXNpemUgaXRzZWxmXG4gICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICB2YXIgYWN0dWFsSGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcblxuICAgIGlmIChwbGFjZW1lbnQgPT0gJ3RvcCcgJiYgYWN0dWFsSGVpZ2h0ICE9IGhlaWdodCkge1xuICAgICAgb2Zmc2V0LnRvcCA9IG9mZnNldC50b3AgKyBoZWlnaHQgLSBhY3R1YWxIZWlnaHRcbiAgICB9XG5cbiAgICB2YXIgZGVsdGEgPSB0aGlzLmdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YShwbGFjZW1lbnQsIG9mZnNldCwgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgIGlmIChkZWx0YS5sZWZ0KSBvZmZzZXQubGVmdCArPSBkZWx0YS5sZWZ0XG4gICAgZWxzZSBvZmZzZXQudG9wICs9IGRlbHRhLnRvcFxuXG4gICAgdmFyIGlzVmVydGljYWwgICAgICAgICAgPSAvdG9wfGJvdHRvbS8udGVzdChwbGFjZW1lbnQpXG4gICAgdmFyIGFycm93RGVsdGEgICAgICAgICAgPSBpc1ZlcnRpY2FsID8gZGVsdGEubGVmdCAqIDIgLSB3aWR0aCArIGFjdHVhbFdpZHRoIDogZGVsdGEudG9wICogMiAtIGhlaWdodCArIGFjdHVhbEhlaWdodFxuICAgIHZhciBhcnJvd09mZnNldFBvc2l0aW9uID0gaXNWZXJ0aWNhbCA/ICdvZmZzZXRXaWR0aCcgOiAnb2Zmc2V0SGVpZ2h0J1xuXG4gICAgJHRpcC5vZmZzZXQob2Zmc2V0KVxuICAgIHRoaXMucmVwbGFjZUFycm93KGFycm93RGVsdGEsICR0aXBbMF1bYXJyb3dPZmZzZXRQb3NpdGlvbl0sIGlzVmVydGljYWwpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5yZXBsYWNlQXJyb3cgPSBmdW5jdGlvbiAoZGVsdGEsIGRpbWVuc2lvbiwgaXNWZXJ0aWNhbCkge1xuICAgIHRoaXMuYXJyb3coKVxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCcsIDUwICogKDEgLSBkZWx0YSAvIGRpbWVuc2lvbikgKyAnJScpXG4gICAgICAuY3NzKGlzVmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JywgJycpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICA9IHRoaXMudGlwKClcbiAgICB2YXIgdGl0bGUgPSB0aGlzLmdldFRpdGxlKClcblxuICAgICR0aXAuZmluZCgnLnRvb2x0aXAtaW5uZXInKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnZmFkZSBpbiB0b3AgYm90dG9tIGxlZnQgcmlnaHQnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciAkdGlwID0gJCh0aGlzLiR0aXApXG4gICAgdmFyIGUgICAgPSAkLkV2ZW50KCdoaWRlLmJzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIGlmICh0aGF0LmhvdmVyU3RhdGUgIT0gJ2luJykgJHRpcC5kZXRhY2goKVxuICAgICAgaWYgKHRoYXQuJGVsZW1lbnQpIHsgLy8gVE9ETzogQ2hlY2sgd2hldGhlciBndWFyZGluZyB0aGlzIGNvZGUgd2l0aCB0aGlzIGBpZmAgaXMgcmVhbGx5IG5lY2Vzc2FyeS5cbiAgICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICB9XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgJHRpcFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgY29tcGxldGUoKVxuXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmZpeFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICBpZiAoJGUuYXR0cigndGl0bGUnKSB8fCB0eXBlb2YgJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpICE9ICdzdHJpbmcnKSB7XG4gICAgICAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgJGUuYXR0cigndGl0bGUnKSB8fCAnJykuYXR0cigndGl0bGUnLCAnJylcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgJGVsZW1lbnQgICA9ICRlbGVtZW50IHx8IHRoaXMuJGVsZW1lbnRcblxuICAgIHZhciBlbCAgICAgPSAkZWxlbWVudFswXVxuICAgIHZhciBpc0JvZHkgPSBlbC50YWdOYW1lID09ICdCT0RZJ1xuXG4gICAgdmFyIGVsUmVjdCAgICA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgaWYgKGVsUmVjdC53aWR0aCA9PSBudWxsKSB7XG4gICAgICAvLyB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBtaXNzaW5nIGluIElFOCwgc28gY29tcHV0ZSB0aGVtIG1hbnVhbGx5OyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8xNDA5M1xuICAgICAgZWxSZWN0ID0gJC5leHRlbmQoe30sIGVsUmVjdCwgeyB3aWR0aDogZWxSZWN0LnJpZ2h0IC0gZWxSZWN0LmxlZnQsIGhlaWdodDogZWxSZWN0LmJvdHRvbSAtIGVsUmVjdC50b3AgfSlcbiAgICB9XG4gICAgdmFyIGlzU3ZnID0gd2luZG93LlNWR0VsZW1lbnQgJiYgZWwgaW5zdGFuY2VvZiB3aW5kb3cuU1ZHRWxlbWVudFxuICAgIC8vIEF2b2lkIHVzaW5nICQub2Zmc2V0KCkgb24gU1ZHcyBzaW5jZSBpdCBnaXZlcyBpbmNvcnJlY3QgcmVzdWx0cyBpbiBqUXVlcnkgMy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8yMDI4MFxuICAgIHZhciBlbE9mZnNldCAgPSBpc0JvZHkgPyB7IHRvcDogMCwgbGVmdDogMCB9IDogKGlzU3ZnID8gbnVsbCA6ICRlbGVtZW50Lm9mZnNldCgpKVxuICAgIHZhciBzY3JvbGwgICAgPSB7IHNjcm9sbDogaXNCb2R5ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA6ICRlbGVtZW50LnNjcm9sbFRvcCgpIH1cbiAgICB2YXIgb3V0ZXJEaW1zID0gaXNCb2R5ID8geyB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCksIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpIH0gOiBudWxsXG5cbiAgICByZXR1cm4gJC5leHRlbmQoe30sIGVsUmVjdCwgc2Nyb2xsLCBvdXRlckRpbXMsIGVsT2Zmc2V0KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Q2FsY3VsYXRlZE9mZnNldCA9IGZ1bmN0aW9uIChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkge1xuICAgIHJldHVybiBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQsICAgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgPyB7IHRvcDogcG9zLnRvcCAtIGFjdHVhbEhlaWdodCwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwgbGVmdDogcG9zLmxlZnQgLSBhY3R1YWxXaWR0aCB9IDpcbiAgICAgICAgLyogcGxhY2VtZW50ID09ICdyaWdodCcgKi8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIH1cblxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgdmFyIGRlbHRhID0geyB0b3A6IDAsIGxlZnQ6IDAgfVxuICAgIGlmICghdGhpcy4kdmlld3BvcnQpIHJldHVybiBkZWx0YVxuXG4gICAgdmFyIHZpZXdwb3J0UGFkZGluZyA9IHRoaXMub3B0aW9ucy52aWV3cG9ydCAmJiB0aGlzLm9wdGlvbnMudmlld3BvcnQucGFkZGluZyB8fCAwXG4gICAgdmFyIHZpZXdwb3J0RGltZW5zaW9ucyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpXG5cbiAgICBpZiAoL3JpZ2h0fGxlZnQvLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdmFyIHRvcEVkZ2VPZmZzZXQgICAgPSBwb3MudG9wIC0gdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbFxuICAgICAgdmFyIGJvdHRvbUVkZ2VPZmZzZXQgPSBwb3MudG9wICsgdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbCArIGFjdHVhbEhlaWdodFxuICAgICAgaWYgKHRvcEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMudG9wKSB7IC8vIHRvcCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wIC0gdG9wRWRnZU9mZnNldFxuICAgICAgfSBlbHNlIGlmIChib3R0b21FZGdlT2Zmc2V0ID4gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQpIHsgLy8gYm90dG9tIG92ZXJmbG93XG4gICAgICAgIGRlbHRhLnRvcCA9IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgKyB2aWV3cG9ydERpbWVuc2lvbnMuaGVpZ2h0IC0gYm90dG9tRWRnZU9mZnNldFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVmdEVkZ2VPZmZzZXQgID0gcG9zLmxlZnQgLSB2aWV3cG9ydFBhZGRpbmdcbiAgICAgIHZhciByaWdodEVkZ2VPZmZzZXQgPSBwb3MubGVmdCArIHZpZXdwb3J0UGFkZGluZyArIGFjdHVhbFdpZHRoXG4gICAgICBpZiAobGVmdEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCkgeyAvLyBsZWZ0IG92ZXJmbG93XG4gICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCAtIGxlZnRFZGdlT2Zmc2V0XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy5yaWdodCkgeyAvLyByaWdodCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgKyB2aWV3cG9ydERpbWVuc2lvbnMud2lkdGggLSByaWdodEVkZ2VPZmZzZXRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsdGFcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aXRsZVxuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgbyAgPSB0aGlzLm9wdGlvbnNcblxuICAgIHRpdGxlID0gJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpXG4gICAgICB8fCAodHlwZW9mIG8udGl0bGUgPT0gJ2Z1bmN0aW9uJyA/IG8udGl0bGUuY2FsbCgkZVswXSkgOiAgby50aXRsZSlcblxuICAgIHJldHVybiB0aXRsZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VUlEID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGRvIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogMTAwMDAwMClcbiAgICB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcbiAgICByZXR1cm4gcHJlZml4XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLiR0aXApIHtcbiAgICAgIHRoaXMuJHRpcCA9ICQodGhpcy5vcHRpb25zLnRlbXBsYXRlKVxuICAgICAgaWYgKHRoaXMuJHRpcC5sZW5ndGggIT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy50eXBlICsgJyBgdGVtcGxhdGVgIG9wdGlvbiBtdXN0IGNvbnNpc3Qgb2YgZXhhY3RseSAxIHRvcC1sZXZlbCBlbGVtZW50IScpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiR0aXBcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy50b29sdGlwLWFycm93JykpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBzZWxmID0gdGhpc1xuICAgIGlmIChlKSB7XG4gICAgICBzZWxmID0gJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG4gICAgICBpZiAoIXNlbGYpIHtcbiAgICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUuY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGUpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZS5jbGljayA9ICFzZWxmLmluU3RhdGUuY2xpY2tcbiAgICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgc2VsZi5lbnRlcihzZWxmKVxuICAgICAgZWxzZSBzZWxmLmxlYXZlKHNlbGYpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgPyBzZWxmLmxlYXZlKHNlbGYpIDogc2VsZi5lbnRlcihzZWxmKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dClcbiAgICB0aGlzLmhpZGUoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vZmYoJy4nICsgdGhhdC50eXBlKS5yZW1vdmVEYXRhKCdicy4nICsgdGhhdC50eXBlKVxuICAgICAgaWYgKHRoYXQuJHRpcCkge1xuICAgICAgICB0aGF0LiR0aXAuZGV0YWNoKClcbiAgICAgIH1cbiAgICAgIHRoYXQuJHRpcCA9IG51bGxcbiAgICAgIHRoYXQuJGFycm93ID0gbnVsbFxuICAgICAgdGhhdC4kdmlld3BvcnQgPSBudWxsXG4gICAgICB0aGF0LiRlbGVtZW50ID0gbnVsbFxuICAgIH0pXG4gIH1cblxuXG4gIC8vIFRPT0xUSVAgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy50b29sdGlwJylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3Qob3B0aW9uKSkgcmV0dXJuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRvb2x0aXAnLCAoZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi50b29sdGlwXG5cbiAgJC5mbi50b29sdGlwICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4udG9vbHRpcC5Db25zdHJ1Y3RvciA9IFRvb2x0aXBcblxuXG4gIC8vIFRPT0xUSVAgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4udG9vbHRpcC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udG9vbHRpcCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogcG9wb3Zlci5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3BvcG92ZXJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gUE9QT1ZFUiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuaW5pdCgncG9wb3ZlcicsIGVsZW1lbnQsIG9wdGlvbnMpXG4gIH1cblxuICBpZiAoISQuZm4udG9vbHRpcCkgdGhyb3cgbmV3IEVycm9yKCdQb3BvdmVyIHJlcXVpcmVzIHRvb2x0aXAuanMnKVxuXG4gIFBvcG92ZXIuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgUG9wb3Zlci5ERUZBVUxUUyA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IuREVGQVVMVFMsIHtcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICBjb250ZW50OiAnJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLXRpdGxlXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1jb250ZW50XCI+PC9kaXY+PC9kaXY+J1xuICB9KVxuXG5cbiAgLy8gTk9URTogUE9QT1ZFUiBFWFRFTkRTIHRvb2x0aXAuanNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBQb3BvdmVyLnByb3RvdHlwZSA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IucHJvdG90eXBlKVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9wb3ZlclxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQb3BvdmVyLkRFRkFVTFRTXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICAgID0gdGhpcy50aXAoKVxuICAgIHZhciB0aXRsZSAgID0gdGhpcy5nZXRUaXRsZSgpXG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldENvbnRlbnQoKVxuXG4gICAgJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpW3RoaXMub3B0aW9ucy5odG1sID8gJ2h0bWwnIDogJ3RleHQnXSh0aXRsZSlcbiAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLWNvbnRlbnQnKS5jaGlsZHJlbigpLmRldGFjaCgpLmVuZCgpWyAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG4gICAgICB0aGlzLm9wdGlvbnMuaHRtbCA/ICh0eXBlb2YgY29udGVudCA9PSAnc3RyaW5nJyA/ICdodG1sJyA6ICdhcHBlbmQnKSA6ICd0ZXh0J1xuICAgIF0oY29udGVudClcblxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0IGluJylcblxuICAgIC8vIElFOCBkb2Vzbid0IGFjY2VwdCBoaWRpbmcgdmlhIHRoZSBgOmVtcHR5YCBwc2V1ZG8gc2VsZWN0b3IsIHdlIGhhdmUgdG8gZG9cbiAgICAvLyB0aGlzIG1hbnVhbGx5IGJ5IGNoZWNraW5nIHRoZSBjb250ZW50cy5cbiAgICBpZiAoISR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5odG1sKCkpICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5oaWRlKClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLmdldENvbnRlbnQoKVxuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIG8gID0gdGhpcy5vcHRpb25zXG5cbiAgICByZXR1cm4gJGUuYXR0cignZGF0YS1jb250ZW50JylcbiAgICAgIHx8ICh0eXBlb2Ygby5jb250ZW50ID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgby5jb250ZW50LmNhbGwoJGVbMF0pIDpcbiAgICAgICAgICAgIG8uY29udGVudClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy5hcnJvdycpKVxuICB9XG5cblxuICAvLyBQT1BPVkVSIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5wb3BvdmVyJywgKGRhdGEgPSBuZXcgUG9wb3Zlcih0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ucG9wb3ZlclxuXG4gICQuZm4ucG9wb3ZlciAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnBvcG92ZXIuQ29uc3RydWN0b3IgPSBQb3BvdmVyXG5cblxuICAvLyBQT1BPVkVSIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnBvcG92ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnBvcG92ZXIgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHNjcm9sbHNweS5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3Njcm9sbHNweVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFNDUk9MTFNQWSBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gU2Nyb2xsU3B5KGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRib2R5ICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQgPSAkKGVsZW1lbnQpLmlzKGRvY3VtZW50LmJvZHkpID8gJCh3aW5kb3cpIDogJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgICAgICAgPSAkLmV4dGVuZCh7fSwgU2Nyb2xsU3B5LkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuc2VsZWN0b3IgICAgICAgPSAodGhpcy5vcHRpb25zLnRhcmdldCB8fCAnJykgKyAnIC5uYXYgbGkgPiBhJ1xuICAgIHRoaXMub2Zmc2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgICAgPSBbXVxuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ICAgPSBudWxsXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgICA9IDBcblxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQub24oJ3Njcm9sbC5icy5zY3JvbGxzcHknLCAkLnByb3h5KHRoaXMucHJvY2VzcywgdGhpcykpXG4gICAgdGhpcy5yZWZyZXNoKClcbiAgICB0aGlzLnByb2Nlc3MoKVxuICB9XG5cbiAgU2Nyb2xsU3B5LlZFUlNJT04gID0gJzMuMy43J1xuXG4gIFNjcm9sbFNweS5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDEwXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kc2Nyb2xsRWxlbWVudFswXS5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgodGhpcy4kYm9keVswXS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgICAgICAgICAgPSB0aGlzXG4gICAgdmFyIG9mZnNldE1ldGhvZCAgPSAnb2Zmc2V0J1xuICAgIHZhciBvZmZzZXRCYXNlICAgID0gMFxuXG4gICAgdGhpcy5vZmZzZXRzICAgICAgPSBbXVxuICAgIHRoaXMudGFyZ2V0cyAgICAgID0gW11cbiAgICB0aGlzLnNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcblxuICAgIGlmICghJC5pc1dpbmRvdyh0aGlzLiRzY3JvbGxFbGVtZW50WzBdKSkge1xuICAgICAgb2Zmc2V0TWV0aG9kID0gJ3Bvc2l0aW9uJ1xuICAgICAgb2Zmc2V0QmFzZSAgID0gdGhpcy4kc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AoKVxuICAgIH1cblxuICAgIHRoaXMuJGJvZHlcbiAgICAgIC5maW5kKHRoaXMuc2VsZWN0b3IpXG4gICAgICAubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbCAgID0gJCh0aGlzKVxuICAgICAgICB2YXIgaHJlZiAgPSAkZWwuZGF0YSgndGFyZ2V0JykgfHwgJGVsLmF0dHIoJ2hyZWYnKVxuICAgICAgICB2YXIgJGhyZWYgPSAvXiMuLy50ZXN0KGhyZWYpICYmICQoaHJlZilcblxuICAgICAgICByZXR1cm4gKCRocmVmXG4gICAgICAgICAgJiYgJGhyZWYubGVuZ3RoXG4gICAgICAgICAgJiYgJGhyZWYuaXMoJzp2aXNpYmxlJylcbiAgICAgICAgICAmJiBbWyRocmVmW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCBocmVmXV0pIHx8IG51bGxcbiAgICAgIH0pXG4gICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYVswXSAtIGJbMF0gfSlcbiAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5vZmZzZXRzLnB1c2godGhpc1swXSlcbiAgICAgICAgdGhhdC50YXJnZXRzLnB1c2godGhpc1sxXSlcbiAgICAgIH0pXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFRvcCAgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKCkgKyB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcbiAgICB2YXIgbWF4U2Nyb2xsICAgID0gdGhpcy5vcHRpb25zLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuJHNjcm9sbEVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0cyAgICAgID0gdGhpcy5vZmZzZXRzXG4gICAgdmFyIHRhcmdldHMgICAgICA9IHRoaXMudGFyZ2V0c1xuICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLmFjdGl2ZVRhcmdldFxuICAgIHZhciBpXG5cbiAgICBpZiAodGhpcy5zY3JvbGxIZWlnaHQgIT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB0aGlzLnJlZnJlc2goKVxuICAgIH1cblxuICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICByZXR1cm4gYWN0aXZlVGFyZ2V0ICE9IChpID0gdGFyZ2V0c1t0YXJnZXRzLmxlbmd0aCAtIDFdKSAmJiB0aGlzLmFjdGl2YXRlKGkpXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCBvZmZzZXRzWzBdKSB7XG4gICAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IG51bGxcbiAgICAgIHJldHVybiB0aGlzLmNsZWFyKClcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgYWN0aXZlVGFyZ2V0ICE9IHRhcmdldHNbaV1cbiAgICAgICAgJiYgc2Nyb2xsVG9wID49IG9mZnNldHNbaV1cbiAgICAgICAgJiYgKG9mZnNldHNbaSArIDFdID09PSB1bmRlZmluZWQgfHwgc2Nyb2xsVG9wIDwgb2Zmc2V0c1tpICsgMV0pXG4gICAgICAgICYmIHRoaXMuYWN0aXZhdGUodGFyZ2V0c1tpXSlcbiAgICB9XG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0XG5cbiAgICB0aGlzLmNsZWFyKClcblxuICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgK1xuICAgICAgJ1tkYXRhLXRhcmdldD1cIicgKyB0YXJnZXQgKyAnXCJdLCcgK1xuICAgICAgdGhpcy5zZWxlY3RvciArICdbaHJlZj1cIicgKyB0YXJnZXQgKyAnXCJdJ1xuXG4gICAgdmFyIGFjdGl2ZSA9ICQoc2VsZWN0b3IpXG4gICAgICAucGFyZW50cygnbGknKVxuICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuXG4gICAgaWYgKGFjdGl2ZS5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICBhY3RpdmUgPSBhY3RpdmVcbiAgICAgICAgLmNsb3Nlc3QoJ2xpLmRyb3Bkb3duJylcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgIH1cblxuICAgIGFjdGl2ZS50cmlnZ2VyKCdhY3RpdmF0ZS5icy5zY3JvbGxzcHknKVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMuc2VsZWN0b3IpXG4gICAgICAucGFyZW50c1VudGlsKHRoaXMub3B0aW9ucy50YXJnZXQsICcuYWN0aXZlJylcbiAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnNjcm9sbHNweScsIChkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uc2Nyb2xsc3B5XG5cbiAgJC5mbi5zY3JvbGxzcHkgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5zY3JvbGxzcHkuQ29uc3RydWN0b3IgPSBTY3JvbGxTcHlcblxuXG4gIC8vIFNDUk9MTFNQWSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnNjcm9sbHNweS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uc2Nyb2xsc3B5ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09PVxuXG4gICQod2luZG93KS5vbignbG9hZC5icy5zY3JvbGxzcHkuZGF0YS1hcGknLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksICRzcHkuZGF0YSgpKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHRhYi5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3RhYnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBUQUIgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBUYWIgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIC8vIGpzY3M6ZGlzYWJsZSByZXF1aXJlRG9sbGFyQmVmb3JlalF1ZXJ5QXNzaWdubWVudFxuICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudClcbiAgICAvLyBqc2NzOmVuYWJsZSByZXF1aXJlRG9sbGFyQmVmb3JlalF1ZXJ5QXNzaWdubWVudFxuICB9XG5cbiAgVGFiLlZFUlNJT04gPSAnMy4zLjcnXG5cbiAgVGFiLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBUYWIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aGlzICAgID0gdGhpcy5lbGVtZW50XG4gICAgdmFyICR1bCAgICAgID0gJHRoaXMuY2xvc2VzdCgndWw6bm90KC5kcm9wZG93bi1tZW51KScpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuZGF0YSgndGFyZ2V0JylcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgfVxuXG4gICAgaWYgKCR0aGlzLnBhcmVudCgnbGknKS5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVyblxuXG4gICAgdmFyICRwcmV2aW91cyA9ICR1bC5maW5kKCcuYWN0aXZlOmxhc3QgYScpXG4gICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoJ2hpZGUuYnMudGFiJywge1xuICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICB9KVxuICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLnRhYicsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6ICRwcmV2aW91c1swXVxuICAgIH0pXG5cbiAgICAkcHJldmlvdXMudHJpZ2dlcihoaWRlRXZlbnQpXG4gICAgJHRoaXMudHJpZ2dlcihzaG93RXZlbnQpXG5cbiAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB2YXIgJHRhcmdldCA9ICQoc2VsZWN0b3IpXG5cbiAgICB0aGlzLmFjdGl2YXRlKCR0aGlzLmNsb3Nlc3QoJ2xpJyksICR1bClcbiAgICB0aGlzLmFjdGl2YXRlKCR0YXJnZXQsICR0YXJnZXQucGFyZW50KCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICRwcmV2aW91cy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ2hpZGRlbi5icy50YWInLFxuICAgICAgICByZWxhdGVkVGFyZ2V0OiAkdGhpc1swXVxuICAgICAgfSlcbiAgICAgICR0aGlzLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAnc2hvd24uYnMudGFiJyxcbiAgICAgICAgcmVsYXRlZFRhcmdldDogJHByZXZpb3VzWzBdXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBUYWIucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICB2YXIgJGFjdGl2ZSAgICA9IGNvbnRhaW5lci5maW5kKCc+IC5hY3RpdmUnKVxuICAgIHZhciB0cmFuc2l0aW9uID0gY2FsbGJhY2tcbiAgICAgICYmICQuc3VwcG9ydC50cmFuc2l0aW9uXG4gICAgICAmJiAoJGFjdGl2ZS5sZW5ndGggJiYgJGFjdGl2ZS5oYXNDbGFzcygnZmFkZScpIHx8ICEhY29udGFpbmVyLmZpbmQoJz4gLmZhZGUnKS5sZW5ndGgpXG5cbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgJGFjdGl2ZVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5maW5kKCc+IC5kcm9wZG93bi1tZW51ID4gLmFjdGl2ZScpXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZW5kKClcbiAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXG4gICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgICAgZWxlbWVudFxuICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyByZWZsb3cgZm9yIHRyYW5zaXRpb25cbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmFkZScpXG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LnBhcmVudCgnLmRyb3Bkb3duLW1lbnUnKS5sZW5ndGgpIHtcbiAgICAgICAgZWxlbWVudFxuICAgICAgICAgIC5jbG9zZXN0KCdsaS5kcm9wZG93bicpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgLmVuZCgpXG4gICAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICAkYWN0aXZlLmxlbmd0aCAmJiB0cmFuc2l0aW9uID9cbiAgICAgICRhY3RpdmVcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgbmV4dClcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRhYi5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICBuZXh0KClcblxuICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoJ2luJylcbiAgfVxuXG5cbiAgLy8gVEFCIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLnRhYicpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMudGFiJywgKGRhdGEgPSBuZXcgVGFiKHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi50YWJcblxuICAkLmZuLnRhYiAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnRhYi5Db25zdHJ1Y3RvciA9IFRhYlxuXG5cbiAgLy8gVEFCIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PVxuXG4gICQuZm4udGFiLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi50YWIgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBUQUIgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09XG5cbiAgdmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgUGx1Z2luLmNhbGwoJCh0aGlzKSwgJ3Nob3cnKVxuICB9XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLnRhYi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nLCBjbGlja0hhbmRsZXIpXG4gICAgLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwicGlsbFwiXScsIGNsaWNrSGFuZGxlcilcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYWZmaXguanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNhZmZpeFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFGRklYIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBBZmZpeCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFmZml4LkRFRkFVTFRTLCBvcHRpb25zKVxuXG4gICAgdGhpcy4kdGFyZ2V0ID0gJCh0aGlzLm9wdGlvbnMudGFyZ2V0KVxuICAgICAgLm9uKCdzY3JvbGwuYnMuYWZmaXguZGF0YS1hcGknLCAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcykpXG4gICAgICAub24oJ2NsaWNrLmJzLmFmZml4LmRhdGEtYXBpJywgICQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCwgdGhpcykpXG5cbiAgICB0aGlzLiRlbGVtZW50ICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLmFmZml4ZWQgICAgICA9IG51bGxcbiAgICB0aGlzLnVucGluICAgICAgICA9IG51bGxcbiAgICB0aGlzLnBpbm5lZE9mZnNldCA9IG51bGxcblxuICAgIHRoaXMuY2hlY2tQb3NpdGlvbigpXG4gIH1cblxuICBBZmZpeC5WRVJTSU9OICA9ICczLjMuNydcblxuICBBZmZpeC5SRVNFVCAgICA9ICdhZmZpeCBhZmZpeC10b3AgYWZmaXgtYm90dG9tJ1xuXG4gIEFmZml4LkRFRkFVTFRTID0ge1xuICAgIG9mZnNldDogMCxcbiAgICB0YXJnZXQ6IHdpbmRvd1xuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gICAgID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHZhciB0YXJnZXRIZWlnaHQgPSB0aGlzLiR0YXJnZXQuaGVpZ2h0KClcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiB0aGlzLmFmZml4ZWQgPT0gJ3RvcCcpIHJldHVybiBzY3JvbGxUb3AgPCBvZmZzZXRUb3AgPyAndG9wJyA6IGZhbHNlXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkID09ICdib3R0b20nKSB7XG4gICAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwpIHJldHVybiAoc2Nyb2xsVG9wICsgdGhpcy51bnBpbiA8PSBwb3NpdGlvbi50b3ApID8gZmFsc2UgOiAnYm90dG9tJ1xuICAgICAgcmV0dXJuIChzY3JvbGxUb3AgKyB0YXJnZXRIZWlnaHQgPD0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICB9XG5cbiAgICB2YXIgaW5pdGlhbGl6aW5nICAgPSB0aGlzLmFmZml4ZWQgPT0gbnVsbFxuICAgIHZhciBjb2xsaWRlclRvcCAgICA9IGluaXRpYWxpemluZyA/IHNjcm9sbFRvcCA6IHBvc2l0aW9uLnRvcFxuICAgIHZhciBjb2xsaWRlckhlaWdodCA9IGluaXRpYWxpemluZyA/IHRhcmdldEhlaWdodCA6IGhlaWdodFxuXG4gICAgaWYgKG9mZnNldFRvcCAhPSBudWxsICYmIHNjcm9sbFRvcCA8PSBvZmZzZXRUb3ApIHJldHVybiAndG9wJ1xuICAgIGlmIChvZmZzZXRCb3R0b20gIT0gbnVsbCAmJiAoY29sbGlkZXJUb3AgKyBjb2xsaWRlckhlaWdodCA+PSBzY3JvbGxIZWlnaHQgLSBvZmZzZXRCb3R0b20pKSByZXR1cm4gJ2JvdHRvbSdcblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmdldFBpbm5lZE9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5waW5uZWRPZmZzZXQpIHJldHVybiB0aGlzLnBpbm5lZE9mZnNldFxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpLmFkZENsYXNzKCdhZmZpeCcpXG4gICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuJHRhcmdldC5zY3JvbGxUb3AoKVxuICAgIHZhciBwb3NpdGlvbiAgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpXG4gICAgcmV0dXJuICh0aGlzLnBpbm5lZE9mZnNldCA9IHBvc2l0aW9uLnRvcCAtIHNjcm9sbFRvcClcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KCQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uLCB0aGlzKSwgMSlcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkgcmV0dXJuXG5cbiAgICB2YXIgaGVpZ2h0ICAgICAgID0gdGhpcy4kZWxlbWVudC5oZWlnaHQoKVxuICAgIHZhciBvZmZzZXQgICAgICAgPSB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3BcbiAgICB2YXIgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbVxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSBNYXRoLm1heCgkKGRvY3VtZW50KS5oZWlnaHQoKSwgJChkb2N1bWVudC5ib2R5KS5oZWlnaHQoKSlcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9ICdvYmplY3QnKSAgICAgICAgIG9mZnNldEJvdHRvbSA9IG9mZnNldFRvcCA9IG9mZnNldFxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0VG9wID09ICdmdW5jdGlvbicpICAgIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3AodGhpcy4kZWxlbWVudClcbiAgICBpZiAodHlwZW9mIG9mZnNldEJvdHRvbSA9PSAnZnVuY3Rpb24nKSBvZmZzZXRCb3R0b20gPSBvZmZzZXQuYm90dG9tKHRoaXMuJGVsZW1lbnQpXG5cbiAgICB2YXIgYWZmaXggPSB0aGlzLmdldFN0YXRlKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSlcblxuICAgIGlmICh0aGlzLmFmZml4ZWQgIT0gYWZmaXgpIHtcbiAgICAgIGlmICh0aGlzLnVucGluICE9IG51bGwpIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCAnJylcblxuICAgICAgdmFyIGFmZml4VHlwZSA9ICdhZmZpeCcgKyAoYWZmaXggPyAnLScgKyBhZmZpeCA6ICcnKVxuICAgICAgdmFyIGUgICAgICAgICA9ICQuRXZlbnQoYWZmaXhUeXBlICsgJy5icy5hZmZpeCcpXG5cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAgIHRoaXMuYWZmaXhlZCA9IGFmZml4XG4gICAgICB0aGlzLnVucGluID0gYWZmaXggPT0gJ2JvdHRvbScgPyB0aGlzLmdldFBpbm5lZE9mZnNldCgpIDogbnVsbFxuXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVClcbiAgICAgICAgLmFkZENsYXNzKGFmZml4VHlwZSlcbiAgICAgICAgLnRyaWdnZXIoYWZmaXhUeXBlLnJlcGxhY2UoJ2FmZml4JywgJ2FmZml4ZWQnKSArICcuYnMuYWZmaXgnKVxuICAgIH1cblxuICAgIGlmIChhZmZpeCA9PSAnYm90dG9tJykge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoe1xuICAgICAgICB0b3A6IHNjcm9sbEhlaWdodCAtIGhlaWdodCAtIG9mZnNldEJvdHRvbVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuXG4gIC8vIEFGRklYIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmFmZml4JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hZmZpeCcsIChkYXRhID0gbmV3IEFmZml4KHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5hZmZpeFxuXG4gICQuZm4uYWZmaXggICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5hZmZpeC5Db25zdHJ1Y3RvciA9IEFmZml4XG5cblxuICAvLyBBRkZJWCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYWZmaXgubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmFmZml4ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQUZGSVggREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwiYWZmaXhcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkc3B5ID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgPSAkc3B5LmRhdGEoKVxuXG4gICAgICBkYXRhLm9mZnNldCA9IGRhdGEub2Zmc2V0IHx8IHt9XG5cbiAgICAgIGlmIChkYXRhLm9mZnNldEJvdHRvbSAhPSBudWxsKSBkYXRhLm9mZnNldC5ib3R0b20gPSBkYXRhLm9mZnNldEJvdHRvbVxuICAgICAgaWYgKGRhdGEub2Zmc2V0VG9wICAgICE9IG51bGwpIGRhdGEub2Zmc2V0LnRvcCAgICA9IGRhdGEub2Zmc2V0VG9wXG5cbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksIGRhdGEpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuXG4vKiFcbiAqIFNlbGVjdDIgNC4wLjVcbiAqIGh0dHBzOi8vc2VsZWN0Mi5naXRodWIuaW9cbiAqXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWxlY3QyL3NlbGVjdDIvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFxuICovXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAvLyBOb2RlL0NvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocm9vdCwgalF1ZXJ5KSB7XG4gICAgICBpZiAoalF1ZXJ5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gcmVxdWlyZSgnalF1ZXJ5JykgcmV0dXJucyBhIGZhY3RvcnkgdGhhdCByZXF1aXJlcyB3aW5kb3cgdG9cbiAgICAgICAgLy8gYnVpbGQgYSBqUXVlcnkgaW5zdGFuY2UsIHdlIG5vcm1hbGl6ZSBob3cgd2UgdXNlIG1vZHVsZXNcbiAgICAgICAgLy8gdGhhdCByZXF1aXJlIHRoaXMgcGF0dGVybiBidXQgdGhlIHdpbmRvdyBwcm92aWRlZCBpcyBhIG5vb3BcbiAgICAgICAgLy8gaWYgaXQncyBkZWZpbmVkIChob3cganF1ZXJ5IHdvcmtzKVxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKShyb290KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgICAgcmV0dXJuIGpRdWVyeTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgfVxufSAoZnVuY3Rpb24gKGpRdWVyeSkge1xuICAvLyBUaGlzIGlzIG5lZWRlZCBzbyB3ZSBjYW4gY2F0Y2ggdGhlIEFNRCBsb2FkZXIgY29uZmlndXJhdGlvbiBhbmQgdXNlIGl0XG4gIC8vIFRoZSBpbm5lciBmaWxlIHNob3VsZCBiZSB3cmFwcGVkIChieSBgYmFubmVyLnN0YXJ0LmpzYCkgaW4gYSBmdW5jdGlvbiB0aGF0XG4gIC8vIHJldHVybnMgdGhlIEFNRCBsb2FkZXIgcmVmZXJlbmNlcy5cbiAgdmFyIFMyID0oZnVuY3Rpb24gKCkge1xuICAvLyBSZXN0b3JlIHRoZSBTZWxlY3QyIEFNRCBsb2FkZXIgc28gaXQgY2FuIGJlIHVzZWRcbiAgLy8gTmVlZGVkIG1vc3RseSBpbiB0aGUgbGFuZ3VhZ2UgZmlsZXMsIHdoZXJlIHRoZSBsb2FkZXIgaXMgbm90IGluc2VydGVkXG4gIGlmIChqUXVlcnkgJiYgalF1ZXJ5LmZuICYmIGpRdWVyeS5mbi5zZWxlY3QyICYmIGpRdWVyeS5mbi5zZWxlY3QyLmFtZCkge1xuICAgIHZhciBTMiA9IGpRdWVyeS5mbi5zZWxlY3QyLmFtZDtcbiAgfVxudmFyIFMyOyhmdW5jdGlvbiAoKSB7IGlmICghUzIgfHwgIVMyLnJlcXVpcmVqcykge1xuaWYgKCFTMikgeyBTMiA9IHt9OyB9IGVsc2UgeyByZXF1aXJlID0gUzI7IH1cbi8qKlxuICogQGxpY2Vuc2UgYWxtb25kIDAuMy4zIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzLlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UsIGh0dHA6Ly9naXRodWIuY29tL3JlcXVpcmVqcy9hbG1vbmQvTElDRU5TRVxuICovXG4vL0dvaW5nIHNsb3BweSB0byBhdm9pZCAndXNlIHN0cmljdCcgc3RyaW5nIGNvc3QsIGJ1dCBzdHJpY3QgcHJhY3RpY2VzIHNob3VsZFxuLy9iZSBmb2xsb3dlZC5cbi8qZ2xvYmFsIHNldFRpbWVvdXQ6IGZhbHNlICovXG5cbnZhciByZXF1aXJlanMsIHJlcXVpcmUsIGRlZmluZTtcbihmdW5jdGlvbiAodW5kZWYpIHtcbiAgICB2YXIgbWFpbiwgcmVxLCBtYWtlTWFwLCBoYW5kbGVycyxcbiAgICAgICAgZGVmaW5lZCA9IHt9LFxuICAgICAgICB3YWl0aW5nID0ge30sXG4gICAgICAgIGNvbmZpZyA9IHt9LFxuICAgICAgICBkZWZpbmluZyA9IHt9LFxuICAgICAgICBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICAgICAgICBhcHMgPSBbXS5zbGljZSxcbiAgICAgICAganNTdWZmaXhSZWdFeHAgPSAvXFwuanMkLztcblxuICAgIGZ1bmN0aW9uIGhhc1Byb3Aob2JqLCBwcm9wKSB7XG4gICAgICAgIHJldHVybiBoYXNPd24uY2FsbChvYmosIHByb3ApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgcmVsYXRpdmUgbW9kdWxlIG5hbWUsIGxpa2UgLi9zb21ldGhpbmcsIG5vcm1hbGl6ZSBpdCB0b1xuICAgICAqIGEgcmVhbCBuYW1lIHRoYXQgY2FuIGJlIG1hcHBlZCB0byBhIHBhdGguXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgdGhlIHJlbGF0aXZlIG5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYmFzZU5hbWUgYSByZWFsIG5hbWUgdGhhdCB0aGUgbmFtZSBhcmcgaXMgcmVsYXRpdmVcbiAgICAgKiB0by5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBub3JtYWxpemVkIG5hbWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub3JtYWxpemUobmFtZSwgYmFzZU5hbWUpIHtcbiAgICAgICAgdmFyIG5hbWVQYXJ0cywgbmFtZVNlZ21lbnQsIG1hcFZhbHVlLCBmb3VuZE1hcCwgbGFzdEluZGV4LFxuICAgICAgICAgICAgZm91bmRJLCBmb3VuZFN0YXJNYXAsIHN0YXJJLCBpLCBqLCBwYXJ0LCBub3JtYWxpemVkQmFzZVBhcnRzLFxuICAgICAgICAgICAgYmFzZVBhcnRzID0gYmFzZU5hbWUgJiYgYmFzZU5hbWUuc3BsaXQoXCIvXCIpLFxuICAgICAgICAgICAgbWFwID0gY29uZmlnLm1hcCxcbiAgICAgICAgICAgIHN0YXJNYXAgPSAobWFwICYmIG1hcFsnKiddKSB8fCB7fTtcblxuICAgICAgICAvL0FkanVzdCBhbnkgcmVsYXRpdmUgcGF0aHMuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgbGFzdEluZGV4ID0gbmFtZS5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgICAvLyBJZiB3YW50aW5nIG5vZGUgSUQgY29tcGF0aWJpbGl0eSwgc3RyaXAgLmpzIGZyb20gZW5kXG4gICAgICAgICAgICAvLyBvZiBJRHMuIEhhdmUgdG8gZG8gdGhpcyBoZXJlLCBhbmQgbm90IGluIG5hbWVUb1VybFxuICAgICAgICAgICAgLy8gYmVjYXVzZSBub2RlIGFsbG93cyBlaXRoZXIgLmpzIG9yIG5vbiAuanMgdG8gbWFwXG4gICAgICAgICAgICAvLyB0byBzYW1lIGZpbGUuXG4gICAgICAgICAgICBpZiAoY29uZmlnLm5vZGVJZENvbXBhdCAmJiBqc1N1ZmZpeFJlZ0V4cC50ZXN0KG5hbWVbbGFzdEluZGV4XSkpIHtcbiAgICAgICAgICAgICAgICBuYW1lW2xhc3RJbmRleF0gPSBuYW1lW2xhc3RJbmRleF0ucmVwbGFjZShqc1N1ZmZpeFJlZ0V4cCwgJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTdGFydHMgd2l0aCBhICcuJyBzbyBuZWVkIHRoZSBiYXNlTmFtZVxuICAgICAgICAgICAgaWYgKG5hbWVbMF0uY2hhckF0KDApID09PSAnLicgJiYgYmFzZVBhcnRzKSB7XG4gICAgICAgICAgICAgICAgLy9Db252ZXJ0IGJhc2VOYW1lIHRvIGFycmF5LCBhbmQgbG9wIG9mZiB0aGUgbGFzdCBwYXJ0LFxuICAgICAgICAgICAgICAgIC8vc28gdGhhdCAuIG1hdGNoZXMgdGhhdCAnZGlyZWN0b3J5JyBhbmQgbm90IG5hbWUgb2YgdGhlIGJhc2VOYW1lJ3NcbiAgICAgICAgICAgICAgICAvL21vZHVsZS4gRm9yIGluc3RhbmNlLCBiYXNlTmFtZSBvZiAnb25lL3R3by90aHJlZScsIG1hcHMgdG9cbiAgICAgICAgICAgICAgICAvLydvbmUvdHdvL3RocmVlLmpzJywgYnV0IHdlIHdhbnQgdGhlIGRpcmVjdG9yeSwgJ29uZS90d28nIGZvclxuICAgICAgICAgICAgICAgIC8vdGhpcyBub3JtYWxpemF0aW9uLlxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRCYXNlUGFydHMgPSBiYXNlUGFydHMuc2xpY2UoMCwgYmFzZVBhcnRzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgIG5hbWUgPSBub3JtYWxpemVkQmFzZVBhcnRzLmNvbmNhdChuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9zdGFydCB0cmltRG90c1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwYXJ0ID0gbmFtZVtpXTtcbiAgICAgICAgICAgICAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGF0IHRoZSBzdGFydCwgb3IgcHJldmlvdXMgdmFsdWUgaXMgc3RpbGwgLi4sXG4gICAgICAgICAgICAgICAgICAgIC8vIGtlZXAgdGhlbSBzbyB0aGF0IHdoZW4gY29udmVydGVkIHRvIGEgcGF0aCBpdCBtYXlcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RpbGwgd29yayB3aGVuIGNvbnZlcnRlZCB0byBhIHBhdGgsIGV2ZW4gdGhvdWdoXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzIGFuIElEIGl0IGlzIGxlc3MgdGhhbiBpZGVhbC4gSW4gbGFyZ2VyIHBvaW50XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbGVhc2VzLCBtYXkgYmUgYmV0dGVyIHRvIGp1c3Qga2ljayBvdXQgYW4gZXJyb3IuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwIHx8IChpID09PSAxICYmIG5hbWVbMl0gPT09ICcuLicpIHx8IG5hbWVbaSAtIDFdID09PSAnLi4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZS5zcGxpY2UoaSAtIDEsIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSAtPSAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9lbmQgdHJpbURvdHNcblxuICAgICAgICAgICAgbmFtZSA9IG5hbWUuam9pbignLycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9BcHBseSBtYXAgY29uZmlnIGlmIGF2YWlsYWJsZS5cbiAgICAgICAgaWYgKChiYXNlUGFydHMgfHwgc3Rhck1hcCkgJiYgbWFwKSB7XG4gICAgICAgICAgICBuYW1lUGFydHMgPSBuYW1lLnNwbGl0KCcvJyk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IG5hbWVQYXJ0cy5sZW5ndGg7IGkgPiAwOyBpIC09IDEpIHtcbiAgICAgICAgICAgICAgICBuYW1lU2VnbWVudCA9IG5hbWVQYXJ0cy5zbGljZSgwLCBpKS5qb2luKFwiL1wiKTtcblxuICAgICAgICAgICAgICAgIGlmIChiYXNlUGFydHMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9GaW5kIHRoZSBsb25nZXN0IGJhc2VOYW1lIHNlZ21lbnQgbWF0Y2ggaW4gdGhlIGNvbmZpZy5cbiAgICAgICAgICAgICAgICAgICAgLy9TbywgZG8gam9pbnMgb24gdGhlIGJpZ2dlc3QgdG8gc21hbGxlc3QgbGVuZ3RocyBvZiBiYXNlUGFydHMuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IGJhc2VQYXJ0cy5sZW5ndGg7IGogPiAwOyBqIC09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcFZhbHVlID0gbWFwW2Jhc2VQYXJ0cy5zbGljZSgwLCBqKS5qb2luKCcvJyldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Jhc2VOYW1lIHNlZ21lbnQgaGFzICBjb25maWcsIGZpbmQgaWYgaXQgaGFzIG9uZSBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcyBuYW1lLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwVmFsdWUgPSBtYXBWYWx1ZVtuYW1lU2VnbWVudF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vTWF0Y2gsIHVwZGF0ZSBuYW1lIHRvIHRoZSBuZXcgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kTWFwID0gbWFwVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kSSA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChmb3VuZE1hcCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL0NoZWNrIGZvciBhIHN0YXIgbWFwIG1hdGNoLCBidXQganVzdCBob2xkIG9uIHRvIGl0LFxuICAgICAgICAgICAgICAgIC8vaWYgdGhlcmUgaXMgYSBzaG9ydGVyIHNlZ21lbnQgbWF0Y2ggbGF0ZXIgaW4gYSBtYXRjaGluZ1xuICAgICAgICAgICAgICAgIC8vY29uZmlnLCB0aGVuIGZhdm9yIG92ZXIgdGhpcyBzdGFyIG1hcC5cbiAgICAgICAgICAgICAgICBpZiAoIWZvdW5kU3Rhck1hcCAmJiBzdGFyTWFwICYmIHN0YXJNYXBbbmFtZVNlZ21lbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kU3Rhck1hcCA9IHN0YXJNYXBbbmFtZVNlZ21lbnRdO1xuICAgICAgICAgICAgICAgICAgICBzdGFySSA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWZvdW5kTWFwICYmIGZvdW5kU3Rhck1hcCkge1xuICAgICAgICAgICAgICAgIGZvdW5kTWFwID0gZm91bmRTdGFyTWFwO1xuICAgICAgICAgICAgICAgIGZvdW5kSSA9IHN0YXJJO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZm91bmRNYXApIHtcbiAgICAgICAgICAgICAgICBuYW1lUGFydHMuc3BsaWNlKDAsIGZvdW5kSSwgZm91bmRNYXApO1xuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lUGFydHMuam9pbignLycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZVJlcXVpcmUocmVsTmFtZSwgZm9yY2VTeW5jKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL0EgdmVyc2lvbiBvZiBhIHJlcXVpcmUgZnVuY3Rpb24gdGhhdCBwYXNzZXMgYSBtb2R1bGVOYW1lXG4gICAgICAgICAgICAvL3ZhbHVlIGZvciBpdGVtcyB0aGF0IG1heSBuZWVkIHRvXG4gICAgICAgICAgICAvL2xvb2sgdXAgcGF0aHMgcmVsYXRpdmUgdG8gdGhlIG1vZHVsZU5hbWVcbiAgICAgICAgICAgIHZhciBhcmdzID0gYXBzLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICAgICAgLy9JZiBmaXJzdCBhcmcgaXMgbm90IHJlcXVpcmUoJ3N0cmluZycpLCBhbmQgdGhlcmUgaXMgb25seVxuICAgICAgICAgICAgLy9vbmUgYXJnLCBpdCBpcyB0aGUgYXJyYXkgZm9ybSB3aXRob3V0IGEgY2FsbGJhY2suIEluc2VydFxuICAgICAgICAgICAgLy9hIG51bGwgc28gdGhhdCB0aGUgZm9sbG93aW5nIGNvbmNhdCBpcyBjb3JyZWN0LlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJyAmJiBhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXEuYXBwbHkodW5kZWYsIGFyZ3MuY29uY2F0KFtyZWxOYW1lLCBmb3JjZVN5bmNdKSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZU5vcm1hbGl6ZShyZWxOYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZShuYW1lLCByZWxOYW1lKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlTG9hZChkZXBOYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGRlZmluZWRbZGVwTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsRGVwKG5hbWUpIHtcbiAgICAgICAgaWYgKGhhc1Byb3Aod2FpdGluZywgbmFtZSkpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gd2FpdGluZ1tuYW1lXTtcbiAgICAgICAgICAgIGRlbGV0ZSB3YWl0aW5nW25hbWVdO1xuICAgICAgICAgICAgZGVmaW5pbmdbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgbWFpbi5hcHBseSh1bmRlZiwgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWhhc1Byb3AoZGVmaW5lZCwgbmFtZSkgJiYgIWhhc1Byb3AoZGVmaW5pbmcsIG5hbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vICcgKyBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmaW5lZFtuYW1lXTtcbiAgICB9XG5cbiAgICAvL1R1cm5zIGEgcGx1Z2luIXJlc291cmNlIHRvIFtwbHVnaW4sIHJlc291cmNlXVxuICAgIC8vd2l0aCB0aGUgcGx1Z2luIGJlaW5nIHVuZGVmaW5lZCBpZiB0aGUgbmFtZVxuICAgIC8vZGlkIG5vdCBoYXZlIGEgcGx1Z2luIHByZWZpeC5cbiAgICBmdW5jdGlvbiBzcGxpdFByZWZpeChuYW1lKSB7XG4gICAgICAgIHZhciBwcmVmaXgsXG4gICAgICAgICAgICBpbmRleCA9IG5hbWUgPyBuYW1lLmluZGV4T2YoJyEnKSA6IC0xO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgcHJlZml4ID0gbmFtZS5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyaW5nKGluZGV4ICsgMSwgbmFtZS5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbcHJlZml4LCBuYW1lXTtcbiAgICB9XG5cbiAgICAvL0NyZWF0ZXMgYSBwYXJ0cyBhcnJheSBmb3IgYSByZWxOYW1lIHdoZXJlIGZpcnN0IHBhcnQgaXMgcGx1Z2luIElELFxuICAgIC8vc2Vjb25kIHBhcnQgaXMgcmVzb3VyY2UgSUQuIEFzc3VtZXMgcmVsTmFtZSBoYXMgYWxyZWFkeSBiZWVuIG5vcm1hbGl6ZWQuXG4gICAgZnVuY3Rpb24gbWFrZVJlbFBhcnRzKHJlbE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHJlbE5hbWUgPyBzcGxpdFByZWZpeChyZWxOYW1lKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ha2VzIGEgbmFtZSBtYXAsIG5vcm1hbGl6aW5nIHRoZSBuYW1lLCBhbmQgdXNpbmcgYSBwbHVnaW5cbiAgICAgKiBmb3Igbm9ybWFsaXphdGlvbiBpZiBuZWNlc3NhcnkuIEdyYWJzIGEgcmVmIHRvIHBsdWdpblxuICAgICAqIHRvbywgYXMgYW4gb3B0aW1pemF0aW9uLlxuICAgICAqL1xuICAgIG1ha2VNYXAgPSBmdW5jdGlvbiAobmFtZSwgcmVsUGFydHMpIHtcbiAgICAgICAgdmFyIHBsdWdpbixcbiAgICAgICAgICAgIHBhcnRzID0gc3BsaXRQcmVmaXgobmFtZSksXG4gICAgICAgICAgICBwcmVmaXggPSBwYXJ0c1swXSxcbiAgICAgICAgICAgIHJlbFJlc291cmNlTmFtZSA9IHJlbFBhcnRzWzFdO1xuXG4gICAgICAgIG5hbWUgPSBwYXJ0c1sxXTtcblxuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICBwcmVmaXggPSBub3JtYWxpemUocHJlZml4LCByZWxSZXNvdXJjZU5hbWUpO1xuICAgICAgICAgICAgcGx1Z2luID0gY2FsbERlcChwcmVmaXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9Ob3JtYWxpemUgYWNjb3JkaW5nXG4gICAgICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgICAgIGlmIChwbHVnaW4gJiYgcGx1Z2luLm5vcm1hbGl6ZSkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBwbHVnaW4ubm9ybWFsaXplKG5hbWUsIG1ha2VOb3JtYWxpemUocmVsUmVzb3VyY2VOYW1lKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBub3JtYWxpemUobmFtZSwgcmVsUmVzb3VyY2VOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5hbWUgPSBub3JtYWxpemUobmFtZSwgcmVsUmVzb3VyY2VOYW1lKTtcbiAgICAgICAgICAgIHBhcnRzID0gc3BsaXRQcmVmaXgobmFtZSk7XG4gICAgICAgICAgICBwcmVmaXggPSBwYXJ0c1swXTtcbiAgICAgICAgICAgIG5hbWUgPSBwYXJ0c1sxXTtcbiAgICAgICAgICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgICAgICAgICBwbHVnaW4gPSBjYWxsRGVwKHByZWZpeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL1VzaW5nIHJpZGljdWxvdXMgcHJvcGVydHkgbmFtZXMgZm9yIHNwYWNlIHJlYXNvbnNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGY6IHByZWZpeCA/IHByZWZpeCArICchJyArIG5hbWUgOiBuYW1lLCAvL2Z1bGxOYW1lXG4gICAgICAgICAgICBuOiBuYW1lLFxuICAgICAgICAgICAgcHI6IHByZWZpeCxcbiAgICAgICAgICAgIHA6IHBsdWdpblxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBtYWtlQ29uZmlnKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAoY29uZmlnICYmIGNvbmZpZy5jb25maWcgJiYgY29uZmlnLmNvbmZpZ1tuYW1lXSkgfHwge307XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaGFuZGxlcnMgPSB7XG4gICAgICAgIHJlcXVpcmU6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFrZVJlcXVpcmUobmFtZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGV4cG9ydHM6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICB2YXIgZSA9IGRlZmluZWRbbmFtZV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAoZGVmaW5lZFtuYW1lXSA9IHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9kdWxlOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogbmFtZSxcbiAgICAgICAgICAgICAgICB1cmk6ICcnLFxuICAgICAgICAgICAgICAgIGV4cG9ydHM6IGRlZmluZWRbbmFtZV0sXG4gICAgICAgICAgICAgICAgY29uZmlnOiBtYWtlQ29uZmlnKG5hbWUpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIG1haW4gPSBmdW5jdGlvbiAobmFtZSwgZGVwcywgY2FsbGJhY2ssIHJlbE5hbWUpIHtcbiAgICAgICAgdmFyIGNqc01vZHVsZSwgZGVwTmFtZSwgcmV0LCBtYXAsIGksIHJlbFBhcnRzLFxuICAgICAgICAgICAgYXJncyA9IFtdLFxuICAgICAgICAgICAgY2FsbGJhY2tUeXBlID0gdHlwZW9mIGNhbGxiYWNrLFxuICAgICAgICAgICAgdXNpbmdFeHBvcnRzO1xuXG4gICAgICAgIC8vVXNlIG5hbWUgaWYgbm8gcmVsTmFtZVxuICAgICAgICByZWxOYW1lID0gcmVsTmFtZSB8fCBuYW1lO1xuICAgICAgICByZWxQYXJ0cyA9IG1ha2VSZWxQYXJ0cyhyZWxOYW1lKTtcblxuICAgICAgICAvL0NhbGwgdGhlIGNhbGxiYWNrIHRvIGRlZmluZSB0aGUgbW9kdWxlLCBpZiBuZWNlc3NhcnkuXG4gICAgICAgIGlmIChjYWxsYmFja1R5cGUgPT09ICd1bmRlZmluZWQnIHx8IGNhbGxiYWNrVHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy9QdWxsIG91dCB0aGUgZGVmaW5lZCBkZXBlbmRlbmNpZXMgYW5kIHBhc3MgdGhlIG9yZGVyZWRcbiAgICAgICAgICAgIC8vdmFsdWVzIHRvIHRoZSBjYWxsYmFjay5cbiAgICAgICAgICAgIC8vRGVmYXVsdCB0byBbcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlXSBpZiBubyBkZXBzXG4gICAgICAgICAgICBkZXBzID0gIWRlcHMubGVuZ3RoICYmIGNhbGxiYWNrLmxlbmd0aCA/IFsncmVxdWlyZScsICdleHBvcnRzJywgJ21vZHVsZSddIDogZGVwcztcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgbWFwID0gbWFrZU1hcChkZXBzW2ldLCByZWxQYXJ0cyk7XG4gICAgICAgICAgICAgICAgZGVwTmFtZSA9IG1hcC5mO1xuXG4gICAgICAgICAgICAgICAgLy9GYXN0IHBhdGggQ29tbW9uSlMgc3RhbmRhcmQgZGVwZW5kZW5jaWVzLlxuICAgICAgICAgICAgICAgIGlmIChkZXBOYW1lID09PSBcInJlcXVpcmVcIikge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW2ldID0gaGFuZGxlcnMucmVxdWlyZShuYW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRlcE5hbWUgPT09IFwiZXhwb3J0c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vQ29tbW9uSlMgbW9kdWxlIHNwZWMgMS4xXG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBoYW5kbGVycy5leHBvcnRzKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB1c2luZ0V4cG9ydHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVwTmFtZSA9PT0gXCJtb2R1bGVcIikge1xuICAgICAgICAgICAgICAgICAgICAvL0NvbW1vbkpTIG1vZHVsZSBzcGVjIDEuMVxuICAgICAgICAgICAgICAgICAgICBjanNNb2R1bGUgPSBhcmdzW2ldID0gaGFuZGxlcnMubW9kdWxlKG5hbWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzUHJvcChkZWZpbmVkLCBkZXBOYW1lKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzUHJvcCh3YWl0aW5nLCBkZXBOYW1lKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzUHJvcChkZWZpbmluZywgZGVwTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSA9IGNhbGxEZXAoZGVwTmFtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXAucCkge1xuICAgICAgICAgICAgICAgICAgICBtYXAucC5sb2FkKG1hcC5uLCBtYWtlUmVxdWlyZShyZWxOYW1lLCB0cnVlKSwgbWFrZUxvYWQoZGVwTmFtZSksIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSA9IGRlZmluZWRbZGVwTmFtZV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG5hbWUgKyAnIG1pc3NpbmcgJyArIGRlcE5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0ID0gY2FsbGJhY2sgPyBjYWxsYmFjay5hcHBseShkZWZpbmVkW25hbWVdLCBhcmdzKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAvL0lmIHNldHRpbmcgZXhwb3J0cyB2aWEgXCJtb2R1bGVcIiBpcyBpbiBwbGF5LFxuICAgICAgICAgICAgICAgIC8vZmF2b3IgdGhhdCBvdmVyIHJldHVybiB2YWx1ZSBhbmQgZXhwb3J0cy4gQWZ0ZXIgdGhhdCxcbiAgICAgICAgICAgICAgICAvL2Zhdm9yIGEgbm9uLXVuZGVmaW5lZCByZXR1cm4gdmFsdWUgb3ZlciBleHBvcnRzIHVzZS5cbiAgICAgICAgICAgICAgICBpZiAoY2pzTW9kdWxlICYmIGNqc01vZHVsZS5leHBvcnRzICE9PSB1bmRlZiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY2pzTW9kdWxlLmV4cG9ydHMgIT09IGRlZmluZWRbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lZFtuYW1lXSA9IGNqc01vZHVsZS5leHBvcnRzO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmV0ICE9PSB1bmRlZiB8fCAhdXNpbmdFeHBvcnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vVXNlIHRoZSByZXR1cm4gdmFsdWUgZnJvbSB0aGUgZnVuY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZWRbbmFtZV0gPSByZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIC8vTWF5IGp1c3QgYmUgYW4gb2JqZWN0IGRlZmluaXRpb24gZm9yIHRoZSBtb2R1bGUuIE9ubHlcbiAgICAgICAgICAgIC8vd29ycnkgYWJvdXQgZGVmaW5pbmcgaWYgaGF2ZSBhIG1vZHVsZSBuYW1lLlxuICAgICAgICAgICAgZGVmaW5lZFtuYW1lXSA9IGNhbGxiYWNrO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJlcXVpcmVqcyA9IHJlcXVpcmUgPSByZXEgPSBmdW5jdGlvbiAoZGVwcywgY2FsbGJhY2ssIHJlbE5hbWUsIGZvcmNlU3luYywgYWx0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGVwcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJzW2RlcHNdKSB7XG4gICAgICAgICAgICAgICAgLy9jYWxsYmFjayBpbiB0aGlzIGNhc2UgaXMgcmVhbGx5IHJlbE5hbWVcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlcnNbZGVwc10oY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9KdXN0IHJldHVybiB0aGUgbW9kdWxlIHdhbnRlZC4gSW4gdGhpcyBzY2VuYXJpbywgdGhlXG4gICAgICAgICAgICAvL2RlcHMgYXJnIGlzIHRoZSBtb2R1bGUgbmFtZSwgYW5kIHNlY29uZCBhcmcgKGlmIHBhc3NlZClcbiAgICAgICAgICAgIC8vaXMganVzdCB0aGUgcmVsTmFtZS5cbiAgICAgICAgICAgIC8vTm9ybWFsaXplIG1vZHVsZSBuYW1lLCBpZiBpdCBjb250YWlucyAuIG9yIC4uXG4gICAgICAgICAgICByZXR1cm4gY2FsbERlcChtYWtlTWFwKGRlcHMsIG1ha2VSZWxQYXJ0cyhjYWxsYmFjaykpLmYpO1xuICAgICAgICB9IGVsc2UgaWYgKCFkZXBzLnNwbGljZSkge1xuICAgICAgICAgICAgLy9kZXBzIGlzIGEgY29uZmlnIG9iamVjdCwgbm90IGFuIGFycmF5LlxuICAgICAgICAgICAgY29uZmlnID0gZGVwcztcbiAgICAgICAgICAgIGlmIChjb25maWcuZGVwcykge1xuICAgICAgICAgICAgICAgIHJlcShjb25maWcuZGVwcywgY29uZmlnLmNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjay5zcGxpY2UpIHtcbiAgICAgICAgICAgICAgICAvL2NhbGxiYWNrIGlzIGFuIGFycmF5LCB3aGljaCBtZWFucyBpdCBpcyBhIGRlcGVuZGVuY3kgbGlzdC5cbiAgICAgICAgICAgICAgICAvL0FkanVzdCBhcmdzIGlmIHRoZXJlIGFyZSBkZXBlbmRlbmNpZXNcbiAgICAgICAgICAgICAgICBkZXBzID0gY2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSByZWxOYW1lO1xuICAgICAgICAgICAgICAgIHJlbE5hbWUgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXBzID0gdW5kZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL1N1cHBvcnQgcmVxdWlyZShbJ2EnXSlcbiAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgICAvL0lmIHJlbE5hbWUgaXMgYSBmdW5jdGlvbiwgaXQgaXMgYW4gZXJyYmFjayBoYW5kbGVyLFxuICAgICAgICAvL3NvIHJlbW92ZSBpdC5cbiAgICAgICAgaWYgKHR5cGVvZiByZWxOYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZWxOYW1lID0gZm9yY2VTeW5jO1xuICAgICAgICAgICAgZm9yY2VTeW5jID0gYWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy9TaW11bGF0ZSBhc3luYyBjYWxsYmFjaztcbiAgICAgICAgaWYgKGZvcmNlU3luYykge1xuICAgICAgICAgICAgbWFpbih1bmRlZiwgZGVwcywgY2FsbGJhY2ssIHJlbE5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9Vc2luZyBhIG5vbi16ZXJvIHZhbHVlIGJlY2F1c2Ugb2YgY29uY2VybiBmb3Igd2hhdCBvbGQgYnJvd3NlcnNcbiAgICAgICAgICAgIC8vZG8sIGFuZCBsYXRlc3QgYnJvd3NlcnMgXCJ1cGdyYWRlXCIgdG8gNCBpZiBsb3dlciB2YWx1ZSBpcyB1c2VkOlxuICAgICAgICAgICAgLy9odHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90aW1lcnMuaHRtbCNkb20td2luZG93dGltZXJzLXNldHRpbWVvdXQ6XG4gICAgICAgICAgICAvL0lmIHdhbnQgYSB2YWx1ZSBpbW1lZGlhdGVseSwgdXNlIHJlcXVpcmUoJ2lkJykgaW5zdGVhZCAtLSBzb21ldGhpbmdcbiAgICAgICAgICAgIC8vdGhhdCB3b3JrcyBpbiBhbG1vbmQgb24gdGhlIGdsb2JhbCBsZXZlbCwgYnV0IG5vdCBndWFyYW50ZWVkIGFuZFxuICAgICAgICAgICAgLy91bmxpa2VseSB0byB3b3JrIGluIG90aGVyIEFNRCBpbXBsZW1lbnRhdGlvbnMuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBtYWluKHVuZGVmLCBkZXBzLCBjYWxsYmFjaywgcmVsTmFtZSk7XG4gICAgICAgICAgICB9LCA0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEp1c3QgZHJvcHMgdGhlIGNvbmZpZyBvbiB0aGUgZmxvb3IsIGJ1dCByZXR1cm5zIHJlcSBpbiBjYXNlXG4gICAgICogdGhlIGNvbmZpZyByZXR1cm4gdmFsdWUgaXMgdXNlZC5cbiAgICAgKi9cbiAgICByZXEuY29uZmlnID0gZnVuY3Rpb24gKGNmZykge1xuICAgICAgICByZXR1cm4gcmVxKGNmZyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEV4cG9zZSBtb2R1bGUgcmVnaXN0cnkgZm9yIGRlYnVnZ2luZyBhbmQgdG9vbGluZ1xuICAgICAqL1xuICAgIHJlcXVpcmVqcy5fZGVmaW5lZCA9IGRlZmluZWQ7XG5cbiAgICBkZWZpbmUgPSBmdW5jdGlvbiAobmFtZSwgZGVwcywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWUgYWxtb25kIFJFQURNRTogaW5jb3JyZWN0IG1vZHVsZSBidWlsZCwgbm8gbW9kdWxlIG5hbWUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vVGhpcyBtb2R1bGUgbWF5IG5vdCBoYXZlIGRlcGVuZGVuY2llc1xuICAgICAgICBpZiAoIWRlcHMuc3BsaWNlKSB7XG4gICAgICAgICAgICAvL2RlcHMgaXMgbm90IGFuIGFycmF5LCBzbyBwcm9iYWJseSBtZWFuc1xuICAgICAgICAgICAgLy9hbiBvYmplY3QgbGl0ZXJhbCBvciBmYWN0b3J5IGZ1bmN0aW9uIGZvclxuICAgICAgICAgICAgLy90aGUgdmFsdWUuIEFkanVzdCBhcmdzLlxuICAgICAgICAgICAgY2FsbGJhY2sgPSBkZXBzO1xuICAgICAgICAgICAgZGVwcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFoYXNQcm9wKGRlZmluZWQsIG5hbWUpICYmICFoYXNQcm9wKHdhaXRpbmcsIG5hbWUpKSB7XG4gICAgICAgICAgICB3YWl0aW5nW25hbWVdID0gW25hbWUsIGRlcHMsIGNhbGxiYWNrXTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmUuYW1kID0ge1xuICAgICAgICBqUXVlcnk6IHRydWVcbiAgICB9O1xufSgpKTtcblxuUzIucmVxdWlyZWpzID0gcmVxdWlyZWpzO1MyLnJlcXVpcmUgPSByZXF1aXJlO1MyLmRlZmluZSA9IGRlZmluZTtcbn1cbn0oKSk7XG5TMi5kZWZpbmUoXCJhbG1vbmRcIiwgZnVuY3Rpb24oKXt9KTtcblxuLyogZ2xvYmFsIGpRdWVyeTpmYWxzZSwgJDpmYWxzZSAqL1xuUzIuZGVmaW5lKCdqcXVlcnknLFtdLGZ1bmN0aW9uICgpIHtcbiAgdmFyIF8kID0galF1ZXJ5IHx8ICQ7XG5cbiAgaWYgKF8kID09IG51bGwgJiYgY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgICdTZWxlY3QyOiBBbiBpbnN0YW5jZSBvZiBqUXVlcnkgb3IgYSBqUXVlcnktY29tcGF0aWJsZSBsaWJyYXJ5IHdhcyBub3QgJyArXG4gICAgICAnZm91bmQuIE1ha2Ugc3VyZSB0aGF0IHlvdSBhcmUgaW5jbHVkaW5nIGpRdWVyeSBiZWZvcmUgU2VsZWN0MiBvbiB5b3VyICcgK1xuICAgICAgJ3dlYiBwYWdlLidcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIF8kO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi91dGlscycsW1xuICAnanF1ZXJ5J1xuXSwgZnVuY3Rpb24gKCQpIHtcbiAgdmFyIFV0aWxzID0ge307XG5cbiAgVXRpbHMuRXh0ZW5kID0gZnVuY3Rpb24gKENoaWxkQ2xhc3MsIFN1cGVyQ2xhc3MpIHtcbiAgICB2YXIgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgICBmdW5jdGlvbiBCYXNlQ29uc3RydWN0b3IgKCkge1xuICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IENoaWxkQ2xhc3M7XG4gICAgfVxuXG4gICAgZm9yICh2YXIga2V5IGluIFN1cGVyQ2xhc3MpIHtcbiAgICAgIGlmIChfX2hhc1Byb3AuY2FsbChTdXBlckNsYXNzLCBrZXkpKSB7XG4gICAgICAgIENoaWxkQ2xhc3Nba2V5XSA9IFN1cGVyQ2xhc3Nba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBCYXNlQ29uc3RydWN0b3IucHJvdG90eXBlID0gU3VwZXJDbGFzcy5wcm90b3R5cGU7XG4gICAgQ2hpbGRDbGFzcy5wcm90b3R5cGUgPSBuZXcgQmFzZUNvbnN0cnVjdG9yKCk7XG4gICAgQ2hpbGRDbGFzcy5fX3N1cGVyX18gPSBTdXBlckNsYXNzLnByb3RvdHlwZTtcblxuICAgIHJldHVybiBDaGlsZENsYXNzO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldE1ldGhvZHMgKHRoZUNsYXNzKSB7XG4gICAgdmFyIHByb3RvID0gdGhlQ2xhc3MucHJvdG90eXBlO1xuXG4gICAgdmFyIG1ldGhvZHMgPSBbXTtcblxuICAgIGZvciAodmFyIG1ldGhvZE5hbWUgaW4gcHJvdG8pIHtcbiAgICAgIHZhciBtID0gcHJvdG9bbWV0aG9kTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGhvZE5hbWUgPT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIG1ldGhvZHMucHVzaChtZXRob2ROYW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWV0aG9kcztcbiAgfVxuXG4gIFV0aWxzLkRlY29yYXRlID0gZnVuY3Rpb24gKFN1cGVyQ2xhc3MsIERlY29yYXRvckNsYXNzKSB7XG4gICAgdmFyIGRlY29yYXRlZE1ldGhvZHMgPSBnZXRNZXRob2RzKERlY29yYXRvckNsYXNzKTtcbiAgICB2YXIgc3VwZXJNZXRob2RzID0gZ2V0TWV0aG9kcyhTdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIERlY29yYXRlZENsYXNzICgpIHtcbiAgICAgIHZhciB1bnNoaWZ0ID0gQXJyYXkucHJvdG90eXBlLnVuc2hpZnQ7XG5cbiAgICAgIHZhciBhcmdDb3VudCA9IERlY29yYXRvckNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5sZW5ndGg7XG5cbiAgICAgIHZhciBjYWxsZWRDb25zdHJ1Y3RvciA9IFN1cGVyQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG4gICAgICBpZiAoYXJnQ291bnQgPiAwKSB7XG4gICAgICAgIHVuc2hpZnQuY2FsbChhcmd1bWVudHMsIFN1cGVyQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yKTtcblxuICAgICAgICBjYWxsZWRDb25zdHJ1Y3RvciA9IERlY29yYXRvckNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcbiAgICAgIH1cblxuICAgICAgY2FsbGVkQ29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBEZWNvcmF0b3JDbGFzcy5kaXNwbGF5TmFtZSA9IFN1cGVyQ2xhc3MuZGlzcGxheU5hbWU7XG5cbiAgICBmdW5jdGlvbiBjdHIgKCkge1xuICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IERlY29yYXRlZENsYXNzO1xuICAgIH1cblxuICAgIERlY29yYXRlZENsYXNzLnByb3RvdHlwZSA9IG5ldyBjdHIoKTtcblxuICAgIGZvciAodmFyIG0gPSAwOyBtIDwgc3VwZXJNZXRob2RzLmxlbmd0aDsgbSsrKSB7XG4gICAgICAgIHZhciBzdXBlck1ldGhvZCA9IHN1cGVyTWV0aG9kc1ttXTtcblxuICAgICAgICBEZWNvcmF0ZWRDbGFzcy5wcm90b3R5cGVbc3VwZXJNZXRob2RdID1cbiAgICAgICAgICBTdXBlckNsYXNzLnByb3RvdHlwZVtzdXBlck1ldGhvZF07XG4gICAgfVxuXG4gICAgdmFyIGNhbGxlZE1ldGhvZCA9IGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAgICAvLyBTdHViIG91dCB0aGUgb3JpZ2luYWwgbWV0aG9kIGlmIGl0J3Mgbm90IGRlY29yYXRpbmcgYW4gYWN0dWFsIG1ldGhvZFxuICAgICAgdmFyIG9yaWdpbmFsTWV0aG9kID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAgIGlmIChtZXRob2ROYW1lIGluIERlY29yYXRlZENsYXNzLnByb3RvdHlwZSkge1xuICAgICAgICBvcmlnaW5hbE1ldGhvZCA9IERlY29yYXRlZENsYXNzLnByb3RvdHlwZVttZXRob2ROYW1lXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlY29yYXRlZE1ldGhvZCA9IERlY29yYXRvckNsYXNzLnByb3RvdHlwZVttZXRob2ROYW1lXTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHVuc2hpZnQgPSBBcnJheS5wcm90b3R5cGUudW5zaGlmdDtcblxuICAgICAgICB1bnNoaWZ0LmNhbGwoYXJndW1lbnRzLCBvcmlnaW5hbE1ldGhvZCk7XG5cbiAgICAgICAgcmV0dXJuIGRlY29yYXRlZE1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkZWNvcmF0ZWRNZXRob2RzLmxlbmd0aDsgZCsrKSB7XG4gICAgICB2YXIgZGVjb3JhdGVkTWV0aG9kID0gZGVjb3JhdGVkTWV0aG9kc1tkXTtcblxuICAgICAgRGVjb3JhdGVkQ2xhc3MucHJvdG90eXBlW2RlY29yYXRlZE1ldGhvZF0gPSBjYWxsZWRNZXRob2QoZGVjb3JhdGVkTWV0aG9kKTtcbiAgICB9XG5cbiAgICByZXR1cm4gRGVjb3JhdGVkQ2xhc3M7XG4gIH07XG5cbiAgdmFyIE9ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcbiAgfTtcblxuICBPYnNlcnZhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzIHx8IHt9O1xuXG4gICAgaWYgKGV2ZW50IGluIHRoaXMubGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1tldmVudF0ucHVzaChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50XSA9IFtjYWxsYmFja107XG4gICAgfVxuICB9O1xuXG4gIE9ic2VydmFibGUucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG4gICAgdmFyIHBhcmFtcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMgfHwge307XG5cbiAgICAvLyBQYXJhbXMgc2hvdWxkIGFsd2F5cyBjb21lIGluIGFzIGFuIGFycmF5XG4gICAgaWYgKHBhcmFtcyA9PSBudWxsKSB7XG4gICAgICBwYXJhbXMgPSBbXTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gYXJndW1lbnRzIHRvIHRoZSBldmVudCwgdXNlIGEgdGVtcG9yYXJ5IG9iamVjdFxuICAgIGlmIChwYXJhbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBwYXJhbXMucHVzaCh7fSk7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBgX3R5cGVgIG9mIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIGV2ZW50XG4gICAgcGFyYW1zWzBdLl90eXBlID0gZXZlbnQ7XG5cbiAgICBpZiAoZXZlbnQgaW4gdGhpcy5saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuaW52b2tlKHRoaXMubGlzdGVuZXJzW2V2ZW50XSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICB9XG5cbiAgICBpZiAoJyonIGluIHRoaXMubGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLmludm9rZSh0aGlzLmxpc3RlbmVyc1snKiddLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcblxuICBPYnNlcnZhYmxlLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbiAobGlzdGVuZXJzLCBwYXJhbXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgcGFyYW1zKTtcbiAgICB9XG4gIH07XG5cbiAgVXRpbHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGU7XG5cbiAgVXRpbHMuZ2VuZXJhdGVDaGFycyA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICB2YXIgY2hhcnMgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciByYW5kb21DaGFyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzYpO1xuICAgICAgY2hhcnMgKz0gcmFuZG9tQ2hhci50b1N0cmluZygzNik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoYXJzO1xuICB9O1xuXG4gIFV0aWxzLmJpbmQgPSBmdW5jdGlvbiAoZnVuYywgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICBVdGlscy5fY29udmVydERhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGZvciAodmFyIG9yaWdpbmFsS2V5IGluIGRhdGEpIHtcbiAgICAgIHZhciBrZXlzID0gb3JpZ2luYWxLZXkuc3BsaXQoJy0nKTtcblxuICAgICAgdmFyIGRhdGFMZXZlbCA9IGRhdGE7XG5cbiAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBrZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2tdO1xuXG4gICAgICAgIC8vIExvd2VyY2FzZSB0aGUgZmlyc3QgbGV0dGVyXG4gICAgICAgIC8vIEJ5IGRlZmF1bHQsIGRhc2gtc2VwYXJhdGVkIGJlY29tZXMgY2FtZWxDYXNlXG4gICAgICAgIGtleSA9IGtleS5zdWJzdHJpbmcoMCwgMSkudG9Mb3dlckNhc2UoKSArIGtleS5zdWJzdHJpbmcoMSk7XG5cbiAgICAgICAgaWYgKCEoa2V5IGluIGRhdGFMZXZlbCkpIHtcbiAgICAgICAgICBkYXRhTGV2ZWxba2V5XSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGsgPT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgZGF0YUxldmVsW2tleV0gPSBkYXRhW29yaWdpbmFsS2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFMZXZlbCA9IGRhdGFMZXZlbFtrZXldO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgZGF0YVtvcmlnaW5hbEtleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgVXRpbHMuaGFzU2Nyb2xsID0gZnVuY3Rpb24gKGluZGV4LCBlbCkge1xuICAgIC8vIEFkYXB0ZWQgZnJvbSB0aGUgZnVuY3Rpb24gY3JlYXRlZCBieSBAU2hhZG93U2NyaXB0ZXJcbiAgICAvLyBhbmQgYWRhcHRlZCBieSBAQmlsbEJhcnJ5IG9uIHRoZSBTdGFjayBFeGNoYW5nZSBDb2RlIFJldmlldyB3ZWJzaXRlLlxuICAgIC8vIFRoZSBvcmlnaW5hbCBjb2RlIGNhbiBiZSBmb3VuZCBhdFxuICAgIC8vIGh0dHA6Ly9jb2RlcmV2aWV3LnN0YWNrZXhjaGFuZ2UuY29tL3EvMTMzMzhcbiAgICAvLyBhbmQgd2FzIGRlc2lnbmVkIHRvIGJlIHVzZWQgd2l0aCB0aGUgU2l6emxlIHNlbGVjdG9yIGVuZ2luZS5cblxuICAgIHZhciAkZWwgPSAkKGVsKTtcbiAgICB2YXIgb3ZlcmZsb3dYID0gZWwuc3R5bGUub3ZlcmZsb3dYO1xuICAgIHZhciBvdmVyZmxvd1kgPSBlbC5zdHlsZS5vdmVyZmxvd1k7XG5cbiAgICAvL0NoZWNrIGJvdGggeCBhbmQgeSBkZWNsYXJhdGlvbnNcbiAgICBpZiAob3ZlcmZsb3dYID09PSBvdmVyZmxvd1kgJiZcbiAgICAgICAgKG92ZXJmbG93WSA9PT0gJ2hpZGRlbicgfHwgb3ZlcmZsb3dZID09PSAndmlzaWJsZScpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG92ZXJmbG93WCA9PT0gJ3Njcm9sbCcgfHwgb3ZlcmZsb3dZID09PSAnc2Nyb2xsJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuICgkZWwuaW5uZXJIZWlnaHQoKSA8IGVsLnNjcm9sbEhlaWdodCB8fFxuICAgICAgJGVsLmlubmVyV2lkdGgoKSA8IGVsLnNjcm9sbFdpZHRoKTtcbiAgfTtcblxuICBVdGlscy5lc2NhcGVNYXJrdXAgPSBmdW5jdGlvbiAobWFya3VwKSB7XG4gICAgdmFyIHJlcGxhY2VNYXAgPSB7XG4gICAgICAnXFxcXCc6ICcmIzkyOycsXG4gICAgICAnJic6ICcmYW1wOycsXG4gICAgICAnPCc6ICcmbHQ7JyxcbiAgICAgICc+JzogJyZndDsnLFxuICAgICAgJ1wiJzogJyZxdW90OycsXG4gICAgICAnXFwnJzogJyYjMzk7JyxcbiAgICAgICcvJzogJyYjNDc7J1xuICAgIH07XG5cbiAgICAvLyBEbyBub3QgdHJ5IHRvIGVzY2FwZSB0aGUgbWFya3VwIGlmIGl0J3Mgbm90IGEgc3RyaW5nXG4gICAgaWYgKHR5cGVvZiBtYXJrdXAgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbWFya3VwO1xuICAgIH1cblxuICAgIHJldHVybiBTdHJpbmcobWFya3VwKS5yZXBsYWNlKC9bJjw+XCInXFwvXFxcXF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICByZXR1cm4gcmVwbGFjZU1hcFttYXRjaF07XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQXBwZW5kIGFuIGFycmF5IG9mIGpRdWVyeSBub2RlcyB0byBhIGdpdmVuIGVsZW1lbnQuXG4gIFV0aWxzLmFwcGVuZE1hbnkgPSBmdW5jdGlvbiAoJGVsZW1lbnQsICRub2Rlcykge1xuICAgIC8vIGpRdWVyeSAxLjcueCBkb2VzIG5vdCBzdXBwb3J0ICQuZm4uYXBwZW5kKCkgd2l0aCBhbiBhcnJheVxuICAgIC8vIEZhbGwgYmFjayB0byBhIGpRdWVyeSBvYmplY3QgY29sbGVjdGlvbiB1c2luZyAkLmZuLmFkZCgpXG4gICAgaWYgKCQuZm4uanF1ZXJ5LnN1YnN0cigwLCAzKSA9PT0gJzEuNycpIHtcbiAgICAgIHZhciAkanFOb2RlcyA9ICQoKTtcblxuICAgICAgJC5tYXAoJG5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAkanFOb2RlcyA9ICRqcU5vZGVzLmFkZChub2RlKTtcbiAgICAgIH0pO1xuXG4gICAgICAkbm9kZXMgPSAkanFOb2RlcztcbiAgICB9XG5cbiAgICAkZWxlbWVudC5hcHBlbmQoJG5vZGVzKTtcbiAgfTtcblxuICByZXR1cm4gVXRpbHM7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL3Jlc3VsdHMnLFtcbiAgJ2pxdWVyeScsXG4gICcuL3V0aWxzJ1xuXSwgZnVuY3Rpb24gKCQsIFV0aWxzKSB7XG4gIGZ1bmN0aW9uIFJlc3VsdHMgKCRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcikge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLmRhdGEgPSBkYXRhQWRhcHRlcjtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgUmVzdWx0cy5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIFV0aWxzLkV4dGVuZChSZXN1bHRzLCBVdGlscy5PYnNlcnZhYmxlKTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRyZXN1bHRzID0gJChcbiAgICAgICc8dWwgY2xhc3M9XCJzZWxlY3QyLXJlc3VsdHNfX29wdGlvbnNcIiByb2xlPVwidHJlZVwiPjwvdWw+J1xuICAgICk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnbXVsdGlwbGUnKSkge1xuICAgICAgJHJlc3VsdHMuYXR0cignYXJpYS1tdWx0aXNlbGVjdGFibGUnLCAndHJ1ZScpO1xuICAgIH1cblxuICAgIHRoaXMuJHJlc3VsdHMgPSAkcmVzdWx0cztcblxuICAgIHJldHVybiAkcmVzdWx0cztcbiAgfTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRyZXN1bHRzLmVtcHR5KCk7XG4gIH07XG5cbiAgUmVzdWx0cy5wcm90b3R5cGUuZGlzcGxheU1lc3NhZ2UgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgdmFyIGVzY2FwZU1hcmt1cCA9IHRoaXMub3B0aW9ucy5nZXQoJ2VzY2FwZU1hcmt1cCcpO1xuXG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHRoaXMuaGlkZUxvYWRpbmcoKTtcblxuICAgIHZhciAkbWVzc2FnZSA9ICQoXG4gICAgICAnPGxpIHJvbGU9XCJ0cmVlaXRlbVwiIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiJyArXG4gICAgICAnIGNsYXNzPVwic2VsZWN0Mi1yZXN1bHRzX19vcHRpb25cIj48L2xpPidcbiAgICApO1xuXG4gICAgdmFyIG1lc3NhZ2UgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0cmFuc2xhdGlvbnMnKS5nZXQocGFyYW1zLm1lc3NhZ2UpO1xuXG4gICAgJG1lc3NhZ2UuYXBwZW5kKFxuICAgICAgZXNjYXBlTWFya3VwKFxuICAgICAgICBtZXNzYWdlKHBhcmFtcy5hcmdzKVxuICAgICAgKVxuICAgICk7XG5cbiAgICAkbWVzc2FnZVswXS5jbGFzc05hbWUgKz0gJyBzZWxlY3QyLXJlc3VsdHNfX21lc3NhZ2UnO1xuXG4gICAgdGhpcy4kcmVzdWx0cy5hcHBlbmQoJG1lc3NhZ2UpO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLmhpZGVNZXNzYWdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRyZXN1bHRzLmZpbmQoJy5zZWxlY3QyLXJlc3VsdHNfX21lc3NhZ2UnKS5yZW1vdmUoKTtcbiAgfTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHRoaXMuaGlkZUxvYWRpbmcoKTtcblxuICAgIHZhciAkb3B0aW9ucyA9IFtdO1xuXG4gICAgaWYgKGRhdGEucmVzdWx0cyA9PSBudWxsIHx8IGRhdGEucmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmICh0aGlzLiRyZXN1bHRzLmNoaWxkcmVuKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVzdWx0czptZXNzYWdlJywge1xuICAgICAgICAgIG1lc3NhZ2U6ICdub1Jlc3VsdHMnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGF0YS5yZXN1bHRzID0gdGhpcy5zb3J0KGRhdGEucmVzdWx0cyk7XG5cbiAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRhdGEucmVzdWx0cy5sZW5ndGg7IGQrKykge1xuICAgICAgdmFyIGl0ZW0gPSBkYXRhLnJlc3VsdHNbZF07XG5cbiAgICAgIHZhciAkb3B0aW9uID0gdGhpcy5vcHRpb24oaXRlbSk7XG5cbiAgICAgICRvcHRpb25zLnB1c2goJG9wdGlvbik7XG4gICAgfVxuXG4gICAgdGhpcy4kcmVzdWx0cy5hcHBlbmQoJG9wdGlvbnMpO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCRyZXN1bHRzLCAkZHJvcGRvd24pIHtcbiAgICB2YXIgJHJlc3VsdHNDb250YWluZXIgPSAkZHJvcGRvd24uZmluZCgnLnNlbGVjdDItcmVzdWx0cycpO1xuICAgICRyZXN1bHRzQ29udGFpbmVyLmFwcGVuZCgkcmVzdWx0cyk7XG4gIH07XG5cbiAgUmVzdWx0cy5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIHNvcnRlciA9IHRoaXMub3B0aW9ucy5nZXQoJ3NvcnRlcicpO1xuXG4gICAgcmV0dXJuIHNvcnRlcihkYXRhKTtcbiAgfTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5oaWdobGlnaHRGaXJzdEl0ZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRvcHRpb25zID0gdGhpcy4kcmVzdWx0c1xuICAgICAgLmZpbmQoJy5zZWxlY3QyLXJlc3VsdHNfX29wdGlvblthcmlhLXNlbGVjdGVkXScpO1xuXG4gICAgdmFyICRzZWxlY3RlZCA9ICRvcHRpb25zLmZpbHRlcignW2FyaWEtc2VsZWN0ZWQ9dHJ1ZV0nKTtcblxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBhbnkgc2VsZWN0ZWQgb3B0aW9uc1xuICAgIGlmICgkc2VsZWN0ZWQubGVuZ3RoID4gMCkge1xuICAgICAgLy8gSWYgdGhlcmUgYXJlIHNlbGVjdGVkIG9wdGlvbnMsIGhpZ2hsaWdodCB0aGUgZmlyc3RcbiAgICAgICRzZWxlY3RlZC5maXJzdCgpLnRyaWdnZXIoJ21vdXNlZW50ZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHNlbGVjdGVkIG9wdGlvbnMsIGhpZ2hsaWdodCB0aGUgZmlyc3Qgb3B0aW9uXG4gICAgICAvLyBpbiB0aGUgZHJvcGRvd25cbiAgICAgICRvcHRpb25zLmZpcnN0KCkudHJpZ2dlcignbW91c2VlbnRlcicpO1xuICAgIH1cblxuICAgIHRoaXMuZW5zdXJlSGlnaGxpZ2h0VmlzaWJsZSgpO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLnNldENsYXNzZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy5kYXRhLmN1cnJlbnQoZnVuY3Rpb24gKHNlbGVjdGVkKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRJZHMgPSAkLm1hcChzZWxlY3RlZCwgZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIHMuaWQudG9TdHJpbmcoKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgJG9wdGlvbnMgPSBzZWxmLiRyZXN1bHRzXG4gICAgICAgIC5maW5kKCcuc2VsZWN0Mi1yZXN1bHRzX19vcHRpb25bYXJpYS1zZWxlY3RlZF0nKTtcblxuICAgICAgJG9wdGlvbnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkb3B0aW9uID0gJCh0aGlzKTtcblxuICAgICAgICB2YXIgaXRlbSA9ICQuZGF0YSh0aGlzLCAnZGF0YScpO1xuXG4gICAgICAgIC8vIGlkIG5lZWRzIHRvIGJlIGNvbnZlcnRlZCB0byBhIHN0cmluZyB3aGVuIGNvbXBhcmluZ1xuICAgICAgICB2YXIgaWQgPSAnJyArIGl0ZW0uaWQ7XG5cbiAgICAgICAgaWYgKChpdGVtLmVsZW1lbnQgIT0gbnVsbCAmJiBpdGVtLmVsZW1lbnQuc2VsZWN0ZWQpIHx8XG4gICAgICAgICAgICAoaXRlbS5lbGVtZW50ID09IG51bGwgJiYgJC5pbkFycmF5KGlkLCBzZWxlY3RlZElkcykgPiAtMSkpIHtcbiAgICAgICAgICAkb3B0aW9uLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRvcHRpb24uYXR0cignYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLnNob3dMb2FkaW5nID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHRoaXMuaGlkZUxvYWRpbmcoKTtcblxuICAgIHZhciBsb2FkaW5nTW9yZSA9IHRoaXMub3B0aW9ucy5nZXQoJ3RyYW5zbGF0aW9ucycpLmdldCgnc2VhcmNoaW5nJyk7XG5cbiAgICB2YXIgbG9hZGluZyA9IHtcbiAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgIHRleHQ6IGxvYWRpbmdNb3JlKHBhcmFtcylcbiAgICB9O1xuICAgIHZhciAkbG9hZGluZyA9IHRoaXMub3B0aW9uKGxvYWRpbmcpO1xuICAgICRsb2FkaW5nLmNsYXNzTmFtZSArPSAnIGxvYWRpbmctcmVzdWx0cyc7XG5cbiAgICB0aGlzLiRyZXN1bHRzLnByZXBlbmQoJGxvYWRpbmcpO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLmhpZGVMb2FkaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJHJlc3VsdHMuZmluZCgnLmxvYWRpbmctcmVzdWx0cycpLnJlbW92ZSgpO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLm9wdGlvbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgb3B0aW9uLmNsYXNzTmFtZSA9ICdzZWxlY3QyLXJlc3VsdHNfX29wdGlvbic7XG5cbiAgICB2YXIgYXR0cnMgPSB7XG4gICAgICAncm9sZSc6ICd0cmVlaXRlbScsXG4gICAgICAnYXJpYS1zZWxlY3RlZCc6ICdmYWxzZSdcbiAgICB9O1xuXG4gICAgaWYgKGRhdGEuZGlzYWJsZWQpIHtcbiAgICAgIGRlbGV0ZSBhdHRyc1snYXJpYS1zZWxlY3RlZCddO1xuICAgICAgYXR0cnNbJ2FyaWEtZGlzYWJsZWQnXSA9ICd0cnVlJztcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5pZCA9PSBudWxsKSB7XG4gICAgICBkZWxldGUgYXR0cnNbJ2FyaWEtc2VsZWN0ZWQnXTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5fcmVzdWx0SWQgIT0gbnVsbCkge1xuICAgICAgb3B0aW9uLmlkID0gZGF0YS5fcmVzdWx0SWQ7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEudGl0bGUpIHtcbiAgICAgIG9wdGlvbi50aXRsZSA9IGRhdGEudGl0bGU7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuY2hpbGRyZW4pIHtcbiAgICAgIGF0dHJzLnJvbGUgPSAnZ3JvdXAnO1xuICAgICAgYXR0cnNbJ2FyaWEtbGFiZWwnXSA9IGRhdGEudGV4dDtcbiAgICAgIGRlbGV0ZSBhdHRyc1snYXJpYS1zZWxlY3RlZCddO1xuICAgIH1cblxuICAgIGZvciAodmFyIGF0dHIgaW4gYXR0cnMpIHtcbiAgICAgIHZhciB2YWwgPSBhdHRyc1thdHRyXTtcblxuICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZShhdHRyLCB2YWwpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmNoaWxkcmVuKSB7XG4gICAgICB2YXIgJG9wdGlvbiA9ICQob3B0aW9uKTtcblxuICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3Ryb25nJyk7XG4gICAgICBsYWJlbC5jbGFzc05hbWUgPSAnc2VsZWN0Mi1yZXN1bHRzX19ncm91cCc7XG5cbiAgICAgIHZhciAkbGFiZWwgPSAkKGxhYmVsKTtcbiAgICAgIHRoaXMudGVtcGxhdGUoZGF0YSwgbGFiZWwpO1xuXG4gICAgICB2YXIgJGNoaWxkcmVuID0gW107XG5cbiAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgZGF0YS5jaGlsZHJlbi5sZW5ndGg7IGMrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBkYXRhLmNoaWxkcmVuW2NdO1xuXG4gICAgICAgIHZhciAkY2hpbGQgPSB0aGlzLm9wdGlvbihjaGlsZCk7XG5cbiAgICAgICAgJGNoaWxkcmVuLnB1c2goJGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgdmFyICRjaGlsZHJlbkNvbnRhaW5lciA9ICQoJzx1bD48L3VsPicsIHtcbiAgICAgICAgJ2NsYXNzJzogJ3NlbGVjdDItcmVzdWx0c19fb3B0aW9ucyBzZWxlY3QyLXJlc3VsdHNfX29wdGlvbnMtLW5lc3RlZCdcbiAgICAgIH0pO1xuXG4gICAgICAkY2hpbGRyZW5Db250YWluZXIuYXBwZW5kKCRjaGlsZHJlbik7XG5cbiAgICAgICRvcHRpb24uYXBwZW5kKGxhYmVsKTtcbiAgICAgICRvcHRpb24uYXBwZW5kKCRjaGlsZHJlbkNvbnRhaW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGVtcGxhdGUoZGF0YSwgb3B0aW9uKTtcbiAgICB9XG5cbiAgICAkLmRhdGEob3B0aW9uLCAnZGF0YScsIGRhdGEpO1xuXG4gICAgcmV0dXJuIG9wdGlvbjtcbiAgfTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBpZCA9IGNvbnRhaW5lci5pZCArICctcmVzdWx0cyc7XG5cbiAgICB0aGlzLiRyZXN1bHRzLmF0dHIoJ2lkJywgaWQpO1xuXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmFsbCcsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHNlbGYuY2xlYXIoKTtcbiAgICAgIHNlbGYuYXBwZW5kKHBhcmFtcy5kYXRhKTtcblxuICAgICAgaWYgKGNvbnRhaW5lci5pc09wZW4oKSkge1xuICAgICAgICBzZWxmLnNldENsYXNzZXMoKTtcbiAgICAgICAgc2VsZi5oaWdobGlnaHRGaXJzdEl0ZW0oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czphcHBlbmQnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBzZWxmLmFwcGVuZChwYXJhbXMuZGF0YSk7XG5cbiAgICAgIGlmIChjb250YWluZXIuaXNPcGVuKCkpIHtcbiAgICAgICAgc2VsZi5zZXRDbGFzc2VzKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ3F1ZXJ5JywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgc2VsZi5oaWRlTWVzc2FnZXMoKTtcbiAgICAgIHNlbGYuc2hvd0xvYWRpbmcocGFyYW1zKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFjb250YWluZXIuaXNPcGVuKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnNldENsYXNzZXMoKTtcbiAgICAgIHNlbGYuaGlnaGxpZ2h0Rmlyc3RJdGVtKCk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ3Vuc2VsZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFjb250YWluZXIuaXNPcGVuKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnNldENsYXNzZXMoKTtcbiAgICAgIHNlbGYuaGlnaGxpZ2h0Rmlyc3RJdGVtKCk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBXaGVuIHRoZSBkcm9wZG93biBpcyBvcGVuLCBhcmlhLWV4cGVuZGVkPVwidHJ1ZVwiXG4gICAgICBzZWxmLiRyZXN1bHRzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgc2VsZi4kcmVzdWx0cy5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICBzZWxmLnNldENsYXNzZXMoKTtcbiAgICAgIHNlbGYuZW5zdXJlSGlnaGxpZ2h0VmlzaWJsZSgpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFdoZW4gdGhlIGRyb3Bkb3duIGlzIGNsb3NlZCwgYXJpYS1leHBlbmRlZD1cImZhbHNlXCJcbiAgICAgIHNlbGYuJHJlc3VsdHMuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgc2VsZi4kcmVzdWx0cy5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICBzZWxmLiRyZXN1bHRzLnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOnRvZ2dsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSBzZWxmLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xuXG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICRoaWdobGlnaHRlZC50cmlnZ2VyKCdtb3VzZXVwJyk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6c2VsZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRoaWdobGlnaHRlZCA9IHNlbGYuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7XG5cbiAgICAgIGlmICgkaGlnaGxpZ2h0ZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGEgPSAkaGlnaGxpZ2h0ZWQuZGF0YSgnZGF0YScpO1xuXG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnKSA9PSAndHJ1ZScpIHtcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdjbG9zZScsIHt9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0Jywge1xuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6cHJldmlvdXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJGhpZ2hsaWdodGVkID0gc2VsZi5nZXRIaWdobGlnaHRlZFJlc3VsdHMoKTtcblxuICAgICAgdmFyICRvcHRpb25zID0gc2VsZi4kcmVzdWx0cy5maW5kKCdbYXJpYS1zZWxlY3RlZF0nKTtcblxuICAgICAgdmFyIGN1cnJlbnRJbmRleCA9ICRvcHRpb25zLmluZGV4KCRoaWdobGlnaHRlZCk7XG5cbiAgICAgIC8vIElmIHdlIGFyZSBhbHJlYWR5IGF0IHRlIHRvcCwgZG9uJ3QgbW92ZSBmdXJ0aGVyXG4gICAgICBpZiAoY3VycmVudEluZGV4ID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG5leHRJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7XG5cbiAgICAgIC8vIElmIG5vbmUgYXJlIGhpZ2hsaWdodGVkLCBoaWdobGlnaHQgdGhlIGZpcnN0XG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuZXh0SW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgJG5leHQgPSAkb3B0aW9ucy5lcShuZXh0SW5kZXgpO1xuXG4gICAgICAkbmV4dC50cmlnZ2VyKCdtb3VzZWVudGVyJyk7XG5cbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gc2VsZi4kcmVzdWx0cy5vZmZzZXQoKS50b3A7XG4gICAgICB2YXIgbmV4dFRvcCA9ICRuZXh0Lm9mZnNldCgpLnRvcDtcbiAgICAgIHZhciBuZXh0T2Zmc2V0ID0gc2VsZi4kcmVzdWx0cy5zY3JvbGxUb3AoKSArIChuZXh0VG9wIC0gY3VycmVudE9mZnNldCk7XG5cbiAgICAgIGlmIChuZXh0SW5kZXggPT09IDApIHtcbiAgICAgICAgc2VsZi4kcmVzdWx0cy5zY3JvbGxUb3AoMCk7XG4gICAgICB9IGVsc2UgaWYgKG5leHRUb3AgLSBjdXJyZW50T2Zmc2V0IDwgMCkge1xuICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcChuZXh0T2Zmc2V0KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czpuZXh0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRoaWdobGlnaHRlZCA9IHNlbGYuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7XG5cbiAgICAgIHZhciAkb3B0aW9ucyA9IHNlbGYuJHJlc3VsdHMuZmluZCgnW2FyaWEtc2VsZWN0ZWRdJyk7XG5cbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSAkb3B0aW9ucy5pbmRleCgkaGlnaGxpZ2h0ZWQpO1xuXG4gICAgICB2YXIgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ICsgMTtcblxuICAgICAgLy8gSWYgd2UgYXJlIGF0IHRoZSBsYXN0IG9wdGlvbiwgc3RheSB0aGVyZVxuICAgICAgaWYgKG5leHRJbmRleCA+PSAkb3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgJG5leHQgPSAkb3B0aW9ucy5lcShuZXh0SW5kZXgpO1xuXG4gICAgICAkbmV4dC50cmlnZ2VyKCdtb3VzZWVudGVyJyk7XG5cbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gc2VsZi4kcmVzdWx0cy5vZmZzZXQoKS50b3AgK1xuICAgICAgICBzZWxmLiRyZXN1bHRzLm91dGVySGVpZ2h0KGZhbHNlKTtcbiAgICAgIHZhciBuZXh0Qm90dG9tID0gJG5leHQub2Zmc2V0KCkudG9wICsgJG5leHQub3V0ZXJIZWlnaHQoZmFsc2UpO1xuICAgICAgdmFyIG5leHRPZmZzZXQgPSBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgpICsgbmV4dEJvdHRvbSAtIGN1cnJlbnRPZmZzZXQ7XG5cbiAgICAgIGlmIChuZXh0SW5kZXggPT09IDApIHtcbiAgICAgICAgc2VsZi4kcmVzdWx0cy5zY3JvbGxUb3AoMCk7XG4gICAgICB9IGVsc2UgaWYgKG5leHRCb3R0b20gPiBjdXJyZW50T2Zmc2V0KSB7XG4gICAgICAgIHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKG5leHRPZmZzZXQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmZvY3VzJywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgcGFyYW1zLmVsZW1lbnQuYWRkQ2xhc3MoJ3NlbGVjdDItcmVzdWx0c19fb3B0aW9uLS1oaWdobGlnaHRlZCcpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOm1lc3NhZ2UnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBzZWxmLmRpc3BsYXlNZXNzYWdlKHBhcmFtcyk7XG4gICAgfSk7XG5cbiAgICBpZiAoJC5mbi5tb3VzZXdoZWVsKSB7XG4gICAgICB0aGlzLiRyZXN1bHRzLm9uKCdtb3VzZXdoZWVsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHRvcCA9IHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKCk7XG5cbiAgICAgICAgdmFyIGJvdHRvbSA9IHNlbGYuJHJlc3VsdHMuZ2V0KDApLnNjcm9sbEhlaWdodCAtIHRvcCArIGUuZGVsdGFZO1xuXG4gICAgICAgIHZhciBpc0F0VG9wID0gZS5kZWx0YVkgPiAwICYmIHRvcCAtIGUuZGVsdGFZIDw9IDA7XG4gICAgICAgIHZhciBpc0F0Qm90dG9tID0gZS5kZWx0YVkgPCAwICYmIGJvdHRvbSA8PSBzZWxmLiRyZXN1bHRzLmhlaWdodCgpO1xuXG4gICAgICAgIGlmIChpc0F0VG9wKSB7XG4gICAgICAgICAgc2VsZi4kcmVzdWx0cy5zY3JvbGxUb3AoMCk7XG5cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0F0Qm90dG9tKSB7XG4gICAgICAgICAgc2VsZi4kcmVzdWx0cy5zY3JvbGxUb3AoXG4gICAgICAgICAgICBzZWxmLiRyZXN1bHRzLmdldCgwKS5zY3JvbGxIZWlnaHQgLSBzZWxmLiRyZXN1bHRzLmhlaWdodCgpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLiRyZXN1bHRzLm9uKCdtb3VzZXVwJywgJy5zZWxlY3QyLXJlc3VsdHNfX29wdGlvblthcmlhLXNlbGVjdGVkXScsXG4gICAgICBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXG4gICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoJ2RhdGEnKTtcblxuICAgICAgaWYgKCR0aGlzLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMuZ2V0KCdtdWx0aXBsZScpKSB7XG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCd1bnNlbGVjdCcsIHtcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dCxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ2Nsb3NlJywge30pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnRyaWdnZXIoJ3NlbGVjdCcsIHtcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0LFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuJHJlc3VsdHMub24oJ21vdXNlZW50ZXInLCAnLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdJyxcbiAgICAgIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKCdkYXRhJyk7XG5cbiAgICAgIHNlbGYuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKClcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItcmVzdWx0c19fb3B0aW9uLS1oaWdobGlnaHRlZCcpO1xuXG4gICAgICBzZWxmLnRyaWdnZXIoJ3Jlc3VsdHM6Zm9jdXMnLCB7XG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGVsZW1lbnQ6ICQodGhpcylcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLmdldEhpZ2hsaWdodGVkUmVzdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGhpZ2hsaWdodGVkID0gdGhpcy4kcmVzdWx0c1xuICAgIC5maW5kKCcuc2VsZWN0Mi1yZXN1bHRzX19vcHRpb24tLWhpZ2hsaWdodGVkJyk7XG5cbiAgICByZXR1cm4gJGhpZ2hsaWdodGVkO1xuICB9O1xuXG4gIFJlc3VsdHMucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kcmVzdWx0cy5yZW1vdmUoKTtcbiAgfTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5lbnN1cmVIaWdobGlnaHRWaXNpYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSB0aGlzLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xuXG4gICAgaWYgKCRoaWdobGlnaHRlZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgJG9wdGlvbnMgPSB0aGlzLiRyZXN1bHRzLmZpbmQoJ1thcmlhLXNlbGVjdGVkXScpO1xuXG4gICAgdmFyIGN1cnJlbnRJbmRleCA9ICRvcHRpb25zLmluZGV4KCRoaWdobGlnaHRlZCk7XG5cbiAgICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMuJHJlc3VsdHMub2Zmc2V0KCkudG9wO1xuICAgIHZhciBuZXh0VG9wID0gJGhpZ2hsaWdodGVkLm9mZnNldCgpLnRvcDtcbiAgICB2YXIgbmV4dE9mZnNldCA9IHRoaXMuJHJlc3VsdHMuc2Nyb2xsVG9wKCkgKyAobmV4dFRvcCAtIGN1cnJlbnRPZmZzZXQpO1xuXG4gICAgdmFyIG9mZnNldERlbHRhID0gbmV4dFRvcCAtIGN1cnJlbnRPZmZzZXQ7XG4gICAgbmV4dE9mZnNldCAtPSAkaGlnaGxpZ2h0ZWQub3V0ZXJIZWlnaHQoZmFsc2UpICogMjtcblxuICAgIGlmIChjdXJyZW50SW5kZXggPD0gMikge1xuICAgICAgdGhpcy4kcmVzdWx0cy5zY3JvbGxUb3AoMCk7XG4gICAgfSBlbHNlIGlmIChvZmZzZXREZWx0YSA+IHRoaXMuJHJlc3VsdHMub3V0ZXJIZWlnaHQoKSB8fCBvZmZzZXREZWx0YSA8IDApIHtcbiAgICAgIHRoaXMuJHJlc3VsdHMuc2Nyb2xsVG9wKG5leHRPZmZzZXQpO1xuICAgIH1cbiAgfTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS50ZW1wbGF0ZSA9IGZ1bmN0aW9uIChyZXN1bHQsIGNvbnRhaW5lcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMub3B0aW9ucy5nZXQoJ3RlbXBsYXRlUmVzdWx0Jyk7XG4gICAgdmFyIGVzY2FwZU1hcmt1cCA9IHRoaXMub3B0aW9ucy5nZXQoJ2VzY2FwZU1hcmt1cCcpO1xuXG4gICAgdmFyIGNvbnRlbnQgPSB0ZW1wbGF0ZShyZXN1bHQsIGNvbnRhaW5lcik7XG5cbiAgICBpZiAoY29udGVudCA9PSBudWxsKSB7XG4gICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IGVzY2FwZU1hcmt1cChjb250ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChjb250YWluZXIpLmFwcGVuZChjb250ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlc3VsdHM7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2tleXMnLFtcblxuXSwgZnVuY3Rpb24gKCkge1xuICB2YXIgS0VZUyA9IHtcbiAgICBCQUNLU1BBQ0U6IDgsXG4gICAgVEFCOiA5LFxuICAgIEVOVEVSOiAxMyxcbiAgICBTSElGVDogMTYsXG4gICAgQ1RSTDogMTcsXG4gICAgQUxUOiAxOCxcbiAgICBFU0M6IDI3LFxuICAgIFNQQUNFOiAzMixcbiAgICBQQUdFX1VQOiAzMyxcbiAgICBQQUdFX0RPV046IDM0LFxuICAgIEVORDogMzUsXG4gICAgSE9NRTogMzYsXG4gICAgTEVGVDogMzcsXG4gICAgVVA6IDM4LFxuICAgIFJJR0hUOiAzOSxcbiAgICBET1dOOiA0MCxcbiAgICBERUxFVEU6IDQ2XG4gIH07XG5cbiAgcmV0dXJuIEtFWVM7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9iYXNlJyxbXG4gICdqcXVlcnknLFxuICAnLi4vdXRpbHMnLFxuICAnLi4va2V5cydcbl0sIGZ1bmN0aW9uICgkLCBVdGlscywgS0VZUykge1xuICBmdW5jdGlvbiBCYXNlU2VsZWN0aW9uICgkZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgQmFzZVNlbGVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIFV0aWxzLkV4dGVuZChCYXNlU2VsZWN0aW9uLCBVdGlscy5PYnNlcnZhYmxlKTtcblxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRzZWxlY3Rpb24gPSAkKFxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25cIiByb2xlPVwiY29tYm9ib3hcIiAnICtcbiAgICAgICcgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj4nICtcbiAgICAgICc8L3NwYW4+J1xuICAgICk7XG5cbiAgICB0aGlzLl90YWJpbmRleCA9IDA7XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5kYXRhKCdvbGQtdGFiaW5kZXgnKSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl90YWJpbmRleCA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnb2xkLXRhYmluZGV4Jyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fdGFiaW5kZXggPSB0aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgfVxuXG4gICAgJHNlbGVjdGlvbi5hdHRyKCd0aXRsZScsIHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnKSk7XG4gICAgJHNlbGVjdGlvbi5hdHRyKCd0YWJpbmRleCcsIHRoaXMuX3RhYmluZGV4KTtcblxuICAgIHRoaXMuJHNlbGVjdGlvbiA9ICRzZWxlY3Rpb247XG5cbiAgICByZXR1cm4gJHNlbGVjdGlvbjtcbiAgfTtcblxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBpZCA9IGNvbnRhaW5lci5pZCArICctY29udGFpbmVyJztcbiAgICB2YXIgcmVzdWx0c0lkID0gY29udGFpbmVyLmlkICsgJy1yZXN1bHRzJztcblxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdmb2N1cycsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHNlbGYudHJpZ2dlcignZm9jdXMnLCBldnQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdibHVyJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgc2VsZi5faGFuZGxlQmx1cihldnQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgc2VsZi50cmlnZ2VyKCdrZXlwcmVzcycsIGV2dCk7XG5cbiAgICAgIGlmIChldnQud2hpY2ggPT09IEtFWVMuU1BBQ0UpIHtcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6Zm9jdXMnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBzZWxmLiRzZWxlY3Rpb24uYXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgcGFyYW1zLmRhdGEuX3Jlc3VsdElkKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0aW9uOnVwZGF0ZScsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHNlbGYudXBkYXRlKHBhcmFtcy5kYXRhKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFdoZW4gdGhlIGRyb3Bkb3duIGlzIG9wZW4sIGFyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCdhcmlhLW93bnMnLCByZXN1bHRzSWQpO1xuXG4gICAgICBzZWxmLl9hdHRhY2hDbG9zZUhhbmRsZXIoY29udGFpbmVyKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBXaGVuIHRoZSBkcm9wZG93biBpcyBjbG9zZWQsIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiXG4gICAgICBzZWxmLiRzZWxlY3Rpb24uYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgc2VsZi4kc2VsZWN0aW9uLnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xuICAgICAgc2VsZi4kc2VsZWN0aW9uLnJlbW92ZUF0dHIoJ2FyaWEtb3ducycpO1xuXG4gICAgICBzZWxmLiRzZWxlY3Rpb24uZm9jdXMoKTtcblxuICAgICAgc2VsZi5fZGV0YWNoQ2xvc2VIYW5kbGVyKGNvbnRhaW5lcik7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ2VuYWJsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCd0YWJpbmRleCcsIHNlbGYuX3RhYmluZGV4KTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbignZGlzYWJsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCd0YWJpbmRleCcsICctMScpO1xuICAgIH0pO1xuICB9O1xuXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLl9oYW5kbGVCbHVyID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIFRoaXMgbmVlZHMgdG8gYmUgZGVsYXllZCBhcyB0aGUgYWN0aXZlIGVsZW1lbnQgaXMgdGhlIGJvZHkgd2hlbiB0aGUgdGFiXG4gICAgLy8ga2V5IGlzIHByZXNzZWQsIHBvc3NpYmx5IGFsb25nIHdpdGggb3RoZXJzLlxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIERvbid0IHRyaWdnZXIgYGJsdXJgIGlmIHRoZSBmb2N1cyBpcyBzdGlsbCBpbiB0aGUgc2VsZWN0aW9uXG4gICAgICBpZiAoXG4gICAgICAgIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09IHNlbGYuJHNlbGVjdGlvblswXSkgfHxcbiAgICAgICAgKCQuY29udGFpbnMoc2VsZi4kc2VsZWN0aW9uWzBdLCBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYudHJpZ2dlcignYmx1cicsIGV2dCk7XG4gICAgfSwgMSk7XG4gIH07XG5cbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUuX2F0dGFjaENsb3NlSGFuZGxlciA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAkKGRvY3VtZW50LmJvZHkpLm9uKCdtb3VzZWRvd24uc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyICR0YXJnZXQgPSAkKGUudGFyZ2V0KTtcblxuICAgICAgdmFyICRzZWxlY3QgPSAkdGFyZ2V0LmNsb3Nlc3QoJy5zZWxlY3QyJyk7XG5cbiAgICAgIHZhciAkYWxsID0gJCgnLnNlbGVjdDIuc2VsZWN0Mi1jb250YWluZXItLW9wZW4nKTtcblxuICAgICAgJGFsbC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcblxuICAgICAgICBpZiAodGhpcyA9PSAkc2VsZWN0WzBdKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyICRlbGVtZW50ID0gJHRoaXMuZGF0YSgnZWxlbWVudCcpO1xuXG4gICAgICAgICRlbGVtZW50LnNlbGVjdDIoJ2Nsb3NlJyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS5fZGV0YWNoQ2xvc2VIYW5kbGVyID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgICQoZG9jdW1lbnQuYm9keSkub2ZmKCdtb3VzZWRvd24uc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkKTtcbiAgfTtcblxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS5wb3NpdGlvbiA9IGZ1bmN0aW9uICgkc2VsZWN0aW9uLCAkY29udGFpbmVyKSB7XG4gICAgdmFyICRzZWxlY3Rpb25Db250YWluZXIgPSAkY29udGFpbmVyLmZpbmQoJy5zZWxlY3Rpb24nKTtcbiAgICAkc2VsZWN0aW9uQ29udGFpbmVyLmFwcGVuZCgkc2VsZWN0aW9uKTtcbiAgfTtcblxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2RldGFjaENsb3NlSGFuZGxlcih0aGlzLmNvbnRhaW5lcik7XG4gIH07XG5cbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgdXBkYXRlYCBtZXRob2QgbXVzdCBiZSBkZWZpbmVkIGluIGNoaWxkIGNsYXNzZXMuJyk7XG4gIH07XG5cbiAgcmV0dXJuIEJhc2VTZWxlY3Rpb247XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9zaW5nbGUnLFtcbiAgJ2pxdWVyeScsXG4gICcuL2Jhc2UnLFxuICAnLi4vdXRpbHMnLFxuICAnLi4va2V5cydcbl0sIGZ1bmN0aW9uICgkLCBCYXNlU2VsZWN0aW9uLCBVdGlscywgS0VZUykge1xuICBmdW5jdGlvbiBTaW5nbGVTZWxlY3Rpb24gKCkge1xuICAgIFNpbmdsZVNlbGVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFV0aWxzLkV4dGVuZChTaW5nbGVTZWxlY3Rpb24sIEJhc2VTZWxlY3Rpb24pO1xuXG4gIFNpbmdsZVNlbGVjdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkc2VsZWN0aW9uID0gU2luZ2xlU2VsZWN0aW9uLl9fc3VwZXJfXy5yZW5kZXIuY2FsbCh0aGlzKTtcblxuICAgICRzZWxlY3Rpb24uYWRkQ2xhc3MoJ3NlbGVjdDItc2VsZWN0aW9uLS1zaW5nbGUnKTtcblxuICAgICRzZWxlY3Rpb24uaHRtbChcbiAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZFwiPjwvc3Bhbj4nICtcbiAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdDItc2VsZWN0aW9uX19hcnJvd1wiIHJvbGU9XCJwcmVzZW50YXRpb25cIj4nICtcbiAgICAgICAgJzxiIHJvbGU9XCJwcmVzZW50YXRpb25cIj48L2I+JyArXG4gICAgICAnPC9zcGFuPidcbiAgICApO1xuXG4gICAgcmV0dXJuICRzZWxlY3Rpb247XG4gIH07XG5cbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIFNpbmdsZVNlbGVjdGlvbi5fX3N1cGVyX18uYmluZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdmFyIGlkID0gY29udGFpbmVyLmlkICsgJy1jb250YWluZXInO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKS5hdHRyKCdpZCcsIGlkKTtcbiAgICB0aGlzLiRzZWxlY3Rpb24uYXR0cignYXJpYS1sYWJlbGxlZGJ5JywgaWQpO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAvLyBPbmx5IHJlc3BvbmQgdG8gbGVmdCBjbGlja3NcbiAgICAgIGlmIChldnQud2hpY2ggIT09IDEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnRyaWdnZXIoJ3RvZ2dsZScsIHtcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignZm9jdXMnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAvLyBVc2VyIGZvY3VzZXMgb24gdGhlIGNvbnRhaW5lclxuICAgIH0pO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdibHVyJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgLy8gVXNlciBleGl0cyB0aGUgY29udGFpbmVyXG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ2ZvY3VzJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgaWYgKCFjb250YWluZXIuaXNPcGVuKCkpIHtcbiAgICAgICAgc2VsZi4kc2VsZWN0aW9uLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ3NlbGVjdGlvbjp1cGRhdGUnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBzZWxmLnVwZGF0ZShwYXJhbXMuZGF0YSk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpLmVtcHR5KCk7XG4gIH07XG5cbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS5kaXNwbGF5ID0gZnVuY3Rpb24gKGRhdGEsIGNvbnRhaW5lcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMub3B0aW9ucy5nZXQoJ3RlbXBsYXRlU2VsZWN0aW9uJyk7XG4gICAgdmFyIGVzY2FwZU1hcmt1cCA9IHRoaXMub3B0aW9ucy5nZXQoJ2VzY2FwZU1hcmt1cCcpO1xuXG4gICAgcmV0dXJuIGVzY2FwZU1hcmt1cCh0ZW1wbGF0ZShkYXRhLCBjb250YWluZXIpKTtcbiAgfTtcblxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLnNlbGVjdGlvbkNvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJCgnPHNwYW4+PC9zcGFuPicpO1xuICB9O1xuXG4gIFNpbmdsZVNlbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2VsZWN0aW9uID0gZGF0YVswXTtcblxuICAgIHZhciAkcmVuZGVyZWQgPSB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpO1xuICAgIHZhciBmb3JtYXR0ZWQgPSB0aGlzLmRpc3BsYXkoc2VsZWN0aW9uLCAkcmVuZGVyZWQpO1xuXG4gICAgJHJlbmRlcmVkLmVtcHR5KCkuYXBwZW5kKGZvcm1hdHRlZCk7XG4gICAgJHJlbmRlcmVkLnByb3AoJ3RpdGxlJywgc2VsZWN0aW9uLnRpdGxlIHx8IHNlbGVjdGlvbi50ZXh0KTtcbiAgfTtcblxuICByZXR1cm4gU2luZ2xlU2VsZWN0aW9uO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9zZWxlY3Rpb24vbXVsdGlwbGUnLFtcbiAgJ2pxdWVyeScsXG4gICcuL2Jhc2UnLFxuICAnLi4vdXRpbHMnXG5dLCBmdW5jdGlvbiAoJCwgQmFzZVNlbGVjdGlvbiwgVXRpbHMpIHtcbiAgZnVuY3Rpb24gTXVsdGlwbGVTZWxlY3Rpb24gKCRlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgTXVsdGlwbGVTZWxlY3Rpb24uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBVdGlscy5FeHRlbmQoTXVsdGlwbGVTZWxlY3Rpb24sIEJhc2VTZWxlY3Rpb24pO1xuXG4gIE11bHRpcGxlU2VsZWN0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRzZWxlY3Rpb24gPSBNdWx0aXBsZVNlbGVjdGlvbi5fX3N1cGVyX18ucmVuZGVyLmNhbGwodGhpcyk7XG5cbiAgICAkc2VsZWN0aW9uLmFkZENsYXNzKCdzZWxlY3QyLXNlbGVjdGlvbi0tbXVsdGlwbGUnKTtcblxuICAgICRzZWxlY3Rpb24uaHRtbChcbiAgICAgICc8dWwgY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWRcIj48L3VsPidcbiAgICApO1xuXG4gICAgcmV0dXJuICRzZWxlY3Rpb247XG4gIH07XG5cbiAgTXVsdGlwbGVTZWxlY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgTXVsdGlwbGVTZWxlY3Rpb24uX19zdXBlcl9fLmJpbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBzZWxmLnRyaWdnZXIoJ3RvZ2dsZScsIHtcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbihcbiAgICAgICdjbGljaycsXG4gICAgICAnLnNlbGVjdDItc2VsZWN0aW9uX19jaG9pY2VfX3JlbW92ZScsXG4gICAgICBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZXZlbnQgaWYgaXQgaXMgZGlzYWJsZWRcbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5nZXQoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgJHJlbW92ZSA9ICQodGhpcyk7XG4gICAgICAgIHZhciAkc2VsZWN0aW9uID0gJHJlbW92ZS5wYXJlbnQoKTtcblxuICAgICAgICB2YXIgZGF0YSA9ICRzZWxlY3Rpb24uZGF0YSgnZGF0YScpO1xuXG4gICAgICAgIHNlbGYudHJpZ2dlcigndW5zZWxlY3QnLCB7XG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0LFxuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICBNdWx0aXBsZVNlbGVjdGlvbi5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKS5lbXB0eSgpO1xuICB9O1xuXG4gIE11bHRpcGxlU2VsZWN0aW9uLnByb3RvdHlwZS5kaXNwbGF5ID0gZnVuY3Rpb24gKGRhdGEsIGNvbnRhaW5lcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMub3B0aW9ucy5nZXQoJ3RlbXBsYXRlU2VsZWN0aW9uJyk7XG4gICAgdmFyIGVzY2FwZU1hcmt1cCA9IHRoaXMub3B0aW9ucy5nZXQoJ2VzY2FwZU1hcmt1cCcpO1xuXG4gICAgcmV0dXJuIGVzY2FwZU1hcmt1cCh0ZW1wbGF0ZShkYXRhLCBjb250YWluZXIpKTtcbiAgfTtcblxuICBNdWx0aXBsZVNlbGVjdGlvbi5wcm90b3R5cGUuc2VsZWN0aW9uQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkY29udGFpbmVyID0gJChcbiAgICAgICc8bGkgY2xhc3M9XCJzZWxlY3QyLXNlbGVjdGlvbl9fY2hvaWNlXCI+JyArXG4gICAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdDItc2VsZWN0aW9uX19jaG9pY2VfX3JlbW92ZVwiIHJvbGU9XCJwcmVzZW50YXRpb25cIj4nICtcbiAgICAgICAgICAnJnRpbWVzOycgK1xuICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgJzwvbGk+J1xuICAgICk7XG5cbiAgICByZXR1cm4gJGNvbnRhaW5lcjtcbiAgfTtcblxuICBNdWx0aXBsZVNlbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgJHNlbGVjdGlvbnMgPSBbXTtcblxuICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGF0YS5sZW5ndGg7IGQrKykge1xuICAgICAgdmFyIHNlbGVjdGlvbiA9IGRhdGFbZF07XG5cbiAgICAgIHZhciAkc2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb25Db250YWluZXIoKTtcbiAgICAgIHZhciBmb3JtYXR0ZWQgPSB0aGlzLmRpc3BsYXkoc2VsZWN0aW9uLCAkc2VsZWN0aW9uKTtcblxuICAgICAgJHNlbGVjdGlvbi5hcHBlbmQoZm9ybWF0dGVkKTtcbiAgICAgICRzZWxlY3Rpb24ucHJvcCgndGl0bGUnLCBzZWxlY3Rpb24udGl0bGUgfHwgc2VsZWN0aW9uLnRleHQpO1xuXG4gICAgICAkc2VsZWN0aW9uLmRhdGEoJ2RhdGEnLCBzZWxlY3Rpb24pO1xuXG4gICAgICAkc2VsZWN0aW9ucy5wdXNoKCRzZWxlY3Rpb24pO1xuICAgIH1cblxuICAgIHZhciAkcmVuZGVyZWQgPSB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpO1xuXG4gICAgVXRpbHMuYXBwZW5kTWFueSgkcmVuZGVyZWQsICRzZWxlY3Rpb25zKTtcbiAgfTtcblxuICByZXR1cm4gTXVsdGlwbGVTZWxlY3Rpb247XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9wbGFjZWhvbGRlcicsW1xuICAnLi4vdXRpbHMnXG5dLCBmdW5jdGlvbiAoVXRpbHMpIHtcbiAgZnVuY3Rpb24gUGxhY2Vob2xkZXIgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5ub3JtYWxpemVQbGFjZWhvbGRlcihvcHRpb25zLmdldCgncGxhY2Vob2xkZXInKSk7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XG4gIH1cblxuICBQbGFjZWhvbGRlci5wcm90b3R5cGUubm9ybWFsaXplUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoXywgcGxhY2Vob2xkZXIpIHtcbiAgICBpZiAodHlwZW9mIHBsYWNlaG9sZGVyID09PSAnc3RyaW5nJykge1xuICAgICAgcGxhY2Vob2xkZXIgPSB7XG4gICAgICAgIGlkOiAnJyxcbiAgICAgICAgdGV4dDogcGxhY2Vob2xkZXJcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9O1xuXG4gIFBsYWNlaG9sZGVyLnByb3RvdHlwZS5jcmVhdGVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyICRwbGFjZWhvbGRlciA9IHRoaXMuc2VsZWN0aW9uQ29udGFpbmVyKCk7XG5cbiAgICAkcGxhY2Vob2xkZXIuaHRtbCh0aGlzLmRpc3BsYXkocGxhY2Vob2xkZXIpKTtcbiAgICAkcGxhY2Vob2xkZXIuYWRkQ2xhc3MoJ3NlbGVjdDItc2VsZWN0aW9uX19wbGFjZWhvbGRlcicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzZWxlY3QyLXNlbGVjdGlvbl9fY2hvaWNlJyk7XG5cbiAgICByZXR1cm4gJHBsYWNlaG9sZGVyO1xuICB9O1xuXG4gIFBsYWNlaG9sZGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBkYXRhKSB7XG4gICAgdmFyIHNpbmdsZVBsYWNlaG9sZGVyID0gKFxuICAgICAgZGF0YS5sZW5ndGggPT0gMSAmJiBkYXRhWzBdLmlkICE9IHRoaXMucGxhY2Vob2xkZXIuaWRcbiAgICApO1xuICAgIHZhciBtdWx0aXBsZVNlbGVjdGlvbnMgPSBkYXRhLmxlbmd0aCA+IDE7XG5cbiAgICBpZiAobXVsdGlwbGVTZWxlY3Rpb25zIHx8IHNpbmdsZVBsYWNlaG9sZGVyKSB7XG4gICAgICByZXR1cm4gZGVjb3JhdGVkLmNhbGwodGhpcywgZGF0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhcigpO1xuXG4gICAgdmFyICRwbGFjZWhvbGRlciA9IHRoaXMuY3JlYXRlUGxhY2Vob2xkZXIodGhpcy5wbGFjZWhvbGRlcik7XG5cbiAgICB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpLmFwcGVuZCgkcGxhY2Vob2xkZXIpO1xuICB9O1xuXG4gIHJldHVybiBQbGFjZWhvbGRlcjtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvc2VsZWN0aW9uL2FsbG93Q2xlYXInLFtcbiAgJ2pxdWVyeScsXG4gICcuLi9rZXlzJ1xuXSwgZnVuY3Rpb24gKCQsIEtFWVMpIHtcbiAgZnVuY3Rpb24gQWxsb3dDbGVhciAoKSB7IH1cblxuICBBbGxvd0NsZWFyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcblxuICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyID09IG51bGwpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkZWJ1ZycpICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAnU2VsZWN0MjogVGhlIGBhbGxvd0NsZWFyYCBvcHRpb24gc2hvdWxkIGJlIHVzZWQgaW4gY29tYmluYXRpb24gJyArXG4gICAgICAgICAgJ3dpdGggdGhlIGBwbGFjZWhvbGRlcmAgb3B0aW9uLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ21vdXNlZG93bicsICcuc2VsZWN0Mi1zZWxlY3Rpb25fX2NsZWFyJyxcbiAgICAgIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgc2VsZi5faGFuZGxlQ2xlYXIoZXZ0KTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBzZWxmLl9oYW5kbGVLZXlib2FyZENsZWFyKGV2dCwgY29udGFpbmVyKTtcbiAgICB9KTtcbiAgfTtcblxuICBBbGxvd0NsZWFyLnByb3RvdHlwZS5faGFuZGxlQ2xlYXIgPSBmdW5jdGlvbiAoXywgZXZ0KSB7XG4gICAgLy8gSWdub3JlIHRoZSBldmVudCBpZiBpdCBpcyBkaXNhYmxlZFxuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkaXNhYmxlZCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyICRjbGVhciA9IHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX2NsZWFyJyk7XG5cbiAgICAvLyBJZ25vcmUgdGhlIGV2ZW50IGlmIG5vdGhpbmcgaGFzIGJlZW4gc2VsZWN0ZWRcbiAgICBpZiAoJGNsZWFyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIHZhciBkYXRhID0gJGNsZWFyLmRhdGEoJ2RhdGEnKTtcblxuICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGF0YS5sZW5ndGg7IGQrKykge1xuICAgICAgdmFyIHVuc2VsZWN0RGF0YSA9IHtcbiAgICAgICAgZGF0YTogZGF0YVtkXVxuICAgICAgfTtcblxuICAgICAgLy8gVHJpZ2dlciB0aGUgYHVuc2VsZWN0YCBldmVudCwgc28gcGVvcGxlIGNhbiBwcmV2ZW50IGl0IGZyb20gYmVpbmdcbiAgICAgIC8vIGNsZWFyZWQuXG4gICAgICB0aGlzLnRyaWdnZXIoJ3Vuc2VsZWN0JywgdW5zZWxlY3REYXRhKTtcblxuICAgICAgLy8gSWYgdGhlIGV2ZW50IHdhcyBwcmV2ZW50ZWQsIGRvbid0IGNsZWFyIGl0IG91dC5cbiAgICAgIGlmICh1bnNlbGVjdERhdGEucHJldmVudGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50LnZhbCh0aGlzLnBsYWNlaG9sZGVyLmlkKS50cmlnZ2VyKCdjaGFuZ2UnKTtcblxuICAgIHRoaXMudHJpZ2dlcigndG9nZ2xlJywge30pO1xuICB9O1xuXG4gIEFsbG93Q2xlYXIucHJvdG90eXBlLl9oYW5kbGVLZXlib2FyZENsZWFyID0gZnVuY3Rpb24gKF8sIGV2dCwgY29udGFpbmVyKSB7XG4gICAgaWYgKGNvbnRhaW5lci5pc09wZW4oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldnQud2hpY2ggPT0gS0VZUy5ERUxFVEUgfHwgZXZ0LndoaWNoID09IEtFWVMuQkFDS1NQQUNFKSB7XG4gICAgICB0aGlzLl9oYW5kbGVDbGVhcihldnQpO1xuICAgIH1cbiAgfTtcblxuICBBbGxvd0NsZWFyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBkYXRhKSB7XG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgZGF0YSk7XG5cbiAgICBpZiAodGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcGxhY2Vob2xkZXInKS5sZW5ndGggPiAwIHx8XG4gICAgICAgIGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyICRyZW1vdmUgPSAkKFxuICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0Mi1zZWxlY3Rpb25fX2NsZWFyXCI+JyArXG4gICAgICAgICcmdGltZXM7JyArXG4gICAgICAnPC9zcGFuPidcbiAgICApO1xuICAgICRyZW1vdmUuZGF0YSgnZGF0YScsIGRhdGEpO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKS5wcmVwZW5kKCRyZW1vdmUpO1xuICB9O1xuXG4gIHJldHVybiBBbGxvd0NsZWFyO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9zZWxlY3Rpb24vc2VhcmNoJyxbXG4gICdqcXVlcnknLFxuICAnLi4vdXRpbHMnLFxuICAnLi4va2V5cydcbl0sIGZ1bmN0aW9uICgkLCBVdGlscywgS0VZUykge1xuICBmdW5jdGlvbiBTZWFyY2ggKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XG4gIH1cblxuICBTZWFyY2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcbiAgICB2YXIgJHNlYXJjaCA9ICQoXG4gICAgICAnPGxpIGNsYXNzPVwic2VsZWN0Mi1zZWFyY2ggc2VsZWN0Mi1zZWFyY2gtLWlubGluZVwiPicgK1xuICAgICAgICAnPGlucHV0IGNsYXNzPVwic2VsZWN0Mi1zZWFyY2hfX2ZpZWxkXCIgdHlwZT1cInNlYXJjaFwiIHRhYmluZGV4PVwiLTFcIicgK1xuICAgICAgICAnIGF1dG9jb21wbGV0ZT1cIm9mZlwiIGF1dG9jb3JyZWN0PVwib2ZmXCIgYXV0b2NhcGl0YWxpemU9XCJub25lXCInICtcbiAgICAgICAgJyBzcGVsbGNoZWNrPVwiZmFsc2VcIiByb2xlPVwidGV4dGJveFwiIGFyaWEtYXV0b2NvbXBsZXRlPVwibGlzdFwiIC8+JyArXG4gICAgICAnPC9saT4nXG4gICAgKTtcblxuICAgIHRoaXMuJHNlYXJjaENvbnRhaW5lciA9ICRzZWFyY2g7XG4gICAgdGhpcy4kc2VhcmNoID0gJHNlYXJjaC5maW5kKCdpbnB1dCcpO1xuXG4gICAgdmFyICRyZW5kZXJlZCA9IGRlY29yYXRlZC5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5fdHJhbnNmZXJUYWJJbmRleCgpO1xuXG4gICAgcmV0dXJuICRyZW5kZXJlZDtcbiAgfTtcblxuICBTZWFyY2gucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xuXG4gICAgY29udGFpbmVyLm9uKCdvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kc2VhcmNoLnZhbCgnJyk7XG4gICAgICBzZWxmLiRzZWFyY2gucmVtb3ZlQXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50Jyk7XG4gICAgICBzZWxmLiRzZWFyY2gudHJpZ2dlcignZm9jdXMnKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbignZW5hYmxlJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kc2VhcmNoLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXG4gICAgICBzZWxmLl90cmFuc2ZlclRhYkluZGV4KCk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ2Rpc2FibGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLiRzZWFyY2gucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbignZm9jdXMnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBzZWxmLiRzZWFyY2gudHJpZ2dlcignZm9jdXMnKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czpmb2N1cycsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHNlbGYuJHNlYXJjaC5hdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCBwYXJhbXMuaWQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdmb2N1c2luJywgJy5zZWxlY3QyLXNlYXJjaC0taW5saW5lJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgc2VsZi50cmlnZ2VyKCdmb2N1cycsIGV2dCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2ZvY3Vzb3V0JywgJy5zZWxlY3QyLXNlYXJjaC0taW5saW5lJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgc2VsZi5faGFuZGxlQmx1cihldnQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdrZXlkb3duJywgJy5zZWxlY3QyLXNlYXJjaC0taW5saW5lJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBzZWxmLnRyaWdnZXIoJ2tleXByZXNzJywgZXZ0KTtcblxuICAgICAgc2VsZi5fa2V5VXBQcmV2ZW50ZWQgPSBldnQuaXNEZWZhdWx0UHJldmVudGVkKCk7XG5cbiAgICAgIHZhciBrZXkgPSBldnQud2hpY2g7XG5cbiAgICAgIGlmIChrZXkgPT09IEtFWVMuQkFDS1NQQUNFICYmIHNlbGYuJHNlYXJjaC52YWwoKSA9PT0gJycpIHtcbiAgICAgICAgdmFyICRwcmV2aW91c0Nob2ljZSA9IHNlbGYuJHNlYXJjaENvbnRhaW5lclxuICAgICAgICAgIC5wcmV2KCcuc2VsZWN0Mi1zZWxlY3Rpb25fX2Nob2ljZScpO1xuXG4gICAgICAgIGlmICgkcHJldmlvdXNDaG9pY2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBpdGVtID0gJHByZXZpb3VzQ2hvaWNlLmRhdGEoJ2RhdGEnKTtcblxuICAgICAgICAgIHNlbGYuc2VhcmNoUmVtb3ZlQ2hvaWNlKGl0ZW0pO1xuXG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRyeSB0byBkZXRlY3QgdGhlIElFIHZlcnNpb24gc2hvdWxkIHRoZSBgZG9jdW1lbnRNb2RlYCBwcm9wZXJ0eSB0aGF0XG4gICAgLy8gaXMgc3RvcmVkIG9uIHRoZSBkb2N1bWVudC4gVGhpcyBpcyBvbmx5IGltcGxlbWVudGVkIGluIElFIGFuZCBpc1xuICAgIC8vIHNsaWdodGx5IGNsZWFuZXIgdGhhbiBkb2luZyBhIHVzZXIgYWdlbnQgY2hlY2suXG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlIGluIEVkZ2UsIGJ1dCBFZGdlIGFsc28gZG9lc24ndCBoYXZlXG4gICAgLy8gdGhpcyBidWcuXG4gICAgdmFyIG1zaWUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG4gICAgdmFyIGRpc2FibGVJbnB1dEV2ZW50cyA9IG1zaWUgJiYgbXNpZSA8PSAxMTtcblxuICAgIC8vIFdvcmthcm91bmQgZm9yIGJyb3dzZXJzIHdoaWNoIGRvIG5vdCBzdXBwb3J0IHRoZSBgaW5wdXRgIGV2ZW50XG4gICAgLy8gVGhpcyB3aWxsIHByZXZlbnQgZG91YmxlLXRyaWdnZXJpbmcgb2YgZXZlbnRzIGZvciBicm93c2VycyB3aGljaCBzdXBwb3J0XG4gICAgLy8gYm90aCB0aGUgYGtleXVwYCBhbmQgYGlucHV0YCBldmVudHMuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKFxuICAgICAgJ2lucHV0LnNlYXJjaGNoZWNrJyxcbiAgICAgICcuc2VsZWN0Mi1zZWFyY2gtLWlubGluZScsXG4gICAgICBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIC8vIElFIHdpbGwgdHJpZ2dlciB0aGUgYGlucHV0YCBldmVudCB3aGVuIGEgcGxhY2Vob2xkZXIgaXMgdXNlZCBvbiBhXG4gICAgICAgIC8vIHNlYXJjaCBib3guIFRvIGdldCBhcm91bmQgdGhpcyBpc3N1ZSwgd2UgYXJlIGZvcmNlZCB0byBpZ25vcmUgYWxsXG4gICAgICAgIC8vIGBpbnB1dGAgZXZlbnRzIGluIElFIGFuZCBrZWVwIHVzaW5nIGBrZXl1cGAuXG4gICAgICAgIGlmIChkaXNhYmxlSW5wdXRFdmVudHMpIHtcbiAgICAgICAgICBzZWxmLiRzZWxlY3Rpb24ub2ZmKCdpbnB1dC5zZWFyY2ggaW5wdXQuc2VhcmNoY2hlY2snKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVbmJpbmQgdGhlIGR1cGxpY2F0ZWQgYGtleXVwYCBldmVudFxuICAgICAgICBzZWxmLiRzZWxlY3Rpb24ub2ZmKCdrZXl1cC5zZWFyY2gnKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKFxuICAgICAgJ2tleXVwLnNlYXJjaCBpbnB1dC5zZWFyY2gnLFxuICAgICAgJy5zZWxlY3QyLXNlYXJjaC0taW5saW5lJyxcbiAgICAgIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgLy8gSUUgd2lsbCB0cmlnZ2VyIHRoZSBgaW5wdXRgIGV2ZW50IHdoZW4gYSBwbGFjZWhvbGRlciBpcyB1c2VkIG9uIGFcbiAgICAgICAgLy8gc2VhcmNoIGJveC4gVG8gZ2V0IGFyb3VuZCB0aGlzIGlzc3VlLCB3ZSBhcmUgZm9yY2VkIHRvIGlnbm9yZSBhbGxcbiAgICAgICAgLy8gYGlucHV0YCBldmVudHMgaW4gSUUgYW5kIGtlZXAgdXNpbmcgYGtleXVwYC5cbiAgICAgICAgaWYgKGRpc2FibGVJbnB1dEV2ZW50cyAmJiBldnQudHlwZSA9PT0gJ2lucHV0Jykge1xuICAgICAgICAgIHNlbGYuJHNlbGVjdGlvbi5vZmYoJ2lucHV0LnNlYXJjaCBpbnB1dC5zZWFyY2hjaGVjaycpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXkgPSBldnQud2hpY2g7XG5cbiAgICAgICAgLy8gV2UgY2FuIGZyZWVseSBpZ25vcmUgZXZlbnRzIGZyb20gbW9kaWZpZXIga2V5c1xuICAgICAgICBpZiAoa2V5ID09IEtFWVMuU0hJRlQgfHwga2V5ID09IEtFWVMuQ1RSTCB8fCBrZXkgPT0gS0VZUy5BTFQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUYWJiaW5nIHdpbGwgYmUgaGFuZGxlZCBkdXJpbmcgdGhlIGBrZXlkb3duYCBwaGFzZVxuICAgICAgICBpZiAoa2V5ID09IEtFWVMuVEFCKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5oYW5kbGVTZWFyY2goZXZ0KTtcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCB3aWxsIHRyYW5zZmVyIHRoZSB0YWJpbmRleCBhdHRyaWJ1dGUgZnJvbSB0aGUgcmVuZGVyZWRcbiAgICogc2VsZWN0aW9uIHRvIHRoZSBzZWFyY2ggYm94LiBUaGlzIGFsbG93cyBmb3IgdGhlIHNlYXJjaCBib3ggdG8gYmUgdXNlZCBhc1xuICAgKiB0aGUgcHJpbWFyeSBmb2N1cyBpbnN0ZWFkIG9mIHRoZSBzZWxlY3Rpb24gY29udGFpbmVyLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgU2VhcmNoLnByb3RvdHlwZS5fdHJhbnNmZXJUYWJJbmRleCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcbiAgICB0aGlzLiRzZWFyY2guYXR0cigndGFiaW5kZXgnLCB0aGlzLiRzZWxlY3Rpb24uYXR0cigndGFiaW5kZXgnKSk7XG4gICAgdGhpcy4kc2VsZWN0aW9uLmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XG4gIH07XG5cbiAgU2VhcmNoLnByb3RvdHlwZS5jcmVhdGVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBsYWNlaG9sZGVyKSB7XG4gICAgdGhpcy4kc2VhcmNoLmF0dHIoJ3BsYWNlaG9sZGVyJywgcGxhY2Vob2xkZXIudGV4dCk7XG4gIH07XG5cbiAgU2VhcmNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBkYXRhKSB7XG4gICAgdmFyIHNlYXJjaEhhZEZvY3VzID0gdGhpcy4kc2VhcmNoWzBdID09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cbiAgICB0aGlzLiRzZWFyY2guYXR0cigncGxhY2Vob2xkZXInLCAnJyk7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBkYXRhKTtcblxuICAgIHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJylcbiAgICAgICAgICAgICAgICAgICAuYXBwZW5kKHRoaXMuJHNlYXJjaENvbnRhaW5lcik7XG5cbiAgICB0aGlzLnJlc2l6ZVNlYXJjaCgpO1xuICAgIGlmIChzZWFyY2hIYWRGb2N1cykge1xuICAgICAgdGhpcy4kc2VhcmNoLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIFNlYXJjaC5wcm90b3R5cGUuaGFuZGxlU2VhcmNoID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVzaXplU2VhcmNoKCk7XG5cbiAgICBpZiAoIXRoaXMuX2tleVVwUHJldmVudGVkKSB7XG4gICAgICB2YXIgaW5wdXQgPSB0aGlzLiRzZWFyY2gudmFsKCk7XG5cbiAgICAgIHRoaXMudHJpZ2dlcigncXVlcnknLCB7XG4gICAgICAgIHRlcm06IGlucHV0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9rZXlVcFByZXZlbnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFNlYXJjaC5wcm90b3R5cGUuc2VhcmNoUmVtb3ZlQ2hvaWNlID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgaXRlbSkge1xuICAgIHRoaXMudHJpZ2dlcigndW5zZWxlY3QnLCB7XG4gICAgICBkYXRhOiBpdGVtXG4gICAgfSk7XG5cbiAgICB0aGlzLiRzZWFyY2gudmFsKGl0ZW0udGV4dCk7XG4gICAgdGhpcy5oYW5kbGVTZWFyY2goKTtcbiAgfTtcblxuICBTZWFyY2gucHJvdG90eXBlLnJlc2l6ZVNlYXJjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRzZWFyY2guY3NzKCd3aWR0aCcsICcyNXB4Jyk7XG5cbiAgICB2YXIgd2lkdGggPSAnJztcblxuICAgIGlmICh0aGlzLiRzZWFyY2guYXR0cigncGxhY2Vob2xkZXInKSAhPT0gJycpIHtcbiAgICAgIHdpZHRoID0gdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKS5pbm5lcldpZHRoKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtaW5pbXVtV2lkdGggPSB0aGlzLiRzZWFyY2gudmFsKCkubGVuZ3RoICsgMTtcblxuICAgICAgd2lkdGggPSAobWluaW11bVdpZHRoICogMC43NSkgKyAnZW0nO1xuICAgIH1cblxuICAgIHRoaXMuJHNlYXJjaC5jc3MoJ3dpZHRoJywgd2lkdGgpO1xuICB9O1xuXG4gIHJldHVybiBTZWFyY2g7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9ldmVudFJlbGF5JyxbXG4gICdqcXVlcnknXG5dLCBmdW5jdGlvbiAoJCkge1xuICBmdW5jdGlvbiBFdmVudFJlbGF5ICgpIHsgfVxuXG4gIEV2ZW50UmVsYXkucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHJlbGF5RXZlbnRzID0gW1xuICAgICAgJ29wZW4nLCAnb3BlbmluZycsXG4gICAgICAnY2xvc2UnLCAnY2xvc2luZycsXG4gICAgICAnc2VsZWN0JywgJ3NlbGVjdGluZycsXG4gICAgICAndW5zZWxlY3QnLCAndW5zZWxlY3RpbmcnXG4gICAgXTtcblxuICAgIHZhciBwcmV2ZW50YWJsZUV2ZW50cyA9IFsnb3BlbmluZycsICdjbG9zaW5nJywgJ3NlbGVjdGluZycsICd1bnNlbGVjdGluZyddO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcblxuICAgIGNvbnRhaW5lci5vbignKicsIGZ1bmN0aW9uIChuYW1lLCBwYXJhbXMpIHtcbiAgICAgIC8vIElnbm9yZSBldmVudHMgdGhhdCBzaG91bGQgbm90IGJlIHJlbGF5ZWRcbiAgICAgIGlmICgkLmluQXJyYXkobmFtZSwgcmVsYXlFdmVudHMpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBwYXJhbWV0ZXJzIHNob3VsZCBhbHdheXMgYmUgYW4gb2JqZWN0XG4gICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG5cbiAgICAgIC8vIEdlbmVyYXRlIHRoZSBqUXVlcnkgZXZlbnQgZm9yIHRoZSBTZWxlY3QyIGV2ZW50XG4gICAgICB2YXIgZXZ0ID0gJC5FdmVudCgnc2VsZWN0MjonICsgbmFtZSwge1xuICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgfSk7XG5cbiAgICAgIHNlbGYuJGVsZW1lbnQudHJpZ2dlcihldnQpO1xuXG4gICAgICAvLyBPbmx5IGhhbmRsZSBwcmV2ZW50YWJsZSBldmVudHMgaWYgaXQgd2FzIG9uZVxuICAgICAgaWYgKCQuaW5BcnJheShuYW1lLCBwcmV2ZW50YWJsZUV2ZW50cykgPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGFyYW1zLnByZXZlbnRlZCA9IGV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gRXZlbnRSZWxheTtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvdHJhbnNsYXRpb24nLFtcbiAgJ2pxdWVyeScsXG4gICdyZXF1aXJlJ1xuXSwgZnVuY3Rpb24gKCQsIHJlcXVpcmUpIHtcbiAgZnVuY3Rpb24gVHJhbnNsYXRpb24gKGRpY3QpIHtcbiAgICB0aGlzLmRpY3QgPSBkaWN0IHx8IHt9O1xuICB9XG5cbiAgVHJhbnNsYXRpb24ucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5kaWN0O1xuICB9O1xuXG4gIFRyYW5zbGF0aW9uLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZGljdFtrZXldO1xuICB9O1xuXG4gIFRyYW5zbGF0aW9uLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiAodHJhbnNsYXRpb24pIHtcbiAgICB0aGlzLmRpY3QgPSAkLmV4dGVuZCh7fSwgdHJhbnNsYXRpb24uYWxsKCksIHRoaXMuZGljdCk7XG4gIH07XG5cbiAgLy8gU3RhdGljIGZ1bmN0aW9uc1xuXG4gIFRyYW5zbGF0aW9uLl9jYWNoZSA9IHt9O1xuXG4gIFRyYW5zbGF0aW9uLmxvYWRQYXRoID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICBpZiAoIShwYXRoIGluIFRyYW5zbGF0aW9uLl9jYWNoZSkpIHtcbiAgICAgIHZhciB0cmFuc2xhdGlvbnMgPSByZXF1aXJlKHBhdGgpO1xuXG4gICAgICBUcmFuc2xhdGlvbi5fY2FjaGVbcGF0aF0gPSB0cmFuc2xhdGlvbnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2xhdGlvbihUcmFuc2xhdGlvbi5fY2FjaGVbcGF0aF0pO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2xhdGlvbjtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGlhY3JpdGljcycsW1xuXG5dLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBkaWFjcml0aWNzID0ge1xuICAgICdcXHUyNEI2JzogJ0EnLFxuICAgICdcXHVGRjIxJzogJ0EnLFxuICAgICdcXHUwMEMwJzogJ0EnLFxuICAgICdcXHUwMEMxJzogJ0EnLFxuICAgICdcXHUwMEMyJzogJ0EnLFxuICAgICdcXHUxRUE2JzogJ0EnLFxuICAgICdcXHUxRUE0JzogJ0EnLFxuICAgICdcXHUxRUFBJzogJ0EnLFxuICAgICdcXHUxRUE4JzogJ0EnLFxuICAgICdcXHUwMEMzJzogJ0EnLFxuICAgICdcXHUwMTAwJzogJ0EnLFxuICAgICdcXHUwMTAyJzogJ0EnLFxuICAgICdcXHUxRUIwJzogJ0EnLFxuICAgICdcXHUxRUFFJzogJ0EnLFxuICAgICdcXHUxRUI0JzogJ0EnLFxuICAgICdcXHUxRUIyJzogJ0EnLFxuICAgICdcXHUwMjI2JzogJ0EnLFxuICAgICdcXHUwMUUwJzogJ0EnLFxuICAgICdcXHUwMEM0JzogJ0EnLFxuICAgICdcXHUwMURFJzogJ0EnLFxuICAgICdcXHUxRUEyJzogJ0EnLFxuICAgICdcXHUwMEM1JzogJ0EnLFxuICAgICdcXHUwMUZBJzogJ0EnLFxuICAgICdcXHUwMUNEJzogJ0EnLFxuICAgICdcXHUwMjAwJzogJ0EnLFxuICAgICdcXHUwMjAyJzogJ0EnLFxuICAgICdcXHUxRUEwJzogJ0EnLFxuICAgICdcXHUxRUFDJzogJ0EnLFxuICAgICdcXHUxRUI2JzogJ0EnLFxuICAgICdcXHUxRTAwJzogJ0EnLFxuICAgICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMjNBJzogJ0EnLFxuICAgICdcXHUyQzZGJzogJ0EnLFxuICAgICdcXHVBNzMyJzogJ0FBJyxcbiAgICAnXFx1MDBDNic6ICdBRScsXG4gICAgJ1xcdTAxRkMnOiAnQUUnLFxuICAgICdcXHUwMUUyJzogJ0FFJyxcbiAgICAnXFx1QTczNCc6ICdBTycsXG4gICAgJ1xcdUE3MzYnOiAnQVUnLFxuICAgICdcXHVBNzM4JzogJ0FWJyxcbiAgICAnXFx1QTczQSc6ICdBVicsXG4gICAgJ1xcdUE3M0MnOiAnQVknLFxuICAgICdcXHUyNEI3JzogJ0InLFxuICAgICdcXHVGRjIyJzogJ0InLFxuICAgICdcXHUxRTAyJzogJ0InLFxuICAgICdcXHUxRTA0JzogJ0InLFxuICAgICdcXHUxRTA2JzogJ0InLFxuICAgICdcXHUwMjQzJzogJ0InLFxuICAgICdcXHUwMTgyJzogJ0InLFxuICAgICdcXHUwMTgxJzogJ0InLFxuICAgICdcXHUyNEI4JzogJ0MnLFxuICAgICdcXHVGRjIzJzogJ0MnLFxuICAgICdcXHUwMTA2JzogJ0MnLFxuICAgICdcXHUwMTA4JzogJ0MnLFxuICAgICdcXHUwMTBBJzogJ0MnLFxuICAgICdcXHUwMTBDJzogJ0MnLFxuICAgICdcXHUwMEM3JzogJ0MnLFxuICAgICdcXHUxRTA4JzogJ0MnLFxuICAgICdcXHUwMTg3JzogJ0MnLFxuICAgICdcXHUwMjNCJzogJ0MnLFxuICAgICdcXHVBNzNFJzogJ0MnLFxuICAgICdcXHUyNEI5JzogJ0QnLFxuICAgICdcXHVGRjI0JzogJ0QnLFxuICAgICdcXHUxRTBBJzogJ0QnLFxuICAgICdcXHUwMTBFJzogJ0QnLFxuICAgICdcXHUxRTBDJzogJ0QnLFxuICAgICdcXHUxRTEwJzogJ0QnLFxuICAgICdcXHUxRTEyJzogJ0QnLFxuICAgICdcXHUxRTBFJzogJ0QnLFxuICAgICdcXHUwMTEwJzogJ0QnLFxuICAgICdcXHUwMThCJzogJ0QnLFxuICAgICdcXHUwMThBJzogJ0QnLFxuICAgICdcXHUwMTg5JzogJ0QnLFxuICAgICdcXHVBNzc5JzogJ0QnLFxuICAgICdcXHUwMUYxJzogJ0RaJyxcbiAgICAnXFx1MDFDNCc6ICdEWicsXG4gICAgJ1xcdTAxRjInOiAnRHonLFxuICAgICdcXHUwMUM1JzogJ0R6JyxcbiAgICAnXFx1MjRCQSc6ICdFJyxcbiAgICAnXFx1RkYyNSc6ICdFJyxcbiAgICAnXFx1MDBDOCc6ICdFJyxcbiAgICAnXFx1MDBDOSc6ICdFJyxcbiAgICAnXFx1MDBDQSc6ICdFJyxcbiAgICAnXFx1MUVDMCc6ICdFJyxcbiAgICAnXFx1MUVCRSc6ICdFJyxcbiAgICAnXFx1MUVDNCc6ICdFJyxcbiAgICAnXFx1MUVDMic6ICdFJyxcbiAgICAnXFx1MUVCQyc6ICdFJyxcbiAgICAnXFx1MDExMic6ICdFJyxcbiAgICAnXFx1MUUxNCc6ICdFJyxcbiAgICAnXFx1MUUxNic6ICdFJyxcbiAgICAnXFx1MDExNCc6ICdFJyxcbiAgICAnXFx1MDExNic6ICdFJyxcbiAgICAnXFx1MDBDQic6ICdFJyxcbiAgICAnXFx1MUVCQSc6ICdFJyxcbiAgICAnXFx1MDExQSc6ICdFJyxcbiAgICAnXFx1MDIwNCc6ICdFJyxcbiAgICAnXFx1MDIwNic6ICdFJyxcbiAgICAnXFx1MUVCOCc6ICdFJyxcbiAgICAnXFx1MUVDNic6ICdFJyxcbiAgICAnXFx1MDIyOCc6ICdFJyxcbiAgICAnXFx1MUUxQyc6ICdFJyxcbiAgICAnXFx1MDExOCc6ICdFJyxcbiAgICAnXFx1MUUxOCc6ICdFJyxcbiAgICAnXFx1MUUxQSc6ICdFJyxcbiAgICAnXFx1MDE5MCc6ICdFJyxcbiAgICAnXFx1MDE4RSc6ICdFJyxcbiAgICAnXFx1MjRCQic6ICdGJyxcbiAgICAnXFx1RkYyNic6ICdGJyxcbiAgICAnXFx1MUUxRSc6ICdGJyxcbiAgICAnXFx1MDE5MSc6ICdGJyxcbiAgICAnXFx1QTc3Qic6ICdGJyxcbiAgICAnXFx1MjRCQyc6ICdHJyxcbiAgICAnXFx1RkYyNyc6ICdHJyxcbiAgICAnXFx1MDFGNCc6ICdHJyxcbiAgICAnXFx1MDExQyc6ICdHJyxcbiAgICAnXFx1MUUyMCc6ICdHJyxcbiAgICAnXFx1MDExRSc6ICdHJyxcbiAgICAnXFx1MDEyMCc6ICdHJyxcbiAgICAnXFx1MDFFNic6ICdHJyxcbiAgICAnXFx1MDEyMic6ICdHJyxcbiAgICAnXFx1MDFFNCc6ICdHJyxcbiAgICAnXFx1MDE5Myc6ICdHJyxcbiAgICAnXFx1QTdBMCc6ICdHJyxcbiAgICAnXFx1QTc3RCc6ICdHJyxcbiAgICAnXFx1QTc3RSc6ICdHJyxcbiAgICAnXFx1MjRCRCc6ICdIJyxcbiAgICAnXFx1RkYyOCc6ICdIJyxcbiAgICAnXFx1MDEyNCc6ICdIJyxcbiAgICAnXFx1MUUyMic6ICdIJyxcbiAgICAnXFx1MUUyNic6ICdIJyxcbiAgICAnXFx1MDIxRSc6ICdIJyxcbiAgICAnXFx1MUUyNCc6ICdIJyxcbiAgICAnXFx1MUUyOCc6ICdIJyxcbiAgICAnXFx1MUUyQSc6ICdIJyxcbiAgICAnXFx1MDEyNic6ICdIJyxcbiAgICAnXFx1MkM2Nyc6ICdIJyxcbiAgICAnXFx1MkM3NSc6ICdIJyxcbiAgICAnXFx1QTc4RCc6ICdIJyxcbiAgICAnXFx1MjRCRSc6ICdJJyxcbiAgICAnXFx1RkYyOSc6ICdJJyxcbiAgICAnXFx1MDBDQyc6ICdJJyxcbiAgICAnXFx1MDBDRCc6ICdJJyxcbiAgICAnXFx1MDBDRSc6ICdJJyxcbiAgICAnXFx1MDEyOCc6ICdJJyxcbiAgICAnXFx1MDEyQSc6ICdJJyxcbiAgICAnXFx1MDEyQyc6ICdJJyxcbiAgICAnXFx1MDEzMCc6ICdJJyxcbiAgICAnXFx1MDBDRic6ICdJJyxcbiAgICAnXFx1MUUyRSc6ICdJJyxcbiAgICAnXFx1MUVDOCc6ICdJJyxcbiAgICAnXFx1MDFDRic6ICdJJyxcbiAgICAnXFx1MDIwOCc6ICdJJyxcbiAgICAnXFx1MDIwQSc6ICdJJyxcbiAgICAnXFx1MUVDQSc6ICdJJyxcbiAgICAnXFx1MDEyRSc6ICdJJyxcbiAgICAnXFx1MUUyQyc6ICdJJyxcbiAgICAnXFx1MDE5Nyc6ICdJJyxcbiAgICAnXFx1MjRCRic6ICdKJyxcbiAgICAnXFx1RkYyQSc6ICdKJyxcbiAgICAnXFx1MDEzNCc6ICdKJyxcbiAgICAnXFx1MDI0OCc6ICdKJyxcbiAgICAnXFx1MjRDMCc6ICdLJyxcbiAgICAnXFx1RkYyQic6ICdLJyxcbiAgICAnXFx1MUUzMCc6ICdLJyxcbiAgICAnXFx1MDFFOCc6ICdLJyxcbiAgICAnXFx1MUUzMic6ICdLJyxcbiAgICAnXFx1MDEzNic6ICdLJyxcbiAgICAnXFx1MUUzNCc6ICdLJyxcbiAgICAnXFx1MDE5OCc6ICdLJyxcbiAgICAnXFx1MkM2OSc6ICdLJyxcbiAgICAnXFx1QTc0MCc6ICdLJyxcbiAgICAnXFx1QTc0Mic6ICdLJyxcbiAgICAnXFx1QTc0NCc6ICdLJyxcbiAgICAnXFx1QTdBMic6ICdLJyxcbiAgICAnXFx1MjRDMSc6ICdMJyxcbiAgICAnXFx1RkYyQyc6ICdMJyxcbiAgICAnXFx1MDEzRic6ICdMJyxcbiAgICAnXFx1MDEzOSc6ICdMJyxcbiAgICAnXFx1MDEzRCc6ICdMJyxcbiAgICAnXFx1MUUzNic6ICdMJyxcbiAgICAnXFx1MUUzOCc6ICdMJyxcbiAgICAnXFx1MDEzQic6ICdMJyxcbiAgICAnXFx1MUUzQyc6ICdMJyxcbiAgICAnXFx1MUUzQSc6ICdMJyxcbiAgICAnXFx1MDE0MSc6ICdMJyxcbiAgICAnXFx1MDIzRCc6ICdMJyxcbiAgICAnXFx1MkM2Mic6ICdMJyxcbiAgICAnXFx1MkM2MCc6ICdMJyxcbiAgICAnXFx1QTc0OCc6ICdMJyxcbiAgICAnXFx1QTc0Nic6ICdMJyxcbiAgICAnXFx1QTc4MCc6ICdMJyxcbiAgICAnXFx1MDFDNyc6ICdMSicsXG4gICAgJ1xcdTAxQzgnOiAnTGonLFxuICAgICdcXHUyNEMyJzogJ00nLFxuICAgICdcXHVGRjJEJzogJ00nLFxuICAgICdcXHUxRTNFJzogJ00nLFxuICAgICdcXHUxRTQwJzogJ00nLFxuICAgICdcXHUxRTQyJzogJ00nLFxuICAgICdcXHUyQzZFJzogJ00nLFxuICAgICdcXHUwMTlDJzogJ00nLFxuICAgICdcXHUyNEMzJzogJ04nLFxuICAgICdcXHVGRjJFJzogJ04nLFxuICAgICdcXHUwMUY4JzogJ04nLFxuICAgICdcXHUwMTQzJzogJ04nLFxuICAgICdcXHUwMEQxJzogJ04nLFxuICAgICdcXHUxRTQ0JzogJ04nLFxuICAgICdcXHUwMTQ3JzogJ04nLFxuICAgICdcXHUxRTQ2JzogJ04nLFxuICAgICdcXHUwMTQ1JzogJ04nLFxuICAgICdcXHUxRTRBJzogJ04nLFxuICAgICdcXHUxRTQ4JzogJ04nLFxuICAgICdcXHUwMjIwJzogJ04nLFxuICAgICdcXHUwMTlEJzogJ04nLFxuICAgICdcXHVBNzkwJzogJ04nLFxuICAgICdcXHVBN0E0JzogJ04nLFxuICAgICdcXHUwMUNBJzogJ05KJyxcbiAgICAnXFx1MDFDQic6ICdOaicsXG4gICAgJ1xcdTI0QzQnOiAnTycsXG4gICAgJ1xcdUZGMkYnOiAnTycsXG4gICAgJ1xcdTAwRDInOiAnTycsXG4gICAgJ1xcdTAwRDMnOiAnTycsXG4gICAgJ1xcdTAwRDQnOiAnTycsXG4gICAgJ1xcdTFFRDInOiAnTycsXG4gICAgJ1xcdTFFRDAnOiAnTycsXG4gICAgJ1xcdTFFRDYnOiAnTycsXG4gICAgJ1xcdTFFRDQnOiAnTycsXG4gICAgJ1xcdTAwRDUnOiAnTycsXG4gICAgJ1xcdTFFNEMnOiAnTycsXG4gICAgJ1xcdTAyMkMnOiAnTycsXG4gICAgJ1xcdTFFNEUnOiAnTycsXG4gICAgJ1xcdTAxNEMnOiAnTycsXG4gICAgJ1xcdTFFNTAnOiAnTycsXG4gICAgJ1xcdTFFNTInOiAnTycsXG4gICAgJ1xcdTAxNEUnOiAnTycsXG4gICAgJ1xcdTAyMkUnOiAnTycsXG4gICAgJ1xcdTAyMzAnOiAnTycsXG4gICAgJ1xcdTAwRDYnOiAnTycsXG4gICAgJ1xcdTAyMkEnOiAnTycsXG4gICAgJ1xcdTFFQ0UnOiAnTycsXG4gICAgJ1xcdTAxNTAnOiAnTycsXG4gICAgJ1xcdTAxRDEnOiAnTycsXG4gICAgJ1xcdTAyMEMnOiAnTycsXG4gICAgJ1xcdTAyMEUnOiAnTycsXG4gICAgJ1xcdTAxQTAnOiAnTycsXG4gICAgJ1xcdTFFREMnOiAnTycsXG4gICAgJ1xcdTFFREEnOiAnTycsXG4gICAgJ1xcdTFFRTAnOiAnTycsXG4gICAgJ1xcdTFFREUnOiAnTycsXG4gICAgJ1xcdTFFRTInOiAnTycsXG4gICAgJ1xcdTFFQ0MnOiAnTycsXG4gICAgJ1xcdTFFRDgnOiAnTycsXG4gICAgJ1xcdTAxRUEnOiAnTycsXG4gICAgJ1xcdTAxRUMnOiAnTycsXG4gICAgJ1xcdTAwRDgnOiAnTycsXG4gICAgJ1xcdTAxRkUnOiAnTycsXG4gICAgJ1xcdTAxODYnOiAnTycsXG4gICAgJ1xcdTAxOUYnOiAnTycsXG4gICAgJ1xcdUE3NEEnOiAnTycsXG4gICAgJ1xcdUE3NEMnOiAnTycsXG4gICAgJ1xcdTAxQTInOiAnT0knLFxuICAgICdcXHVBNzRFJzogJ09PJyxcbiAgICAnXFx1MDIyMic6ICdPVScsXG4gICAgJ1xcdTI0QzUnOiAnUCcsXG4gICAgJ1xcdUZGMzAnOiAnUCcsXG4gICAgJ1xcdTFFNTQnOiAnUCcsXG4gICAgJ1xcdTFFNTYnOiAnUCcsXG4gICAgJ1xcdTAxQTQnOiAnUCcsXG4gICAgJ1xcdTJDNjMnOiAnUCcsXG4gICAgJ1xcdUE3NTAnOiAnUCcsXG4gICAgJ1xcdUE3NTInOiAnUCcsXG4gICAgJ1xcdUE3NTQnOiAnUCcsXG4gICAgJ1xcdTI0QzYnOiAnUScsXG4gICAgJ1xcdUZGMzEnOiAnUScsXG4gICAgJ1xcdUE3NTYnOiAnUScsXG4gICAgJ1xcdUE3NTgnOiAnUScsXG4gICAgJ1xcdTAyNEEnOiAnUScsXG4gICAgJ1xcdTI0QzcnOiAnUicsXG4gICAgJ1xcdUZGMzInOiAnUicsXG4gICAgJ1xcdTAxNTQnOiAnUicsXG4gICAgJ1xcdTFFNTgnOiAnUicsXG4gICAgJ1xcdTAxNTgnOiAnUicsXG4gICAgJ1xcdTAyMTAnOiAnUicsXG4gICAgJ1xcdTAyMTInOiAnUicsXG4gICAgJ1xcdTFFNUEnOiAnUicsXG4gICAgJ1xcdTFFNUMnOiAnUicsXG4gICAgJ1xcdTAxNTYnOiAnUicsXG4gICAgJ1xcdTFFNUUnOiAnUicsXG4gICAgJ1xcdTAyNEMnOiAnUicsXG4gICAgJ1xcdTJDNjQnOiAnUicsXG4gICAgJ1xcdUE3NUEnOiAnUicsXG4gICAgJ1xcdUE3QTYnOiAnUicsXG4gICAgJ1xcdUE3ODInOiAnUicsXG4gICAgJ1xcdTI0QzgnOiAnUycsXG4gICAgJ1xcdUZGMzMnOiAnUycsXG4gICAgJ1xcdTFFOUUnOiAnUycsXG4gICAgJ1xcdTAxNUEnOiAnUycsXG4gICAgJ1xcdTFFNjQnOiAnUycsXG4gICAgJ1xcdTAxNUMnOiAnUycsXG4gICAgJ1xcdTFFNjAnOiAnUycsXG4gICAgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTFFNjYnOiAnUycsXG4gICAgJ1xcdTFFNjInOiAnUycsXG4gICAgJ1xcdTFFNjgnOiAnUycsXG4gICAgJ1xcdTAyMTgnOiAnUycsXG4gICAgJ1xcdTAxNUUnOiAnUycsXG4gICAgJ1xcdTJDN0UnOiAnUycsXG4gICAgJ1xcdUE3QTgnOiAnUycsXG4gICAgJ1xcdUE3ODQnOiAnUycsXG4gICAgJ1xcdTI0QzknOiAnVCcsXG4gICAgJ1xcdUZGMzQnOiAnVCcsXG4gICAgJ1xcdTFFNkEnOiAnVCcsXG4gICAgJ1xcdTAxNjQnOiAnVCcsXG4gICAgJ1xcdTFFNkMnOiAnVCcsXG4gICAgJ1xcdTAyMUEnOiAnVCcsXG4gICAgJ1xcdTAxNjInOiAnVCcsXG4gICAgJ1xcdTFFNzAnOiAnVCcsXG4gICAgJ1xcdTFFNkUnOiAnVCcsXG4gICAgJ1xcdTAxNjYnOiAnVCcsXG4gICAgJ1xcdTAxQUMnOiAnVCcsXG4gICAgJ1xcdTAxQUUnOiAnVCcsXG4gICAgJ1xcdTAyM0UnOiAnVCcsXG4gICAgJ1xcdUE3ODYnOiAnVCcsXG4gICAgJ1xcdUE3MjgnOiAnVFonLFxuICAgICdcXHUyNENBJzogJ1UnLFxuICAgICdcXHVGRjM1JzogJ1UnLFxuICAgICdcXHUwMEQ5JzogJ1UnLFxuICAgICdcXHUwMERBJzogJ1UnLFxuICAgICdcXHUwMERCJzogJ1UnLFxuICAgICdcXHUwMTY4JzogJ1UnLFxuICAgICdcXHUxRTc4JzogJ1UnLFxuICAgICdcXHUwMTZBJzogJ1UnLFxuICAgICdcXHUxRTdBJzogJ1UnLFxuICAgICdcXHUwMTZDJzogJ1UnLFxuICAgICdcXHUwMERDJzogJ1UnLFxuICAgICdcXHUwMURCJzogJ1UnLFxuICAgICdcXHUwMUQ3JzogJ1UnLFxuICAgICdcXHUwMUQ1JzogJ1UnLFxuICAgICdcXHUwMUQ5JzogJ1UnLFxuICAgICdcXHUxRUU2JzogJ1UnLFxuICAgICdcXHUwMTZFJzogJ1UnLFxuICAgICdcXHUwMTcwJzogJ1UnLFxuICAgICdcXHUwMUQzJzogJ1UnLFxuICAgICdcXHUwMjE0JzogJ1UnLFxuICAgICdcXHUwMjE2JzogJ1UnLFxuICAgICdcXHUwMUFGJzogJ1UnLFxuICAgICdcXHUxRUVBJzogJ1UnLFxuICAgICdcXHUxRUU4JzogJ1UnLFxuICAgICdcXHUxRUVFJzogJ1UnLFxuICAgICdcXHUxRUVDJzogJ1UnLFxuICAgICdcXHUxRUYwJzogJ1UnLFxuICAgICdcXHUxRUU0JzogJ1UnLFxuICAgICdcXHUxRTcyJzogJ1UnLFxuICAgICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUxRTc2JzogJ1UnLFxuICAgICdcXHUxRTc0JzogJ1UnLFxuICAgICdcXHUwMjQ0JzogJ1UnLFxuICAgICdcXHUyNENCJzogJ1YnLFxuICAgICdcXHVGRjM2JzogJ1YnLFxuICAgICdcXHUxRTdDJzogJ1YnLFxuICAgICdcXHUxRTdFJzogJ1YnLFxuICAgICdcXHUwMUIyJzogJ1YnLFxuICAgICdcXHVBNzVFJzogJ1YnLFxuICAgICdcXHUwMjQ1JzogJ1YnLFxuICAgICdcXHVBNzYwJzogJ1ZZJyxcbiAgICAnXFx1MjRDQyc6ICdXJyxcbiAgICAnXFx1RkYzNyc6ICdXJyxcbiAgICAnXFx1MUU4MCc6ICdXJyxcbiAgICAnXFx1MUU4Mic6ICdXJyxcbiAgICAnXFx1MDE3NCc6ICdXJyxcbiAgICAnXFx1MUU4Nic6ICdXJyxcbiAgICAnXFx1MUU4NCc6ICdXJyxcbiAgICAnXFx1MUU4OCc6ICdXJyxcbiAgICAnXFx1MkM3Mic6ICdXJyxcbiAgICAnXFx1MjRDRCc6ICdYJyxcbiAgICAnXFx1RkYzOCc6ICdYJyxcbiAgICAnXFx1MUU4QSc6ICdYJyxcbiAgICAnXFx1MUU4Qyc6ICdYJyxcbiAgICAnXFx1MjRDRSc6ICdZJyxcbiAgICAnXFx1RkYzOSc6ICdZJyxcbiAgICAnXFx1MUVGMic6ICdZJyxcbiAgICAnXFx1MDBERCc6ICdZJyxcbiAgICAnXFx1MDE3Nic6ICdZJyxcbiAgICAnXFx1MUVGOCc6ICdZJyxcbiAgICAnXFx1MDIzMic6ICdZJyxcbiAgICAnXFx1MUU4RSc6ICdZJyxcbiAgICAnXFx1MDE3OCc6ICdZJyxcbiAgICAnXFx1MUVGNic6ICdZJyxcbiAgICAnXFx1MUVGNCc6ICdZJyxcbiAgICAnXFx1MDFCMyc6ICdZJyxcbiAgICAnXFx1MDI0RSc6ICdZJyxcbiAgICAnXFx1MUVGRSc6ICdZJyxcbiAgICAnXFx1MjRDRic6ICdaJyxcbiAgICAnXFx1RkYzQSc6ICdaJyxcbiAgICAnXFx1MDE3OSc6ICdaJyxcbiAgICAnXFx1MUU5MCc6ICdaJyxcbiAgICAnXFx1MDE3Qic6ICdaJyxcbiAgICAnXFx1MDE3RCc6ICdaJyxcbiAgICAnXFx1MUU5Mic6ICdaJyxcbiAgICAnXFx1MUU5NCc6ICdaJyxcbiAgICAnXFx1MDFCNSc6ICdaJyxcbiAgICAnXFx1MDIyNCc6ICdaJyxcbiAgICAnXFx1MkM3Ric6ICdaJyxcbiAgICAnXFx1MkM2Qic6ICdaJyxcbiAgICAnXFx1QTc2Mic6ICdaJyxcbiAgICAnXFx1MjREMCc6ICdhJyxcbiAgICAnXFx1RkY0MSc6ICdhJyxcbiAgICAnXFx1MUU5QSc6ICdhJyxcbiAgICAnXFx1MDBFMCc6ICdhJyxcbiAgICAnXFx1MDBFMSc6ICdhJyxcbiAgICAnXFx1MDBFMic6ICdhJyxcbiAgICAnXFx1MUVBNyc6ICdhJyxcbiAgICAnXFx1MUVBNSc6ICdhJyxcbiAgICAnXFx1MUVBQic6ICdhJyxcbiAgICAnXFx1MUVBOSc6ICdhJyxcbiAgICAnXFx1MDBFMyc6ICdhJyxcbiAgICAnXFx1MDEwMSc6ICdhJyxcbiAgICAnXFx1MDEwMyc6ICdhJyxcbiAgICAnXFx1MUVCMSc6ICdhJyxcbiAgICAnXFx1MUVBRic6ICdhJyxcbiAgICAnXFx1MUVCNSc6ICdhJyxcbiAgICAnXFx1MUVCMyc6ICdhJyxcbiAgICAnXFx1MDIyNyc6ICdhJyxcbiAgICAnXFx1MDFFMSc6ICdhJyxcbiAgICAnXFx1MDBFNCc6ICdhJyxcbiAgICAnXFx1MDFERic6ICdhJyxcbiAgICAnXFx1MUVBMyc6ICdhJyxcbiAgICAnXFx1MDBFNSc6ICdhJyxcbiAgICAnXFx1MDFGQic6ICdhJyxcbiAgICAnXFx1MDFDRSc6ICdhJyxcbiAgICAnXFx1MDIwMSc6ICdhJyxcbiAgICAnXFx1MDIwMyc6ICdhJyxcbiAgICAnXFx1MUVBMSc6ICdhJyxcbiAgICAnXFx1MUVBRCc6ICdhJyxcbiAgICAnXFx1MUVCNyc6ICdhJyxcbiAgICAnXFx1MUUwMSc6ICdhJyxcbiAgICAnXFx1MDEwNSc6ICdhJyxcbiAgICAnXFx1MkM2NSc6ICdhJyxcbiAgICAnXFx1MDI1MCc6ICdhJyxcbiAgICAnXFx1QTczMyc6ICdhYScsXG4gICAgJ1xcdTAwRTYnOiAnYWUnLFxuICAgICdcXHUwMUZEJzogJ2FlJyxcbiAgICAnXFx1MDFFMyc6ICdhZScsXG4gICAgJ1xcdUE3MzUnOiAnYW8nLFxuICAgICdcXHVBNzM3JzogJ2F1JyxcbiAgICAnXFx1QTczOSc6ICdhdicsXG4gICAgJ1xcdUE3M0InOiAnYXYnLFxuICAgICdcXHVBNzNEJzogJ2F5JyxcbiAgICAnXFx1MjREMSc6ICdiJyxcbiAgICAnXFx1RkY0Mic6ICdiJyxcbiAgICAnXFx1MUUwMyc6ICdiJyxcbiAgICAnXFx1MUUwNSc6ICdiJyxcbiAgICAnXFx1MUUwNyc6ICdiJyxcbiAgICAnXFx1MDE4MCc6ICdiJyxcbiAgICAnXFx1MDE4Myc6ICdiJyxcbiAgICAnXFx1MDI1Myc6ICdiJyxcbiAgICAnXFx1MjREMic6ICdjJyxcbiAgICAnXFx1RkY0Myc6ICdjJyxcbiAgICAnXFx1MDEwNyc6ICdjJyxcbiAgICAnXFx1MDEwOSc6ICdjJyxcbiAgICAnXFx1MDEwQic6ICdjJyxcbiAgICAnXFx1MDEwRCc6ICdjJyxcbiAgICAnXFx1MDBFNyc6ICdjJyxcbiAgICAnXFx1MUUwOSc6ICdjJyxcbiAgICAnXFx1MDE4OCc6ICdjJyxcbiAgICAnXFx1MDIzQyc6ICdjJyxcbiAgICAnXFx1QTczRic6ICdjJyxcbiAgICAnXFx1MjE4NCc6ICdjJyxcbiAgICAnXFx1MjREMyc6ICdkJyxcbiAgICAnXFx1RkY0NCc6ICdkJyxcbiAgICAnXFx1MUUwQic6ICdkJyxcbiAgICAnXFx1MDEwRic6ICdkJyxcbiAgICAnXFx1MUUwRCc6ICdkJyxcbiAgICAnXFx1MUUxMSc6ICdkJyxcbiAgICAnXFx1MUUxMyc6ICdkJyxcbiAgICAnXFx1MUUwRic6ICdkJyxcbiAgICAnXFx1MDExMSc6ICdkJyxcbiAgICAnXFx1MDE4Qyc6ICdkJyxcbiAgICAnXFx1MDI1Nic6ICdkJyxcbiAgICAnXFx1MDI1Nyc6ICdkJyxcbiAgICAnXFx1QTc3QSc6ICdkJyxcbiAgICAnXFx1MDFGMyc6ICdkeicsXG4gICAgJ1xcdTAxQzYnOiAnZHonLFxuICAgICdcXHUyNEQ0JzogJ2UnLFxuICAgICdcXHVGRjQ1JzogJ2UnLFxuICAgICdcXHUwMEU4JzogJ2UnLFxuICAgICdcXHUwMEU5JzogJ2UnLFxuICAgICdcXHUwMEVBJzogJ2UnLFxuICAgICdcXHUxRUMxJzogJ2UnLFxuICAgICdcXHUxRUJGJzogJ2UnLFxuICAgICdcXHUxRUM1JzogJ2UnLFxuICAgICdcXHUxRUMzJzogJ2UnLFxuICAgICdcXHUxRUJEJzogJ2UnLFxuICAgICdcXHUwMTEzJzogJ2UnLFxuICAgICdcXHUxRTE1JzogJ2UnLFxuICAgICdcXHUxRTE3JzogJ2UnLFxuICAgICdcXHUwMTE1JzogJ2UnLFxuICAgICdcXHUwMTE3JzogJ2UnLFxuICAgICdcXHUwMEVCJzogJ2UnLFxuICAgICdcXHUxRUJCJzogJ2UnLFxuICAgICdcXHUwMTFCJzogJ2UnLFxuICAgICdcXHUwMjA1JzogJ2UnLFxuICAgICdcXHUwMjA3JzogJ2UnLFxuICAgICdcXHUxRUI5JzogJ2UnLFxuICAgICdcXHUxRUM3JzogJ2UnLFxuICAgICdcXHUwMjI5JzogJ2UnLFxuICAgICdcXHUxRTFEJzogJ2UnLFxuICAgICdcXHUwMTE5JzogJ2UnLFxuICAgICdcXHUxRTE5JzogJ2UnLFxuICAgICdcXHUxRTFCJzogJ2UnLFxuICAgICdcXHUwMjQ3JzogJ2UnLFxuICAgICdcXHUwMjVCJzogJ2UnLFxuICAgICdcXHUwMUREJzogJ2UnLFxuICAgICdcXHUyNEQ1JzogJ2YnLFxuICAgICdcXHVGRjQ2JzogJ2YnLFxuICAgICdcXHUxRTFGJzogJ2YnLFxuICAgICdcXHUwMTkyJzogJ2YnLFxuICAgICdcXHVBNzdDJzogJ2YnLFxuICAgICdcXHUyNEQ2JzogJ2cnLFxuICAgICdcXHVGRjQ3JzogJ2cnLFxuICAgICdcXHUwMUY1JzogJ2cnLFxuICAgICdcXHUwMTFEJzogJ2cnLFxuICAgICdcXHUxRTIxJzogJ2cnLFxuICAgICdcXHUwMTFGJzogJ2cnLFxuICAgICdcXHUwMTIxJzogJ2cnLFxuICAgICdcXHUwMUU3JzogJ2cnLFxuICAgICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMUU1JzogJ2cnLFxuICAgICdcXHUwMjYwJzogJ2cnLFxuICAgICdcXHVBN0ExJzogJ2cnLFxuICAgICdcXHUxRDc5JzogJ2cnLFxuICAgICdcXHVBNzdGJzogJ2cnLFxuICAgICdcXHUyNEQ3JzogJ2gnLFxuICAgICdcXHVGRjQ4JzogJ2gnLFxuICAgICdcXHUwMTI1JzogJ2gnLFxuICAgICdcXHUxRTIzJzogJ2gnLFxuICAgICdcXHUxRTI3JzogJ2gnLFxuICAgICdcXHUwMjFGJzogJ2gnLFxuICAgICdcXHUxRTI1JzogJ2gnLFxuICAgICdcXHUxRTI5JzogJ2gnLFxuICAgICdcXHUxRTJCJzogJ2gnLFxuICAgICdcXHUxRTk2JzogJ2gnLFxuICAgICdcXHUwMTI3JzogJ2gnLFxuICAgICdcXHUyQzY4JzogJ2gnLFxuICAgICdcXHUyQzc2JzogJ2gnLFxuICAgICdcXHUwMjY1JzogJ2gnLFxuICAgICdcXHUwMTk1JzogJ2h2JyxcbiAgICAnXFx1MjREOCc6ICdpJyxcbiAgICAnXFx1RkY0OSc6ICdpJyxcbiAgICAnXFx1MDBFQyc6ICdpJyxcbiAgICAnXFx1MDBFRCc6ICdpJyxcbiAgICAnXFx1MDBFRSc6ICdpJyxcbiAgICAnXFx1MDEyOSc6ICdpJyxcbiAgICAnXFx1MDEyQic6ICdpJyxcbiAgICAnXFx1MDEyRCc6ICdpJyxcbiAgICAnXFx1MDBFRic6ICdpJyxcbiAgICAnXFx1MUUyRic6ICdpJyxcbiAgICAnXFx1MUVDOSc6ICdpJyxcbiAgICAnXFx1MDFEMCc6ICdpJyxcbiAgICAnXFx1MDIwOSc6ICdpJyxcbiAgICAnXFx1MDIwQic6ICdpJyxcbiAgICAnXFx1MUVDQic6ICdpJyxcbiAgICAnXFx1MDEyRic6ICdpJyxcbiAgICAnXFx1MUUyRCc6ICdpJyxcbiAgICAnXFx1MDI2OCc6ICdpJyxcbiAgICAnXFx1MDEzMSc6ICdpJyxcbiAgICAnXFx1MjREOSc6ICdqJyxcbiAgICAnXFx1RkY0QSc6ICdqJyxcbiAgICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDFGMCc6ICdqJyxcbiAgICAnXFx1MDI0OSc6ICdqJyxcbiAgICAnXFx1MjREQSc6ICdrJyxcbiAgICAnXFx1RkY0Qic6ICdrJyxcbiAgICAnXFx1MUUzMSc6ICdrJyxcbiAgICAnXFx1MDFFOSc6ICdrJyxcbiAgICAnXFx1MUUzMyc6ICdrJyxcbiAgICAnXFx1MDEzNyc6ICdrJyxcbiAgICAnXFx1MUUzNSc6ICdrJyxcbiAgICAnXFx1MDE5OSc6ICdrJyxcbiAgICAnXFx1MkM2QSc6ICdrJyxcbiAgICAnXFx1QTc0MSc6ICdrJyxcbiAgICAnXFx1QTc0Myc6ICdrJyxcbiAgICAnXFx1QTc0NSc6ICdrJyxcbiAgICAnXFx1QTdBMyc6ICdrJyxcbiAgICAnXFx1MjREQic6ICdsJyxcbiAgICAnXFx1RkY0Qyc6ICdsJyxcbiAgICAnXFx1MDE0MCc6ICdsJyxcbiAgICAnXFx1MDEzQSc6ICdsJyxcbiAgICAnXFx1MDEzRSc6ICdsJyxcbiAgICAnXFx1MUUzNyc6ICdsJyxcbiAgICAnXFx1MUUzOSc6ICdsJyxcbiAgICAnXFx1MDEzQyc6ICdsJyxcbiAgICAnXFx1MUUzRCc6ICdsJyxcbiAgICAnXFx1MUUzQic6ICdsJyxcbiAgICAnXFx1MDE3Ric6ICdsJyxcbiAgICAnXFx1MDE0Mic6ICdsJyxcbiAgICAnXFx1MDE5QSc6ICdsJyxcbiAgICAnXFx1MDI2Qic6ICdsJyxcbiAgICAnXFx1MkM2MSc6ICdsJyxcbiAgICAnXFx1QTc0OSc6ICdsJyxcbiAgICAnXFx1QTc4MSc6ICdsJyxcbiAgICAnXFx1QTc0Nyc6ICdsJyxcbiAgICAnXFx1MDFDOSc6ICdsaicsXG4gICAgJ1xcdTI0REMnOiAnbScsXG4gICAgJ1xcdUZGNEQnOiAnbScsXG4gICAgJ1xcdTFFM0YnOiAnbScsXG4gICAgJ1xcdTFFNDEnOiAnbScsXG4gICAgJ1xcdTFFNDMnOiAnbScsXG4gICAgJ1xcdTAyNzEnOiAnbScsXG4gICAgJ1xcdTAyNkYnOiAnbScsXG4gICAgJ1xcdTI0REQnOiAnbicsXG4gICAgJ1xcdUZGNEUnOiAnbicsXG4gICAgJ1xcdTAxRjknOiAnbicsXG4gICAgJ1xcdTAxNDQnOiAnbicsXG4gICAgJ1xcdTAwRjEnOiAnbicsXG4gICAgJ1xcdTFFNDUnOiAnbicsXG4gICAgJ1xcdTAxNDgnOiAnbicsXG4gICAgJ1xcdTFFNDcnOiAnbicsXG4gICAgJ1xcdTAxNDYnOiAnbicsXG4gICAgJ1xcdTFFNEInOiAnbicsXG4gICAgJ1xcdTFFNDknOiAnbicsXG4gICAgJ1xcdTAxOUUnOiAnbicsXG4gICAgJ1xcdTAyNzInOiAnbicsXG4gICAgJ1xcdTAxNDknOiAnbicsXG4gICAgJ1xcdUE3OTEnOiAnbicsXG4gICAgJ1xcdUE3QTUnOiAnbicsXG4gICAgJ1xcdTAxQ0MnOiAnbmonLFxuICAgICdcXHUyNERFJzogJ28nLFxuICAgICdcXHVGRjRGJzogJ28nLFxuICAgICdcXHUwMEYyJzogJ28nLFxuICAgICdcXHUwMEYzJzogJ28nLFxuICAgICdcXHUwMEY0JzogJ28nLFxuICAgICdcXHUxRUQzJzogJ28nLFxuICAgICdcXHUxRUQxJzogJ28nLFxuICAgICdcXHUxRUQ3JzogJ28nLFxuICAgICdcXHUxRUQ1JzogJ28nLFxuICAgICdcXHUwMEY1JzogJ28nLFxuICAgICdcXHUxRTREJzogJ28nLFxuICAgICdcXHUwMjJEJzogJ28nLFxuICAgICdcXHUxRTRGJzogJ28nLFxuICAgICdcXHUwMTREJzogJ28nLFxuICAgICdcXHUxRTUxJzogJ28nLFxuICAgICdcXHUxRTUzJzogJ28nLFxuICAgICdcXHUwMTRGJzogJ28nLFxuICAgICdcXHUwMjJGJzogJ28nLFxuICAgICdcXHUwMjMxJzogJ28nLFxuICAgICdcXHUwMEY2JzogJ28nLFxuICAgICdcXHUwMjJCJzogJ28nLFxuICAgICdcXHUxRUNGJzogJ28nLFxuICAgICdcXHUwMTUxJzogJ28nLFxuICAgICdcXHUwMUQyJzogJ28nLFxuICAgICdcXHUwMjBEJzogJ28nLFxuICAgICdcXHUwMjBGJzogJ28nLFxuICAgICdcXHUwMUExJzogJ28nLFxuICAgICdcXHUxRUREJzogJ28nLFxuICAgICdcXHUxRURCJzogJ28nLFxuICAgICdcXHUxRUUxJzogJ28nLFxuICAgICdcXHUxRURGJzogJ28nLFxuICAgICdcXHUxRUUzJzogJ28nLFxuICAgICdcXHUxRUNEJzogJ28nLFxuICAgICdcXHUxRUQ5JzogJ28nLFxuICAgICdcXHUwMUVCJzogJ28nLFxuICAgICdcXHUwMUVEJzogJ28nLFxuICAgICdcXHUwMEY4JzogJ28nLFxuICAgICdcXHUwMUZGJzogJ28nLFxuICAgICdcXHUwMjU0JzogJ28nLFxuICAgICdcXHVBNzRCJzogJ28nLFxuICAgICdcXHVBNzREJzogJ28nLFxuICAgICdcXHUwMjc1JzogJ28nLFxuICAgICdcXHUwMUEzJzogJ29pJyxcbiAgICAnXFx1MDIyMyc6ICdvdScsXG4gICAgJ1xcdUE3NEYnOiAnb28nLFxuICAgICdcXHUyNERGJzogJ3AnLFxuICAgICdcXHVGRjUwJzogJ3AnLFxuICAgICdcXHUxRTU1JzogJ3AnLFxuICAgICdcXHUxRTU3JzogJ3AnLFxuICAgICdcXHUwMUE1JzogJ3AnLFxuICAgICdcXHUxRDdEJzogJ3AnLFxuICAgICdcXHVBNzUxJzogJ3AnLFxuICAgICdcXHVBNzUzJzogJ3AnLFxuICAgICdcXHVBNzU1JzogJ3AnLFxuICAgICdcXHUyNEUwJzogJ3EnLFxuICAgICdcXHVGRjUxJzogJ3EnLFxuICAgICdcXHUwMjRCJzogJ3EnLFxuICAgICdcXHVBNzU3JzogJ3EnLFxuICAgICdcXHVBNzU5JzogJ3EnLFxuICAgICdcXHUyNEUxJzogJ3InLFxuICAgICdcXHVGRjUyJzogJ3InLFxuICAgICdcXHUwMTU1JzogJ3InLFxuICAgICdcXHUxRTU5JzogJ3InLFxuICAgICdcXHUwMTU5JzogJ3InLFxuICAgICdcXHUwMjExJzogJ3InLFxuICAgICdcXHUwMjEzJzogJ3InLFxuICAgICdcXHUxRTVCJzogJ3InLFxuICAgICdcXHUxRTVEJzogJ3InLFxuICAgICdcXHUwMTU3JzogJ3InLFxuICAgICdcXHUxRTVGJzogJ3InLFxuICAgICdcXHUwMjREJzogJ3InLFxuICAgICdcXHUwMjdEJzogJ3InLFxuICAgICdcXHVBNzVCJzogJ3InLFxuICAgICdcXHVBN0E3JzogJ3InLFxuICAgICdcXHVBNzgzJzogJ3InLFxuICAgICdcXHUyNEUyJzogJ3MnLFxuICAgICdcXHVGRjUzJzogJ3MnLFxuICAgICdcXHUwMERGJzogJ3MnLFxuICAgICdcXHUwMTVCJzogJ3MnLFxuICAgICdcXHUxRTY1JzogJ3MnLFxuICAgICdcXHUwMTVEJzogJ3MnLFxuICAgICdcXHUxRTYxJzogJ3MnLFxuICAgICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUxRTY3JzogJ3MnLFxuICAgICdcXHUxRTYzJzogJ3MnLFxuICAgICdcXHUxRTY5JzogJ3MnLFxuICAgICdcXHUwMjE5JzogJ3MnLFxuICAgICdcXHUwMTVGJzogJ3MnLFxuICAgICdcXHUwMjNGJzogJ3MnLFxuICAgICdcXHVBN0E5JzogJ3MnLFxuICAgICdcXHVBNzg1JzogJ3MnLFxuICAgICdcXHUxRTlCJzogJ3MnLFxuICAgICdcXHUyNEUzJzogJ3QnLFxuICAgICdcXHVGRjU0JzogJ3QnLFxuICAgICdcXHUxRTZCJzogJ3QnLFxuICAgICdcXHUxRTk3JzogJ3QnLFxuICAgICdcXHUwMTY1JzogJ3QnLFxuICAgICdcXHUxRTZEJzogJ3QnLFxuICAgICdcXHUwMjFCJzogJ3QnLFxuICAgICdcXHUwMTYzJzogJ3QnLFxuICAgICdcXHUxRTcxJzogJ3QnLFxuICAgICdcXHUxRTZGJzogJ3QnLFxuICAgICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMUFEJzogJ3QnLFxuICAgICdcXHUwMjg4JzogJ3QnLFxuICAgICdcXHUyQzY2JzogJ3QnLFxuICAgICdcXHVBNzg3JzogJ3QnLFxuICAgICdcXHVBNzI5JzogJ3R6JyxcbiAgICAnXFx1MjRFNCc6ICd1JyxcbiAgICAnXFx1RkY1NSc6ICd1JyxcbiAgICAnXFx1MDBGOSc6ICd1JyxcbiAgICAnXFx1MDBGQSc6ICd1JyxcbiAgICAnXFx1MDBGQic6ICd1JyxcbiAgICAnXFx1MDE2OSc6ICd1JyxcbiAgICAnXFx1MUU3OSc6ICd1JyxcbiAgICAnXFx1MDE2Qic6ICd1JyxcbiAgICAnXFx1MUU3Qic6ICd1JyxcbiAgICAnXFx1MDE2RCc6ICd1JyxcbiAgICAnXFx1MDBGQyc6ICd1JyxcbiAgICAnXFx1MDFEQyc6ICd1JyxcbiAgICAnXFx1MDFEOCc6ICd1JyxcbiAgICAnXFx1MDFENic6ICd1JyxcbiAgICAnXFx1MDFEQSc6ICd1JyxcbiAgICAnXFx1MUVFNyc6ICd1JyxcbiAgICAnXFx1MDE2Ric6ICd1JyxcbiAgICAnXFx1MDE3MSc6ICd1JyxcbiAgICAnXFx1MDFENCc6ICd1JyxcbiAgICAnXFx1MDIxNSc6ICd1JyxcbiAgICAnXFx1MDIxNyc6ICd1JyxcbiAgICAnXFx1MDFCMCc6ICd1JyxcbiAgICAnXFx1MUVFQic6ICd1JyxcbiAgICAnXFx1MUVFOSc6ICd1JyxcbiAgICAnXFx1MUVFRic6ICd1JyxcbiAgICAnXFx1MUVFRCc6ICd1JyxcbiAgICAnXFx1MUVGMSc6ICd1JyxcbiAgICAnXFx1MUVFNSc6ICd1JyxcbiAgICAnXFx1MUU3Myc6ICd1JyxcbiAgICAnXFx1MDE3Myc6ICd1JyxcbiAgICAnXFx1MUU3Nyc6ICd1JyxcbiAgICAnXFx1MUU3NSc6ICd1JyxcbiAgICAnXFx1MDI4OSc6ICd1JyxcbiAgICAnXFx1MjRFNSc6ICd2JyxcbiAgICAnXFx1RkY1Nic6ICd2JyxcbiAgICAnXFx1MUU3RCc6ICd2JyxcbiAgICAnXFx1MUU3Ric6ICd2JyxcbiAgICAnXFx1MDI4Qic6ICd2JyxcbiAgICAnXFx1QTc1Ric6ICd2JyxcbiAgICAnXFx1MDI4Qyc6ICd2JyxcbiAgICAnXFx1QTc2MSc6ICd2eScsXG4gICAgJ1xcdTI0RTYnOiAndycsXG4gICAgJ1xcdUZGNTcnOiAndycsXG4gICAgJ1xcdTFFODEnOiAndycsXG4gICAgJ1xcdTFFODMnOiAndycsXG4gICAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTFFODcnOiAndycsXG4gICAgJ1xcdTFFODUnOiAndycsXG4gICAgJ1xcdTFFOTgnOiAndycsXG4gICAgJ1xcdTFFODknOiAndycsXG4gICAgJ1xcdTJDNzMnOiAndycsXG4gICAgJ1xcdTI0RTcnOiAneCcsXG4gICAgJ1xcdUZGNTgnOiAneCcsXG4gICAgJ1xcdTFFOEInOiAneCcsXG4gICAgJ1xcdTFFOEQnOiAneCcsXG4gICAgJ1xcdTI0RTgnOiAneScsXG4gICAgJ1xcdUZGNTknOiAneScsXG4gICAgJ1xcdTFFRjMnOiAneScsXG4gICAgJ1xcdTAwRkQnOiAneScsXG4gICAgJ1xcdTAxNzcnOiAneScsXG4gICAgJ1xcdTFFRjknOiAneScsXG4gICAgJ1xcdTAyMzMnOiAneScsXG4gICAgJ1xcdTFFOEYnOiAneScsXG4gICAgJ1xcdTAwRkYnOiAneScsXG4gICAgJ1xcdTFFRjcnOiAneScsXG4gICAgJ1xcdTFFOTknOiAneScsXG4gICAgJ1xcdTFFRjUnOiAneScsXG4gICAgJ1xcdTAxQjQnOiAneScsXG4gICAgJ1xcdTAyNEYnOiAneScsXG4gICAgJ1xcdTFFRkYnOiAneScsXG4gICAgJ1xcdTI0RTknOiAneicsXG4gICAgJ1xcdUZGNUEnOiAneicsXG4gICAgJ1xcdTAxN0EnOiAneicsXG4gICAgJ1xcdTFFOTEnOiAneicsXG4gICAgJ1xcdTAxN0MnOiAneicsXG4gICAgJ1xcdTAxN0UnOiAneicsXG4gICAgJ1xcdTFFOTMnOiAneicsXG4gICAgJ1xcdTFFOTUnOiAneicsXG4gICAgJ1xcdTAxQjYnOiAneicsXG4gICAgJ1xcdTAyMjUnOiAneicsXG4gICAgJ1xcdTAyNDAnOiAneicsXG4gICAgJ1xcdTJDNkMnOiAneicsXG4gICAgJ1xcdUE3NjMnOiAneicsXG4gICAgJ1xcdTAzODYnOiAnXFx1MDM5MScsXG4gICAgJ1xcdTAzODgnOiAnXFx1MDM5NScsXG4gICAgJ1xcdTAzODknOiAnXFx1MDM5NycsXG4gICAgJ1xcdTAzOEEnOiAnXFx1MDM5OScsXG4gICAgJ1xcdTAzQUEnOiAnXFx1MDM5OScsXG4gICAgJ1xcdTAzOEMnOiAnXFx1MDM5RicsXG4gICAgJ1xcdTAzOEUnOiAnXFx1MDNBNScsXG4gICAgJ1xcdTAzQUInOiAnXFx1MDNBNScsXG4gICAgJ1xcdTAzOEYnOiAnXFx1MDNBOScsXG4gICAgJ1xcdTAzQUMnOiAnXFx1MDNCMScsXG4gICAgJ1xcdTAzQUQnOiAnXFx1MDNCNScsXG4gICAgJ1xcdTAzQUUnOiAnXFx1MDNCNycsXG4gICAgJ1xcdTAzQUYnOiAnXFx1MDNCOScsXG4gICAgJ1xcdTAzQ0EnOiAnXFx1MDNCOScsXG4gICAgJ1xcdTAzOTAnOiAnXFx1MDNCOScsXG4gICAgJ1xcdTAzQ0MnOiAnXFx1MDNCRicsXG4gICAgJ1xcdTAzQ0QnOiAnXFx1MDNDNScsXG4gICAgJ1xcdTAzQ0InOiAnXFx1MDNDNScsXG4gICAgJ1xcdTAzQjAnOiAnXFx1MDNDNScsXG4gICAgJ1xcdTAzQzknOiAnXFx1MDNDOScsXG4gICAgJ1xcdTAzQzInOiAnXFx1MDNDMydcbiAgfTtcblxuICByZXR1cm4gZGlhY3JpdGljcztcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9iYXNlJyxbXG4gICcuLi91dGlscydcbl0sIGZ1bmN0aW9uIChVdGlscykge1xuICBmdW5jdGlvbiBCYXNlQWRhcHRlciAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBCYXNlQWRhcHRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIFV0aWxzLkV4dGVuZChCYXNlQWRhcHRlciwgVXRpbHMuT2JzZXJ2YWJsZSk7XG5cbiAgQmFzZUFkYXB0ZXIucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgY3VycmVudGAgbWV0aG9kIG11c3QgYmUgZGVmaW5lZCBpbiBjaGlsZCBjbGFzc2VzLicpO1xuICB9O1xuXG4gIEJhc2VBZGFwdGVyLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYHF1ZXJ5YCBtZXRob2QgbXVzdCBiZSBkZWZpbmVkIGluIGNoaWxkIGNsYXNzZXMuJyk7XG4gIH07XG5cbiAgQmFzZUFkYXB0ZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgLy8gQ2FuIGJlIGltcGxlbWVudGVkIGluIHN1YmNsYXNzZXNcbiAgfTtcblxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBDYW4gYmUgaW1wbGVtZW50ZWQgaW4gc3ViY2xhc3Nlc1xuICB9O1xuXG4gIEJhc2VBZGFwdGVyLnByb3RvdHlwZS5nZW5lcmF0ZVJlc3VsdElkID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgZGF0YSkge1xuICAgIHZhciBpZCA9IGNvbnRhaW5lci5pZCArICctcmVzdWx0LSc7XG5cbiAgICBpZCArPSBVdGlscy5nZW5lcmF0ZUNoYXJzKDQpO1xuXG4gICAgaWYgKGRhdGEuaWQgIT0gbnVsbCkge1xuICAgICAgaWQgKz0gJy0nICsgZGF0YS5pZC50b1N0cmluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCArPSAnLScgKyBVdGlscy5nZW5lcmF0ZUNoYXJzKDQpO1xuICAgIH1cbiAgICByZXR1cm4gaWQ7XG4gIH07XG5cbiAgcmV0dXJuIEJhc2VBZGFwdGVyO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9kYXRhL3NlbGVjdCcsW1xuICAnLi9iYXNlJyxcbiAgJy4uL3V0aWxzJyxcbiAgJ2pxdWVyeSdcbl0sIGZ1bmN0aW9uIChCYXNlQWRhcHRlciwgVXRpbHMsICQpIHtcbiAgZnVuY3Rpb24gU2VsZWN0QWRhcHRlciAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIFNlbGVjdEFkYXB0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gIH1cblxuICBVdGlscy5FeHRlbmQoU2VsZWN0QWRhcHRlciwgQmFzZUFkYXB0ZXIpO1xuXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgZGF0YSA9IFtdO1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnOnNlbGVjdGVkJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJG9wdGlvbiA9ICQodGhpcyk7XG5cbiAgICAgIHZhciBvcHRpb24gPSBzZWxmLml0ZW0oJG9wdGlvbik7XG5cbiAgICAgIGRhdGEucHVzaChvcHRpb24pO1xuICAgIH0pO1xuXG4gICAgY2FsbGJhY2soZGF0YSk7XG4gIH07XG5cbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBkYXRhLnNlbGVjdGVkID0gdHJ1ZTtcblxuICAgIC8vIElmIGRhdGEuZWxlbWVudCBpcyBhIERPTSBub2RlLCB1c2UgaXQgaW5zdGVhZFxuICAgIGlmICgkKGRhdGEuZWxlbWVudCkuaXMoJ29wdGlvbicpKSB7XG4gICAgICBkYXRhLmVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZScpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQucHJvcCgnbXVsdGlwbGUnKSkge1xuICAgICAgdGhpcy5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xuICAgICAgICB2YXIgdmFsID0gW107XG5cbiAgICAgICAgZGF0YSA9IFtkYXRhXTtcbiAgICAgICAgZGF0YS5wdXNoLmFwcGx5KGRhdGEsIGN1cnJlbnREYXRhKTtcblxuICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRhdGEubGVuZ3RoOyBkKyspIHtcbiAgICAgICAgICB2YXIgaWQgPSBkYXRhW2RdLmlkO1xuXG4gICAgICAgICAgaWYgKCQuaW5BcnJheShpZCwgdmFsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHZhbC5wdXNoKGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLiRlbGVtZW50LnZhbCh2YWwpO1xuICAgICAgICBzZWxmLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2YWwgPSBkYXRhLmlkO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LnZhbCh2YWwpO1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICB9XG4gIH07XG5cbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUudW5zZWxlY3QgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGlmICghdGhpcy4kZWxlbWVudC5wcm9wKCdtdWx0aXBsZScpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGF0YS5zZWxlY3RlZCA9IGZhbHNlO1xuXG4gICAgaWYgKCQoZGF0YS5lbGVtZW50KS5pcygnb3B0aW9uJykpIHtcbiAgICAgIGRhdGEuZWxlbWVudC5zZWxlY3RlZCA9IGZhbHNlO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZScpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xuICAgICAgdmFyIHZhbCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBkID0gMDsgZCA8IGN1cnJlbnREYXRhLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgIHZhciBpZCA9IGN1cnJlbnREYXRhW2RdLmlkO1xuXG4gICAgICAgIGlmIChpZCAhPT0gZGF0YS5pZCAmJiAkLmluQXJyYXkoaWQsIHZhbCkgPT09IC0xKSB7XG4gICAgICAgICAgdmFsLnB1c2goaWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNlbGYuJGVsZW1lbnQudmFsKHZhbCk7XG5cbiAgICAgIHNlbGYuJGVsZW1lbnQudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChjb250YWluZXIsICRjb250YWluZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcblxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0JywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgc2VsZi5zZWxlY3QocGFyYW1zLmRhdGEpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCd1bnNlbGVjdCcsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHNlbGYudW5zZWxlY3QocGFyYW1zLmRhdGEpO1xuICAgIH0pO1xuICB9O1xuXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gUmVtb3ZlIGFueXRoaW5nIGFkZGVkIHRvIGNoaWxkIGVsZW1lbnRzXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCcqJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBSZW1vdmUgYW55IGN1c3RvbSBkYXRhIHNldCBieSBTZWxlY3QyXG4gICAgICAkLnJlbW92ZURhdGEodGhpcywgJ2RhdGEnKTtcbiAgICB9KTtcbiAgfTtcblxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGRhdGEgPSBbXTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgJG9wdGlvbnMgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCk7XG5cbiAgICAkb3B0aW9ucy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkb3B0aW9uID0gJCh0aGlzKTtcblxuICAgICAgaWYgKCEkb3B0aW9uLmlzKCdvcHRpb24nKSAmJiAhJG9wdGlvbi5pcygnb3B0Z3JvdXAnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvcHRpb24gPSBzZWxmLml0ZW0oJG9wdGlvbik7XG5cbiAgICAgIHZhciBtYXRjaGVzID0gc2VsZi5tYXRjaGVzKHBhcmFtcywgb3B0aW9uKTtcblxuICAgICAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHtcbiAgICAgICAgZGF0YS5wdXNoKG1hdGNoZXMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY2FsbGJhY2soe1xuICAgICAgcmVzdWx0czogZGF0YVxuICAgIH0pO1xuICB9O1xuXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLmFkZE9wdGlvbnMgPSBmdW5jdGlvbiAoJG9wdGlvbnMpIHtcbiAgICBVdGlscy5hcHBlbmRNYW55KHRoaXMuJGVsZW1lbnQsICRvcHRpb25zKTtcbiAgfTtcblxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBvcHRpb247XG5cbiAgICBpZiAoZGF0YS5jaGlsZHJlbikge1xuICAgICAgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0Z3JvdXAnKTtcbiAgICAgIG9wdGlvbi5sYWJlbCA9IGRhdGEudGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG5cbiAgICAgIGlmIChvcHRpb24udGV4dENvbnRlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBkYXRhLnRleHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb24uaW5uZXJUZXh0ID0gZGF0YS50ZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkYXRhLmlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdGlvbi52YWx1ZSA9IGRhdGEuaWQ7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuZGlzYWJsZWQpIHtcbiAgICAgIG9wdGlvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuc2VsZWN0ZWQpIHtcbiAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEudGl0bGUpIHtcbiAgICAgIG9wdGlvbi50aXRsZSA9IGRhdGEudGl0bGU7XG4gICAgfVxuXG4gICAgdmFyICRvcHRpb24gPSAkKG9wdGlvbik7XG5cbiAgICB2YXIgbm9ybWFsaXplZERhdGEgPSB0aGlzLl9ub3JtYWxpemVJdGVtKGRhdGEpO1xuICAgIG5vcm1hbGl6ZWREYXRhLmVsZW1lbnQgPSBvcHRpb247XG5cbiAgICAvLyBPdmVycmlkZSB0aGUgb3B0aW9uJ3MgZGF0YSB3aXRoIHRoZSBjb21iaW5lZCBkYXRhXG4gICAgJC5kYXRhKG9wdGlvbiwgJ2RhdGEnLCBub3JtYWxpemVkRGF0YSk7XG5cbiAgICByZXR1cm4gJG9wdGlvbjtcbiAgfTtcblxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24gKCRvcHRpb24pIHtcbiAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgZGF0YSA9ICQuZGF0YSgkb3B0aW9uWzBdLCAnZGF0YScpO1xuXG4gICAgaWYgKGRhdGEgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKCRvcHRpb24uaXMoJ29wdGlvbicpKSB7XG4gICAgICBkYXRhID0ge1xuICAgICAgICBpZDogJG9wdGlvbi52YWwoKSxcbiAgICAgICAgdGV4dDogJG9wdGlvbi50ZXh0KCksXG4gICAgICAgIGRpc2FibGVkOiAkb3B0aW9uLnByb3AoJ2Rpc2FibGVkJyksXG4gICAgICAgIHNlbGVjdGVkOiAkb3B0aW9uLnByb3AoJ3NlbGVjdGVkJyksXG4gICAgICAgIHRpdGxlOiAkb3B0aW9uLnByb3AoJ3RpdGxlJylcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICgkb3B0aW9uLmlzKCdvcHRncm91cCcpKSB7XG4gICAgICBkYXRhID0ge1xuICAgICAgICB0ZXh0OiAkb3B0aW9uLnByb3AoJ2xhYmVsJyksXG4gICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgdGl0bGU6ICRvcHRpb24ucHJvcCgndGl0bGUnKVxuICAgICAgfTtcblxuICAgICAgdmFyICRjaGlsZHJlbiA9ICRvcHRpb24uY2hpbGRyZW4oJ29wdGlvbicpO1xuICAgICAgdmFyIGNoaWxkcmVuID0gW107XG5cbiAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgJGNoaWxkcmVuLmxlbmd0aDsgYysrKSB7XG4gICAgICAgIHZhciAkY2hpbGQgPSAkKCRjaGlsZHJlbltjXSk7XG5cbiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5pdGVtKCRjaGlsZCk7XG5cbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIGRhdGEuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9XG5cbiAgICBkYXRhID0gdGhpcy5fbm9ybWFsaXplSXRlbShkYXRhKTtcbiAgICBkYXRhLmVsZW1lbnQgPSAkb3B0aW9uWzBdO1xuXG4gICAgJC5kYXRhKCRvcHRpb25bMF0sICdkYXRhJywgZGF0YSk7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5fbm9ybWFsaXplSXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKCEkLmlzUGxhaW5PYmplY3QoaXRlbSkpIHtcbiAgICAgIGl0ZW0gPSB7XG4gICAgICAgIGlkOiBpdGVtLFxuICAgICAgICB0ZXh0OiBpdGVtXG4gICAgICB9O1xuICAgIH1cblxuICAgIGl0ZW0gPSAkLmV4dGVuZCh7fSwge1xuICAgICAgdGV4dDogJydcbiAgICB9LCBpdGVtKTtcblxuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgIH07XG5cbiAgICBpZiAoaXRlbS5pZCAhPSBudWxsKSB7XG4gICAgICBpdGVtLmlkID0gaXRlbS5pZC50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmIChpdGVtLnRleHQgIT0gbnVsbCkge1xuICAgICAgaXRlbS50ZXh0ID0gaXRlbS50ZXh0LnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW0uX3Jlc3VsdElkID09IG51bGwgJiYgaXRlbS5pZCAmJiB0aGlzLmNvbnRhaW5lciAhPSBudWxsKSB7XG4gICAgICBpdGVtLl9yZXN1bHRJZCA9IHRoaXMuZ2VuZXJhdGVSZXN1bHRJZCh0aGlzLmNvbnRhaW5lciwgaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgaXRlbSk7XG4gIH07XG5cbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUubWF0Y2hlcyA9IGZ1bmN0aW9uIChwYXJhbXMsIGRhdGEpIHtcbiAgICB2YXIgbWF0Y2hlciA9IHRoaXMub3B0aW9ucy5nZXQoJ21hdGNoZXInKTtcblxuICAgIHJldHVybiBtYXRjaGVyKHBhcmFtcywgZGF0YSk7XG4gIH07XG5cbiAgcmV0dXJuIFNlbGVjdEFkYXB0ZXI7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvYXJyYXknLFtcbiAgJy4vc2VsZWN0JyxcbiAgJy4uL3V0aWxzJyxcbiAgJ2pxdWVyeSdcbl0sIGZ1bmN0aW9uIChTZWxlY3RBZGFwdGVyLCBVdGlscywgJCkge1xuICBmdW5jdGlvbiBBcnJheUFkYXB0ZXIgKCRlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdmFyIGRhdGEgPSBvcHRpb25zLmdldCgnZGF0YScpIHx8IFtdO1xuXG4gICAgQXJyYXlBZGFwdGVyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcblxuICAgIHRoaXMuYWRkT3B0aW9ucyh0aGlzLmNvbnZlcnRUb09wdGlvbnMoZGF0YSkpO1xuICB9XG5cbiAgVXRpbHMuRXh0ZW5kKEFycmF5QWRhcHRlciwgU2VsZWN0QWRhcHRlcik7XG5cbiAgQXJyYXlBZGFwdGVyLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciAkb3B0aW9uID0gdGhpcy4kZWxlbWVudC5maW5kKCdvcHRpb24nKS5maWx0ZXIoZnVuY3Rpb24gKGksIGVsbSkge1xuICAgICAgcmV0dXJuIGVsbS52YWx1ZSA9PSBkYXRhLmlkLnRvU3RyaW5nKCk7XG4gICAgfSk7XG5cbiAgICBpZiAoJG9wdGlvbi5sZW5ndGggPT09IDApIHtcbiAgICAgICRvcHRpb24gPSB0aGlzLm9wdGlvbihkYXRhKTtcblxuICAgICAgdGhpcy5hZGRPcHRpb25zKCRvcHRpb24pO1xuICAgIH1cblxuICAgIEFycmF5QWRhcHRlci5fX3N1cGVyX18uc2VsZWN0LmNhbGwodGhpcywgZGF0YSk7XG4gIH07XG5cbiAgQXJyYXlBZGFwdGVyLnByb3RvdHlwZS5jb252ZXJ0VG9PcHRpb25zID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgJGV4aXN0aW5nID0gdGhpcy4kZWxlbWVudC5maW5kKCdvcHRpb24nKTtcbiAgICB2YXIgZXhpc3RpbmdJZHMgPSAkZXhpc3RpbmcubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzZWxmLml0ZW0oJCh0aGlzKSkuaWQ7XG4gICAgfSkuZ2V0KCk7XG5cbiAgICB2YXIgJG9wdGlvbnMgPSBbXTtcblxuICAgIC8vIEZpbHRlciBvdXQgYWxsIGl0ZW1zIGV4Y2VwdCBmb3IgdGhlIG9uZSBwYXNzZWQgaW4gdGhlIGFyZ3VtZW50XG4gICAgZnVuY3Rpb24gb25seUl0ZW0gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMpLnZhbCgpID09IGl0ZW0uaWQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGF0YS5sZW5ndGg7IGQrKykge1xuICAgICAgdmFyIGl0ZW0gPSB0aGlzLl9ub3JtYWxpemVJdGVtKGRhdGFbZF0pO1xuXG4gICAgICAvLyBTa2lwIGl0ZW1zIHdoaWNoIHdlcmUgcHJlLWxvYWRlZCwgb25seSBtZXJnZSB0aGUgZGF0YVxuICAgICAgaWYgKCQuaW5BcnJheShpdGVtLmlkLCBleGlzdGluZ0lkcykgPj0gMCkge1xuICAgICAgICB2YXIgJGV4aXN0aW5nT3B0aW9uID0gJGV4aXN0aW5nLmZpbHRlcihvbmx5SXRlbShpdGVtKSk7XG5cbiAgICAgICAgdmFyIGV4aXN0aW5nRGF0YSA9IHRoaXMuaXRlbSgkZXhpc3RpbmdPcHRpb24pO1xuICAgICAgICB2YXIgbmV3RGF0YSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBpdGVtLCBleGlzdGluZ0RhdGEpO1xuXG4gICAgICAgIHZhciAkbmV3T3B0aW9uID0gdGhpcy5vcHRpb24obmV3RGF0YSk7XG5cbiAgICAgICAgJGV4aXN0aW5nT3B0aW9uLnJlcGxhY2VXaXRoKCRuZXdPcHRpb24pO1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgJG9wdGlvbiA9IHRoaXMub3B0aW9uKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbS5jaGlsZHJlbikge1xuICAgICAgICB2YXIgJGNoaWxkcmVuID0gdGhpcy5jb252ZXJ0VG9PcHRpb25zKGl0ZW0uY2hpbGRyZW4pO1xuXG4gICAgICAgIFV0aWxzLmFwcGVuZE1hbnkoJG9wdGlvbiwgJGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgJG9wdGlvbnMucHVzaCgkb3B0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJG9wdGlvbnM7XG4gIH07XG5cbiAgcmV0dXJuIEFycmF5QWRhcHRlcjtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9hamF4JyxbXG4gICcuL2FycmF5JyxcbiAgJy4uL3V0aWxzJyxcbiAgJ2pxdWVyeSdcbl0sIGZ1bmN0aW9uIChBcnJheUFkYXB0ZXIsIFV0aWxzLCAkKSB7XG4gIGZ1bmN0aW9uIEFqYXhBZGFwdGVyICgkZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuYWpheE9wdGlvbnMgPSB0aGlzLl9hcHBseURlZmF1bHRzKG9wdGlvbnMuZ2V0KCdhamF4JykpO1xuXG4gICAgaWYgKHRoaXMuYWpheE9wdGlvbnMucHJvY2Vzc1Jlc3VsdHMgIT0gbnVsbCkge1xuICAgICAgdGhpcy5wcm9jZXNzUmVzdWx0cyA9IHRoaXMuYWpheE9wdGlvbnMucHJvY2Vzc1Jlc3VsdHM7XG4gICAgfVxuXG4gICAgQWpheEFkYXB0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMpO1xuICB9XG5cbiAgVXRpbHMuRXh0ZW5kKEFqYXhBZGFwdGVyLCBBcnJheUFkYXB0ZXIpO1xuXG4gIEFqYXhBZGFwdGVyLnByb3RvdHlwZS5fYXBwbHlEZWZhdWx0cyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgZGF0YTogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIHBhcmFtcywge1xuICAgICAgICAgIHE6IHBhcmFtcy50ZXJtXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHRyYW5zcG9ydDogZnVuY3Rpb24gKHBhcmFtcywgc3VjY2VzcywgZmFpbHVyZSkge1xuICAgICAgICB2YXIgJHJlcXVlc3QgPSAkLmFqYXgocGFyYW1zKTtcblxuICAgICAgICAkcmVxdWVzdC50aGVuKHN1Y2Nlc3MpO1xuICAgICAgICAkcmVxdWVzdC5mYWlsKGZhaWx1cmUpO1xuXG4gICAgICAgIHJldHVybiAkcmVxdWVzdDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucywgdHJ1ZSk7XG4gIH07XG5cbiAgQWpheEFkYXB0ZXIucHJvdG90eXBlLnByb2Nlc3NSZXN1bHRzID0gZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBBamF4QWRhcHRlci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHZhciBtYXRjaGVzID0gW107XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuX3JlcXVlc3QgIT0gbnVsbCkge1xuICAgICAgLy8gSlNPTlAgcmVxdWVzdHMgY2Fubm90IGFsd2F5cyBiZSBhYm9ydGVkXG4gICAgICBpZiAoJC5pc0Z1bmN0aW9uKHRoaXMuX3JlcXVlc3QuYWJvcnQpKSB7XG4gICAgICAgIHRoaXMuX3JlcXVlc3QuYWJvcnQoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICB0eXBlOiAnR0VUJ1xuICAgIH0sIHRoaXMuYWpheE9wdGlvbnMpO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnVybCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3B0aW9ucy51cmwgPSBvcHRpb25zLnVybC5jYWxsKHRoaXMuJGVsZW1lbnQsIHBhcmFtcyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9wdGlvbnMuZGF0YSA9IG9wdGlvbnMuZGF0YS5jYWxsKHRoaXMuJGVsZW1lbnQsIHBhcmFtcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVxdWVzdCAoKSB7XG4gICAgICB2YXIgJHJlcXVlc3QgPSBvcHRpb25zLnRyYW5zcG9ydChvcHRpb25zLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgcmVzdWx0cyA9IHNlbGYucHJvY2Vzc1Jlc3VsdHMoZGF0YSwgcGFyYW1zKTtcblxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmdldCgnZGVidWcnKSAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHJlc3BvbnNlIGluY2x1ZGVkIGEgYHJlc3VsdHNgIGtleS5cbiAgICAgICAgICBpZiAoIXJlc3VsdHMgfHwgIXJlc3VsdHMucmVzdWx0cyB8fCAhJC5pc0FycmF5KHJlc3VsdHMucmVzdWx0cykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICdTZWxlY3QyOiBUaGUgQUpBWCByZXN1bHRzIGRpZCBub3QgcmV0dXJuIGFuIGFycmF5IGluIHRoZSAnICtcbiAgICAgICAgICAgICAgJ2ByZXN1bHRzYCBrZXkgb2YgdGhlIHJlc3BvbnNlLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0cyk7XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IGlmIGEgcmVxdWVzdCB3YXMgYWJvcnRlZFxuICAgICAgICAvLyBPbmx5IHdvcmtzIGlmIHRoZSB0cmFuc3BvcnQgZXhwb3NlcyBhIHN0YXR1cyBwcm9wZXJ0eVxuICAgICAgICBpZiAoJHJlcXVlc3Quc3RhdHVzICYmICRyZXF1ZXN0LnN0YXR1cyA9PT0gJzAnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOm1lc3NhZ2UnLCB7XG4gICAgICAgICAgbWVzc2FnZTogJ2Vycm9yTG9hZGluZydcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgc2VsZi5fcmVxdWVzdCA9ICRyZXF1ZXN0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFqYXhPcHRpb25zLmRlbGF5ICYmIHBhcmFtcy50ZXJtICE9IG51bGwpIHtcbiAgICAgIGlmICh0aGlzLl9xdWVyeVRpbWVvdXQpIHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9xdWVyeVRpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9xdWVyeVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChyZXF1ZXN0LCB0aGlzLmFqYXhPcHRpb25zLmRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdCgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQWpheEFkYXB0ZXI7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvdGFncycsW1xuICAnanF1ZXJ5J1xuXSwgZnVuY3Rpb24gKCQpIHtcbiAgZnVuY3Rpb24gVGFncyAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHZhciB0YWdzID0gb3B0aW9ucy5nZXQoJ3RhZ3MnKTtcblxuICAgIHZhciBjcmVhdGVUYWcgPSBvcHRpb25zLmdldCgnY3JlYXRlVGFnJyk7XG5cbiAgICBpZiAoY3JlYXRlVGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuY3JlYXRlVGFnID0gY3JlYXRlVGFnO1xuICAgIH1cblxuICAgIHZhciBpbnNlcnRUYWcgPSBvcHRpb25zLmdldCgnaW5zZXJ0VGFnJyk7XG5cbiAgICBpZiAoaW5zZXJ0VGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5pbnNlcnRUYWcgPSBpbnNlcnRUYWc7XG4gICAgfVxuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKCQuaXNBcnJheSh0YWdzKSkge1xuICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCB0YWdzLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgIHZhciB0YWcgPSB0YWdzW3RdO1xuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuX25vcm1hbGl6ZUl0ZW0odGFnKTtcblxuICAgICAgICB2YXIgJG9wdGlvbiA9IHRoaXMub3B0aW9uKGl0ZW0pO1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYXBwZW5kKCRvcHRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIFRhZ3MucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuX3JlbW92ZU9sZFRhZ3MoKTtcblxuICAgIGlmIChwYXJhbXMudGVybSA9PSBudWxsIHx8IHBhcmFtcy5wYWdlICE9IG51bGwpIHtcbiAgICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIHBhcmFtcywgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdyYXBwZXIgKG9iaiwgY2hpbGQpIHtcbiAgICAgIHZhciBkYXRhID0gb2JqLnJlc3VsdHM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgb3B0aW9uID0gZGF0YVtpXTtcblxuICAgICAgICB2YXIgY2hlY2tDaGlsZHJlbiA9IChcbiAgICAgICAgICBvcHRpb24uY2hpbGRyZW4gIT0gbnVsbCAmJlxuICAgICAgICAgICF3cmFwcGVyKHtcbiAgICAgICAgICAgIHJlc3VsdHM6IG9wdGlvbi5jaGlsZHJlblxuICAgICAgICAgIH0sIHRydWUpXG4gICAgICAgICk7XG5cbiAgICAgICAgdmFyIG9wdGlvblRleHQgPSAob3B0aW9uLnRleHQgfHwgJycpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIHZhciBwYXJhbXNUZXJtID0gKHBhcmFtcy50ZXJtIHx8ICcnKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgIHZhciBjaGVja1RleHQgPSBvcHRpb25UZXh0ID09PSBwYXJhbXNUZXJtO1xuXG4gICAgICAgIGlmIChjaGVja1RleHQgfHwgY2hlY2tDaGlsZHJlbikge1xuICAgICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG9iai5kYXRhID0gZGF0YTtcbiAgICAgICAgICBjYWxsYmFjayhvYmopO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhZyA9IHNlbGYuY3JlYXRlVGFnKHBhcmFtcyk7XG5cbiAgICAgIGlmICh0YWcgIT0gbnVsbCkge1xuICAgICAgICB2YXIgJG9wdGlvbiA9IHNlbGYub3B0aW9uKHRhZyk7XG4gICAgICAgICRvcHRpb24uYXR0cignZGF0YS1zZWxlY3QyLXRhZycsIHRydWUpO1xuXG4gICAgICAgIHNlbGYuYWRkT3B0aW9ucyhbJG9wdGlvbl0pO1xuXG4gICAgICAgIHNlbGYuaW5zZXJ0VGFnKGRhdGEsIHRhZyk7XG4gICAgICB9XG5cbiAgICAgIG9iai5yZXN1bHRzID0gZGF0YTtcblxuICAgICAgY2FsbGJhY2sob2JqKTtcbiAgICB9XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBwYXJhbXMsIHdyYXBwZXIpO1xuICB9O1xuXG4gIFRhZ3MucHJvdG90eXBlLmNyZWF0ZVRhZyA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBhcmFtcykge1xuICAgIHZhciB0ZXJtID0gJC50cmltKHBhcmFtcy50ZXJtKTtcblxuICAgIGlmICh0ZXJtID09PSAnJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiB0ZXJtLFxuICAgICAgdGV4dDogdGVybVxuICAgIH07XG4gIH07XG5cbiAgVGFncy5wcm90b3R5cGUuaW5zZXJ0VGFnID0gZnVuY3Rpb24gKF8sIGRhdGEsIHRhZykge1xuICAgIGRhdGEudW5zaGlmdCh0YWcpO1xuICB9O1xuXG4gIFRhZ3MucHJvdG90eXBlLl9yZW1vdmVPbGRUYWdzID0gZnVuY3Rpb24gKF8pIHtcbiAgICB2YXIgdGFnID0gdGhpcy5fbGFzdFRhZztcblxuICAgIHZhciAkb3B0aW9ucyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnb3B0aW9uW2RhdGEtc2VsZWN0Mi10YWddJyk7XG5cbiAgICAkb3B0aW9ucy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gVGFncztcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS90b2tlbml6ZXInLFtcbiAgJ2pxdWVyeSdcbl0sIGZ1bmN0aW9uICgkKSB7XG4gIGZ1bmN0aW9uIFRva2VuaXplciAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHZhciB0b2tlbml6ZXIgPSBvcHRpb25zLmdldCgndG9rZW5pemVyJyk7XG5cbiAgICBpZiAodG9rZW5pemVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudG9rZW5pemVyID0gdG9rZW5pemVyO1xuICAgIH1cblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcbiAgfVxuXG4gIFRva2VuaXplci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XG5cbiAgICB0aGlzLiRzZWFyY2ggPSAgY29udGFpbmVyLmRyb3Bkb3duLiRzZWFyY2ggfHwgY29udGFpbmVyLnNlbGVjdGlvbi4kc2VhcmNoIHx8XG4gICAgICAkY29udGFpbmVyLmZpbmQoJy5zZWxlY3QyLXNlYXJjaF9fZmllbGQnKTtcbiAgfTtcblxuICBUb2tlbml6ZXIucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFuZFNlbGVjdCAoZGF0YSkge1xuICAgICAgLy8gTm9ybWFsaXplIHRoZSBkYXRhIG9iamVjdCBzbyB3ZSBjYW4gdXNlIGl0IGZvciBjaGVja3NcbiAgICAgIHZhciBpdGVtID0gc2VsZi5fbm9ybWFsaXplSXRlbShkYXRhKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGRhdGEgb2JqZWN0IGFscmVhZHkgZXhpc3RzIGFzIGEgdGFnXG4gICAgICAvLyBTZWxlY3QgaXQgaWYgaXQgZG9lc24ndFxuICAgICAgdmFyICRleGlzdGluZ09wdGlvbnMgPSBzZWxmLiRlbGVtZW50LmZpbmQoJ29wdGlvbicpLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMpLnZhbCgpID09PSBpdGVtLmlkO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIElmIGFuIGV4aXN0aW5nIG9wdGlvbiB3YXNuJ3QgZm91bmQgZm9yIGl0LCBjcmVhdGUgdGhlIG9wdGlvblxuICAgICAgaWYgKCEkZXhpc3RpbmdPcHRpb25zLmxlbmd0aCkge1xuICAgICAgICB2YXIgJG9wdGlvbiA9IHNlbGYub3B0aW9uKGl0ZW0pO1xuICAgICAgICAkb3B0aW9uLmF0dHIoJ2RhdGEtc2VsZWN0Mi10YWcnLCB0cnVlKTtcblxuICAgICAgICBzZWxmLl9yZW1vdmVPbGRUYWdzKCk7XG4gICAgICAgIHNlbGYuYWRkT3B0aW9ucyhbJG9wdGlvbl0pO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWxlY3QgdGhlIGl0ZW0sIG5vdyB0aGF0IHdlIGtub3cgdGhlcmUgaXMgYW4gb3B0aW9uIGZvciBpdFxuICAgICAgc2VsZWN0KGl0ZW0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbGVjdCAoZGF0YSkge1xuICAgICAgc2VsZi50cmlnZ2VyKCdzZWxlY3QnLCB7XG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHBhcmFtcy50ZXJtID0gcGFyYW1zLnRlcm0gfHwgJyc7XG5cbiAgICB2YXIgdG9rZW5EYXRhID0gdGhpcy50b2tlbml6ZXIocGFyYW1zLCB0aGlzLm9wdGlvbnMsIGNyZWF0ZUFuZFNlbGVjdCk7XG5cbiAgICBpZiAodG9rZW5EYXRhLnRlcm0gIT09IHBhcmFtcy50ZXJtKSB7XG4gICAgICAvLyBSZXBsYWNlIHRoZSBzZWFyY2ggdGVybSBpZiB3ZSBoYXZlIHRoZSBzZWFyY2ggYm94XG4gICAgICBpZiAodGhpcy4kc2VhcmNoLmxlbmd0aCkge1xuICAgICAgICB0aGlzLiRzZWFyY2gudmFsKHRva2VuRGF0YS50ZXJtKTtcbiAgICAgICAgdGhpcy4kc2VhcmNoLmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIHBhcmFtcy50ZXJtID0gdG9rZW5EYXRhLnRlcm07XG4gICAgfVxuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgVG9rZW5pemVyLnByb3RvdHlwZS50b2tlbml6ZXIgPSBmdW5jdGlvbiAoXywgcGFyYW1zLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBzZXBhcmF0b3JzID0gb3B0aW9ucy5nZXQoJ3Rva2VuU2VwYXJhdG9ycycpIHx8IFtdO1xuICAgIHZhciB0ZXJtID0gcGFyYW1zLnRlcm07XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgdmFyIGNyZWF0ZVRhZyA9IHRoaXMuY3JlYXRlVGFnIHx8IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBwYXJhbXMudGVybSxcbiAgICAgICAgdGV4dDogcGFyYW1zLnRlcm1cbiAgICAgIH07XG4gICAgfTtcblxuICAgIHdoaWxlIChpIDwgdGVybS5sZW5ndGgpIHtcbiAgICAgIHZhciB0ZXJtQ2hhciA9IHRlcm1baV07XG5cbiAgICAgIGlmICgkLmluQXJyYXkodGVybUNoYXIsIHNlcGFyYXRvcnMpID09PSAtMSkge1xuICAgICAgICBpKys7XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJ0ID0gdGVybS5zdWJzdHIoMCwgaSk7XG4gICAgICB2YXIgcGFydFBhcmFtcyA9ICQuZXh0ZW5kKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgdGVybTogcGFydFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBkYXRhID0gY3JlYXRlVGFnKHBhcnRQYXJhbXMpO1xuXG4gICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICAgIGkrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKGRhdGEpO1xuXG4gICAgICAvLyBSZXNldCB0aGUgdGVybSB0byBub3QgaW5jbHVkZSB0aGUgdG9rZW5pemVkIHBvcnRpb25cbiAgICAgIHRlcm0gPSB0ZXJtLnN1YnN0cihpICsgMSkgfHwgJyc7XG4gICAgICBpID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGVybTogdGVybVxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIFRva2VuaXplcjtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9taW5pbXVtSW5wdXRMZW5ndGgnLFtcblxuXSwgZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNaW5pbXVtSW5wdXRMZW5ndGggKGRlY29yYXRlZCwgJGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm1pbmltdW1JbnB1dExlbmd0aCA9IG9wdGlvbnMuZ2V0KCdtaW5pbXVtSW5wdXRMZW5ndGgnKTtcblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlLCBvcHRpb25zKTtcbiAgfVxuXG4gIE1pbmltdW1JbnB1dExlbmd0aC5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgcGFyYW1zLnRlcm0gPSBwYXJhbXMudGVybSB8fCAnJztcblxuICAgIGlmIChwYXJhbXMudGVybS5sZW5ndGggPCB0aGlzLm1pbmltdW1JbnB1dExlbmd0aCkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdyZXN1bHRzOm1lc3NhZ2UnLCB7XG4gICAgICAgIG1lc3NhZ2U6ICdpbnB1dFRvb1Nob3J0JyxcbiAgICAgICAgYXJnczoge1xuICAgICAgICAgIG1pbmltdW06IHRoaXMubWluaW11bUlucHV0TGVuZ3RoLFxuICAgICAgICAgIGlucHV0OiBwYXJhbXMudGVybSxcbiAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIHBhcmFtcywgY2FsbGJhY2spO1xuICB9O1xuXG4gIHJldHVybiBNaW5pbXVtSW5wdXRMZW5ndGg7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvbWF4aW11bUlucHV0TGVuZ3RoJyxbXG5cbl0sIGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWF4aW11bUlucHV0TGVuZ3RoIChkZWNvcmF0ZWQsICRlLCBvcHRpb25zKSB7XG4gICAgdGhpcy5tYXhpbXVtSW5wdXRMZW5ndGggPSBvcHRpb25zLmdldCgnbWF4aW11bUlucHV0TGVuZ3RoJyk7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZSwgb3B0aW9ucyk7XG4gIH1cblxuICBNYXhpbXVtSW5wdXRMZW5ndGgucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHBhcmFtcy50ZXJtID0gcGFyYW1zLnRlcm0gfHwgJyc7XG5cbiAgICBpZiAodGhpcy5tYXhpbXVtSW5wdXRMZW5ndGggPiAwICYmXG4gICAgICAgIHBhcmFtcy50ZXJtLmxlbmd0aCA+IHRoaXMubWF4aW11bUlucHV0TGVuZ3RoKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3Jlc3VsdHM6bWVzc2FnZScsIHtcbiAgICAgICAgbWVzc2FnZTogJ2lucHV0VG9vTG9uZycsXG4gICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICBtYXhpbXVtOiB0aGlzLm1heGltdW1JbnB1dExlbmd0aCxcbiAgICAgICAgICBpbnB1dDogcGFyYW1zLnRlcm0sXG4gICAgICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAgfTtcblxuICByZXR1cm4gTWF4aW11bUlucHV0TGVuZ3RoO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9kYXRhL21heGltdW1TZWxlY3Rpb25MZW5ndGgnLFtcblxuXSwgZnVuY3Rpb24gKCl7XG4gIGZ1bmN0aW9uIE1heGltdW1TZWxlY3Rpb25MZW5ndGggKGRlY29yYXRlZCwgJGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm1heGltdW1TZWxlY3Rpb25MZW5ndGggPSBvcHRpb25zLmdldCgnbWF4aW11bVNlbGVjdGlvbkxlbmd0aCcpO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGUsIG9wdGlvbnMpO1xuICB9XG5cbiAgTWF4aW11bVNlbGVjdGlvbkxlbmd0aC5wcm90b3R5cGUucXVlcnkgPVxuICAgIGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgdGhpcy5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xuICAgICAgICB2YXIgY291bnQgPSBjdXJyZW50RGF0YSAhPSBudWxsID8gY3VycmVudERhdGEubGVuZ3RoIDogMDtcbiAgICAgICAgaWYgKHNlbGYubWF4aW11bVNlbGVjdGlvbkxlbmd0aCA+IDAgJiZcbiAgICAgICAgICBjb3VudCA+PSBzZWxmLm1heGltdW1TZWxlY3Rpb25MZW5ndGgpIHtcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ3Jlc3VsdHM6bWVzc2FnZScsIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdtYXhpbXVtU2VsZWN0ZWQnLFxuICAgICAgICAgICAgYXJnczoge1xuICAgICAgICAgICAgICBtYXhpbXVtOiBzZWxmLm1heGltdW1TZWxlY3Rpb25MZW5ndGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGVjb3JhdGVkLmNhbGwoc2VsZiwgcGFyYW1zLCBjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWF4aW11bVNlbGVjdGlvbkxlbmd0aDtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24nLFtcbiAgJ2pxdWVyeScsXG4gICcuL3V0aWxzJ1xuXSwgZnVuY3Rpb24gKCQsIFV0aWxzKSB7XG4gIGZ1bmN0aW9uIERyb3Bkb3duICgkZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgRHJvcGRvd24uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XG4gIH1cblxuICBVdGlscy5FeHRlbmQoRHJvcGRvd24sIFV0aWxzLk9ic2VydmFibGUpO1xuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRkcm9wZG93biA9ICQoXG4gICAgICAnPHNwYW4gY2xhc3M9XCJzZWxlY3QyLWRyb3Bkb3duXCI+JyArXG4gICAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdDItcmVzdWx0c1wiPjwvc3Bhbj4nICtcbiAgICAgICc8L3NwYW4+J1xuICAgICk7XG5cbiAgICAkZHJvcGRvd24uYXR0cignZGlyJywgdGhpcy5vcHRpb25zLmdldCgnZGlyJykpO1xuXG4gICAgdGhpcy4kZHJvcGRvd24gPSAkZHJvcGRvd247XG5cbiAgICByZXR1cm4gJGRyb3Bkb3duO1xuICB9O1xuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFNob3VsZCBiZSBpbXBsZW1lbnRlZCBpbiBzdWJjbGFzc2VzXG4gIH07XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCRkcm9wZG93biwgJGNvbnRhaW5lcikge1xuICAgIC8vIFNob3VsZCBiZSBpbXBsbWVudGVkIGluIHN1YmNsYXNzZXNcbiAgfTtcblxuICBEcm9wZG93bi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBSZW1vdmUgdGhlIGRyb3Bkb3duIGZyb20gdGhlIERPTVxuICAgIHRoaXMuJGRyb3Bkb3duLnJlbW92ZSgpO1xuICB9O1xuXG4gIHJldHVybiBEcm9wZG93bjtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vc2VhcmNoJyxbXG4gICdqcXVlcnknLFxuICAnLi4vdXRpbHMnXG5dLCBmdW5jdGlvbiAoJCwgVXRpbHMpIHtcbiAgZnVuY3Rpb24gU2VhcmNoICgpIHsgfVxuXG4gIFNlYXJjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xuICAgIHZhciAkcmVuZGVyZWQgPSBkZWNvcmF0ZWQuY2FsbCh0aGlzKTtcblxuICAgIHZhciAkc2VhcmNoID0gJChcbiAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdDItc2VhcmNoIHNlbGVjdDItc2VhcmNoLS1kcm9wZG93blwiPicgK1xuICAgICAgICAnPGlucHV0IGNsYXNzPVwic2VsZWN0Mi1zZWFyY2hfX2ZpZWxkXCIgdHlwZT1cInNlYXJjaFwiIHRhYmluZGV4PVwiLTFcIicgK1xuICAgICAgICAnIGF1dG9jb21wbGV0ZT1cIm9mZlwiIGF1dG9jb3JyZWN0PVwib2ZmXCIgYXV0b2NhcGl0YWxpemU9XCJub25lXCInICtcbiAgICAgICAgJyBzcGVsbGNoZWNrPVwiZmFsc2VcIiByb2xlPVwidGV4dGJveFwiIC8+JyArXG4gICAgICAnPC9zcGFuPidcbiAgICApO1xuXG4gICAgdGhpcy4kc2VhcmNoQ29udGFpbmVyID0gJHNlYXJjaDtcbiAgICB0aGlzLiRzZWFyY2ggPSAkc2VhcmNoLmZpbmQoJ2lucHV0Jyk7XG5cbiAgICAkcmVuZGVyZWQucHJlcGVuZCgkc2VhcmNoKTtcblxuICAgIHJldHVybiAkcmVuZGVyZWQ7XG4gIH07XG5cbiAgU2VhcmNoLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcblxuICAgIHRoaXMuJHNlYXJjaC5vbigna2V5ZG93bicsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHNlbGYudHJpZ2dlcigna2V5cHJlc3MnLCBldnQpO1xuXG4gICAgICBzZWxmLl9rZXlVcFByZXZlbnRlZCA9IGV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcbiAgICB9KTtcblxuICAgIC8vIFdvcmthcm91bmQgZm9yIGJyb3dzZXJzIHdoaWNoIGRvIG5vdCBzdXBwb3J0IHRoZSBgaW5wdXRgIGV2ZW50XG4gICAgLy8gVGhpcyB3aWxsIHByZXZlbnQgZG91YmxlLXRyaWdnZXJpbmcgb2YgZXZlbnRzIGZvciBicm93c2VycyB3aGljaCBzdXBwb3J0XG4gICAgLy8gYm90aCB0aGUgYGtleXVwYCBhbmQgYGlucHV0YCBldmVudHMuXG4gICAgdGhpcy4kc2VhcmNoLm9uKCdpbnB1dCcsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIC8vIFVuYmluZCB0aGUgZHVwbGljYXRlZCBga2V5dXBgIGV2ZW50XG4gICAgICAkKHRoaXMpLm9mZigna2V5dXAnKTtcbiAgICB9KTtcblxuICAgIHRoaXMuJHNlYXJjaC5vbigna2V5dXAgaW5wdXQnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBzZWxmLmhhbmRsZVNlYXJjaChldnQpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLm9uKCdvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kc2VhcmNoLmF0dHIoJ3RhYmluZGV4JywgMCk7XG5cbiAgICAgIHNlbGYuJHNlYXJjaC5mb2N1cygpO1xuXG4gICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuJHNlYXJjaC5mb2N1cygpO1xuICAgICAgfSwgMCk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kc2VhcmNoLmF0dHIoJ3RhYmluZGV4JywgLTEpO1xuXG4gICAgICBzZWxmLiRzZWFyY2gudmFsKCcnKTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbignZm9jdXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWNvbnRhaW5lci5pc09wZW4oKSkge1xuICAgICAgICBzZWxmLiRzZWFyY2guZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czphbGwnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBpZiAocGFyYW1zLnF1ZXJ5LnRlcm0gPT0gbnVsbCB8fCBwYXJhbXMucXVlcnkudGVybSA9PT0gJycpIHtcbiAgICAgICAgdmFyIHNob3dTZWFyY2ggPSBzZWxmLnNob3dTZWFyY2gocGFyYW1zKTtcblxuICAgICAgICBpZiAoc2hvd1NlYXJjaCkge1xuICAgICAgICAgIHNlbGYuJHNlYXJjaENvbnRhaW5lci5yZW1vdmVDbGFzcygnc2VsZWN0Mi1zZWFyY2gtLWhpZGUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLiRzZWFyY2hDb250YWluZXIuYWRkQ2xhc3MoJ3NlbGVjdDItc2VhcmNoLS1oaWRlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBTZWFyY2gucHJvdG90eXBlLmhhbmRsZVNlYXJjaCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICBpZiAoIXRoaXMuX2tleVVwUHJldmVudGVkKSB7XG4gICAgICB2YXIgaW5wdXQgPSB0aGlzLiRzZWFyY2gudmFsKCk7XG5cbiAgICAgIHRoaXMudHJpZ2dlcigncXVlcnknLCB7XG4gICAgICAgIHRlcm06IGlucHV0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9rZXlVcFByZXZlbnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFNlYXJjaC5wcm90b3R5cGUuc2hvd1NlYXJjaCA9IGZ1bmN0aW9uIChfLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICByZXR1cm4gU2VhcmNoO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9kcm9wZG93bi9oaWRlUGxhY2Vob2xkZXInLFtcblxuXSwgZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBIaWRlUGxhY2Vob2xkZXIgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKSB7XG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMubm9ybWFsaXplUGxhY2Vob2xkZXIob3B0aW9ucy5nZXQoJ3BsYWNlaG9sZGVyJykpO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKTtcbiAgfVxuXG4gIEhpZGVQbGFjZWhvbGRlci5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgZGF0YSkge1xuICAgIGRhdGEucmVzdWx0cyA9IHRoaXMucmVtb3ZlUGxhY2Vob2xkZXIoZGF0YS5yZXN1bHRzKTtcblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGRhdGEpO1xuICB9O1xuXG4gIEhpZGVQbGFjZWhvbGRlci5wcm90b3R5cGUubm9ybWFsaXplUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoXywgcGxhY2Vob2xkZXIpIHtcbiAgICBpZiAodHlwZW9mIHBsYWNlaG9sZGVyID09PSAnc3RyaW5nJykge1xuICAgICAgcGxhY2Vob2xkZXIgPSB7XG4gICAgICAgIGlkOiAnJyxcbiAgICAgICAgdGV4dDogcGxhY2Vob2xkZXJcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9O1xuXG4gIEhpZGVQbGFjZWhvbGRlci5wcm90b3R5cGUucmVtb3ZlUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoXywgZGF0YSkge1xuICAgIHZhciBtb2RpZmllZERhdGEgPSBkYXRhLnNsaWNlKDApO1xuXG4gICAgZm9yICh2YXIgZCA9IGRhdGEubGVuZ3RoIC0gMTsgZCA+PSAwOyBkLS0pIHtcbiAgICAgIHZhciBpdGVtID0gZGF0YVtkXTtcblxuICAgICAgaWYgKHRoaXMucGxhY2Vob2xkZXIuaWQgPT09IGl0ZW0uaWQpIHtcbiAgICAgICAgbW9kaWZpZWREYXRhLnNwbGljZShkLCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbW9kaWZpZWREYXRhO1xuICB9O1xuXG4gIHJldHVybiBIaWRlUGxhY2Vob2xkZXI7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL2luZmluaXRlU2Nyb2xsJyxbXG4gICdqcXVlcnknXG5dLCBmdW5jdGlvbiAoJCkge1xuICBmdW5jdGlvbiBJbmZpbml0ZVNjcm9sbCAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucywgZGF0YUFkYXB0ZXIpIHtcbiAgICB0aGlzLmxhc3RQYXJhbXMgPSB7fTtcblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcik7XG5cbiAgICB0aGlzLiRsb2FkaW5nTW9yZSA9IHRoaXMuY3JlYXRlTG9hZGluZ01vcmUoKTtcbiAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIEluZmluaXRlU2Nyb2xsLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBkYXRhKSB7XG4gICAgdGhpcy4kbG9hZGluZ01vcmUucmVtb3ZlKCk7XG4gICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBkYXRhKTtcblxuICAgIGlmICh0aGlzLnNob3dMb2FkaW5nTW9yZShkYXRhKSkge1xuICAgICAgdGhpcy4kcmVzdWx0cy5hcHBlbmQodGhpcy4kbG9hZGluZ01vcmUpO1xuICAgIH1cbiAgfTtcblxuICBJbmZpbml0ZVNjcm9sbC5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGNvbnRhaW5lciwgJGNvbnRhaW5lcikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XG5cbiAgICBjb250YWluZXIub24oJ3F1ZXJ5JywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgc2VsZi5sYXN0UGFyYW1zID0gcGFyYW1zO1xuICAgICAgc2VsZi5sb2FkaW5nID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci5vbigncXVlcnk6YXBwZW5kJywgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgc2VsZi5sYXN0UGFyYW1zID0gcGFyYW1zO1xuICAgICAgc2VsZi5sb2FkaW5nID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHRoaXMuJHJlc3VsdHMub24oJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpc0xvYWRNb3JlVmlzaWJsZSA9ICQuY29udGFpbnMoXG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgc2VsZi4kbG9hZGluZ01vcmVbMF1cbiAgICAgICk7XG5cbiAgICAgIGlmIChzZWxmLmxvYWRpbmcgfHwgIWlzTG9hZE1vcmVWaXNpYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBzZWxmLiRyZXN1bHRzLm9mZnNldCgpLnRvcCArXG4gICAgICAgIHNlbGYuJHJlc3VsdHMub3V0ZXJIZWlnaHQoZmFsc2UpO1xuICAgICAgdmFyIGxvYWRpbmdNb3JlT2Zmc2V0ID0gc2VsZi4kbG9hZGluZ01vcmUub2Zmc2V0KCkudG9wICtcbiAgICAgICAgc2VsZi4kbG9hZGluZ01vcmUub3V0ZXJIZWlnaHQoZmFsc2UpO1xuXG4gICAgICBpZiAoY3VycmVudE9mZnNldCArIDUwID49IGxvYWRpbmdNb3JlT2Zmc2V0KSB7XG4gICAgICAgIHNlbGYubG9hZE1vcmUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBJbmZpbml0ZVNjcm9sbC5wcm90b3R5cGUubG9hZE1vcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcblxuICAgIHZhciBwYXJhbXMgPSAkLmV4dGVuZCh7fSwge3BhZ2U6IDF9LCB0aGlzLmxhc3RQYXJhbXMpO1xuXG4gICAgcGFyYW1zLnBhZ2UrKztcblxuICAgIHRoaXMudHJpZ2dlcigncXVlcnk6YXBwZW5kJywgcGFyYW1zKTtcbiAgfTtcblxuICBJbmZpbml0ZVNjcm9sbC5wcm90b3R5cGUuc2hvd0xvYWRpbmdNb3JlID0gZnVuY3Rpb24gKF8sIGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YS5wYWdpbmF0aW9uICYmIGRhdGEucGFnaW5hdGlvbi5tb3JlO1xuICB9O1xuXG4gIEluZmluaXRlU2Nyb2xsLnByb3RvdHlwZS5jcmVhdGVMb2FkaW5nTW9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJG9wdGlvbiA9ICQoXG4gICAgICAnPGxpICcgK1xuICAgICAgJ2NsYXNzPVwic2VsZWN0Mi1yZXN1bHRzX19vcHRpb24gc2VsZWN0Mi1yZXN1bHRzX19vcHRpb24tLWxvYWQtbW9yZVwiJyArXG4gICAgICAncm9sZT1cInRyZWVpdGVtXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIj48L2xpPidcbiAgICApO1xuXG4gICAgdmFyIG1lc3NhZ2UgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0cmFuc2xhdGlvbnMnKS5nZXQoJ2xvYWRpbmdNb3JlJyk7XG5cbiAgICAkb3B0aW9uLmh0bWwobWVzc2FnZSh0aGlzLmxhc3RQYXJhbXMpKTtcblxuICAgIHJldHVybiAkb3B0aW9uO1xuICB9O1xuXG4gIHJldHVybiBJbmZpbml0ZVNjcm9sbDtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vYXR0YWNoQm9keScsW1xuICAnanF1ZXJ5JyxcbiAgJy4uL3V0aWxzJ1xuXSwgZnVuY3Rpb24gKCQsIFV0aWxzKSB7XG4gIGZ1bmN0aW9uIEF0dGFjaEJvZHkgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRkcm9wZG93blBhcmVudCA9IG9wdGlvbnMuZ2V0KCdkcm9wZG93blBhcmVudCcpIHx8ICQoZG9jdW1lbnQuYm9keSk7XG5cbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XG4gIH1cblxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHNldHVwUmVzdWx0c0V2ZW50cyA9IGZhbHNlO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcblxuICAgIGNvbnRhaW5lci5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuX3Nob3dEcm9wZG93bigpO1xuICAgICAgc2VsZi5fYXR0YWNoUG9zaXRpb25pbmdIYW5kbGVyKGNvbnRhaW5lcik7XG5cbiAgICAgIGlmICghc2V0dXBSZXN1bHRzRXZlbnRzKSB7XG4gICAgICAgIHNldHVwUmVzdWx0c0V2ZW50cyA9IHRydWU7XG5cbiAgICAgICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmFsbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLl9wb3NpdGlvbkRyb3Bkb3duKCk7XG4gICAgICAgICAgc2VsZi5fcmVzaXplRHJvcGRvd24oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmFwcGVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLl9wb3NpdGlvbkRyb3Bkb3duKCk7XG4gICAgICAgICAgc2VsZi5fcmVzaXplRHJvcGRvd24oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5faGlkZURyb3Bkb3duKCk7XG4gICAgICBzZWxmLl9kZXRhY2hQb3NpdGlvbmluZ0hhbmRsZXIoY29udGFpbmVyKTtcbiAgICB9KTtcblxuICAgIHRoaXMuJGRyb3Bkb3duQ29udGFpbmVyLm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgQXR0YWNoQm9keS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuJGRyb3Bkb3duQ29udGFpbmVyLnJlbW92ZSgpO1xuICB9O1xuXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgJGRyb3Bkb3duLCAkY29udGFpbmVyKSB7XG4gICAgLy8gQ2xvbmUgYWxsIG9mIHRoZSBjb250YWluZXIgY2xhc3Nlc1xuICAgICRkcm9wZG93bi5hdHRyKCdjbGFzcycsICRjb250YWluZXIuYXR0cignY2xhc3MnKSk7XG5cbiAgICAkZHJvcGRvd24ucmVtb3ZlQ2xhc3MoJ3NlbGVjdDInKTtcbiAgICAkZHJvcGRvd24uYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XG5cbiAgICAkZHJvcGRvd24uY3NzKHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAtOTk5OTk5XG4gICAgfSk7XG5cbiAgICB0aGlzLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xuICB9O1xuXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcbiAgICB2YXIgJGNvbnRhaW5lciA9ICQoJzxzcGFuPjwvc3Bhbj4nKTtcblxuICAgIHZhciAkZHJvcGRvd24gPSBkZWNvcmF0ZWQuY2FsbCh0aGlzKTtcbiAgICAkY29udGFpbmVyLmFwcGVuZCgkZHJvcGRvd24pO1xuXG4gICAgdGhpcy4kZHJvcGRvd25Db250YWluZXIgPSAkY29udGFpbmVyO1xuXG4gICAgcmV0dXJuICRjb250YWluZXI7XG4gIH07XG5cbiAgQXR0YWNoQm9keS5wcm90b3R5cGUuX2hpZGVEcm9wZG93biA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5kZXRhY2goKTtcbiAgfTtcblxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fYXR0YWNoUG9zaXRpb25pbmdIYW5kbGVyID1cbiAgICAgIGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGNvbnRhaW5lcikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBzY3JvbGxFdmVudCA9ICdzY3JvbGwuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xuICAgIHZhciByZXNpemVFdmVudCA9ICdyZXNpemUuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xuICAgIHZhciBvcmllbnRhdGlvbkV2ZW50ID0gJ29yaWVudGF0aW9uY2hhbmdlLnNlbGVjdDIuJyArIGNvbnRhaW5lci5pZDtcblxuICAgIHZhciAkd2F0Y2hlcnMgPSB0aGlzLiRjb250YWluZXIucGFyZW50cygpLmZpbHRlcihVdGlscy5oYXNTY3JvbGwpO1xuICAgICR3YXRjaGVycy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICQodGhpcykuZGF0YSgnc2VsZWN0Mi1zY3JvbGwtcG9zaXRpb24nLCB7XG4gICAgICAgIHg6ICQodGhpcykuc2Nyb2xsTGVmdCgpLFxuICAgICAgICB5OiAkKHRoaXMpLnNjcm9sbFRvcCgpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgICR3YXRjaGVycy5vbihzY3JvbGxFdmVudCwgZnVuY3Rpb24gKGV2KSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSAkKHRoaXMpLmRhdGEoJ3NlbGVjdDItc2Nyb2xsLXBvc2l0aW9uJyk7XG4gICAgICAkKHRoaXMpLnNjcm9sbFRvcChwb3NpdGlvbi55KTtcbiAgICB9KTtcblxuICAgICQod2luZG93KS5vbihzY3JvbGxFdmVudCArICcgJyArIHJlc2l6ZUV2ZW50ICsgJyAnICsgb3JpZW50YXRpb25FdmVudCxcbiAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICBzZWxmLl9wb3NpdGlvbkRyb3Bkb3duKCk7XG4gICAgICBzZWxmLl9yZXNpemVEcm9wZG93bigpO1xuICAgIH0pO1xuICB9O1xuXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLl9kZXRhY2hQb3NpdGlvbmluZ0hhbmRsZXIgPVxuICAgICAgZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyKSB7XG4gICAgdmFyIHNjcm9sbEV2ZW50ID0gJ3Njcm9sbC5zZWxlY3QyLicgKyBjb250YWluZXIuaWQ7XG4gICAgdmFyIHJlc2l6ZUV2ZW50ID0gJ3Jlc2l6ZS5zZWxlY3QyLicgKyBjb250YWluZXIuaWQ7XG4gICAgdmFyIG9yaWVudGF0aW9uRXZlbnQgPSAnb3JpZW50YXRpb25jaGFuZ2Uuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xuXG4gICAgdmFyICR3YXRjaGVycyA9IHRoaXMuJGNvbnRhaW5lci5wYXJlbnRzKCkuZmlsdGVyKFV0aWxzLmhhc1Njcm9sbCk7XG4gICAgJHdhdGNoZXJzLm9mZihzY3JvbGxFdmVudCk7XG5cbiAgICAkKHdpbmRvdykub2ZmKHNjcm9sbEV2ZW50ICsgJyAnICsgcmVzaXplRXZlbnQgKyAnICcgKyBvcmllbnRhdGlvbkV2ZW50KTtcbiAgfTtcblxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fcG9zaXRpb25Ecm9wZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHdpbmRvdyA9ICQod2luZG93KTtcblxuICAgIHZhciBpc0N1cnJlbnRseUFib3ZlID0gdGhpcy4kZHJvcGRvd24uaGFzQ2xhc3MoJ3NlbGVjdDItZHJvcGRvd24tLWFib3ZlJyk7XG4gICAgdmFyIGlzQ3VycmVudGx5QmVsb3cgPSB0aGlzLiRkcm9wZG93bi5oYXNDbGFzcygnc2VsZWN0Mi1kcm9wZG93bi0tYmVsb3cnKTtcblxuICAgIHZhciBuZXdEaXJlY3Rpb24gPSBudWxsO1xuXG4gICAgdmFyIG9mZnNldCA9IHRoaXMuJGNvbnRhaW5lci5vZmZzZXQoKTtcblxuICAgIG9mZnNldC5ib3R0b20gPSBvZmZzZXQudG9wICsgdGhpcy4kY29udGFpbmVyLm91dGVySGVpZ2h0KGZhbHNlKTtcblxuICAgIHZhciBjb250YWluZXIgPSB7XG4gICAgICBoZWlnaHQ6IHRoaXMuJGNvbnRhaW5lci5vdXRlckhlaWdodChmYWxzZSlcbiAgICB9O1xuXG4gICAgY29udGFpbmVyLnRvcCA9IG9mZnNldC50b3A7XG4gICAgY29udGFpbmVyLmJvdHRvbSA9IG9mZnNldC50b3AgKyBjb250YWluZXIuaGVpZ2h0O1xuXG4gICAgdmFyIGRyb3Bkb3duID0ge1xuICAgICAgaGVpZ2h0OiB0aGlzLiRkcm9wZG93bi5vdXRlckhlaWdodChmYWxzZSlcbiAgICB9O1xuXG4gICAgdmFyIHZpZXdwb3J0ID0ge1xuICAgICAgdG9wOiAkd2luZG93LnNjcm9sbFRvcCgpLFxuICAgICAgYm90dG9tOiAkd2luZG93LnNjcm9sbFRvcCgpICsgJHdpbmRvdy5oZWlnaHQoKVxuICAgIH07XG5cbiAgICB2YXIgZW5vdWdoUm9vbUFib3ZlID0gdmlld3BvcnQudG9wIDwgKG9mZnNldC50b3AgLSBkcm9wZG93bi5oZWlnaHQpO1xuICAgIHZhciBlbm91Z2hSb29tQmVsb3cgPSB2aWV3cG9ydC5ib3R0b20gPiAob2Zmc2V0LmJvdHRvbSArIGRyb3Bkb3duLmhlaWdodCk7XG5cbiAgICB2YXIgY3NzID0ge1xuICAgICAgbGVmdDogb2Zmc2V0LmxlZnQsXG4gICAgICB0b3A6IGNvbnRhaW5lci5ib3R0b21cbiAgICB9O1xuXG4gICAgLy8gRGV0ZXJtaW5lIHdoYXQgdGhlIHBhcmVudCBlbGVtZW50IGlzIHRvIHVzZSBmb3IgY2FsY2l1bGF0aW5nIHRoZSBvZmZzZXRcbiAgICB2YXIgJG9mZnNldFBhcmVudCA9IHRoaXMuJGRyb3Bkb3duUGFyZW50O1xuXG4gICAgLy8gRm9yIHN0YXRpY2FsbHkgcG9zaXRvbmVkIGVsZW1lbnRzLCB3ZSBuZWVkIHRvIGdldCB0aGUgZWxlbWVudFxuICAgIC8vIHRoYXQgaXMgZGV0ZXJtaW5pbmcgdGhlIG9mZnNldFxuICAgIGlmICgkb2Zmc2V0UGFyZW50LmNzcygncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICRvZmZzZXRQYXJlbnQgPSAkb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudCgpO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnRPZmZzZXQgPSAkb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXG4gICAgY3NzLnRvcCAtPSBwYXJlbnRPZmZzZXQudG9wO1xuICAgIGNzcy5sZWZ0IC09IHBhcmVudE9mZnNldC5sZWZ0O1xuXG4gICAgaWYgKCFpc0N1cnJlbnRseUFib3ZlICYmICFpc0N1cnJlbnRseUJlbG93KSB7XG4gICAgICBuZXdEaXJlY3Rpb24gPSAnYmVsb3cnO1xuICAgIH1cblxuICAgIGlmICghZW5vdWdoUm9vbUJlbG93ICYmIGVub3VnaFJvb21BYm92ZSAmJiAhaXNDdXJyZW50bHlBYm92ZSkge1xuICAgICAgbmV3RGlyZWN0aW9uID0gJ2Fib3ZlJztcbiAgICB9IGVsc2UgaWYgKCFlbm91Z2hSb29tQWJvdmUgJiYgZW5vdWdoUm9vbUJlbG93ICYmIGlzQ3VycmVudGx5QWJvdmUpIHtcbiAgICAgIG5ld0RpcmVjdGlvbiA9ICdiZWxvdyc7XG4gICAgfVxuXG4gICAgaWYgKG5ld0RpcmVjdGlvbiA9PSAnYWJvdmUnIHx8XG4gICAgICAoaXNDdXJyZW50bHlBYm92ZSAmJiBuZXdEaXJlY3Rpb24gIT09ICdiZWxvdycpKSB7XG4gICAgICBjc3MudG9wID0gY29udGFpbmVyLnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBkcm9wZG93bi5oZWlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKG5ld0RpcmVjdGlvbiAhPSBudWxsKSB7XG4gICAgICB0aGlzLiRkcm9wZG93blxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItZHJvcGRvd24tLWJlbG93IHNlbGVjdDItZHJvcGRvd24tLWFib3ZlJylcbiAgICAgICAgLmFkZENsYXNzKCdzZWxlY3QyLWRyb3Bkb3duLS0nICsgbmV3RGlyZWN0aW9uKTtcbiAgICAgIHRoaXMuJGNvbnRhaW5lclxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1iZWxvdyBzZWxlY3QyLWNvbnRhaW5lci0tYWJvdmUnKVxuICAgICAgICAuYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS0nICsgbmV3RGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5jc3MoY3NzKTtcbiAgfTtcblxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fcmVzaXplRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNzcyA9IHtcbiAgICAgIHdpZHRoOiB0aGlzLiRjb250YWluZXIub3V0ZXJXaWR0aChmYWxzZSkgKyAncHgnXG4gICAgfTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkcm9wZG93bkF1dG9XaWR0aCcpKSB7XG4gICAgICBjc3MubWluV2lkdGggPSBjc3Mud2lkdGg7XG4gICAgICBjc3MucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICAgY3NzLndpZHRoID0gJ2F1dG8nO1xuICAgIH1cblxuICAgIHRoaXMuJGRyb3Bkb3duLmNzcyhjc3MpO1xuICB9O1xuXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLl9zaG93RHJvcGRvd24gPSBmdW5jdGlvbiAoZGVjb3JhdGVkKSB7XG4gICAgdGhpcy4kZHJvcGRvd25Db250YWluZXIuYXBwZW5kVG8odGhpcy4kZHJvcGRvd25QYXJlbnQpO1xuXG4gICAgdGhpcy5fcG9zaXRpb25Ecm9wZG93bigpO1xuICAgIHRoaXMuX3Jlc2l6ZURyb3Bkb3duKCk7XG4gIH07XG5cbiAgcmV0dXJuIEF0dGFjaEJvZHk7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL21pbmltdW1SZXN1bHRzRm9yU2VhcmNoJyxbXG5cbl0sIGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gY291bnRSZXN1bHRzIChkYXRhKSB7XG4gICAgdmFyIGNvdW50ID0gMDtcblxuICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGF0YS5sZW5ndGg7IGQrKykge1xuICAgICAgdmFyIGl0ZW0gPSBkYXRhW2RdO1xuXG4gICAgICBpZiAoaXRlbS5jaGlsZHJlbikge1xuICAgICAgICBjb3VudCArPSBjb3VudFJlc3VsdHMoaXRlbS5jaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3VudCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb3VudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIE1pbmltdW1SZXN1bHRzRm9yU2VhcmNoIChkZWNvcmF0ZWQsICRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcikge1xuICAgIHRoaXMubWluaW11bVJlc3VsdHNGb3JTZWFyY2ggPSBvcHRpb25zLmdldCgnbWluaW11bVJlc3VsdHNGb3JTZWFyY2gnKTtcblxuICAgIGlmICh0aGlzLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoIDwgMCkge1xuICAgICAgdGhpcy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCA9IEluZmluaXR5O1xuICAgIH1cblxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcik7XG4gIH1cblxuICBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaC5wcm90b3R5cGUuc2hvd1NlYXJjaCA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBhcmFtcykge1xuICAgIGlmIChjb3VudFJlc3VsdHMocGFyYW1zLmRhdGEucmVzdWx0cykgPCB0aGlzLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlY29yYXRlZC5jYWxsKHRoaXMsIHBhcmFtcyk7XG4gIH07XG5cbiAgcmV0dXJuIE1pbmltdW1SZXN1bHRzRm9yU2VhcmNoO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9kcm9wZG93bi9zZWxlY3RPbkNsb3NlJyxbXG5cbl0sIGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VsZWN0T25DbG9zZSAoKSB7IH1cblxuICBTZWxlY3RPbkNsb3NlLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcblxuICAgIGNvbnRhaW5lci5vbignY2xvc2UnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBzZWxmLl9oYW5kbGVTZWxlY3RPbkNsb3NlKHBhcmFtcyk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2VsZWN0T25DbG9zZS5wcm90b3R5cGUuX2hhbmRsZVNlbGVjdE9uQ2xvc2UgPSBmdW5jdGlvbiAoXywgcGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMub3JpZ2luYWxTZWxlY3QyRXZlbnQgIT0gbnVsbCkge1xuICAgICAgdmFyIGV2ZW50ID0gcGFyYW1zLm9yaWdpbmFsU2VsZWN0MkV2ZW50O1xuXG4gICAgICAvLyBEb24ndCBzZWxlY3QgYW4gaXRlbSBpZiB0aGUgY2xvc2UgZXZlbnQgd2FzIHRyaWdnZXJlZCBmcm9tIGEgc2VsZWN0IG9yXG4gICAgICAvLyB1bnNlbGVjdCBldmVudFxuICAgICAgaWYgKGV2ZW50Ll90eXBlID09PSAnc2VsZWN0JyB8fCBldmVudC5fdHlwZSA9PT0gJ3Vuc2VsZWN0Jykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyICRoaWdobGlnaHRlZFJlc3VsdHMgPSB0aGlzLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xuXG4gICAgLy8gT25seSBzZWxlY3QgaGlnaGxpZ2h0ZWQgcmVzdWx0c1xuICAgIGlmICgkaGlnaGxpZ2h0ZWRSZXN1bHRzLmxlbmd0aCA8IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9ICRoaWdobGlnaHRlZFJlc3VsdHMuZGF0YSgnZGF0YScpO1xuXG4gICAgLy8gRG9uJ3QgcmUtc2VsZWN0IGFscmVhZHkgc2VsZWN0ZWQgcmVzdWx0ZVxuICAgIGlmIChcbiAgICAgIChkYXRhLmVsZW1lbnQgIT0gbnVsbCAmJiBkYXRhLmVsZW1lbnQuc2VsZWN0ZWQpIHx8XG4gICAgICAoZGF0YS5lbGVtZW50ID09IG51bGwgJiYgZGF0YS5zZWxlY3RlZClcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnRyaWdnZXIoJ3NlbGVjdCcsIHtcbiAgICAgICAgZGF0YTogZGF0YVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBTZWxlY3RPbkNsb3NlO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9kcm9wZG93bi9jbG9zZU9uU2VsZWN0JyxbXG5cbl0sIGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2xvc2VPblNlbGVjdCAoKSB7IH1cblxuICBDbG9zZU9uU2VsZWN0LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcblxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0JywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgc2VsZi5fc2VsZWN0VHJpZ2dlcmVkKGV2dCk7XG4gICAgfSk7XG5cbiAgICBjb250YWluZXIub24oJ3Vuc2VsZWN0JywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgc2VsZi5fc2VsZWN0VHJpZ2dlcmVkKGV2dCk7XG4gICAgfSk7XG4gIH07XG5cbiAgQ2xvc2VPblNlbGVjdC5wcm90b3R5cGUuX3NlbGVjdFRyaWdnZXJlZCA9IGZ1bmN0aW9uIChfLCBldnQpIHtcbiAgICB2YXIgb3JpZ2luYWxFdmVudCA9IGV2dC5vcmlnaW5hbEV2ZW50O1xuXG4gICAgLy8gRG9uJ3QgY2xvc2UgaWYgdGhlIGNvbnRyb2wga2V5IGlzIGJlaW5nIGhlbGRcbiAgICBpZiAob3JpZ2luYWxFdmVudCAmJiBvcmlnaW5hbEV2ZW50LmN0cmxLZXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnRyaWdnZXIoJ2Nsb3NlJywge1xuICAgICAgb3JpZ2luYWxFdmVudDogb3JpZ2luYWxFdmVudCxcbiAgICAgIG9yaWdpbmFsU2VsZWN0MkV2ZW50OiBldnRcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQ2xvc2VPblNlbGVjdDtcbn0pO1xuXG5TMi5kZWZpbmUoJ3NlbGVjdDIvaTE4bi9lbicsW10sZnVuY3Rpb24gKCkge1xuICAvLyBFbmdsaXNoXG4gIHJldHVybiB7XG4gICAgZXJyb3JMb2FkaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJ1RoZSByZXN1bHRzIGNvdWxkIG5vdCBiZSBsb2FkZWQuJztcbiAgICB9LFxuICAgIGlucHV0VG9vTG9uZzogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgIHZhciBvdmVyQ2hhcnMgPSBhcmdzLmlucHV0Lmxlbmd0aCAtIGFyZ3MubWF4aW11bTtcblxuICAgICAgdmFyIG1lc3NhZ2UgPSAnUGxlYXNlIGRlbGV0ZSAnICsgb3ZlckNoYXJzICsgJyBjaGFyYWN0ZXInO1xuXG4gICAgICBpZiAob3ZlckNoYXJzICE9IDEpIHtcbiAgICAgICAgbWVzc2FnZSArPSAncyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgaW5wdXRUb29TaG9ydDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgIHZhciByZW1haW5pbmdDaGFycyA9IGFyZ3MubWluaW11bSAtIGFyZ3MuaW5wdXQubGVuZ3RoO1xuXG4gICAgICB2YXIgbWVzc2FnZSA9ICdQbGVhc2UgZW50ZXIgJyArIHJlbWFpbmluZ0NoYXJzICsgJyBvciBtb3JlIGNoYXJhY3RlcnMnO1xuXG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGxvYWRpbmdNb3JlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJ0xvYWRpbmcgbW9yZSByZXN1bHRz4oCmJztcbiAgICB9LFxuICAgIG1heGltdW1TZWxlY3RlZDogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1lvdSBjYW4gb25seSBzZWxlY3QgJyArIGFyZ3MubWF4aW11bSArICcgaXRlbSc7XG5cbiAgICAgIGlmIChhcmdzLm1heGltdW0gIT0gMSkge1xuICAgICAgICBtZXNzYWdlICs9ICdzJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBub1Jlc3VsdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAnTm8gcmVzdWx0cyBmb3VuZCc7XG4gICAgfSxcbiAgICBzZWFyY2hpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAnU2VhcmNoaW5n4oCmJztcbiAgICB9XG4gIH07XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2RlZmF1bHRzJyxbXG4gICdqcXVlcnknLFxuICAncmVxdWlyZScsXG5cbiAgJy4vcmVzdWx0cycsXG5cbiAgJy4vc2VsZWN0aW9uL3NpbmdsZScsXG4gICcuL3NlbGVjdGlvbi9tdWx0aXBsZScsXG4gICcuL3NlbGVjdGlvbi9wbGFjZWhvbGRlcicsXG4gICcuL3NlbGVjdGlvbi9hbGxvd0NsZWFyJyxcbiAgJy4vc2VsZWN0aW9uL3NlYXJjaCcsXG4gICcuL3NlbGVjdGlvbi9ldmVudFJlbGF5JyxcblxuICAnLi91dGlscycsXG4gICcuL3RyYW5zbGF0aW9uJyxcbiAgJy4vZGlhY3JpdGljcycsXG5cbiAgJy4vZGF0YS9zZWxlY3QnLFxuICAnLi9kYXRhL2FycmF5JyxcbiAgJy4vZGF0YS9hamF4JyxcbiAgJy4vZGF0YS90YWdzJyxcbiAgJy4vZGF0YS90b2tlbml6ZXInLFxuICAnLi9kYXRhL21pbmltdW1JbnB1dExlbmd0aCcsXG4gICcuL2RhdGEvbWF4aW11bUlucHV0TGVuZ3RoJyxcbiAgJy4vZGF0YS9tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoJyxcblxuICAnLi9kcm9wZG93bicsXG4gICcuL2Ryb3Bkb3duL3NlYXJjaCcsXG4gICcuL2Ryb3Bkb3duL2hpZGVQbGFjZWhvbGRlcicsXG4gICcuL2Ryb3Bkb3duL2luZmluaXRlU2Nyb2xsJyxcbiAgJy4vZHJvcGRvd24vYXR0YWNoQm9keScsXG4gICcuL2Ryb3Bkb3duL21pbmltdW1SZXN1bHRzRm9yU2VhcmNoJyxcbiAgJy4vZHJvcGRvd24vc2VsZWN0T25DbG9zZScsXG4gICcuL2Ryb3Bkb3duL2Nsb3NlT25TZWxlY3QnLFxuXG4gICcuL2kxOG4vZW4nXG5dLCBmdW5jdGlvbiAoJCwgcmVxdWlyZSxcblxuICAgICAgICAgICAgIFJlc3VsdHNMaXN0LFxuXG4gICAgICAgICAgICAgU2luZ2xlU2VsZWN0aW9uLCBNdWx0aXBsZVNlbGVjdGlvbiwgUGxhY2Vob2xkZXIsIEFsbG93Q2xlYXIsXG4gICAgICAgICAgICAgU2VsZWN0aW9uU2VhcmNoLCBFdmVudFJlbGF5LFxuXG4gICAgICAgICAgICAgVXRpbHMsIFRyYW5zbGF0aW9uLCBESUFDUklUSUNTLFxuXG4gICAgICAgICAgICAgU2VsZWN0RGF0YSwgQXJyYXlEYXRhLCBBamF4RGF0YSwgVGFncywgVG9rZW5pemVyLFxuICAgICAgICAgICAgIE1pbmltdW1JbnB1dExlbmd0aCwgTWF4aW11bUlucHV0TGVuZ3RoLCBNYXhpbXVtU2VsZWN0aW9uTGVuZ3RoLFxuXG4gICAgICAgICAgICAgRHJvcGRvd24sIERyb3Bkb3duU2VhcmNoLCBIaWRlUGxhY2Vob2xkZXIsIEluZmluaXRlU2Nyb2xsLFxuICAgICAgICAgICAgIEF0dGFjaEJvZHksIE1pbmltdW1SZXN1bHRzRm9yU2VhcmNoLCBTZWxlY3RPbkNsb3NlLCBDbG9zZU9uU2VsZWN0LFxuXG4gICAgICAgICAgICAgRW5nbGlzaFRyYW5zbGF0aW9uKSB7XG4gIGZ1bmN0aW9uIERlZmF1bHRzICgpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICBEZWZhdWx0cy5wcm90b3R5cGUuYXBwbHkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhQWRhcHRlciA9PSBudWxsKSB7XG4gICAgICBpZiAob3B0aW9ucy5hamF4ICE9IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IEFqYXhEYXRhO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmRhdGEgIT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gQXJyYXlEYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFNlbGVjdERhdGE7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLm1pbmltdW1JbnB1dExlbmd0aCA+IDApIHtcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIsXG4gICAgICAgICAgTWluaW11bUlucHV0TGVuZ3RoXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLm1heGltdW1JbnB1dExlbmd0aCA+IDApIHtcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIsXG4gICAgICAgICAgTWF4aW11bUlucHV0TGVuZ3RoXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLm1heGltdW1TZWxlY3Rpb25MZW5ndGggPiAwKSB7XG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxuICAgICAgICAgIE1heGltdW1TZWxlY3Rpb25MZW5ndGhcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMudGFncykge1xuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUob3B0aW9ucy5kYXRhQWRhcHRlciwgVGFncyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnRva2VuU2VwYXJhdG9ycyAhPSBudWxsIHx8IG9wdGlvbnMudG9rZW5pemVyICE9IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIsXG4gICAgICAgICAgVG9rZW5pemVyXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnF1ZXJ5ICE9IG51bGwpIHtcbiAgICAgICAgdmFyIFF1ZXJ5ID0gcmVxdWlyZShvcHRpb25zLmFtZEJhc2UgKyAnY29tcGF0L3F1ZXJ5Jyk7XG5cbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIsXG4gICAgICAgICAgUXVlcnlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuaW5pdFNlbGVjdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIHZhciBJbml0U2VsZWN0aW9uID0gcmVxdWlyZShvcHRpb25zLmFtZEJhc2UgKyAnY29tcGF0L2luaXRTZWxlY3Rpb24nKTtcblxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlcixcbiAgICAgICAgICBJbml0U2VsZWN0aW9uXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9IFJlc3VsdHNMaXN0O1xuXG4gICAgICBpZiAob3B0aW9ucy5hamF4ICE9IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIsXG4gICAgICAgICAgSW5maW5pdGVTY3JvbGxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMucGxhY2Vob2xkZXIgIT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLnJlc3VsdHNBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlcixcbiAgICAgICAgICBIaWRlUGxhY2Vob2xkZXJcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuc2VsZWN0T25DbG9zZSkge1xuICAgICAgICBvcHRpb25zLnJlc3VsdHNBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlcixcbiAgICAgICAgICBTZWxlY3RPbkNsb3NlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyID09IG51bGwpIHtcbiAgICAgIGlmIChvcHRpb25zLm11bHRpcGxlKSB7XG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyID0gRHJvcGRvd247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgU2VhcmNoYWJsZURyb3Bkb3duID0gVXRpbHMuRGVjb3JhdGUoRHJvcGRvd24sIERyb3Bkb3duU2VhcmNoKTtcblxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9IFNlYXJjaGFibGVEcm9wZG93bjtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMubWluaW11bVJlc3VsdHNGb3JTZWFyY2ggIT09IDApIHtcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlcixcbiAgICAgICAgICBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5jbG9zZU9uU2VsZWN0KSB7XG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIsXG4gICAgICAgICAgQ2xvc2VPblNlbGVjdFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25Dc3NDbGFzcyAhPSBudWxsIHx8XG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25Dc3MgIT0gbnVsbCB8fFxuICAgICAgICBvcHRpb25zLmFkYXB0RHJvcGRvd25Dc3NDbGFzcyAhPSBudWxsXG4gICAgICApIHtcbiAgICAgICAgdmFyIERyb3Bkb3duQ1NTID0gcmVxdWlyZShvcHRpb25zLmFtZEJhc2UgKyAnY29tcGF0L2Ryb3Bkb3duQ3NzJyk7XG5cbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlcixcbiAgICAgICAgICBEcm9wZG93bkNTU1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlcixcbiAgICAgICAgQXR0YWNoQm9keVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID09IG51bGwpIHtcbiAgICAgIGlmIChvcHRpb25zLm11bHRpcGxlKSB7XG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9IE11bHRpcGxlU2VsZWN0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gU2luZ2xlU2VsZWN0aW9uO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgdGhlIHBsYWNlaG9sZGVyIG1peGluIGlmIGEgcGxhY2Vob2xkZXIgd2FzIHNwZWNpZmllZFxuICAgICAgaWYgKG9wdGlvbnMucGxhY2Vob2xkZXIgIT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIsXG4gICAgICAgICAgUGxhY2Vob2xkZXJcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuYWxsb3dDbGVhcikge1xuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIsXG4gICAgICAgICAgQWxsb3dDbGVhclxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5tdWx0aXBsZSkge1xuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIsXG4gICAgICAgICAgU2VsZWN0aW9uU2VhcmNoXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgb3B0aW9ucy5jb250YWluZXJDc3NDbGFzcyAhPSBudWxsIHx8XG4gICAgICAgIG9wdGlvbnMuY29udGFpbmVyQ3NzICE9IG51bGwgfHxcbiAgICAgICAgb3B0aW9ucy5hZGFwdENvbnRhaW5lckNzc0NsYXNzICE9IG51bGxcbiAgICAgICkge1xuICAgICAgICB2YXIgQ29udGFpbmVyQ1NTID0gcmVxdWlyZShvcHRpb25zLmFtZEJhc2UgKyAnY29tcGF0L2NvbnRhaW5lckNzcycpO1xuXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxuICAgICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlcixcbiAgICAgICAgICBDb250YWluZXJDU1NcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlcixcbiAgICAgICAgRXZlbnRSZWxheVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMubGFuZ3VhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBDaGVjayBpZiB0aGUgbGFuZ3VhZ2UgaXMgc3BlY2lmaWVkIHdpdGggYSByZWdpb25cbiAgICAgIGlmIChvcHRpb25zLmxhbmd1YWdlLmluZGV4T2YoJy0nKSA+IDApIHtcbiAgICAgICAgLy8gRXh0cmFjdCB0aGUgcmVnaW9uIGluZm9ybWF0aW9uIGlmIGl0IGlzIGluY2x1ZGVkXG4gICAgICAgIHZhciBsYW5ndWFnZVBhcnRzID0gb3B0aW9ucy5sYW5ndWFnZS5zcGxpdCgnLScpO1xuICAgICAgICB2YXIgYmFzZUxhbmd1YWdlID0gbGFuZ3VhZ2VQYXJ0c1swXTtcblxuICAgICAgICBvcHRpb25zLmxhbmd1YWdlID0gW29wdGlvbnMubGFuZ3VhZ2UsIGJhc2VMYW5ndWFnZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zLmxhbmd1YWdlID0gW29wdGlvbnMubGFuZ3VhZ2VdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgkLmlzQXJyYXkob3B0aW9ucy5sYW5ndWFnZSkpIHtcbiAgICAgIHZhciBsYW5ndWFnZXMgPSBuZXcgVHJhbnNsYXRpb24oKTtcbiAgICAgIG9wdGlvbnMubGFuZ3VhZ2UucHVzaCgnZW4nKTtcblxuICAgICAgdmFyIGxhbmd1YWdlTmFtZXMgPSBvcHRpb25zLmxhbmd1YWdlO1xuXG4gICAgICBmb3IgKHZhciBsID0gMDsgbCA8IGxhbmd1YWdlTmFtZXMubGVuZ3RoOyBsKyspIHtcbiAgICAgICAgdmFyIG5hbWUgPSBsYW5ndWFnZU5hbWVzW2xdO1xuICAgICAgICB2YXIgbGFuZ3VhZ2UgPSB7fTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRyeSB0byBsb2FkIGl0IHdpdGggdGhlIG9yaWdpbmFsIG5hbWVcbiAgICAgICAgICBsYW5ndWFnZSA9IFRyYW5zbGF0aW9uLmxvYWRQYXRoKG5hbWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIElmIHdlIGNvdWxkbid0IGxvYWQgaXQsIGNoZWNrIGlmIGl0IHdhc24ndCB0aGUgZnVsbCBwYXRoXG4gICAgICAgICAgICBuYW1lID0gdGhpcy5kZWZhdWx0cy5hbWRMYW5ndWFnZUJhc2UgKyBuYW1lO1xuICAgICAgICAgICAgbGFuZ3VhZ2UgPSBUcmFuc2xhdGlvbi5sb2FkUGF0aChuYW1lKTtcbiAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgLy8gVGhlIHRyYW5zbGF0aW9uIGNvdWxkIG5vdCBiZSBsb2FkZWQgYXQgYWxsLiBTb21ldGltZXMgdGhpcyBpc1xuICAgICAgICAgICAgLy8gYmVjYXVzZSBvZiBhIGNvbmZpZ3VyYXRpb24gcHJvYmxlbSwgb3RoZXIgdGltZXMgdGhpcyBjYW4gYmVcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugb2YgaG93IFNlbGVjdDIgaGVscHMgbG9hZCBhbGwgcG9zc2libGUgdHJhbnNsYXRpb24gZmlsZXMuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICdTZWxlY3QyOiBUaGUgbGFuZ3VhZ2UgZmlsZSBmb3IgXCInICsgbmFtZSArICdcIiBjb3VsZCBub3QgYmUgJyArXG4gICAgICAgICAgICAgICAgJ2F1dG9tYXRpY2FsbHkgbG9hZGVkLiBBIGZhbGxiYWNrIHdpbGwgYmUgdXNlZCBpbnN0ZWFkLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGFuZ3VhZ2VzLmV4dGVuZChsYW5ndWFnZSk7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMudHJhbnNsYXRpb25zID0gbGFuZ3VhZ2VzO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYmFzZVRyYW5zbGF0aW9uID0gVHJhbnNsYXRpb24ubG9hZFBhdGgoXG4gICAgICAgIHRoaXMuZGVmYXVsdHMuYW1kTGFuZ3VhZ2VCYXNlICsgJ2VuJ1xuICAgICAgKTtcbiAgICAgIHZhciBjdXN0b21UcmFuc2xhdGlvbiA9IG5ldyBUcmFuc2xhdGlvbihvcHRpb25zLmxhbmd1YWdlKTtcblxuICAgICAgY3VzdG9tVHJhbnNsYXRpb24uZXh0ZW5kKGJhc2VUcmFuc2xhdGlvbik7XG5cbiAgICAgIG9wdGlvbnMudHJhbnNsYXRpb25zID0gY3VzdG9tVHJhbnNsYXRpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH07XG5cbiAgRGVmYXVsdHMucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHN0cmlwRGlhY3JpdGljcyAodGV4dCkge1xuICAgICAgLy8gVXNlZCAndW5pIHJhbmdlICsgbmFtZWQgZnVuY3Rpb24nIGZyb20gaHR0cDovL2pzcGVyZi5jb20vZGlhY3JpdGljcy8xOFxuICAgICAgZnVuY3Rpb24gbWF0Y2goYSkge1xuICAgICAgICByZXR1cm4gRElBQ1JJVElDU1thXSB8fCBhO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9bXlxcdTAwMDAtXFx1MDA3RV0vZywgbWF0Y2gpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoZXIgKHBhcmFtcywgZGF0YSkge1xuICAgICAgLy8gQWx3YXlzIHJldHVybiB0aGUgb2JqZWN0IGlmIHRoZXJlIGlzIG5vdGhpbmcgdG8gY29tcGFyZVxuICAgICAgaWYgKCQudHJpbShwYXJhbXMudGVybSkgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuXG4gICAgICAvLyBEbyBhIHJlY3Vyc2l2ZSBjaGVjayBmb3Igb3B0aW9ucyB3aXRoIGNoaWxkcmVuXG4gICAgICBpZiAoZGF0YS5jaGlsZHJlbiAmJiBkYXRhLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gQ2xvbmUgdGhlIGRhdGEgb2JqZWN0IGlmIHRoZXJlIGFyZSBjaGlsZHJlblxuICAgICAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIGFzIHdlIG1vZGlmeSB0aGUgb2JqZWN0IHRvIHJlbW92ZSBhbnkgbm9uLW1hdGNoZXNcbiAgICAgICAgdmFyIG1hdGNoID0gJC5leHRlbmQodHJ1ZSwge30sIGRhdGEpO1xuXG4gICAgICAgIC8vIENoZWNrIGVhY2ggY2hpbGQgb2YgdGhlIG9wdGlvblxuICAgICAgICBmb3IgKHZhciBjID0gZGF0YS5jaGlsZHJlbi5sZW5ndGggLSAxOyBjID49IDA7IGMtLSkge1xuICAgICAgICAgIHZhciBjaGlsZCA9IGRhdGEuY2hpbGRyZW5bY107XG5cbiAgICAgICAgICB2YXIgbWF0Y2hlcyA9IG1hdGNoZXIocGFyYW1zLCBjaGlsZCk7XG5cbiAgICAgICAgICAvLyBJZiB0aGVyZSB3YXNuJ3QgYSBtYXRjaCwgcmVtb3ZlIHRoZSBvYmplY3QgaW4gdGhlIGFycmF5XG4gICAgICAgICAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgbWF0Y2guY2hpbGRyZW4uc3BsaWNlKGMsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGFueSBjaGlsZHJlbiBtYXRjaGVkLCByZXR1cm4gdGhlIG5ldyBvYmplY3RcbiAgICAgICAgaWYgKG1hdGNoLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGVyZSB3ZXJlIG5vIG1hdGNoaW5nIGNoaWxkcmVuLCBjaGVjayBqdXN0IHRoZSBwbGFpbiBvYmplY3RcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIocGFyYW1zLCBtYXRjaCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvcmlnaW5hbCA9IHN0cmlwRGlhY3JpdGljcyhkYXRhLnRleHQpLnRvVXBwZXJDYXNlKCk7XG4gICAgICB2YXIgdGVybSA9IHN0cmlwRGlhY3JpdGljcyhwYXJhbXMudGVybSkudG9VcHBlckNhc2UoKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHRleHQgY29udGFpbnMgdGhlIHRlcm1cbiAgICAgIGlmIChvcmlnaW5hbC5pbmRleE9mKHRlcm0pID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGl0IGRvZXNuJ3QgY29udGFpbiB0aGUgdGVybSwgZG9uJ3QgcmV0dXJuIGFueXRoaW5nXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgYW1kQmFzZTogJy4vJyxcbiAgICAgIGFtZExhbmd1YWdlQmFzZTogJy4vaTE4bi8nLFxuICAgICAgY2xvc2VPblNlbGVjdDogdHJ1ZSxcbiAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgIGRyb3Bkb3duQXV0b1dpZHRoOiBmYWxzZSxcbiAgICAgIGVzY2FwZU1hcmt1cDogVXRpbHMuZXNjYXBlTWFya3VwLFxuICAgICAgbGFuZ3VhZ2U6IEVuZ2xpc2hUcmFuc2xhdGlvbixcbiAgICAgIG1hdGNoZXI6IG1hdGNoZXIsXG4gICAgICBtaW5pbXVtSW5wdXRMZW5ndGg6IDAsXG4gICAgICBtYXhpbXVtSW5wdXRMZW5ndGg6IDAsXG4gICAgICBtYXhpbXVtU2VsZWN0aW9uTGVuZ3RoOiAwLFxuICAgICAgbWluaW11bVJlc3VsdHNGb3JTZWFyY2g6IDAsXG4gICAgICBzZWxlY3RPbkNsb3NlOiBmYWxzZSxcbiAgICAgIHNvcnRlcjogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVSZXN1bHQ6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50ZXh0O1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlU2VsZWN0aW9uOiBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb24udGV4dDtcbiAgICAgIH0sXG4gICAgICB0aGVtZTogJ2RlZmF1bHQnLFxuICAgICAgd2lkdGg6ICdyZXNvbHZlJ1xuICAgIH07XG4gIH07XG5cbiAgRGVmYXVsdHMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGNhbWVsS2V5ID0gJC5jYW1lbENhc2Uoa2V5KTtcblxuICAgIHZhciBkYXRhID0ge307XG4gICAgZGF0YVtjYW1lbEtleV0gPSB2YWx1ZTtcblxuICAgIHZhciBjb252ZXJ0ZWREYXRhID0gVXRpbHMuX2NvbnZlcnREYXRhKGRhdGEpO1xuXG4gICAgJC5leHRlbmQodGhpcy5kZWZhdWx0cywgY29udmVydGVkRGF0YSk7XG4gIH07XG5cbiAgdmFyIGRlZmF1bHRzID0gbmV3IERlZmF1bHRzKCk7XG5cbiAgcmV0dXJuIGRlZmF1bHRzO1xufSk7XG5cblMyLmRlZmluZSgnc2VsZWN0Mi9vcHRpb25zJyxbXG4gICdyZXF1aXJlJyxcbiAgJ2pxdWVyeScsXG4gICcuL2RlZmF1bHRzJyxcbiAgJy4vdXRpbHMnXG5dLCBmdW5jdGlvbiAocmVxdWlyZSwgJCwgRGVmYXVsdHMsIFV0aWxzKSB7XG4gIGZ1bmN0aW9uIE9wdGlvbnMgKG9wdGlvbnMsICRlbGVtZW50KSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIGlmICgkZWxlbWVudCAhPSBudWxsKSB7XG4gICAgICB0aGlzLmZyb21FbGVtZW50KCRlbGVtZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBEZWZhdWx0cy5hcHBseSh0aGlzLm9wdGlvbnMpO1xuXG4gICAgaWYgKCRlbGVtZW50ICYmICRlbGVtZW50LmlzKCdpbnB1dCcpKSB7XG4gICAgICB2YXIgSW5wdXRDb21wYXQgPSByZXF1aXJlKHRoaXMuZ2V0KCdhbWRCYXNlJykgKyAnY29tcGF0L2lucHV0RGF0YScpO1xuXG4gICAgICB0aGlzLm9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcbiAgICAgICAgdGhpcy5vcHRpb25zLmRhdGFBZGFwdGVyLFxuICAgICAgICBJbnB1dENvbXBhdFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBPcHRpb25zLnByb3RvdHlwZS5mcm9tRWxlbWVudCA9IGZ1bmN0aW9uICgkZSkge1xuICAgIHZhciBleGNsdWRlZERhdGEgPSBbJ3NlbGVjdDInXTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMubXVsdGlwbGUgPT0gbnVsbCkge1xuICAgICAgdGhpcy5vcHRpb25zLm11bHRpcGxlID0gJGUucHJvcCgnbXVsdGlwbGUnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmRpc2FibGVkID09IG51bGwpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9ICRlLnByb3AoJ2Rpc2FibGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5sYW5ndWFnZSA9PSBudWxsKSB7XG4gICAgICBpZiAoJGUucHJvcCgnbGFuZycpKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5sYW5ndWFnZSA9ICRlLnByb3AoJ2xhbmcnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgfSBlbHNlIGlmICgkZS5jbG9zZXN0KCdbbGFuZ10nKS5wcm9wKCdsYW5nJykpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmxhbmd1YWdlID0gJGUuY2xvc2VzdCgnW2xhbmddJykucHJvcCgnbGFuZycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGlyID09IG51bGwpIHtcbiAgICAgIGlmICgkZS5wcm9wKCdkaXInKSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZGlyID0gJGUucHJvcCgnZGlyJyk7XG4gICAgICB9IGVsc2UgaWYgKCRlLmNsb3Nlc3QoJ1tkaXJdJykucHJvcCgnZGlyJykpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmRpciA9ICRlLmNsb3Nlc3QoJ1tkaXJdJykucHJvcCgnZGlyJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZGlyID0gJ2x0cic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJGUucHJvcCgnZGlzYWJsZWQnLCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQpO1xuICAgICRlLnByb3AoJ211bHRpcGxlJywgdGhpcy5vcHRpb25zLm11bHRpcGxlKTtcblxuICAgIGlmICgkZS5kYXRhKCdzZWxlY3QyVGFncycpKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ1NlbGVjdDI6IFRoZSBgZGF0YS1zZWxlY3QyLXRhZ3NgIGF0dHJpYnV0ZSBoYXMgYmVlbiBjaGFuZ2VkIHRvICcgK1xuICAgICAgICAgICd1c2UgdGhlIGBkYXRhLWRhdGFgIGFuZCBgZGF0YS10YWdzPVwidHJ1ZVwiYCBhdHRyaWJ1dGVzIGFuZCB3aWxsIGJlICcgK1xuICAgICAgICAgICdyZW1vdmVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBTZWxlY3QyLidcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgJGUuZGF0YSgnZGF0YScsICRlLmRhdGEoJ3NlbGVjdDJUYWdzJykpO1xuICAgICAgJGUuZGF0YSgndGFncycsIHRydWUpO1xuICAgIH1cblxuICAgIGlmICgkZS5kYXRhKCdhamF4VXJsJykpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVidWcgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnU2VsZWN0MjogVGhlIGBkYXRhLWFqYXgtdXJsYCBhdHRyaWJ1dGUgaGFzIGJlZW4gY2hhbmdlZCB0byAnICtcbiAgICAgICAgICAnYGRhdGEtYWpheC0tdXJsYCBhbmQgc3VwcG9ydCBmb3IgdGhlIG9sZCBhdHRyaWJ1dGUgd2lsbCBiZSByZW1vdmVkJyArXG4gICAgICAgICAgJyBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgU2VsZWN0Mi4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgICRlLmF0dHIoJ2FqYXgtLXVybCcsICRlLmRhdGEoJ2FqYXhVcmwnKSk7XG4gICAgICAkZS5kYXRhKCdhamF4LS11cmwnLCAkZS5kYXRhKCdhamF4VXJsJykpO1xuICAgIH1cblxuICAgIHZhciBkYXRhc2V0ID0ge307XG5cbiAgICAvLyBQcmVmZXIgdGhlIGVsZW1lbnQncyBgZGF0YXNldGAgYXR0cmlidXRlIGlmIGl0IGV4aXN0c1xuICAgIC8vIGpRdWVyeSAxLnggZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSBkYXRhIGF0dHJpYnV0ZXMgd2l0aCBtdWx0aXBsZSBkYXNoZXNcbiAgICBpZiAoJC5mbi5qcXVlcnkgJiYgJC5mbi5qcXVlcnkuc3Vic3RyKDAsIDIpID09ICcxLicgJiYgJGVbMF0uZGF0YXNldCkge1xuICAgICAgZGF0YXNldCA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkZVswXS5kYXRhc2V0LCAkZS5kYXRhKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhc2V0ID0gJGUuZGF0YSgpO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIGRhdGFzZXQpO1xuXG4gICAgZGF0YSA9IFV0aWxzLl9jb252ZXJ0RGF0YShkYXRhKTtcblxuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBpZiAoJC5pbkFycmF5KGtleSwgZXhjbHVkZWREYXRhKSA+IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KHRoaXMub3B0aW9uc1trZXldKSkge1xuICAgICAgICAkLmV4dGVuZCh0aGlzLm9wdGlvbnNba2V5XSwgZGF0YVtrZXldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gZGF0YVtrZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIE9wdGlvbnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zW2tleV07XG4gIH07XG5cbiAgT3B0aW9ucy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsKSB7XG4gICAgdGhpcy5vcHRpb25zW2tleV0gPSB2YWw7XG4gIH07XG5cbiAgcmV0dXJuIE9wdGlvbnM7XG59KTtcblxuUzIuZGVmaW5lKCdzZWxlY3QyL2NvcmUnLFtcbiAgJ2pxdWVyeScsXG4gICcuL29wdGlvbnMnLFxuICAnLi91dGlscycsXG4gICcuL2tleXMnXG5dLCBmdW5jdGlvbiAoJCwgT3B0aW9ucywgVXRpbHMsIEtFWVMpIHtcbiAgdmFyIFNlbGVjdDIgPSBmdW5jdGlvbiAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBpZiAoJGVsZW1lbnQuZGF0YSgnc2VsZWN0MicpICE9IG51bGwpIHtcbiAgICAgICRlbGVtZW50LmRhdGEoJ3NlbGVjdDInKS5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuXG4gICAgdGhpcy5pZCA9IHRoaXMuX2dlbmVyYXRlSWQoJGVsZW1lbnQpO1xuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBuZXcgT3B0aW9ucyhvcHRpb25zLCAkZWxlbWVudCk7XG5cbiAgICBTZWxlY3QyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xuXG4gICAgLy8gU2V0IHVwIHRoZSB0YWJpbmRleFxuXG4gICAgdmFyIHRhYmluZGV4ID0gJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnKSB8fCAwO1xuICAgICRlbGVtZW50LmRhdGEoJ29sZC10YWJpbmRleCcsIHRhYmluZGV4KTtcbiAgICAkZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsICctMScpO1xuXG4gICAgLy8gU2V0IHVwIGNvbnRhaW5lcnMgYW5kIGFkYXB0ZXJzXG5cbiAgICB2YXIgRGF0YUFkYXB0ZXIgPSB0aGlzLm9wdGlvbnMuZ2V0KCdkYXRhQWRhcHRlcicpO1xuICAgIHRoaXMuZGF0YUFkYXB0ZXIgPSBuZXcgRGF0YUFkYXB0ZXIoJGVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XG5cbiAgICB2YXIgJGNvbnRhaW5lciA9IHRoaXMucmVuZGVyKCk7XG5cbiAgICB0aGlzLl9wbGFjZUNvbnRhaW5lcigkY29udGFpbmVyKTtcblxuICAgIHZhciBTZWxlY3Rpb25BZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgnc2VsZWN0aW9uQWRhcHRlcicpO1xuICAgIHRoaXMuc2VsZWN0aW9uID0gbmV3IFNlbGVjdGlvbkFkYXB0ZXIoJGVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy4kc2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb24ucmVuZGVyKCk7XG5cbiAgICB0aGlzLnNlbGVjdGlvbi5wb3NpdGlvbih0aGlzLiRzZWxlY3Rpb24sICRjb250YWluZXIpO1xuXG4gICAgdmFyIERyb3Bkb3duQWRhcHRlciA9IHRoaXMub3B0aW9ucy5nZXQoJ2Ryb3Bkb3duQWRhcHRlcicpO1xuICAgIHRoaXMuZHJvcGRvd24gPSBuZXcgRHJvcGRvd25BZGFwdGVyKCRlbGVtZW50LCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuJGRyb3Bkb3duID0gdGhpcy5kcm9wZG93bi5yZW5kZXIoKTtcblxuICAgIHRoaXMuZHJvcGRvd24ucG9zaXRpb24odGhpcy4kZHJvcGRvd24sICRjb250YWluZXIpO1xuXG4gICAgdmFyIFJlc3VsdHNBZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgncmVzdWx0c0FkYXB0ZXInKTtcbiAgICB0aGlzLnJlc3VsdHMgPSBuZXcgUmVzdWx0c0FkYXB0ZXIoJGVsZW1lbnQsIHRoaXMub3B0aW9ucywgdGhpcy5kYXRhQWRhcHRlcik7XG4gICAgdGhpcy4kcmVzdWx0cyA9IHRoaXMucmVzdWx0cy5yZW5kZXIoKTtcblxuICAgIHRoaXMucmVzdWx0cy5wb3NpdGlvbih0aGlzLiRyZXN1bHRzLCB0aGlzLiRkcm9wZG93bik7XG5cbiAgICAvLyBCaW5kIGV2ZW50c1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gQmluZCB0aGUgY29udGFpbmVyIHRvIGFsbCBvZiB0aGUgYWRhcHRlcnNcbiAgICB0aGlzLl9iaW5kQWRhcHRlcnMoKTtcblxuICAgIC8vIFJlZ2lzdGVyIGFueSBET00gZXZlbnQgaGFuZGxlcnNcbiAgICB0aGlzLl9yZWdpc3RlckRvbUV2ZW50cygpO1xuXG4gICAgLy8gUmVnaXN0ZXIgYW55IGludGVybmFsIGV2ZW50IGhhbmRsZXJzXG4gICAgdGhpcy5fcmVnaXN0ZXJEYXRhRXZlbnRzKCk7XG4gICAgdGhpcy5fcmVnaXN0ZXJTZWxlY3Rpb25FdmVudHMoKTtcbiAgICB0aGlzLl9yZWdpc3RlckRyb3Bkb3duRXZlbnRzKCk7XG4gICAgdGhpcy5fcmVnaXN0ZXJSZXN1bHRzRXZlbnRzKCk7XG4gICAgdGhpcy5fcmVnaXN0ZXJFdmVudHMoKTtcblxuICAgIC8vIFNldCB0aGUgaW5pdGlhbCBzdGF0ZVxuICAgIHRoaXMuZGF0YUFkYXB0ZXIuY3VycmVudChmdW5jdGlvbiAoaW5pdGlhbERhdGEpIHtcbiAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0aW9uOnVwZGF0ZScsIHtcbiAgICAgICAgZGF0YTogaW5pdGlhbERhdGFcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gSGlkZSB0aGUgb3JpZ2luYWwgc2VsZWN0XG4gICAgJGVsZW1lbnQuYWRkQ2xhc3MoJ3NlbGVjdDItaGlkZGVuLWFjY2Vzc2libGUnKTtcbiAgICAkZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAvLyBTeW5jaHJvbml6ZSBhbnkgbW9uaXRvcmVkIGF0dHJpYnV0ZXNcbiAgICB0aGlzLl9zeW5jQXR0cmlidXRlcygpO1xuXG4gICAgJGVsZW1lbnQuZGF0YSgnc2VsZWN0MicsIHRoaXMpO1xuICB9O1xuXG4gIFV0aWxzLkV4dGVuZChTZWxlY3QyLCBVdGlscy5PYnNlcnZhYmxlKTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5fZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uICgkZWxlbWVudCkge1xuICAgIHZhciBpZCA9ICcnO1xuXG4gICAgaWYgKCRlbGVtZW50LmF0dHIoJ2lkJykgIT0gbnVsbCkge1xuICAgICAgaWQgPSAkZWxlbWVudC5hdHRyKCdpZCcpO1xuICAgIH0gZWxzZSBpZiAoJGVsZW1lbnQuYXR0cignbmFtZScpICE9IG51bGwpIHtcbiAgICAgIGlkID0gJGVsZW1lbnQuYXR0cignbmFtZScpICsgJy0nICsgVXRpbHMuZ2VuZXJhdGVDaGFycygyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWQgPSBVdGlscy5nZW5lcmF0ZUNoYXJzKDQpO1xuICAgIH1cblxuICAgIGlkID0gaWQucmVwbGFjZSgvKDp8XFwufFxcW3xcXF18LCkvZywgJycpO1xuICAgIGlkID0gJ3NlbGVjdDItJyArIGlkO1xuXG4gICAgcmV0dXJuIGlkO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLl9wbGFjZUNvbnRhaW5lciA9IGZ1bmN0aW9uICgkY29udGFpbmVyKSB7XG4gICAgJGNvbnRhaW5lci5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KTtcblxuICAgIHZhciB3aWR0aCA9IHRoaXMuX3Jlc29sdmVXaWR0aCh0aGlzLiRlbGVtZW50LCB0aGlzLm9wdGlvbnMuZ2V0KCd3aWR0aCcpKTtcblxuICAgIGlmICh3aWR0aCAhPSBudWxsKSB7XG4gICAgICAkY29udGFpbmVyLmNzcygnd2lkdGgnLCB3aWR0aCk7XG4gICAgfVxuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZXNvbHZlV2lkdGggPSBmdW5jdGlvbiAoJGVsZW1lbnQsIG1ldGhvZCkge1xuICAgIHZhciBXSURUSCA9IC9ed2lkdGg6KChbLStdPyhbMC05XSpcXC4pP1swLTldKykocHh8ZW18ZXh8JXxpbnxjbXxtbXxwdHxwYykpL2k7XG5cbiAgICBpZiAobWV0aG9kID09ICdyZXNvbHZlJykge1xuICAgICAgdmFyIHN0eWxlV2lkdGggPSB0aGlzLl9yZXNvbHZlV2lkdGgoJGVsZW1lbnQsICdzdHlsZScpO1xuXG4gICAgICBpZiAoc3R5bGVXaWR0aCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzdHlsZVdpZHRoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZVdpZHRoKCRlbGVtZW50LCAnZWxlbWVudCcpO1xuICAgIH1cblxuICAgIGlmIChtZXRob2QgPT0gJ2VsZW1lbnQnKSB7XG4gICAgICB2YXIgZWxlbWVudFdpZHRoID0gJGVsZW1lbnQub3V0ZXJXaWR0aChmYWxzZSk7XG5cbiAgICAgIGlmIChlbGVtZW50V2lkdGggPD0gMCkge1xuICAgICAgICByZXR1cm4gJ2F1dG8nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWxlbWVudFdpZHRoICsgJ3B4JztcbiAgICB9XG5cbiAgICBpZiAobWV0aG9kID09ICdzdHlsZScpIHtcbiAgICAgIHZhciBzdHlsZSA9ICRlbGVtZW50LmF0dHIoJ3N0eWxlJyk7XG5cbiAgICAgIGlmICh0eXBlb2Yoc3R5bGUpICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGF0dHJzID0gc3R5bGUuc3BsaXQoJzsnKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpID0gaSArIDEpIHtcbiAgICAgICAgdmFyIGF0dHIgPSBhdHRyc1tpXS5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IGF0dHIubWF0Y2goV0lEVEgpO1xuXG4gICAgICAgIGlmIChtYXRjaGVzICE9PSBudWxsICYmIG1hdGNoZXMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2hlc1sxXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWV0aG9kO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLl9iaW5kQWRhcHRlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kYXRhQWRhcHRlci5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XG4gICAgdGhpcy5zZWxlY3Rpb24uYmluZCh0aGlzLCB0aGlzLiRjb250YWluZXIpO1xuXG4gICAgdGhpcy5kcm9wZG93bi5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XG4gICAgdGhpcy5yZXN1bHRzLmJpbmQodGhpcywgdGhpcy4kY29udGFpbmVyKTtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5fcmVnaXN0ZXJEb21FdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy4kZWxlbWVudC5vbignY2hhbmdlLnNlbGVjdDInLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmRhdGFBZGFwdGVyLmN1cnJlbnQoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdzZWxlY3Rpb246dXBkYXRlJywge1xuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuJGVsZW1lbnQub24oJ2ZvY3VzLnNlbGVjdDInLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBzZWxmLnRyaWdnZXIoJ2ZvY3VzJywgZXZ0KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3N5bmNBID0gVXRpbHMuYmluZCh0aGlzLl9zeW5jQXR0cmlidXRlcywgdGhpcyk7XG4gICAgdGhpcy5fc3luY1MgPSBVdGlscy5iaW5kKHRoaXMuX3N5bmNTdWJ0cmVlLCB0aGlzKTtcblxuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdLmF0dGFjaEV2ZW50KSB7XG4gICAgICB0aGlzLiRlbGVtZW50WzBdLmF0dGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgdGhpcy5fc3luY0EpO1xuICAgIH1cblxuICAgIHZhciBvYnNlcnZlciA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8XG4gICAgICB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlciB8fFxuICAgICAgd2luZG93Lk1vek11dGF0aW9uT2JzZXJ2ZXJcbiAgICA7XG5cbiAgICBpZiAob2JzZXJ2ZXIgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXIgPSBuZXcgb2JzZXJ2ZXIoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgICAkLmVhY2gobXV0YXRpb25zLCBzZWxmLl9zeW5jQSk7XG4gICAgICAgICQuZWFjaChtdXRhdGlvbnMsIHNlbGYuX3N5bmNTKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLiRlbGVtZW50WzBdLCB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy4kZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0aGlzLiRlbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdET01BdHRyTW9kaWZpZWQnLFxuICAgICAgICBzZWxmLl9zeW5jQSxcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG4gICAgICB0aGlzLiRlbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdET01Ob2RlSW5zZXJ0ZWQnLFxuICAgICAgICBzZWxmLl9zeW5jUyxcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG4gICAgICB0aGlzLiRlbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdET01Ob2RlUmVtb3ZlZCcsXG4gICAgICAgIHNlbGYuX3N5bmNTLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3JlZ2lzdGVyRGF0YUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLmRhdGFBZGFwdGVyLm9uKCcqJywgZnVuY3Rpb24gKG5hbWUsIHBhcmFtcykge1xuICAgICAgc2VsZi50cmlnZ2VyKG5hbWUsIHBhcmFtcyk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3JlZ2lzdGVyU2VsZWN0aW9uRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgbm9uUmVsYXlFdmVudHMgPSBbJ3RvZ2dsZScsICdmb2N1cyddO1xuXG4gICAgdGhpcy5zZWxlY3Rpb24ub24oJ3RvZ2dsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYudG9nZ2xlRHJvcGRvd24oKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2VsZWN0aW9uLm9uKCdmb2N1cycsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHNlbGYuZm9jdXMocGFyYW1zKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2VsZWN0aW9uLm9uKCcqJywgZnVuY3Rpb24gKG5hbWUsIHBhcmFtcykge1xuICAgICAgaWYgKCQuaW5BcnJheShuYW1lLCBub25SZWxheUV2ZW50cykgIT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi50cmlnZ2VyKG5hbWUsIHBhcmFtcyk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3JlZ2lzdGVyRHJvcGRvd25FdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy5kcm9wZG93bi5vbignKicsIGZ1bmN0aW9uIChuYW1lLCBwYXJhbXMpIHtcbiAgICAgIHNlbGYudHJpZ2dlcihuYW1lLCBwYXJhbXMpO1xuICAgIH0pO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlclJlc3VsdHNFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy5yZXN1bHRzLm9uKCcqJywgZnVuY3Rpb24gKG5hbWUsIHBhcmFtcykge1xuICAgICAgc2VsZi50cmlnZ2VyKG5hbWUsIHBhcmFtcyk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3JlZ2lzdGVyRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLiRjb250YWluZXIuYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLW9wZW4nKTtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2VuYWJsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLWRpc2FibGVkJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdkaXNhYmxlJywgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi4kY29udGFpbmVyLmFkZENsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZGlzYWJsZWQnKTtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1mb2N1cycpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbigncXVlcnknLCBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICBpZiAoIXNlbGYuaXNPcGVuKCkpIHtcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdvcGVuJywge30pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRhdGFBZGFwdGVyLnF1ZXJ5KHBhcmFtcywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOmFsbCcsIHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIHF1ZXJ5OiBwYXJhbXNcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ3F1ZXJ5OmFwcGVuZCcsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHRoaXMuZGF0YUFkYXB0ZXIucXVlcnkocGFyYW1zLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBzZWxmLnRyaWdnZXIoJ3Jlc3VsdHM6YXBwZW5kJywge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgcXVlcnk6IHBhcmFtc1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICB2YXIga2V5ID0gZXZ0LndoaWNoO1xuXG4gICAgICBpZiAoc2VsZi5pc09wZW4oKSkge1xuICAgICAgICBpZiAoa2V5ID09PSBLRVlTLkVTQyB8fCBrZXkgPT09IEtFWVMuVEFCIHx8XG4gICAgICAgICAgICAoa2V5ID09PSBLRVlTLlVQICYmIGV2dC5hbHRLZXkpKSB7XG4gICAgICAgICAgc2VsZi5jbG9zZSgpO1xuXG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBLRVlTLkVOVEVSKSB7XG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOnNlbGVjdCcsIHt9KTtcblxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKChrZXkgPT09IEtFWVMuU1BBQ0UgJiYgZXZ0LmN0cmxLZXkpKSB7XG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOnRvZ2dsZScsIHt9KTtcblxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gS0VZUy5VUCkge1xuICAgICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czpwcmV2aW91cycsIHt9KTtcblxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gS0VZUy5ET1dOKSB7XG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOm5leHQnLCB7fSk7XG5cbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGtleSA9PT0gS0VZUy5FTlRFUiB8fCBrZXkgPT09IEtFWVMuU1BBQ0UgfHxcbiAgICAgICAgICAgIChrZXkgPT09IEtFWVMuRE9XTiAmJiBldnQuYWx0S2V5KSkge1xuICAgICAgICAgIHNlbGYub3BlbigpO1xuXG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5fc3luY0F0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5vcHRpb25zLnNldCgnZGlzYWJsZWQnLCB0aGlzLiRlbGVtZW50LnByb3AoJ2Rpc2FibGVkJykpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5nZXQoJ2Rpc2FibGVkJykpIHtcbiAgICAgIGlmICh0aGlzLmlzT3BlbigpKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy50cmlnZ2VyKCdkaXNhYmxlJywge30pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2VuYWJsZScsIHt9KTtcbiAgICB9XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3N5bmNTdWJ0cmVlID0gZnVuY3Rpb24gKGV2dCwgbXV0YXRpb25zKSB7XG4gICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBJZ25vcmUgYW55IG11dGF0aW9uIGV2ZW50cyByYWlzZWQgZm9yIGVsZW1lbnRzIHRoYXQgYXJlbid0IG9wdGlvbnMgb3JcbiAgICAvLyBvcHRncm91cHMuIFRoaXMgaGFuZGxlcyB0aGUgY2FzZSB3aGVuIHRoZSBzZWxlY3QgZWxlbWVudCBpcyBkZXN0cm95ZWRcbiAgICBpZiAoXG4gICAgICBldnQgJiYgZXZ0LnRhcmdldCAmJiAoXG4gICAgICAgIGV2dC50YXJnZXQubm9kZU5hbWUgIT09ICdPUFRJT04nICYmIGV2dC50YXJnZXQubm9kZU5hbWUgIT09ICdPUFRHUk9VUCdcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIW11dGF0aW9ucykge1xuICAgICAgLy8gSWYgbXV0YXRpb24gZXZlbnRzIGFyZW4ndCBzdXBwb3J0ZWQsIHRoZW4gd2UgY2FuIG9ubHkgYXNzdW1lIHRoYXQgdGhlXG4gICAgICAvLyBjaGFuZ2UgYWZmZWN0ZWQgdGhlIHNlbGVjdGlvbnNcbiAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAobXV0YXRpb25zLmFkZGVkTm9kZXMgJiYgbXV0YXRpb25zLmFkZGVkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtdXRhdGlvbnMuYWRkZWROb2Rlcy5sZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgbm9kZSA9IG11dGF0aW9ucy5hZGRlZE5vZGVzW25dO1xuXG4gICAgICAgIGlmIChub2RlLnNlbGVjdGVkKSB7XG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG11dGF0aW9ucy5yZW1vdmVkTm9kZXMgJiYgbXV0YXRpb25zLnJlbW92ZWROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBPbmx5IHJlLXB1bGwgdGhlIGRhdGEgaWYgd2UgdGhpbmsgdGhlcmUgaXMgYSBjaGFuZ2VcbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpcy5kYXRhQWRhcHRlci5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xuICAgICAgICBzZWxmLnRyaWdnZXIoJ3NlbGVjdGlvbjp1cGRhdGUnLCB7XG4gICAgICAgICAgZGF0YTogY3VycmVudERhdGFcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSB0cmlnZ2VyIG1ldGhvZCB0byBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgcHJlLWV2ZW50cyB3aGVuXG4gICAqIHRoZXJlIGFyZSBldmVudHMgdGhhdCBjYW4gYmUgcHJldmVudGVkLlxuICAgKi9cbiAgU2VsZWN0Mi5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChuYW1lLCBhcmdzKSB7XG4gICAgdmFyIGFjdHVhbFRyaWdnZXIgPSBTZWxlY3QyLl9fc3VwZXJfXy50cmlnZ2VyO1xuICAgIHZhciBwcmVUcmlnZ2VyTWFwID0ge1xuICAgICAgJ29wZW4nOiAnb3BlbmluZycsXG4gICAgICAnY2xvc2UnOiAnY2xvc2luZycsXG4gICAgICAnc2VsZWN0JzogJ3NlbGVjdGluZycsXG4gICAgICAndW5zZWxlY3QnOiAndW5zZWxlY3RpbmcnXG4gICAgfTtcblxuICAgIGlmIChhcmdzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGFyZ3MgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAobmFtZSBpbiBwcmVUcmlnZ2VyTWFwKSB7XG4gICAgICB2YXIgcHJlVHJpZ2dlck5hbWUgPSBwcmVUcmlnZ2VyTWFwW25hbWVdO1xuICAgICAgdmFyIHByZVRyaWdnZXJBcmdzID0ge1xuICAgICAgICBwcmV2ZW50ZWQ6IGZhbHNlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBhcmdzOiBhcmdzXG4gICAgICB9O1xuXG4gICAgICBhY3R1YWxUcmlnZ2VyLmNhbGwodGhpcywgcHJlVHJpZ2dlck5hbWUsIHByZVRyaWdnZXJBcmdzKTtcblxuICAgICAgaWYgKHByZVRyaWdnZXJBcmdzLnByZXZlbnRlZCkge1xuICAgICAgICBhcmdzLnByZXZlbnRlZCA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFjdHVhbFRyaWdnZXIuY2FsbCh0aGlzLCBuYW1lLCBhcmdzKTtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS50b2dnbGVEcm9wZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnZGlzYWJsZWQnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzT3BlbigpKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzT3BlbigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKCdxdWVyeScsIHt9KTtcbiAgfTtcblxuICBTZWxlY3QyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuaXNPcGVuKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnRyaWdnZXIoJ2Nsb3NlJywge30pO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLmlzT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGFpbmVyLmhhc0NsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tb3BlbicpO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLmhhc0ZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLiRjb250YWluZXIuaGFzQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1mb2N1cycpO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAvLyBObyBuZWVkIHRvIHJlLXRyaWdnZXIgZm9jdXMgZXZlbnRzIGlmIHdlIGFyZSBhbHJlYWR5IGZvY3VzZWRcbiAgICBpZiAodGhpcy5oYXNGb2N1cygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy4kY29udGFpbmVyLmFkZENsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZm9jdXMnKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2ZvY3VzJywge30pO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5nZXQoJ2RlYnVnJykgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdTZWxlY3QyOiBUaGUgYHNlbGVjdDIoXCJlbmFibGVcIilgIG1ldGhvZCBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsJyArXG4gICAgICAgICcgYmUgcmVtb3ZlZCBpbiBsYXRlciBTZWxlY3QyIHZlcnNpb25zLiBVc2UgJGVsZW1lbnQucHJvcChcImRpc2FibGVkXCIpJyArXG4gICAgICAgICcgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChhcmdzID09IG51bGwgfHwgYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIGFyZ3MgPSBbdHJ1ZV07XG4gICAgfVxuXG4gICAgdmFyIGRpc2FibGVkID0gIWFyZ3NbMF07XG5cbiAgICB0aGlzLiRlbGVtZW50LnByb3AoJ2Rpc2FibGVkJywgZGlzYWJsZWQpO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLmRhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5nZXQoJ2RlYnVnJykgJiZcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdTZWxlY3QyOiBEYXRhIGNhbiBubyBsb25nZXIgYmUgc2V0IHVzaW5nIGBzZWxlY3QyKFwiZGF0YVwiKWAuIFlvdSAnICtcbiAgICAgICAgJ3Nob3VsZCBjb25zaWRlciBzZXR0aW5nIHRoZSB2YWx1ZSBpbnN0ZWFkIHVzaW5nIGAkZWxlbWVudC52YWwoKWAuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IFtdO1xuXG4gICAgdGhpcy5kYXRhQWRhcHRlci5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xuICAgICAgZGF0YSA9IGN1cnJlbnREYXRhO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgU2VsZWN0Mi5wcm90b3R5cGUudmFsID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnZGVidWcnKSAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1NlbGVjdDI6IFRoZSBgc2VsZWN0MihcInZhbFwiKWAgbWV0aG9kIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUnICtcbiAgICAgICAgJyByZW1vdmVkIGluIGxhdGVyIFNlbGVjdDIgdmVyc2lvbnMuIFVzZSAkZWxlbWVudC52YWwoKSBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MgPT0gbnVsbCB8fCBhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQudmFsKCk7XG4gICAgfVxuXG4gICAgdmFyIG5ld1ZhbCA9IGFyZ3NbMF07XG5cbiAgICBpZiAoJC5pc0FycmF5KG5ld1ZhbCkpIHtcbiAgICAgIG5ld1ZhbCA9ICQubWFwKG5ld1ZhbCwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqLnRvU3RyaW5nKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50LnZhbChuZXdWYWwpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZSgpO1xuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0uZGV0YWNoRXZlbnQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF0uZGV0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCB0aGlzLl9zeW5jQSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX29ic2VydmVyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMuX29ic2VydmVyID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnRbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGhpcy4kZWxlbWVudFswXVxuICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQXR0ck1vZGlmaWVkJywgdGhpcy5fc3luY0EsIGZhbHNlKTtcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF1cbiAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTU5vZGVJbnNlcnRlZCcsIHRoaXMuX3N5bmNTLCBmYWxzZSk7XG4gICAgICB0aGlzLiRlbGVtZW50WzBdXG4gICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKCdET01Ob2RlUmVtb3ZlZCcsIHRoaXMuX3N5bmNTLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3luY0EgPSBudWxsO1xuICAgIHRoaXMuX3N5bmNTID0gbnVsbDtcblxuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuc2VsZWN0MicpO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCB0aGlzLiRlbGVtZW50LmRhdGEoJ29sZC10YWJpbmRleCcpKTtcblxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItaGlkZGVuLWFjY2Vzc2libGUnKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVEYXRhKCdzZWxlY3QyJyk7XG5cbiAgICB0aGlzLmRhdGFBZGFwdGVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLnNlbGVjdGlvbi5kZXN0cm95KCk7XG4gICAgdGhpcy5kcm9wZG93bi5kZXN0cm95KCk7XG4gICAgdGhpcy5yZXN1bHRzLmRlc3Ryb3koKTtcblxuICAgIHRoaXMuZGF0YUFkYXB0ZXIgPSBudWxsO1xuICAgIHRoaXMuc2VsZWN0aW9uID0gbnVsbDtcbiAgICB0aGlzLmRyb3Bkb3duID0gbnVsbDtcbiAgICB0aGlzLnJlc3VsdHMgPSBudWxsO1xuICB9O1xuXG4gIFNlbGVjdDIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGNvbnRhaW5lciA9ICQoXG4gICAgICAnPHNwYW4gY2xhc3M9XCJzZWxlY3QyIHNlbGVjdDItY29udGFpbmVyXCI+JyArXG4gICAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdGlvblwiPjwvc3Bhbj4nICtcbiAgICAgICAgJzxzcGFuIGNsYXNzPVwiZHJvcGRvd24td3JhcHBlclwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj4nICtcbiAgICAgICc8L3NwYW4+J1xuICAgICk7XG5cbiAgICAkY29udGFpbmVyLmF0dHIoJ2RpcicsIHRoaXMub3B0aW9ucy5nZXQoJ2RpcicpKTtcblxuICAgIHRoaXMuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XG5cbiAgICB0aGlzLiRjb250YWluZXIuYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS0nICsgdGhpcy5vcHRpb25zLmdldCgndGhlbWUnKSk7XG5cbiAgICAkY29udGFpbmVyLmRhdGEoJ2VsZW1lbnQnLCB0aGlzLiRlbGVtZW50KTtcblxuICAgIHJldHVybiAkY29udGFpbmVyO1xuICB9O1xuXG4gIHJldHVybiBTZWxlY3QyO1xufSk7XG5cblMyLmRlZmluZSgnanF1ZXJ5LW1vdXNld2hlZWwnLFtcbiAgJ2pxdWVyeSdcbl0sIGZ1bmN0aW9uICgkKSB7XG4gIC8vIFVzZWQgdG8gc2hpbSBqUXVlcnkubW91c2V3aGVlbCBmb3Igbm9uLWZ1bGwgYnVpbGRzLlxuICByZXR1cm4gJDtcbn0pO1xuXG5TMi5kZWZpbmUoJ2pxdWVyeS5zZWxlY3QyJyxbXG4gICdqcXVlcnknLFxuICAnanF1ZXJ5LW1vdXNld2hlZWwnLFxuXG4gICcuL3NlbGVjdDIvY29yZScsXG4gICcuL3NlbGVjdDIvZGVmYXVsdHMnXG5dLCBmdW5jdGlvbiAoJCwgXywgU2VsZWN0MiwgRGVmYXVsdHMpIHtcbiAgaWYgKCQuZm4uc2VsZWN0MiA9PSBudWxsKSB7XG4gICAgLy8gQWxsIG1ldGhvZHMgdGhhdCBzaG91bGQgcmV0dXJuIHRoZSBlbGVtZW50XG4gICAgdmFyIHRoaXNNZXRob2RzID0gWydvcGVuJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knXTtcblxuICAgICQuZm4uc2VsZWN0MiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBpbnN0YW5jZU9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgU2VsZWN0MigkKHRoaXMpLCBpbnN0YW5jZU9wdGlvbnMpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciByZXQ7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBpbnN0YW5jZSA9ICQodGhpcykuZGF0YSgnc2VsZWN0MicpO1xuXG4gICAgICAgICAgaWYgKGluc3RhbmNlID09IG51bGwgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgJ1RoZSBzZWxlY3QyKFxcJycgKyBvcHRpb25zICsgJ1xcJykgbWV0aG9kIHdhcyBjYWxsZWQgb24gYW4gJyArXG4gICAgICAgICAgICAgICdlbGVtZW50IHRoYXQgaXMgbm90IHVzaW5nIFNlbGVjdDIuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXQgPSBpbnN0YW5jZVtvcHRpb25zXS5hcHBseShpbnN0YW5jZSwgYXJncyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIHNob3VsZCBiZSByZXR1cm5pbmcgYHRoaXNgXG4gICAgICAgIGlmICgkLmluQXJyYXkob3B0aW9ucywgdGhpc01ldGhvZHMpID4gLTEpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnRzIGZvciBTZWxlY3QyOiAnICsgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGlmICgkLmZuLnNlbGVjdDIuZGVmYXVsdHMgPT0gbnVsbCkge1xuICAgICQuZm4uc2VsZWN0Mi5kZWZhdWx0cyA9IERlZmF1bHRzO1xuICB9XG5cbiAgcmV0dXJuIFNlbGVjdDI7XG59KTtcblxuICAvLyBSZXR1cm4gdGhlIEFNRCBsb2FkZXIgY29uZmlndXJhdGlvbiBzbyBpdCBjYW4gYmUgdXNlZCBvdXRzaWRlIG9mIHRoaXMgZmlsZVxuICByZXR1cm4ge1xuICAgIGRlZmluZTogUzIuZGVmaW5lLFxuICAgIHJlcXVpcmU6IFMyLnJlcXVpcmVcbiAgfTtcbn0oKSk7XG5cbiAgLy8gQXV0b2xvYWQgdGhlIGpRdWVyeSBiaW5kaW5nc1xuICAvLyBXZSBrbm93IHRoYXQgYWxsIG9mIHRoZSBtb2R1bGVzIGV4aXN0IGFib3ZlIHRoaXMsIHNvIHdlJ3JlIHNhZmVcbiAgdmFyIHNlbGVjdDIgPSBTMi5yZXF1aXJlKCdqcXVlcnkuc2VsZWN0MicpO1xuXG4gIC8vIEhvbGQgdGhlIEFNRCBtb2R1bGUgcmVmZXJlbmNlcyBvbiB0aGUgalF1ZXJ5IGZ1bmN0aW9uIHRoYXQgd2FzIGp1c3QgbG9hZGVkXG4gIC8vIFRoaXMgYWxsb3dzIFNlbGVjdDIgdG8gdXNlIHRoZSBpbnRlcm5hbCBsb2FkZXIgb3V0c2lkZSBvZiB0aGlzIGZpbGUsIHN1Y2hcbiAgLy8gYXMgaW4gdGhlIGxhbmd1YWdlIGZpbGVzLlxuICBqUXVlcnkuZm4uc2VsZWN0Mi5hbWQgPSBTMjtcblxuICAvLyBSZXR1cm4gdGhlIFNlbGVjdDIgaW5zdGFuY2UgZm9yIGFueW9uZSB3aG8gaXMgaW1wb3J0aW5nIGl0LlxuICByZXR1cm4gc2VsZWN0Mjtcbn0pKTtcblxuLypcbiB0YWJsZUV4cG9ydC5qcXVlcnkucGx1Z2luXG5cbiBWZXJzaW9uIDEuOS44XG5cbiBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxNyBoaHVyeiwgaHR0cHM6Ly9naXRodWIuY29tL2hodXJ6XG5cbiBPcmlnaW5hbCBXb3JrIENvcHlyaWdodCAoYykgMjAxNCBHaXJpIFJhalxuXG4gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4qL1xudmFyICRqc2NvbXA9JGpzY29tcHx8e307JGpzY29tcC5zY29wZT17fTskanNjb21wLmZpbmRJbnRlcm5hbD1mdW5jdGlvbihjLGYsdSl7YyBpbnN0YW5jZW9mIFN0cmluZyYmKGM9U3RyaW5nKGMpKTtmb3IodmFyIEM9Yy5sZW5ndGgsRD0wO0Q8QztEKyspe3ZhciBPPWNbRF07aWYoZi5jYWxsKHUsTyxELGMpKXJldHVybntpOkQsdjpPfX1yZXR1cm57aTotMSx2OnZvaWQgMH19OyRqc2NvbXAuQVNTVU1FX0VTNT0hMTskanNjb21wLkFTU1VNRV9OT19OQVRJVkVfTUFQPSExOyRqc2NvbXAuQVNTVU1FX05PX05BVElWRV9TRVQ9ITE7JGpzY29tcC5kZWZpbmVQcm9wZXJ0eT0kanNjb21wLkFTU1VNRV9FUzV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihjLGYsdSl7YyE9QXJyYXkucHJvdG90eXBlJiZjIT1PYmplY3QucHJvdG90eXBlJiYoY1tmXT11LnZhbHVlKX07XG4kanNjb21wLmdldEdsb2JhbD1mdW5jdGlvbihjKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3c9PT1jP2M6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCYmbnVsbCE9Z2xvYmFsP2dsb2JhbDpjfTskanNjb21wLmdsb2JhbD0kanNjb21wLmdldEdsb2JhbCh0aGlzKTskanNjb21wLnBvbHlmaWxsPWZ1bmN0aW9uKGMsZix1LEMpe2lmKGYpe3U9JGpzY29tcC5nbG9iYWw7Yz1jLnNwbGl0KFwiLlwiKTtmb3IoQz0wO0M8Yy5sZW5ndGgtMTtDKyspe3ZhciBEPWNbQ107RCBpbiB1fHwodVtEXT17fSk7dT11W0RdfWM9Y1tjLmxlbmd0aC0xXTtDPXVbY107Zj1mKEMpO2YhPUMmJm51bGwhPWYmJiRqc2NvbXAuZGVmaW5lUHJvcGVydHkodSxjLHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6Zn0pfX07XG4kanNjb21wLnBvbHlmaWxsKFwiQXJyYXkucHJvdG90eXBlLmZpbmRcIixmdW5jdGlvbihjKXtyZXR1cm4gYz9jOmZ1bmN0aW9uKGMsdSl7cmV0dXJuICRqc2NvbXAuZmluZEludGVybmFsKHRoaXMsYyx1KS52fX0sXCJlczZcIixcImVzM1wiKTtcbihmdW5jdGlvbihjKXtjLmZuLmV4dGVuZCh7dGFibGVFeHBvcnQ6ZnVuY3Rpb24oZil7ZnVuY3Rpb24gdShiKXt2YXIgZT1bXTtDKGIsXCJ0Ym9keVwiKS5lYWNoKGZ1bmN0aW9uKCl7ZS5wdXNoLmFwcGx5KGUsRChjKHRoaXMpLGEudGJvZHlTZWxlY3RvcikpfSk7YS50Zm9vdFNlbGVjdG9yLmxlbmd0aCYmQyhiLFwidGZvb3RcIikuZWFjaChmdW5jdGlvbigpe2UucHVzaC5hcHBseShlLEQoYyh0aGlzKSxhLnRmb290U2VsZWN0b3IpKX0pO3JldHVybiBlfWZ1bmN0aW9uIEMoYixlKXt2YXIgYT1iLnBhcmVudHMoXCJ0YWJsZVwiKS5sZW5ndGg7cmV0dXJuIGIuZmluZChlKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4gYyh0aGlzKS5jbG9zZXN0KFwidGFibGVcIikucGFyZW50cyhcInRhYmxlXCIpLmxlbmd0aD09PWF9KX1mdW5jdGlvbiBEKGIsZSl7cmV0dXJuIGIuZmluZChlKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4gMD09PWModGhpcykuZmluZChcInRhYmxlXCIpLmxlbmd0aCYmMT09PWModGhpcykucGFyZW50cyhcInRhYmxlXCIpLmxlbmd0aH0pfVxuZnVuY3Rpb24gTyhiKXt2YXIgZT1bXTtjKGIpLmZpbmQoXCJ0aGVhZFwiKS5maXJzdCgpLmZpbmQoXCJ0aFwiKS5lYWNoKGZ1bmN0aW9uKGIsYSl7dm9pZCAwIT09YyhhKS5hdHRyKFwiZGF0YS1maWVsZFwiKT9lW2JdPWMoYSkuYXR0cihcImRhdGEtZmllbGRcIik6ZVtiXT1iLnRvU3RyaW5nKCl9KTtyZXR1cm4gZX1mdW5jdGlvbiBQKGIpe3ZhciBlPVwidW5kZWZpbmVkXCIhPT10eXBlb2YgYlswXS5jZWxsSW5kZXgsYT1cInVuZGVmaW5lZFwiIT09dHlwZW9mIGJbMF0ucm93SW5kZXgscj1lfHxhP3lhKGIpOmIuaXMoXCI6dmlzaWJsZVwiKSxnPWIuZGF0YShcInRhYmxlZXhwb3J0LWRpc3BsYXlcIik7ZSYmXCJub25lXCIhPWcmJlwiYWx3YXlzXCIhPWcmJihiPWMoYlswXS5wYXJlbnROb2RlKSxhPVwidW5kZWZpbmVkXCIhPT10eXBlb2YgYlswXS5yb3dJbmRleCxnPWIuZGF0YShcInRhYmxlZXhwb3J0LWRpc3BsYXlcIikpO2EmJlwibm9uZVwiIT1nJiZcImFsd2F5c1wiIT1nJiYoZz1iLmNsb3Nlc3QoXCJ0YWJsZVwiKS5kYXRhKFwidGFibGVleHBvcnQtZGlzcGxheVwiKSk7XG5yZXR1cm5cIm5vbmVcIiE9PWcmJigxPT1yfHxcImFsd2F5c1wiPT1nKX1mdW5jdGlvbiB5YShiKXt2YXIgZT1bXTtSJiYoZT1LLmZpbHRlcihmdW5jdGlvbigpe3ZhciBlPSExO3RoaXMubm9kZVR5cGU9PWJbMF0ubm9kZVR5cGUmJihcInVuZGVmaW5lZFwiIT09dHlwZW9mIHRoaXMucm93SW5kZXgmJnRoaXMucm93SW5kZXg9PWJbMF0ucm93SW5kZXg/ZT0hMDpcInVuZGVmaW5lZFwiIT09dHlwZW9mIHRoaXMuY2VsbEluZGV4JiZ0aGlzLmNlbGxJbmRleD09YlswXS5jZWxsSW5kZXgmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgdGhpcy5wYXJlbnROb2RlLnJvd0luZGV4JiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGJbMF0ucGFyZW50Tm9kZS5yb3dJbmRleCYmdGhpcy5wYXJlbnROb2RlLnJvd0luZGV4PT1iWzBdLnBhcmVudE5vZGUucm93SW5kZXgmJihlPSEwKSk7cmV0dXJuIGV9KSk7cmV0dXJuIDA9PVJ8fDA9PWUubGVuZ3RofWZ1bmN0aW9uIHphKGIsZSxrKXt2YXIgcj0hMTtQKGIpPzA8YS5pZ25vcmVDb2x1bW4ubGVuZ3RoJiZcbigtMSE9Yy5pbkFycmF5KGssYS5pZ25vcmVDb2x1bW4pfHwtMSE9Yy5pbkFycmF5KGstZSxhLmlnbm9yZUNvbHVtbil8fFEubGVuZ3RoPmsmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBRW2tdJiYtMSE9Yy5pbkFycmF5KFFba10sYS5pZ25vcmVDb2x1bW4pKSYmKHI9ITApOnI9ITA7cmV0dXJuIHJ9ZnVuY3Rpb24gQihiLGUsayxyLGcpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKXt2YXIgaD0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5vbklnbm9yZVJvdyYmKGg9YS5vbklnbm9yZVJvdyhjKGIpLGspKTtpZighMT09PWgmJi0xPT1jLmluQXJyYXkoayxhLmlnbm9yZVJvdykmJi0xPT1jLmluQXJyYXkoay1yLGEuaWdub3JlUm93KSYmUChjKGIpKSl7dmFyIHg9YyhiKS5maW5kKGUpLHE9MDt4LmVhY2goZnVuY3Rpb24oYil7dmFyIGU9Yyh0aGlzKSxhLGg9cGFyc2VJbnQodGhpcy5nZXRBdHRyaWJ1dGUoXCJjb2xzcGFuXCIpKSxyPXBhcnNlSW50KHRoaXMuZ2V0QXR0cmlidXRlKFwicm93c3BhblwiKSk7XG5HLmZvckVhY2goZnVuY3Rpb24oYil7aWYoaz49Yi5zLnImJms8PWIuZS5yJiZxPj1iLnMuYyYmcTw9Yi5lLmMpZm9yKGE9MDthPD1iLmUuYy1iLnMuYzsrK2EpZyhudWxsLGsscSsrKX0pO2lmKCExPT09emEoZSx4Lmxlbmd0aCxiKSl7aWYocnx8aCloPWh8fDEsRy5wdXNoKHtzOntyOmssYzpxfSxlOntyOmsrKHJ8fDEpLTEsYzpxK2gtMX19KTtnKHRoaXMsayxxKyspfWlmKGgpZm9yKGE9MDthPGgtMTsrK2EpZyhudWxsLGsscSsrKX0pO0cuZm9yRWFjaChmdW5jdGlvbihiKXtpZihrPj1iLnMuciYmazw9Yi5lLnImJnE+PWIucy5jJiZxPD1iLmUuYylmb3IoWT0wO1k8PWIuZS5jLWIucy5jOysrWSlnKG51bGwsayxxKyspfSl9fX1mdW5jdGlvbiBsYShiLGUpeyEwPT09YS5jb25zb2xlTG9nJiZjb25zb2xlLmxvZyhiLm91dHB1dCgpKTtpZihcInN0cmluZ1wiPT09YS5vdXRwdXRNb2RlKXJldHVybiBiLm91dHB1dCgpO2lmKFwiYmFzZTY0XCI9PT1hLm91dHB1dE1vZGUpcmV0dXJuIEwoYi5vdXRwdXQoKSk7XG5pZihcIndpbmRvd1wiPT09YS5vdXRwdXRNb2RlKXdpbmRvdy5VUkw9d2luZG93LlVSTHx8d2luZG93LndlYmtpdFVSTCx3aW5kb3cub3Blbih3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChiLm91dHB1dChcImJsb2JcIikpKTtlbHNlIHRyeXt2YXIgaz1iLm91dHB1dChcImJsb2JcIik7c2F2ZUFzKGssYS5maWxlTmFtZStcIi5wZGZcIil9Y2F0Y2gocil7SChhLmZpbGVOYW1lK1wiLnBkZlwiLFwiZGF0YTphcHBsaWNhdGlvbi9wZGZcIisoZT9cIlwiOlwiO2Jhc2U2NFwiKStcIixcIixlP2Iub3V0cHV0KFwiYmxvYlwiKTpiLm91dHB1dCgpKX19ZnVuY3Rpb24gbWEoYixlLGEpe3ZhciBrPTA7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhJiYoaz1hLmNvbHNwYW4pO2lmKDA8PWspe2Zvcih2YXIgZz1iLndpZHRoLGM9Yi50ZXh0UG9zLngseD1lLnRhYmxlLmNvbHVtbnMuaW5kZXhPZihlLmNvbHVtbikscT0xO3E8aztxKyspZys9ZS50YWJsZS5jb2x1bW5zW3grcV0ud2lkdGg7MTxrJiYoXCJyaWdodFwiPT09Yi5zdHlsZXMuaGFsaWduP1xuYz1iLnRleHRQb3MueCtnLWIud2lkdGg6XCJjZW50ZXJcIj09PWIuc3R5bGVzLmhhbGlnbiYmKGM9Yi50ZXh0UG9zLngrKGctYi53aWR0aCkvMikpO2Iud2lkdGg9ZztiLnRleHRQb3MueD1jO1widW5kZWZpbmVkXCIhPT10eXBlb2YgYSYmMTxhLnJvd3NwYW4mJihiLmhlaWdodCo9YS5yb3dzcGFuKTtpZihcIm1pZGRsZVwiPT09Yi5zdHlsZXMudmFsaWdufHxcImJvdHRvbVwiPT09Yi5zdHlsZXMudmFsaWduKWE9KFwic3RyaW5nXCI9PT10eXBlb2YgYi50ZXh0P2IudGV4dC5zcGxpdCgvXFxyXFxufFxccnxcXG4vZyk6Yi50ZXh0KS5sZW5ndGh8fDEsMjxhJiYoYi50ZXh0UG9zLnktPSgyLTEuMTUpLzIqZS5yb3cuc3R5bGVzLmZvbnRTaXplKihhLTIpLzMpO3JldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIG5hKGIsYSxrKXtcInVuZGVmaW5lZFwiIT10eXBlb2Ygay5pbWFnZXMmJmEuZWFjaChmdW5jdGlvbigpe3ZhciBhPWModGhpcykuY2hpbGRyZW4oKTtpZihjKHRoaXMpLmlzKFwiaW1nXCIpKXt2YXIgZT1vYSh0aGlzLnNyYyk7XG5rLmltYWdlc1tlXT17dXJsOnRoaXMuc3JjLHNyYzp0aGlzLnNyY319XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEmJjA8YS5sZW5ndGgmJm5hKGIsYSxrKX0pfWZ1bmN0aW9uIEFhKGIsYSl7ZnVuY3Rpb24gZShiKXtpZihiLnVybCl7dmFyIGU9bmV3IEltYWdlO2c9KytoO2UuY3Jvc3NPcmlnaW49XCJBbm9ueW1vdXNcIjtlLm9uZXJyb3I9ZS5vbmxvYWQ9ZnVuY3Rpb24oKXtpZihlLmNvbXBsZXRlJiYoMD09PWUuc3JjLmluZGV4T2YoXCJkYXRhOmltYWdlL1wiKSYmKGUud2lkdGg9Yi53aWR0aHx8ZS53aWR0aHx8MCxlLmhlaWdodD1iLmhlaWdodHx8ZS5oZWlnaHR8fDApLGUud2lkdGgrZS5oZWlnaHQpKXt2YXIgaz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLGM9ay5nZXRDb250ZXh0KFwiMmRcIik7ay53aWR0aD1lLndpZHRoO2suaGVpZ2h0PWUuaGVpZ2h0O2MuZHJhd0ltYWdlKGUsMCwwKTtiLnNyYz1rLnRvRGF0YVVSTChcImltYWdlL2pwZWdcIil9LS1ofHxhKGcpfTtlLnNyYz1iLnVybH19XG52YXIgYyxnPTAsaD0wO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBiLmltYWdlcylmb3IoYyBpbiBiLmltYWdlcyliLmltYWdlcy5oYXNPd25Qcm9wZXJ0eShjKSYmZShiLmltYWdlc1tjXSk7KGI9aCl8fChhKGcpLGI9dm9pZCAwKTtyZXR1cm4gYn1mdW5jdGlvbiBwYShiLGUsayl7ZS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9Yyh0aGlzKS5jaGlsZHJlbigpLGc9MDtpZihjKHRoaXMpLmlzKFwiZGl2XCIpKXt2YXIgaD1aKE0odGhpcyxcImJhY2tncm91bmQtY29sb3JcIiksWzI1NSwyNTUsMjU1XSkseD1aKE0odGhpcyxcImJvcmRlci10b3AtY29sb3JcIiksWzAsMCwwXSkscT1hYSh0aGlzLFwiYm9yZGVyLXRvcC13aWR0aFwiLGEuanNwZGYudW5pdCksZD10aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGY9dGhpcy5vZmZzZXRMZWZ0KmsuZHc7Zz10aGlzLm9mZnNldFRvcCprLmRoO3ZhciBsPWQud2lkdGgqay5kdztkPWQuaGVpZ2h0KmsuZGg7ay5kb2Muc2V0RHJhd0NvbG9yLmFwcGx5KHZvaWQgMCxcbngpO2suZG9jLnNldEZpbGxDb2xvci5hcHBseSh2b2lkIDAsaCk7ay5kb2Muc2V0TGluZVdpZHRoKHEpO2suZG9jLnJlY3QoYi54K2YsYi55K2csbCxkLHE/XCJGRFwiOlwiRlwiKX1lbHNlIGlmKGModGhpcykuaXMoXCJpbWdcIikmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBrLmltYWdlcyYmKGg9b2EodGhpcy5zcmMpLGg9ay5pbWFnZXNbaF0sXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGgpKXt4PWIud2lkdGgvYi5oZWlnaHQ7cT10aGlzLndpZHRoL3RoaXMuaGVpZ2h0O2Y9Yi53aWR0aDtsPWIuaGVpZ2h0O2Q9MTkuMDQ5OTc2LzI1LjQ7cTw9eD8obD1NYXRoLm1pbihiLmhlaWdodCx0aGlzLmhlaWdodCksZj10aGlzLndpZHRoKmwvdGhpcy5oZWlnaHQpOnE+eCYmKGY9TWF0aC5taW4oYi53aWR0aCx0aGlzLndpZHRoKSxsPXRoaXMuaGVpZ2h0KmYvdGhpcy53aWR0aCk7Zio9ZDtsKj1kO2w8Yi5oZWlnaHQmJihnPShiLmhlaWdodC1sKS8yKTt0cnl7ay5kb2MuYWRkSW1hZ2UoaC5zcmMsYi50ZXh0UG9zLngsXG5iLnkrZyxmLGwpfWNhdGNoKEVhKXt9Yi50ZXh0UG9zLngrPWZ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUmJjA8ZS5sZW5ndGgmJnBhKGIsZSxrKX0pfWZ1bmN0aW9uIHFhKGIsZSxhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5vbkF1dG90YWJsZVRleHQpYS5vbkF1dG90YWJsZVRleHQoYS5kb2MsYixlKTtlbHNle3ZhciBrPWIudGV4dFBvcy54LGc9Yi50ZXh0UG9zLnksaD17aGFsaWduOmIuc3R5bGVzLmhhbGlnbix2YWxpZ246Yi5zdHlsZXMudmFsaWdufTtpZihlLmxlbmd0aCl7Zm9yKGU9ZVswXTtlLnByZXZpb3VzU2libGluZzspZT1lLnByZXZpb3VzU2libGluZztmb3IodmFyIHg9ITEscT0hMTtlOyl7dmFyIGQ9ZS5pbm5lclRleHR8fGUudGV4dENvbnRlbnR8fFwiXCI7ZD0oZC5sZW5ndGgmJlwiIFwiPT1kWzBdP1wiIFwiOlwiXCIpK2MudHJpbShkKSsoMTxkLmxlbmd0aCYmXCIgXCI9PWRbZC5sZW5ndGgtMV0/XCIgXCI6XCJcIik7YyhlKS5pcyhcImJyXCIpJiYoaz1iLnRleHRQb3MueCxnKz1hLmRvYy5pbnRlcm5hbC5nZXRGb250U2l6ZSgpKTtcbmMoZSkuaXMoXCJiXCIpP3g9ITA6YyhlKS5pcyhcImlcIikmJihxPSEwKTsoeHx8cSkmJmEuZG9jLnNldEZvbnRUeXBlKHgmJnE/XCJib2xkaXRhbGljXCI6eD9cImJvbGRcIjpcIml0YWxpY1wiKTt2YXIgZj1hLmRvYy5nZXRTdHJpbmdVbml0V2lkdGgoZCkqYS5kb2MuaW50ZXJuYWwuZ2V0Rm9udFNpemUoKTtpZihmKXtpZihcImxpbmVicmVha1wiPT09Yi5zdHlsZXMub3ZlcmZsb3cmJms+Yi50ZXh0UG9zLngmJmsrZj5iLnRleHRQb3MueCtiLndpZHRoKXtpZigwPD1cIi4sISUqOzo9LVwiLmluZGV4T2YoZC5jaGFyQXQoMCkpKXt2YXIgbD1kLmNoYXJBdCgwKTtmPWEuZG9jLmdldFN0cmluZ1VuaXRXaWR0aChsKSphLmRvYy5pbnRlcm5hbC5nZXRGb250U2l6ZSgpO2srZjw9Yi50ZXh0UG9zLngrYi53aWR0aCYmKGEuZG9jLmF1dG9UYWJsZVRleHQobCxrLGcsaCksZD1kLnN1YnN0cmluZygxLGQubGVuZ3RoKSk7Zj1hLmRvYy5nZXRTdHJpbmdVbml0V2lkdGgoZCkqYS5kb2MuaW50ZXJuYWwuZ2V0Rm9udFNpemUoKX1rPVxuYi50ZXh0UG9zLng7Zys9YS5kb2MuaW50ZXJuYWwuZ2V0Rm9udFNpemUoKX1mb3IoO2QubGVuZ3RoJiZrK2Y+Yi50ZXh0UG9zLngrYi53aWR0aDspZD1kLnN1YnN0cmluZygwLGQubGVuZ3RoLTEpLGY9YS5kb2MuZ2V0U3RyaW5nVW5pdFdpZHRoKGQpKmEuZG9jLmludGVybmFsLmdldEZvbnRTaXplKCk7YS5kb2MuYXV0b1RhYmxlVGV4dChkLGssZyxoKTtrKz1mfWlmKHh8fHEpYyhlKS5pcyhcImJcIik/eD0hMTpjKGUpLmlzKFwiaVwiKSYmKHE9ITEpLGEuZG9jLnNldEZvbnRUeXBlKHh8fHE/eD9cImJvbGRcIjpcIml0YWxpY1wiOlwibm9ybWFsXCIpO2U9ZS5uZXh0U2libGluZ31iLnRleHRQb3MueD1rO2IudGV4dFBvcy55PWd9ZWxzZSBhLmRvYy5hdXRvVGFibGVUZXh0KGIudGV4dCxiLnRleHRQb3MueCxiLnRleHRQb3MueSxoKX19ZnVuY3Rpb24gYmEoYixhLGMpe3JldHVybiBiLnJlcGxhY2UobmV3IFJlZ0V4cChhLnJlcGxhY2UoLyhbLiorP149IToke30oKXxcXFtcXF1cXC9cXFxcXSkvZyxcIlxcXFwkMVwiKSxcblwiZ1wiKSxjKX1mdW5jdGlvbiBlYShiKXtiPWJhKGJ8fFwiMFwiLGEubnVtYmVycy5odG1sLnRob3VzYW5kc1NlcGFyYXRvcixcIlwiKTtiPWJhKGIsYS5udW1iZXJzLmh0bWwuZGVjaW1hbE1hcmssXCIuXCIpO3JldHVyblwibnVtYmVyXCI9PT10eXBlb2YgYnx8ITEhPT1qUXVlcnkuaXNOdW1lcmljKGIpP2I6ITF9ZnVuY3Rpb24gQmEoYil7LTE8Yi5pbmRleE9mKFwiJVwiKT8oYj1lYShiLnJlcGxhY2UoLyUvZyxcIlwiKSksITEhPT1iJiYoYi89MTAwKSk6Yj0hMTtyZXR1cm4gYn1mdW5jdGlvbiB6KGIsZSxrKXt2YXIgcj1cIlwiO2lmKG51bGwhPT1iKXt2YXIgZz1jKGIpO2lmKGdbMF0uaGFzQXR0cmlidXRlKFwiZGF0YS10YWJsZWV4cG9ydC12YWx1ZVwiKSl2YXIgaD0oaD1nLmRhdGEoXCJ0YWJsZWV4cG9ydC12YWx1ZVwiKSk/aCtcIlwiOlwiXCI7ZWxzZSBpZihoPWcuaHRtbCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLm9uQ2VsbEh0bWxEYXRhKWg9YS5vbkNlbGxIdG1sRGF0YShnLGUsayxoKTtlbHNlIGlmKFwiXCIhPWgpe3ZhciBkPVxuYy5wYXJzZUhUTUwoaCksZj0wLGw9MDtoPVwiXCI7Yy5lYWNoKGQsZnVuY3Rpb24oKXtpZihjKHRoaXMpLmlzKFwiaW5wdXRcIikpaCs9Zy5maW5kKFwiaW5wdXRcIikuZXEoZisrKS52YWwoKTtlbHNlIGlmKGModGhpcykuaXMoXCJzZWxlY3RcIikpaCs9Zy5maW5kKFwic2VsZWN0IG9wdGlvbjpzZWxlY3RlZFwiKS5lcShsKyspLnRleHQoKTtlbHNlIGlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYyh0aGlzKS5odG1sKCkpaCs9Yyh0aGlzKS50ZXh0KCk7ZWxzZSBpZih2b2lkIDA9PT1qUXVlcnkoKS5ib290c3RyYXBUYWJsZXx8ITAhPT1jKHRoaXMpLmhhc0NsYXNzKFwiZmlsdGVyQ29udHJvbFwiKSYmMD09PWMoYikucGFyZW50cyhcIi5kZXRhaWwtdmlld1wiKS5sZW5ndGgpaCs9Yyh0aGlzKS5odG1sKCl9KX1pZighMD09PWEuaHRtbENvbnRlbnQpcj1jLnRyaW0oaCk7ZWxzZSBpZihoJiZcIlwiIT1oKWlmKFwiXCIhPWMoYikuZGF0YShcInRhYmxlZXhwb3J0LWNlbGxmb3JtYXRcIikpe3ZhciBuPWgucmVwbGFjZSgvXFxuL2csXG5cIlxcdTIwMjhcIikucmVwbGFjZSgvPGJyXFxzKltcXC9dPz4vZ2ksXCJcXHUyMDYwXCIpLG09YyhcIjxkaXYvPlwiKS5odG1sKG4pLmNvbnRlbnRzKCk7ZD0hMTtuPVwiXCI7Yy5lYWNoKG0udGV4dCgpLnNwbGl0KFwiXFx1MjAyOFwiKSxmdW5jdGlvbihiLGEpezA8YiYmKG4rPVwiIFwiKTtuKz1jLnRyaW0oYSl9KTtjLmVhY2gobi5zcGxpdChcIlxcdTIwNjBcIiksZnVuY3Rpb24oYixhKXswPGImJihyKz1cIlxcblwiKTtyKz1jLnRyaW0oYSkucmVwbGFjZSgvXFx1MDBBRC9nLFwiXCIpfSk7aWYoXCJqc29uXCI9PWEudHlwZXx8XCJleGNlbFwiPT09YS50eXBlJiZcInhtbHNzXCI9PT1hLmV4Y2VsRmlsZUZvcm1hdHx8ITE9PT1hLm51bWJlcnMub3V0cHV0KWQ9ZWEociksITEhPT1kJiYocj1OdW1iZXIoZCkpO2Vsc2UgaWYoYS5udW1iZXJzLmh0bWwuZGVjaW1hbE1hcmshPWEubnVtYmVycy5vdXRwdXQuZGVjaW1hbE1hcmt8fGEubnVtYmVycy5odG1sLnRob3VzYW5kc1NlcGFyYXRvciE9YS5udW1iZXJzLm91dHB1dC50aG91c2FuZHNTZXBhcmF0b3IpaWYoZD1cbmVhKHIpLCExIT09ZCl7bT0oXCJcIitkLnN1YnN0cigwPmQ/MTowKSkuc3BsaXQoXCIuXCIpOzE9PW0ubGVuZ3RoJiYobVsxXT1cIlwiKTt2YXIgcD0zPG1bMF0ubGVuZ3RoP21bMF0ubGVuZ3RoJTM6MDtyPSgwPmQ/XCItXCI6XCJcIikrKGEubnVtYmVycy5vdXRwdXQudGhvdXNhbmRzU2VwYXJhdG9yPyhwP21bMF0uc3Vic3RyKDAscCkrYS5udW1iZXJzLm91dHB1dC50aG91c2FuZHNTZXBhcmF0b3I6XCJcIikrbVswXS5zdWJzdHIocCkucmVwbGFjZSgvKFxcZHszfSkoPz1cXGQpL2csXCIkMVwiK2EubnVtYmVycy5vdXRwdXQudGhvdXNhbmRzU2VwYXJhdG9yKTptWzBdKSsobVsxXS5sZW5ndGg/YS5udW1iZXJzLm91dHB1dC5kZWNpbWFsTWFyayttWzFdOlwiXCIpfX1lbHNlIHI9aDshMD09PWEuZXNjYXBlJiYocj1lc2NhcGUocikpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhLm9uQ2VsbERhdGEmJihyPWEub25DZWxsRGF0YShnLGUsayxyKSl9cmV0dXJuIHJ9ZnVuY3Rpb24gQ2EoYixhLGMpe3JldHVybiBhK1wiLVwiK2MudG9Mb3dlckNhc2UoKX1cbmZ1bmN0aW9uIFooYixhKXsoYj0vXnJnYlxcKChcXGR7MSwzfSksXFxzKihcXGR7MSwzfSksXFxzKihcXGR7MSwzfSlcXCkkLy5leGVjKGIpKSYmKGE9W3BhcnNlSW50KGJbMV0pLHBhcnNlSW50KGJbMl0pLHBhcnNlSW50KGJbM10pXSk7cmV0dXJuIGF9ZnVuY3Rpb24gcmEoYil7dmFyIGE9TShiLFwidGV4dC1hbGlnblwiKSxrPU0oYixcImZvbnQtd2VpZ2h0XCIpLHI9TShiLFwiZm9udC1zdHlsZVwiKSxnPVwiXCI7XCJzdGFydFwiPT1hJiYoYT1cInJ0bFwiPT1NKGIsXCJkaXJlY3Rpb25cIik/XCJyaWdodFwiOlwibGVmdFwiKTs3MDA8PWsmJihnPVwiYm9sZFwiKTtcIml0YWxpY1wiPT1yJiYoZys9cik7XCJcIj09PWcmJihnPVwibm9ybWFsXCIpO2E9e3N0eWxlOnthbGlnbjphLGJjb2xvcjpaKE0oYixcImJhY2tncm91bmQtY29sb3JcIiksWzI1NSwyNTUsMjU1XSksY29sb3I6WihNKGIsXCJjb2xvclwiKSxbMCwwLDBdKSxmc3R5bGU6Z30sY29sc3BhbjpwYXJzZUludChjKGIpLmF0dHIoXCJjb2xzcGFuXCIpKXx8MCxyb3dzcGFuOnBhcnNlSW50KGMoYikuYXR0cihcInJvd3NwYW5cIikpfHxcbjB9O251bGwhPT1iJiYoYj1iLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGEucmVjdD17d2lkdGg6Yi53aWR0aCxoZWlnaHQ6Yi5oZWlnaHR9KTtyZXR1cm4gYX1mdW5jdGlvbiBNKGIsYSl7dHJ5e3JldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZT8oYT1hLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pLyxDYSksd2luZG93LmdldENvbXB1dGVkU3R5bGUoYixudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKGEpKTpiLmN1cnJlbnRTdHlsZT9iLmN1cnJlbnRTdHlsZVthXTpiLnN0eWxlW2FdfWNhdGNoKGspe31yZXR1cm5cIlwifWZ1bmN0aW9uIGFhKGIsYSxjKXthPU0oYixhKS5tYXRjaCgvXFxkKy8pO2lmKG51bGwhPT1hKXthPWFbMF07Yj1iLnBhcmVudEVsZW1lbnQ7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtlLnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCI7ZS5zdHlsZS52aXNpYmlsaXR5PVwiaGlkZGVuXCI7Yi5hcHBlbmRDaGlsZChlKTtlLnN0eWxlLndpZHRoPTEwMCtjO2M9MTAwL1xuZS5vZmZzZXRXaWR0aDtiLnJlbW92ZUNoaWxkKGUpO3JldHVybiBhKmN9cmV0dXJuIDB9ZnVuY3Rpb24gZmEoKXtpZighKHRoaXMgaW5zdGFuY2VvZiBmYSkpcmV0dXJuIG5ldyBmYTt0aGlzLlNoZWV0TmFtZXM9W107dGhpcy5TaGVldHM9e319ZnVuY3Rpb24gc2EoYil7Zm9yKHZhciBhPW5ldyBBcnJheUJ1ZmZlcihiLmxlbmd0aCksYz1uZXcgVWludDhBcnJheShhKSxkPTA7ZCE9Yi5sZW5ndGg7KytkKWNbZF09Yi5jaGFyQ29kZUF0KGQpJjI1NTtyZXR1cm4gYX1mdW5jdGlvbiBEYShiKXtmb3IodmFyIGE9e30sYz17czp7YzoxRTcscjoxRTd9LGU6e2M6MCxyOjB9fSxkPTA7ZCE9Yi5sZW5ndGg7KytkKWZvcih2YXIgZz0wO2chPWJbZF0ubGVuZ3RoOysrZyl7Yy5zLnI+ZCYmKGMucy5yPWQpO2Mucy5jPmcmJihjLnMuYz1nKTtjLmUucjxkJiYoYy5lLnI9ZCk7Yy5lLmM8ZyYmKGMuZS5jPWcpO3ZhciBoPXt2OmJbZF1bZ119O2lmKG51bGwhPT1oLnYpe3ZhciBmPVhMU1gudXRpbHMuZW5jb2RlX2NlbGwoe2M6ZyxcbnI6ZH0pO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgaC52KWgudD1cIm5cIjtlbHNlIGlmKFwiYm9vbGVhblwiPT09dHlwZW9mIGgudiloLnQ9XCJiXCI7ZWxzZSBpZihoLnYgaW5zdGFuY2VvZiBEYXRlKXtoLnQ9XCJuXCI7aC56PVhMU1guU1NGLl90YWJsZVsxNF07dmFyIHE9aDt2YXIgbD0oRGF0ZS5wYXJzZShoLnYpLW5ldyBEYXRlKERhdGUuVVRDKDE4OTksMTEsMzApKSkvODY0RTU7cS52PWx9ZWxzZSBoLnQ9XCJzXCI7YVtmXT1ofX0xRTc+Yy5zLmMmJihhW1wiIXJlZlwiXT1YTFNYLnV0aWxzLmVuY29kZV9yYW5nZShjKSk7cmV0dXJuIGF9ZnVuY3Rpb24gb2EoYil7dmFyIGE9MCxjO2lmKDA9PT1iLmxlbmd0aClyZXR1cm4gYTt2YXIgZD0wO2ZvcihjPWIubGVuZ3RoO2Q8YztkKyspe3ZhciBnPWIuY2hhckNvZGVBdChkKTthPShhPDw1KS1hK2c7YXw9MH1yZXR1cm4gYX1mdW5jdGlvbiBIKGIsYSxjKXt2YXIgZT13aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtpZighMSE9PWImJndpbmRvdy5uYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYil3aW5kb3cubmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IobmV3IEJsb2IoW2NdKSxcbmIpO2Vsc2UgaWYoITEhPT1iJiYoMDxlLmluZGV4T2YoXCJNU0lFIFwiKXx8ZS5tYXRjaCgvVHJpZGVudC4qcnZcXDoxMVxcLi8pKSl7aWYoYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpKWRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSksYS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLFwiZGlzcGxheTpub25lXCIpLGEuY29udGVudERvY3VtZW50Lm9wZW4oXCJ0eHQvaHRtbFwiLFwicmVwbGFjZVwiKSxhLmNvbnRlbnREb2N1bWVudC53cml0ZShjKSxhLmNvbnRlbnREb2N1bWVudC5jbG9zZSgpLGEuZm9jdXMoKSxhLmNvbnRlbnREb2N1bWVudC5leGVjQ29tbWFuZChcIlNhdmVBc1wiLCEwLGIpLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYSl9ZWxzZXt2YXIgZz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtpZihnKXt2YXIgaD1udWxsO2cuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjshMSE9PWI/Zy5kb3dubG9hZD1iOmcudGFyZ2V0PVwiX2JsYW5rXCI7XCJvYmplY3RcIj09dHlwZW9mIGM/KHdpbmRvdy5VUkw9XG53aW5kb3cuVVJMfHx3aW5kb3cud2Via2l0VVJMLGg9d2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYyksZy5ocmVmPWgpOjA8PWEudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiYmFzZTY0LFwiKT9nLmhyZWY9YStMKGMpOmcuaHJlZj1hK2VuY29kZVVSSUNvbXBvbmVudChjKTtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGcpO2lmKGRvY3VtZW50LmNyZWF0ZUV2ZW50KW51bGw9PT1jYSYmKGNhPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIikpLGNhLmluaXRFdmVudChcImNsaWNrXCIsITAsITEpLGcuZGlzcGF0Y2hFdmVudChjYSk7ZWxzZSBpZihkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdClnLmZpcmVFdmVudChcIm9uY2xpY2tcIik7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBnLm9uY2xpY2spZy5vbmNsaWNrKCk7c2V0VGltZW91dChmdW5jdGlvbigpe2gmJndpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKGgpO2RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZyl9LDEwMCl9fX1cbmZ1bmN0aW9uIEwoYSl7dmFyIGIsYz1cIlwiLGQ9MDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpe2E9YS5yZXBsYWNlKC9cXHgwZFxceDBhL2csXCJcXG5cIik7dmFyIGc9XCJcIjtmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgaD1hLmNoYXJDb2RlQXQoYik7MTI4Pmg/Zys9U3RyaW5nLmZyb21DaGFyQ29kZShoKTooMTI3PGgmJjIwNDg+aD9nKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGg+PjZ8MTkyKTooZys9U3RyaW5nLmZyb21DaGFyQ29kZShoPj4xMnwyMjQpLGcrPVN0cmluZy5mcm9tQ2hhckNvZGUoaD4+NiY2M3wxMjgpKSxnKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGgmNjN8MTI4KSl9YT1nfWZvcig7ZDxhLmxlbmd0aDspe3ZhciBmPWEuY2hhckNvZGVBdChkKyspO2c9YS5jaGFyQ29kZUF0KGQrKyk7Yj1hLmNoYXJDb2RlQXQoZCsrKTtoPWY+PjI7Zj0oZiYzKTw8NHxnPj40O3ZhciBxPShnJjE1KTw8MnxiPj42O3ZhciBsPWImNjM7aXNOYU4oZyk/cT1sPTY0OmlzTmFOKGIpJiYobD02NCk7Yz1jK1xuXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLmNoYXJBdChoKStcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCIuY2hhckF0KGYpK1wiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIi5jaGFyQXQocSkrXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLmNoYXJBdChsKX1yZXR1cm4gY312YXIgYT17Y29uc29sZUxvZzohMSxjc3ZFbmNsb3N1cmU6J1wiJyxjc3ZTZXBhcmF0b3I6XCIsXCIsY3N2VXNlQk9NOiEwLGRpc3BsYXlUYWJsZU5hbWU6ITEsZXNjYXBlOiExLGV4Y2VsRmlsZUZvcm1hdDpcInhsc2h0bWxcIixleGNlbFJUTDohMSxleGNlbHN0eWxlczpbXSxleHBvcnRIaWRkZW5DZWxsczohMSxmaWxlTmFtZTpcInRhYmxlRXhwb3J0XCIsXG5odG1sQ29udGVudDohMSxpZ25vcmVDb2x1bW46W10saWdub3JlUm93OltdLGpzb25TY29wZTpcImFsbFwiLGpzcGRmOntvcmllbnRhdGlvbjpcInBcIix1bml0OlwicHRcIixmb3JtYXQ6XCJhNFwiLG1hcmdpbnM6e2xlZnQ6MjAscmlnaHQ6MTAsdG9wOjEwLGJvdHRvbToxMH0sb25Eb2NDcmVhdGVkOm51bGwsYXV0b3RhYmxlOntzdHlsZXM6e2NlbGxQYWRkaW5nOjIscm93SGVpZ2h0OjEyLGZvbnRTaXplOjgsZmlsbENvbG9yOjI1NSx0ZXh0Q29sb3I6NTAsZm9udFN0eWxlOlwibm9ybWFsXCIsb3ZlcmZsb3c6XCJlbGxpcHNpemVcIixoYWxpZ246XCJsZWZ0XCIsdmFsaWduOlwibWlkZGxlXCJ9LGhlYWRlclN0eWxlczp7ZmlsbENvbG9yOls1Miw3Myw5NF0sdGV4dENvbG9yOjI1NSxmb250U3R5bGU6XCJib2xkXCIsaGFsaWduOlwiY2VudGVyXCJ9LGFsdGVybmF0ZVJvd1N0eWxlczp7ZmlsbENvbG9yOjI0NX0sdGFibGVFeHBvcnQ6e2RvYzpudWxsLG9uQWZ0ZXJBdXRvdGFibGU6bnVsbCxvbkJlZm9yZUF1dG90YWJsZTpudWxsLFxub25BdXRvdGFibGVUZXh0Om51bGwsb25UYWJsZTpudWxsLG91dHB1dEltYWdlczohMH19fSxudW1iZXJzOntodG1sOntkZWNpbWFsTWFyazpcIi5cIix0aG91c2FuZHNTZXBhcmF0b3I6XCIsXCJ9LG91dHB1dDp7ZGVjaW1hbE1hcms6XCIuXCIsdGhvdXNhbmRzU2VwYXJhdG9yOlwiLFwifX0sb25DZWxsRGF0YTpudWxsLG9uQ2VsbEh0bWxEYXRhOm51bGwsb25JZ25vcmVSb3c6bnVsbCxvbk1zb051bWJlckZvcm1hdDpudWxsLG91dHB1dE1vZGU6XCJmaWxlXCIscGRmbWFrZTp7ZW5hYmxlZDohMSxkb2NEZWZpbml0aW9uOntwYWdlT3JpZW50YXRpb246XCJwb3J0cmFpdFwiLGRlZmF1bHRTdHlsZTp7Zm9udDpcIlJvYm90b1wifX0sZm9udHM6e319LHRib2R5U2VsZWN0b3I6XCJ0clwiLHRmb290U2VsZWN0b3I6XCJ0clwiLHRoZWFkU2VsZWN0b3I6XCJ0clwiLHRhYmxlTmFtZTpcIlRhYmxlXCIsdHlwZTpcImNzdlwiLHdvcmtzaGVldE5hbWU6XCJcIn0sdj10aGlzLGNhPW51bGwscD1bXSx0PVtdLGw9MCxtPVwiXCIsUT1bXSxHPVtdLFxuSz1bXSxSPSExO2MuZXh0ZW5kKCEwLGEsZik7UT1PKHYpO2lmKFwiY3N2XCI9PWEudHlwZXx8XCJ0c3ZcIj09YS50eXBlfHxcInR4dFwiPT1hLnR5cGUpe3ZhciBJPVwiXCIsVT0wO0c9W107bD0wO3ZhciBoYT1mdW5jdGlvbihiLGUsayl7Yi5lYWNoKGZ1bmN0aW9uKCl7bT1cIlwiO0IodGhpcyxlLGwsaytiLmxlbmd0aCxmdW5jdGlvbihiLGMsZSl7dmFyIGc9bSxoPVwiXCI7aWYobnVsbCE9PWIpaWYoYj16KGIsYyxlKSxjPW51bGw9PT1ifHxcIlwiPT09Yj9cIlwiOmIudG9TdHJpbmcoKSxcInRzdlwiPT1hLnR5cGUpYiBpbnN0YW5jZW9mIERhdGUmJmIudG9Mb2NhbGVTdHJpbmcoKSxoPWJhKGMsXCJcXHRcIixcIiBcIik7ZWxzZSBpZihiIGluc3RhbmNlb2YgRGF0ZSloPWEuY3N2RW5jbG9zdXJlK2IudG9Mb2NhbGVTdHJpbmcoKSthLmNzdkVuY2xvc3VyZTtlbHNlIGlmKGg9YmEoYyxhLmNzdkVuY2xvc3VyZSxhLmNzdkVuY2xvc3VyZSthLmNzdkVuY2xvc3VyZSksMDw9aC5pbmRleE9mKGEuY3N2U2VwYXJhdG9yKXx8L1tcXHJcXG4gXS9nLnRlc3QoaCkpaD1cbmEuY3N2RW5jbG9zdXJlK2grYS5jc3ZFbmNsb3N1cmU7bT1nKyhoKyhcInRzdlwiPT1hLnR5cGU/XCJcXHRcIjphLmNzdlNlcGFyYXRvcikpfSk7bT1jLnRyaW0obSkuc3Vic3RyaW5nKDAsbS5sZW5ndGgtMSk7MDxtLmxlbmd0aCYmKDA8SS5sZW5ndGgmJihJKz1cIlxcblwiKSxJKz1tKTtsKyt9KTtyZXR1cm4gYi5sZW5ndGh9O1UrPWhhKGModikuZmluZChcInRoZWFkXCIpLmZpcnN0KCkuZmluZChhLnRoZWFkU2VsZWN0b3IpLFwidGgsdGRcIixVKTtDKGModiksXCJ0Ym9keVwiKS5lYWNoKGZ1bmN0aW9uKCl7VSs9aGEoRChjKHRoaXMpLGEudGJvZHlTZWxlY3RvciksXCJ0ZCx0aFwiLFUpfSk7YS50Zm9vdFNlbGVjdG9yLmxlbmd0aCYmaGEoYyh2KS5maW5kKFwidGZvb3RcIikuZmlyc3QoKS5maW5kKGEudGZvb3RTZWxlY3RvciksXCJ0ZCx0aFwiLFUpO0krPVwiXFxuXCI7ITA9PT1hLmNvbnNvbGVMb2cmJmNvbnNvbGUubG9nKEkpO2lmKFwic3RyaW5nXCI9PT1hLm91dHB1dE1vZGUpcmV0dXJuIEk7aWYoXCJiYXNlNjRcIj09PVxuYS5vdXRwdXRNb2RlKXJldHVybiBMKEkpO2lmKFwid2luZG93XCI9PT1hLm91dHB1dE1vZGUpe0goITEsXCJkYXRhOnRleHQvXCIrKFwiY3N2XCI9PWEudHlwZT9cImNzdlwiOlwicGxhaW5cIikrXCI7Y2hhcnNldD11dGYtOCxcIixJKTtyZXR1cm59dHJ5e3ZhciBBPW5ldyBCbG9iKFtJXSx7dHlwZTpcInRleHQvXCIrKFwiY3N2XCI9PWEudHlwZT9cImNzdlwiOlwicGxhaW5cIikrXCI7Y2hhcnNldD11dGYtOFwifSk7c2F2ZUFzKEEsYS5maWxlTmFtZStcIi5cIithLnR5cGUsXCJjc3ZcIiE9YS50eXBlfHwhMT09PWEuY3N2VXNlQk9NKX1jYXRjaChiKXtIKGEuZmlsZU5hbWUrXCIuXCIrYS50eXBlLFwiZGF0YTp0ZXh0L1wiKyhcImNzdlwiPT1hLnR5cGU/XCJjc3ZcIjpcInBsYWluXCIpK1wiO2NoYXJzZXQ9dXRmLTgsXCIrKFwiY3N2XCI9PWEudHlwZSYmYS5jc3ZVc2VCT00/XCJcXHVmZWZmXCI6XCJcIiksSSl9fWVsc2UgaWYoXCJzcWxcIj09YS50eXBlKXtsPTA7Rz1bXTt2YXIgdz1cIklOU0VSVCBJTlRPIGBcIithLnRhYmxlTmFtZStcImAgKFwiO3A9Yyh2KS5maW5kKFwidGhlYWRcIikuZmlyc3QoKS5maW5kKGEudGhlYWRTZWxlY3Rvcik7XG5wLmVhY2goZnVuY3Rpb24oKXtCKHRoaXMsXCJ0aCx0ZFwiLGwscC5sZW5ndGgsZnVuY3Rpb24oYSxjLGspe3crPVwiJ1wiK3ooYSxjLGspK1wiJyxcIn0pO2wrKzt3PWMudHJpbSh3KTt3PWMudHJpbSh3KS5zdWJzdHJpbmcoMCx3Lmxlbmd0aC0xKX0pO3crPVwiKSBWQUxVRVMgXCI7dD11KGModikpO2ModCkuZWFjaChmdW5jdGlvbigpe209XCJcIjtCKHRoaXMsXCJ0ZCx0aFwiLGwscC5sZW5ndGgrdC5sZW5ndGgsZnVuY3Rpb24oYSxjLGspe20rPVwiJ1wiK3ooYSxjLGspK1wiJyxcIn0pOzM8bS5sZW5ndGgmJih3Kz1cIihcIittLHc9Yy50cmltKHcpLnN1YnN0cmluZygwLHcubGVuZ3RoLTEpLHcrPVwiKSxcIik7bCsrfSk7dz1jLnRyaW0odykuc3Vic3RyaW5nKDAsdy5sZW5ndGgtMSk7dys9XCI7XCI7ITA9PT1hLmNvbnNvbGVMb2cmJmNvbnNvbGUubG9nKHcpO2lmKFwic3RyaW5nXCI9PT1hLm91dHB1dE1vZGUpcmV0dXJuIHc7aWYoXCJiYXNlNjRcIj09PWEub3V0cHV0TW9kZSlyZXR1cm4gTCh3KTt0cnl7QT1uZXcgQmxvYihbd10sXG57dHlwZTpcInRleHQvcGxhaW47Y2hhcnNldD11dGYtOFwifSksc2F2ZUFzKEEsYS5maWxlTmFtZStcIi5zcWxcIil9Y2F0Y2goYil7SChhLmZpbGVOYW1lK1wiLnNxbFwiLFwiZGF0YTphcHBsaWNhdGlvbi9zcWw7Y2hhcnNldD11dGYtOCxcIix3KX19ZWxzZSBpZihcImpzb25cIj09YS50eXBlKXt2YXIgUz1bXTtHPVtdO3A9Yyh2KS5maW5kKFwidGhlYWRcIikuZmlyc3QoKS5maW5kKGEudGhlYWRTZWxlY3Rvcik7cC5lYWNoKGZ1bmN0aW9uKCl7dmFyIGE9W107Qih0aGlzLFwidGgsdGRcIixsLHAubGVuZ3RoLGZ1bmN0aW9uKGIsYyxkKXthLnB1c2goeihiLGMsZCkpfSk7Uy5wdXNoKGEpfSk7dmFyIGlhPVtdO3Q9dShjKHYpKTtjKHQpLmVhY2goZnVuY3Rpb24oKXt2YXIgYT17fSxlPTA7Qih0aGlzLFwidGQsdGhcIixsLHAubGVuZ3RoK3QubGVuZ3RoLGZ1bmN0aW9uKGIsYyxnKXtTLmxlbmd0aD9hW1NbUy5sZW5ndGgtMV1bZV1dPXooYixjLGcpOmFbZV09eihiLGMsZyk7ZSsrfSk7ITE9PT1jLmlzRW1wdHlPYmplY3QoYSkmJlxuaWEucHVzaChhKTtsKyt9KTtmPVwiXCI7Zj1cImhlYWRcIj09YS5qc29uU2NvcGU/SlNPTi5zdHJpbmdpZnkoUyk6XCJkYXRhXCI9PWEuanNvblNjb3BlP0pTT04uc3RyaW5naWZ5KGlhKTpKU09OLnN0cmluZ2lmeSh7aGVhZGVyOlMsZGF0YTppYX0pOyEwPT09YS5jb25zb2xlTG9nJiZjb25zb2xlLmxvZyhmKTtpZihcInN0cmluZ1wiPT09YS5vdXRwdXRNb2RlKXJldHVybiBmO2lmKFwiYmFzZTY0XCI9PT1hLm91dHB1dE1vZGUpcmV0dXJuIEwoZik7dHJ5e0E9bmV3IEJsb2IoW2ZdLHt0eXBlOlwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04XCJ9KSxzYXZlQXMoQSxhLmZpbGVOYW1lK1wiLmpzb25cIil9Y2F0Y2goYil7SChhLmZpbGVOYW1lK1wiLmpzb25cIixcImRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIixmKX19ZWxzZSBpZihcInhtbFwiPT09YS50eXBlKXtsPTA7Rz1bXTt2YXIgSj0nPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwidXRmLThcIj8+JztKKz1cIjx0YWJsZWRhdGE+PGZpZWxkcz5cIjtcbnA9Yyh2KS5maW5kKFwidGhlYWRcIikuZmlyc3QoKS5maW5kKGEudGhlYWRTZWxlY3Rvcik7cC5lYWNoKGZ1bmN0aW9uKCl7Qih0aGlzLFwidGgsdGRcIixsLHAubGVuZ3RoLGZ1bmN0aW9uKGEsYyxkKXtKKz1cIjxmaWVsZD5cIit6KGEsYyxkKStcIjwvZmllbGQ+XCJ9KTtsKyt9KTtKKz1cIjwvZmllbGRzPjxkYXRhPlwiO3ZhciB0YT0xO3Q9dShjKHYpKTtjKHQpLmVhY2goZnVuY3Rpb24oKXt2YXIgYT0xO209XCJcIjtCKHRoaXMsXCJ0ZCx0aFwiLGwscC5sZW5ndGgrdC5sZW5ndGgsZnVuY3Rpb24oYixjLGQpe20rPVwiPGNvbHVtbi1cIithK1wiPlwiK3ooYixjLGQpK1wiPC9jb2x1bW4tXCIrYStcIj5cIjthKyt9KTswPG0ubGVuZ3RoJiZcIjxjb2x1bW4tMT48L2NvbHVtbi0xPlwiIT1tJiYoSis9Jzxyb3cgaWQ9XCInK3RhKydcIj4nK20rXCI8L3Jvdz5cIix0YSsrKTtsKyt9KTtKKz1cIjwvZGF0YT48L3RhYmxlZGF0YT5cIjshMD09PWEuY29uc29sZUxvZyYmY29uc29sZS5sb2coSik7aWYoXCJzdHJpbmdcIj09PWEub3V0cHV0TW9kZSlyZXR1cm4gSjtcbmlmKFwiYmFzZTY0XCI9PT1hLm91dHB1dE1vZGUpcmV0dXJuIEwoSik7dHJ5e0E9bmV3IEJsb2IoW0pdLHt0eXBlOlwiYXBwbGljYXRpb24veG1sO2NoYXJzZXQ9dXRmLThcIn0pLHNhdmVBcyhBLGEuZmlsZU5hbWUrXCIueG1sXCIpfWNhdGNoKGIpe0goYS5maWxlTmFtZStcIi54bWxcIixcImRhdGE6YXBwbGljYXRpb24veG1sO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLEopfX1lbHNlIGlmKFwiZXhjZWxcIj09PWEudHlwZSYmXCJ4bWxzc1wiPT09YS5leGNlbEZpbGVGb3JtYXQpe3ZhciBqYT1bXSxGPVtdO2ModikuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIFAoYyh0aGlzKSl9KS5lYWNoKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihhLGIsZSl7dmFyIGc9W107YyhhKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGI9MCxoPTA7bT1cIlwiO0IodGhpcyxcInRkLHRoXCIsbCxlK2EubGVuZ3RoLGZ1bmN0aW9uKGEsZSxkKXtpZihudWxsIT09YSl7dmFyIGs9XCJcIjtlPXooYSxlLGQpO2Q9XCJTdHJpbmdcIjtpZighMSE9PWpRdWVyeS5pc051bWVyaWMoZSkpZD1cblwiTnVtYmVyXCI7ZWxzZXt2YXIgZj1CYShlKTshMSE9PWYmJihlPWYsZD1cIk51bWJlclwiLGsrPScgc3M6U3R5bGVJRD1cInBjdDFcIicpfVwiTnVtYmVyXCIhPT1kJiYoZT1lLnJlcGxhY2UoL1xcbi9nLFwiPGJyPlwiKSk7Zj1wYXJzZUludChhLmdldEF0dHJpYnV0ZShcImNvbHNwYW5cIikpO2E9cGFyc2VJbnQoYS5nZXRBdHRyaWJ1dGUoXCJyb3dzcGFuXCIpKTtnLmZvckVhY2goZnVuY3Rpb24oYSl7aWYobD49YS5zLnImJmw8PWEuZS5yJiZoPj1hLnMuYyYmaDw9YS5lLmMpZm9yKHZhciBjPTA7Yzw9YS5lLmMtYS5zLmM7KytjKWgrKyxiKyt9KTtpZihhfHxmKWE9YXx8MSxmPWZ8fDEsZy5wdXNoKHtzOntyOmwsYzpofSxlOntyOmwrYS0xLGM6aCtmLTF9fSk7MTxmJiYoays9JyBzczpNZXJnZUFjcm9zcz1cIicrKGYtMSkrJ1wiJyxoKz1mLTEpOzE8YSYmKGsrPScgc3M6TWVyZ2VEb3duPVwiJysoYS0xKSsnXCIgc3M6U3R5bGVJRD1cInJzcDFcIicpOzA8YiYmKGsrPScgc3M6SW5kZXg9XCInKyhoKzEpKydcIicsYj0wKTtcbm0rPVwiPENlbGxcIitrKyc+PERhdGEgc3M6VHlwZT1cIicrZCsnXCI+JytjKFwiPGRpdiAvPlwiKS50ZXh0KGUpLmh0bWwoKStcIjwvRGF0YT48L0NlbGw+XFxyXCI7aCsrfX0pOzA8bS5sZW5ndGgmJihFKz0nPFJvdyBzczpBdXRvRml0SGVpZ2h0PVwiMFwiPlxccicrbStcIjwvUm93PlxcclwiKTtsKyt9KTtyZXR1cm4gYS5sZW5ndGh9dmFyIGU9Yyh0aGlzKSxkPVwiXCI7XCJzdHJpbmdcIj09PXR5cGVvZiBhLndvcmtzaGVldE5hbWUmJmEud29ya3NoZWV0TmFtZS5sZW5ndGg/ZD1hLndvcmtzaGVldE5hbWUrXCIgXCIrKEYubGVuZ3RoKzEpOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYS53b3Jrc2hlZXROYW1lW0YubGVuZ3RoXSYmKGQ9YS53b3Jrc2hlZXROYW1lW0YubGVuZ3RoXSk7ZC5sZW5ndGh8fChkPWUuZmluZChcImNhcHRpb25cIikudGV4dCgpfHxcIlwiKTtkLmxlbmd0aHx8KGQ9XCJUYWJsZSBcIisoRi5sZW5ndGgrMSkpO2Q9ZC5yZXBsYWNlKC9bXFxcXFxcL1tcXF0qOj8nXCJdL2csXCJcIikuc3Vic3RyaW5nKDAsMzEpLnRyaW0oKTtcbkYucHVzaChjKFwiPGRpdiAvPlwiKS50ZXh0KGQpLmh0bWwoKSk7ITE9PT1hLmV4cG9ydEhpZGRlbkNlbGxzJiYoSz1lLmZpbmQoXCJ0ciwgdGgsIHRkXCIpLmZpbHRlcihcIjpoaWRkZW5cIiksUj0wPEsubGVuZ3RoKTtsPTA7UT1PKHRoaXMpO0U9XCI8VGFibGU+XFxyXCI7ZD0wO2QrPWIoZS5maW5kKFwidGhlYWRcIikuZmlyc3QoKS5maW5kKGEudGhlYWRTZWxlY3RvciksXCJ0aCx0ZFwiLGQpO2IodShlKSxcInRkLHRoXCIsZCk7RSs9XCI8L1RhYmxlPlxcclwiO2phLnB1c2goRSk7ITA9PT1hLmNvbnNvbGVMb2cmJmNvbnNvbGUubG9nKEUpfSk7Zj17fTtmb3IodmFyIHk9e30sbixOLFQ9MCxZPUYubGVuZ3RoO1Q8WTtUKyspbj1GW1RdLE49ZltuXSxOPWZbbl09bnVsbD09Tj8xOk4rMSwyPT1OJiYoRlt5W25dXT1GW3lbbl1dLnN1YnN0cmluZygwLDI5KStcIi0xXCIpLDE8ZltuXT9GW1RdPUZbVF0uc3Vic3RyaW5nKDAsMjkpK1wiLVwiK2Zbbl06eVtuXT1UO2Y9Jzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/Plxccjw/bXNvLWFwcGxpY2F0aW9uIHByb2dpZD1cIkV4Y2VsLlNoZWV0XCI/PlxccjxXb3JrYm9vayB4bWxucz1cInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOnNwcmVhZHNoZWV0XCJcXHIgeG1sbnM6bz1cInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZVwiXFxyIHhtbG5zOng9XCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpleGNlbFwiXFxyIHhtbG5zOnNzPVwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6c3ByZWFkc2hlZXRcIlxcciB4bWxuczpodG1sPVwiaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MFwiPlxccjxEb2N1bWVudFByb3BlcnRpZXMgeG1sbnM9XCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2VcIj5cXHIgIDxDcmVhdGVkPicrXG4obmV3IERhdGUpLnRvSVNPU3RyaW5nKCkrJzwvQ3JlYXRlZD5cXHI8L0RvY3VtZW50UHJvcGVydGllcz5cXHI8T2ZmaWNlRG9jdW1lbnRTZXR0aW5ncyB4bWxucz1cInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZVwiPlxcciAgPEFsbG93UE5HLz5cXHI8L09mZmljZURvY3VtZW50U2V0dGluZ3M+XFxyPEV4Y2VsV29ya2Jvb2sgeG1sbnM9XCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpleGNlbFwiPlxcciAgPFdpbmRvd0hlaWdodD45MDAwPC9XaW5kb3dIZWlnaHQ+XFxyICA8V2luZG93V2lkdGg+MTM4NjA8L1dpbmRvd1dpZHRoPlxcciAgPFdpbmRvd1RvcFg+MDwvV2luZG93VG9wWD5cXHIgIDxXaW5kb3dUb3BZPjA8L1dpbmRvd1RvcFk+XFxyICA8UHJvdGVjdFN0cnVjdHVyZT5GYWxzZTwvUHJvdGVjdFN0cnVjdHVyZT5cXHIgIDxQcm90ZWN0V2luZG93cz5GYWxzZTwvUHJvdGVjdFdpbmRvd3M+XFxyPC9FeGNlbFdvcmtib29rPlxccjxTdHlsZXM+XFxyICA8U3R5bGUgc3M6SUQ9XCJEZWZhdWx0XCIgc3M6TmFtZT1cIk5vcm1hbFwiPlxcciAgICA8QWxpZ25tZW50IHNzOlZlcnRpY2FsPVwiQm90dG9tXCIvPlxcciAgICA8Qm9yZGVycy8+XFxyICAgIDxGb250Lz5cXHIgICAgPEludGVyaW9yLz5cXHIgICAgPE51bWJlckZvcm1hdC8+XFxyICAgIDxQcm90ZWN0aW9uLz5cXHIgIDwvU3R5bGU+XFxyICA8U3R5bGUgc3M6SUQ9XCJyc3AxXCI+XFxyICAgIDxBbGlnbm1lbnQgc3M6VmVydGljYWw9XCJDZW50ZXJcIi8+XFxyICA8L1N0eWxlPlxcciAgPFN0eWxlIHNzOklEPVwicGN0MVwiPlxcciAgICA8TnVtYmVyRm9ybWF0IHNzOkZvcm1hdD1cIlBlcmNlbnRcIi8+XFxyICA8L1N0eWxlPlxccjwvU3R5bGVzPlxccic7XG5mb3IoeT0wO3k8amEubGVuZ3RoO3krKylmKz0nPFdvcmtzaGVldCBzczpOYW1lPVwiJytGW3ldKydcIiBzczpSaWdodFRvTGVmdD1cIicrKGEuZXhjZWxSVEw/XCIxXCI6XCIwXCIpKydcIj5cXHInK2phW3ldLGY9YS5leGNlbFJUTD9mKyc8V29ya3NoZWV0T3B0aW9ucyB4bWxucz1cInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOmV4Y2VsXCI+XFxyPERpc3BsYXlSaWdodFRvTGVmdC8+XFxyPC9Xb3Jrc2hlZXRPcHRpb25zPlxccic6ZisnPFdvcmtzaGVldE9wdGlvbnMgeG1sbnM9XCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpleGNlbFwiLz5cXHInLGYrPVwiPC9Xb3Jrc2hlZXQ+XFxyXCI7Zis9XCI8L1dvcmtib29rPlxcclwiOyEwPT09YS5jb25zb2xlTG9nJiZjb25zb2xlLmxvZyhmKTtpZihcInN0cmluZ1wiPT09YS5vdXRwdXRNb2RlKXJldHVybiBmO2lmKFwiYmFzZTY0XCI9PT1hLm91dHB1dE1vZGUpcmV0dXJuIEwoZik7dHJ5e0E9bmV3IEJsb2IoW2ZdLHt0eXBlOlwiYXBwbGljYXRpb24veG1sO2NoYXJzZXQ9dXRmLThcIn0pLFxuc2F2ZUFzKEEsYS5maWxlTmFtZStcIi54bWxcIil9Y2F0Y2goYil7SChhLmZpbGVOYW1lK1wiLnhtbFwiLFwiZGF0YTphcHBsaWNhdGlvbi94bWw7Y2hhcnNldD11dGYtODtiYXNlNjQsXCIsZil9fWVsc2UgaWYoXCJleGNlbFwiPT1hLnR5cGV8fFwieGxzXCI9PWEudHlwZXx8XCJ3b3JkXCI9PWEudHlwZXx8XCJkb2NcIj09YS50eXBlKXtmPVwiZXhjZWxcIj09YS50eXBlfHxcInhsc1wiPT1hLnR5cGU/XCJleGNlbFwiOlwid29yZFwiO3k9XCJleGNlbFwiPT1mP1wieGxzXCI6XCJkb2NcIjtuPSd4bWxuczp4PVwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6JytmKydcIic7dmFyIEU9XCJcIixWPVwiXCI7Yyh2KS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4gUChjKHRoaXMpKX0pLmVhY2goZnVuY3Rpb24oKXt2YXIgYj1jKHRoaXMpO1wiXCI9PT1WJiYoVj1hLndvcmtzaGVldE5hbWV8fGIuZmluZChcImNhcHRpb25cIikudGV4dCgpfHxcIlRhYmxlXCIsVj1WLnJlcGxhY2UoL1tcXFxcXFwvW1xcXSo6PydcIl0vZyxcIlwiKS5zdWJzdHJpbmcoMCwzMSkudHJpbSgpKTtcbiExPT09YS5leHBvcnRIaWRkZW5DZWxscyYmKEs9Yi5maW5kKFwidHIsIHRoLCB0ZFwiKS5maWx0ZXIoXCI6aGlkZGVuXCIpLFI9MDxLLmxlbmd0aCk7bD0wO0c9W107UT1PKHRoaXMpO0UrPVwiPHRhYmxlPjx0aGVhZD5cIjtwPWIuZmluZChcInRoZWFkXCIpLmZpcnN0KCkuZmluZChhLnRoZWFkU2VsZWN0b3IpO3AuZWFjaChmdW5jdGlvbigpe209XCJcIjtCKHRoaXMsXCJ0aCx0ZFwiLGwscC5sZW5ndGgsZnVuY3Rpb24oYixkLGYpe2lmKG51bGwhPT1iKXt2YXIgZT1cIlwiO20rPVwiPHRoXCI7Zm9yKHZhciBoIGluIGEuZXhjZWxzdHlsZXMpaWYoYS5leGNlbHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIGs9YyhiKS5jc3MoYS5leGNlbHN0eWxlc1toXSk7XCJcIiE9PWsmJlwiMHB4IG5vbmUgcmdiKDAsIDAsIDApXCIhPWsmJlwicmdiYSgwLCAwLCAwLCAwKVwiIT1rJiYoZSs9XCJcIj09PWU/J3N0eWxlPVwiJzpcIjtcIixlKz1hLmV4Y2Vsc3R5bGVzW2hdK1wiOlwiK2spfVwiXCIhPT1lJiYobSs9XCIgXCIrZSsnXCInKTtjKGIpLmlzKFwiW2NvbHNwYW5dXCIpJiZcbihtKz0nIGNvbHNwYW49XCInK2MoYikuYXR0cihcImNvbHNwYW5cIikrJ1wiJyk7YyhiKS5pcyhcIltyb3dzcGFuXVwiKSYmKG0rPScgcm93c3Bhbj1cIicrYyhiKS5hdHRyKFwicm93c3BhblwiKSsnXCInKTttKz1cIj5cIit6KGIsZCxmKStcIjwvdGg+XCJ9fSk7MDxtLmxlbmd0aCYmKEUrPVwiPHRyPlwiK20rXCI8L3RyPlwiKTtsKyt9KTtFKz1cIjwvdGhlYWQ+PHRib2R5PlwiO3Q9dShiKTtjKHQpLmVhY2goZnVuY3Rpb24oKXt2YXIgYj1jKHRoaXMpO209XCJcIjtCKHRoaXMsXCJ0ZCx0aFwiLGwscC5sZW5ndGgrdC5sZW5ndGgsZnVuY3Rpb24oZSxkLGcpe2lmKG51bGwhPT1lKXt2YXIgaD16KGUsZCxnKSxrPVwiXCIsZj1jKGUpLmRhdGEoXCJ0YWJsZWV4cG9ydC1tc29udW1iZXJmb3JtYXRcIik7XCJ1bmRlZmluZWRcIj09dHlwZW9mIGYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLm9uTXNvTnVtYmVyRm9ybWF0JiYoZj1hLm9uTXNvTnVtYmVyRm9ybWF0KGUsZCxnKSk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGYmJlwiXCIhPT1mJiYoaz1cInN0eWxlPVxcXCJtc28tbnVtYmVyLWZvcm1hdDonXCIrXG5mK1wiJ1wiKTtmb3IodmFyIGwgaW4gYS5leGNlbHN0eWxlcylhLmV4Y2Vsc3R5bGVzLmhhc093blByb3BlcnR5KGwpJiYoZj1jKGUpLmNzcyhhLmV4Y2Vsc3R5bGVzW2xdKSxcIlwiPT09ZiYmKGY9Yi5jc3MoYS5leGNlbHN0eWxlc1tsXSkpLFwiXCIhPT1mJiZcIjBweCBub25lIHJnYigwLCAwLCAwKVwiIT1mJiZcInJnYmEoMCwgMCwgMCwgMClcIiE9ZiYmKGsrPVwiXCI9PT1rPydzdHlsZT1cIic6XCI7XCIsays9YS5leGNlbHN0eWxlc1tsXStcIjpcIitmKSk7bSs9XCI8dGRcIjtcIlwiIT09ayYmKG0rPVwiIFwiK2srJ1wiJyk7YyhlKS5pcyhcIltjb2xzcGFuXVwiKSYmKG0rPScgY29sc3Bhbj1cIicrYyhlKS5hdHRyKFwiY29sc3BhblwiKSsnXCInKTtjKGUpLmlzKFwiW3Jvd3NwYW5dXCIpJiYobSs9JyByb3dzcGFuPVwiJytjKGUpLmF0dHIoXCJyb3dzcGFuXCIpKydcIicpO1wic3RyaW5nXCI9PT10eXBlb2YgaCYmXCJcIiE9aCYmKGg9aC5yZXBsYWNlKC9cXG4vZyxcIjxicj5cIikpO20rPVwiPlwiK2grXCI8L3RkPlwifX0pOzA8bS5sZW5ndGgmJihFKz1cIjx0cj5cIitcbm0rXCI8L3RyPlwiKTtsKyt9KTthLmRpc3BsYXlUYWJsZU5hbWUmJihFKz1cIjx0cj48dGQ+PC90ZD48L3RyPjx0cj48dGQ+PC90ZD48L3RyPjx0cj48dGQ+XCIreihjKFwiPHA+XCIrYS50YWJsZU5hbWUrXCI8L3A+XCIpKStcIjwvdGQ+PC90cj5cIik7RSs9XCI8L3Rib2R5PjwvdGFibGU+XCI7ITA9PT1hLmNvbnNvbGVMb2cmJmNvbnNvbGUubG9nKEUpfSk7bj0nPGh0bWwgeG1sbnM6bz1cInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZVwiICcrbisnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MFwiPicrKCc8bWV0YSBodHRwLWVxdWl2PVwiY29udGVudC10eXBlXCIgY29udGVudD1cImFwcGxpY2F0aW9uL3ZuZC5tcy0nK2YrJzsgY2hhcnNldD1VVEYtOFwiPicpK1wiPGhlYWQ+XCI7XCJleGNlbFwiPT09ZiYmKG4rPVwiXFx4M2MhLS1baWYgZ3RlIG1zbyA5XT5cIixuKz1cIjx4bWw+XCIsbis9XCI8eDpFeGNlbFdvcmtib29rPlwiLG4rPVwiPHg6RXhjZWxXb3Jrc2hlZXRzPlwiLG4rPVwiPHg6RXhjZWxXb3Jrc2hlZXQ+XCIsXG5uKz1cIjx4Ok5hbWU+XCIsbis9VixuKz1cIjwveDpOYW1lPlwiLG4rPVwiPHg6V29ya3NoZWV0T3B0aW9ucz5cIixuKz1cIjx4OkRpc3BsYXlHcmlkbGluZXMvPlwiLGEuZXhjZWxSVEwmJihuKz1cIjx4OkRpc3BsYXlSaWdodFRvTGVmdC8+XCIpLG4rPVwiPC94OldvcmtzaGVldE9wdGlvbnM+XCIsbis9XCI8L3g6RXhjZWxXb3Jrc2hlZXQ+XCIsbis9XCI8L3g6RXhjZWxXb3Jrc2hlZXRzPlwiLG4rPVwiPC94OkV4Y2VsV29ya2Jvb2s+XCIsbis9XCI8L3htbD5cIixuKz1cIjwhW2VuZGlmXS0tXFx4M2VcIik7bis9XCI8c3R5bGU+YnIge21zby1kYXRhLXBsYWNlbWVudDpzYW1lLWNlbGw7fTwvc3R5bGU+XCI7bis9XCI8L2hlYWQ+XCI7bis9XCI8Ym9keT5cIjtuKz1FO24rPVwiPC9ib2R5PlwiO24rPVwiPC9odG1sPlwiOyEwPT09YS5jb25zb2xlTG9nJiZjb25zb2xlLmxvZyhuKTtpZihcInN0cmluZ1wiPT09YS5vdXRwdXRNb2RlKXJldHVybiBuO2lmKFwiYmFzZTY0XCI9PT1hLm91dHB1dE1vZGUpcmV0dXJuIEwobik7dHJ5e0E9bmV3IEJsb2IoW25dLFxue3R5cGU6XCJhcHBsaWNhdGlvbi92bmQubXMtXCIrYS50eXBlfSksc2F2ZUFzKEEsYS5maWxlTmFtZStcIi5cIit5KX1jYXRjaChiKXtIKGEuZmlsZU5hbWUrXCIuXCIreSxcImRhdGE6YXBwbGljYXRpb24vdm5kLm1zLVwiK2YrXCI7YmFzZTY0LFwiLG4pfX1lbHNlIGlmKFwieGxzeFwiPT1hLnR5cGUpe3ZhciB1YT1bXSxrYT1bXTtsPTA7dD1jKHYpLmZpbmQoXCJ0aGVhZFwiKS5maXJzdCgpLmZpbmQoYS50aGVhZFNlbGVjdG9yKTt0LnB1c2guYXBwbHkodCx1KGModikpKTtjKHQpLmVhY2goZnVuY3Rpb24oKXt2YXIgYj1bXTtCKHRoaXMsXCJ0aCx0ZFwiLGwsdC5sZW5ndGgsZnVuY3Rpb24oYyxkLGYpe2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmbnVsbCE9PWMpe2Y9eihjLGQsZik7ZD1wYXJzZUludChjLmdldEF0dHJpYnV0ZShcImNvbHNwYW5cIikpO2M9cGFyc2VJbnQoYy5nZXRBdHRyaWJ1dGUoXCJyb3dzcGFuXCIpKTtrYS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2lmKGw+PWEucy5yJiZsPD1hLmUuciYmYi5sZW5ndGg+PVxuYS5zLmMmJmIubGVuZ3RoPD1hLmUuYylmb3IodmFyIGM9MDtjPD1hLmUuYy1hLnMuYzsrK2MpYi5wdXNoKG51bGwpfSk7aWYoY3x8ZClkPWR8fDEsa2EucHVzaCh7czp7cjpsLGM6Yi5sZW5ndGh9LGU6e3I6bCsoY3x8MSktMSxjOmIubGVuZ3RoK2QtMX19KTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYS5vbkNlbGxEYXRhJiZcIlwiIT09ZiYmZj09K2YmJihmPStmKTtiLnB1c2goXCJcIiE9PWY/ZjpudWxsKTtpZihkKWZvcihjPTA7YzxkLTE7KytjKWIucHVzaChudWxsKX19KTt1YS5wdXNoKGIpO2wrK30pO2Y9bmV3IGZhO3k9RGEodWEpO3lbXCIhbWVyZ2VzXCJdPWthO2YuU2hlZXROYW1lcy5wdXNoKGEud29ya3NoZWV0TmFtZSk7Zi5TaGVldHNbYS53b3Jrc2hlZXROYW1lXT15O2Y9WExTWC53cml0ZShmLHtib29rVHlwZTphLnR5cGUsYm9va1NTVDohMSx0eXBlOlwiYmluYXJ5XCJ9KTt0cnl7QT1uZXcgQmxvYihbc2EoZildLHt0eXBlOlwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQ7Y2hhcnNldD1VVEYtOFwifSksXG5zYXZlQXMoQSxhLmZpbGVOYW1lK1wiLlwiK2EudHlwZSl9Y2F0Y2goYil7SChhLmZpbGVOYW1lK1wiLlwiK2EudHlwZSxcImRhdGE6YXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQ7Y2hhcnNldD1VVEYtOCxcIixzYShmKSl9fWVsc2UgaWYoXCJwbmdcIj09YS50eXBlKWh0bWwyY2FudmFzKGModilbMF0pLnRoZW4oZnVuY3Rpb24oYil7Yj1iLnRvRGF0YVVSTCgpO2Zvcih2YXIgYz1hdG9iKGIuc3Vic3RyaW5nKDIyKSksZD1uZXcgQXJyYXlCdWZmZXIoYy5sZW5ndGgpLGY9bmV3IFVpbnQ4QXJyYXkoZCksZz0wO2c8Yy5sZW5ndGg7ZysrKWZbZ109Yy5jaGFyQ29kZUF0KGcpOyEwPT09YS5jb25zb2xlTG9nJiZjb25zb2xlLmxvZyhjKTtpZihcInN0cmluZ1wiPT09YS5vdXRwdXRNb2RlKXJldHVybiBjO2lmKFwiYmFzZTY0XCI9PT1hLm91dHB1dE1vZGUpcmV0dXJuIEwoYik7aWYoXCJ3aW5kb3dcIj09PWEub3V0cHV0TW9kZSl3aW5kb3cub3BlbihiKTtcbmVsc2UgdHJ5e0E9bmV3IEJsb2IoW2RdLHt0eXBlOlwiaW1hZ2UvcG5nXCJ9KSxzYXZlQXMoQSxhLmZpbGVOYW1lK1wiLnBuZ1wiKX1jYXRjaChoKXtIKGEuZmlsZU5hbWUrXCIucG5nXCIsXCJkYXRhOmltYWdlL3BuZyxcIixBKX19KTtlbHNlIGlmKFwicGRmXCI9PWEudHlwZSlpZighMD09PWEucGRmbWFrZS5lbmFibGVkKXtmPVtdO3ZhciB2YT1bXTtsPTA7Rz1bXTt5PWZ1bmN0aW9uKGEsZCxmKXt2YXIgYj0wO2MoYSkuZWFjaChmdW5jdGlvbigpe3ZhciBhPVtdO0IodGhpcyxkLGwsZixmdW5jdGlvbihiLGMsZCl7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBiJiZudWxsIT09Yil7dmFyIGU9cGFyc2VJbnQoYi5nZXRBdHRyaWJ1dGUoXCJjb2xzcGFuXCIpKSxnPXBhcnNlSW50KGIuZ2V0QXR0cmlidXRlKFwicm93c3BhblwiKSk7Yj16KGIsYyxkKXx8XCIgXCI7MTxlfHwxPGc/YS5wdXNoKHtjb2xTcGFuOmV8fDEscm93U3BhbjpnfHwxLHRleHQ6Yn0pOmEucHVzaChiKX1lbHNlIGEucHVzaChcIiBcIil9KTthLmxlbmd0aCYmXG52YS5wdXNoKGEpO2I8YS5sZW5ndGgmJihiPWEubGVuZ3RoKTtsKyt9KTtyZXR1cm4gYn07cD1jKHRoaXMpLmZpbmQoXCJ0aGVhZFwiKS5maXJzdCgpLmZpbmQoYS50aGVhZFNlbGVjdG9yKTtuPXkocCxcInRoLHRkXCIscC5sZW5ndGgpO2ZvcihOPWYubGVuZ3RoO048bjtOKyspZi5wdXNoKFwiKlwiKTt0PXUoYyh0aGlzKSk7eSh0LFwidGgsdGRcIixwLmxlbmd0aCt0Lmxlbmd0aCk7Zj17Y29udGVudDpbe3RhYmxlOntoZWFkZXJSb3dzOnAubGVuZ3RoLHdpZHRoczpmLGJvZHk6dmF9fV19O2MuZXh0ZW5kKCEwLGYsYS5wZGZtYWtlLmRvY0RlZmluaXRpb24pO3BkZk1ha2UuZm9udHM9e1JvYm90bzp7bm9ybWFsOlwiUm9ib3RvLVJlZ3VsYXIudHRmXCIsYm9sZDpcIlJvYm90by1NZWRpdW0udHRmXCIsaXRhbGljczpcIlJvYm90by1JdGFsaWMudHRmXCIsYm9sZGl0YWxpY3M6XCJSb2JvdG8tTWVkaXVtSXRhbGljLnR0ZlwifX07Yy5leHRlbmQoITAscGRmTWFrZS5mb250cyxhLnBkZm1ha2UuZm9udHMpO3BkZk1ha2UuY3JlYXRlUGRmKGYpLmdldEJ1ZmZlcihmdW5jdGlvbihiKXt0cnl7dmFyIGM9XG5uZXcgQmxvYihbYl0se3R5cGU6XCJhcHBsaWNhdGlvbi9wZGZcIn0pO3NhdmVBcyhjLGEuZmlsZU5hbWUrXCIucGRmXCIpfWNhdGNoKGspe0goYS5maWxlTmFtZStcIi5wZGZcIixcImRhdGE6YXBwbGljYXRpb24vcGRmO2Jhc2U2NCxcIixiKX19KX1lbHNlIGlmKCExPT09YS5qc3BkZi5hdXRvdGFibGUpe2Y9e2RpbTp7dzphYShjKHYpLmZpcnN0KCkuZ2V0KDApLFwid2lkdGhcIixcIm1tXCIpLGg6YWEoYyh2KS5maXJzdCgpLmdldCgwKSxcImhlaWdodFwiLFwibW1cIil9LHBhZ2VzcGxpdDohMX07dmFyIHdhPW5ldyBqc1BERihhLmpzcGRmLm9yaWVudGF0aW9uLGEuanNwZGYudW5pdCxhLmpzcGRmLmZvcm1hdCk7d2EuYWRkSFRNTChjKHYpLmZpcnN0KCksYS5qc3BkZi5tYXJnaW5zLmxlZnQsYS5qc3BkZi5tYXJnaW5zLnRvcCxmLGZ1bmN0aW9uKCl7bGEod2EsITEpfSl9ZWxzZXt2YXIgZD1hLmpzcGRmLmF1dG90YWJsZS50YWJsZUV4cG9ydDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEuanNwZGYuZm9ybWF0JiZcblwiYmVzdGZpdFwiPT09YS5qc3BkZi5mb3JtYXQudG9Mb3dlckNhc2UoKSl7dmFyIFc9e2EwOlsyMzgzLjk0LDMzNzAuMzldLGExOlsxNjgzLjc4LDIzODMuOTRdLGEyOlsxMTkwLjU1LDE2ODMuNzhdLGEzOls4NDEuODksMTE5MC41NV0sYTQ6WzU5NS4yOCw4NDEuODldfSxkYT1cIlwiLFg9XCJcIix4YT0wO2ModikuZWFjaChmdW5jdGlvbigpe2lmKFAoYyh0aGlzKSkpe3ZhciBhPWFhKGModGhpcykuZ2V0KDApLFwid2lkdGhcIixcInB0XCIpO2lmKGE+eGEpe2E+Vy5hMFswXSYmKGRhPVwiYTBcIixYPVwibFwiKTtmb3IodmFyIGQgaW4gVylXLmhhc093blByb3BlcnR5KGQpJiZXW2RdWzFdPmEmJihkYT1kLFg9XCJsXCIsV1tkXVswXT5hJiYoWD1cInBcIikpO3hhPWF9fX0pO2EuanNwZGYuZm9ybWF0PVwiXCI9PT1kYT9cImE0XCI6ZGE7YS5qc3BkZi5vcmllbnRhdGlvbj1cIlwiPT09WD9cIndcIjpYfWlmKG51bGw9PWQuZG9jJiYoZC5kb2M9bmV3IGpzUERGKGEuanNwZGYub3JpZW50YXRpb24sYS5qc3BkZi51bml0LGEuanNwZGYuZm9ybWF0KSxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmpzcGRmLm9uRG9jQ3JlYXRlZCkpYS5qc3BkZi5vbkRvY0NyZWF0ZWQoZC5kb2MpOyEwPT09ZC5vdXRwdXRJbWFnZXMmJihkLmltYWdlcz17fSk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGQuaW1hZ2VzJiYoYyh2KS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4gUChjKHRoaXMpKX0pLmVhY2goZnVuY3Rpb24oKXt2YXIgYj0wO0c9W107ITE9PT1hLmV4cG9ydEhpZGRlbkNlbGxzJiYoSz1jKHRoaXMpLmZpbmQoXCJ0ciwgdGgsIHRkXCIpLmZpbHRlcihcIjpoaWRkZW5cIiksUj0wPEsubGVuZ3RoKTtwPWModGhpcykuZmluZChcInRoZWFkXCIpLmZpbmQoYS50aGVhZFNlbGVjdG9yKTt0PXUoYyh0aGlzKSk7Yyh0KS5lYWNoKGZ1bmN0aW9uKCl7Qih0aGlzLFwidGQsdGhcIixwLmxlbmd0aCtiLHAubGVuZ3RoK3QubGVuZ3RoLGZ1bmN0aW9uKGEpe2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciBiPWMoYSkuY2hpbGRyZW4oKTtcInVuZGVmaW5lZFwiIT1cbnR5cGVvZiBiJiYwPGIubGVuZ3RoJiZuYShhLGIsZCl9fSk7YisrfSl9KSxwPVtdLHQ9W10pO0FhKGQsZnVuY3Rpb24oKXtjKHYpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiBQKGModGhpcykpfSkuZWFjaChmdW5jdGlvbigpe3ZhciBiO2w9MDtHPVtdOyExPT09YS5leHBvcnRIaWRkZW5DZWxscyYmKEs9Yyh0aGlzKS5maW5kKFwidHIsIHRoLCB0ZFwiKS5maWx0ZXIoXCI6aGlkZGVuXCIpLFI9MDxLLmxlbmd0aCk7UT1PKHRoaXMpO2QuY29sdW1ucz1bXTtkLnJvd3M9W107ZC5yb3dvcHRpb25zPXt9O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uVGFibGUmJiExPT09ZC5vblRhYmxlKGModGhpcyksYSkpcmV0dXJuITA7YS5qc3BkZi5hdXRvdGFibGUudGFibGVFeHBvcnQ9bnVsbDt2YXIgZT1jLmV4dGVuZCghMCx7fSxhLmpzcGRmLmF1dG90YWJsZSk7YS5qc3BkZi5hdXRvdGFibGUudGFibGVFeHBvcnQ9ZDtlLm1hcmdpbj17fTtjLmV4dGVuZCghMCxlLm1hcmdpbixhLmpzcGRmLm1hcmdpbnMpO1xuZS50YWJsZUV4cG9ydD1kO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmJlZm9yZVBhZ2VDb250ZW50JiYoZS5iZWZvcmVQYWdlQ29udGVudD1mdW5jdGlvbihhKXsxPT1hLnBhZ2VDb3VudCYmYS50YWJsZS5yb3dzLmNvbmNhdChhLnRhYmxlLmhlYWRlclJvdykuZm9yRWFjaChmdW5jdGlvbihiKXswPGIuaGVpZ2h0JiYoYi5oZWlnaHQrPSgyLTEuMTUpLzIqYi5zdHlsZXMuZm9udFNpemUsYS50YWJsZS5oZWlnaHQrPSgyLTEuMTUpLzIqYi5zdHlsZXMuZm9udFNpemUpfSl9KTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jcmVhdGVkSGVhZGVyQ2VsbCYmKGUuY3JlYXRlZEhlYWRlckNlbGw9ZnVuY3Rpb24oYSxiKXthLnN0eWxlcz1jLmV4dGVuZCh7fSxiLnJvdy5zdHlsZXMpO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBkLmNvbHVtbnNbYi5jb2x1bW4uZGF0YUtleV0pe3ZhciBnPWQuY29sdW1uc1tiLmNvbHVtbi5kYXRhS2V5XTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZy5yZWN0KXthLmNvbnRlbnRXaWR0aD1cbmcucmVjdC53aWR0aDtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZC5oZWlnaHRSYXRpb3x8MD09PWQuaGVpZ2h0UmF0aW8pe3ZhciBmPWIucm93LnJhd1tiLmNvbHVtbi5kYXRhS2V5XS5yb3dzcGFuP2Iucm93LnJhd1tiLmNvbHVtbi5kYXRhS2V5XS5yZWN0LmhlaWdodC9iLnJvdy5yYXdbYi5jb2x1bW4uZGF0YUtleV0ucm93c3BhbjpiLnJvdy5yYXdbYi5jb2x1bW4uZGF0YUtleV0ucmVjdC5oZWlnaHQ7ZC5oZWlnaHRSYXRpbz1hLnN0eWxlcy5yb3dIZWlnaHQvZn1mPWIucm93LnJhd1tiLmNvbHVtbi5kYXRhS2V5XS5yZWN0LmhlaWdodCpkLmhlaWdodFJhdGlvO2Y+YS5zdHlsZXMucm93SGVpZ2h0JiYoYS5zdHlsZXMucm93SGVpZ2h0PWYpfVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnLnN0eWxlJiYhMCE9PWcuc3R5bGUuaGlkZGVuJiYoYS5zdHlsZXMuaGFsaWduPWcuc3R5bGUuYWxpZ24sXCJpbmhlcml0XCI9PT1lLnN0eWxlcy5maWxsQ29sb3ImJihhLnN0eWxlcy5maWxsQ29sb3I9Zy5zdHlsZS5iY29sb3IpLFxuXCJpbmhlcml0XCI9PT1lLnN0eWxlcy50ZXh0Q29sb3ImJihhLnN0eWxlcy50ZXh0Q29sb3I9Zy5zdHlsZS5jb2xvciksXCJpbmhlcml0XCI9PT1lLnN0eWxlcy5mb250U3R5bGUmJihhLnN0eWxlcy5mb250U3R5bGU9Zy5zdHlsZS5mc3R5bGUpKX19KTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jcmVhdGVkQ2VsbCYmKGUuY3JlYXRlZENlbGw9ZnVuY3Rpb24oYSxiKXtiPWQucm93b3B0aW9uc1tiLnJvdy5pbmRleCtcIjpcIitiLmNvbHVtbi5kYXRhS2V5XTtcInVuZGVmaW5lZFwiIT10eXBlb2YgYiYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuc3R5bGUmJiEwIT09Yi5zdHlsZS5oaWRkZW4mJihhLnN0eWxlcy5oYWxpZ249Yi5zdHlsZS5hbGlnbixcImluaGVyaXRcIj09PWUuc3R5bGVzLmZpbGxDb2xvciYmKGEuc3R5bGVzLmZpbGxDb2xvcj1iLnN0eWxlLmJjb2xvciksXCJpbmhlcml0XCI9PT1lLnN0eWxlcy50ZXh0Q29sb3ImJihhLnN0eWxlcy50ZXh0Q29sb3I9Yi5zdHlsZS5jb2xvciksXCJpbmhlcml0XCI9PT1cbmUuc3R5bGVzLmZvbnRTdHlsZSYmKGEuc3R5bGVzLmZvbnRTdHlsZT1iLnN0eWxlLmZzdHlsZSkpfSk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuZHJhd0hlYWRlckNlbGwmJihlLmRyYXdIZWFkZXJDZWxsPWZ1bmN0aW9uKGEsYil7dmFyIGM9ZC5jb2x1bW5zW2IuY29sdW1uLmRhdGFLZXldO3JldHVybighMCE9PWMuc3R5bGUuaGFzT3duUHJvcGVydHkoXCJoaWRkZW5cIil8fCEwIT09Yy5zdHlsZS5oaWRkZW4pJiYwPD1jLnJvd0luZGV4P21hKGEsYixjKTohMX0pO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmRyYXdDZWxsJiYoZS5kcmF3Q2VsbD1mdW5jdGlvbihhLGIpe3ZhciBjPWQucm93b3B0aW9uc1tiLnJvdy5pbmRleCtcIjpcIitiLmNvbHVtbi5kYXRhS2V5XTtpZihtYShhLGIsYykpaWYoZC5kb2MucmVjdChhLngsYS55LGEud2lkdGgsYS5oZWlnaHQsYS5zdHlsZXMuZmlsbFN0eWxlKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgYyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGMua2lkcyYmMDxjLmtpZHMubGVuZ3RoKXtiPVxuYS5oZWlnaHQvYy5yZWN0LmhlaWdodDtpZihiPmQuZGh8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBkLmRoKWQuZGg9YjtkLmR3PWEud2lkdGgvYy5yZWN0LndpZHRoO2I9YS50ZXh0UG9zLnk7cGEoYSxjLmtpZHMsZCk7YS50ZXh0UG9zLnk9YjtxYShhLGMua2lkcyxkKX1lbHNlIHFhKGEse30sZCk7cmV0dXJuITF9KTtkLmhlYWRlcnJvd3M9W107cD1jKHRoaXMpLmZpbmQoXCJ0aGVhZFwiKS5maW5kKGEudGhlYWRTZWxlY3Rvcik7cC5lYWNoKGZ1bmN0aW9uKCl7Yj0wO2QuaGVhZGVycm93c1tsXT1bXTtCKHRoaXMsXCJ0aCx0ZFwiLGwscC5sZW5ndGgsZnVuY3Rpb24oYSxjLGUpe3ZhciBmPXJhKGEpO2YudGl0bGU9eihhLGMsZSk7Zi5rZXk9YisrO2Yucm93SW5kZXg9bDtkLmhlYWRlcnJvd3NbbF0ucHVzaChmKX0pO2wrK30pO2lmKDA8bClmb3IodmFyIGY9bC0xOzA8PWY7KWMuZWFjaChkLmhlYWRlcnJvd3NbZl0sZnVuY3Rpb24oKXt2YXIgYT10aGlzOzA8ZiYmbnVsbD09PXRoaXMucmVjdCYmXG4oYT1kLmhlYWRlcnJvd3NbZi0xXVt0aGlzLmtleV0pO251bGwhPT1hJiYwPD1hLnJvd0luZGV4JiYoITAhPT1hLnN0eWxlLmhhc093blByb3BlcnR5KFwiaGlkZGVuXCIpfHwhMCE9PWEuc3R5bGUuaGlkZGVuKSYmZC5jb2x1bW5zLnB1c2goYSl9KSxmPTA8ZC5jb2x1bW5zLmxlbmd0aD8tMTpmLTE7dmFyIG09MDt0PVtdO3Q9dShjKHRoaXMpKTtjKHQpLmVhY2goZnVuY3Rpb24oKXt2YXIgYT1bXTtiPTA7Qih0aGlzLFwidGQsdGhcIixsLHAubGVuZ3RoK3QubGVuZ3RoLGZ1bmN0aW9uKGUsZixnKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGQuY29sdW1uc1tiXSl7dmFyIGg9e3RpdGxlOlwiXCIsa2V5OmIsc3R5bGU6e2hpZGRlbjohMH19O2QuY29sdW1ucy5wdXNoKGgpfVwidW5kZWZpbmVkXCIhPT10eXBlb2YgZSYmbnVsbCE9PWU/KGg9cmEoZSksaC5raWRzPWMoZSkuY2hpbGRyZW4oKSk6KGg9Yy5leHRlbmQoITAse30sZC5yb3dvcHRpb25zW20rXCI6XCIrKGItMSldKSxoLmNvbHNwYW49LTEpO2Qucm93b3B0aW9uc1ttK1xuXCI6XCIrYisrXT1oO2EucHVzaCh6KGUsZixnKSl9KTthLmxlbmd0aCYmKGQucm93cy5wdXNoKGEpLG0rKyk7bCsrfSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25CZWZvcmVBdXRvdGFibGUpZC5vbkJlZm9yZUF1dG90YWJsZShjKHRoaXMpLGQuY29sdW1ucyxkLnJvd3MsZSk7ZC5kb2MuYXV0b1RhYmxlKGQuY29sdW1ucyxkLnJvd3MsZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25BZnRlckF1dG90YWJsZSlkLm9uQWZ0ZXJBdXRvdGFibGUoYyh0aGlzKSxlKTthLmpzcGRmLmF1dG90YWJsZS5zdGFydFk9ZC5kb2MuYXV0b1RhYmxlRW5kUG9zWSgpK2UubWFyZ2luLnRvcH0pO2xhKGQuZG9jLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBkLmltYWdlcyYmITE9PT1qUXVlcnkuaXNFbXB0eU9iamVjdChkLmltYWdlcykpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBkLmhlYWRlcnJvd3MmJihkLmhlYWRlcnJvd3MubGVuZ3RoPTApO1widW5kZWZpbmVkXCIhPXR5cGVvZiBkLmNvbHVtbnMmJihkLmNvbHVtbnMubGVuZ3RoPVxuMCk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGQucm93cyYmKGQucm93cy5sZW5ndGg9MCk7ZGVsZXRlIGQuZG9jO2QuZG9jPW51bGx9KX1yZXR1cm4gdGhpc319KX0pKGpRdWVyeSk7XG5cbi8vISBtb21lbnQuanNcbi8vISB2ZXJzaW9uIDogMi4yMC4xXG4vLyEgYXV0aG9ycyA6IFRpbSBXb29kLCBJc2tyZW4gQ2hlcm5ldiwgTW9tZW50LmpzIGNvbnRyaWJ1dG9yc1xuLy8hIGxpY2Vuc2UgOiBNSVRcbi8vISBtb21lbnRqcy5jb21cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBob29rQ2FsbGJhY2s7XG5cbmZ1bmN0aW9uIGhvb2tzICgpIHtcbiAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbi8vIFRoaXMgaXMgZG9uZSB0byByZWdpc3RlciB0aGUgbWV0aG9kIGNhbGxlZCB3aXRoIG1vbWVudCgpXG4vLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbmZ1bmN0aW9uIHNldEhvb2tDYWxsYmFjayAoY2FsbGJhY2spIHtcbiAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFjaztcbn1cblxuZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEFycmF5IHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgLy8gSUU4IHdpbGwgdHJlYXQgdW5kZWZpbmVkIGFuZCBudWxsIGFzIG9iamVjdCBpZiBpdCB3YXNuJ3QgZm9yXG4gICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgIHJldHVybiBpbnB1dCAhPSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICByZXR1cm4gKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID09PSAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaztcbiAgICAgICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSc7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5mdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgIHZhciByZXMgPSBbXSwgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xufVxuXG5mdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZztcbiAgICB9XG5cbiAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW1wdHkgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgIHVudXNlZFRva2VucyAgICA6IFtdLFxuICAgICAgICB1bnVzZWRJbnB1dCAgICAgOiBbXSxcbiAgICAgICAgb3ZlcmZsb3cgICAgICAgIDogLTIsXG4gICAgICAgIGNoYXJzTGVmdE92ZXIgICA6IDAsXG4gICAgICAgIG51bGxJbnB1dCAgICAgICA6IGZhbHNlLFxuICAgICAgICBpbnZhbGlkTW9udGggICAgOiBudWxsLFxuICAgICAgICBpbnZhbGlkRm9ybWF0ICAgOiBmYWxzZSxcbiAgICAgICAgdXNlckludmFsaWRhdGVkIDogZmFsc2UsXG4gICAgICAgIGlzbyAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICBwYXJzZWREYXRlUGFydHMgOiBbXSxcbiAgICAgICAgbWVyaWRpZW0gICAgICAgIDogbnVsbCxcbiAgICAgICAgcmZjMjgyMiAgICAgICAgIDogZmFsc2UsXG4gICAgICAgIHdlZWtkYXlNaXNtYXRjaCA6IGZhbHNlXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyc2luZ0ZsYWdzKG0pIHtcbiAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICB9XG4gICAgcmV0dXJuIG0uX3BmO1xufVxuXG52YXIgc29tZTtcbmlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbn0gZWxzZSB7XG4gICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XG4gICAgICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZChtKSB7XG4gICAgaWYgKG0uX2lzVmFsaWQgPT0gbnVsbCkge1xuICAgICAgICB2YXIgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSk7XG4gICAgICAgIHZhciBwYXJzZWRQYXJ0cyA9IHNvbWUuY2FsbChmbGFncy5wYXJzZWREYXRlUGFydHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICByZXR1cm4gaSAhPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGlzTm93VmFsaWQgPSAhaXNOYU4obS5fZC5nZXRUaW1lKCkpICYmXG4gICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgIWZsYWdzLmludmFsaWRNb250aCAmJlxuICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAhZmxhZ3Mud2Vla2RheU1pc21hdGNoICYmXG4gICAgICAgICAgICAhZmxhZ3MubnVsbElucHV0ICYmXG4gICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgKCFmbGFncy5tZXJpZGllbSB8fCAoZmxhZ3MubWVyaWRpZW0gJiYgcGFyc2VkUGFydHMpKTtcblxuICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICBpc05vd1ZhbGlkID0gaXNOb3dWYWxpZCAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUludmFsaWQgKGZsYWdzKSB7XG4gICAgdmFyIG0gPSBjcmVhdGVVVEMoTmFOKTtcbiAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbTtcbn1cblxuLy8gUGx1Z2lucyB0aGF0IGFkZCBwcm9wZXJ0aWVzIHNob3VsZCBhbHNvIGFkZCB0aGUga2V5IGhlcmUgKG51bGwgdmFsdWUpLFxuLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cbnZhciBtb21lbnRQcm9wZXJ0aWVzID0gaG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdO1xuXG5mdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgdmFyIGksIHByb3AsIHZhbDtcblxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICB0by5faXNBTW9tZW50T2JqZWN0ID0gZnJvbS5faXNBTW9tZW50T2JqZWN0O1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgIHRvLl9pID0gZnJvbS5faTtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICB0by5fZiA9IGZyb20uX2Y7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgdG8uX2wgPSBmcm9tLl9sO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgdG8uX3N0cmljdCA9IGZyb20uX3N0cmljdDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgIHRvLl90em0gPSBmcm9tLl90em07XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgIHRvLl9pc1VUQyA9IGZyb20uX2lzVVRDO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgdG8uX29mZnNldCA9IGZyb20uX29mZnNldDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgdG8uX3BmID0gZ2V0UGFyc2luZ0ZsYWdzKGZyb20pO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgdG8uX2xvY2FsZSA9IGZyb20uX2xvY2FsZTtcbiAgICB9XG5cbiAgICBpZiAobW9tZW50UHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0bztcbn1cblxudmFyIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbmZ1bmN0aW9uIE1vbWVudChjb25maWcpIHtcbiAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgdGhpcy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5fZCAhPSBudWxsID8gY29uZmlnLl9kLmdldFRpbWUoKSA6IE5hTik7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wIGluIGNhc2UgdXBkYXRlT2Zmc2V0IGNyZWF0ZXMgbmV3IG1vbWVudFxuICAgIC8vIG9iamVjdHMuXG4gICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzTW9tZW50IChvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKTtcbn1cblxuZnVuY3Rpb24gYWJzRmxvb3IgKG51bWJlcikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgIC8vIC0wIC0+IDBcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHtcbiAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICB2YWx1ZSA9IDA7XG5cbiAgICBpZiAoY29lcmNlZE51bWJlciAhPT0gMCAmJiBpc0Zpbml0ZShjb2VyY2VkTnVtYmVyKSkge1xuICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheTEsIGFycmF5MiwgZG9udENvbnZlcnQpIHtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgIGRpZmZzID0gMCxcbiAgICAgICAgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKChkb250Q29udmVydCAmJiBhcnJheTFbaV0gIT09IGFycmF5MltpXSkgfHxcbiAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSkpIHtcbiAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbn1cblxuZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICBpZiAoaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgKHR5cGVvZiBjb25zb2xlICE9PSAgJ3VuZGVmaW5lZCcpICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0aW9uIHdhcm5pbmc6ICcgKyBtc2cpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHtcbiAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICB2YXIgYXJnO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcmcgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnICs9ICdcXG5bJyArIGkgKyAnXSAnO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0ga2V5ICsgJzogJyArIGFyZ3VtZW50c1swXVtrZXldICsgJywgJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpOyAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWEgYW5kIHNwYWNlXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdhcm4obXNnICsgJ1xcbkFyZ3VtZW50czogJyArIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLmpvaW4oJycpICsgJ1xcbicgKyAobmV3IEVycm9yKCkpLnN0YWNrKTtcbiAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0sIGZuKTtcbn1cblxudmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBkZXByZWNhdGVTaW1wbGUobmFtZSwgbXNnKSB7XG4gICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihuYW1lLCBtc2cpO1xuICAgIH1cbiAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWU7XG4gICAgfVxufVxuXG5ob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmYWxzZTtcbmhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGw7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbiB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG5mdW5jdGlvbiBzZXQgKGNvbmZpZykge1xuICAgIHZhciBwcm9wLCBpO1xuICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgIC8vIExlbmllbnQgb3JkaW5hbCBwYXJzaW5nIGFjY2VwdHMganVzdCBhIG51bWJlciBpbiBhZGRpdGlvbiB0b1xuICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX2RheU9mTW9udGhPcmRpbmFsUGFyc2UuXG4gICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICd8JyArICgvXFxkezEsMn0vKS5zb3VyY2UpO1xufVxuXG5mdW5jdGlvbiBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjaGlsZENvbmZpZykge1xuICAgIHZhciByZXMgPSBleHRlbmQoe30sIHBhcmVudENvbmZpZyksIHByb3A7XG4gICAgZm9yIChwcm9wIGluIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkgJiYgaXNPYmplY3QoY2hpbGRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0ge307XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBjaGlsZENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkQ29uZmlnW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlc1twcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHByb3AgaW4gcGFyZW50Q29uZmlnKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKHBhcmVudENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICBpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIGRvbid0IG1vZGlmeSBwYXJlbnQgY29uZmlnXG4gICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gTG9jYWxlKGNvbmZpZykge1xuICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldChjb25maWcpO1xuICAgIH1cbn1cblxudmFyIGtleXM7XG5cbmlmIChPYmplY3Qua2V5cykge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cztcbn0gZWxzZSB7XG4gICAga2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdmFyIGksIHJlcyA9IFtdO1xuICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xufVxuXG52YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgIHNhbWVFbHNlIDogJ0wnXG59O1xuXG5mdW5jdGlvbiBjYWxlbmRhciAoa2V5LCBtb20sIG5vdykge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdykgOiBvdXRwdXQ7XG59XG5cbnZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgTFRTICA6ICdoOm1tOnNzIEEnLFxuICAgIExUICAgOiAnaDptbSBBJyxcbiAgICBMICAgIDogJ01NL0REL1lZWVknLFxuICAgIExMICAgOiAnTU1NTSBELCBZWVlZJyxcbiAgICBMTEwgIDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQSdcbn07XG5cbmZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0IChrZXkpIHtcbiAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV07XG5cbiAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlci5yZXBsYWNlKC9NTU1NfE1NfEREfGRkZGQvZywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICByZXR1cm4gdmFsLnNsaWNlKDEpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07XG59XG5cbnZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJztcblxuZnVuY3Rpb24gaW52YWxpZERhdGUgKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbn1cblxudmFyIGRlZmF1bHRPcmRpbmFsID0gJyVkJztcbnZhciBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbmZ1bmN0aW9uIG9yZGluYWwgKG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoJyVkJywgbnVtYmVyKTtcbn1cblxudmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICBwYXN0ICAgOiAnJXMgYWdvJyxcbiAgICBzICA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICBtICA6ICdhIG1pbnV0ZScsXG4gICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgaCAgOiAnYW4gaG91cicsXG4gICAgaGggOiAnJWQgaG91cnMnLFxuICAgIGQgIDogJ2EgZGF5JyxcbiAgICBkZCA6ICclZCBkYXlzJyxcbiAgICBNICA6ICdhIG1vbnRoJyxcbiAgICBNTSA6ICclZCBtb250aHMnLFxuICAgIHkgIDogJ2EgeWVhcicsXG4gICAgeXkgOiAnJWQgeWVhcnMnXG59O1xuXG5mdW5jdGlvbiByZWxhdGl2ZVRpbWUgKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTtcbiAgICByZXR1cm4gKGlzRnVuY3Rpb24ob3V0cHV0KSkgP1xuICAgICAgICBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSA6XG4gICAgICAgIG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xufVxuXG5mdW5jdGlvbiBwYXN0RnV0dXJlIChkaWZmLCBvdXRwdXQpIHtcbiAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddO1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xufVxuXG52YXIgYWxpYXNlcyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRVbml0QWxpYXMgKHVuaXQsIHNob3J0aGFuZCkge1xuICAgIHZhciBsb3dlckNhc2UgPSB1bml0LnRvTG93ZXJDYXNlKCk7XG4gICAgYWxpYXNlc1tsb3dlckNhc2VdID0gYWxpYXNlc1tsb3dlckNhc2UgKyAncyddID0gYWxpYXNlc1tzaG9ydGhhbmRdID0gdW5pdDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJyA/IGFsaWFzZXNbdW5pdHNdIHx8IGFsaWFzZXNbdW5pdHMudG9Mb3dlckNhc2UoKV0gOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdFVuaXRzKGlucHV0T2JqZWN0KSB7XG4gICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgcHJvcDtcblxuICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9ybWFsaXplZElucHV0O1xufVxuXG52YXIgcHJpb3JpdGllcyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRVbml0UHJpb3JpdHkodW5pdCwgcHJpb3JpdHkpIHtcbiAgICBwcmlvcml0aWVzW3VuaXRdID0gcHJpb3JpdHk7XG59XG5cbmZ1bmN0aW9uIGdldFByaW9yaXRpemVkVW5pdHModW5pdHNPYmopIHtcbiAgICB2YXIgdW5pdHMgPSBbXTtcbiAgICBmb3IgKHZhciB1IGluIHVuaXRzT2JqKSB7XG4gICAgICAgIHVuaXRzLnB1c2goe3VuaXQ6IHUsIHByaW9yaXR5OiBwcmlvcml0aWVzW3VdfSk7XG4gICAgfVxuICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgIH0pO1xuICAgIHJldHVybiB1bml0cztcbn1cblxuZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgIHplcm9zVG9GaWxsID0gdGFyZ2V0TGVuZ3RoIC0gYWJzTnVtYmVyLmxlbmd0aCxcbiAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgIHJldHVybiAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgKyBhYnNOdW1iZXI7XG59XG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xZWVlZWVl8WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZztcblxudmFyIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2c7XG5cbnZhciBmb3JtYXRGdW5jdGlvbnMgPSB7fTtcblxudmFyIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbi8vIHRva2VuOiAgICAnTSdcbi8vIHBhZGRlZDogICBbJ01NJywgMl1cbi8vIG9yZGluYWw6ICAnTW8nXG4vLyBjYWxsYmFjazogZnVuY3Rpb24gKCkgeyB0aGlzLm1vbnRoKCkgKyAxIH1cbmZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuICh0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dID0gZnVuYztcbiAgICB9XG4gICAgaWYgKHBhZGRlZCkge1xuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdG9rZW4pO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xufVxuXG5mdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLCBpLCBsZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gJycsIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdCkgOiBhcnJheVtpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59XG5cbi8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID0gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgIHZhciBpID0gNTtcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICB9XG5cbiAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobG9jYWxGb3JtYXR0aW5nVG9rZW5zLCByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMpO1xuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgaSAtPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXQ7XG59XG5cbnZhciBtYXRjaDEgICAgICAgICA9IC9cXGQvOyAgICAgICAgICAgIC8vICAgICAgIDAgLSA5XG52YXIgbWF0Y2gyICAgICAgICAgPSAvXFxkXFxkLzsgICAgICAgICAgLy8gICAgICAwMCAtIDk5XG52YXIgbWF0Y2gzICAgICAgICAgPSAvXFxkezN9LzsgICAgICAgICAvLyAgICAgMDAwIC0gOTk5XG52YXIgbWF0Y2g0ICAgICAgICAgPSAvXFxkezR9LzsgICAgICAgICAvLyAgICAwMDAwIC0gOTk5OVxudmFyIG1hdGNoNiAgICAgICAgID0gL1srLV0/XFxkezZ9LzsgICAgLy8gLTk5OTk5OSAtIDk5OTk5OVxudmFyIG1hdGNoMXRvMiAgICAgID0gL1xcZFxcZD8vOyAgICAgICAgIC8vICAgICAgIDAgLSA5OVxudmFyIG1hdGNoM3RvNCAgICAgID0gL1xcZFxcZFxcZFxcZD8vOyAgICAgLy8gICAgIDk5OSAtIDk5OTlcbnZhciBtYXRjaDV0bzYgICAgICA9IC9cXGRcXGRcXGRcXGRcXGRcXGQ/LzsgLy8gICA5OTk5OSAtIDk5OTk5OVxudmFyIG1hdGNoMXRvMyAgICAgID0gL1xcZHsxLDN9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OVxudmFyIG1hdGNoMXRvNCAgICAgID0gL1xcZHsxLDR9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OTlcbnZhciBtYXRjaDF0bzYgICAgICA9IC9bKy1dP1xcZHsxLDZ9LzsgIC8vIC05OTk5OTkgLSA5OTk5OTlcblxudmFyIG1hdGNoVW5zaWduZWQgID0gL1xcZCsvOyAgICAgICAgICAgLy8gICAgICAgMCAtIGluZlxudmFyIG1hdGNoU2lnbmVkICAgID0gL1srLV0/XFxkKy87ICAgICAgLy8gICAgLWluZiAtIGluZlxuXG52YXIgbWF0Y2hPZmZzZXQgICAgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2k7IC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxudmFyIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naTsgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcblxudmFyIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LzsgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcblxuLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuXG4vLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG52YXIgbWF0Y2hXb3JkID0gL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2k7XG5cblxudmFyIHJlZ2V4ZXMgPSB7fTtcblxuZnVuY3Rpb24gYWRkUmVnZXhUb2tlbiAodG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleCkgPyByZWdleCA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICByZXR1cm4gKGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4KSA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuICh0b2tlbiwgY29uZmlnKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgIH1cblxuICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xufVxuXG4vLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG5mdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgcmV0dXJuIHJlZ2V4RXNjYXBlKHMucmVwbGFjZSgnXFxcXCcsICcnKS5yZXBsYWNlKC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csIGZ1bmN0aW9uIChtYXRjaGVkLCBwMSwgcDIsIHAzLCBwNCkge1xuICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG59XG5cbnZhciB0b2tlbnMgPSB7fTtcblxuZnVuY3Rpb24gYWRkUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGksIGZ1bmMgPSBjYWxsYmFjaztcbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgfVxuICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IHRva2VuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgfVxufVxuXG52YXIgWUVBUiA9IDA7XG52YXIgTU9OVEggPSAxO1xudmFyIERBVEUgPSAyO1xudmFyIEhPVVIgPSAzO1xudmFyIE1JTlVURSA9IDQ7XG52YXIgU0VDT05EID0gNTtcbnZhciBNSUxMSVNFQ09ORCA9IDY7XG52YXIgV0VFSyA9IDc7XG52YXIgV0VFS0RBWSA9IDg7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ1knLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICByZXR1cm4geSA8PSA5OTk5ID8gJycgKyB5IDogJysnICsgeTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgICA0XSwgICAgICAgMCwgJ3llYXInKTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCAgNV0sICAgICAgIDAsICd5ZWFyJyk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZWScsIDYsIHRydWVdLCAwLCAneWVhcicpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygneWVhcicsICd5Jyk7XG5cbi8vIFBSSU9SSVRJRVNcblxuYWRkVW5pdFByaW9yaXR5KCd5ZWFyJywgMSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignWScsICAgICAgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignWVknLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignWVlZWScsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuYWRkUmVnZXhUb2tlbignWVlZWVknLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG5hZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtZRUFSXSA9IGlucHV0Lmxlbmd0aCA9PT0gMiA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbn0pO1xuYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbWUVBUl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG59XG5cbmZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbn1cblxuLy8gSE9PS1NcblxuaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xufTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgdHJ1ZSk7XG5cbmZ1bmN0aW9uIGdldElzTGVhcFllYXIgKCkge1xuICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTtcbn1cblxuZnVuY3Rpb24gbWFrZUdldFNldCAodW5pdCwga2VlcFRpbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIHVuaXQpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0IChtb20sIHVuaXQpIHtcbiAgICByZXR1cm4gbW9tLmlzVmFsaWQoKSA/XG4gICAgICAgIG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpIDogTmFOO1xufVxuXG5mdW5jdGlvbiBzZXQkMSAobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgIGlmIChtb20uaXNWYWxpZCgpICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgaWYgKHVuaXQgPT09ICdGdWxsWWVhcicgJiYgaXNMZWFwWWVhcihtb20ueWVhcigpKSAmJiBtb20ubW9udGgoKSA9PT0gMSAmJiBtb20uZGF0ZSgpID09PSAyOSkge1xuICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlLCBtb20ubW9udGgoKSwgZGF5c0luTW9udGgodmFsdWUsIG1vbS5tb250aCgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIHN0cmluZ0dldCAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5cbmZ1bmN0aW9uIHN0cmluZ1NldCAodW5pdHMsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVPYmplY3RVbml0cyh1bml0cyk7XG4gICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW9yaXRpemVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzW3ByaW9yaXRpemVkW2ldLnVuaXRdKHVuaXRzW3ByaW9yaXRpemVkW2ldLnVuaXRdKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG1vZChuLCB4KSB7XG4gICAgcmV0dXJuICgobiAlIHgpICsgeCkgJSB4O1xufVxuXG52YXIgaW5kZXhPZjtcblxuaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xufSBlbHNlIHtcbiAgICBpbmRleE9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgLy8gSSBrbm93XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IG8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICBpZiAoaXNOYU4oeWVhcikgfHwgaXNOYU4obW9udGgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHZhciBtb2RNb250aCA9IG1vZChtb250aCwgMTIpO1xuICAgIHllYXIgKz0gKG1vbnRoIC0gbW9kTW9udGgpIC8gMTI7XG4gICAgcmV0dXJuIG1vZE1vbnRoID09PSAxID8gKGlzTGVhcFllYXIoeWVhcikgPyAyOSA6IDI4KSA6ICgzMSAtIG1vZE1vbnRoICUgNyAlIDIpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7XG59KTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ21vbnRoJywgJ00nKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdtb250aCcsIDgpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ00nLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignTU0nLCAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ01NTScsICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnRSZWdleChpc1N0cmljdCk7XG59KTtcbmFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUubW9udGhzUmVnZXgoaXNTdHJpY3QpO1xufSk7XG5cbmFkZFBhcnNlVG9rZW4oWydNJywgJ01NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xufSk7XG5cbmFkZFBhcnNlVG9rZW4oWydNTU0nLCAnTU1NTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXQ7XG4gICAgfVxufSk7XG5cbi8vIExPQ0FMRVNcblxudmFyIE1PTlRIU19JTl9GT1JNQVQgPSAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NPy87XG52YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlTW9udGhzIChtLCBmb3JtYXQpIHtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRocyA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXTtcbiAgICB9XG4gICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRoc1ttLm1vbnRoKCldIDpcbiAgICAgICAgdGhpcy5fbW9udGhzWyh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPSAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydCAobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0IDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ107XG4gICAgfVxuICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV0gOlxuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFtNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlIChtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgfVxuXG4gICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyXG4gICAgLy8gc2VlIHNvcnRpbmcgaW4gY29tcHV0ZU1vbnRoc1BhcnNlXG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NTScgJiYgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTScgJiYgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBzZXRNb250aCAobW9tLCB2YWx1ZSkge1xuICAgIHZhciBkYXlPZk1vbnRoO1xuXG4gICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgIC8vIE5vIG9wXG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlP1xuICAgICAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGF5T2ZNb250aCA9IE1hdGgubWluKG1vbS5kYXRlKCksIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIHZhbHVlKSk7XG4gICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArICdNb250aCddKHZhbHVlLCBkYXlPZk1vbnRoKTtcbiAgICByZXR1cm4gbW9tO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRNb250aCAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldERheXNJbk1vbnRoICgpIHtcbiAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG59XG5cbnZhciBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gbW9udGhzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSAoKSB7XG4gICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgaSwgbW9tO1xuICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgfVxuICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEYXRlICh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgIC8vIGNhbid0IGp1c3QgYXBwbHkoKSB0byBjcmVhdGUgYSBkYXRlOlxuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xODEzNDhcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKTtcblxuICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCAmJiBpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVVENEYXRlICh5KSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcblxuICAgIC8vIHRoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDAgJiYgaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbn1cblxuLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbmZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgIHZhciAvLyBmaXJzdC13ZWVrIGRheSAtLSB3aGljaCBqYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayAoNCBmb3IgaXNvLCAxIGZvciBvdGhlcilcbiAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICBmd2RsdyA9ICg3ICsgY3JlYXRlVVRDRGF0ZSh5ZWFyLCAwLCBmd2QpLmdldFVUQ0RheSgpIC0gZG93KSAlIDc7XG5cbiAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXlcbmZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgIHZhciBsb2NhbFdlZWtkYXkgPSAoNyArIHdlZWtkYXkgLSBkb3cpICUgNyxcbiAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgIHJlc1llYXIsIHJlc0RheU9mWWVhcjtcblxuICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICByZXNZZWFyID0geWVhciAtIDE7XG4gICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXI7XG4gICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgIHJlc1llYXIgPSB5ZWFyICsgMTtcbiAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyIC0gZGF5c0luWWVhcih5ZWFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXNZZWFyID0geWVhcjtcbiAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGRvdywgZG95KSB7XG4gICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQobW9tLnllYXIoKSwgZG93LCBkb3kpLFxuICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICByZXNXZWVrLCByZXNZZWFyO1xuXG4gICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpIC0gMTtcbiAgICAgICAgcmVzV2VlayA9IHdlZWsgKyB3ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrIC0gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpO1xuICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCk7XG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgIHllYXI6IHJlc1llYXJcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICByZXR1cm4gKGRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gNztcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbigndycsIFsnd3cnLCAyXSwgJ3dvJywgJ3dlZWsnKTtcbmFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnd2VlaycsICd3Jyk7XG5hZGRVbml0QWxpYXMoJ2lzb1dlZWsnLCAnVycpO1xuXG4vLyBQUklPUklUSUVTXG5cbmFkZFVuaXRQcmlvcml0eSgnd2VlaycsIDUpO1xuYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrJywgNSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbigndycsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdXJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMSldID0gdG9JbnQoaW5wdXQpO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuLy8gTE9DQUxFU1xuXG5mdW5jdGlvbiBsb2NhbGVXZWVrIChtb20pIHtcbiAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2Vlaztcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVXZWVrID0ge1xuICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbn07XG5cbmZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG59XG5cbmZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG59XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0V2VlayAoaW5wdXQpIHtcbiAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRJU09XZWVrIChpbnB1dCkge1xuICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuYWRkRm9ybWF0VG9rZW4oJ2RkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignZGRkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignZScsIDAsIDAsICd3ZWVrZGF5Jyk7XG5hZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdkYXknLCAnZCcpO1xuYWRkVW5pdEFsaWFzKCd3ZWVrZGF5JywgJ2UnKTtcbmFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJyk7XG5cbi8vIFBSSU9SSVRZXG5hZGRVbml0UHJpb3JpdHkoJ2RheScsIDExKTtcbmFkZFVuaXRQcmlvcml0eSgnd2Vla2RheScsIDExKTtcbmFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla2RheScsIDExKTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdkJywgICAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2UnLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignRScsICAgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpO1xufSk7XG5hZGRSZWdleFRva2VuKCdkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xufSk7XG5hZGRSZWdleFRva2VuKCdkZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNSZWdleChpc1N0cmljdCk7XG59KTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB2YXIgd2Vla2RheSA9IGNvbmZpZy5fbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICB3ZWVrLmQgPSB3ZWVrZGF5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgfVxufSk7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgd2Vla1t0b2tlbl0gPSB0b0ludChpbnB1dCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9XG5cbiAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KSAlIDcgfHwgNztcbiAgICB9XG4gICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbn1cblxuLy8gTE9DQUxFU1xuXG52YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID0gJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXMgKG0sIGZvcm1hdCkge1xuICAgIGlmICghbSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5cyA6XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1snc3RhbmRhbG9uZSddO1xuICAgIH1cbiAgICByZXR1cm4gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5c1ttLmRheSgpXSA6XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzW3RoaXMuX3dlZWtkYXlzLmlzRm9ybWF0LnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLmRheSgpXTtcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzU2hvcnQgKG0pIHtcbiAgICByZXR1cm4gKG0pID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbiAobSkge1xuICAgIHJldHVybiAobSkgPyB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzTWluO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZSQxKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2UgKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZGQnICYmIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkJyAmJiB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZCcgJiYgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXREYXlPZldlZWsgKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpO1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGF5O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cbiAgICB2YXIgd2Vla2RheSA9ICh0aGlzLmRheSgpICsgNyAtIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdykgJSA3O1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cblxuICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgIC8vIGFzIGEgc2V0dGVyLCBzdW5kYXkgc2hvdWxkIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgd2Vlay5cblxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRheSh0aGlzLmRheSgpICUgNyA/IHdlZWtkYXkgOiB3ZWVrZGF5IC0gNyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgNztcbiAgICB9XG59XG5cbnZhciBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIHdlZWtkYXlzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIHdlZWtkYXlzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdFdlZWtkYXlzTWluUmVnZXggPSBtYXRjaFdvcmQ7XG5mdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzTWluUmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBjb21wdXRlV2Vla2RheXNQYXJzZSAoKSB7XG4gICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIG1pblBpZWNlcyA9IFtdLCBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgIGksIG1vbSwgbWlucCwgc2hvcnRwLCBsb25ncDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgIG1pbnAgPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICBzaG9ydHAgPSB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgIGxvbmdwID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKTtcbiAgICAgICAgbWluUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICB9XG4gICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgIH1cblxuICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcblxuICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG59XG5cbmZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbn1cblxuYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG5hZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG5hZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdCk7XG5cbmFkZEZvcm1hdFRva2VuKCdobW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xufSk7XG5cbmZ1bmN0aW9uIG1lcmlkaWVtICh0b2tlbiwgbG93ZXJjYXNlKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKHRoaXMuaG91cnMoKSwgdGhpcy5taW51dGVzKCksIGxvd2VyY2FzZSk7XG4gICAgfSk7XG59XG5cbm1lcmlkaWVtKCdhJywgdHJ1ZSk7XG5tZXJpZGllbSgnQScsIGZhbHNlKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2hvdXInLCAnaCcpO1xuXG4vLyBQUklPUklUWVxuYWRkVW5pdFByaW9yaXR5KCdob3VyJywgMTMpO1xuXG4vLyBQQVJTSU5HXG5cbmZ1bmN0aW9uIG1hdGNoTWVyaWRpZW0gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xufVxuXG5hZGRSZWdleFRva2VuKCdhJywgIG1hdGNoTWVyaWRpZW0pO1xuYWRkUmVnZXhUb2tlbignQScsICBtYXRjaE1lcmlkaWVtKTtcbmFkZFJlZ2V4VG9rZW4oJ0gnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2gnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2snLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignaGgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbmFkZFJlZ2V4VG9rZW4oJ2htbXNzJywgbWF0Y2g1dG82KTtcbmFkZFJlZ2V4VG9rZW4oJ0htbScsIG1hdGNoM3RvNCk7XG5hZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbmFkZFBhcnNlVG9rZW4oWydIJywgJ0hIJ10sIEhPVVIpO1xuYWRkUGFyc2VUb2tlbihbJ2snLCAna2snXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIGtJbnB1dCA9IHRvSW50KGlucHV0KTtcbiAgICBhcnJheVtIT1VSXSA9IGtJbnB1dCA9PT0gMjQgPyAwIDoga0lucHV0O1xufSk7XG5hZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5faXNQbSA9IGNvbmZpZy5fbG9jYWxlLmlzUE0oaW5wdXQpO1xuICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbn0pO1xuYWRkUGFyc2VUb2tlbihbJ2gnLCAnaGgnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ2htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ0htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG59KTtcblxuLy8gTE9DQUxFU1xuXG5mdW5jdGlvbiBsb2NhbGVJc1BNIChpbnB1dCkge1xuICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnKTtcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlID0gL1thcF1cXC4/bT9cXC4/L2k7XG5mdW5jdGlvbiBsb2NhbGVNZXJpZGllbSAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgfVxufVxuXG5cbi8vIE1PTUVOVFNcblxuLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4vLyBzcGVjaWZpZWQgd2hpY2ggaG91ciBoZSB3YW50cy4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4vLyBhIG5ldyB0aW1lem9uZSkgbWFrZXMgc2Vuc2UuIEFkZGluZy9zdWJ0cmFjdGluZyBob3VycyBkb2VzIG5vdCBmb2xsb3dcbi8vIHRoaXMgcnVsZS5cbnZhciBnZXRTZXRIb3VyID0gbWFrZUdldFNldCgnSG91cnMnLCB0cnVlKTtcblxuLy8gbW9udGhzXG4vLyB3ZWVrXG4vLyB3ZWVrZGF5c1xuLy8gbWVyaWRpZW1cbnZhciBiYXNlQ29uZmlnID0ge1xuICAgIGNhbGVuZGFyOiBkZWZhdWx0Q2FsZW5kYXIsXG4gICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICBpbnZhbGlkRGF0ZTogZGVmYXVsdEludmFsaWREYXRlLFxuICAgIG9yZGluYWw6IGRlZmF1bHRPcmRpbmFsLFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgIHJlbGF0aXZlVGltZTogZGVmYXVsdFJlbGF0aXZlVGltZSxcblxuICAgIG1vbnRoczogZGVmYXVsdExvY2FsZU1vbnRocyxcbiAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuXG4gICAgd2VlazogZGVmYXVsdExvY2FsZVdlZWssXG5cbiAgICB3ZWVrZGF5czogZGVmYXVsdExvY2FsZVdlZWtkYXlzLFxuICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgd2Vla2RheXNTaG9ydDogZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQsXG5cbiAgICBtZXJpZGllbVBhcnNlOiBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZVxufTtcblxuLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xudmFyIGxvY2FsZXMgPSB7fTtcbnZhciBsb2NhbGVGYW1pbGllcyA9IHt9O1xudmFyIGdsb2JhbExvY2FsZTtcblxuZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGtleSkge1xuICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbn1cblxuLy8gcGljayB0aGUgbG9jYWxlIGZyb20gdGhlIGFycmF5XG4vLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuZnVuY3Rpb24gY2hvb3NlTG9jYWxlKG5hbWVzKSB7XG4gICAgdmFyIGkgPSAwLCBqLCBuZXh0LCBsb2NhbGUsIHNwbGl0O1xuXG4gICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7XG4gICAgICAgIGogPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsO1xuICAgICAgICB3aGlsZSAoaiA+IDApIHtcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5sZW5ndGggPj0gaiAmJiBjb21wYXJlQXJyYXlzKHNwbGl0LCBuZXh0LCB0cnVlKSA+PSBqIC0gMSkge1xuICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGotLTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICB2YXIgb2xkTG9jYWxlID0gbnVsbDtcbiAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgIGlmICghbG9jYWxlc1tuYW1lXSAmJiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgIHZhciBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG9sZExvY2FsZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbi8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4vLyBsb2NhbGUga2V5LlxuZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlIChrZXksIHZhbHVlcykge1xuICAgIHZhciBkYXRhO1xuICAgIGlmIChrZXkpIHtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgIGRhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUxvY2FsZSAobmFtZSwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlICcgK1xuICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cblxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbG9jYWxlLCB0bXBMb2NhbGUsIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgIC8vIE1FUkdFXG4gICAgICAgIHRtcExvY2FsZSA9IGxvYWRMb2NhbGUobmFtZSk7XG4gICAgICAgIGlmICh0bXBMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gdG1wTG9jYWxlLl9jb25maWc7XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShjb25maWcpO1xuICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZTtcblxuICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbn1cblxuLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxuZnVuY3Rpb24gZ2V0TG9jYWxlIChrZXkpIHtcbiAgICB2YXIgbG9jYWxlO1xuXG4gICAgaWYgKGtleSAmJiBrZXkuX2xvY2FsZSAmJiBrZXkuX2xvY2FsZS5fYWJicikge1xuICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICB9XG5cbiAgICBpZiAoIWtleSkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgIH1cblxuICAgIGlmICghaXNBcnJheShrZXkpKSB7XG4gICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICB9XG4gICAgICAgIGtleSA9IFtrZXldO1xuICAgIH1cblxuICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbn1cblxuZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cgKG0pIHtcbiAgICB2YXIgb3ZlcmZsb3c7XG4gICAgdmFyIGEgPSBtLl9hO1xuXG4gICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICBhW01PTlRIXSAgICAgICA8IDAgfHwgYVtNT05USF0gICAgICAgPiAxMSAgPyBNT05USCA6XG4gICAgICAgICAgICBhW0RBVEVdICAgICAgICA8IDEgfHwgYVtEQVRFXSAgICAgICAgPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSkgPyBEQVRFIDpcbiAgICAgICAgICAgIGFbSE9VUl0gICAgICAgIDwgMCB8fCBhW0hPVVJdICAgICAgICA+IDI0IHx8IChhW0hPVVJdID09PSAyNCAmJiAoYVtNSU5VVEVdICE9PSAwIHx8IGFbU0VDT05EXSAhPT0gMCB8fCBhW01JTExJU0VDT05EXSAhPT0gMCkpID8gSE9VUiA6XG4gICAgICAgICAgICBhW01JTlVURV0gICAgICA8IDAgfHwgYVtNSU5VVEVdICAgICAgPiA1OSAgPyBNSU5VVEUgOlxuICAgICAgICAgICAgYVtTRUNPTkRdICAgICAgPCAwIHx8IGFbU0VDT05EXSAgICAgID4gNTkgID8gU0VDT05EIDpcbiAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdIDwgMCB8fCBhW01JTExJU0VDT05EXSA+IDk5OSA/IE1JTExJU0VDT05EIDpcbiAgICAgICAgICAgIC0xO1xuXG4gICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKSkge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla3MgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgcmV0dXJuIG07XG59XG5cbi8vIFBpY2sgdGhlIGZpcnN0IGRlZmluZWQgb2YgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5cbmZ1bmN0aW9uIGRlZmF1bHRzKGEsIGIsIGMpIHtcbiAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBiO1xuICAgIH1cbiAgICByZXR1cm4gYztcbn1cblxuZnVuY3Rpb24gY3VycmVudERhdGVBcnJheShjb25maWcpIHtcbiAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRVVENGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRVVENNb250aCgpLCBub3dWYWx1ZS5nZXRVVENEYXRlKCldO1xuICAgIH1cbiAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV07XG59XG5cbi8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbi8vIG5vdGU6IGFsbCB2YWx1ZXMgcGFzdCB0aGUgeWVhciBhcmUgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbG93ZXN0IHBvc3NpYmxlIHZhbHVlLlxuLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG5mdW5jdGlvbiBjb25maWdGcm9tQXJyYXkgKGNvbmZpZykge1xuICAgIHZhciBpLCBkYXRlLCBpbnB1dCA9IFtdLCBjdXJyZW50RGF0ZSwgZXhwZWN0ZWRXZWVrZGF5LCB5ZWFyVG9Vc2U7XG5cbiAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgIC8vY29tcHV0ZSBkYXkgb2YgdGhlIHllYXIgZnJvbSB3ZWVrcyBhbmQgd2Vla2RheXNcbiAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICB9XG5cbiAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkgfHwgY29uZmlnLl9kYXlPZlllYXIgPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUuXG4gICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgLy8gKiBpZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBvbmx5IHllYXJcbiAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV07XG4gICAgfVxuXG4gICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSAoY29uZmlnLl9hW2ldID09IG51bGwpID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIDI0OjAwOjAwLjAwMFxuICAgIGlmIChjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW1NFQ09ORF0gPT09IDAgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDApIHtcbiAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMDtcbiAgICB9XG5cbiAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkobnVsbCwgaW5wdXQpO1xuICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDID8gY29uZmlnLl9kLmdldFVUQ0RheSgpIDogY29uZmlnLl9kLmdldERheSgpO1xuXG4gICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGZvciBtaXNtYXRjaGluZyBkYXkgb2Ygd2Vla1xuICAgIGlmIChjb25maWcuX3cgJiYgdHlwZW9mIGNvbmZpZy5fdy5kICE9PSAndW5kZWZpbmVkJyAmJiBjb25maWcuX3cuZCAhPT0gZXhwZWN0ZWRXZWVrZGF5KSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93O1xuXG4gICAgdyA9IGNvbmZpZy5fdztcbiAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgIGRvdyA9IDE7XG4gICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5HRywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXIpO1xuICAgICAgICB3ZWVrID0gZGVmYXVsdHMody5XLCAxKTtcbiAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgIHZhciBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2luaW5nIG9mIHdlZWtcbiAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICBpZiAody5lIDwgMCB8fCB3LmUgPiA2KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla2RheSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXI7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgfVxufVxuXG4vLyBpc28gODYwMSByZWdleFxuLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG52YXIgZXh0ZW5kZWRJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcbnZhciBiYXNpY0lzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcblxudmFyIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy87XG5cbnZhciBpc29EYXRlcyA9IFtcbiAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAvLyBZWVlZTU0gaXMgTk9UIGFsbG93ZWQgYnkgdGhlIHN0YW5kYXJkXG4gICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgIFsnWVlZWURERCcsIC9cXGR7N30vXVxuXTtcblxuLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xudmFyIGlzb1RpbWVzID0gW1xuICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgIFsnSEgnLCAvXFxkXFxkL11cbl07XG5cbnZhciBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKFxcLT9cXGQrKS9pO1xuXG4vLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuZnVuY3Rpb24gY29uZmlnRnJvbUlTTyhjb25maWcpIHtcbiAgICB2YXIgaSwgbCxcbiAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICBtYXRjaCA9IGV4dGVuZGVkSXNvUmVnZXguZXhlYyhzdHJpbmcpIHx8IGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICBhbGxvd1RpbWUsIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQsIHR6Rm9ybWF0O1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbMl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgfVxufVxuXG4vLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG52YXIgcmZjMjgyMiA9IC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksP1xccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoWystXVxcZHs0fSkpJC87XG5cbmZ1bmN0aW9uIGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpIHtcbiAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpLFxuICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgcGFyc2VJbnQoaG91clN0ciwgMTApLFxuICAgICAgICBwYXJzZUludChtaW51dGVTdHIsIDEwKVxuICAgIF07XG5cbiAgICBpZiAoc2Vjb25kU3RyKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHNlY29uZFN0ciwgMTApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSB7XG4gICAgdmFyIHllYXIgPSBwYXJzZUludCh5ZWFyU3RyLCAxMCk7XG4gICAgaWYgKHllYXIgPD0gNDkpIHtcbiAgICAgICAgcmV0dXJuIDIwMDAgKyB5ZWFyO1xuICAgIH0gZWxzZSBpZiAoeWVhciA8PSA5OTkpIHtcbiAgICAgICAgcmV0dXJuIDE5MDAgKyB5ZWFyO1xuICAgIH1cbiAgICByZXR1cm4geWVhcjtcbn1cblxuZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgcmV0dXJuIHMucmVwbGFjZSgvXFwoW14pXSpcXCl8W1xcblxcdF0vZywgJyAnKS5yZXBsYWNlKC8oXFxzXFxzKykvZywgJyAnKS50cmltKCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB0aGUgdmFuaWxsYSBKUyBEYXRlIG9iamVjdCB3aXRoIGFuIGluZGVwZW50ZW50IGRheS1vZi13ZWVrIGNoZWNrLlxuICAgICAgICB2YXIgd2Vla2RheVByb3ZpZGVkID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgIHdlZWtkYXlBY3R1YWwgPSBuZXcgRGF0ZShwYXJzZWRJbnB1dFswXSwgcGFyc2VkSW5wdXRbMV0sIHBhcnNlZElucHV0WzJdKS5nZXREYXkoKTtcbiAgICAgICAgaWYgKHdlZWtkYXlQcm92aWRlZCAhPT0gd2Vla2RheUFjdHVhbCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG52YXIgb2JzT2Zmc2V0cyA9IHtcbiAgICBVVDogMCxcbiAgICBHTVQ6IDAsXG4gICAgRURUOiAtNCAqIDYwLFxuICAgIEVTVDogLTUgKiA2MCxcbiAgICBDRFQ6IC01ICogNjAsXG4gICAgQ1NUOiAtNiAqIDYwLFxuICAgIE1EVDogLTYgKiA2MCxcbiAgICBNU1Q6IC03ICogNjAsXG4gICAgUERUOiAtNyAqIDYwLFxuICAgIFBTVDogLTggKiA2MFxufTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9ic09mZnNldCwgbWlsaXRhcnlPZmZzZXQsIG51bU9mZnNldCkge1xuICAgIGlmIChvYnNPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgICB9IGVsc2UgaWYgKG1pbGl0YXJ5T2Zmc2V0KSB7XG4gICAgICAgIC8vIHRoZSBvbmx5IGFsbG93ZWQgbWlsaXRhcnkgdHogaXMgWlxuICAgICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaG0gPSBwYXJzZUludChudW1PZmZzZXQsIDEwKTtcbiAgICAgICAgdmFyIG0gPSBobSAlIDEwMCwgaCA9IChobSAtIG0pIC8gMTAwO1xuICAgICAgICByZXR1cm4gaCAqIDYwICsgbTtcbiAgICB9XG59XG5cbi8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZykge1xuICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgdmFyIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhtYXRjaFs0XSwgbWF0Y2hbM10sIG1hdGNoWzJdLCBtYXRjaFs1XSwgbWF0Y2hbNl0sIG1hdGNoWzddKTtcbiAgICAgICAgaWYgKCFjaGVja1dlZWtkYXkobWF0Y2hbMV0sIHBhcnNlZEFycmF5LCBjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2EgPSBwYXJzZWRBcnJheTtcbiAgICAgICAgY29uZmlnLl90em0gPSBjYWxjdWxhdGVPZmZzZXQobWF0Y2hbOF0sIG1hdGNoWzldLCBtYXRjaFsxMF0pO1xuXG4gICAgICAgIGNvbmZpZy5fZCA9IGNyZWF0ZVVUQ0RhdGUuYXBwbHkobnVsbCwgY29uZmlnLl9hKTtcbiAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICB9XG59XG5cbi8vIGRhdGUgZnJvbSBpc28gZm9ybWF0IG9yIGZhbGxiYWNrXG5mdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcblxuICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG59XG5cbmhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICd2YWx1ZSBwcm92aWRlZCBpcyBub3QgaW4gYSByZWNvZ25pemVkIFJGQzI4MjIgb3IgSVNPIGZvcm1hdC4gbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUoKSwgJyArXG4gICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgJ2Rpc2NvdXJhZ2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYW4gdXBjb21pbmcgbWFqb3IgcmVsZWFzZS4gUGxlYXNlIHJlZmVyIHRvICcgK1xuICAgICdodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2pzLWRhdGUvIGZvciBtb3JlIGluZm8uJyxcbiAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgfVxuKTtcblxuLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbmhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbi8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25maWcuX2EgPSBbXTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgaSwgcGFyc2VkSW5wdXQsIHRva2VucywgdG9rZW4sIHNraXBwZWQsXG4gICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwO1xuXG4gICAgdG9rZW5zID0gZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygndG9rZW4nLCB0b2tlbiwgJ3BhcnNlZElucHV0JywgcGFyc2VkSW5wdXQsXG4gICAgICAgIC8vICAgICAgICAgJ3JlZ2V4JywgZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKTtcbiAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoKTtcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID0gc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgIH1cblxuICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChjb25maWcuX2xvY2FsZSwgY29uZmlnLl9hW0hPVVJdLCBjb25maWcuX21lcmlkaWVtKTtcblxuICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbn1cblxuXG5mdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAgKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICB2YXIgaXNQbTtcblxuICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgfVxuICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgfVxufVxuXG4vLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICBiZXN0TW9tZW50LFxuXG4gICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICBpLFxuICAgICAgICBjdXJyZW50U2NvcmU7XG5cbiAgICBpZiAoY29uZmlnLl9mLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcuX2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgfVxuICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgIGlmICghaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgIGlmIChzY29yZVRvQmVhdCA9PSBudWxsIHx8IGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbn1cblxuZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7XG4gICAgY29uZmlnLl9hID0gbWFwKFtpLnllYXIsIGkubW9udGgsIGkuZGF5IHx8IGkuZGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgfSk7XG5cbiAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyAoY29uZmlnKSB7XG4gICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlQ29uZmlnIChjb25maWcpIHtcbiAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoe251bGxJbnB1dDogdHJ1ZX0pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgIH1cblxuICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgfSAgZWxzZSB7XG4gICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgIH1cblxuICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICB2YXIgYyA9IHt9O1xuXG4gICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICgoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgYy5faSA9IGlucHV0O1xuICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2FsIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG59XG5cbnZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxudmFyIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG4vLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuLy9cbi8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2Vcbi8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG5mdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICB2YXIgcmVzLCBpO1xuICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgIH1cbiAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgIH1cbiAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuZnVuY3Rpb24gbWluICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG59XG5cbmZ1bmN0aW9uIG1heCAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG59XG5cbnZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICsobmV3IERhdGUoKSk7XG59O1xuXG52YXIgb3JkZXJpbmcgPSBbJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCAnbWlsbGlzZWNvbmQnXTtcblxuZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbSkge1xuICAgICAgICBpZiAoIShpbmRleE9mLmNhbGwob3JkZXJpbmcsIGtleSkgIT09IC0xICYmIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yZGVyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKE5hTik7XG59XG5cbmZ1bmN0aW9uIER1cmF0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCAwLFxuICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICB0aGlzLl9taWxsaXNlY29uZHMgPSArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICBob3VycyAqIDEwMDAgKiA2MCAqIDYwOyAvL3VzaW5nIDEwMDAgKiA2MCAqIDYwIGluc3RlYWQgb2YgMzZlNSB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzI5NzhcbiAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgdGhpcy5fZGF5cyA9ICtkYXlzICtcbiAgICAgICAgd2Vla3MgKiA3O1xuICAgIC8vIEl0IGlzIGltcG9zc2libGUgdG8gdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgK1xuICAgICAgICBxdWFydGVycyAqIDMgK1xuICAgICAgICB5ZWFycyAqIDEyO1xuXG4gICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG5cbiAgICB0aGlzLl9idWJibGUoKTtcbn1cblxuZnVuY3Rpb24gaXNEdXJhdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xufVxuXG5mdW5jdGlvbiBhYnNSb3VuZCAobnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICB9XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuZnVuY3Rpb24gb2Zmc2V0ICh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIHZhciBzaWduID0gJysnO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpZ24gKyB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICsgc2VwYXJhdG9yICsgemVyb0ZpbGwofn4ob2Zmc2V0KSAlIDYwLCAyKTtcbiAgICB9KTtcbn1cblxub2Zmc2V0KCdaJywgJzonKTtcbm9mZnNldCgnWlonLCAnJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignWicsICBtYXRjaFNob3J0T2Zmc2V0KTtcbmFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG5hZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIHRpbWV6b25lIGNodW5rZXJcbi8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG52YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbmZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKTtcblxuICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjaHVuayAgID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgIHZhciBwYXJ0cyAgID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICB2YXIgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/XG4gICAgICAwIDpcbiAgICAgIHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG59XG5cbi8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG5mdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgdmFyIHJlcywgZGlmZjtcbiAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgIGRpZmYgPSAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dCkgPyBpbnB1dC52YWx1ZU9mKCkgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldCAobSkge1xuICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDE1KSAqIDE1O1xufVxuXG4vLyBIT09LU1xuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4vLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbmhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBNT01FTlRTXG5cbi8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbi8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbi8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbi8vXG4vLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbi8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4vLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0IChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgIGxvY2FsQWRqdXN0O1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSwgMSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2V0Wm9uZSAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG59XG5cbmZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQgKCkge1xuICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldCAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUgKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCAoKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB7fTtcblxuICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICBpZiAoYy5fYSkge1xuICAgICAgICB2YXIgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xufVxuXG5mdW5jdGlvbiBpc0xvY2FsICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNVdGNPZmZzZXQgKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVXRjICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbn1cblxuLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG52YXIgYXNwTmV0UmVnZXggPSAvXihcXC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKylcXDooXFxkKykoPzpcXDooXFxkKykoXFwuXFxkKik/KT8kLztcblxuLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbi8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbi8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbnZhciBpc29SZWdleCA9IC9eKC18XFwrKT9QKD86KFstK10/WzAtOSwuXSopWSk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopVyk/KD86KFstK10/WzAtOSwuXSopRCk/KD86VCg/OihbLStdP1swLTksLl0qKUgpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVMpPyk/JC87XG5cbmZ1bmN0aW9uIGNyZWF0ZUR1cmF0aW9uIChpbnB1dCwga2V5KSB7XG4gICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgc2lnbixcbiAgICAgICAgcmV0LFxuICAgICAgICBkaWZmUmVzO1xuXG4gICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgbXMgOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZCAgOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgIE0gIDogaW5wdXQuX21vbnRoc1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHkgIDogMCxcbiAgICAgICAgICAgIGQgIDogdG9JbnQobWF0Y2hbREFURV0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIGggIDogdG9JbnQobWF0Y2hbSE9VUl0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIG0gIDogdG9JbnQobWF0Y2hbTUlOVVRFXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIHMgIDogdG9JbnQobWF0Y2hbU0VDT05EXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIG1zIDogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IChtYXRjaFsxXSA9PT0gJysnKSA/IDEgOiAxO1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHkgOiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbiksXG4gICAgICAgICAgICBNIDogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgdyA6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgIGQgOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbiksXG4gICAgICAgICAgICBoIDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgbSA6IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgIHMgOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbilcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbikpIHtcbiAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLCBjcmVhdGVMb2NhbChkdXJhdGlvbi50bykpO1xuXG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG59XG5cbmNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuZnVuY3Rpb24gcGFyc2VJc28gKGlucCwgc2lnbikge1xuICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG59XG5cbmZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICB2YXIgcmVzID0ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcblxuICAgIHJlcy5tb250aHMgPSBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICtcbiAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgLS1yZXMubW9udGhzO1xuICAgIH1cblxuICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKSk7XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgIHZhciByZXM7XG4gICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcbiAgICB9XG5cbiAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG5mdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUobmFtZSwgJ21vbWVudCgpLicgKyBuYW1lICArICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArIG5hbWUgKyAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbCA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gK3ZhbCA6IHZhbDtcbiAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0IChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgIGRheXMgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgIC8vIE5vIG9wXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICBpZiAobW9udGhzKSB7XG4gICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgfVxuICAgIGlmIChkYXlzKSB7XG4gICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICB9XG4gICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgIH1cbiAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICB9XG59XG5cbnZhciBhZGQgICAgICA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKTtcbnZhciBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgcmV0dXJuIGRpZmYgPCAtNiA/ICdzYW1lRWxzZScgOlxuICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6XG4gICAgICAgICAgICBkaWZmIDwgMCA/ICdsYXN0RGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgMSA/ICdzYW1lRGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgNyA/ICduZXh0V2VlaycgOiAnc2FtZUVsc2UnO1xufVxuXG5mdW5jdGlvbiBjYWxlbmRhciQxICh0aW1lLCBmb3JtYXRzKSB7XG4gICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnO1xuXG4gICAgdmFyIG91dHB1dCA9IGZvcm1hdHMgJiYgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKSA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdykgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpKTtcbn1cblxuZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xufVxuXG5mdW5jdGlvbiBpc0FmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMoIWlzVW5kZWZpbmVkKHVuaXRzKSA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0JlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKCFpc1VuZGVmaW5lZCh1bml0cykgPyB1bml0cyA6ICdtaWxsaXNlY29uZCcpO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzQmV0d2VlbiAoZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICByZXR1cm4gKGluY2x1c2l2aXR5WzBdID09PSAnKCcgPyB0aGlzLmlzQWZ0ZXIoZnJvbSwgdW5pdHMpIDogIXRoaXMuaXNCZWZvcmUoZnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJyA/IHRoaXMuaXNCZWZvcmUodG8sIHVuaXRzKSA6ICF0aGlzLmlzQWZ0ZXIodG8sIHVuaXRzKSk7XG59XG5cbmZ1bmN0aW9uIGlzU2FtZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgaW5wdXRNcztcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzIHx8ICdtaWxsaXNlY29uZCcpO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LHVuaXRzKTtcbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsdW5pdHMpO1xufVxuXG5mdW5jdGlvbiBkaWZmIChpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgem9uZURlbHRhLFxuICAgICAgICBkZWx0YSwgb3V0cHV0O1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgY2FzZSAneWVhcic6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyOyBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7IGJyZWFrO1xuICAgICAgICBjYXNlICdxdWFydGVyJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMzsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NlY29uZCc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTM7IGJyZWFrOyAvLyAxMDAwXG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyA2ZTQ7IGJyZWFrOyAvLyAxMDAwICogNjBcbiAgICAgICAgY2FzZSAnaG91cic6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgY2FzZSAnZGF5Jzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICBjYXNlICd3ZWVrJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDYwNDhlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgIGRlZmF1bHQ6IG91dHB1dCA9IHRoaXMgLSB0aGF0O1xuICAgIH1cblxuICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbn1cblxuZnVuY3Rpb24gbW9udGhEaWZmIChhLCBiKSB7XG4gICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIpICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgYW5jaG9yMiwgYWRqdXN0O1xuXG4gICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICB9XG5cbiAgICAvL2NoZWNrIGZvciBuZWdhdGl2ZSB6ZXJvLCByZXR1cm4gemVybyBpZiBuZWdhdGl2ZSB6ZXJvXG4gICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG59XG5cbmhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbn1cblxuZnVuY3Rpb24gdG9JU09TdHJpbmcoa2VlcE9mZnNldCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciB1dGMgPSBrZWVwT2Zmc2V0ICE9PSB0cnVlO1xuICAgIHZhciBtID0gdXRjID8gdGhpcy5jbG9uZSgpLnV0YygpIDogdGhpcztcbiAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sIHV0YyA/ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onKTtcbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5fZC52YWx1ZU9mKCkpLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgnWicsIGZvcm1hdE1vbWVudChtLCAnWicpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sIHV0YyA/ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWicpO1xufVxuXG4vKipcbiAqIFJldHVybiBhIGh1bWFuIHJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbW9tZW50IHRoYXQgY2FuXG4gKiBhbHNvIGJlIGV2YWx1YXRlZCB0byBnZXQgYSBuZXcgbW9tZW50IHdoaWNoIGlzIHRoZSBzYW1lXG4gKlxuICogQGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL3V0aWwuaHRtbCN1dGlsX2N1c3RvbV9pbnNwZWN0X2Z1bmN0aW9uX29uX29iamVjdHNcbiAqL1xuZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gJ21vbWVudC5pbnZhbGlkKC8qICcgKyB0aGlzLl9pICsgJyAqLyknO1xuICAgIH1cbiAgICB2YXIgZnVuYyA9ICdtb21lbnQnO1xuICAgIHZhciB6b25lID0gJyc7XG4gICAgaWYgKCF0aGlzLmlzTG9jYWwoKSkge1xuICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJztcbiAgICAgICAgem9uZSA9ICdaJztcbiAgICB9XG4gICAgdmFyIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSc7XG4gICAgdmFyIHllYXIgPSAoMCA8PSB0aGlzLnllYXIoKSAmJiB0aGlzLnllYXIoKSA8PSA5OTk5KSA/ICdZWVlZJyA6ICdZWVlZWVknO1xuICAgIHZhciBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnO1xuICAgIHZhciBzdWZmaXggPSB6b25lICsgJ1tcIildJztcblxuICAgIHJldHVybiB0aGlzLmZvcm1hdChwcmVmaXggKyB5ZWFyICsgZGF0ZXRpbWUgKyBzdWZmaXgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXQgKGlucHV0U3RyaW5nKSB7XG4gICAgaWYgKCFpbnB1dFN0cmluZykge1xuICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKSA/IGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgOiBob29rcy5kZWZhdWx0Rm9ybWF0O1xuICAgIH1cbiAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nKTtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xufVxuXG5mdW5jdGlvbiBmcm9tICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHt0bzogdGhpcywgZnJvbTogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmcm9tTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbn1cblxuZnVuY3Rpb24gdG8gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe2Zyb206IHRoaXMsIHRvOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRvTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgcmV0dXJuIHRoaXMudG8oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG59XG5cbi8vIElmIHBhc3NlZCBhIGxvY2FsZSBrZXksIGl0IHdpbGwgc2V0IHRoZSBsb2NhbGUgZm9yIHRoaXNcbi8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbmZ1bmN0aW9uIGxvY2FsZSAoa2V5KSB7XG4gICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG52YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbmZ1bmN0aW9uIGxvY2FsZURhdGEgKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0T2YgKHVuaXRzKSB7XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgLy8gdGhlIGZvbGxvd2luZyBzd2l0Y2ggaW50ZW50aW9uYWxseSBvbWl0cyBicmVhayBrZXl3b3Jkc1xuICAgIC8vIHRvIHV0aWxpemUgZmFsbGluZyB0aHJvdWdoIHRoZSBjYXNlcy5cbiAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgdGhpcy5tb250aCgwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgIHRoaXMuZGF0ZSgxKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgIHRoaXMuaG91cnMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgdGhpcy5taW51dGVzKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgdGhpcy5zZWNvbmRzKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgdGhpcy5taWxsaXNlY29uZHMoMCk7XG4gICAgfVxuXG4gICAgLy8gd2Vla3MgYXJlIGEgc3BlY2lhbCBjYXNlXG4gICAgaWYgKHVuaXRzID09PSAnd2VlaycpIHtcbiAgICAgICAgdGhpcy53ZWVrZGF5KDApO1xuICAgIH1cbiAgICBpZiAodW5pdHMgPT09ICdpc29XZWVrJykge1xuICAgICAgICB0aGlzLmlzb1dlZWtkYXkoMSk7XG4gICAgfVxuXG4gICAgLy8gcXVhcnRlcnMgYXJlIGFsc28gc3BlY2lhbFxuICAgIGlmICh1bml0cyA9PT0gJ3F1YXJ0ZXInKSB7XG4gICAgICAgIHRoaXMubW9udGgoTWF0aC5mbG9vcih0aGlzLm1vbnRoKCkgLyAzKSAqIDMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBlbmRPZiAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyAnZGF0ZScgaXMgYW4gYWxpYXMgZm9yICdkYXknLCBzbyBpdCBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyBzdWNoLlxuICAgIGlmICh1bml0cyA9PT0gJ2RhdGUnKSB7XG4gICAgICAgIHVuaXRzID0gJ2RheSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RhcnRPZih1bml0cykuYWRkKDEsICh1bml0cyA9PT0gJ2lzb1dlZWsnID8gJ3dlZWsnIDogdW5pdHMpKS5zdWJ0cmFjdCgxLCAnbXMnKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVPZiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKCh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMCk7XG59XG5cbmZ1bmN0aW9uIHVuaXggKCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpIC8gMTAwMCk7XG59XG5cbmZ1bmN0aW9uIHRvRGF0ZSAoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheSAoKSB7XG4gICAgdmFyIG0gPSB0aGlzO1xuICAgIHJldHVybiBbbS55ZWFyKCksIG0ubW9udGgoKSwgbS5kYXRlKCksIG0uaG91cigpLCBtLm1pbnV0ZSgpLCBtLnNlY29uZCgpLCBtLm1pbGxpc2Vjb25kKCldO1xufVxuXG5mdW5jdGlvbiB0b09iamVjdCAoKSB7XG4gICAgdmFyIG0gPSB0aGlzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgLy8gbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWQkMiAoKSB7XG4gICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNpbmdGbGFncyAoKSB7XG4gICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gaW52YWxpZEF0ICgpIHtcbiAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xufVxuXG5mdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3RcbiAgICB9O1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbn0pO1xuXG5mdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuICh0b2tlbiwgZ2V0dGVyKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xufVxuXG5hZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgICAgICd3ZWVrWWVhcicpO1xuYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAgICAnd2Vla1llYXInKTtcbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAgJ2lzb1dlZWtZZWFyJyk7XG5hZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnd2Vla1llYXInLCAnZ2cnKTtcbmFkZFVuaXRBbGlhcygnaXNvV2Vla1llYXInLCAnR0cnKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCd3ZWVrWWVhcicsIDEpO1xuYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrWWVhcicsIDEpO1xuXG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignRycsICAgICAgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignZycsICAgICAgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignR0cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignZ2cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignR0dHRycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuYWRkUmVnZXhUb2tlbignZ2dnZycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuYWRkUmVnZXhUb2tlbignR0dHR0cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAyKV0gPSB0b0ludChpbnB1dCk7XG59KTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbn0pO1xuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIGdldFNldFdlZWtZZWFyIChpbnB1dCkge1xuICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHRoaXMud2VlaygpLFxuICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCksXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3kpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhciAoaW5wdXQpIHtcbiAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbCh0aGlzLFxuICAgICAgICAgICAgaW5wdXQsIHRoaXMuaXNvV2VlaygpLCB0aGlzLmlzb1dlZWtkYXkoKSwgMSwgNCk7XG59XG5cbmZ1bmN0aW9uIGdldElTT1dlZWtzSW5ZZWFyICgpIHtcbiAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xufVxuXG5mdW5jdGlvbiBnZXRXZWVrc0luWWVhciAoKSB7XG4gICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG59XG5cbmZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3ZWVrc1RhcmdldCA9IHdlZWtzSW5ZZWFyKGlucHV0LCBkb3csIGRveSk7XG4gICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKGRheU9mWWVhckRhdGEueWVhciwgMCwgZGF5T2ZZZWFyRGF0YS5kYXlPZlllYXIpO1xuXG4gICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgdGhpcy5tb250aChkYXRlLmdldFVUQ01vbnRoKCkpO1xuICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygncXVhcnRlcicsICdRJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgncXVhcnRlcicsIDcpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuYWRkUGFyc2VUb2tlbignUScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzO1xufSk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0UXVhcnRlciAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKSA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgdGhpcy5tb250aCgpICUgMyk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdkYXRlJywgJ0QnKTtcblxuLy8gUFJJT1JPSVRZXG5hZGRVbml0UHJpb3JpdHkoJ2RhdGUnLCA5KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdEJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgcmV0dXJuIGlzU3RyaWN0ID9cbiAgICAgIChsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2UgfHwgbG9jYWxlLl9vcmRpbmFsUGFyc2UpIDpcbiAgICAgIGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQ7XG59KTtcblxuYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG5hZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pO1xufSk7XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RheU9mWWVhcicsICdEREQnKTtcblxuLy8gUFJJT1JJVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF5T2ZZZWFyJywgNCk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignREREJywgIG1hdGNoMXRvMyk7XG5hZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbmFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyIChpbnB1dCkge1xuICAgIHZhciBkYXlPZlllYXIgPSBNYXRoLnJvdW5kKCh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSBkYXlPZlllYXIpLCAnZCcpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21pbnV0ZScsIDE0KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdtJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnc2Vjb25kJywgMTUpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ3MnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbn0pO1xuXG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21pbGxpc2Vjb25kJywgMTYpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1MnLCAgICBtYXRjaDF0bzMsIG1hdGNoMSk7XG5hZGRSZWdleFRva2VuKCdTUycsICAgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignU1NTJywgIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxudmFyIHRva2VuO1xuZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG59XG5cbmZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbn1cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCd6JywgIDAsIDAsICd6b25lQWJicicpO1xuYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0Wm9uZUFiYnIgKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG59XG5cbmZ1bmN0aW9uIGdldFpvbmVOYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG59XG5cbnZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbnByb3RvLmFkZCAgICAgICAgICAgICAgID0gYWRkO1xucHJvdG8uY2FsZW5kYXIgICAgICAgICAgPSBjYWxlbmRhciQxO1xucHJvdG8uY2xvbmUgICAgICAgICAgICAgPSBjbG9uZTtcbnByb3RvLmRpZmYgICAgICAgICAgICAgID0gZGlmZjtcbnByb3RvLmVuZE9mICAgICAgICAgICAgID0gZW5kT2Y7XG5wcm90by5mb3JtYXQgICAgICAgICAgICA9IGZvcm1hdDtcbnByb3RvLmZyb20gICAgICAgICAgICAgID0gZnJvbTtcbnByb3RvLmZyb21Ob3cgICAgICAgICAgID0gZnJvbU5vdztcbnByb3RvLnRvICAgICAgICAgICAgICAgID0gdG87XG5wcm90by50b05vdyAgICAgICAgICAgICA9IHRvTm93O1xucHJvdG8uZ2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdHZXQ7XG5wcm90by5pbnZhbGlkQXQgICAgICAgICA9IGludmFsaWRBdDtcbnByb3RvLmlzQWZ0ZXIgICAgICAgICAgID0gaXNBZnRlcjtcbnByb3RvLmlzQmVmb3JlICAgICAgICAgID0gaXNCZWZvcmU7XG5wcm90by5pc0JldHdlZW4gICAgICAgICA9IGlzQmV0d2VlbjtcbnByb3RvLmlzU2FtZSAgICAgICAgICAgID0gaXNTYW1lO1xucHJvdG8uaXNTYW1lT3JBZnRlciAgICAgPSBpc1NhbWVPckFmdGVyO1xucHJvdG8uaXNTYW1lT3JCZWZvcmUgICAgPSBpc1NhbWVPckJlZm9yZTtcbnByb3RvLmlzVmFsaWQgICAgICAgICAgID0gaXNWYWxpZCQyO1xucHJvdG8ubGFuZyAgICAgICAgICAgICAgPSBsYW5nO1xucHJvdG8ubG9jYWxlICAgICAgICAgICAgPSBsb2NhbGU7XG5wcm90by5sb2NhbGVEYXRhICAgICAgICA9IGxvY2FsZURhdGE7XG5wcm90by5tYXggICAgICAgICAgICAgICA9IHByb3RvdHlwZU1heDtcbnByb3RvLm1pbiAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWluO1xucHJvdG8ucGFyc2luZ0ZsYWdzICAgICAgPSBwYXJzaW5nRmxhZ3M7XG5wcm90by5zZXQgICAgICAgICAgICAgICA9IHN0cmluZ1NldDtcbnByb3RvLnN0YXJ0T2YgICAgICAgICAgID0gc3RhcnRPZjtcbnByb3RvLnN1YnRyYWN0ICAgICAgICAgID0gc3VidHJhY3Q7XG5wcm90by50b0FycmF5ICAgICAgICAgICA9IHRvQXJyYXk7XG5wcm90by50b09iamVjdCAgICAgICAgICA9IHRvT2JqZWN0O1xucHJvdG8udG9EYXRlICAgICAgICAgICAgPSB0b0RhdGU7XG5wcm90by50b0lTT1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nO1xucHJvdG8uaW5zcGVjdCAgICAgICAgICAgPSBpbnNwZWN0O1xucHJvdG8udG9KU09OICAgICAgICAgICAgPSB0b0pTT047XG5wcm90by50b1N0cmluZyAgICAgICAgICA9IHRvU3RyaW5nO1xucHJvdG8udW5peCAgICAgICAgICAgICAgPSB1bml4O1xucHJvdG8udmFsdWVPZiAgICAgICAgICAgPSB2YWx1ZU9mO1xucHJvdG8uY3JlYXRpb25EYXRhICAgICAgPSBjcmVhdGlvbkRhdGE7XG5cbi8vIFllYXJcbnByb3RvLnllYXIgICAgICAgPSBnZXRTZXRZZWFyO1xucHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG5cbi8vIFdlZWsgWWVhclxucHJvdG8ud2Vla1llYXIgICAgPSBnZXRTZXRXZWVrWWVhcjtcbnByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG5cbi8vIFF1YXJ0ZXJcbnByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG5cbi8vIE1vbnRoXG5wcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xucHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcblxuLy8gV2Vla1xucHJvdG8ud2VlayAgICAgICAgICAgPSBwcm90by53ZWVrcyAgICAgICAgPSBnZXRTZXRXZWVrO1xucHJvdG8uaXNvV2VlayAgICAgICAgPSBwcm90by5pc29XZWVrcyAgICAgPSBnZXRTZXRJU09XZWVrO1xucHJvdG8ud2Vla3NJblllYXIgICAgPSBnZXRXZWVrc0luWWVhcjtcbnByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG5cbi8vIERheVxucHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG5wcm90by5kYXkgICAgICAgID0gcHJvdG8uZGF5cyAgICAgICAgICAgICA9IGdldFNldERheU9mV2VlaztcbnByb3RvLndlZWtkYXkgICAgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG5wcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xucHJvdG8uZGF5T2ZZZWFyICA9IGdldFNldERheU9mWWVhcjtcblxuLy8gSG91clxucHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcblxuLy8gTWludXRlXG5wcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuXG4vLyBTZWNvbmRcbnByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG5cbi8vIE1pbGxpc2Vjb25kXG5wcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuXG4vLyBPZmZzZXRcbnByb3RvLnV0Y09mZnNldCAgICAgICAgICAgID0gZ2V0U2V0T2Zmc2V0O1xucHJvdG8udXRjICAgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1VUQztcbnByb3RvLmxvY2FsICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbnByb3RvLnBhcnNlWm9uZSAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG5wcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xucHJvdG8uaXNEU1QgICAgICAgICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbnByb3RvLmlzTG9jYWwgICAgICAgICAgICAgID0gaXNMb2NhbDtcbnByb3RvLmlzVXRjT2Zmc2V0ICAgICAgICAgID0gaXNVdGNPZmZzZXQ7XG5wcm90by5pc1V0YyAgICAgICAgICAgICAgICA9IGlzVXRjO1xucHJvdG8uaXNVVEMgICAgICAgICAgICAgICAgPSBpc1V0YztcblxuLy8gVGltZXpvbmVcbnByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG5wcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuXG4vLyBEZXByZWNhdGlvbnNcbnByb3RvLmRhdGVzICA9IGRlcHJlY2F0ZSgnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLCBnZXRTZXREYXlPZk1vbnRoKTtcbnByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZSgnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJywgZ2V0U2V0TW9udGgpO1xucHJvdG8ueWVhcnMgID0gZGVwcmVjYXRlKCd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJywgZ2V0U2V0WWVhcik7XG5wcm90by56b25lICAgPSBkZXByZWNhdGUoJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJywgZ2V0U2V0Wm9uZSk7XG5wcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLCBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQpO1xuXG5mdW5jdGlvbiBjcmVhdGVVbml4IChpbnB1dCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJblpvbmUgKCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xufVxuXG5mdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQgKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxucHJvdG8kMS5jYWxlbmRhciAgICAgICAgPSBjYWxlbmRhcjtcbnByb3RvJDEubG9uZ0RhdGVGb3JtYXQgID0gbG9uZ0RhdGVGb3JtYXQ7XG5wcm90byQxLmludmFsaWREYXRlICAgICA9IGludmFsaWREYXRlO1xucHJvdG8kMS5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xucHJvdG8kMS5wcmVwYXJzZSAgICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG5wcm90byQxLnBvc3Rmb3JtYXQgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbnByb3RvJDEucmVsYXRpdmVUaW1lICAgID0gcmVsYXRpdmVUaW1lO1xucHJvdG8kMS5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xucHJvdG8kMS5zZXQgICAgICAgICAgICAgPSBzZXQ7XG5cbi8vIE1vbnRoXG5wcm90byQxLm1vbnRocyAgICAgICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRocztcbnByb3RvJDEubW9udGhzU2hvcnQgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzU2hvcnQ7XG5wcm90byQxLm1vbnRoc1BhcnNlICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1BhcnNlO1xucHJvdG8kMS5tb250aHNSZWdleCAgICAgICA9IG1vbnRoc1JlZ2V4O1xucHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ICA9IG1vbnRoc1Nob3J0UmVnZXg7XG5cbi8vIFdlZWtcbnByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG5wcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG5wcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbi8vIERheSBvZiBXZWVrXG5wcm90byQxLndlZWtkYXlzICAgICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzO1xucHJvdG8kMS53ZWVrZGF5c01pbiAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c01pbjtcbnByb3RvJDEud2Vla2RheXNTaG9ydCAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNTaG9ydDtcbnByb3RvJDEud2Vla2RheXNQYXJzZSAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNQYXJzZTtcblxucHJvdG8kMS53ZWVrZGF5c1JlZ2V4ICAgICAgID0gICAgICAgIHdlZWtkYXlzUmVnZXg7XG5wcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCAgPSAgICAgICAgd2Vla2RheXNTaG9ydFJlZ2V4O1xucHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ICAgID0gICAgICAgIHdlZWtkYXlzTWluUmVnZXg7XG5cbi8vIEhvdXJzXG5wcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xucHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG5mdW5jdGlvbiBnZXQkMSAoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKTtcbiAgICB2YXIgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbn1cblxuZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwgKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIGksIGZpZWxkLCAnbW9udGgnKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLy8gKClcbi8vICg1KVxuLy8gKGZtdCwgNSlcbi8vIChmbXQpXG4vLyAodHJ1ZSlcbi8vICh0cnVlLCA1KVxuLy8gKHRydWUsIGZtdCwgNSlcbi8vICh0cnVlLCBmbXQpXG5mdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMDtcblxuICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIGxpc3RNb250aHMgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xufVxuXG5mdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG59XG5cbmZ1bmN0aW9uIGxpc3RXZWVrZGF5cyAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbn1cblxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbn1cblxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xufVxuXG5nZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgIH1cbn0pO1xuXG4vLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5ob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGdldFNldEdsb2JhbExvY2FsZSk7XG5ob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGdldExvY2FsZSk7XG5cbnZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIGFicyAoKSB7XG4gICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICB0aGlzLl9kYXlzICAgICAgICAgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgIGRhdGEubWlsbGlzZWNvbmRzICA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgIGRhdGEuc2Vjb25kcyAgICAgICA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICBkYXRhLm1vbnRocyAgICAgICAgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgZHVyYXRpb24uX2RheXMgICAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICBkdXJhdGlvbi5fbW9udGhzICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xufVxuXG4vLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG5mdW5jdGlvbiBhZGQkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbn1cblxuLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbmZ1bmN0aW9uIHN1YnRyYWN0JDEgKGlucHV0LCB2YWx1ZSkge1xuICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xufVxuXG5mdW5jdGlvbiBhYnNDZWlsIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJ1YmJsZSAoKSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcbiAgICB2YXIgZGF5cyAgICAgICAgID0gdGhpcy5fZGF5cztcbiAgICB2YXIgbW9udGhzICAgICAgID0gdGhpcy5fbW9udGhzO1xuICAgIHZhciBkYXRhICAgICAgICAgPSB0aGlzLl9kYXRhO1xuICAgIHZhciBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMsIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgIGlmICghKChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKSkpIHtcbiAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgbW9udGhzID0gMDtcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgIHNlY29uZHMgICAgICAgICAgID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgZGF0YS5zZWNvbmRzICAgICAgPSBzZWNvbmRzICUgNjA7XG5cbiAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgZGF0YS5taW51dGVzICAgICAgPSBtaW51dGVzICUgNjA7XG5cbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgPSBob3VycyAlIDI0O1xuXG4gICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cbiAgICBkYXRhLmRheXMgICA9IGRheXM7XG4gICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgZGF0YS55ZWFycyAgPSB5ZWFycztcblxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkYXlzVG9Nb250aHMgKGRheXMpIHtcbiAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgcmV0dXJuIGRheXMgKiA0ODAwIC8gMTQ2MDk3O1xufVxuXG5mdW5jdGlvbiBtb250aHNUb0RheXMgKG1vbnRocykge1xuICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgIHJldHVybiBtb250aHMgKiAxNDYwOTcgLyA0ODAwO1xufVxuXG5mdW5jdGlvbiBhcyAodW5pdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHZhciBkYXlzO1xuICAgIHZhciBtb250aHM7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgZGF5cyAgID0gdGhpcy5fZGF5cyAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgcmV0dXJuIHVuaXRzID09PSAnbW9udGgnID8gbW9udGhzIDogbW9udGhzIC8gMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJyAgIDogcmV0dXJuIGRheXMgLyA3ICAgICArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBjYXNlICdob3VyJyAgIDogcmV0dXJuIGRheXMgKiAyNCAgICArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnIDogcmV0dXJuIGRheXMgKiAxNDQwICArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOiByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG5mdW5jdGlvbiB2YWx1ZU9mJDEgKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICApO1xufVxuXG5mdW5jdGlvbiBtYWtlQXMgKGFsaWFzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgIH07XG59XG5cbnZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbnZhciBhc1NlY29uZHMgICAgICA9IG1ha2VBcygncycpO1xudmFyIGFzTWludXRlcyAgICAgID0gbWFrZUFzKCdtJyk7XG52YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbnZhciBhc0RheXMgICAgICAgICA9IG1ha2VBcygnZCcpO1xudmFyIGFzV2Vla3MgICAgICAgID0gbWFrZUFzKCd3Jyk7XG52YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbnZhciBhc1llYXJzICAgICAgICA9IG1ha2VBcygneScpO1xuXG5mdW5jdGlvbiBjbG9uZSQxICgpIHtcbiAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24odGhpcyk7XG59XG5cbmZ1bmN0aW9uIGdldCQyICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU47XG59XG5cbmZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgfTtcbn1cblxudmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpO1xudmFyIHNlY29uZHMgICAgICA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKTtcbnZhciBtaW51dGVzICAgICAgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyk7XG52YXIgaG91cnMgICAgICAgID0gbWFrZUdldHRlcignaG91cnMnKTtcbnZhciBkYXlzICAgICAgICAgPSBtYWtlR2V0dGVyKCdkYXlzJyk7XG52YXIgbW9udGhzICAgICAgID0gbWFrZUdldHRlcignbW9udGhzJyk7XG52YXIgeWVhcnMgICAgICAgID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuZnVuY3Rpb24gd2Vla3MgKCkge1xuICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xufVxuXG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIHRocmVzaG9sZHMgPSB7XG4gICAgc3M6IDQ0LCAgICAgICAgIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgIHMgOiA0NSwgICAgICAgICAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgIG0gOiA0NSwgICAgICAgICAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICBoIDogMjIsICAgICAgICAgLy8gaG91cnMgdG8gZGF5XG4gICAgZCA6IDI2LCAgICAgICAgIC8vIGRheXMgdG8gbW9udGhcbiAgICBNIDogMTEgICAgICAgICAgLy8gbW9udGhzIHRvIHllYXJcbn07XG5cbi8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG5mdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xufVxuXG5mdW5jdGlvbiByZWxhdGl2ZVRpbWUkMSAocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIGxvY2FsZSkge1xuICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKTtcbiAgICB2YXIgc2Vjb25kcyAgPSByb3VuZChkdXJhdGlvbi5hcygncycpKTtcbiAgICB2YXIgbWludXRlcyAgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKTtcbiAgICB2YXIgaG91cnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKTtcbiAgICB2YXIgZGF5cyAgICAgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKTtcbiAgICB2YXIgbW9udGhzICAgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKTtcbiAgICB2YXIgeWVhcnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygneScpKTtcblxuICAgIHZhciBhID0gc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdICB8fFxuICAgICAgICAgICAgc2Vjb25kcyA8IHRocmVzaG9sZHMucyAgICYmIFsnc3MnLCBzZWNvbmRzXSB8fFxuICAgICAgICAgICAgbWludXRlcyA8PSAxICAgICAgICAgICAgICYmIFsnbSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgbWludXRlcyA8IHRocmVzaG9sZHMubSAgICYmIFsnbW0nLCBtaW51dGVzXSB8fFxuICAgICAgICAgICAgaG91cnMgICA8PSAxICAgICAgICAgICAgICYmIFsnaCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgaG91cnMgICA8IHRocmVzaG9sZHMuaCAgICYmIFsnaGgnLCBob3Vyc10gICB8fFxuICAgICAgICAgICAgZGF5cyAgICA8PSAxICAgICAgICAgICAgICYmIFsnZCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgZGF5cyAgICA8IHRocmVzaG9sZHMuZCAgICYmIFsnZGQnLCBkYXlzXSAgICB8fFxuICAgICAgICAgICAgbW9udGhzICA8PSAxICAgICAgICAgICAgICYmIFsnTSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgbW9udGhzICA8IHRocmVzaG9sZHMuTSAgICYmIFsnTU0nLCBtb250aHNdICB8fFxuICAgICAgICAgICAgeWVhcnMgICA8PSAxICAgICAgICAgICAgICYmIFsneSddICAgICAgICAgICB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgYVs0XSA9IGxvY2FsZTtcbiAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbmZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIChyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yocm91bmRpbmdGdW5jdGlvbikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbmZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCAodGhyZXNob2xkLCBsaW1pdCkge1xuICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgfVxuICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaHVtYW5pemUgKHdpdGhTdWZmaXgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICB2YXIgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIGxvY2FsZSk7XG5cbiAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbn1cblxudmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIHNpZ24oeCkge1xuICAgIHJldHVybiAoKHggPiAwKSAtICh4IDwgMCkpIHx8ICt4O1xufVxuXG5mdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMDtcbiAgICB2YXIgZGF5cyAgICAgICAgID0gYWJzJDEodGhpcy5fZGF5cyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IGFicyQxKHRoaXMuX21vbnRocyk7XG4gICAgdmFyIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycztcblxuICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgc2Vjb25kcyAlPSA2MDtcbiAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgIHllYXJzICA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cblxuICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgdmFyIFkgPSB5ZWFycztcbiAgICB2YXIgTSA9IG1vbnRocztcbiAgICB2YXIgRCA9IGRheXM7XG4gICAgdmFyIGggPSBob3VycztcbiAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgdmFyIHMgPSBzZWNvbmRzID8gc2Vjb25kcy50b0ZpeGVkKDMpLnJlcGxhY2UoL1xcLj8wKyQvLCAnJykgOiAnJztcbiAgICB2YXIgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpO1xuXG4gICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgIH1cblxuICAgIHZhciB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICB2YXIgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgIHZhciBkYXlzU2lnbiA9IHNpZ24odGhpcy5fZGF5cykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgdmFyIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICByZXR1cm4gdG90YWxTaWduICsgJ1AnICtcbiAgICAgICAgKFkgPyB5bVNpZ24gKyBZICsgJ1knIDogJycpICtcbiAgICAgICAgKE0gPyB5bVNpZ24gKyBNICsgJ00nIDogJycpICtcbiAgICAgICAgKEQgPyBkYXlzU2lnbiArIEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAoKGggfHwgbSB8fCBzKSA/ICdUJyA6ICcnKSArXG4gICAgICAgIChoID8gaG1zU2lnbiArIGggKyAnSCcgOiAnJykgK1xuICAgICAgICAobSA/IGhtc1NpZ24gKyBtICsgJ00nIDogJycpICtcbiAgICAgICAgKHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKTtcbn1cblxudmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbnByb3RvJDIuaXNWYWxpZCAgICAgICAgPSBpc1ZhbGlkJDE7XG5wcm90byQyLmFicyAgICAgICAgICAgID0gYWJzO1xucHJvdG8kMi5hZGQgICAgICAgICAgICA9IGFkZCQxO1xucHJvdG8kMi5zdWJ0cmFjdCAgICAgICA9IHN1YnRyYWN0JDE7XG5wcm90byQyLmFzICAgICAgICAgICAgID0gYXM7XG5wcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG5wcm90byQyLmFzU2Vjb25kcyAgICAgID0gYXNTZWNvbmRzO1xucHJvdG8kMi5hc01pbnV0ZXMgICAgICA9IGFzTWludXRlcztcbnByb3RvJDIuYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xucHJvdG8kMi5hc0RheXMgICAgICAgICA9IGFzRGF5cztcbnByb3RvJDIuYXNXZWVrcyAgICAgICAgPSBhc1dlZWtzO1xucHJvdG8kMi5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xucHJvdG8kMi5hc1llYXJzICAgICAgICA9IGFzWWVhcnM7XG5wcm90byQyLnZhbHVlT2YgICAgICAgID0gdmFsdWVPZiQxO1xucHJvdG8kMi5fYnViYmxlICAgICAgICA9IGJ1YmJsZTtcbnByb3RvJDIuY2xvbmUgICAgICAgICAgPSBjbG9uZSQxO1xucHJvdG8kMi5nZXQgICAgICAgICAgICA9IGdldCQyO1xucHJvdG8kMi5taWxsaXNlY29uZHMgICA9IG1pbGxpc2Vjb25kcztcbnByb3RvJDIuc2Vjb25kcyAgICAgICAgPSBzZWNvbmRzO1xucHJvdG8kMi5taW51dGVzICAgICAgICA9IG1pbnV0ZXM7XG5wcm90byQyLmhvdXJzICAgICAgICAgID0gaG91cnM7XG5wcm90byQyLmRheXMgICAgICAgICAgID0gZGF5cztcbnByb3RvJDIud2Vla3MgICAgICAgICAgPSB3ZWVrcztcbnByb3RvJDIubW9udGhzICAgICAgICAgPSBtb250aHM7XG5wcm90byQyLnllYXJzICAgICAgICAgID0geWVhcnM7XG5wcm90byQyLmh1bWFuaXplICAgICAgID0gaHVtYW5pemU7XG5wcm90byQyLnRvSVNPU3RyaW5nICAgID0gdG9JU09TdHJpbmckMTtcbnByb3RvJDIudG9TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZyQxO1xucHJvdG8kMi50b0pTT04gICAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG5wcm90byQyLmxvY2FsZSAgICAgICAgID0gbG9jYWxlO1xucHJvdG8kMi5sb2NhbGVEYXRhICAgICA9IGxvY2FsZURhdGE7XG5cbi8vIERlcHJlY2F0aW9uc1xucHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZSgndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLCB0b0lTT1N0cmluZyQxKTtcbnByb3RvJDIubGFuZyA9IGxhbmc7XG5cbi8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4Jyk7XG5hZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbigneCcsIG1hdGNoU2lnbmVkKTtcbmFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG5hZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCwgMTApICogMTAwMCk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xufSk7XG5cbi8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuXG5ob29rcy52ZXJzaW9uID0gJzIuMjAuMSc7XG5cbnNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbmhvb2tzLmZuICAgICAgICAgICAgICAgICAgICA9IHByb3RvO1xuaG9va3MubWluICAgICAgICAgICAgICAgICAgID0gbWluO1xuaG9va3MubWF4ICAgICAgICAgICAgICAgICAgID0gbWF4O1xuaG9va3Mubm93ICAgICAgICAgICAgICAgICAgID0gbm93O1xuaG9va3MudXRjICAgICAgICAgICAgICAgICAgID0gY3JlYXRlVVRDO1xuaG9va3MudW5peCAgICAgICAgICAgICAgICAgID0gY3JlYXRlVW5peDtcbmhvb2tzLm1vbnRocyAgICAgICAgICAgICAgICA9IGxpc3RNb250aHM7XG5ob29rcy5pc0RhdGUgICAgICAgICAgICAgICAgPSBpc0RhdGU7XG5ob29rcy5sb2NhbGUgICAgICAgICAgICAgICAgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG5ob29rcy5pbnZhbGlkICAgICAgICAgICAgICAgPSBjcmVhdGVJbnZhbGlkO1xuaG9va3MuZHVyYXRpb24gICAgICAgICAgICAgID0gY3JlYXRlRHVyYXRpb247XG5ob29rcy5pc01vbWVudCAgICAgICAgICAgICAgPSBpc01vbWVudDtcbmhvb2tzLndlZWtkYXlzICAgICAgICAgICAgICA9IGxpc3RXZWVrZGF5cztcbmhvb2tzLnBhcnNlWm9uZSAgICAgICAgICAgICA9IGNyZWF0ZUluWm9uZTtcbmhvb2tzLmxvY2FsZURhdGEgICAgICAgICAgICA9IGdldExvY2FsZTtcbmhvb2tzLmlzRHVyYXRpb24gICAgICAgICAgICA9IGlzRHVyYXRpb247XG5ob29rcy5tb250aHNTaG9ydCAgICAgICAgICAgPSBsaXN0TW9udGhzU2hvcnQ7XG5ob29rcy53ZWVrZGF5c01pbiAgICAgICAgICAgPSBsaXN0V2Vla2RheXNNaW47XG5ob29rcy5kZWZpbmVMb2NhbGUgICAgICAgICAgPSBkZWZpbmVMb2NhbGU7XG5ob29rcy51cGRhdGVMb2NhbGUgICAgICAgICAgPSB1cGRhdGVMb2NhbGU7XG5ob29rcy5sb2NhbGVzICAgICAgICAgICAgICAgPSBsaXN0TG9jYWxlcztcbmhvb2tzLndlZWtkYXlzU2hvcnQgICAgICAgICA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuaG9va3Mubm9ybWFsaXplVW5pdHMgICAgICAgID0gbm9ybWFsaXplVW5pdHM7XG5ob29rcy5yZWxhdGl2ZVRpbWVSb3VuZGluZyAgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbmhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbmhvb2tzLmNhbGVuZGFyRm9ybWF0ICAgICAgICA9IGdldENhbGVuZGFyRm9ybWF0O1xuaG9va3MucHJvdG90eXBlICAgICAgICAgICAgID0gcHJvdG87XG5cbi8vIGN1cnJlbnRseSBIVE1MNSBpbnB1dCB0eXBlIG9ubHkgc3VwcG9ydHMgMjQtaG91ciBmb3JtYXRzXG5ob29rcy5IVE1MNV9GTVQgPSB7XG4gICAgREFURVRJTUVfTE9DQUw6ICdZWVlZLU1NLUREVEhIOm1tJywgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIC8+XG4gICAgREFURVRJTUVfTE9DQUxfU0VDT05EUzogJ1lZWVktTU0tRERUSEg6bW06c3MnLCAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIxXCIgLz5cbiAgICBEQVRFVElNRV9MT0NBTF9NUzogJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTJywgICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICBEQVRFOiAnWVlZWS1NTS1ERCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPlxuICAgIFRJTUU6ICdISDptbScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIC8+XG4gICAgVElNRV9TRUNPTkRTOiAnSEg6bW06c3MnLCAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjFcIiAvPlxuICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgV0VFSzogJ1lZWVktW1ddV1cnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ3ZWVrXCIgLz5cbiAgICBNT05USDogJ1lZWVktTU0nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgLz5cbn07XG5cbnJldHVybiBob29rcztcblxufSkpKTtcblxuOyhmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8qIGdsb2JhbCB3aW5kb3c6IGZhbHNlLCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXG4gICAgdmFyIHJvb3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB3aW5kb3c7XG5cbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShmdW5jdGlvbigpeyByZXR1cm4gZmFjdG9yeShyb290KTsgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnkocm9vdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5ET01QdXJpZnkgPSBmYWN0b3J5KHJvb3QpO1xuICAgIH1cbn0oZnVuY3Rpb24gZmFjdG9yeSh3aW5kb3cpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgRE9NUHVyaWZ5ID0gZnVuY3Rpb24od2luZG93KSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KHdpbmRvdyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFZlcnNpb24gbGFiZWwsIGV4cG9zZWQgZm9yIGVhc2llciBjaGVja3NcbiAgICAgKiBpZiBET01QdXJpZnkgaXMgdXAgdG8gZGF0ZSBvciBub3RcbiAgICAgKi9cbiAgICBET01QdXJpZnkudmVyc2lvbiA9ICcwLjcuNCc7XG5cbiAgICBpZiAoIXdpbmRvdyB8fCAhd2luZG93LmRvY3VtZW50IHx8IHdpbmRvdy5kb2N1bWVudC5ub2RlVHlwZSAhPT0gOSkge1xuICAgICAgICAvLyBub3QgcnVubmluZyBpbiBhIGJyb3dzZXIsIHByb3ZpZGUgYSBmYWN0b3J5IGZ1bmN0aW9uXG4gICAgICAgIC8vIHNvIHRoYXQgeW91IGNhbiBwYXNzIHlvdXIgb3duIFdpbmRvd1xuICAgICAgICBET01QdXJpZnkuaXNTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIERPTVB1cmlmeTtcbiAgICB9XG5cbiAgICB2YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG4gICAgdmFyIG9yaWdpbmFsRG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICB2YXIgRG9jdW1lbnRGcmFnbWVudCA9IHdpbmRvdy5Eb2N1bWVudEZyYWdtZW50O1xuICAgIHZhciBIVE1MVGVtcGxhdGVFbGVtZW50ID0gd2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQ7XG4gICAgdmFyIE5vZGVGaWx0ZXIgPSB3aW5kb3cuTm9kZUZpbHRlcjtcbiAgICB2YXIgTmFtZWROb2RlTWFwID0gd2luZG93Lk5hbWVkTm9kZU1hcCB8fCB3aW5kb3cuTW96TmFtZWRBdHRyTWFwO1xuICAgIHZhciBUZXh0ID0gd2luZG93LlRleHQ7XG4gICAgdmFyIENvbW1lbnQgPSB3aW5kb3cuQ29tbWVudDtcbiAgICB2YXIgRE9NUGFyc2VyID0gd2luZG93LkRPTVBhcnNlcjtcblxuICAgIC8vIEFzIHBlciBpc3N1ZSAjNDcsIHRoZSB3ZWItY29tcG9uZW50cyByZWdpc3RyeSBpcyBpbmhlcml0ZWQgYnkgYVxuICAgIC8vIG5ldyBkb2N1bWVudCBjcmVhdGVkIHZpYSBjcmVhdGVIVE1MRG9jdW1lbnQuIEFzIHBlciB0aGUgc3BlY1xuICAgIC8vIChodHRwOi8vdzNjLmdpdGh1Yi5pby93ZWJjb21wb25lbnRzL3NwZWMvY3VzdG9tLyNjcmVhdGluZy1hbmQtcGFzc2luZy1yZWdpc3RyaWVzKVxuICAgIC8vIGEgbmV3IGVtcHR5IHJlZ2lzdHJ5IGlzIHVzZWQgd2hlbiBjcmVhdGluZyBhIHRlbXBsYXRlIGNvbnRlbnRzIG93bmVyXG4gICAgLy8gZG9jdW1lbnQsIHNvIHdlIHVzZSB0aGF0IGFzIG91ciBwYXJlbnQgZG9jdW1lbnQgdG8gZW5zdXJlIG5vdGhpbmdcbiAgICAvLyBpcyBpbmhlcml0ZWQuXG4gICAgaWYgKHR5cGVvZiBIVE1MVGVtcGxhdGVFbGVtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgICAgIGlmICh0ZW1wbGF0ZS5jb250ZW50ICYmIHRlbXBsYXRlLmNvbnRlbnQub3duZXJEb2N1bWVudCkge1xuICAgICAgICAgICAgZG9jdW1lbnQgPSB0ZW1wbGF0ZS5jb250ZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGltcGxlbWVudGF0aW9uID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb247XG4gICAgdmFyIGNyZWF0ZU5vZGVJdGVyYXRvciA9IGRvY3VtZW50LmNyZWF0ZU5vZGVJdGVyYXRvcjtcbiAgICB2YXIgZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZTtcbiAgICB2YXIgY3JlYXRlRG9jdW1lbnRGcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQ7XG4gICAgdmFyIGltcG9ydE5vZGUgPSBvcmlnaW5hbERvY3VtZW50LmltcG9ydE5vZGU7XG5cbiAgICB2YXIgaG9va3MgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEV4cG9zZSB3aGV0aGVyIHRoaXMgYnJvd3NlciBzdXBwb3J0cyBydW5uaW5nIHRoZSBmdWxsIERPTVB1cmlmeS5cbiAgICAgKi9cbiAgICBET01QdXJpZnkuaXNTdXBwb3J0ZWQgPVxuICAgICAgICB0eXBlb2YgaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudE1vZGUgIT09IDk7XG5cbiAgICAvKiBBZGQgcHJvcGVydGllcyB0byBhIGxvb2t1cCB0YWJsZSAqL1xuICAgIHZhciBfYWRkVG9TZXQgPSBmdW5jdGlvbihzZXQsIGFycmF5KSB7XG4gICAgICAgIHZhciBsID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobC0tKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFycmF5W2xdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGFycmF5W2xdID0gYXJyYXlbbF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldFthcnJheVtsXV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXQ7XG4gICAgfTtcblxuICAgIC8qIFNoYWxsb3cgY2xvbmUgYW4gb2JqZWN0ICovXG4gICAgdmFyIF9jbG9uZU9iaiA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgbmV3T2JqZWN0ID0ge307XG4gICAgICAgIHZhciBwcm9wZXJ0eTtcbiAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgbmV3T2JqZWN0W3Byb3BlcnR5XSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld09iamVjdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogV2UgY29uc2lkZXIgdGhlIGVsZW1lbnRzIGFuZCBhdHRyaWJ1dGVzIGJlbG93IHRvIGJlIHNhZmUuIElkZWFsbHlcbiAgICAgKiBkb24ndCBhZGQgYW55IG5ldyBvbmVzIGJ1dCBmZWVsIGZyZWUgdG8gcmVtb3ZlIHVud2FudGVkIG9uZXMuXG4gICAgICovXG5cbiAgICAvKiBhbGxvd2VkIGVsZW1lbnQgbmFtZXMgKi9cbiAgICB2YXIgQUxMT1dFRF9UQUdTID0gbnVsbDtcbiAgICB2YXIgREVGQVVMVF9BTExPV0VEX1RBR1MgPSBfYWRkVG9TZXQoe30sIFtcblxuICAgICAgICAvLyBIVE1MXG4gICAgICAgICdhJywnYWJicicsJ2Fjcm9ueW0nLCdhZGRyZXNzJywnYXJlYScsJ2FydGljbGUnLCdhc2lkZScsJ2F1ZGlvJywnYicsXG4gICAgICAgICdiZGknLCdiZG8nLCdiaWcnLCdibGluaycsJ2Jsb2NrcXVvdGUnLCdib2R5JywnYnInLCdidXR0b24nLCdjYW52YXMnLFxuICAgICAgICAnY2FwdGlvbicsJ2NlbnRlcicsJ2NpdGUnLCdjb2RlJywnY29sJywnY29sZ3JvdXAnLCdjb250ZW50JywnZGF0YScsXG4gICAgICAgICdkYXRhbGlzdCcsJ2RkJywnZGVjb3JhdG9yJywnZGVsJywnZGV0YWlscycsJ2RmbicsJ2RpcicsJ2RpdicsJ2RsJywnZHQnLFxuICAgICAgICAnZWxlbWVudCcsJ2VtJywnZmllbGRzZXQnLCdmaWdjYXB0aW9uJywnZmlndXJlJywnZm9udCcsJ2Zvb3RlcicsJ2Zvcm0nLFxuICAgICAgICAnaDEnLCdoMicsJ2gzJywnaDQnLCdoNScsJ2g2JywnaGVhZCcsJ2hlYWRlcicsJ2hncm91cCcsJ2hyJywnaHRtbCcsJ2knLFxuICAgICAgICAnaW1nJywnaW5wdXQnLCdpbnMnLCdrYmQnLCdsYWJlbCcsJ2xlZ2VuZCcsJ2xpJywnbWFpbicsJ21hcCcsJ21hcmsnLFxuICAgICAgICAnbWFycXVlZScsJ21lbnUnLCdtZW51aXRlbScsJ21ldGVyJywnbmF2Jywnbm9icicsJ29sJywnb3B0Z3JvdXAnLFxuICAgICAgICAnb3B0aW9uJywnb3V0cHV0JywncCcsJ3ByZScsJ3Byb2dyZXNzJywncScsJ3JwJywncnQnLCdydWJ5JywncycsJ3NhbXAnLFxuICAgICAgICAnc2VjdGlvbicsJ3NlbGVjdCcsJ3NoYWRvdycsJ3NtYWxsJywnc291cmNlJywnc3BhY2VyJywnc3BhbicsJ3N0cmlrZScsXG4gICAgICAgICdzdHJvbmcnLCdzdHlsZScsJ3N1YicsJ3N1bW1hcnknLCdzdXAnLCd0YWJsZScsJ3Rib2R5JywndGQnLCd0ZW1wbGF0ZScsXG4gICAgICAgICd0ZXh0YXJlYScsJ3Rmb290JywndGgnLCd0aGVhZCcsJ3RpbWUnLCd0cicsJ3RyYWNrJywndHQnLCd1JywndWwnLCd2YXInLFxuICAgICAgICAndmlkZW8nLCd3YnInLFxuXG4gICAgICAgIC8vIFNWR1xuICAgICAgICAnc3ZnJywnYWx0Z2x5cGgnLCdhbHRnbHlwaGRlZicsJ2FsdGdseXBoaXRlbScsJ2FuaW1hdGVjb2xvcicsXG4gICAgICAgICdhbmltYXRlbW90aW9uJywnYW5pbWF0ZXRyYW5zZm9ybScsJ2NpcmNsZScsJ2NsaXBwYXRoJywnZGVmcycsJ2Rlc2MnLFxuICAgICAgICAnZWxsaXBzZScsJ2ZpbHRlcicsJ2ZvbnQnLCdnJywnZ2x5cGgnLCdnbHlwaHJlZicsJ2hrZXJuJywnaW1hZ2UnLCdsaW5lJyxcbiAgICAgICAgJ2xpbmVhcmdyYWRpZW50JywnbWFya2VyJywnbWFzaycsJ21ldGFkYXRhJywnbXBhdGgnLCdwYXRoJywncGF0dGVybicsXG4gICAgICAgICdwb2x5Z29uJywncG9seWxpbmUnLCdyYWRpYWxncmFkaWVudCcsJ3JlY3QnLCdzdG9wJywnc3dpdGNoJywnc3ltYm9sJyxcbiAgICAgICAgJ3RleHQnLCd0ZXh0cGF0aCcsJ3RpdGxlJywndHJlZicsJ3RzcGFuJywndmlldycsJ3ZrZXJuJyxcblxuICAgICAgICAvLyBTVkcgRmlsdGVyc1xuICAgICAgICAnZmVCbGVuZCcsJ2ZlQ29sb3JNYXRyaXgnLCdmZUNvbXBvbmVudFRyYW5zZmVyJywnZmVDb21wb3NpdGUnLFxuICAgICAgICAnZmVDb252b2x2ZU1hdHJpeCcsJ2ZlRGlmZnVzZUxpZ2h0aW5nJywnZmVEaXNwbGFjZW1lbnRNYXAnLFxuICAgICAgICAnZmVGbG9vZCcsJ2ZlRnVuY0EnLCdmZUZ1bmNCJywnZmVGdW5jRycsJ2ZlRnVuY1InLCdmZUdhdXNzaWFuQmx1cicsXG4gICAgICAgICdmZU1lcmdlJywnZmVNZXJnZU5vZGUnLCdmZU1vcnBob2xvZ3knLCdmZU9mZnNldCcsXG4gICAgICAgICdmZVNwZWN1bGFyTGlnaHRpbmcnLCdmZVRpbGUnLCdmZVR1cmJ1bGVuY2UnLFxuXG4gICAgICAgIC8vTWF0aE1MXG4gICAgICAgICdtYXRoJywnbWVuY2xvc2UnLCdtZXJyb3InLCdtZmVuY2VkJywnbWZyYWMnLCdtZ2x5cGgnLCdtaScsJ21sYWJlbGVkdHInLFxuICAgICAgICAnbW11bGlzY3JpcHRzJywnbW4nLCdtbycsJ21vdmVyJywnbXBhZGRlZCcsJ21waGFudG9tJywnbXJvb3QnLCdtcm93JyxcbiAgICAgICAgJ21zJywnbXBzcGFjZScsJ21zcXJ0JywnbXlzdHlsZScsJ21zdWInLCdtc3VwJywnbXN1YnN1cCcsJ210YWJsZScsJ210ZCcsXG4gICAgICAgICdtdGV4dCcsJ210cicsJ211bmRlcicsJ211bmRlcm92ZXInLFxuXG4gICAgICAgIC8vVGV4dFxuICAgICAgICAnI3RleHQnXG4gICAgXSk7XG5cbiAgICAvKiBBbGxvd2VkIGF0dHJpYnV0ZSBuYW1lcyAqL1xuICAgIHZhciBBTExPV0VEX0FUVFIgPSBudWxsO1xuICAgIHZhciBERUZBVUxUX0FMTE9XRURfQVRUUiA9IF9hZGRUb1NldCh7fSwgW1xuXG4gICAgICAgIC8vIEhUTUxcbiAgICAgICAgJ2FjY2VwdCcsJ2FjdGlvbicsJ2FsaWduJywnYWx0JywnYXV0b2NvbXBsZXRlJywnYmFja2dyb3VuZCcsJ2JnY29sb3InLFxuICAgICAgICAnYm9yZGVyJywnY2VsbHBhZGRpbmcnLCdjZWxsc3BhY2luZycsJ2NoZWNrZWQnLCdjaXRlJywnY2xhc3MnLCdjbGVhcicsJ2NvbG9yJyxcbiAgICAgICAgJ2NvbHMnLCdjb2xzcGFuJywnY29vcmRzJywnZGF0ZXRpbWUnLCdkZWZhdWx0JywnZGlyJywnZGlzYWJsZWQnLFxuICAgICAgICAnZG93bmxvYWQnLCdlbmN0eXBlJywnZmFjZScsJ2ZvcicsJ2hlYWRlcnMnLCdoZWlnaHQnLCdoaWRkZW4nLCdoaWdoJywnaHJlZicsXG4gICAgICAgICdocmVmbGFuZycsJ2lkJywnaXNtYXAnLCdsYWJlbCcsJ2xhbmcnLCdsaXN0JywnbG9vcCcsICdsb3cnLCdtYXgnLFxuICAgICAgICAnbWF4bGVuZ3RoJywnbWVkaWEnLCdtZXRob2QnLCdtaW4nLCdtdWx0aXBsZScsJ25hbWUnLCdub3NoYWRlJywnbm92YWxpZGF0ZScsXG4gICAgICAgICdub3dyYXAnLCdvcGVuJywnb3B0aW11bScsJ3BhdHRlcm4nLCdwbGFjZWhvbGRlcicsJ3Bvc3RlcicsJ3ByZWxvYWQnLCdwdWJkYXRlJyxcbiAgICAgICAgJ3JhZGlvZ3JvdXAnLCdyZWFkb25seScsJ3JlbCcsJ3JlcXVpcmVkJywncmV2JywncmV2ZXJzZWQnLCdyb3dzJyxcbiAgICAgICAgJ3Jvd3NwYW4nLCdzcGVsbGNoZWNrJywnc2NvcGUnLCdzZWxlY3RlZCcsJ3NoYXBlJywnc2l6ZScsJ3NwYW4nLFxuICAgICAgICAnc3JjbGFuZycsJ3N0YXJ0Jywnc3JjJywnc3RlcCcsJ3N0eWxlJywnc3VtbWFyeScsJ3RhYmluZGV4JywndGl0bGUnLFxuICAgICAgICAndHlwZScsJ3VzZW1hcCcsJ3ZhbGlnbicsJ3ZhbHVlJywnd2lkdGgnLCd4bWxucycsXG5cbiAgICAgICAgLy8gU1ZHXG4gICAgICAgICdhY2NlbnQtaGVpZ2h0JywnYWNjdW11bGF0ZScsJ2FkZGl0aXZpdmUnLCdhbGlnbm1lbnQtYmFzZWxpbmUnLFxuICAgICAgICAnYXNjZW50JywnYXR0cmlidXRlbmFtZScsJ2F0dHJpYnV0ZXR5cGUnLCdhemltdXRoJywnYmFzZWZyZXF1ZW5jeScsXG4gICAgICAgICdiYXNlbGluZS1zaGlmdCcsJ2JlZ2luJywnYmlhcycsJ2J5JywnY2xpcCcsJ2NsaXAtcGF0aCcsJ2NsaXAtcnVsZScsXG4gICAgICAgICdjb2xvcicsJ2NvbG9yLWludGVycG9sYXRpb24nLCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCdjb2xvci1wcm9maWxlJyxcbiAgICAgICAgJ2NvbG9yLXJlbmRlcmluZycsJ2N4JywnY3knLCdkJywnZHgnLCdkeScsJ2RpZmZ1c2Vjb25zdGFudCcsJ2RpcmVjdGlvbicsXG4gICAgICAgICdkaXNwbGF5JywnZGl2aXNvcicsJ2R1cicsJ2VkZ2Vtb2RlJywnZWxldmF0aW9uJywnZW5kJywnZmlsbCcsJ2ZpbGwtb3BhY2l0eScsXG4gICAgICAgICdmaWxsLXJ1bGUnLCdmaWx0ZXInLCdmbG9vZC1jb2xvcicsJ2Zsb29kLW9wYWNpdHknLCdmb250LWZhbWlseScsJ2ZvbnQtc2l6ZScsXG4gICAgICAgICdmb250LXNpemUtYWRqdXN0JywnZm9udC1zdHJldGNoJywnZm9udC1zdHlsZScsJ2ZvbnQtdmFyaWFudCcsJ2ZvbnQtd2VpZ2h0JyxcbiAgICAgICAgJ2Z4JywgJ2Z5JywnZzEnLCdnMicsJ2dseXBoLW5hbWUnLCdnbHlwaHJlZicsJ2dyYWRpZW50dW5pdHMnLCdncmFkaWVudHRyYW5zZm9ybScsXG4gICAgICAgICdpbWFnZS1yZW5kZXJpbmcnLCdpbicsJ2luMicsJ2snLCdrMScsJ2syJywnazMnLCdrNCcsJ2tlcm5pbmcnLCdrZXlwb2ludHMnLFxuICAgICAgICAna2V5c3BsaW5lcycsJ2tleXRpbWVzJywnbGVuZ3RoYWRqdXN0JywnbGV0dGVyLXNwYWNpbmcnLCdrZXJuZWxtYXRyaXgnLFxuICAgICAgICAna2VybmVsdW5pdGxlbmd0aCcsJ2xpZ2h0aW5nLWNvbG9yJywnbG9jYWwnLCdtYXJrZXItZW5kJywnbWFya2VyLW1pZCcsXG4gICAgICAgICdtYXJrZXItc3RhcnQnLCdtYXJrZXJoZWlnaHQnLCdtYXJrZXJ1bml0cycsJ21hcmtlcndpZHRoJywnbWFza2NvbnRlbnR1bml0cycsXG4gICAgICAgICdtYXNrdW5pdHMnLCdtYXgnLCdtYXNrJywnbW9kZScsJ21pbicsJ251bW9jdGF2ZXMnLCdvZmZzZXQnLCdvcGVyYXRvcicsXG4gICAgICAgICdvcGFjaXR5Jywnb3JkZXInLCdvcmllbnQnLCdvcmllbnRhdGlvbicsJ29yaWdpbicsJ292ZXJmbG93JywncGFpbnQtb3JkZXInLFxuICAgICAgICAncGF0aCcsJ3BhdGhsZW5ndGgnLCdwYXR0ZXJuY29udGVudHVuaXRzJywncGF0dGVybnRyYW5zZm9ybScsJ3BhdHRlcm51bml0cycsXG4gICAgICAgICdwb2ludHMnLCdwcmVzZXJ2ZWFscGhhJywncicsJ3J4JywncnknLCdyYWRpdXMnLCdyZWZ4JywncmVmeScsJ3JlcGVhdGNvdW50JyxcbiAgICAgICAgJ3JlcGVhdGR1cicsJ3Jlc3RhcnQnLCdyZXN1bHQnLCdyb3RhdGUnLCdzY2FsZScsJ3NlZWQnLCdzaGFwZS1yZW5kZXJpbmcnLFxuICAgICAgICAnc3BlY3VsYXJjb25zdGFudCcsJ3NwZWN1bGFyZXhwb25lbnQnLCdzcHJlYWRtZXRob2QnLCdzdGRkZXZpYXRpb24nLCdzdGl0Y2h0aWxlcycsXG4gICAgICAgICdzdG9wLWNvbG9yJywnc3RvcC1vcGFjaXR5Jywnc3Ryb2tlLWRhc2hhcnJheScsJ3N0cm9rZS1kYXNob2Zmc2V0Jywnc3Ryb2tlLWxpbmVjYXAnLFxuICAgICAgICAnc3Ryb2tlLWxpbmVqb2luJywnc3Ryb2tlLW1pdGVybGltaXQnLCdzdHJva2Utb3BhY2l0eScsJ3N0cm9rZScsJ3N0cm9rZS13aWR0aCcsXG4gICAgICAgICdzdXJmYWNlc2NhbGUnLCd0YXJnZXR4JywndGFyZ2V0eScsJ3RyYW5zZm9ybScsJ3RleHQtYW5jaG9yJywndGV4dC1kZWNvcmF0aW9uJyxcbiAgICAgICAgJ3RleHQtcmVuZGVyaW5nJywndGV4dGxlbmd0aCcsJ3UxJywndTInLCd1bmljb2RlJywndmFsdWVzJywndmlld2JveCcsXG4gICAgICAgICd2aXNpYmlsaXR5JywndmVydC1hZHYteScsJ3ZlcnQtb3JpZ2luLXgnLCd2ZXJ0LW9yaWdpbi15Jywnd29yZC1zcGFjaW5nJyxcbiAgICAgICAgJ3dyYXAnLCd3cml0aW5nLW1vZGUnLCd4Y2hhbm5lbHNlbGVjdG9yJywneWNoYW5uZWxzZWxlY3RvcicsJ3gnLCd4MScsJ3gyJyxcbiAgICAgICAgJ3knLCd5MScsJ3kyJywneicsJ3pvb21hbmRwYW4nLFxuXG4gICAgICAgIC8vIE1hdGhNTFxuICAgICAgICAnYWNjZW50JywnYWNjZW50dW5kZXInLCdiZXZlbGxlZCcsJ2Nsb3NlJywnY29sdW1uc2FsaWduJywnY29sdW1ubGluZXMnLFxuICAgICAgICAnY29sdW1uc3BhbicsJ2Rlbm9tYWxpZ24nLCdkZXB0aCcsJ2Rpc3BsYXknLCdkaXNwbGF5c3R5bGUnLCdmZW5jZScsXG4gICAgICAgICdmcmFtZScsJ2xhcmdlb3AnLCdsZW5ndGgnLCdsaW5ldGhpY2tuZXNzJywnbHNwYWNlJywnbHF1b3RlJyxcbiAgICAgICAgJ21hdGhiYWNrZ3JvdW5kJywnbWF0aGNvbG9yJywnbWF0aHNpemUnLCdtYXRodmFyaWFudCcsJ21heHNpemUnLFxuICAgICAgICAnbWluc2l6ZScsJ21vdmFibGVsaW1pdHMnLCdub3RhdGlvbicsJ251bWFsaWduJywnb3BlbicsJ3Jvd2FsaWduJyxcbiAgICAgICAgJ3Jvd2xpbmVzJywncm93c3BhY2luZycsJ3Jvd3NwYW4nLCdyc3BhY2UnLCdycXVvdGUnLCdzY3JpcHRsZXZlbCcsXG4gICAgICAgICdzY3JpcHRtaW5zaXplJywnc2NyaXB0c2l6ZW11bHRpcGxpZXInLCdzZWxlY3Rpb24nLCdzZXBhcmF0b3InLFxuICAgICAgICAnc2VwYXJhdG9ycycsJ3N0cmV0Y2h5Jywnc3Vic2NyaXB0c2hpZnQnLCdzdXBzY3JpcHRzaGlmdCcsJ3N5bW1ldHJpYycsXG4gICAgICAgICd2b2Zmc2V0JyxcblxuICAgICAgICAvLyBYTUxcbiAgICAgICAgJ3hsaW5rOmhyZWYnLCd4bWw6aWQnLCd4bGluazp0aXRsZScsJ3htbDpzcGFjZScsJ3htbG5zOnhsaW5rJ1xuICAgIF0pO1xuXG4gICAgLyogRXhwbGljaXRseSBmb3JiaWRkZW4gdGFncyAob3ZlcnJpZGVzIEFMTE9XRURfVEFHUy9BRERfVEFHUykgKi9cbiAgICB2YXIgRk9SQklEX1RBR1MgPSBudWxsO1xuXG4gICAgLyogRXhwbGljaXRseSBmb3JiaWRkZW4gYXR0cmlidXRlcyAob3ZlcnJpZGVzIEFMTE9XRURfQVRUUi9BRERfQVRUUikgKi9cbiAgICB2YXIgRk9SQklEX0FUVFIgPSBudWxsO1xuXG4gICAgLyogRGVjaWRlIGlmIGN1c3RvbSBkYXRhIGF0dHJpYnV0ZXMgYXJlIG9rYXkgKi9cbiAgICB2YXIgQUxMT1dfREFUQV9BVFRSID0gdHJ1ZTtcblxuICAgIC8qIERlY2lkZSBpZiB1bmtub3duIHByb3RvY29scyBhcmUgb2theSAqL1xuICAgIHZhciBBTExPV19VTktOT1dOX1BST1RPQ09MUyA9IGZhbHNlO1xuXG4gICAgLyogT3V0cHV0IHNob3VsZCBiZSBzYWZlIGZvciBqUXVlcnkncyAkKCkgZmFjdG9yeT8gKi9cbiAgICB2YXIgU0FGRV9GT1JfSlFVRVJZID0gZmFsc2U7XG5cbiAgICAvKiBPdXRwdXQgc2hvdWxkIGJlIHNhZmUgZm9yIGNvbW1vbiB0ZW1wbGF0ZSBlbmdpbmVzLlxuICAgICAqIFRoaXMgbWVhbnMsIERPTVB1cmlmeSByZW1vdmVzIGRhdGEgYXR0cmlidXRlcywgbXVzdGFjaGVzIGFuZCBFUkJcbiAgICAgKi9cbiAgICB2YXIgU0FGRV9GT1JfVEVNUExBVEVTID0gZmFsc2U7XG5cbiAgICAvKiBTcGVjaWZ5IHRlbXBsYXRlIGRldGVjdGlvbiByZWdleCBmb3IgU0FGRV9GT1JfVEVNUExBVEVTIG1vZGUgKi9cbiAgICB2YXIgTVVTVEFDSEVfRVhQUiA9IC9cXHtcXHtbXFxzXFxTXSp8W1xcc1xcU10qXFx9XFx9L2dtO1xuICAgIHZhciBFUkJfRVhQUiA9IC88JVtcXHNcXFNdKnxbXFxzXFxTXSolPi9nbTtcblxuICAgIC8qIERlY2lkZSBpZiBkb2N1bWVudCB3aXRoIDxodG1sPi4uLiBzaG91bGQgYmUgcmV0dXJuZWQgKi9cbiAgICB2YXIgV0hPTEVfRE9DVU1FTlQgPSBmYWxzZTtcblxuICAgIC8qIERlY2lkZSBpZiBhIERPTSBgSFRNTEJvZHlFbGVtZW50YCBzaG91bGQgYmUgcmV0dXJuZWQsIGluc3RlYWQgb2YgYSBodG1sIHN0cmluZy5cbiAgICAgKiBJZiBgV0hPTEVfRE9DVU1FTlRgIGlzIGVuYWJsZWQgYSBgSFRNTEh0bWxFbGVtZW50YCB3aWxsIGJlIHJldHVybmVkIGluc3RlYWRcbiAgICAgKi9cbiAgICB2YXIgUkVUVVJOX0RPTSA9IGZhbHNlO1xuXG4gICAgLyogRGVjaWRlIGlmIGEgRE9NIGBEb2N1bWVudEZyYWdtZW50YCBzaG91bGQgYmUgcmV0dXJuZWQsIGluc3RlYWQgb2YgYSBodG1sIHN0cmluZyAqL1xuICAgIHZhciBSRVRVUk5fRE9NX0ZSQUdNRU5UID0gZmFsc2U7XG5cbiAgICAvKiBJZiBgUkVUVVJOX0RPTWAgb3IgYFJFVFVSTl9ET01fRlJBR01FTlRgIGlzIGVuYWJsZWQsIGRlY2lkZSBpZiB0aGUgcmV0dXJuZWQgRE9NXG4gICAgICogYE5vZGVgIGlzIGltcG9ydGVkIGludG8gdGhlIGN1cnJlbnQgYERvY3VtZW50YC4gSWYgdGhpcyBmbGFnIGlzIG5vdCBlbmFibGVkIHRoZVxuICAgICAqIGBOb2RlYCB3aWxsIGJlbG9uZyAoaXRzIG93bmVyRG9jdW1lbnQpIHRvIGEgZnJlc2ggYEhUTUxEb2N1bWVudGAsIGNyZWF0ZWQgYnlcbiAgICAgKiBET01QdXJpZnkuICovXG4gICAgdmFyIFJFVFVSTl9ET01fSU1QT1JUID0gZmFsc2U7XG5cbiAgICAvKiBPdXRwdXQgc2hvdWxkIGJlIGZyZWUgZnJvbSBET00gY2xvYmJlcmluZyBhdHRhY2tzPyAqL1xuICAgIHZhciBTQU5JVElaRV9ET00gPSB0cnVlO1xuXG4gICAgLyogS2VlcCBlbGVtZW50IGNvbnRlbnQgd2hlbiByZW1vdmluZyBlbGVtZW50PyAqL1xuICAgIHZhciBLRUVQX0NPTlRFTlQgPSB0cnVlO1xuXG4gICAgLyogVGFncyB0byBpZ25vcmUgY29udGVudCBvZiB3aGVuIEtFRVBfQ09OVEVOVCBpcyB0cnVlICovXG4gICAgdmFyIEZPUkJJRF9DT05URU5UUyA9IF9hZGRUb1NldCh7fSwgW1xuICAgICAgICAnYXVkaW8nLCAnaGVhZCcsICdtYXRoJywgJ3NjcmlwdCcsICdzdHlsZScsICdzdmcnLCAndmlkZW8nXG4gICAgXSk7XG5cbiAgICAvKiBUYWdzIHRoYXQgYXJlIHNhZmUgZm9yIGRhdGE6IFVSSXMgKi9cbiAgICB2YXIgREFUQV9VUklfVEFHUyA9IF9hZGRUb1NldCh7fSwgW1xuICAgICAgICAnYXVkaW8nLCAndmlkZW8nLCAnaW1nJywgJ3NvdXJjZSdcbiAgICBdKTtcblxuICAgIC8qIEF0dHJpYnV0ZXMgc2FmZSBmb3IgdmFsdWVzIGxpa2UgXCJqYXZhc2NyaXB0OlwiICovXG4gICAgdmFyIFVSSV9TQUZFX0FUVFJJQlVURVMgPSBfYWRkVG9TZXQoe30sIFtcbiAgICAgICAgJ2FsdCcsJ2NsYXNzJywnZm9yJywnaWQnLCdsYWJlbCcsJ25hbWUnLCdwYXR0ZXJuJywncGxhY2Vob2xkZXInLFxuICAgICAgICAnc3VtbWFyeScsJ3RpdGxlJywndmFsdWUnLCdzdHlsZScsJ3htbG5zJ1xuICAgIF0pO1xuXG4gICAgLyogS2VlcCBhIHJlZmVyZW5jZSB0byBjb25maWcgdG8gcGFzcyB0byBob29rcyAqL1xuICAgIHZhciBDT05GSUcgPSBudWxsO1xuXG4gICAgLyogSWRlYWxseSwgZG8gbm90IHRvdWNoIGFueXRoaW5nIGJlbG93IHRoaXMgbGluZSAqL1xuICAgIC8qIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gKi9cblxuICAgIHZhciBmb3JtRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcblxuICAgIC8qKlxuICAgICAqIF9wYXJzZUNvbmZpZ1xuICAgICAqXG4gICAgICogQHBhcmFtICBvcHRpb25hbCBjb25maWcgbGl0ZXJhbFxuICAgICAqL1xuICAgIHZhciBfcGFyc2VDb25maWcgPSBmdW5jdGlvbihjZmcpIHtcbiAgICAgICAgLyogU2hpZWxkIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZyb20gdGFtcGVyaW5nICovXG4gICAgICAgIGlmICh0eXBlb2YgY2ZnICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY2ZnID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvKiBTZXQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzICovXG4gICAgICAgIEFMTE9XRURfVEFHUyA9ICdBTExPV0VEX1RBR1MnIGluIGNmZyA/XG4gICAgICAgICAgICBfYWRkVG9TZXQoe30sIGNmZy5BTExPV0VEX1RBR1MpIDogREVGQVVMVF9BTExPV0VEX1RBR1M7XG4gICAgICAgIEFMTE9XRURfQVRUUiA9ICdBTExPV0VEX0FUVFInIGluIGNmZyA/XG4gICAgICAgICAgICBfYWRkVG9TZXQoe30sIGNmZy5BTExPV0VEX0FUVFIpIDogREVGQVVMVF9BTExPV0VEX0FUVFI7XG4gICAgICAgIEZPUkJJRF9UQUdTID0gJ0ZPUkJJRF9UQUdTJyBpbiBjZmcgP1xuICAgICAgICAgICAgX2FkZFRvU2V0KHt9LCBjZmcuRk9SQklEX1RBR1MpIDoge307XG4gICAgICAgIEZPUkJJRF9BVFRSID0gJ0ZPUkJJRF9BVFRSJyBpbiBjZmcgP1xuICAgICAgICAgICAgX2FkZFRvU2V0KHt9LCBjZmcuRk9SQklEX0FUVFIpIDoge307XG4gICAgICAgIEFMTE9XX0RBVEFfQVRUUiAgICAgPSBjZmcuQUxMT1dfREFUQV9BVFRSICAgICAhPT0gZmFsc2U7IC8vIERlZmF1bHQgdHJ1ZVxuICAgICAgICBBTExPV19VTktOT1dOX1BST1RPQ09MUyA9IGNmZy5BTExPV19VTktOT1dOX1BST1RPQ09MUyB8fCBmYWxzZTsgLy8gRGVmYXVsdCBmYWxzZVxuICAgICAgICBTQUZFX0ZPUl9KUVVFUlkgICAgID0gY2ZnLlNBRkVfRk9SX0pRVUVSWSAgICAgfHwgIGZhbHNlOyAvLyBEZWZhdWx0IGZhbHNlXG4gICAgICAgIFNBRkVfRk9SX1RFTVBMQVRFUyAgPSBjZmcuU0FGRV9GT1JfVEVNUExBVEVTICB8fCAgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICAgICAgV0hPTEVfRE9DVU1FTlQgICAgICA9IGNmZy5XSE9MRV9ET0NVTUVOVCAgICAgIHx8ICBmYWxzZTsgLy8gRGVmYXVsdCBmYWxzZVxuICAgICAgICBSRVRVUk5fRE9NICAgICAgICAgID0gY2ZnLlJFVFVSTl9ET00gICAgICAgICAgfHwgIGZhbHNlOyAvLyBEZWZhdWx0IGZhbHNlXG4gICAgICAgIFJFVFVSTl9ET01fRlJBR01FTlQgPSBjZmcuUkVUVVJOX0RPTV9GUkFHTUVOVCB8fCAgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICAgICAgUkVUVVJOX0RPTV9JTVBPUlQgICA9IGNmZy5SRVRVUk5fRE9NX0lNUE9SVCAgIHx8ICBmYWxzZTsgLy8gRGVmYXVsdCBmYWxzZVxuICAgICAgICBTQU5JVElaRV9ET00gICAgICAgID0gY2ZnLlNBTklUSVpFX0RPTSAgICAgICAgIT09IGZhbHNlOyAvLyBEZWZhdWx0IHRydWVcbiAgICAgICAgS0VFUF9DT05URU5UICAgICAgICA9IGNmZy5LRUVQX0NPTlRFTlQgICAgICAgICE9PSBmYWxzZTsgLy8gRGVmYXVsdCB0cnVlXG5cbiAgICAgICAgaWYgKFNBRkVfRk9SX1RFTVBMQVRFUykge1xuICAgICAgICAgICAgQUxMT1dfREFUQV9BVFRSID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoUkVUVVJOX0RPTV9GUkFHTUVOVCkge1xuICAgICAgICAgICAgUkVUVVJOX0RPTSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBNZXJnZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgKi9cbiAgICAgICAgaWYgKGNmZy5BRERfVEFHUykge1xuICAgICAgICAgICAgaWYgKEFMTE9XRURfVEFHUyA9PT0gREVGQVVMVF9BTExPV0VEX1RBR1MpIHtcbiAgICAgICAgICAgICAgICBBTExPV0VEX1RBR1MgPSBfY2xvbmVPYmooQUxMT1dFRF9UQUdTKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9hZGRUb1NldChBTExPV0VEX1RBR1MsIGNmZy5BRERfVEFHUyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNmZy5BRERfQVRUUikge1xuICAgICAgICAgICAgaWYgKEFMTE9XRURfQVRUUiA9PT0gREVGQVVMVF9BTExPV0VEX0FUVFIpIHtcbiAgICAgICAgICAgICAgICBBTExPV0VEX0FUVFIgPSBfY2xvbmVPYmooQUxMT1dFRF9BVFRSKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9hZGRUb1NldChBTExPV0VEX0FUVFIsIGNmZy5BRERfQVRUUik7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBBZGQgI3RleHQgaW4gY2FzZSBLRUVQX0NPTlRFTlQgaXMgc2V0IHRvIHRydWUgKi9cbiAgICAgICAgaWYgKEtFRVBfQ09OVEVOVCkgeyBBTExPV0VEX1RBR1NbJyN0ZXh0J10gPSB0cnVlOyB9XG5cbiAgICAgICAgLy8gUHJldmVudCBmdXJ0aGVyIG1hbmlwdWxhdGlvbiBvZiBjb25maWd1cmF0aW9uLlxuICAgICAgICAvLyBOb3QgYXZhaWxhYmxlIGluIElFOCwgU2FmYXJpIDUsIGV0Yy5cbiAgICAgICAgaWYgKE9iamVjdCAmJiAnZnJlZXplJyBpbiBPYmplY3QpIHsgT2JqZWN0LmZyZWV6ZShjZmcpOyB9XG5cbiAgICAgICAgQ09ORklHID0gY2ZnO1xuICAgIH07XG5cbiAgIC8qKlxuICAgICAqIF9mb3JjZVJlbW92ZVxuICAgICAqXG4gICAgICogQHBhcmFtICBhIERPTSBub2RlXG4gICAgICovXG4gICAgdmFyIF9mb3JjZVJlbW92ZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbm9kZS5vdXRlckhUTUwgPSAnJztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgIC8qKlxuICAgICAqIF9pbml0RG9jdW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgYSBzdHJpbmcgb2YgZGlydHkgbWFya3VwXG4gICAgICogQHJldHVybiBhIERPTSwgZmlsbGVkIHdpdGggdGhlIGRpcnR5IG1hcmt1cFxuICAgICAqL1xuICAgIHZhciBfaW5pdERvY3VtZW50ID0gZnVuY3Rpb24oZGlydHkpIHtcbiAgICAgICAgLyogQ3JlYXRlIGEgSFRNTCBkb2N1bWVudCB1c2luZyBET01QYXJzZXIgKi9cbiAgICAgICAgdmFyIGRvYywgYm9keTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRvYyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoZGlydHksICd0ZXh0L2h0bWwnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgICAvKiBTb21lIGJyb3dzZXJzIHRocm93LCBzb21lIGJyb3dzZXJzIHJldHVybiBudWxsIGZvciB0aGUgY29kZSBhYm92ZVxuICAgICAgICAgICBET01QYXJzZXIgd2l0aCB0ZXh0L2h0bWwgc3VwcG9ydCBpcyBvbmx5IGluIHZlcnkgcmVjZW50IGJyb3dzZXJzLiAqL1xuICAgICAgICBpZiAoIWRvYykge1xuICAgICAgICAgICAgZG9jID0gaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCcnKTtcbiAgICAgICAgICAgIGJvZHkgPSBkb2MuYm9keTtcbiAgICAgICAgICAgIGJvZHkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChib2R5LnBhcmVudE5vZGUuZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgICAgICAgYm9keS5vdXRlckhUTUwgPSBkaXJ0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFdvcmsgb24gd2hvbGUgZG9jdW1lbnQgb3IganVzdCBpdHMgYm9keSAqL1xuICAgICAgICBpZiAodHlwZW9mIGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcbiAgICAgICAgICAgICAgICBXSE9MRV9ET0NVTUVOVCA/ICdodG1sJyA6ICdib2R5JylbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldEVsZW1lbnRzQnlUYWdOYW1lLmNhbGwoZG9jLFxuICAgICAgICAgICAgV0hPTEVfRE9DVU1FTlQgPyAnaHRtbCcgOiAnYm9keScpWzBdO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBfY3JlYXRlSXRlcmF0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgZG9jdW1lbnQvZnJhZ21lbnQgdG8gY3JlYXRlIGl0ZXJhdG9yIGZvclxuICAgICAqIEByZXR1cm4gaXRlcmF0b3IgaW5zdGFuY2VcbiAgICAgKi9cbiAgICB2YXIgX2NyZWF0ZUl0ZXJhdG9yID0gZnVuY3Rpb24ocm9vdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTm9kZUl0ZXJhdG9yLmNhbGwocm9vdC5vd25lckRvY3VtZW50IHx8IHJvb3QsXG4gICAgICAgICAgICByb290LFxuICAgICAgICAgICAgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlRcbiAgICAgICAgICAgIHwgTm9kZUZpbHRlci5TSE9XX0NPTU1FTlRcbiAgICAgICAgICAgIHwgTm9kZUZpbHRlci5TSE9XX1RFWFQsXG4gICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVDsgfSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIF9pc0Nsb2JiZXJlZFxuICAgICAqXG4gICAgICogQHBhcmFtICBlbGVtZW50IHRvIGNoZWNrIGZvciBjbG9iYmVyaW5nIGF0dGFja3NcbiAgICAgKiBAcmV0dXJuIHRydWUgaWYgY2xvYmJlcmVkLCBmYWxzZSBpZiBzYWZlXG4gICAgICovXG4gICAgdmFyIF9pc0Nsb2JiZXJlZCA9IGZ1bmN0aW9uKGVsbSkge1xuICAgICAgICBpZiAoZWxtIGluc3RhbmNlb2YgVGV4dCB8fCBlbG0gaW5zdGFuY2VvZiBDb21tZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCAgdHlwZW9mIGVsbS5ub2RlTmFtZSAhPT0gJ3N0cmluZydcbiAgICAgICAgICAgfHwgdHlwZW9mIGVsbS50ZXh0Q29udGVudCAhPT0gJ3N0cmluZydcbiAgICAgICAgICAgfHwgdHlwZW9mIGVsbS5yZW1vdmVDaGlsZCAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICB8fCAhKGVsbS5hdHRyaWJ1dGVzIGluc3RhbmNlb2YgTmFtZWROb2RlTWFwKVxuICAgICAgICAgICB8fCB0eXBlb2YgZWxtLnJlbW92ZUF0dHJpYnV0ZSAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICB8fCB0eXBlb2YgZWxtLnNldEF0dHJpYnV0ZSAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogX3Nhbml0aXplRWxlbWVudHNcbiAgICAgKlxuICAgICAqIEBwcm90ZWN0IG5vZGVOYW1lXG4gICAgICogQHByb3RlY3QgdGV4dENvbnRlbnRcbiAgICAgKiBAcHJvdGVjdCByZW1vdmVDaGlsZFxuICAgICAqXG4gICAgICogQHBhcmFtICAgbm9kZSB0byBjaGVjayBmb3IgcGVybWlzc2lvbiB0byBleGlzdFxuICAgICAqIEByZXR1cm4gIHRydWUgaWYgbm9kZSB3YXMga2lsbGVkLCBmYWxzZSBpZiBsZWZ0IGFsaXZlXG4gICAgICovXG4gICAgdmFyIF9zYW5pdGl6ZUVsZW1lbnRzID0gZnVuY3Rpb24oY3VycmVudE5vZGUpIHtcbiAgICAgICAgdmFyIHRhZ05hbWUsIGNvbnRlbnQ7XG4gICAgICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICAgICAgX2V4ZWN1dGVIb29rKCdiZWZvcmVTYW5pdGl6ZUVsZW1lbnRzJywgY3VycmVudE5vZGUsIG51bGwpO1xuXG4gICAgICAgIC8qIENoZWNrIGlmIGVsZW1lbnQgaXMgY2xvYmJlcmVkIG9yIGNhbiBjbG9iYmVyICovXG4gICAgICAgIGlmIChfaXNDbG9iYmVyZWQoY3VycmVudE5vZGUpKSB7XG4gICAgICAgICAgICBfZm9yY2VSZW1vdmUoY3VycmVudE5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBOb3cgbGV0J3MgY2hlY2sgdGhlIGVsZW1lbnQncyB0eXBlIGFuZCBuYW1lICovXG4gICAgICAgIHRhZ05hbWUgPSBjdXJyZW50Tm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICAgICAgX2V4ZWN1dGVIb29rKCd1cG9uU2FuaXRpemVFbGVtZW50JywgY3VycmVudE5vZGUsIHtcbiAgICAgICAgICAgIHRhZ05hbWU6IHRhZ05hbWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyogUmVtb3ZlIGVsZW1lbnQgaWYgYW55dGhpbmcgZm9yYmlkcyBpdHMgcHJlc2VuY2UgKi9cbiAgICAgICAgaWYgKCFBTExPV0VEX1RBR1NbdGFnTmFtZV0gfHwgRk9SQklEX1RBR1NbdGFnTmFtZV0pIHtcbiAgICAgICAgICAgIC8qIEtlZXAgY29udGVudCBleGNlcHQgZm9yIGJsYWNrLWxpc3RlZCBlbGVtZW50cyAqL1xuICAgICAgICAgICAgaWYgKEtFRVBfQ09OVEVOVCAmJiAhRk9SQklEX0NPTlRFTlRTW3RhZ05hbWVdXG4gICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiBjdXJyZW50Tm9kZS5pbnNlcnRBZGphY2VudEhUTUwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5pbnNlcnRBZGphY2VudEhUTUwoJ0FmdGVyRW5kJywgY3VycmVudE5vZGUuaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2ZvcmNlUmVtb3ZlKGN1cnJlbnROb2RlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogQ29udmVydCBtYXJrdXAgdG8gY292ZXIgalF1ZXJ5IGJlaGF2aW9yICovXG4gICAgICAgIGlmIChTQUZFX0ZPUl9KUVVFUlkgJiYgIWN1cnJlbnROb2RlLmZpcnN0RWxlbWVudENoaWxkICYmXG4gICAgICAgICAgICAgICAgKCFjdXJyZW50Tm9kZS5jb250ZW50IHx8ICFjdXJyZW50Tm9kZS5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkKSkge1xuICAgICAgICAgICAgY3VycmVudE5vZGUuaW5uZXJIVE1MID0gY3VycmVudE5vZGUudGV4dENvbnRlbnQucmVwbGFjZSgvPC9nLCAnJmx0OycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogU2FuaXRpemUgZWxlbWVudCBjb250ZW50IHRvIGJlIHRlbXBsYXRlLXNhZmUgKi9cbiAgICAgICAgaWYgKFNBRkVfRk9SX1RFTVBMQVRFUyAmJiBjdXJyZW50Tm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgICAgICAgLyogR2V0IHRoZSBlbGVtZW50J3MgdGV4dCBjb250ZW50ICovXG4gICAgICAgICAgICBjb250ZW50ID0gY3VycmVudE5vZGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKE1VU1RBQ0hFX0VYUFIsICcgJyk7XG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKEVSQl9FWFBSLCAnICcpO1xuICAgICAgICAgICAgY3VycmVudE5vZGUudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgICAgICBfZXhlY3V0ZUhvb2soJ2FmdGVyU2FuaXRpemVFbGVtZW50cycsIGN1cnJlbnROb2RlLCBudWxsKTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHZhciBEQVRBX0FUVFIgPSAvXmRhdGEtW1xcdy5cXHUwMEI3LVxcdUZGRkYtXS87XG4gICAgdmFyIElTX0FMTE9XRURfVVJJID0gL14oPzooPzooPzpmfGh0KXRwcz98bWFpbHRvfHRlbCk6fFteYS16XXxbYS16Ky5cXC1dKyg/OlteYS16Ky5cXC06XXwkKSkvaTtcbiAgICB2YXIgSVNfU0NSSVBUX09SX0RBVEEgPSAvXig/OlxcdytzY3JpcHR8ZGF0YSk6L2k7XG4gICAgLyogVGhpcyBuZWVkcyB0byBiZSBleHRlbnNpdmUgdGhhbmtzIHRvIFdlYmtpdC9CbGluaydzIGJlaGF2aW9yICovXG4gICAgdmFyIEFUVFJfV0hJVEVTUEFDRSA9IC9bXFx4MDAtXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMC1cXHUyMDI5XFx1MjA1ZlxcdTMwMDBdL2c7XG5cbiAgICAvKipcbiAgICAgKiBfc2FuaXRpemVBdHRyaWJ1dGVzXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdCBhdHRyaWJ1dGVzXG4gICAgICogQHByb3RlY3Qgbm9kZU5hbWVcbiAgICAgKiBAcHJvdGVjdCByZW1vdmVBdHRyaWJ1dGVcbiAgICAgKiBAcHJvdGVjdCBzZXRBdHRyaWJ1dGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIG5vZGUgdG8gc2FuaXRpemVcbiAgICAgKiBAcmV0dXJuICB2b2lkXG4gICAgICovXG4gICAgdmFyIF9zYW5pdGl6ZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbihjdXJyZW50Tm9kZSkge1xuICAgICAgICB2YXIgYXR0ciwgbmFtZSwgdmFsdWUsIGxjTmFtZSwgaWRBdHRyLCBhdHRyaWJ1dGVzLCBob29rRXZlbnQsIGw7XG4gICAgICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICAgICAgX2V4ZWN1dGVIb29rKCdiZWZvcmVTYW5pdGl6ZUF0dHJpYnV0ZXMnLCBjdXJyZW50Tm9kZSwgbnVsbCk7XG5cbiAgICAgICAgYXR0cmlidXRlcyA9IGN1cnJlbnROb2RlLmF0dHJpYnV0ZXM7XG5cbiAgICAgICAgLyogQ2hlY2sgaWYgd2UgaGF2ZSBhdHRyaWJ1dGVzOyBpZiBub3Qgd2UgbWlnaHQgaGF2ZSBhIHRleHQgbm9kZSAqL1xuICAgICAgICBpZiAoIWF0dHJpYnV0ZXMpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgaG9va0V2ZW50ID0ge1xuICAgICAgICAgICAgYXR0ck5hbWU6ICcnLFxuICAgICAgICAgICAgYXR0clZhbHVlOiAnJyxcbiAgICAgICAgICAgIGtlZXBBdHRyOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGwgPSBhdHRyaWJ1dGVzLmxlbmd0aDtcblxuICAgICAgICAvKiBHbyBiYWNrd2FyZHMgb3ZlciBhbGwgYXR0cmlidXRlczsgc2FmZWx5IHJlbW92ZSBiYWQgb25lcyAqL1xuICAgICAgICB3aGlsZSAobC0tKSB7XG4gICAgICAgICAgICBhdHRyID0gYXR0cmlidXRlc1tsXTtcbiAgICAgICAgICAgIG5hbWUgPSBhdHRyLm5hbWU7XG4gICAgICAgICAgICB2YWx1ZSA9IGF0dHIudmFsdWU7XG4gICAgICAgICAgICBsY05hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICAgICAgICAgIGhvb2tFdmVudC5hdHRyTmFtZSA9IGxjTmFtZTtcbiAgICAgICAgICAgIGhvb2tFdmVudC5hdHRyVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGhvb2tFdmVudC5rZWVwQXR0ciA9IHRydWU7XG4gICAgICAgICAgICBfZXhlY3V0ZUhvb2soJ3Vwb25TYW5pdGl6ZUF0dHJpYnV0ZScsIGN1cnJlbnROb2RlLCBob29rRXZlbnQgKTtcbiAgICAgICAgICAgIHZhbHVlID0gaG9va0V2ZW50LmF0dHJWYWx1ZTtcblxuICAgICAgICAgICAgLyogUmVtb3ZlIGF0dHJpYnV0ZSAqL1xuICAgICAgICAgICAgLy8gU2FmYXJpIChpT1MgKyBNYWMpLCBsYXN0IHRlc3RlZCB2OC4wLjUsIGNyYXNoZXMgaWYgeW91IHRyeSB0b1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGEgXCJuYW1lXCIgYXR0cmlidXRlIGZyb20gYW4gPGltZz4gdGFnIHRoYXQgaGFzIGFuIFwiaWRcIlxuICAgICAgICAgICAgLy8gYXR0cmlidXRlIGF0IHRoZSB0aW1lLlxuICAgICAgICAgICAgaWYgKGxjTmFtZSA9PT0gJ25hbWUnICAmJlxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5ub2RlTmFtZSA9PT0gJ0lNRycgJiYgYXR0cmlidXRlcy5pZCkge1xuICAgICAgICAgICAgICAgIGlkQXR0ciA9IGF0dHJpYnV0ZXMuaWQ7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmluZGV4T2YoaWRBdHRyKSA+IGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUuc2V0QXR0cmlidXRlKCdpZCcsIGlkQXR0ci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGF2b2lkcyBhIGNyYXNoIGluIFNhZmFyaSB2OS4wIHdpdGggZG91YmxlLWlkcy5cbiAgICAgICAgICAgICAgICAvLyBUaGUgdHJpY2sgaXMgdG8gZmlyc3Qgc2V0IHRoZSBpZCB0byBiZSBlbXB0eSBhbmQgdGhlbiB0b1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgYXR0cml1YnV0ZVxuICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnaWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLnNldEF0dHJpYnV0ZShuYW1lLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogRGlkIHRoZSBob29rcyBhcHByb3ZlIG9mIHRoZSBhdHRyaWJ1dGU/ICovXG4gICAgICAgICAgICBpZiAoIWhvb2tFdmVudC5rZWVwQXR0cikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBNYWtlIHN1cmUgYXR0cmlidXRlIGNhbm5vdCBjbG9iYmVyICovXG4gICAgICAgICAgICBpZiAoU0FOSVRJWkVfRE9NICYmXG4gICAgICAgICAgICAgICAgICAgIChsY05hbWUgPT09ICdpZCcgfHwgbGNOYW1lID09PSAnbmFtZScpICYmXG4gICAgICAgICAgICAgICAgICAgICh2YWx1ZSBpbiB3aW5kb3cgfHwgdmFsdWUgaW4gZG9jdW1lbnQgfHwgdmFsdWUgaW4gZm9ybUVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIFNhbml0aXplIGF0dHJpYnV0ZSBjb250ZW50IHRvIGJlIHRlbXBsYXRlLXNhZmUgKi9cbiAgICAgICAgICAgIGlmIChTQUZFX0ZPUl9URU1QTEFURVMpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoTVVTVEFDSEVfRVhQUiwgJyAnKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoRVJCX0VYUFIsICcgJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAvKiBDaGVjayB0aGUgbmFtZSBpcyBwZXJtaXR0ZWQgKi9cbiAgICAgICAgICAgICAgICAoQUxMT1dFRF9BVFRSW2xjTmFtZV0gJiYgIUZPUkJJRF9BVFRSW2xjTmFtZV0gJiYgKFxuICAgICAgICAgICAgICAgICAgLyogQ2hlY2sgbm8gc2NyaXB0LCBkYXRhIG9yIHVua25vd24gcG9zc2libHkgdW5zYWZlIFVSSVxuICAgICAgICAgICAgICAgICAgICAgdW5sZXNzIHdlIGtub3cgVVJJIHZhbHVlcyBhcmUgc2FmZSBmb3IgdGhhdCBhdHRyaWJ1dGUgKi9cbiAgICAgICAgICAgICAgICAgIFVSSV9TQUZFX0FUVFJJQlVURVNbbGNOYW1lXSB8fFxuICAgICAgICAgICAgICAgICAgSVNfQUxMT1dFRF9VUkkudGVzdCh2YWx1ZS5yZXBsYWNlKEFUVFJfV0hJVEVTUEFDRSwnJykpIHx8XG4gICAgICAgICAgICAgICAgICAvKiBLZWVwIGltYWdlIGRhdGEgVVJJcyBhbGl2ZSBpZiBzcmMgaXMgYWxsb3dlZCAqL1xuICAgICAgICAgICAgICAgICAgKGxjTmFtZSA9PT0gJ3NyYycgJiYgdmFsdWUuaW5kZXhPZignZGF0YTonKSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgIERBVEFfVVJJX1RBR1NbY3VycmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pXG4gICAgICAgICAgICAgICAgKSkgfHxcbiAgICAgICAgICAgICAgICAvKiBBbGxvdyBwb3RlbnRpYWxseSB2YWxpZCBkYXRhLSogYXR0cmlidXRlczpcbiAgICAgICAgICAgICAgICAgKiBBdCBsZWFzdCBvbmUgY2hhcmFjdGVyIGFmdGVyIFwiLVwiIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9kb20uaHRtbCNlbWJlZGRpbmctY3VzdG9tLW5vbi12aXNpYmxlLWRhdGEtd2l0aC10aGUtZGF0YS0qLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgICAgICogWE1MLWNvbXBhdGlibGUgKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZnJhc3RydWN0dXJlLmh0bWwjeG1sLWNvbXBhdGlibGUgYW5kIGh0dHA6Ly93d3cudzMub3JnL1RSL3htbC8jZDBlODA0KVxuICAgICAgICAgICAgICAgICAqIFdlIGRvbid0IG5lZWQgdG8gY2hlY2sgdGhlIHZhbHVlOyBpdCdzIGFsd2F5cyBVUkkgc2FmZS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgKEFMTE9XX0RBVEFfQVRUUiAmJiBEQVRBX0FUVFIudGVzdChsY05hbWUpKSB8fFxuICAgICAgICAgICAgICAgICAvKiBBbGxvdyB1bmtub3duIHByb3RvY29sczpcbiAgICAgICAgICAgICAgICAgICogVGhpcyBwcm92aWRlcyBzdXBwb3J0IGZvciBsaW5rcyB0aGF0IGFyZSBoYW5kbGVkIGJ5IHByb3RvY29sIGhhbmRsZXJzIHdoaWNoIG1heSBiZSB1bmtub3duXG4gICAgICAgICAgICAgICAgICAqIGFoZWFkIG9mIHRpbWUsIGUuZy4gZmI6LCBzcG90aWZ5OlxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgKEFMTE9XX1VOS05PV05fUFJPVE9DT0xTICYmICFJU19TQ1JJUFRfT1JfREFUQS50ZXN0KHZhbHVlLnJlcGxhY2UoQVRUUl9XSElURVNQQUNFLCcnKSkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvKiBIYW5kbGUgaW52YWxpZCBkYXRhLSogYXR0cmlidXRlIHNldCBieSB0cnktY2F0Y2hpbmcgaXQgKi9cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiBFeGVjdXRlIGEgaG9vayBpZiBwcmVzZW50ICovXG4gICAgICAgIF9leGVjdXRlSG9vaygnYWZ0ZXJTYW5pdGl6ZUF0dHJpYnV0ZXMnLCBjdXJyZW50Tm9kZSwgbnVsbCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIF9zYW5pdGl6ZVNoYWRvd0RPTVxuICAgICAqXG4gICAgICogQHBhcmFtICBmcmFnbWVudCB0byBpdGVyYXRlIG92ZXIgcmVjdXJzaXZlbHlcbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICB2YXIgX3Nhbml0aXplU2hhZG93RE9NID0gZnVuY3Rpb24oZnJhZ21lbnQpIHtcbiAgICAgICAgdmFyIHNoYWRvd05vZGU7XG4gICAgICAgIHZhciBzaGFkb3dJdGVyYXRvciA9IF9jcmVhdGVJdGVyYXRvcihmcmFnbWVudCk7XG5cbiAgICAgICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgICAgICBfZXhlY3V0ZUhvb2soJ2JlZm9yZVNhbml0aXplU2hhZG93RE9NJywgZnJhZ21lbnQsIG51bGwpO1xuXG4gICAgICAgIHdoaWxlICggKHNoYWRvd05vZGUgPSBzaGFkb3dJdGVyYXRvci5uZXh0Tm9kZSgpKSApIHtcbiAgICAgICAgICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICAgICAgICAgIF9leGVjdXRlSG9vaygndXBvblNhbml0aXplU2hhZG93Tm9kZScsIHNoYWRvd05vZGUsIG51bGwpO1xuXG4gICAgICAgICAgICAvKiBTYW5pdGl6ZSB0YWdzIGFuZCBlbGVtZW50cyAqL1xuICAgICAgICAgICAgaWYgKF9zYW5pdGl6ZUVsZW1lbnRzKHNoYWRvd05vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIERlZXAgc2hhZG93IERPTSBkZXRlY3RlZCAqL1xuICAgICAgICAgICAgaWYgKHNoYWRvd05vZGUuY29udGVudCBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgICBfc2FuaXRpemVTaGFkb3dET00oc2hhZG93Tm9kZS5jb250ZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogQ2hlY2sgYXR0cmlidXRlcywgc2FuaXRpemUgaWYgbmVjZXNzYXJ5ICovXG4gICAgICAgICAgICBfc2FuaXRpemVBdHRyaWJ1dGVzKHNoYWRvd05vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgICAgICBfZXhlY3V0ZUhvb2soJ2FmdGVyU2FuaXRpemVTaGFkb3dET00nLCBmcmFnbWVudCwgbnVsbCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIF9leGVjdXRlSG9va1xuICAgICAqIEV4ZWN1dGUgdXNlciBjb25maWd1cmFibGUgaG9va3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZW50cnlQb2ludCAgTmFtZSBvZiB0aGUgaG9vaydzIGVudHJ5IHBvaW50XG4gICAgICogQHBhcmFtICB7Tm9kZX0gY3VycmVudE5vZGVcbiAgICAgKi9cbiAgICB2YXIgX2V4ZWN1dGVIb29rID0gZnVuY3Rpb24oZW50cnlQb2ludCwgY3VycmVudE5vZGUsIGRhdGEpIHtcbiAgICAgICAgaWYgKCFob29rc1tlbnRyeVBvaW50XSkgeyByZXR1cm47IH1cblxuICAgICAgICBob29rc1tlbnRyeVBvaW50XS5mb3JFYWNoKGZ1bmN0aW9uKGhvb2spIHtcbiAgICAgICAgICAgIGhvb2suY2FsbChET01QdXJpZnksIGN1cnJlbnROb2RlLCBkYXRhLCBDT05GSUcpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogc2FuaXRpemVcbiAgICAgKiBQdWJsaWMgbWV0aG9kIHByb3ZpZGluZyBjb3JlIHNhbml0YXRpb24gZnVuY3Rpb25hbGl0eVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRpcnR5IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqL1xuICAgIERPTVB1cmlmeS5zYW5pdGl6ZSA9IGZ1bmN0aW9uKGRpcnR5LCBjZmcpIHtcbiAgICAgICAgdmFyIGJvZHksIGN1cnJlbnROb2RlLCBvbGROb2RlLCBub2RlSXRlcmF0b3IsIHJldHVybk5vZGU7XG4gICAgICAgIC8qIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgc3RyaW5nIHRvIHNhbml0aXplLlxuICAgICAgICAgICBETyBOT1QgcmV0dXJuIGVhcmx5LCBhcyB0aGlzIHdpbGwgcmV0dXJuIHRoZSB3cm9uZyB0eXBlIGlmXG4gICAgICAgICAgIHRoZSB1c2VyIGhhcyByZXF1ZXN0ZWQgYSBET00gb2JqZWN0IHJhdGhlciB0aGFuIGEgc3RyaW5nICovXG4gICAgICAgIGlmICghZGlydHkpIHtcbiAgICAgICAgICAgIGRpcnR5ID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBTdHJpbmdpZnksIGluIGNhc2UgZGlydHkgaXMgYW4gb2JqZWN0ICovXG4gICAgICAgIGlmICh0eXBlb2YgZGlydHkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRpcnR5LnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9TdHJpbmcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlydHkgPSBkaXJ0eS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyogQ2hlY2sgd2UgY2FuIHJ1bi4gT3RoZXJ3aXNlIGZhbGwgYmFjayBvciBpZ25vcmUgKi9cbiAgICAgICAgaWYgKCFET01QdXJpZnkuaXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93LnRvU3RhdGljSFRNTCA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgICB8fCB0eXBlb2Ygd2luZG93LnRvU3RhdGljSFRNTCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cudG9TdGF0aWNIVE1MKGRpcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaXJ0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIEFzc2lnbiBjb25maWcgdmFycyAqL1xuICAgICAgICBfcGFyc2VDb25maWcoY2ZnKTtcblxuICAgICAgICAvKiBFeGl0IGRpcmVjdGx5IGlmIHdlIGhhdmUgbm90aGluZyB0byBkbyAqL1xuICAgICAgICBpZiAoIVJFVFVSTl9ET00gJiYgIVdIT0xFX0RPQ1VNRU5UICYmIGRpcnR5LmluZGV4T2YoJzwnKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXJ0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIEluaXRpYWxpemUgdGhlIGRvY3VtZW50IHRvIHdvcmsgb24gKi9cbiAgICAgICAgYm9keSA9IF9pbml0RG9jdW1lbnQoZGlydHkpO1xuXG4gICAgICAgIC8qIENoZWNrIHdlIGhhdmUgYSBET00gbm9kZSBmcm9tIHRoZSBkYXRhICovXG4gICAgICAgIGlmICghYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIFJFVFVSTl9ET00gPyBudWxsIDogJyc7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBHZXQgbm9kZSBpdGVyYXRvciAqL1xuICAgICAgICBub2RlSXRlcmF0b3IgPSBfY3JlYXRlSXRlcmF0b3IoYm9keSk7XG5cbiAgICAgICAgLyogTm93IHN0YXJ0IGl0ZXJhdGluZyBvdmVyIHRoZSBjcmVhdGVkIGRvY3VtZW50ICovXG4gICAgICAgIHdoaWxlICggKGN1cnJlbnROb2RlID0gbm9kZUl0ZXJhdG9yLm5leHROb2RlKCkpICkge1xuXG4gICAgICAgICAgICAvKiBGaXggSUUncyBzdHJhbmdlIGJlaGF2aW9yIHdpdGggbWFuaXB1bGF0ZWQgdGV4dE5vZGVzICM4OSAqL1xuICAgICAgICAgICAgaWYgKGN1cnJlbnROb2RlLm5vZGVUeXBlID09PSAzICYmIGN1cnJlbnROb2RlID09PSBvbGROb2RlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIFNhbml0aXplIHRhZ3MgYW5kIGVsZW1lbnRzICovXG4gICAgICAgICAgICBpZiAoX3Nhbml0aXplRWxlbWVudHMoY3VycmVudE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIFNoYWRvdyBET00gZGV0ZWN0ZWQsIHNhbml0aXplIGl0ICovXG4gICAgICAgICAgICBpZiAoY3VycmVudE5vZGUuY29udGVudCBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgICBfc2FuaXRpemVTaGFkb3dET00oY3VycmVudE5vZGUuY29udGVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIENoZWNrIGF0dHJpYnV0ZXMsIHNhbml0aXplIGlmIG5lY2Vzc2FyeSAqL1xuICAgICAgICAgICAgX3Nhbml0aXplQXR0cmlidXRlcyhjdXJyZW50Tm9kZSk7XG5cbiAgICAgICAgICAgIG9sZE5vZGUgPSBjdXJyZW50Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFJldHVybiBzYW5pdGl6ZWQgc3RyaW5nIG9yIERPTSAqL1xuICAgICAgICBpZiAoUkVUVVJOX0RPTSkge1xuXG4gICAgICAgICAgICBpZiAoUkVUVVJOX0RPTV9GUkFHTUVOVCkge1xuICAgICAgICAgICAgICAgIHJldHVybk5vZGUgPSBjcmVhdGVEb2N1bWVudEZyYWdtZW50LmNhbGwoYm9keS5vd25lckRvY3VtZW50KTtcblxuICAgICAgICAgICAgICAgIHdoaWxlIChib2R5LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuTm9kZS5hcHBlbmRDaGlsZChib2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuTm9kZSA9IGJvZHk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChSRVRVUk5fRE9NX0lNUE9SVCkge1xuICAgICAgICAgICAgICAgIC8qIGFkb3B0Tm9kZSgpIGlzIG5vdCB1c2VkIGJlY2F1c2UgaW50ZXJuYWwgc3RhdGUgaXMgbm90IHJlc2V0XG4gICAgICAgICAgICAgICAgICAgKGUuZy4gdGhlIHBhc3QgbmFtZXMgbWFwIG9mIGEgSFRNTEZvcm1FbGVtZW50KSwgdGhpcyBpcyBzYWZlXG4gICAgICAgICAgICAgICAgICAgaW4gdGhlb3J5IGJ1dCB3ZSB3b3VsZCByYXRoZXIgbm90IHJpc2sgYW5vdGhlciBhdHRhY2sgdmVjdG9yLlxuICAgICAgICAgICAgICAgICAgIFRoZSBzdGF0ZSB0aGF0IGlzIGNsb25lZCBieSBpbXBvcnROb2RlKCkgaXMgZXhwbGljaXRseSBkZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgYnkgdGhlIHNwZWNzLiAqL1xuICAgICAgICAgICAgICAgIHJldHVybk5vZGUgPSBpbXBvcnROb2RlLmNhbGwob3JpZ2luYWxEb2N1bWVudCwgcmV0dXJuTm9kZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXR1cm5Ob2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFdIT0xFX0RPQ1VNRU5UID8gYm9keS5vdXRlckhUTUwgOiBib2R5LmlubmVySFRNTDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogYWRkSG9va1xuICAgICAqIFB1YmxpYyBtZXRob2QgdG8gYWRkIERPTVB1cmlmeSBob29rc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVudHJ5UG9pbnRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBob29rRnVuY3Rpb25cbiAgICAgKi9cbiAgICBET01QdXJpZnkuYWRkSG9vayA9IGZ1bmN0aW9uKGVudHJ5UG9pbnQsIGhvb2tGdW5jdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGhvb2tGdW5jdGlvbiAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm47IH1cbiAgICAgICAgaG9va3NbZW50cnlQb2ludF0gPSBob29rc1tlbnRyeVBvaW50XSB8fCBbXTtcbiAgICAgICAgaG9va3NbZW50cnlQb2ludF0ucHVzaChob29rRnVuY3Rpb24pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiByZW1vdmVIb29rXG4gICAgICogUHVibGljIG1ldGhvZCB0byByZW1vdmUgYSBET01QdXJpZnkgaG9vayBhdCBhIGdpdmVuIGVudHJ5UG9pbnRcbiAgICAgKiAocG9wcyBpdCBmcm9tIHRoZSBzdGFjayBvZiBob29rcyBpZiBtb3JlIGFyZSBwcmVzZW50KVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVudHJ5UG9pbnRcbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBET01QdXJpZnkucmVtb3ZlSG9vayA9IGZ1bmN0aW9uKGVudHJ5UG9pbnQpIHtcbiAgICAgICAgaWYgKGhvb2tzW2VudHJ5UG9pbnRdKSB7XG4gICAgICAgICAgICBob29rc1tlbnRyeVBvaW50XS5wb3AoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiByZW1vdmVIb29rc1xuICAgICAqIFB1YmxpYyBtZXRob2QgdG8gcmVtb3ZlIGFsbCBET01QdXJpZnkgaG9va3MgYXQgYSBnaXZlbiBlbnRyeVBvaW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGVudHJ5UG9pbnRcbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBET01QdXJpZnkucmVtb3ZlSG9va3MgPSBmdW5jdGlvbihlbnRyeVBvaW50KSB7XG4gICAgICAgIGlmIChob29rc1tlbnRyeVBvaW50XSkge1xuICAgICAgICAgICAgaG9va3NbZW50cnlQb2ludF0gPSBbXTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiByZW1vdmVBbGxIb29rc1xuICAgICAqIFB1YmxpYyBtZXRob2QgdG8gcmVtb3ZlIGFsbCBET01QdXJpZnkgaG9va3NcbiAgICAgKlxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIERPTVB1cmlmeS5yZW1vdmVBbGxIb29rcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBob29rcyA9IFtdO1xuICAgIH07XG5cbiAgICByZXR1cm4gRE9NUHVyaWZ5O1xufSkpO1xuXG4vKiohXG4gKiBLdlNvcnRhYmxlXG4gKiBAYXV0aG9yXHRSdWJhWGEgICA8dHJhc2hAcnViYXhhLm9yZz5cbiAqIEBsaWNlbnNlIE1JVFxuICpcbiAqIENoYW5nZWQga3Zzb3J0YWJsZSBwbHVnaW4gbmFtaW5nIHRvIHByZXZlbnQgY29uZmxpY3Qgd2l0aCBKUXVlcnkgVUkgU29ydGFibGVcbiAqIEBhdXRob3IgS2FydGlrIFZpc3dlc3dhcmFuXG4gKi9cbihmdW5jdGlvbiBrdnNvcnRhYmxlTW9kdWxlKGZhY3RvcnkpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZhY3RvcnkpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8qIGpzaGludCBzdWI6dHJ1ZSAqL1xuXHRcdHdpbmRvd1tcIkt2U29ydGFibGVcIl0gPSBmYWN0b3J5KCk7XG5cdH1cbn0pKGZ1bmN0aW9uIGt2c29ydGFibGVGYWN0b3J5KCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PSBcInVuZGVmaW5lZFwiIHx8ICF3aW5kb3cuZG9jdW1lbnQpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24ga3Zzb3J0YWJsZUVycm9yKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiS3ZTb3J0YWJsZS5qcyByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIik7XG5cdFx0fTtcblx0fVxuXG5cdHZhciBkcmFnRWwsXG5cdFx0cGFyZW50RWwsXG5cdFx0Z2hvc3RFbCxcblx0XHRjbG9uZUVsLFxuXHRcdHJvb3RFbCxcblx0XHRuZXh0RWwsXG5cdFx0bGFzdERvd25FbCxcblxuXHRcdHNjcm9sbEVsLFxuXHRcdHNjcm9sbFBhcmVudEVsLFxuXHRcdHNjcm9sbEN1c3RvbUZuLFxuXG5cdFx0bGFzdEVsLFxuXHRcdGxhc3RDU1MsXG5cdFx0bGFzdFBhcmVudENTUyxcblxuXHRcdG9sZEluZGV4LFxuXHRcdG5ld0luZGV4LFxuXG5cdFx0YWN0aXZlR3JvdXAsXG5cdFx0cHV0S3ZTb3J0YWJsZSxcblxuXHRcdGF1dG9TY3JvbGwgPSB7fSxcblxuXHRcdHRhcEV2dCxcblx0XHR0b3VjaEV2dCxcblxuXHRcdG1vdmVkLFxuXG5cdFx0LyoqIEBjb25zdCAqL1xuXHRcdFJfU1BBQ0UgPSAvXFxzKy9nLFxuXHRcdFJfRkxPQVQgPSAvbGVmdHxyaWdodHxpbmxpbmUvLFxuXG5cdFx0ZXhwYW5kbyA9ICdLdlNvcnRhYmxlJyArIChuZXcgRGF0ZSkuZ2V0VGltZSgpLFxuXG5cdFx0d2luID0gd2luZG93LFxuXHRcdGRvY3VtZW50ID0gd2luLmRvY3VtZW50LFxuXHRcdHBhcnNlSW50ID0gd2luLnBhcnNlSW50LFxuXG5cdFx0JCA9IHdpbi5qUXVlcnkgfHwgd2luLlplcHRvLFxuXHRcdFBvbHltZXIgPSB3aW4uUG9seW1lcixcblxuXHRcdGNhcHR1cmVNb2RlID0gZmFsc2UsXG5cblx0XHRzdXBwb3J0RHJhZ2dhYmxlID0gISEoJ2RyYWdnYWJsZScgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLFxuXHRcdHN1cHBvcnRDc3NQb2ludGVyRXZlbnRzID0gKGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0Ly8gZmFsc2Ugd2hlbiBJRTExXG5cdFx0XHRpZiAoISFuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9UcmlkZW50LipydlsgOl0/MTFcXC4vKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3gnKTtcblx0XHRcdGVsLnN0eWxlLmNzc1RleHQgPSAncG9pbnRlci1ldmVudHM6YXV0byc7XG5cdFx0XHRyZXR1cm4gZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9PT0gJ2F1dG8nO1xuXHRcdH0pKCksXG5cblx0XHRfc2lsZW50ID0gZmFsc2UsXG5cblx0XHRhYnMgPSBNYXRoLmFicyxcblx0XHRtaW4gPSBNYXRoLm1pbixcblxuXHRcdHNhdmVkSW5wdXRDaGVja2VkID0gW10sXG5cdFx0dG91Y2hEcmFnT3Zlckxpc3RlbmVycyA9IFtdLFxuXG5cdFx0X2F1dG9TY3JvbGwgPSBfdGhyb3R0bGUoZnVuY3Rpb24gKC8qKkV2ZW50Ki9ldnQsIC8qKk9iamVjdCovb3B0aW9ucywgLyoqSFRNTEVsZW1lbnQqL3Jvb3RFbCkge1xuXHRcdFx0Ly8gQnVnOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01MDU1MjFcblx0XHRcdGlmIChyb290RWwgJiYgb3B0aW9ucy5zY3JvbGwpIHtcblx0XHRcdFx0dmFyIF90aGlzID0gcm9vdEVsW2V4cGFuZG9dLFxuXHRcdFx0XHRcdGVsLFxuXHRcdFx0XHRcdHJlY3QsXG5cdFx0XHRcdFx0c2VucyA9IG9wdGlvbnMuc2Nyb2xsU2Vuc2l0aXZpdHksXG5cdFx0XHRcdFx0c3BlZWQgPSBvcHRpb25zLnNjcm9sbFNwZWVkLFxuXG5cdFx0XHRcdFx0eCA9IGV2dC5jbGllbnRYLFxuXHRcdFx0XHRcdHkgPSBldnQuY2xpZW50WSxcblxuXHRcdFx0XHRcdHdpbldpZHRoID0gd2luZG93LmlubmVyV2lkdGgsXG5cdFx0XHRcdFx0d2luSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0LFxuXG5cdFx0XHRcdFx0dngsXG5cdFx0XHRcdFx0dnksXG5cblx0XHRcdFx0XHRzY3JvbGxPZmZzZXRYLFxuXHRcdFx0XHRcdHNjcm9sbE9mZnNldFlcblx0XHRcdFx0XHQ7XG5cblx0XHRcdFx0Ly8gRGVsZWN0IHNjcm9sbEVsXG5cdFx0XHRcdGlmIChzY3JvbGxQYXJlbnRFbCAhPT0gcm9vdEVsKSB7XG5cdFx0XHRcdFx0c2Nyb2xsRWwgPSBvcHRpb25zLnNjcm9sbDtcblx0XHRcdFx0XHRzY3JvbGxQYXJlbnRFbCA9IHJvb3RFbDtcblx0XHRcdFx0XHRzY3JvbGxDdXN0b21GbiA9IG9wdGlvbnMuc2Nyb2xsRm47XG5cblx0XHRcdFx0XHRpZiAoc2Nyb2xsRWwgPT09IHRydWUpIHtcblx0XHRcdFx0XHRcdHNjcm9sbEVsID0gcm9vdEVsO1xuXG5cdFx0XHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0XHRcdGlmICgoc2Nyb2xsRWwub2Zmc2V0V2lkdGggPCBzY3JvbGxFbC5zY3JvbGxXaWR0aCkgfHxcblx0XHRcdFx0XHRcdFx0XHQoc2Nyb2xsRWwub2Zmc2V0SGVpZ2h0IDwgc2Nyb2xsRWwuc2Nyb2xsSGVpZ2h0KVxuXHRcdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHQvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cdFx0XHRcdFx0XHR9IHdoaWxlIChzY3JvbGxFbCA9IHNjcm9sbEVsLnBhcmVudE5vZGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChzY3JvbGxFbCkge1xuXHRcdFx0XHRcdGVsID0gc2Nyb2xsRWw7XG5cdFx0XHRcdFx0cmVjdCA9IHNjcm9sbEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRcdHZ4ID0gKGFicyhyZWN0LnJpZ2h0IC0geCkgPD0gc2VucykgLSAoYWJzKHJlY3QubGVmdCAtIHgpIDw9IHNlbnMpO1xuXHRcdFx0XHRcdHZ5ID0gKGFicyhyZWN0LmJvdHRvbSAtIHkpIDw9IHNlbnMpIC0gKGFicyhyZWN0LnRvcCAtIHkpIDw9IHNlbnMpO1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHRpZiAoISh2eCB8fCB2eSkpIHtcblx0XHRcdFx0XHR2eCA9ICh3aW5XaWR0aCAtIHggPD0gc2VucykgLSAoeCA8PSBzZW5zKTtcblx0XHRcdFx0XHR2eSA9ICh3aW5IZWlnaHQgLSB5IDw9IHNlbnMpIC0gKHkgPD0gc2Vucyk7XG5cblx0XHRcdFx0XHQvKiBqc2hpbnQgZXhwcjp0cnVlICovXG5cdFx0XHRcdFx0KHZ4IHx8IHZ5KSAmJiAoZWwgPSB3aW4pO1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHRpZiAoYXV0b1Njcm9sbC52eCAhPT0gdnggfHwgYXV0b1Njcm9sbC52eSAhPT0gdnkgfHwgYXV0b1Njcm9sbC5lbCAhPT0gZWwpIHtcblx0XHRcdFx0XHRhdXRvU2Nyb2xsLmVsID0gZWw7XG5cdFx0XHRcdFx0YXV0b1Njcm9sbC52eCA9IHZ4O1xuXHRcdFx0XHRcdGF1dG9TY3JvbGwudnkgPSB2eTtcblxuXHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoYXV0b1Njcm9sbC5waWQpO1xuXG5cdFx0XHRcdFx0aWYgKGVsKSB7XG5cdFx0XHRcdFx0XHRhdXRvU2Nyb2xsLnBpZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0c2Nyb2xsT2Zmc2V0WSA9IHZ5ID8gdnkgKiBzcGVlZCA6IDA7XG5cdFx0XHRcdFx0XHRcdHNjcm9sbE9mZnNldFggPSB2eCA/IHZ4ICogc3BlZWQgOiAwO1xuXG5cdFx0XHRcdFx0XHRcdGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Yoc2Nyb2xsQ3VzdG9tRm4pKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNjcm9sbEN1c3RvbUZuLmNhbGwoX3RoaXMsIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFksIGV2dCk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoZWwgPT09IHdpbikge1xuXHRcdFx0XHRcdFx0XHRcdHdpbi5zY3JvbGxUbyh3aW4ucGFnZVhPZmZzZXQgKyBzY3JvbGxPZmZzZXRYLCB3aW4ucGFnZVlPZmZzZXQgKyBzY3JvbGxPZmZzZXRZKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRlbC5zY3JvbGxUb3AgKz0gc2Nyb2xsT2Zmc2V0WTtcblx0XHRcdFx0XHRcdFx0XHRlbC5zY3JvbGxMZWZ0ICs9IHNjcm9sbE9mZnNldFg7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sIDI0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LCAzMCksXG5cblx0XHRfcHJlcGFyZUdyb3VwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0XHRcdGZ1bmN0aW9uIHRvRm4odmFsdWUsIHB1bGwpIHtcblx0XHRcdFx0aWYgKHZhbHVlID09PSB2b2lkIDAgfHwgdmFsdWUgPT09IHRydWUpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGdyb3VwLm5hbWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20pIHtcblx0XHRcdFx0XHRcdHZhciBmcm9tR3JvdXAgPSBmcm9tLm9wdGlvbnMuZ3JvdXAubmFtZTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHB1bGxcblx0XHRcdFx0XHRcdFx0PyB2YWx1ZVxuXHRcdFx0XHRcdFx0XHQ6IHZhbHVlICYmICh2YWx1ZS5qb2luXG5cdFx0XHRcdFx0XHRcdFx0PyB2YWx1ZS5pbmRleE9mKGZyb21Hcm91cCkgPiAtMVxuXHRcdFx0XHRcdFx0XHRcdDogKGZyb21Hcm91cCA9PSB2YWx1ZSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZ3JvdXAgPSB7fTtcblx0XHRcdHZhciBvcmlnaW5hbEdyb3VwID0gb3B0aW9ucy5ncm91cDtcblxuXHRcdFx0aWYgKCFvcmlnaW5hbEdyb3VwIHx8IHR5cGVvZiBvcmlnaW5hbEdyb3VwICE9ICdvYmplY3QnKSB7XG5cdFx0XHRcdG9yaWdpbmFsR3JvdXAgPSB7bmFtZTogb3JpZ2luYWxHcm91cH07XG5cdFx0XHR9XG5cblx0XHRcdGdyb3VwLm5hbWUgPSBvcmlnaW5hbEdyb3VwLm5hbWU7XG5cdFx0XHRncm91cC5jaGVja1B1bGwgPSB0b0ZuKG9yaWdpbmFsR3JvdXAucHVsbCwgdHJ1ZSk7XG5cdFx0XHRncm91cC5jaGVja1B1dCA9IHRvRm4ob3JpZ2luYWxHcm91cC5wdXQpO1xuXHRcdFx0Z3JvdXAucmV2ZXJ0Q2xvbmUgPSBvcmlnaW5hbEdyb3VwLnJldmVydENsb25lO1xuXG5cdFx0XHRvcHRpb25zLmdyb3VwID0gZ3JvdXA7XG5cdFx0fVxuXHRcdDtcblxuXG5cdC8qKlxuXHQgKiBAY2xhc3MgIEt2U29ydGFibGVcblx0ICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbFxuXHQgKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgIFtvcHRpb25zXVxuXHQgKi9cblx0ZnVuY3Rpb24gS3ZTb3J0YWJsZShlbCwgb3B0aW9ucykge1xuXHRcdGlmICghKGVsICYmIGVsLm5vZGVUeXBlICYmIGVsLm5vZGVUeXBlID09PSAxKSkge1xuXHRcdFx0dGhyb3cgJ0t2U29ydGFibGU6IGBlbGAgbXVzdCBiZSBIVE1MRWxlbWVudCwgYW5kIG5vdCAnICsge30udG9TdHJpbmcuY2FsbChlbCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5lbCA9IGVsOyAvLyByb290IGVsZW1lbnRcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zID0gX2V4dGVuZCh7fSwgb3B0aW9ucyk7XG5cblxuXHRcdC8vIEV4cG9ydCBpbnN0YW5jZVxuXHRcdGVsW2V4cGFuZG9dID0gdGhpcztcblxuXHRcdC8vIERlZmF1bHQgb3B0aW9uc1xuXHRcdHZhciBkZWZhdWx0cyA9IHtcblx0XHRcdGdyb3VwOiBNYXRoLnJhbmRvbSgpLFxuXHRcdFx0c29ydDogdHJ1ZSxcblx0XHRcdGRpc2FibGVkOiBmYWxzZSxcblx0XHRcdHN0b3JlOiBudWxsLFxuXHRcdFx0aGFuZGxlOiBudWxsLFxuXHRcdFx0c2Nyb2xsOiB0cnVlLFxuXHRcdFx0c2Nyb2xsU2Vuc2l0aXZpdHk6IDMwLFxuXHRcdFx0c2Nyb2xsU3BlZWQ6IDEwLFxuXHRcdFx0ZHJhZ2dhYmxlOiAvW3VvXWwvaS50ZXN0KGVsLm5vZGVOYW1lKSA/ICdsaScgOiAnPionLFxuXHRcdFx0Z2hvc3RDbGFzczogJ2t2c29ydGFibGUtZ2hvc3QnLFxuXHRcdFx0Y2hvc2VuQ2xhc3M6ICdrdnNvcnRhYmxlLWNob3NlbicsXG5cdFx0XHRkcmFnQ2xhc3M6ICdrdnNvcnRhYmxlLWRyYWcnLFxuXHRcdFx0aWdub3JlOiAnYSwgaW1nJyxcblx0XHRcdGZpbHRlcjogbnVsbCxcblx0XHRcdHByZXZlbnRPbkZpbHRlcjogdHJ1ZSxcblx0XHRcdGFuaW1hdGlvbjogMCxcblx0XHRcdHNldERhdGE6IGZ1bmN0aW9uIChkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuXHRcdFx0XHRkYXRhVHJhbnNmZXIuc2V0RGF0YSgnVGV4dCcsIGRyYWdFbC50ZXh0Q29udGVudCk7XG5cdFx0XHR9LFxuXHRcdFx0ZHJvcEJ1YmJsZTogZmFsc2UsXG5cdFx0XHRkcmFnb3ZlckJ1YmJsZTogZmFsc2UsXG5cdFx0XHRkYXRhSWRBdHRyOiAnZGF0YS1pZCcsXG5cdFx0XHRkZWxheTogMCxcblx0XHRcdGZvcmNlRmFsbGJhY2s6IGZhbHNlLFxuXHRcdFx0ZmFsbGJhY2tDbGFzczogJ2t2c29ydGFibGUtZmFsbGJhY2snLFxuXHRcdFx0ZmFsbGJhY2tPbkJvZHk6IGZhbHNlLFxuXHRcdFx0ZmFsbGJhY2tUb2xlcmFuY2U6IDAsXG5cdFx0XHRmYWxsYmFja09mZnNldDoge3g6IDAsIHk6IDB9XG5cdFx0fTtcblxuXG5cdFx0Ly8gU2V0IGRlZmF1bHQgb3B0aW9uc1xuXHRcdGZvciAodmFyIG5hbWUgaW4gZGVmYXVsdHMpIHtcblx0XHRcdCEobmFtZSBpbiBvcHRpb25zKSAmJiAob3B0aW9uc1tuYW1lXSA9IGRlZmF1bHRzW25hbWVdKTtcblx0XHR9XG5cblx0XHRfcHJlcGFyZUdyb3VwKG9wdGlvbnMpO1xuXG5cdFx0Ly8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG5cdFx0Zm9yICh2YXIgZm4gaW4gdGhpcykge1xuXHRcdFx0aWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHR0aGlzW2ZuXSA9IHRoaXNbZm5dLmJpbmQodGhpcyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0dXAgZHJhZyBtb2RlXG5cdFx0dGhpcy5uYXRpdmVEcmFnZ2FibGUgPSBvcHRpb25zLmZvcmNlRmFsbGJhY2sgPyBmYWxzZSA6IHN1cHBvcnREcmFnZ2FibGU7XG5cblx0XHQvLyBCaW5kIGV2ZW50c1xuXHRcdF9vbihlbCwgJ21vdXNlZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuXHRcdF9vbihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcblx0XHRfb24oZWwsICdwb2ludGVyZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuXG5cdFx0aWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG5cdFx0XHRfb24oZWwsICdkcmFnb3ZlcicsIHRoaXMpO1xuXHRcdFx0X29uKGVsLCAnZHJhZ2VudGVyJywgdGhpcyk7XG5cdFx0fVxuXG5cdFx0dG91Y2hEcmFnT3Zlckxpc3RlbmVycy5wdXNoKHRoaXMuX29uRHJhZ092ZXIpO1xuXG5cdFx0Ly8gUmVzdG9yZSBzb3J0aW5nXG5cdFx0b3B0aW9ucy5zdG9yZSAmJiB0aGlzLnNvcnQob3B0aW9ucy5zdG9yZS5nZXQodGhpcykpO1xuXHR9XG5cblxuXHRLdlNvcnRhYmxlLnByb3RvdHlwZSA9IC8qKiBAbGVuZHMgS3ZTb3J0YWJsZS5wcm90b3R5cGUgKi8ge1xuXHRcdGNvbnN0cnVjdG9yOiBLdlNvcnRhYmxlLFxuXG5cdFx0X29uVGFwU3RhcnQ6IGZ1bmN0aW9uICgvKiogRXZlbnR8VG91Y2hFdmVudCAqL2V2dCkge1xuXHRcdFx0dmFyIF90aGlzID0gdGhpcyxcblx0XHRcdFx0ZWwgPSB0aGlzLmVsLFxuXHRcdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0XHRwcmV2ZW50T25GaWx0ZXIgPSBvcHRpb25zLnByZXZlbnRPbkZpbHRlcixcblx0XHRcdFx0dHlwZSA9IGV2dC50eXBlLFxuXHRcdFx0XHR0b3VjaCA9IGV2dC50b3VjaGVzICYmIGV2dC50b3VjaGVzWzBdLFxuXHRcdFx0XHR0YXJnZXQgPSAodG91Y2ggfHwgZXZ0KS50YXJnZXQsXG5cdFx0XHRcdG9yaWdpbmFsVGFyZ2V0ID0gZXZ0LnRhcmdldC5zaGFkb3dSb290ICYmIGV2dC5wYXRoWzBdIHx8IHRhcmdldCxcblx0XHRcdFx0ZmlsdGVyID0gb3B0aW9ucy5maWx0ZXIsXG5cdFx0XHRcdHN0YXJ0SW5kZXg7XG5cblx0XHRcdF9zYXZlSW5wdXRDaGVja2VkU3RhdGUoZWwpO1xuXG5cblx0XHRcdC8vIERvbid0IHRyaWdnZXIgc3RhcnQgZXZlbnQgd2hlbiBhbiBlbGVtZW50IGlzIGJlZW4gZHJhZ2dlZCwgb3RoZXJ3aXNlIHRoZSBldnQub2xkaW5kZXggYWx3YXlzIHdyb25nIHdoZW4gc2V0IG9wdGlvbi5ncm91cC5cblx0XHRcdGlmIChkcmFnRWwpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZ0LmJ1dHRvbiAhPT0gMCB8fCBvcHRpb25zLmRpc2FibGVkKSB7XG5cdFx0XHRcdHJldHVybjsgLy8gb25seSBsZWZ0IGJ1dHRvbiBvciBlbmFibGVkXG5cdFx0XHR9XG5cblxuXHRcdFx0dGFyZ2V0ID0gX2Nsb3Nlc3QodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSwgZWwpO1xuXG5cdFx0XHRpZiAoIXRhcmdldCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmIChsYXN0RG93bkVsID09PSB0YXJnZXQpIHtcblx0XHRcdFx0Ly8gSWdub3JpbmcgZHVwbGljYXRlIGBkb3duYFxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIGRyYWdnZWQgZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudFxuXHRcdFx0c3RhcnRJbmRleCA9IF9pbmRleCh0YXJnZXQsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcblxuXHRcdFx0Ly8gQ2hlY2sgZmlsdGVyXG5cdFx0XHRpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRpZiAoZmlsdGVyLmNhbGwodGhpcywgZXZ0LCB0YXJnZXQsIHRoaXMpKSB7XG5cdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQoX3RoaXMsIG9yaWdpbmFsVGFyZ2V0LCAnZmlsdGVyJywgdGFyZ2V0LCBlbCwgc3RhcnRJbmRleCk7XG5cdFx0XHRcdFx0cHJldmVudE9uRmlsdGVyICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdHJldHVybjsgLy8gY2FuY2VsIGRuZFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChmaWx0ZXIpIHtcblx0XHRcdFx0ZmlsdGVyID0gZmlsdGVyLnNwbGl0KCcsJykuc29tZShmdW5jdGlvbiAoY3JpdGVyaWEpIHtcblx0XHRcdFx0XHRjcml0ZXJpYSA9IF9jbG9zZXN0KG9yaWdpbmFsVGFyZ2V0LCBjcml0ZXJpYS50cmltKCksIGVsKTtcblxuXHRcdFx0XHRcdGlmIChjcml0ZXJpYSkge1xuXHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQoX3RoaXMsIGNyaXRlcmlhLCAnZmlsdGVyJywgdGFyZ2V0LCBlbCwgc3RhcnRJbmRleCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmIChmaWx0ZXIpIHtcblx0XHRcdFx0XHRwcmV2ZW50T25GaWx0ZXIgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0cmV0dXJuOyAvLyBjYW5jZWwgZG5kXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdGlvbnMuaGFuZGxlICYmICFfY2xvc2VzdChvcmlnaW5hbFRhcmdldCwgb3B0aW9ucy5oYW5kbGUsIGVsKSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFByZXBhcmUgYGRyYWdzdGFydGBcblx0XHRcdHRoaXMuX3ByZXBhcmVEcmFnU3RhcnQoZXZ0LCB0b3VjaCwgdGFyZ2V0LCBzdGFydEluZGV4KTtcblx0XHR9LFxuXG5cdFx0X3ByZXBhcmVEcmFnU3RhcnQ6IGZ1bmN0aW9uICgvKiogRXZlbnQgKi9ldnQsIC8qKiBUb3VjaCAqL3RvdWNoLCAvKiogSFRNTEVsZW1lbnQgKi90YXJnZXQsIC8qKiBOdW1iZXIgKi9zdGFydEluZGV4KSB7XG5cdFx0XHR2YXIgX3RoaXMgPSB0aGlzLFxuXHRcdFx0XHRlbCA9IF90aGlzLmVsLFxuXHRcdFx0XHRvcHRpb25zID0gX3RoaXMub3B0aW9ucyxcblx0XHRcdFx0b3duZXJEb2N1bWVudCA9IGVsLm93bmVyRG9jdW1lbnQsXG5cdFx0XHRcdGRyYWdTdGFydEZuO1xuXG5cdFx0XHRpZiAodGFyZ2V0ICYmICFkcmFnRWwgJiYgKHRhcmdldC5wYXJlbnROb2RlID09PSBlbCkpIHtcblx0XHRcdFx0dGFwRXZ0ID0gZXZ0O1xuXG5cdFx0XHRcdHJvb3RFbCA9IGVsO1xuXHRcdFx0XHRkcmFnRWwgPSB0YXJnZXQ7XG5cdFx0XHRcdHBhcmVudEVsID0gZHJhZ0VsLnBhcmVudE5vZGU7XG5cdFx0XHRcdG5leHRFbCA9IGRyYWdFbC5uZXh0U2libGluZztcblx0XHRcdFx0bGFzdERvd25FbCA9IHRhcmdldDtcblx0XHRcdFx0YWN0aXZlR3JvdXAgPSBvcHRpb25zLmdyb3VwO1xuXHRcdFx0XHRvbGRJbmRleCA9IHN0YXJ0SW5kZXg7XG5cblx0XHRcdFx0dGhpcy5fbGFzdFggPSAodG91Y2ggfHwgZXZ0KS5jbGllbnRYO1xuXHRcdFx0XHR0aGlzLl9sYXN0WSA9ICh0b3VjaCB8fCBldnQpLmNsaWVudFk7XG5cblx0XHRcdFx0ZHJhZ0VsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJ3RyYW5zZm9ybSc7XG5cblx0XHRcdFx0ZHJhZ1N0YXJ0Rm4gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0Ly8gRGVsYXllZCBkcmFnIGhhcyBiZWVuIHRyaWdnZXJlZFxuXHRcdFx0XHRcdC8vIHdlIGNhbiByZS1lbmFibGUgdGhlIGV2ZW50czogdG91Y2htb3ZlL21vdXNlbW92ZVxuXHRcdFx0XHRcdF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcoKTtcblxuXHRcdFx0XHRcdC8vIE1ha2UgdGhlIGVsZW1lbnQgZHJhZ2dhYmxlXG5cdFx0XHRcdFx0ZHJhZ0VsLmRyYWdnYWJsZSA9IF90aGlzLm5hdGl2ZURyYWdnYWJsZTtcblxuXHRcdFx0XHRcdC8vIENob3NlbiBpdGVtXG5cdFx0XHRcdFx0X3RvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5jaG9zZW5DbGFzcywgdHJ1ZSk7XG5cblx0XHRcdFx0XHQvLyBCaW5kIHRoZSBldmVudHM6IGRyYWdzdGFydC9kcmFnZW5kXG5cdFx0XHRcdFx0X3RoaXMuX3RyaWdnZXJEcmFnU3RhcnQoZXZ0LCB0b3VjaCk7XG5cblx0XHRcdFx0XHQvLyBEcmFnIHN0YXJ0IGV2ZW50XG5cdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQoX3RoaXMsIHJvb3RFbCwgJ2Nob29zZScsIGRyYWdFbCwgcm9vdEVsLCBvbGRJbmRleCk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gRGlzYWJsZSBcImRyYWdnYWJsZVwiXG5cdFx0XHRcdG9wdGlvbnMuaWdub3JlLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbiAoY3JpdGVyaWEpIHtcblx0XHRcdFx0XHRfZmluZChkcmFnRWwsIGNyaXRlcmlhLnRyaW0oKSwgX2Rpc2FibGVEcmFnZ2FibGUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRfb24ob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCBfdGhpcy5fb25Ecm9wKTtcblx0XHRcdFx0X29uKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9vbkRyb3ApO1xuXHRcdFx0XHRfb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7XG5cdFx0XHRcdF9vbihvd25lckRvY3VtZW50LCAncG9pbnRlcmNhbmNlbCcsIF90aGlzLl9vbkRyb3ApO1xuXHRcdFx0XHRfb24ob3duZXJEb2N1bWVudCwgJ3NlbGVjdHN0YXJ0JywgX3RoaXMpO1xuXG5cdFx0XHRcdGlmIChvcHRpb25zLmRlbGF5KSB7XG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHVzZXIgbW92ZXMgdGhlIHBvaW50ZXIgb3IgbGV0IGdvIHRoZSBjbGljayBvciB0b3VjaFxuXHRcdFx0XHRcdC8vIGJlZm9yZSB0aGUgZGVsYXkgaGFzIGJlZW4gcmVhY2hlZDpcblx0XHRcdFx0XHQvLyBkaXNhYmxlIHRoZSBkZWxheWVkIGRyYWdcblx0XHRcdFx0XHRfb24ob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcblx0XHRcdFx0XHRfb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG5cdFx0XHRcdFx0X29uKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuXHRcdFx0XHRcdF9vbihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG5cdFx0XHRcdFx0X29uKG93bmVyRG9jdW1lbnQsICd0b3VjaG1vdmUnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcblx0XHRcdFx0XHRfb24ob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG5cblx0XHRcdFx0XHRfdGhpcy5fZHJhZ1N0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGRyYWdTdGFydEZuLCBvcHRpb25zLmRlbGF5KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkcmFnU3RhcnRGbigpO1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfZGlzYWJsZURlbGF5ZWREcmFnOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgb3duZXJEb2N1bWVudCA9IHRoaXMuZWwub3duZXJEb2N1bWVudDtcblxuXHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuX2RyYWdTdGFydFRpbWVyKTtcblx0XHRcdF9vZmYob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuXHRcdFx0X29mZihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuXHRcdFx0X29mZihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuXHRcdFx0X29mZihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcblx0XHRcdF9vZmYob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG5cdFx0XHRfb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG5cdFx0fSxcblxuXHRcdF90cmlnZ2VyRHJhZ1N0YXJ0OiBmdW5jdGlvbiAoLyoqIEV2ZW50ICovZXZ0LCAvKiogVG91Y2ggKi90b3VjaCkge1xuXHRcdFx0dG91Y2ggPSB0b3VjaCB8fCAoZXZ0LnBvaW50ZXJUeXBlID09ICd0b3VjaCcgPyBldnQgOiBudWxsKTtcblxuXHRcdFx0aWYgKHRvdWNoKSB7XG5cdFx0XHRcdC8vIFRvdWNoIGRldmljZSBzdXBwb3J0XG5cdFx0XHRcdHRhcEV2dCA9IHtcblx0XHRcdFx0XHR0YXJnZXQ6IGRyYWdFbCxcblx0XHRcdFx0XHRjbGllbnRYOiB0b3VjaC5jbGllbnRYLFxuXHRcdFx0XHRcdGNsaWVudFk6IHRvdWNoLmNsaWVudFlcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLl9vbkRyYWdTdGFydCh0YXBFdnQsICd0b3VjaCcpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoIXRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG5cdFx0XHRcdHRoaXMuX29uRHJhZ1N0YXJ0KHRhcEV2dCwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0X29uKGRyYWdFbCwgJ2RyYWdlbmQnLCB0aGlzKTtcblx0XHRcdFx0X29uKHJvb3RFbCwgJ2RyYWdzdGFydCcsIHRoaXMuX29uRHJhZ1N0YXJ0KTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0aWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuXHRcdFx0XHRcdC8vIFRpbWVvdXQgbmVjY2Vzc2FyeSBmb3IgSUU5XHRcdFx0XHRcdFxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0ZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5KCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0d2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X2RyYWdTdGFydGVkOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAocm9vdEVsICYmIGRyYWdFbCkge1xuXHRcdFx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdFx0XHQvLyBBcHBseSBlZmZlY3Rcblx0XHRcdFx0X3RvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5naG9zdENsYXNzLCB0cnVlKTtcblx0XHRcdFx0X3RvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5kcmFnQ2xhc3MsIGZhbHNlKTtcblxuXHRcdFx0XHRLdlNvcnRhYmxlLmFjdGl2ZSA9IHRoaXM7XG5cblx0XHRcdFx0Ly8gRHJhZyBzdGFydCBldmVudFxuXHRcdFx0XHRfZGlzcGF0Y2hFdmVudCh0aGlzLCByb290RWwsICdzdGFydCcsIGRyYWdFbCwgcm9vdEVsLCBvbGRJbmRleCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9udWxsaW5nKCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9lbXVsYXRlRHJhZ092ZXI6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmICh0b3VjaEV2dCkge1xuXHRcdFx0XHRpZiAodGhpcy5fbGFzdFggPT09IHRvdWNoRXZ0LmNsaWVudFggJiYgdGhpcy5fbGFzdFkgPT09IHRvdWNoRXZ0LmNsaWVudFkpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl9sYXN0WCA9IHRvdWNoRXZ0LmNsaWVudFg7XG5cdFx0XHRcdHRoaXMuX2xhc3RZID0gdG91Y2hFdnQuY2xpZW50WTtcblxuXHRcdFx0XHRpZiAoIXN1cHBvcnRDc3NQb2ludGVyRXZlbnRzKSB7XG5cdFx0XHRcdFx0X2NzcyhnaG9zdEVsLCAnZGlzcGxheScsICdub25lJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0b3VjaEV2dC5jbGllbnRYLCB0b3VjaEV2dC5jbGllbnRZKSxcblx0XHRcdFx0XHRwYXJlbnQgPSB0YXJnZXQsXG5cdFx0XHRcdFx0aSA9IHRvdWNoRHJhZ092ZXJMaXN0ZW5lcnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmIChwYXJlbnQpIHtcblx0XHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0XHRpZiAocGFyZW50W2V4cGFuZG9dKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdFx0XHRcdFx0XHR0b3VjaERyYWdPdmVyTGlzdGVuZXJzW2ldKHtcblx0XHRcdFx0XHRcdFx0XHRcdGNsaWVudFg6IHRvdWNoRXZ0LmNsaWVudFgsXG5cdFx0XHRcdFx0XHRcdFx0XHRjbGllbnRZOiB0b3VjaEV2dC5jbGllbnRZLFxuXHRcdFx0XHRcdFx0XHRcdFx0dGFyZ2V0OiB0YXJnZXQsXG5cdFx0XHRcdFx0XHRcdFx0XHRyb290RWw6IHBhcmVudFxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHRhcmdldCA9IHBhcmVudDsgLy8gc3RvcmUgbGFzdCBlbGVtZW50XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0LyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuXHRcdFx0XHRcdHdoaWxlIChwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIXN1cHBvcnRDc3NQb2ludGVyRXZlbnRzKSB7XG5cdFx0XHRcdFx0X2NzcyhnaG9zdEVsLCAnZGlzcGxheScsICcnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblxuXHRcdF9vblRvdWNoTW92ZTogZnVuY3Rpb24gKC8qKlRvdWNoRXZlbnQqL2V2dCkge1xuXHRcdFx0aWYgKHRhcEV2dCkge1xuXHRcdFx0XHR2YXJcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRcdFx0ZmFsbGJhY2tUb2xlcmFuY2UgPSBvcHRpb25zLmZhbGxiYWNrVG9sZXJhbmNlLFxuXHRcdFx0XHRcdGZhbGxiYWNrT2Zmc2V0ID0gb3B0aW9ucy5mYWxsYmFja09mZnNldCxcblx0XHRcdFx0XHR0b3VjaCA9IGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQsXG5cdFx0XHRcdFx0ZHggPSAodG91Y2guY2xpZW50WCAtIHRhcEV2dC5jbGllbnRYKSArIGZhbGxiYWNrT2Zmc2V0LngsXG5cdFx0XHRcdFx0ZHkgPSAodG91Y2guY2xpZW50WSAtIHRhcEV2dC5jbGllbnRZKSArIGZhbGxiYWNrT2Zmc2V0LnksXG5cdFx0XHRcdFx0dHJhbnNsYXRlM2QgPSBldnQudG91Y2hlcyA/ICd0cmFuc2xhdGUzZCgnICsgZHggKyAncHgsJyArIGR5ICsgJ3B4LDApJyA6ICd0cmFuc2xhdGUoJyArIGR4ICsgJ3B4LCcgKyBkeSArICdweCknO1xuXG5cdFx0XHRcdC8vIG9ubHkgc2V0IHRoZSBzdGF0dXMgdG8gZHJhZ2dpbmcsIHdoZW4gd2UgYXJlIGFjdHVhbGx5IGRyYWdnaW5nXG5cdFx0XHRcdGlmICghS3ZTb3J0YWJsZS5hY3RpdmUpIHtcblx0XHRcdFx0XHRpZiAoZmFsbGJhY2tUb2xlcmFuY2UgJiZcblx0XHRcdFx0XHRcdG1pbihhYnModG91Y2guY2xpZW50WCAtIHRoaXMuX2xhc3RYKSwgYWJzKHRvdWNoLmNsaWVudFkgLSB0aGlzLl9sYXN0WSkpIDwgZmFsbGJhY2tUb2xlcmFuY2Vcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLl9kcmFnU3RhcnRlZCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYXMgd2VsbCBhcyBjcmVhdGluZyB0aGUgZ2hvc3QgZWxlbWVudCBvbiB0aGUgZG9jdW1lbnQgYm9keVxuXHRcdFx0XHR0aGlzLl9hcHBlbmRHaG9zdCgpO1xuXG5cdFx0XHRcdG1vdmVkID0gdHJ1ZTtcblx0XHRcdFx0dG91Y2hFdnQgPSB0b3VjaDtcblxuXHRcdFx0XHRfY3NzKGdob3N0RWwsICd3ZWJraXRUcmFuc2Zvcm0nLCB0cmFuc2xhdGUzZCk7XG5cdFx0XHRcdF9jc3MoZ2hvc3RFbCwgJ21velRyYW5zZm9ybScsIHRyYW5zbGF0ZTNkKTtcblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAnbXNUcmFuc2Zvcm0nLCB0cmFuc2xhdGUzZCk7XG5cdFx0XHRcdF9jc3MoZ2hvc3RFbCwgJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZTNkKTtcblxuXHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X2FwcGVuZEdob3N0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoIWdob3N0RWwpIHtcblx0XHRcdFx0dmFyIHJlY3QgPSBkcmFnRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG5cdFx0XHRcdFx0Y3NzID0gX2NzcyhkcmFnRWwpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRcdFx0Z2hvc3RSZWN0O1xuXG5cdFx0XHRcdGdob3N0RWwgPSBkcmFnRWwuY2xvbmVOb2RlKHRydWUpO1xuXG5cdFx0XHRcdF90b2dnbGVDbGFzcyhnaG9zdEVsLCBvcHRpb25zLmdob3N0Q2xhc3MsIGZhbHNlKTtcblx0XHRcdFx0X3RvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZmFsbGJhY2tDbGFzcywgdHJ1ZSk7XG5cdFx0XHRcdF90b2dnbGVDbGFzcyhnaG9zdEVsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7XG5cblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAndG9wJywgcmVjdC50b3AgLSBwYXJzZUludChjc3MubWFyZ2luVG9wLCAxMCkpO1xuXHRcdFx0XHRfY3NzKGdob3N0RWwsICdsZWZ0JywgcmVjdC5sZWZ0IC0gcGFyc2VJbnQoY3NzLm1hcmdpbkxlZnQsIDEwKSk7XG5cdFx0XHRcdF9jc3MoZ2hvc3RFbCwgJ3dpZHRoJywgcmVjdC53aWR0aCk7XG5cdFx0XHRcdF9jc3MoZ2hvc3RFbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTtcblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAnb3BhY2l0eScsICcwLjgnKTtcblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAncG9zaXRpb24nLCAnZml4ZWQnKTtcblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAnekluZGV4JywgJzEwMDAwMCcpO1xuXHRcdFx0XHRfY3NzKGdob3N0RWwsICdwb2ludGVyRXZlbnRzJywgJ25vbmUnKTtcblxuXHRcdFx0XHRvcHRpb25zLmZhbGxiYWNrT25Cb2R5ICYmIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZ2hvc3RFbCkgfHwgcm9vdEVsLmFwcGVuZENoaWxkKGdob3N0RWwpO1xuXG5cdFx0XHRcdC8vIEZpeGluZyBkaW1lbnNpb25zLlxuXHRcdFx0XHRnaG9zdFJlY3QgPSBnaG9zdEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRfY3NzKGdob3N0RWwsICd3aWR0aCcsIHJlY3Qud2lkdGggKiAyIC0gZ2hvc3RSZWN0LndpZHRoKTtcblx0XHRcdFx0X2NzcyhnaG9zdEVsLCAnaGVpZ2h0JywgcmVjdC5oZWlnaHQgKiAyIC0gZ2hvc3RSZWN0LmhlaWdodCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9vbkRyYWdTdGFydDogZnVuY3Rpb24gKC8qKkV2ZW50Ki9ldnQsIC8qKmJvb2xlYW4qL3VzZUZhbGxiYWNrKSB7XG5cdFx0XHR2YXIgZGF0YVRyYW5zZmVyID0gZXZ0LmRhdGFUcmFuc2Zlcixcblx0XHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdFx0dGhpcy5fb2ZmVXBFdmVudHMoKTtcblxuXHRcdFx0aWYgKGFjdGl2ZUdyb3VwLmNoZWNrUHVsbCh0aGlzLCB0aGlzLCBkcmFnRWwsIGV2dCkpIHtcblx0XHRcdFx0Y2xvbmVFbCA9IF9jbG9uZShkcmFnRWwpO1xuXG5cdFx0XHRcdGNsb25lRWwuZHJhZ2dhYmxlID0gZmFsc2U7XG5cdFx0XHRcdGNsb25lRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJztcblxuXHRcdFx0XHRfY3NzKGNsb25lRWwsICdkaXNwbGF5JywgJ25vbmUnKTtcblx0XHRcdFx0X3RvZ2dsZUNsYXNzKGNsb25lRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuXG5cdFx0XHRcdHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcblx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQodGhpcywgcm9vdEVsLCAnY2xvbmUnLCBkcmFnRWwpO1xuXHRcdFx0fVxuXG5cdFx0XHRfdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7XG5cblx0XHRcdGlmICh1c2VGYWxsYmFjaykge1xuXHRcdFx0XHRpZiAodXNlRmFsbGJhY2sgPT09ICd0b3VjaCcpIHtcblx0XHRcdFx0XHQvLyBCaW5kIHRvdWNoIGV2ZW50c1xuXHRcdFx0XHRcdF9vbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcblx0XHRcdFx0XHRfb24oZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX29uRHJvcCk7XG5cdFx0XHRcdFx0X29uKGRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9vbkRyb3ApO1xuXHRcdFx0XHRcdF9vbihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuXHRcdFx0XHRcdF9vbihkb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX29uRHJvcCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gT2xkIGJyd29zZXJcblx0XHRcdFx0XHRfb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG5cdFx0XHRcdFx0X29uKGRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX29uRHJvcCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl9sb29wSWQgPSBzZXRJbnRlcnZhbCh0aGlzLl9lbXVsYXRlRHJhZ092ZXIsIDUwKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRpZiAoZGF0YVRyYW5zZmVyKSB7XG5cdFx0XHRcdFx0ZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnbW92ZSc7XG5cdFx0XHRcdFx0b3B0aW9ucy5zZXREYXRhICYmIG9wdGlvbnMuc2V0RGF0YS5jYWxsKHRoaXMsIGRhdGFUcmFuc2ZlciwgZHJhZ0VsKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdF9vbihkb2N1bWVudCwgJ2Ryb3AnLCB0aGlzKTtcblx0XHRcdFx0c2V0VGltZW91dCh0aGlzLl9kcmFnU3RhcnRlZCwgMCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9vbkRyYWdPdmVyOiBmdW5jdGlvbiAoLyoqRXZlbnQqL2V2dCkge1xuXHRcdFx0dmFyIGVsID0gdGhpcy5lbCxcblx0XHRcdFx0dGFyZ2V0LFxuXHRcdFx0XHRkcmFnUmVjdCxcblx0XHRcdFx0dGFyZ2V0UmVjdCxcblx0XHRcdFx0cmV2ZXJ0LFxuXHRcdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0XHRncm91cCA9IG9wdGlvbnMuZ3JvdXAsXG5cdFx0XHRcdGFjdGl2ZUt2U29ydGFibGUgPSBLdlNvcnRhYmxlLmFjdGl2ZSxcblx0XHRcdFx0aXNPd25lciA9IChhY3RpdmVHcm91cCA9PT0gZ3JvdXApLFxuXHRcdFx0XHRpc01vdmluZ0JldHdlZW5LdlNvcnRhYmxlID0gZmFsc2UsXG5cdFx0XHRcdGNhblNvcnQgPSBvcHRpb25zLnNvcnQ7XG5cblx0XHRcdGlmIChldnQucHJldmVudERlZmF1bHQgIT09IHZvaWQgMCkge1xuXHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0IW9wdGlvbnMuZHJhZ292ZXJCdWJibGUgJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZHJhZ0VsLmFuaW1hdGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0bW92ZWQgPSB0cnVlO1xuXG5cdFx0XHRpZiAoYWN0aXZlS3ZTb3J0YWJsZSAmJiAhb3B0aW9ucy5kaXNhYmxlZCAmJlxuXHRcdFx0XHQoaXNPd25lclxuXHRcdFx0XHRcdFx0PyBjYW5Tb3J0IHx8IChyZXZlcnQgPSAhcm9vdEVsLmNvbnRhaW5zKGRyYWdFbCkpIC8vIFJldmVydGluZyBpdGVtIGludG8gdGhlIG9yaWdpbmFsIGxpc3Rcblx0XHRcdFx0XHRcdDogKFxuXHRcdFx0XHRcdFx0cHV0S3ZTb3J0YWJsZSA9PT0gdGhpcyB8fFxuXHRcdFx0XHRcdFx0KFxuXHRcdFx0XHRcdFx0XHQoYWN0aXZlS3ZTb3J0YWJsZS5sYXN0UHVsbE1vZGUgPSBhY3RpdmVHcm91cC5jaGVja1B1bGwodGhpcywgYWN0aXZlS3ZTb3J0YWJsZSwgZHJhZ0VsLCBldnQpKSAmJlxuXHRcdFx0XHRcdFx0XHRncm91cC5jaGVja1B1dCh0aGlzLCBhY3RpdmVLdlNvcnRhYmxlLCBkcmFnRWwsIGV2dClcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCkgJiZcblx0XHRcdFx0KGV2dC5yb290RWwgPT09IHZvaWQgMCB8fCBldnQucm9vdEVsID09PSB0aGlzLmVsKSAvLyB0b3VjaCBmYWxsYmFja1xuXHRcdFx0KSB7XG5cdFx0XHRcdC8vIFNtYXJ0IGF1dG8tc2Nyb2xsaW5nXG5cdFx0XHRcdF9hdXRvU2Nyb2xsKGV2dCwgb3B0aW9ucywgdGhpcy5lbCk7XG5cblx0XHRcdFx0aWYgKF9zaWxlbnQpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0YXJnZXQgPSBfY2xvc2VzdChldnQudGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSwgZWwpO1xuXHRcdFx0XHRkcmFnUmVjdCA9IGRyYWdFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0XHRpZiAocHV0S3ZTb3J0YWJsZSAhPT0gdGhpcykge1xuXHRcdFx0XHRcdHB1dEt2U29ydGFibGUgPSB0aGlzO1xuXHRcdFx0XHRcdGlzTW92aW5nQmV0d2Vlbkt2U29ydGFibGUgPSB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHJldmVydCkge1xuXHRcdFx0XHRcdF9jbG9uZUhpZGUoYWN0aXZlS3ZTb3J0YWJsZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0cGFyZW50RWwgPSByb290RWw7IC8vIGFjdHVhbGl6YXRpb25cblxuXHRcdFx0XHRcdGlmIChjbG9uZUVsIHx8IG5leHRFbCkge1xuXHRcdFx0XHRcdFx0cm9vdEVsLmluc2VydEJlZm9yZShkcmFnRWwsIGNsb25lRWwgfHwgbmV4dEVsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZiAoIWNhblNvcnQpIHtcblx0XHRcdFx0XHRcdHJvb3RFbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0aWYgKChlbC5jaGlsZHJlbi5sZW5ndGggPT09IDApIHx8IChlbC5jaGlsZHJlblswXSA9PT0gZ2hvc3RFbCkgfHxcblx0XHRcdFx0XHQoZWwgPT09IGV2dC50YXJnZXQpICYmICh0YXJnZXQgPSBfZ2hvc3RJc0xhc3QoZWwsIGV2dCkpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGlmICh0YXJnZXQpIHtcblx0XHRcdFx0XHRcdGlmICh0YXJnZXQuYW5pbWF0ZWQpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR0YXJnZXRSZWN0ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdF9jbG9uZUhpZGUoYWN0aXZlS3ZTb3J0YWJsZSwgaXNPd25lcik7XG5cblx0XHRcdFx0XHRpZiAoX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIHRhcmdldFJlY3QsIGV2dCkgIT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRpZiAoIWRyYWdFbC5jb250YWlucyhlbCkpIHtcblx0XHRcdFx0XHRcdFx0ZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcblx0XHRcdFx0XHRcdFx0cGFyZW50RWwgPSBlbDsgLy8gYWN0dWFsaXphdGlvblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR0aGlzLl9hbmltYXRlKGRyYWdSZWN0LCBkcmFnRWwpO1xuXHRcdFx0XHRcdFx0dGFyZ2V0ICYmIHRoaXMuX2FuaW1hdGUodGFyZ2V0UmVjdCwgdGFyZ2V0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAodGFyZ2V0ICYmICF0YXJnZXQuYW5pbWF0ZWQgJiYgdGFyZ2V0ICE9PSBkcmFnRWwgJiYgKHRhcmdldC5wYXJlbnROb2RlW2V4cGFuZG9dICE9PSB2b2lkIDApKSB7XG5cdFx0XHRcdFx0aWYgKGxhc3RFbCAhPT0gdGFyZ2V0KSB7XG5cdFx0XHRcdFx0XHRsYXN0RWwgPSB0YXJnZXQ7XG5cdFx0XHRcdFx0XHRsYXN0Q1NTID0gX2Nzcyh0YXJnZXQpO1xuXHRcdFx0XHRcdFx0bGFzdFBhcmVudENTUyA9IF9jc3ModGFyZ2V0LnBhcmVudE5vZGUpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRhcmdldFJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRcdFx0XHR2YXIgd2lkdGggPSB0YXJnZXRSZWN0LnJpZ2h0IC0gdGFyZ2V0UmVjdC5sZWZ0LFxuXHRcdFx0XHRcdFx0aGVpZ2h0ID0gdGFyZ2V0UmVjdC5ib3R0b20gLSB0YXJnZXRSZWN0LnRvcCxcblx0XHRcdFx0XHRcdGZsb2F0aW5nID0gUl9GTE9BVC50ZXN0KGxhc3RDU1MuY3NzRmxvYXQgKyBsYXN0Q1NTLmRpc3BsYXkpXG5cdFx0XHRcdFx0XHRcdHx8IChsYXN0UGFyZW50Q1NTLmRpc3BsYXkgPT0gJ2ZsZXgnICYmIGxhc3RQYXJlbnRDU1NbJ2ZsZXgtZGlyZWN0aW9uJ10uaW5kZXhPZigncm93JykgPT09IDApLFxuXHRcdFx0XHRcdFx0aXNXaWRlID0gKHRhcmdldC5vZmZzZXRXaWR0aCA+IGRyYWdFbC5vZmZzZXRXaWR0aCksXG5cdFx0XHRcdFx0XHRpc0xvbmcgPSAodGFyZ2V0Lm9mZnNldEhlaWdodCA+IGRyYWdFbC5vZmZzZXRIZWlnaHQpLFxuXHRcdFx0XHRcdFx0aGFsZndheSA9IChmbG9hdGluZyA/IChldnQuY2xpZW50WCAtIHRhcmdldFJlY3QubGVmdCkgLyB3aWR0aCA6IChldnQuY2xpZW50WSAtIHRhcmdldFJlY3QudG9wKSAvIGhlaWdodCkgPiAwLjUsXG5cdFx0XHRcdFx0XHRuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcsXG5cdFx0XHRcdFx0XHRtb3ZlVmVjdG9yID0gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIHRhcmdldFJlY3QsIGV2dCksXG5cdFx0XHRcdFx0XHRhZnRlciA9IGZhbHNlXG5cdFx0XHRcdFx0XHQ7XG5cblx0XHRcdFx0XHRpZiAobW92ZVZlY3RvciAhPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdF9zaWxlbnQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0c2V0VGltZW91dChfdW5zaWxlbnQsIDMwKTtcblxuXHRcdFx0XHRcdFx0X2Nsb25lSGlkZShhY3RpdmVLdlNvcnRhYmxlLCBpc093bmVyKTtcblxuXHRcdFx0XHRcdFx0aWYgKG1vdmVWZWN0b3IgPT09IDEgfHwgbW92ZVZlY3RvciA9PT0gLTEpIHtcblx0XHRcdFx0XHRcdFx0YWZ0ZXIgPSAobW92ZVZlY3RvciA9PT0gMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIGlmIChmbG9hdGluZykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZWxUb3AgPSBkcmFnRWwub2Zmc2V0VG9wLFxuXHRcdFx0XHRcdFx0XHRcdHRnVG9wID0gdGFyZ2V0Lm9mZnNldFRvcDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoZWxUb3AgPT09IHRnVG9wKSB7XG5cdFx0XHRcdFx0XHRcdFx0YWZ0ZXIgPSAodGFyZ2V0LnByZXZpb3VzRWxlbWVudFNpYmxpbmcgPT09IGRyYWdFbCkgJiYgIWlzV2lkZSB8fCBoYWxmd2F5ICYmIGlzV2lkZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmICh0YXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZyA9PT0gZHJhZ0VsIHx8IGRyYWdFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nID09PSB0YXJnZXQpIHtcblx0XHRcdFx0XHRcdFx0XHRhZnRlciA9IChldnQuY2xpZW50WSAtIHRhcmdldFJlY3QudG9wKSAvIGhlaWdodCA+IDAuNTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRhZnRlciA9IHRnVG9wID4gZWxUb3A7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIWlzTW92aW5nQmV0d2Vlbkt2U29ydGFibGUpIHtcblx0XHRcdFx0XHRcdFx0YWZ0ZXIgPSAobmV4dFNpYmxpbmcgIT09IGRyYWdFbCkgJiYgIWlzTG9uZyB8fCBoYWxmd2F5ICYmIGlzTG9uZztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCFkcmFnRWwuY29udGFpbnMoZWwpKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChhZnRlciAmJiAhbmV4dFNpYmxpbmcpIHtcblx0XHRcdFx0XHRcdFx0XHRlbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRhcmdldC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkcmFnRWwsIGFmdGVyID8gbmV4dFNpYmxpbmcgOiB0YXJnZXQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHBhcmVudEVsID0gZHJhZ0VsLnBhcmVudE5vZGU7IC8vIGFjdHVhbGl6YXRpb25cblxuXHRcdFx0XHRcdFx0dGhpcy5fYW5pbWF0ZShkcmFnUmVjdCwgZHJhZ0VsKTtcblx0XHRcdFx0XHRcdHRoaXMuX2FuaW1hdGUodGFyZ2V0UmVjdCwgdGFyZ2V0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X2FuaW1hdGU6IGZ1bmN0aW9uIChwcmV2UmVjdCwgdGFyZ2V0KSB7XG5cdFx0XHR2YXIgbXMgPSB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uO1xuXG5cdFx0XHRpZiAobXMpIHtcblx0XHRcdFx0dmFyIGN1cnJlbnRSZWN0ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0XHRcdGlmIChwcmV2UmVjdC5ub2RlVHlwZSA9PT0gMSkge1xuXHRcdFx0XHRcdHByZXZSZWN0ID0gcHJldlJlY3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfY3NzKHRhcmdldCwgJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xuXHRcdFx0XHRfY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgnXG5cdFx0XHRcdFx0KyAocHJldlJlY3QubGVmdCAtIGN1cnJlbnRSZWN0LmxlZnQpICsgJ3B4LCdcblx0XHRcdFx0XHQrIChwcmV2UmVjdC50b3AgLSBjdXJyZW50UmVjdC50b3ApICsgJ3B4LDApJ1xuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdHRhcmdldC5vZmZzZXRXaWR0aDsgLy8gcmVwYWludFxuXG5cdFx0XHRcdF9jc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICdhbGwgJyArIG1zICsgJ21zJyk7XG5cdFx0XHRcdF9jc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuXG5cdFx0XHRcdGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0ZWQpO1xuXHRcdFx0XHR0YXJnZXQuYW5pbWF0ZWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRfY3NzKHRhcmdldCwgJ3RyYW5zaXRpb24nLCAnJyk7XG5cdFx0XHRcdFx0X2Nzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAnJyk7XG5cdFx0XHRcdFx0dGFyZ2V0LmFuaW1hdGVkID0gZmFsc2U7XG5cdFx0XHRcdH0sIG1zKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X29mZlVwRXZlbnRzOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgb3duZXJEb2N1bWVudCA9IHRoaXMuZWwub3duZXJEb2N1bWVudDtcblxuXHRcdFx0X29mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcblx0XHRcdF9vZmYoZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcblx0XHRcdF9vZmYob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9vbkRyb3ApO1xuXHRcdFx0X29mZihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9vbkRyb3ApO1xuXHRcdFx0X29mZihvd25lckRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fb25Ecm9wKTtcblx0XHRcdF9vZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgdGhpcy5fb25Ecm9wKTtcblx0XHRcdF9vZmYob3duZXJEb2N1bWVudCwgJ3NlbGVjdHN0YXJ0JywgdGhpcyk7XG5cdFx0fSxcblxuXHRcdF9vbkRyb3A6IGZ1bmN0aW9uICgvKipFdmVudCovZXZ0KSB7XG5cdFx0XHR2YXIgZWwgPSB0aGlzLmVsLFxuXHRcdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0XHRjbGVhckludGVydmFsKHRoaXMuX2xvb3BJZCk7XG5cdFx0XHRjbGVhckludGVydmFsKGF1dG9TY3JvbGwucGlkKTtcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl9kcmFnU3RhcnRUaW1lcik7XG5cblx0XHRcdC8vIFVuYmluZCBldmVudHNcblx0XHRcdF9vZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG5cblx0XHRcdGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuXHRcdFx0XHRfb2ZmKGRvY3VtZW50LCAnZHJvcCcsIHRoaXMpO1xuXHRcdFx0XHRfb2ZmKGVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9vZmZVcEV2ZW50cygpO1xuXG5cdFx0XHRpZiAoZXZ0KSB7XG5cdFx0XHRcdGlmIChtb3ZlZCkge1xuXHRcdFx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdCFvcHRpb25zLmRyb3BCdWJibGUgJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z2hvc3RFbCAmJiBnaG9zdEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZ2hvc3RFbCk7XG5cblx0XHRcdFx0aWYgKHJvb3RFbCA9PT0gcGFyZW50RWwgfHwgS3ZTb3J0YWJsZS5hY3RpdmUubGFzdFB1bGxNb2RlICE9PSAnY2xvbmUnKSB7XG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGNsb25lXG5cdFx0XHRcdFx0Y2xvbmVFbCAmJiBjbG9uZUVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmVFbCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZHJhZ0VsKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG5cdFx0XHRcdFx0XHRfb2ZmKGRyYWdFbCwgJ2RyYWdlbmQnLCB0aGlzKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfZGlzYWJsZURyYWdnYWJsZShkcmFnRWwpO1xuXHRcdFx0XHRcdGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnO1xuXG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGNsYXNzJ3Ncblx0XHRcdFx0XHRfdG9nZ2xlQ2xhc3MoZHJhZ0VsLCB0aGlzLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuXHRcdFx0XHRcdF90b2dnbGVDbGFzcyhkcmFnRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuXG5cdFx0XHRcdFx0aWYgKHJvb3RFbCAhPT0gcGFyZW50RWwpIHtcblx0XHRcdFx0XHRcdG5ld0luZGV4ID0gX2luZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG5cdFx0XHRcdFx0XHRpZiAobmV3SW5kZXggPj0gMCkge1xuXHRcdFx0XHRcdFx0XHQvLyBBZGQgZXZlbnRcblx0XHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQobnVsbCwgcGFyZW50RWwsICdhZGQnLCBkcmFnRWwsIHJvb3RFbCwgb2xkSW5kZXgsIG5ld0luZGV4KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZW1vdmUgZXZlbnRcblx0XHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQodGhpcywgcm9vdEVsLCAncmVtb3ZlJywgZHJhZ0VsLCByb290RWwsIG9sZEluZGV4LCBuZXdJbmRleCk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gZHJhZyBmcm9tIG9uZSBsaXN0IGFuZCBkcm9wIGludG8gYW5vdGhlclxuXHRcdFx0XHRcdFx0XHRfZGlzcGF0Y2hFdmVudChudWxsLCBwYXJlbnRFbCwgJ3NvcnQnLCBkcmFnRWwsIHJvb3RFbCwgb2xkSW5kZXgsIG5ld0luZGV4KTtcblx0XHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQodGhpcywgcm9vdEVsLCAnc29ydCcsIGRyYWdFbCwgcm9vdEVsLCBvbGRJbmRleCwgbmV3SW5kZXgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChkcmFnRWwubmV4dFNpYmxpbmcgIT09IG5leHRFbCkge1xuXHRcdFx0XHRcdFx0XHQvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnRcblx0XHRcdFx0XHRcdFx0bmV3SW5kZXggPSBfaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG5cblx0XHRcdFx0XHRcdFx0aWYgKG5ld0luZGV4ID49IDApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBkcmFnICYgZHJvcCB3aXRoaW4gdGhlIHNhbWUgbGlzdFxuXHRcdFx0XHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KHRoaXMsIHJvb3RFbCwgJ3VwZGF0ZScsIGRyYWdFbCwgcm9vdEVsLCBvbGRJbmRleCwgbmV3SW5kZXgpO1xuXHRcdFx0XHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KHRoaXMsIHJvb3RFbCwgJ3NvcnQnLCBkcmFnRWwsIHJvb3RFbCwgb2xkSW5kZXgsIG5ld0luZGV4KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChLdlNvcnRhYmxlLmFjdGl2ZSkge1xuXHRcdFx0XHRcdFx0LyoganNoaW50IGVxbnVsbDp0cnVlICovXG5cdFx0XHRcdFx0XHRpZiAobmV3SW5kZXggPT0gbnVsbCB8fCBuZXdJbmRleCA9PT0gLTEpIHtcblx0XHRcdFx0XHRcdFx0bmV3SW5kZXggPSBvbGRJbmRleDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQodGhpcywgcm9vdEVsLCAnZW5kJywgZHJhZ0VsLCByb290RWwsIG9sZEluZGV4LCBuZXdJbmRleCk7XG5cblx0XHRcdFx0XHRcdC8vIFNhdmUgc29ydGluZ1xuXHRcdFx0XHRcdFx0dGhpcy5zYXZlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fbnVsbGluZygpO1xuXHRcdH0sXG5cblx0XHRfbnVsbGluZzogZnVuY3Rpb24oKSB7XG5cdFx0XHRyb290RWwgPVxuXHRcdFx0XHRkcmFnRWwgPVxuXHRcdFx0XHRcdHBhcmVudEVsID1cblx0XHRcdFx0XHRcdGdob3N0RWwgPVxuXHRcdFx0XHRcdFx0XHRuZXh0RWwgPVxuXHRcdFx0XHRcdFx0XHRcdGNsb25lRWwgPVxuXHRcdFx0XHRcdFx0XHRcdFx0bGFzdERvd25FbCA9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0c2Nyb2xsRWwgPVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbFBhcmVudEVsID1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGFwRXZ0ID1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dG91Y2hFdnQgPVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW92ZWQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bmV3SW5kZXggPVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGxhc3RFbCA9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGFzdENTUyA9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHB1dEt2U29ydGFibGUgPVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhY3RpdmVHcm91cCA9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0S3ZTb3J0YWJsZS5hY3RpdmUgPSBudWxsO1xuXG5cdFx0XHRzYXZlZElucHV0Q2hlY2tlZC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0XHRlbC5jaGVja2VkID0gdHJ1ZTtcblx0XHRcdH0pO1xuXHRcdFx0c2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gMDtcblx0XHR9LFxuXG5cdFx0aGFuZGxlRXZlbnQ6IGZ1bmN0aW9uICgvKipFdmVudCovZXZ0KSB7XG5cdFx0XHRzd2l0Y2ggKGV2dC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ2Ryb3AnOlxuXHRcdFx0XHRjYXNlICdkcmFnZW5kJzpcblx0XHRcdFx0XHR0aGlzLl9vbkRyb3AoZXZ0KTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdkcmFnb3Zlcic6XG5cdFx0XHRcdGNhc2UgJ2RyYWdlbnRlcic6XG5cdFx0XHRcdFx0aWYgKGRyYWdFbCkge1xuXHRcdFx0XHRcdFx0dGhpcy5fb25EcmFnT3ZlcihldnQpO1xuXHRcdFx0XHRcdFx0X2dsb2JhbERyYWdPdmVyKGV2dCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ3NlbGVjdHN0YXJ0Jzpcblx0XHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9LFxuXG5cblx0XHQvKipcblx0XHQgKiBTZXJpYWxpemVzIHRoZSBpdGVtIGludG8gYW4gYXJyYXkgb2Ygc3RyaW5nLlxuXHRcdCAqIEByZXR1cm5zIHtTdHJpbmdbXX1cblx0XHQgKi9cblx0XHR0b0FycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgb3JkZXIgPSBbXSxcblx0XHRcdFx0ZWwsXG5cdFx0XHRcdGNoaWxkcmVuID0gdGhpcy5lbC5jaGlsZHJlbixcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdG4gPSBjaGlsZHJlbi5sZW5ndGgsXG5cdFx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cblx0XHRcdGZvciAoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdGVsID0gY2hpbGRyZW5baV07XG5cdFx0XHRcdGlmIChfY2xvc2VzdChlbCwgb3B0aW9ucy5kcmFnZ2FibGUsIHRoaXMuZWwpKSB7XG5cdFx0XHRcdFx0b3JkZXIucHVzaChlbC5nZXRBdHRyaWJ1dGUob3B0aW9ucy5kYXRhSWRBdHRyKSB8fCBfZ2VuZXJhdGVJZChlbCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvcmRlcjtcblx0XHR9LFxuXG5cblx0XHQvKipcblx0XHQgKiBTb3J0cyB0aGUgZWxlbWVudHMgYWNjb3JkaW5nIHRvIHRoZSBhcnJheS5cblx0XHQgKiBAcGFyYW0gIHtTdHJpbmdbXX0gIG9yZGVyICBvcmRlciBvZiB0aGUgaXRlbXNcblx0XHQgKi9cblx0XHRzb3J0OiBmdW5jdGlvbiAob3JkZXIpIHtcblx0XHRcdHZhciBpdGVtcyA9IHt9LCByb290RWwgPSB0aGlzLmVsO1xuXG5cdFx0XHR0aGlzLnRvQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCwgaSkge1xuXHRcdFx0XHR2YXIgZWwgPSByb290RWwuY2hpbGRyZW5baV07XG5cblx0XHRcdFx0aWYgKF9jbG9zZXN0KGVsLCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCByb290RWwpKSB7XG5cdFx0XHRcdFx0aXRlbXNbaWRdID0gZWw7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpO1xuXG5cdFx0XHRvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0XHRpZiAoaXRlbXNbaWRdKSB7XG5cdFx0XHRcdFx0cm9vdEVsLnJlbW92ZUNoaWxkKGl0ZW1zW2lkXSk7XG5cdFx0XHRcdFx0cm9vdEVsLmFwcGVuZENoaWxkKGl0ZW1zW2lkXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cblxuXHRcdC8qKlxuXHRcdCAqIFNhdmUgdGhlIGN1cnJlbnQgc29ydGluZ1xuXHRcdCAqL1xuXHRcdHNhdmU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBzdG9yZSA9IHRoaXMub3B0aW9ucy5zdG9yZTtcblx0XHRcdHN0b3JlICYmIHN0b3JlLnNldCh0aGlzKTtcblx0XHR9LFxuXG5cblx0XHQvKipcblx0XHQgKiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQsIGdldCB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIGJ5IHRlc3RpbmcgdGhlIGVsZW1lbnQgaXRzZWxmIGFuZCB0cmF2ZXJzaW5nIHVwIHRocm91Z2ggaXRzIGFuY2VzdG9ycyBpbiB0aGUgRE9NIHRyZWUuXG5cdFx0ICogQHBhcmFtICAge0hUTUxFbGVtZW50fSAgZWxcblx0XHQgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICBbc2VsZWN0b3JdICBkZWZhdWx0OiBgb3B0aW9ucy5kcmFnZ2FibGVgXG5cdFx0ICogQHJldHVybnMge0hUTUxFbGVtZW50fG51bGx9XG5cdFx0ICovXG5cdFx0Y2xvc2VzdDogZnVuY3Rpb24gKGVsLCBzZWxlY3Rvcikge1xuXHRcdFx0cmV0dXJuIF9jbG9zZXN0KGVsLCBzZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLmVsKTtcblx0XHR9LFxuXG5cblx0XHQvKipcblx0XHQgKiBTZXQvZ2V0IG9wdGlvblxuXHRcdCAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcblx0XHQgKiBAcGFyYW0gICB7Kn0gICAgICBbdmFsdWVdXG5cdFx0ICogQHJldHVybnMgeyp9XG5cdFx0ICovXG5cdFx0b3B0aW9uOiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcblx0XHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0XHRpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuXHRcdFx0XHRyZXR1cm4gb3B0aW9uc1tuYW1lXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdGlvbnNbbmFtZV0gPSB2YWx1ZTtcblxuXHRcdFx0XHRpZiAobmFtZSA9PT0gJ2dyb3VwJykge1xuXHRcdFx0XHRcdF9wcmVwYXJlR3JvdXAob3B0aW9ucyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cblx0XHQvKipcblx0XHQgKiBEZXN0cm95XG5cdFx0ICovXG5cdFx0ZGVzdHJveTogZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGVsID0gdGhpcy5lbDtcblxuXHRcdFx0ZWxbZXhwYW5kb10gPSBudWxsO1xuXG5cdFx0XHRfb2ZmKGVsLCAnbW91c2Vkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG5cdFx0XHRfb2ZmKGVsLCAndG91Y2hzdGFydCcsIHRoaXMuX29uVGFwU3RhcnQpO1xuXHRcdFx0X29mZihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG5cblx0XHRcdGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuXHRcdFx0XHRfb2ZmKGVsLCAnZHJhZ292ZXInLCB0aGlzKTtcblx0XHRcdFx0X29mZihlbCwgJ2RyYWdlbnRlcicsIHRoaXMpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZHJhZ2dhYmxlIGF0dHJpYnV0ZXNcblx0XHRcdEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnW2RyYWdnYWJsZV0nKSwgZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRcdGVsLnJlbW92ZUF0dHJpYnV0ZSgnZHJhZ2dhYmxlJyk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dG91Y2hEcmFnT3Zlckxpc3RlbmVycy5zcGxpY2UodG91Y2hEcmFnT3Zlckxpc3RlbmVycy5pbmRleE9mKHRoaXMuX29uRHJhZ092ZXIpLCAxKTtcblxuXHRcdFx0dGhpcy5fb25Ecm9wKCk7XG5cblx0XHRcdHRoaXMuZWwgPSBlbCA9IG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cblx0ZnVuY3Rpb24gX2Nsb25lSGlkZShrdnNvcnRhYmxlLCBzdGF0ZSkge1xuXHRcdGlmIChrdnNvcnRhYmxlLmxhc3RQdWxsTW9kZSAhPT0gJ2Nsb25lJykge1xuXHRcdFx0c3RhdGUgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmIChjbG9uZUVsICYmIChjbG9uZUVsLnN0YXRlICE9PSBzdGF0ZSkpIHtcblx0XHRcdF9jc3MoY2xvbmVFbCwgJ2Rpc3BsYXknLCBzdGF0ZSA/ICdub25lJyA6ICcnKTtcblxuXHRcdFx0aWYgKCFzdGF0ZSkge1xuXHRcdFx0XHRpZiAoY2xvbmVFbC5zdGF0ZSkge1xuXHRcdFx0XHRcdGlmIChrdnNvcnRhYmxlLm9wdGlvbnMuZ3JvdXAucmV2ZXJ0Q2xvbmUpIHtcblx0XHRcdFx0XHRcdHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgbmV4dEVsKTtcblx0XHRcdFx0XHRcdGt2c29ydGFibGUuX2FuaW1hdGUoZHJhZ0VsLCBjbG9uZUVsKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cm9vdEVsLmluc2VydEJlZm9yZShjbG9uZUVsLCBkcmFnRWwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjbG9uZUVsLnN0YXRlID0gc3RhdGU7XG5cdFx0fVxuXHR9XG5cblxuXHRmdW5jdGlvbiBfY2xvc2VzdCgvKipIVE1MRWxlbWVudCovZWwsIC8qKlN0cmluZyovc2VsZWN0b3IsIC8qKkhUTUxFbGVtZW50Ki9jdHgpIHtcblx0XHRpZiAoZWwpIHtcblx0XHRcdGN0eCA9IGN0eCB8fCBkb2N1bWVudDtcblxuXHRcdFx0ZG8ge1xuXHRcdFx0XHRpZiAoKHNlbGVjdG9yID09PSAnPionICYmIGVsLnBhcmVudE5vZGUgPT09IGN0eCkgfHwgX21hdGNoZXMoZWwsIHNlbGVjdG9yKSkge1xuXHRcdFx0XHRcdHJldHVybiBlbDtcblx0XHRcdFx0fVxuXHRcdFx0XHQvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cdFx0XHR9IHdoaWxlIChlbCA9IF9nZXRQYXJlbnRPckhvc3QoZWwpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cblx0ZnVuY3Rpb24gX2dldFBhcmVudE9ySG9zdChlbCkge1xuXHRcdHZhciBwYXJlbnQgPSBlbC5ob3N0O1xuXG5cdFx0cmV0dXJuIChwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlKSA/IHBhcmVudCA6IGVsLnBhcmVudE5vZGU7XG5cdH1cblxuXG5cdGZ1bmN0aW9uIF9nbG9iYWxEcmFnT3ZlcigvKipFdmVudCovZXZ0KSB7XG5cdFx0aWYgKGV2dC5kYXRhVHJhbnNmZXIpIHtcblx0XHRcdGV2dC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdtb3ZlJztcblx0XHR9XG5cdFx0ZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cdH1cblxuXG5cdGZ1bmN0aW9uIF9vbihlbCwgZXZlbnQsIGZuKSB7XG5cdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sIGNhcHR1cmVNb2RlKTtcblx0fVxuXG5cblx0ZnVuY3Rpb24gX29mZihlbCwgZXZlbnQsIGZuKSB7XG5cdFx0ZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sIGNhcHR1cmVNb2RlKTtcblx0fVxuXG5cblx0ZnVuY3Rpb24gX3RvZ2dsZUNsYXNzKGVsLCBuYW1lLCBzdGF0ZSkge1xuXHRcdGlmIChlbCkge1xuXHRcdFx0aWYgKGVsLmNsYXNzTGlzdCkge1xuXHRcdFx0XHRlbC5jbGFzc0xpc3Rbc3RhdGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR2YXIgY2xhc3NOYW1lID0gKCcgJyArIGVsLmNsYXNzTmFtZSArICcgJykucmVwbGFjZShSX1NQQUNFLCAnICcpLnJlcGxhY2UoJyAnICsgbmFtZSArICcgJywgJyAnKTtcblx0XHRcdFx0ZWwuY2xhc3NOYW1lID0gKGNsYXNzTmFtZSArIChzdGF0ZSA/ICcgJyArIG5hbWUgOiAnJykpLnJlcGxhY2UoUl9TUEFDRSwgJyAnKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXG5cdGZ1bmN0aW9uIF9jc3MoZWwsIHByb3AsIHZhbCkge1xuXHRcdHZhciBzdHlsZSA9IGVsICYmIGVsLnN0eWxlO1xuXG5cdFx0aWYgKHN0eWxlKSB7XG5cdFx0XHRpZiAodmFsID09PSB2b2lkIDApIHtcblx0XHRcdFx0aWYgKGRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHtcblx0XHRcdFx0XHR2YWwgPSBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCAnJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAoZWwuY3VycmVudFN0eWxlKSB7XG5cdFx0XHRcdFx0dmFsID0gZWwuY3VycmVudFN0eWxlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHByb3AgPT09IHZvaWQgMCA/IHZhbCA6IHZhbFtwcm9wXTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRpZiAoIShwcm9wIGluIHN0eWxlKSkge1xuXHRcdFx0XHRcdHByb3AgPSAnLXdlYmtpdC0nICsgcHJvcDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0eWxlW3Byb3BdID0gdmFsICsgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gJycgOiAncHgnKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXG5cdGZ1bmN0aW9uIF9maW5kKGN0eCwgdGFnTmFtZSwgaXRlcmF0b3IpIHtcblx0XHRpZiAoY3R4KSB7XG5cdFx0XHR2YXIgbGlzdCA9IGN0eC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKSwgaSA9IDAsIG4gPSBsaXN0Lmxlbmd0aDtcblxuXHRcdFx0aWYgKGl0ZXJhdG9yKSB7XG5cdFx0XHRcdGZvciAoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdFx0aXRlcmF0b3IobGlzdFtpXSwgaSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGxpc3Q7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblxuXG5cdGZ1bmN0aW9uIF9kaXNwYXRjaEV2ZW50KGt2c29ydGFibGUsIHJvb3RFbCwgbmFtZSwgdGFyZ2V0RWwsIGZyb21FbCwgc3RhcnRJbmRleCwgbmV3SW5kZXgpIHtcblx0XHRrdnNvcnRhYmxlID0gKGt2c29ydGFibGUgfHwgcm9vdEVsW2V4cGFuZG9dKTtcblxuXHRcdHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKSxcblx0XHRcdG9wdGlvbnMgPSBrdnNvcnRhYmxlLm9wdGlvbnMsXG5cdFx0XHRvbk5hbWUgPSAnb24nICsgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpO1xuXG5cdFx0ZXZ0LmluaXRFdmVudChuYW1lLCB0cnVlLCB0cnVlKTtcblxuXHRcdGV2dC50byA9IHJvb3RFbDtcblx0XHRldnQuZnJvbSA9IGZyb21FbCB8fCByb290RWw7XG5cdFx0ZXZ0Lml0ZW0gPSB0YXJnZXRFbCB8fCByb290RWw7XG5cdFx0ZXZ0LmNsb25lID0gY2xvbmVFbDtcblxuXHRcdGV2dC5vbGRJbmRleCA9IHN0YXJ0SW5kZXg7XG5cdFx0ZXZ0Lm5ld0luZGV4ID0gbmV3SW5kZXg7XG5cblx0XHRyb290RWwuZGlzcGF0Y2hFdmVudChldnQpO1xuXG5cdFx0aWYgKG9wdGlvbnNbb25OYW1lXSkge1xuXHRcdFx0b3B0aW9uc1tvbk5hbWVdLmNhbGwoa3Zzb3J0YWJsZSwgZXZ0KTtcblx0XHR9XG5cdH1cblxuXG5cdGZ1bmN0aW9uIF9vbk1vdmUoZnJvbUVsLCB0b0VsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXRFbCwgdGFyZ2V0UmVjdCwgb3JpZ2luYWxFdnQpIHtcblx0XHR2YXIgZXZ0LFxuXHRcdFx0a3Zzb3J0YWJsZSA9IGZyb21FbFtleHBhbmRvXSxcblx0XHRcdG9uTW92ZUZuID0ga3Zzb3J0YWJsZS5vcHRpb25zLm9uTW92ZSxcblx0XHRcdHJldFZhbDtcblxuXHRcdGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuXHRcdGV2dC5pbml0RXZlbnQoJ21vdmUnLCB0cnVlLCB0cnVlKTtcblxuXHRcdGV2dC50byA9IHRvRWw7XG5cdFx0ZXZ0LmZyb20gPSBmcm9tRWw7XG5cdFx0ZXZ0LmRyYWdnZWQgPSBkcmFnRWw7XG5cdFx0ZXZ0LmRyYWdnZWRSZWN0ID0gZHJhZ1JlY3Q7XG5cdFx0ZXZ0LnJlbGF0ZWQgPSB0YXJnZXRFbCB8fCB0b0VsO1xuXHRcdGV2dC5yZWxhdGVkUmVjdCA9IHRhcmdldFJlY3QgfHwgdG9FbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdGZyb21FbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cblx0XHRpZiAob25Nb3ZlRm4pIHtcblx0XHRcdHJldFZhbCA9IG9uTW92ZUZuLmNhbGwoa3Zzb3J0YWJsZSwgZXZ0LCBvcmlnaW5hbEV2dCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldFZhbDtcblx0fVxuXG5cblx0ZnVuY3Rpb24gX2Rpc2FibGVEcmFnZ2FibGUoZWwpIHtcblx0XHRlbC5kcmFnZ2FibGUgPSBmYWxzZTtcblx0fVxuXG5cblx0ZnVuY3Rpb24gX3Vuc2lsZW50KCkge1xuXHRcdF9zaWxlbnQgPSBmYWxzZTtcblx0fVxuXG5cblx0LyoqIEByZXR1cm5zIHtIVE1MRWxlbWVudHxmYWxzZX0gKi9cblx0ZnVuY3Rpb24gX2dob3N0SXNMYXN0KGVsLCBldnQpIHtcblx0XHR2YXIgbGFzdEVsID0gZWwubGFzdEVsZW1lbnRDaGlsZCxcblx0XHRcdHJlY3QgPSBsYXN0RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHQvLyA1IOKAlCBtaW4gZGVsdGFcblx0XHQvLyBhYnMg4oCUINC90LXQu9GM0LfRjyDQtNC+0LHQsNCy0LvRj9GC0YwsINCwINGC0L4g0LPQu9GO0LrQuCDQv9GA0Lgg0L3QsNCy0LXQtNC10L3QuNC4INGB0LLQtdGA0YXRg1xuXHRcdHJldHVybiAoXG5cdFx0XHRcdChldnQuY2xpZW50WSAtIChyZWN0LnRvcCArIHJlY3QuaGVpZ2h0KSA+IDUpIHx8XG5cdFx0XHRcdChldnQuY2xpZW50WCAtIChyZWN0LnJpZ2h0ICsgcmVjdC53aWR0aCkgPiA1KVxuXHRcdFx0KSAmJiBsYXN0RWw7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZSBpZFxuXHQgKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9IGVsXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBfZ2VuZXJhdGVJZChlbCkge1xuXHRcdHZhciBzdHIgPSBlbC50YWdOYW1lICsgZWwuY2xhc3NOYW1lICsgZWwuc3JjICsgZWwuaHJlZiArIGVsLnRleHRDb250ZW50LFxuXHRcdFx0aSA9IHN0ci5sZW5ndGgsXG5cdFx0XHRzdW0gPSAwO1xuXG5cdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0c3VtICs9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBzdW0udG9TdHJpbmcoMzYpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGluZGV4IG9mIGFuIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnQgZm9yIGEgc2VsZWN0ZWQgc2V0IG9mXG5cdCAqIGVsZW1lbnRzXG5cdCAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbFxuXHQgKiBAcGFyYW0gIHtzZWxlY3Rvcn0gc2VsZWN0b3Jcblx0ICogQHJldHVybiB7bnVtYmVyfVxuXHQgKi9cblx0ZnVuY3Rpb24gX2luZGV4KGVsLCBzZWxlY3Rvcikge1xuXHRcdHZhciBpbmRleCA9IDA7XG5cblx0XHRpZiAoIWVsIHx8ICFlbC5wYXJlbnROb2RlKSB7XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fVxuXG5cdFx0d2hpbGUgKGVsICYmIChlbCA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpKSB7XG5cdFx0XHRpZiAoKGVsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgIT09ICdURU1QTEFURScpICYmIChzZWxlY3RvciA9PT0gJz4qJyB8fCBfbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSkge1xuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBpbmRleDtcblx0fVxuXG5cdGZ1bmN0aW9uIF9tYXRjaGVzKC8qKkhUTUxFbGVtZW50Ki9lbCwgLyoqU3RyaW5nKi9zZWxlY3Rvcikge1xuXHRcdGlmIChlbCkge1xuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zcGxpdCgnLicpO1xuXG5cdFx0XHR2YXIgdGFnID0gc2VsZWN0b3Iuc2hpZnQoKS50b1VwcGVyQ2FzZSgpLFxuXHRcdFx0XHRyZSA9IG5ldyBSZWdFeHAoJ1xcXFxzKCcgKyBzZWxlY3Rvci5qb2luKCd8JykgKyAnKSg/PVxcXFxzKScsICdnJyk7XG5cblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdCh0YWcgPT09ICcnIHx8IGVsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT0gdGFnKSAmJlxuXHRcdFx0XHQoIXNlbGVjdG9yLmxlbmd0aCB8fCAoKCcgJyArIGVsLmNsYXNzTmFtZSArICcgJykubWF0Y2gocmUpIHx8IFtdKS5sZW5ndGggPT0gc2VsZWN0b3IubGVuZ3RoKVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBfdGhyb3R0bGUoY2FsbGJhY2ssIG1zKSB7XG5cdFx0dmFyIGFyZ3MsIF90aGlzO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChhcmdzID09PSB2b2lkIDApIHtcblx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cztcblx0XHRcdFx0X3RoaXMgPSB0aGlzO1xuXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2suY2FsbChfdGhpcywgYXJnc1swXSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNhbGxiYWNrLmFwcGx5KF90aGlzLCBhcmdzKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRhcmdzID0gdm9pZCAwO1xuXHRcdFx0XHR9LCBtcyk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIF9leHRlbmQoZHN0LCBzcmMpIHtcblx0XHRpZiAoZHN0ICYmIHNyYykge1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIHNyYykge1xuXHRcdFx0XHRpZiAoc3JjLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRkc3Rba2V5XSA9IHNyY1trZXldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRzdDtcblx0fVxuXG5cdGZ1bmN0aW9uIF9jbG9uZShlbCkge1xuXHRcdHJldHVybiAkXG5cdFx0XHQ/ICQoZWwpLmNsb25lKHRydWUpWzBdXG5cdFx0XHQ6IChQb2x5bWVyICYmIFBvbHltZXIuZG9tXG5cdFx0XHRcdD8gUG9seW1lci5kb20oZWwpLmNsb25lTm9kZSh0cnVlKVxuXHRcdFx0XHQ6IGVsLmNsb25lTm9kZSh0cnVlKVxuXHRcdCk7XG5cdH1cblxuXHRmdW5jdGlvbiBfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlKHJvb3QpIHtcblx0XHR2YXIgaW5wdXRzID0gcm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKTtcblx0XHR2YXIgaWR4ID0gaW5wdXRzLmxlbmd0aDtcblxuXHRcdHdoaWxlIChpZHgtLSkge1xuXHRcdFx0dmFyIGVsID0gaW5wdXRzW2lkeF07XG5cdFx0XHRlbC5jaGVja2VkICYmIHNhdmVkSW5wdXRDaGVja2VkLnB1c2goZWwpO1xuXHRcdH1cblx0fVxuXG5cdC8vIEZpeGVkICM5NzM6IFxuXHRfb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZXZ0KSB7XG5cdFx0aWYgKEt2U29ydGFibGUuYWN0aXZlKSB7XG5cdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdHRyeSB7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGNhcHR1cmVNb2RlID0ge1xuXHRcdFx0XHRcdGNhcHR1cmU6IGZhbHNlLFxuXHRcdFx0XHRcdHBhc3NpdmU6IGZhbHNlXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fSkpO1xuXHR9IGNhdGNoIChlcnIpIHt9XG5cblx0Ly8gRXhwb3J0IHV0aWxzXG5cdEt2U29ydGFibGUudXRpbHMgPSB7XG5cdFx0b246IF9vbixcblx0XHRvZmY6IF9vZmYsXG5cdFx0Y3NzOiBfY3NzLFxuXHRcdGZpbmQ6IF9maW5kLFxuXHRcdGlzOiBmdW5jdGlvbiAoZWwsIHNlbGVjdG9yKSB7XG5cdFx0XHRyZXR1cm4gISFfY2xvc2VzdChlbCwgc2VsZWN0b3IsIGVsKTtcblx0XHR9LFxuXHRcdGV4dGVuZDogX2V4dGVuZCxcblx0XHR0aHJvdHRsZTogX3Rocm90dGxlLFxuXHRcdGNsb3Nlc3Q6IF9jbG9zZXN0LFxuXHRcdHRvZ2dsZUNsYXNzOiBfdG9nZ2xlQ2xhc3MsXG5cdFx0Y2xvbmU6IF9jbG9uZSxcblx0XHRpbmRleDogX2luZGV4XG5cdH07XG5cblxuXHQvKipcblx0ICogQ3JlYXRlIGt2c29ydGFibGUgaW5zdGFuY2Vcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gIGVsXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSAgICAgIFtvcHRpb25zXVxuXHQgKi9cblx0S3ZTb3J0YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gbmV3IEt2U29ydGFibGUoZWwsIG9wdGlvbnMpO1xuXHR9O1xuXG5cblx0Ly8gRXhwb3J0XG5cdEt2U29ydGFibGUudmVyc2lvbiA9ICcxLjUuMSc7XG5cdHJldHVybiBLdlNvcnRhYmxlO1xufSk7XG4vKipcbiAqIGpRdWVyeSBwbHVnaW4gZm9yIEt2U29ydGFibGVcbiAqL1xuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShbXCJqcXVlcnlcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8qIGpzaGludCBzdWI6dHJ1ZSAqL1xuXHRcdGZhY3RvcnkoalF1ZXJ5KTtcblx0fVxufSkoZnVuY3Rpb24gKCQpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdCQuZm4ua3Zzb3J0YWJsZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdFx0dmFyIHJldFZhbCxcblx0XHRcdGFyZ3MgPSBhcmd1bWVudHM7XG5cblx0XHR0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyICRlbCA9ICQodGhpcyksIGt2c29ydGFibGUgPSAkZWwuZGF0YSgna3Zzb3J0YWJsZScpO1xuXG5cdFx0XHRpZiAoIWt2c29ydGFibGUgJiYgKG9wdGlvbnMgaW5zdGFuY2VvZiBPYmplY3QgfHwgIW9wdGlvbnMpKSB7XG5cdFx0XHRcdGt2c29ydGFibGUgPSBuZXcgS3ZTb3J0YWJsZSh0aGlzLCBvcHRpb25zKTtcblx0XHRcdFx0JGVsLmRhdGEoJ2t2c29ydGFibGUnLCBrdnNvcnRhYmxlKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGt2c29ydGFibGUpIHtcblx0XHRcdFx0aWYgKG9wdGlvbnMgPT09ICd3aWRnZXQnKSB7XG5cdFx0XHRcdFx0cmV0VmFsID0ga3Zzb3J0YWJsZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmIChvcHRpb25zID09PSAnZGVzdHJveScpIHtcblx0XHRcdFx0XHRrdnNvcnRhYmxlLmRlc3Ryb3koKTtcblx0XHRcdFx0XHQkZWwucmVtb3ZlRGF0YSgna3Zzb3J0YWJsZScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBrdnNvcnRhYmxlW29wdGlvbnNdID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0cmV0VmFsID0ga3Zzb3J0YWJsZVtvcHRpb25zXS5hcHBseShrdnNvcnRhYmxlLCBbXS5zbGljZS5jYWxsKGFyZ3MsIDEpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmIChvcHRpb25zIGluIGt2c29ydGFibGUub3B0aW9ucykge1xuXHRcdFx0XHRcdHJldFZhbCA9IGt2c29ydGFibGUub3B0aW9uLmFwcGx5KGt2c29ydGFibGUsIGFyZ3MpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gKHJldFZhbCA9PT0gdm9pZCAwKSA/IHRoaXMgOiByZXRWYWw7XG5cdH07XG59KTtcbi8qIVxuICogYm9vdHN0cmFwLWZpbGVpbnB1dCB2NC40LjZcbiAqIGh0dHA6Ly9wbHVnaW5zLmtyYWplZS5jb20vZmlsZS1pbnB1dFxuICpcbiAqIEF1dGhvcjogS2FydGlrIFZpc3dlc3dhcmFuXG4gKiBDb3B5cmlnaHQ6IDIwMTQgLSAyMDE3LCBLYXJ0aWsgVmlzd2Vzd2FyYW4sIEtyYWplZS5jb21cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtQ2xhdXNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20va2FydGlrLXYvYm9vdHN0cmFwLWZpbGVpbnB1dC9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4gKi9cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgeyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgIH0gZWxzZSB7IC8vIG5vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZVxuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgICAgICAgICAvLyBOb2RlL0NvbW1vbkpTXG4gICAgICAgICAgICAvLyBub2luc3BlY3Rpb24gSlNVbnJlc29sdmVkVmFyaWFibGVcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgICAgICAgICBmYWN0b3J5KHdpbmRvdy5qUXVlcnkpO1xuICAgICAgICB9XG4gICAgfVxufShmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgJC5mbi5maWxlaW5wdXRMb2NhbGVzID0ge307XG4gICAgJC5mbi5maWxlaW5wdXRUaGVtZXMgPSB7fTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUuc2V0VG9rZW5zID0gZnVuY3Rpb24gKHJlcGxhY2VQYWlycykge1xuICAgICAgICB2YXIgc3RyID0gdGhpcy50b1N0cmluZygpLCBrZXksIHJlO1xuICAgICAgICBmb3IgKGtleSBpbiByZXBsYWNlUGFpcnMpIHtcbiAgICAgICAgICAgIGlmIChyZXBsYWNlUGFpcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJlID0gbmV3IFJlZ0V4cChcIlxce1wiICsga2V5ICsgXCJcXH1cIiwgXCJnXCIpO1xuICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKHJlLCByZXBsYWNlUGFpcnNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9O1xuXG4gICAgdmFyICRoLCBGaWxlSW5wdXQ7XG5cbiAgICAvLyBmaWxlaW5wdXQgaGVscGVyIG9iamVjdCBmb3IgYWxsIGdsb2JhbCB2YXJpYWJsZXMgYW5kIGludGVybmFsIGhlbHBlciBtZXRob2RzXG4gICAgLy9ub2luc3BlY3Rpb24gSlNVbnJlc29sdmVkVmFyaWFibGVcbiAgICAkaCA9IHtcbiAgICAgICAgRlJBTUVTOiAnLmt2LXByZXZpZXctdGh1bWInLFxuICAgICAgICBTT1JUX0NTUzogJ2ZpbGUtc29ydGFibGUnLFxuICAgICAgICBPQkpFQ1RfUEFSQU1TOiAnPHBhcmFtIG5hbWU9XCJjb250cm9sbGVyXCIgdmFsdWU9XCJ0cnVlXCIgLz5cXG4nICtcbiAgICAgICAgJzxwYXJhbSBuYW1lPVwiYWxsb3dGdWxsU2NyZWVuXCIgdmFsdWU9XCJ0cnVlXCIgLz5cXG4nICtcbiAgICAgICAgJzxwYXJhbSBuYW1lPVwiYWxsb3dTY3JpcHRBY2Nlc3NcIiB2YWx1ZT1cImFsd2F5c1wiIC8+XFxuJyArXG4gICAgICAgICc8cGFyYW0gbmFtZT1cImF1dG9QbGF5XCIgdmFsdWU9XCJmYWxzZVwiIC8+XFxuJyArXG4gICAgICAgICc8cGFyYW0gbmFtZT1cImF1dG9TdGFydFwiIHZhbHVlPVwiZmFsc2VcIiAvPlxcbicgK1xuICAgICAgICAnPHBhcmFtIG5hbWU9XCJxdWFsaXR5XCIgdmFsdWU9XCJoaWdoXCIgLz5cXG4nLFxuICAgICAgICBERUZBVUxUX1BSRVZJRVc6ICc8ZGl2IGNsYXNzPVwiZmlsZS1wcmV2aWV3LW90aGVyXCI+XFxuJyArXG4gICAgICAgICc8c3BhbiBjbGFzcz1cIntwcmV2aWV3RmlsZUljb25DbGFzc31cIj57cHJldmlld0ZpbGVJY29ufTwvc3Bhbj5cXG4nICtcbiAgICAgICAgJzwvZGl2PicsXG4gICAgICAgIE1PREFMX0lEOiAna3ZGaWxlaW5wdXRNb2RhbCcsXG4gICAgICAgIE1PREFMX0VWRU5UUzogWydzaG93JywgJ3Nob3duJywgJ2hpZGUnLCAnaGlkZGVuJywgJ2xvYWRlZCddLFxuICAgICAgICBvYmpVcmw6IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTCxcbiAgICAgICAgY29tcGFyZTogZnVuY3Rpb24gKGlucHV0LCBzdHIsIGV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IHVuZGVmaW5lZCAmJiAoZXhhY3QgPyBpbnB1dCA9PT0gc3RyIDogaW5wdXQubWF0Y2goc3RyKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzSUU6IGZ1bmN0aW9uICh2ZXIpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciBJRSB2ZXJzaW9ucyA8IDExXG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLmFwcE5hbWUgIT09ICdNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZlciA9PT0gMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnbXNpZVxcXFxzJyArIHZlciwgJ2knKS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksIHN0YXR1cztcbiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBcIjwhLS1baWYgSUUgXCIgKyB2ZXIgKyBcIl0+IDxpPjwvaT4gPCFbZW5kaWZdLS0+XCI7XG4gICAgICAgICAgICBzdGF0dXMgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpXCIpLmxlbmd0aDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgICAgIGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRpdik7XG4gICAgICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgICAgICB9LFxuICAgICAgICBpbml0TW9kYWw6IGZ1bmN0aW9uICgkbW9kYWwpIHtcbiAgICAgICAgICAgIHZhciAkYm9keSA9ICQoJ2JvZHknKTtcbiAgICAgICAgICAgIGlmICgkYm9keS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkbW9kYWwuYXBwZW5kVG8oJGJvZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpc0VtcHR5OiBmdW5jdGlvbiAodmFsdWUsIHRyaW0pIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCB8fCAodHJpbSAmJiAkLnRyaW0odmFsdWUpID09PSAnJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzQXJyYXk6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgICAgIH0sXG4gICAgICAgIGlmU2V0OiBmdW5jdGlvbiAobmVlZGxlLCBoYXlzdGFjaywgZGVmKSB7XG4gICAgICAgICAgICBkZWYgPSBkZWYgfHwgJyc7XG4gICAgICAgICAgICByZXR1cm4gKGhheXN0YWNrICYmIHR5cGVvZiBoYXlzdGFjayA9PT0gJ29iamVjdCcgJiYgbmVlZGxlIGluIGhheXN0YWNrKSA/IGhheXN0YWNrW25lZWRsZV0gOiBkZWY7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFuQXJyYXk6IGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgICAgIGlmICghKGFyciBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgICAgIGFyciA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGUgIT09IHVuZGVmaW5lZCAmJiBlICE9PSBudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzcGxpY2VBcnJheTogZnVuY3Rpb24gKGFyciwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBpLCBqID0gMCwgb3V0ID0gW107XG4gICAgICAgICAgICBpZiAoIShhcnIgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgIT09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dFtqXSA9IGFycltpXTtcbiAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIGdldE51bTogZnVuY3Rpb24gKG51bSwgZGVmKSB7XG4gICAgICAgICAgICBkZWYgPSBkZWYgfHwgMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbnVtID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbnVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgbnVtID0gcGFyc2VGbG9hdChudW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlzTmFOKG51bSkgPyBkZWYgOiBudW07XG4gICAgICAgIH0sXG4gICAgICAgIGhhc0ZpbGVBUElTdXBwb3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gISEod2luZG93LkZpbGUgJiYgd2luZG93LkZpbGVSZWFkZXIpO1xuICAgICAgICB9LFxuICAgICAgICBoYXNEcmFnRHJvcFN1cHBvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIC8qKiBAbmFtZXNwYWNlIGRpdi5kcmFnZ2FibGUgKi9cbiAgICAgICAgICAgIC8qKiBAbmFtZXNwYWNlIGRpdi5vbmRyYWdzdGFydCAqL1xuICAgICAgICAgICAgLyoqIEBuYW1lc3BhY2UgZGl2Lm9uZHJvcCAqL1xuICAgICAgICAgICAgcmV0dXJuICEkaC5pc0lFKDkpICYmXG4gICAgICAgICAgICAgICAgKGRpdi5kcmFnZ2FibGUgIT09IHVuZGVmaW5lZCB8fCAoZGl2Lm9uZHJhZ3N0YXJ0ICE9PSB1bmRlZmluZWQgJiYgZGl2Lm9uZHJvcCAhPT0gdW5kZWZpbmVkKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhc0ZpbGVVcGxvYWRTdXBwb3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGguaGFzRmlsZUFQSVN1cHBvcnQoKSAmJiB3aW5kb3cuRm9ybURhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIGhhc0Jsb2JTdXBwb3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIXdpbmRvdy5CbG9iICYmIEJvb2xlYW4obmV3IEJsb2IoKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBoYXNBcnJheUJ1ZmZlclZpZXdTdXBwb3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoMTAwKV0pLnNpemUgPT09IDEwMDtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGFVUkkyQmxvYjogZnVuY3Rpb24gKGRhdGFVUkkpIHtcbiAgICAgICAgICAgIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG4gICAgICAgICAgICB2YXIgQmxvYkJ1aWxkZXIgPSB3aW5kb3cuQmxvYkJ1aWxkZXIgfHwgd2luZG93LldlYktpdEJsb2JCdWlsZGVyIHx8IHdpbmRvdy5Nb3pCbG9iQnVpbGRlciB8fFxuICAgICAgICAgICAgICAgIHdpbmRvdy5NU0Jsb2JCdWlsZGVyLCBjYW5CbG9iID0gJGguaGFzQmxvYlN1cHBvcnQoKSwgYnl0ZVN0ciwgYXJyYXlCdWZmZXIsIGludEFycmF5LCBpLCBtaW1lU3RyLCBiYixcbiAgICAgICAgICAgICAgICBjYW5Qcm9jZWVkID0gKGNhbkJsb2IgfHwgQmxvYkJ1aWxkZXIpICYmIHdpbmRvdy5hdG9iICYmIHdpbmRvdy5BcnJheUJ1ZmZlciAmJiB3aW5kb3cuVWludDhBcnJheTtcbiAgICAgICAgICAgIGlmICghY2FuUHJvY2VlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGFVUkkuc3BsaXQoJywnKVswXS5pbmRleE9mKCdiYXNlNjQnKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgYnl0ZVN0ciA9IGF0b2IoZGF0YVVSSS5zcGxpdCgnLCcpWzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnl0ZVN0ciA9IGRlY29kZVVSSUNvbXBvbmVudChkYXRhVVJJLnNwbGl0KCcsJylbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnl0ZVN0ci5sZW5ndGgpO1xuICAgICAgICAgICAgaW50QXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYnl0ZVN0ci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGludEFycmF5W2ldID0gYnl0ZVN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWltZVN0ciA9IGRhdGFVUkkuc3BsaXQoJywnKVswXS5zcGxpdCgnOicpWzFdLnNwbGl0KCc7JylbMF07XG4gICAgICAgICAgICBpZiAoY2FuQmxvYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmxvYihbJGguaGFzQXJyYXlCdWZmZXJWaWV3U3VwcG9ydCgpID8gaW50QXJyYXkgOiBhcnJheUJ1ZmZlcl0sIHt0eXBlOiBtaW1lU3RyfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xuICAgICAgICAgICAgYmIuYXBwZW5kKGFycmF5QnVmZmVyKTtcbiAgICAgICAgICAgIHJldHVybiBiYi5nZXRCbG9iKG1pbWVTdHIpO1xuICAgICAgICB9LFxuICAgICAgICBhcnJheUJ1ZmZlcjJTdHJpbmc6IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgICAgIC8vbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZFZhcmlhYmxlXG4gICAgICAgICAgICBpZiAod2luZG93LlRleHREZWNvZGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEpTVW5yZXNvbHZlZEZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIpLmRlY29kZShidWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpLCBvdXQgPSAnJywgaSA9IDAsIGxlbiwgYywgY2hhcjIsIGNoYXIzO1xuICAgICAgICAgICAgbGVuID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICAgICAgICBjID0gYXJyYXlbaSsrXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGMgPj4gNCkgeyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAweHh4eHh4eFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDExMHggeHh4eCAgIDEweHggeHh4eFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcjIgPSBhcnJheVtpKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMHgxRikgPDwgNikgfCAoY2hhcjIgJiAweDNGKSk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAxMTEwIHh4eHggIDEweHggeHh4eCAgMTB4eCB4eHh4XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyMiA9IGFycmF5W2krK107XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyMyA9IGFycmF5W2krK107XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAweDBGKSA8PCAxMikgfCAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGNoYXIyICYgMHgzRikgPDwgNikgfCAgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChjaGFyMyAmIDB4M0YpIDw8IDApKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9LFxuICAgICAgICBpc0h0bWw6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBhLmlubmVySFRNTCA9IHN0cjtcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSBhLmNoaWxkTm9kZXMsIGkgPSBjLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgIGlmIChjW2ldLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNTdmc6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIubWF0Y2goL15cXHMqPFxcP3htbC9pKSAmJiAoc3RyLm1hdGNoKC88IURPQ1RZUEUgc3ZnL2kpIHx8IHN0ci5tYXRjaCgvPHN2Zy9pKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldE1pbWVUeXBlOiBmdW5jdGlvbiAoc2lnbmF0dXJlLCBjb250ZW50cywgdHlwZSkge1xuICAgICAgICAgICAgc3dpdGNoIChzaWduYXR1cmUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiZmZkOGZmZTBcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiZmZkOGZmZTFcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiZmZkOGZmZTJcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdpbWFnZS9qcGVnJztcbiAgICAgICAgICAgICAgICBjYXNlICc4OTUwNEU0Nyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaW1hZ2UvcG5nJztcbiAgICAgICAgICAgICAgICBjYXNlICc0NzQ5NDYzOCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaW1hZ2UvZ2lmJztcbiAgICAgICAgICAgICAgICBjYXNlICc0OTQ5MmEwMCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaW1hZ2UvdGlmZic7XG4gICAgICAgICAgICAgICAgY2FzZSAnNTI0OTQ2NDYnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2ltYWdlL3dlYnAnO1xuICAgICAgICAgICAgICAgIGNhc2UgJzY2NzQ3OTcwJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd2aWRlby8zZ3AnO1xuICAgICAgICAgICAgICAgIGNhc2UgJzRmNjc2NzUzJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd2aWRlby9vZ2cnO1xuICAgICAgICAgICAgICAgIGNhc2UgJzFhNDVkZmEzJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd2aWRlby9ta3YnO1xuICAgICAgICAgICAgICAgIGNhc2UgJzAwMDAwMWJhJzpcbiAgICAgICAgICAgICAgICBjYXNlICcwMDAwMDFiMyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndmlkZW8vbXBlZyc7XG4gICAgICAgICAgICAgICAgY2FzZSAnMzAyNmIyNzUnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3ZpZGVvL3dtdic7XG4gICAgICAgICAgICAgICAgY2FzZSAnMjU1MDQ0NDYnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2FwcGxpY2F0aW9uL3BkZic7XG4gICAgICAgICAgICAgICAgY2FzZSAnMjUyMTUwNTMnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2FwcGxpY2F0aW9uL3BzJztcbiAgICAgICAgICAgICAgICBjYXNlICc1MDRiMDMwNCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnNTA0YjA1MDYnOlxuICAgICAgICAgICAgICAgIGNhc2UgJzUwNGIwNTA4JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhcHBsaWNhdGlvbi96aXAnO1xuICAgICAgICAgICAgICAgIGNhc2UgJzM3N2FiY2FmJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhcHBsaWNhdGlvbi83eic7XG4gICAgICAgICAgICAgICAgY2FzZSAnNzU3Mzc0NjEnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2FwcGxpY2F0aW9uL3Rhcic7XG4gICAgICAgICAgICAgICAgY2FzZSAnNzgwMTczMGQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2FwcGxpY2F0aW9uL2RtZyc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzaWduYXR1cmUuc3Vic3RyaW5nKDAsIDYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICc0MzU3NTMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2gnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnNDk0NDMzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2F1ZGlvL21wMyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICc0MjVhNjgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnYXBwbGljYXRpb24vYnppcCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc2lnbmF0dXJlLnN1YnN0cmluZygwLCA0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICc0MjRkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaW1hZ2UvYm1wJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmZmYic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2F1ZGlvL21wMyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzRkNWEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhcHBsaWNhdGlvbi9leGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcxZjlkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMWZhMCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2FwcGxpY2F0aW9uL3ppcCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzFmOGInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhcHBsaWNhdGlvbi9nemlwJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50cyAmJiAhY29udGVudHMubWF0Y2goL1teXFx1MDAwMC1cXHUwMDdmXS8pID8gJ2FwcGxpY2F0aW9uL3RleHQtcGxhaW4nIDogdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWRkQ3NzOiBmdW5jdGlvbiAoJGVsLCBjc3MpIHtcbiAgICAgICAgICAgICRlbC5yZW1vdmVDbGFzcyhjc3MpLmFkZENsYXNzKGNzcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uIChvcHRpb25zLCBwYXJhbSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiAoJGguaXNFbXB0eShvcHRpb25zKSB8fCAkaC5pc0VtcHR5KG9wdGlvbnNbcGFyYW1dKSkgPyB2YWx1ZSA6ICQob3B0aW9uc1twYXJhbV0pO1xuICAgICAgICB9LFxuICAgICAgICB1bmlxSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG5ldyBEYXRlKCkuZ2V0VGltZSgpKSArICdfJyArIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMCk7XG4gICAgICAgIH0sXG4gICAgICAgIGh0bWxFbmNvZGU6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csICcmYXBvczsnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVwbGFjZVRhZ3M6IGZ1bmN0aW9uIChzdHIsIHRhZ3MpIHtcbiAgICAgICAgICAgIHZhciBvdXQgPSBzdHI7XG4gICAgICAgICAgICBpZiAoIXRhZ3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJC5lYWNoKHRhZ3MsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3V0ID0gb3V0LnNwbGl0KGtleSkuam9pbih2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFuTWVtb3J5OiBmdW5jdGlvbiAoJHRodW1iKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9ICR0aHVtYi5pcygnaW1nJykgPyAkdGh1bWIuYXR0cignc3JjJykgOiAkdGh1bWIuZmluZCgnc291cmNlJykuYXR0cignc3JjJyk7XG4gICAgICAgICAgICAvKiogQG5hbWVzcGFjZSAkaC5vYmpVcmwucmV2b2tlT2JqZWN0VVJMICovXG4gICAgICAgICAgICAkaC5vYmpVcmwucmV2b2tlT2JqZWN0VVJMKGRhdGEpO1xuICAgICAgICB9LFxuICAgICAgICBmaW5kRmlsZU5hbWU6IGZ1bmN0aW9uIChmaWxlUGF0aCkge1xuICAgICAgICAgICAgdmFyIHNlcEluZGV4ID0gZmlsZVBhdGgubGFzdEluZGV4T2YoJy8nKTtcbiAgICAgICAgICAgIGlmIChzZXBJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBzZXBJbmRleCA9IGZpbGVQYXRoLmxhc3RJbmRleE9mKCdcXFxcJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmlsZVBhdGguc3BsaXQoZmlsZVBhdGguc3Vic3RyaW5nKHNlcEluZGV4LCBzZXBJbmRleCArIDEpKS5wb3AoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2hlY2tGdWxsU2NyZWVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL25vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZVxuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlRnVsbFNjcmVlbjogZnVuY3Rpb24gKG1heGltaXplKSB7XG4gICAgICAgICAgICB2YXIgZG9jID0gZG9jdW1lbnQsIGRlID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgIGlmIChkZSAmJiBtYXhpbWl6ZSAmJiAhJGguY2hlY2tGdWxsU2NyZWVuKCkpIHtcbiAgICAgICAgICAgICAgICAvKiogQG5hbWVzcGFjZSBkb2N1bWVudC5yZXF1ZXN0RnVsbHNjcmVlbiAqL1xuICAgICAgICAgICAgICAgIC8qKiBAbmFtZXNwYWNlIGRvY3VtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4gKi9cbiAgICAgICAgICAgICAgICAvKiogQG5hbWVzcGFjZSBkb2N1bWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbiAqL1xuICAgICAgICAgICAgICAgIC8qKiBAbmFtZXNwYWNlIGRvY3VtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuICovXG4gICAgICAgICAgICAgICAgLyoqIEBuYW1lc3BhY2UgRWxlbWVudC5BTExPV19LRVlCT0FSRF9JTlBVVCAqL1xuICAgICAgICAgICAgICAgIGlmIChkZS5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICBkZS5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGUubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICBkZS5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZS5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICBkZS5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGUud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZGUud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oRWxlbWVudC5BTExPV19LRVlCT0FSRF9JTlBVVCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvKiogQG5hbWVzcGFjZSBkb2N1bWVudC5leGl0RnVsbHNjcmVlbiAqL1xuICAgICAgICAgICAgICAgIC8qKiBAbmFtZXNwYWNlIGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4gKi9cbiAgICAgICAgICAgICAgICAvKiogQG5hbWVzcGFjZSBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuICovXG4gICAgICAgICAgICAgICAgLyoqIEBuYW1lc3BhY2UgZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4gKi9cbiAgICAgICAgICAgICAgICBpZiAoZG9jLmV4aXRGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvYy5leGl0RnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jLm1zRXhpdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jLm1zRXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRvYy5tb3pDYW5jZWxGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvYy5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb2Mud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jLndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb3ZlQXJyYXk6IGZ1bmN0aW9uIChhcnIsIG9sZEluZGV4LCBuZXdJbmRleCkge1xuICAgICAgICAgICAgaWYgKG5ld0luZGV4ID49IGFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgayA9IG5ld0luZGV4IC0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoKGstLSkgKyAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJyLnNwbGljZShuZXdJbmRleCwgMCwgYXJyLnNwbGljZShvbGRJbmRleCwgMSlbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYW5ab29tQ2FjaGU6IGZ1bmN0aW9uICgkZWwpIHtcbiAgICAgICAgICAgIHZhciAkY2FjaGUgPSAkZWwuY2xvc2VzdCgnLmt2LXpvb20tY2FjaGUtdGhlbWUnKTtcbiAgICAgICAgICAgIGlmICghJGNhY2hlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRjYWNoZSA9ICRlbC5jbG9zZXN0KCcua3Ytem9vbS1jYWNoZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJGNhY2hlLnJlbW92ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRPcmllbnRhdGlvbjogZnVuY3Rpb24gKGJ1ZmZlciwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBzY2FubmVyID0gbmV3IERhdGFWaWV3KGJ1ZmZlciksIGlkeCA9IDAsIHZhbHVlID0gMSwgLy8gTm9uLXJvdGF0ZWQgaXMgdGhlIGRlZmF1bHRcbiAgICAgICAgICAgICAgICBtYXhCeXRlcywgdUludDE2LCBleGlmTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNjYW5uZXIuZ2V0VWludDE2KGlkeCkgIT09IDB4RkZEOCB8fCBidWZmZXIubGVuZ3RoIDwgMikgeyAvLyBub3QgYSBwcm9wZXIgSlBFR1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZHggKz0gMjtcbiAgICAgICAgICAgIG1heEJ5dGVzID0gc2Nhbm5lci5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGlkeCA8IG1heEJ5dGVzIC0gMikge1xuICAgICAgICAgICAgICAgIHVJbnQxNiA9IHNjYW5uZXIuZ2V0VWludDE2KGlkeCk7XG4gICAgICAgICAgICAgICAgaWR4ICs9IDI7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh1SW50MTYpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweEZGRTE6IC8vIFN0YXJ0IG9mIEVYSUZcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aWZMZW5ndGggPSBzY2FubmVyLmdldFVpbnQxNihpZHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4Qnl0ZXMgPSBleGlmTGVuZ3RoIC0gaWR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWR4ICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAweDAxMTI6IC8vIE9yaWVudGF0aW9uIHRhZ1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBzY2FubmVyLmdldFVpbnQxNihpZHggKyA2LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhCeXRlcyA9IDA7IC8vIFN0b3Agc2Nhbm5pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdGVPcmllbnRhdGlvbjogZnVuY3Rpb24gKGZpbGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5GaWxlUmVhZGVyIHx8ICF3aW5kb3cuRGF0YVZpZXcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIHNraXAgb3JpZW50YXRpb24gaWYgcHJlLXJlcXVpc2l0ZSBsaWJyYXJpZXMgbm90IHN1cHBvcnRlZCBieSBicm93c2VyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKSwgYnVmZmVyO1xuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIgPSByZWFkZXIucmVzdWx0O1xuICAgICAgICAgICAgICAgICRoLnNldE9yaWVudGF0aW9uKGJ1ZmZlciwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRqdXN0T3JpZW50ZWRJbWFnZTogZnVuY3Rpb24gKCRpbWcsIGlzWm9vbSkge1xuICAgICAgICAgICAgdmFyIG9mZnNldENvbnRUb3AsIG9mZnNldFRvcCwgbmV3VG9wO1xuICAgICAgICAgICAgaWYgKCEkaW1nLmhhc0NsYXNzKCdpcy1wb3J0cmFpdC1ndDQnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1pvb20pIHtcbiAgICAgICAgICAgICAgICAkaW1nLmNzcyh7d2lkdGg6ICRpbWcucGFyZW50KCkuaGVpZ2h0KCl9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRpbWcuY3NzKHtoZWlnaHQ6ICdhdXRvJywgd2lkdGg6ICRpbWcuaGVpZ2h0KCl9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldENvbnRUb3AgPSAkaW1nLnBhcmVudCgpLm9mZnNldCgpLnRvcDtcbiAgICAgICAgICAgIG9mZnNldFRvcCA9ICRpbWcub2Zmc2V0KCkudG9wO1xuICAgICAgICAgICAgbmV3VG9wID0gb2Zmc2V0Q29udFRvcCAtIG9mZnNldFRvcDtcbiAgICAgICAgICAgICRpbWcuY3NzKCdtYXJnaW4tdG9wJywgbmV3VG9wKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VCdXR0b246IGZ1bmN0aW9uIChjc3MpIHtcbiAgICAgICAgICAgIGNzcyA9IGNzcyA/ICdjbG9zZSAnICsgY3NzIDogJ2Nsb3NlJztcbiAgICAgICAgICAgIHJldHVybiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCInICsgY3NzICsgJ1wiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxcbicgK1xuICAgICAgICAgICAgICAgICcgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+XFxuJyArXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPic7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZpbGVJbnB1dCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgc2VsZi4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgICAgIHNlbGYuJHBhcmVudCA9IHNlbGYuJGVsZW1lbnQucGFyZW50KCk7XG4gICAgICAgIGlmICghc2VsZi5fdmFsaWRhdGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuaXNQcmV2aWV3YWJsZSA9ICRoLmhhc0ZpbGVBUElTdXBwb3J0KCk7XG4gICAgICAgIHNlbGYuaXNJRTkgPSAkaC5pc0lFKDkpO1xuICAgICAgICBzZWxmLmlzSUUxMCA9ICRoLmlzSUUoMTApO1xuICAgICAgICBpZiAoc2VsZi5pc1ByZXZpZXdhYmxlIHx8IHNlbGYuaXNJRTkpIHtcbiAgICAgICAgICAgIHNlbGYuX2luaXQob3B0aW9ucyk7XG4gICAgICAgICAgICBzZWxmLl9saXN0ZW4oKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdmaWxlLWxvYWRpbmcnKTtcbiAgICB9O1xuICAgIC8vbm9pbnNwZWN0aW9uIEpTVW51c2VkR2xvYmFsU3ltYm9sc1xuICAgIEZpbGVJbnB1dC5wcm90b3R5cGUgPSB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiBGaWxlSW5wdXQsXG4gICAgICAgIF9jbGVhbnVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBzZWxmLnJlYWRlciA9IG51bGw7XG4gICAgICAgICAgICBzZWxmLmZvcm1kYXRhID0ge307XG4gICAgICAgICAgICBzZWxmLnVwbG9hZENvdW50ID0gMDtcbiAgICAgICAgICAgIHNlbGYudXBsb2FkU3RhdHVzID0ge307XG4gICAgICAgICAgICBzZWxmLnVwbG9hZExvZyA9IFtdO1xuICAgICAgICAgICAgc2VsZi51cGxvYWRBc3luY0NvdW50ID0gMDtcbiAgICAgICAgICAgIHNlbGYubG9hZGVkSW1hZ2VzID0gW107XG4gICAgICAgICAgICBzZWxmLnRvdGFsSW1hZ2VzQ291bnQgPSAwO1xuICAgICAgICAgICAgc2VsZi5hamF4UmVxdWVzdHMgPSBbXTtcbiAgICAgICAgICAgIHNlbGYuY2xlYXJTdGFjaygpO1xuICAgICAgICAgICAgc2VsZi5maWxlSW5wdXRDbGVhcmVkID0gZmFsc2U7XG4gICAgICAgICAgICBzZWxmLmZpbGVCYXRjaENvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXNQcmV2aWV3YWJsZSkge1xuICAgICAgICAgICAgICAgIHNlbGYuc2hvd1ByZXZpZXcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuaXNFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgc2VsZi5hamF4QWJvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgc2VsZi5jYW5jZWxsaW5nID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIF9pbml0OiBmdW5jdGlvbiAob3B0aW9ucywgcmVmcmVzaE1vZGUpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgZiwgJGVsID0gc2VsZi4kZWxlbWVudCwgJGNvbnQsIHQsIHRtcDtcbiAgICAgICAgICAgIHNlbGYub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICAgICAkLmVhY2gob3B0aW9ucywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtaW5GaWxlQ291bnQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdtYXhGaWxlQ291bnQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdtaW5GaWxlU2l6ZSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21heEZpbGVTaXplJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWF4RmlsZVByZXZpZXdTaXplJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVzaXplSW1hZ2VRdWFsaXR5JzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVzaXplSWZTaXplTW9yZVRoYW4nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdwcm9ncmVzc1VwbG9hZFRocmVzaG9sZCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2luaXRpYWxQcmV2aWV3Q291bnQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICd6b29tTW9kYWxIZWlnaHQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdtaW5JbWFnZUhlaWdodCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21heEltYWdlSGVpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWluSW1hZ2VXaWR0aCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21heEltYWdlV2lkdGgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZltrZXldID0gJGguZ2V0TnVtKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZltrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChzZWxmLnJ0bCkgeyAvLyBzd2FwIGJ1dHRvbnMgZm9yIHJ0bFxuICAgICAgICAgICAgICAgIHRtcCA9IHNlbGYucHJldmlld1pvb21CdXR0b25JY29ucy5wcmV2O1xuICAgICAgICAgICAgICAgIHNlbGYucHJldmlld1pvb21CdXR0b25JY29ucy5wcmV2ID0gc2VsZi5wcmV2aWV3Wm9vbUJ1dHRvbkljb25zLm5leHQ7XG4gICAgICAgICAgICAgICAgc2VsZi5wcmV2aWV3Wm9vbUJ1dHRvbkljb25zLm5leHQgPSB0bXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlZnJlc2hNb2RlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fY2xlYW51cCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi4kZm9ybSA9ICRlbC5jbG9zZXN0KCdmb3JtJyk7XG4gICAgICAgICAgICBzZWxmLl9pbml0VGVtcGxhdGVEZWZhdWx0cygpO1xuICAgICAgICAgICAgc2VsZi51cGxvYWRGaWxlQXR0ciA9ICEkaC5pc0VtcHR5KCRlbC5hdHRyKCduYW1lJykpID8gJGVsLmF0dHIoJ25hbWUnKSA6ICdmaWxlX2RhdGEnO1xuICAgICAgICAgICAgdCA9IHNlbGYuX2dldExheW91dFRlbXBsYXRlKCdwcm9ncmVzcycpO1xuICAgICAgICAgICAgc2VsZi5wcm9ncmVzc1RlbXBsYXRlID0gdC5yZXBsYWNlKCd7Y2xhc3N9Jywgc2VsZi5wcm9ncmVzc0NsYXNzKTtcbiAgICAgICAgICAgIHNlbGYucHJvZ3Jlc3NDb21wbGV0ZVRlbXBsYXRlID0gdC5yZXBsYWNlKCd7Y2xhc3N9Jywgc2VsZi5wcm9ncmVzc0NvbXBsZXRlQ2xhc3MpO1xuICAgICAgICAgICAgc2VsZi5wcm9ncmVzc0Vycm9yVGVtcGxhdGUgPSB0LnJlcGxhY2UoJ3tjbGFzc30nLCBzZWxmLnByb2dyZXNzRXJyb3JDbGFzcyk7XG4gICAgICAgICAgICBzZWxmLmRyb3Bab25lRW5hYmxlZCA9ICRoLmhhc0RyYWdEcm9wU3VwcG9ydCgpICYmIHNlbGYuZHJvcFpvbmVFbmFibGVkO1xuICAgICAgICAgICAgc2VsZi5pc0Rpc2FibGVkID0gJGVsLmF0dHIoJ2Rpc2FibGVkJykgfHwgJGVsLmF0dHIoJ3JlYWRvbmx5Jyk7XG4gICAgICAgICAgICBpZiAoc2VsZi5pc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgJGVsLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmlzQWpheFVwbG9hZCA9ICRoLmhhc0ZpbGVVcGxvYWRTdXBwb3J0KCkgJiYgISRoLmlzRW1wdHkoc2VsZi51cGxvYWRVcmwpO1xuICAgICAgICAgICAgc2VsZi5pc0NsaWNrYWJsZSA9IHNlbGYuYnJvd3NlT25ab25lQ2xpY2sgJiYgc2VsZi5zaG93UHJldmlldyAmJlxuICAgICAgICAgICAgICAgIChzZWxmLmlzQWpheFVwbG9hZCAmJiBzZWxmLmRyb3Bab25lRW5hYmxlZCB8fCAhJGguaXNFbXB0eShzZWxmLmRlZmF1bHRQcmV2aWV3Q29udGVudCkpO1xuICAgICAgICAgICAgc2VsZi5zbHVnID0gdHlwZW9mIG9wdGlvbnMuc2x1Z0NhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLnNsdWdDYWxsYmFjayA6IHNlbGYuX3NsdWdEZWZhdWx0O1xuICAgICAgICAgICAgc2VsZi5tYWluVGVtcGxhdGUgPSBzZWxmLnNob3dDYXB0aW9uID8gc2VsZi5fZ2V0TGF5b3V0VGVtcGxhdGUoJ21haW4xJykgOiBzZWxmLl9nZXRMYXlvdXRUZW1wbGF0ZSgnbWFpbjInKTtcbiAgICAgICAgICAgIHNlbGYuY2FwdGlvblRlbXBsYXRlID0gc2VsZi5fZ2V0TGF5b3V0VGVtcGxhdGUoJ2NhcHRpb24nKTtcbiAgICAgICAgICAgIHNlbGYucHJldmlld0dlbmVyaWNUZW1wbGF0ZSA9IHNlbGYuX2dldFByZXZpZXdUZW1wbGF0ZSgnZ2VuZXJpYycpO1xuICAgICAgICAgICAgaWYgKCFzZWxmLmltYWdlQ2FudmFzICYmIHNlbGYucmVzaXplSW1hZ2UgJiYgKHNlbGYubWF4SW1hZ2VXaWR0aCB8fCBzZWxmLm1heEltYWdlSGVpZ2h0KSkge1xuICAgICAgICAgICAgICAgIHNlbGYuaW1hZ2VDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgICAgICBzZWxmLmltYWdlQ2FudmFzQ29udGV4dCA9IHNlbGYuaW1hZ2VDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkaC5pc0VtcHR5KCRlbC5hdHRyKCdpZCcpKSkge1xuICAgICAgICAgICAgICAgICRlbC5hdHRyKCdpZCcsICRoLnVuaXFJZCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYubmFtZXNwYWNlID0gJy5maWxlaW5wdXRfJyArICRlbC5hdHRyKCdpZCcpLnJlcGxhY2UoLy0vZywgJ18nKTtcbiAgICAgICAgICAgIGlmIChzZWxmLiRjb250YWluZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNlbGYuJGNvbnRhaW5lciA9IHNlbGYuX2NyZWF0ZUNvbnRhaW5lcigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9yZWZyZXNoQ29udGFpbmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkY29udCA9IHNlbGYuJGNvbnRhaW5lcjtcbiAgICAgICAgICAgIHNlbGYuJGRyb3Bab25lID0gJGNvbnQuZmluZCgnLmZpbGUtZHJvcC16b25lJyk7XG4gICAgICAgICAgICBzZWxmLiRwcm9ncmVzcyA9ICRjb250LmZpbmQoJy5rdi11cGxvYWQtcHJvZ3Jlc3MnKTtcbiAgICAgICAgICAgIHNlbGYuJGJ0blVwbG9hZCA9ICRjb250LmZpbmQoJy5maWxlaW5wdXQtdXBsb2FkJyk7XG4gICAgICAgICAgICBzZWxmLiRjYXB0aW9uQ29udGFpbmVyID0gJGguZ2V0RWxlbWVudChvcHRpb25zLCAnZWxDYXB0aW9uQ29udGFpbmVyJywgJGNvbnQuZmluZCgnLmZpbGUtY2FwdGlvbicpKTtcbiAgICAgICAgICAgIHNlbGYuJGNhcHRpb24gPSAkaC5nZXRFbGVtZW50KG9wdGlvbnMsICdlbENhcHRpb25UZXh0JywgJGNvbnQuZmluZCgnLmZpbGUtY2FwdGlvbi1uYW1lJykpO1xuICAgICAgICAgICAgaWYgKCEkaC5pc0VtcHR5KHNlbGYubXNnUGxhY2Vob2xkZXIpKSB7XG4gICAgICAgICAgICAgICAgZiA9ICRlbC5hdHRyKCdtdWx0aXBsZScpID8gc2VsZi5maWxlUGx1cmFsIDogc2VsZi5maWxlU2luZ2xlO1xuICAgICAgICAgICAgICAgIHNlbGYuJGNhcHRpb24uYXR0cigncGxhY2Vob2xkZXInLCBzZWxmLm1zZ1BsYWNlaG9sZGVyLnJlcGxhY2UoJ3tmaWxlc30nLCBmKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLiRjYXB0aW9uSWNvbiA9IHNlbGYuJGNhcHRpb25Db250YWluZXIuZmluZCgnLmZpbGUtY2FwdGlvbi1pY29uJyk7XG4gICAgICAgICAgICBpZiAoc2VsZi5tYWluQ2xhc3MuaW5kZXhPZignaW5wdXQtZ3JvdXAtbGcnKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgJGguYWRkQ3NzKHNlbGYuJGNhcHRpb25JY29uLCAnaWNvbi1sZycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLiRjYXB0aW9uSWNvbi5yZW1vdmVDbGFzcygnaWNvbi1sZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi4kcHJldmlld0NvbnRhaW5lciA9ICRoLmdldEVsZW1lbnQob3B0aW9ucywgJ2VsUHJldmlld0NvbnRhaW5lcicsICRjb250LmZpbmQoJy5maWxlLXByZXZpZXcnKSk7XG4gICAgICAgICAgICBzZWxmLiRwcmV2aWV3ID0gJGguZ2V0RWxlbWVudChvcHRpb25zLCAnZWxQcmV2aWV3SW1hZ2UnLCAkY29udC5maW5kKCcuZmlsZS1wcmV2aWV3LXRodW1ibmFpbHMnKSk7XG4gICAgICAgICAgICBzZWxmLiRwcmV2aWV3U3RhdHVzID0gJGguZ2V0RWxlbWVudChvcHRpb25zLCAnZWxQcmV2aWV3U3RhdHVzJywgJGNvbnQuZmluZCgnLmZpbGUtcHJldmlldy1zdGF0dXMnKSk7XG4gICAgICAgICAgICBzZWxmLiRlcnJvckNvbnRhaW5lciA9ICRoLmdldEVsZW1lbnQob3B0aW9ucywgJ2VsRXJyb3JDb250YWluZXInLCBzZWxmLiRwcmV2aWV3Q29udGFpbmVyLmZpbmQoJy5rdi1maWxlaW5wdXQtZXJyb3InKSk7XG4gICAgICAgICAgICBzZWxmLl92YWxpZGF0ZURpc2FibGVkKCk7XG4gICAgICAgICAgICBpZiAoISRoLmlzRW1wdHkoc2VsZi5tc2dFcnJvckNsYXNzKSkge1xuICAgICAgICAgICAgICAgICRoLmFkZENzcyhzZWxmLiRlcnJvckNvbnRhaW5lciwgc2VsZi5tc2dFcnJvckNsYXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcmVmcmVzaE1vZGUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLiRlcnJvckNvbnRhaW5lci5oaWRlKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5wcmV2aWV3SW5pdElkID0gXCJwcmV2aWV3LVwiICsgJGgudW5pcUlkKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5faW5pdFByZXZpZXdDYWNoZSgpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2luaXRQcmV2aWV3KHRydWUpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2luaXRQcmV2aWV3QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIHNlbGYuX3NldEZpbGVEcm9wWm9uZVRpdGxlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuJHBhcmVudC5oYXNDbGFzcygnZmlsZS1sb2FkaW5nJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kY29udGFpbmVyLmluc2VydEJlZm9yZShzZWxmLiRwYXJlbnQpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLiRwYXJlbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCRlbC5hdHRyKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5kaXNhYmxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl9pbml0Wm9vbSgpO1xuICAgICAgICAgICAgaWYgKHNlbGYuaGlkZVRodW1ibmFpbENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAkaC5hZGRDc3Moc2VsZi4kcHJldmlldywgJ2hpZGUtY29udGVudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfaW5pdFRlbXBsYXRlRGVmYXVsdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgdE1haW4xLCB0TWFpbjIsIHRQcmV2aWV3LCB0RmlsZUljb24sIHRDbG9zZSwgdENhcHRpb24sIHRCdG5EZWZhdWx0LCB0QnRuTGluaywgdEJ0bkJyb3dzZSxcbiAgICAgICAgICAgICAgICB0TW9kYWxNYWluLCB0TW9kYWwsIHRQcm9ncmVzcywgdFNpemUsIHRGb290ZXIsIHRBY3Rpb25zLCB0QWN0aW9uRGVsZXRlLCB0QWN0aW9uVXBsb2FkLCB0QWN0aW9uRG93bmxvYWQsXG4gICAgICAgICAgICAgICAgdEFjdGlvblpvb20sIHRBY3Rpb25EcmFnLCB0SW5kaWNhdG9yLCB0VGFnQmVmLCB0VGFnQmVmMSwgdFRhZ0JlZjIsIHRUYWdBZnQsIHRHZW5lcmljLCB0SHRtbCwgdEltYWdlLFxuICAgICAgICAgICAgICAgIHRUZXh0LCB0T2ZmaWNlLCB0VmlkZW8sIHRBdWRpbywgdEZsYXNoLCB0T2JqZWN0LCB0UGRmLCB0T3RoZXIsIHRab29tQ2FjaGUsIHZEZWZhdWx0RGltO1xuICAgICAgICAgICAgdE1haW4xID0gJ3twcmV2aWV3fVxcbicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwia3YtdXBsb2FkLXByb2dyZXNzIGt2LWhpZGRlblwiPjwvZGl2PjxkaXYgY2xhc3M9XCJjbGVhcmZpeFwiPjwvZGl2PlxcbicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAge2NsYXNzfVwiPlxcbicgK1xuICAgICAgICAgICAgICAgICcgIHtjYXB0aW9ufVxcbicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtYnRuXCI+XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICAgIHtyZW1vdmV9XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICAgIHtjYW5jZWx9XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICAgIHt1cGxvYWR9XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICAgIHticm93c2V9XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICA8L2Rpdj5cXG4nICtcbiAgICAgICAgICAgICAgICAnPC9kaXY+JztcbiAgICAgICAgICAgIHRNYWluMiA9ICd7cHJldmlld31cXG48ZGl2IGNsYXNzPVwia3YtdXBsb2FkLXByb2dyZXNzIGt2LWhpZGRlblwiPjwvZGl2PlxcbjxkaXYgY2xhc3M9XCJjbGVhcmZpeFwiPjwvZGl2PlxcbntyZW1vdmV9XFxue2NhbmNlbH1cXG57dXBsb2FkfVxcbnticm93c2V9XFxuJztcbiAgICAgICAgICAgIHRQcmV2aWV3ID0gJzxkaXYgY2xhc3M9XCJmaWxlLXByZXZpZXcge2NsYXNzfVwiPlxcbicgK1xuICAgICAgICAgICAgICAgICcgICAge2Nsb3NlfScgK1xuICAgICAgICAgICAgICAgICcgICAgPGRpdiBjbGFzcz1cIntkcm9wQ2xhc3N9XCI+XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICA8ZGl2IGNsYXNzPVwiZmlsZS1wcmV2aWV3LXRodW1ibmFpbHNcIj5cXG4nICtcbiAgICAgICAgICAgICAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICAgICAgICAgICAgICcgICAgPGRpdiBjbGFzcz1cImNsZWFyZml4XCI+PC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJyAgICA8ZGl2IGNsYXNzPVwiZmlsZS1wcmV2aWV3LXN0YXR1cyB0ZXh0LWNlbnRlciB0ZXh0LXN1Y2Nlc3NcIj48L2Rpdj5cXG4nICtcbiAgICAgICAgICAgICAgICAnICAgIDxkaXYgY2xhc3M9XCJrdi1maWxlaW5wdXQtZXJyb3JcIj48L2Rpdj5cXG4nICtcbiAgICAgICAgICAgICAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xuICAgICAgICAgICAgdENsb3NlID0gJGguY2xvc2VCdXR0b24oJ2ZpbGVpbnB1dC1yZW1vdmUnKTtcbiAgICAgICAgICAgIHRGaWxlSWNvbiA9ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tZmlsZVwiPjwvaT4nO1xuICAgICAgICAgICAgdENhcHRpb24gPSAnPGRpdiBjbGFzcz1cImZpbGUtY2FwdGlvbiBmb3JtLWNvbnRyb2wge2NsYXNzfVwiIHRhYmluZGV4PVwiNTAwXCI+XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgPHNwYW4gY2xhc3M9XCJmaWxlLWNhcHRpb24taWNvblwiPjwvc3Bhbj5cXG4nICtcbiAgICAgICAgICAgICAgICAnICA8aW5wdXQgY2xhc3M9XCJmaWxlLWNhcHRpb24tbmFtZVwiIG9ua2V5ZG93bj1cInJldHVybiBmYWxzZTtcIiBvbnBhc3RlPVwicmV0dXJuIGZhbHNlO1wiPlxcbicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xuICAgICAgICAgICAgLy9ub2luc3BlY3Rpb24gSHRtbFVua25vd25BdHRyaWJ1dGVcbiAgICAgICAgICAgIHRCdG5EZWZhdWx0ID0gJzxidXR0b24gdHlwZT1cInt0eXBlfVwiIHRhYmluZGV4PVwiNTAwXCIgdGl0bGU9XCJ7dGl0bGV9XCIgY2xhc3M9XCJ7Y3NzfVwiICcgK1xuICAgICAgICAgICAgICAgICd7c3RhdHVzfT57aWNvbn0ge2xhYmVsfTwvYnV0dG9uPic7XG4gICAgICAgICAgICAvL25vaW5zcGVjdGlvbiBIdG1sVW5rbm93bkF0dHJpYnV0ZVxuICAgICAgICAgICAgdEJ0bkxpbmsgPSAnPGEgaHJlZj1cIntocmVmfVwiIHRhYmluZGV4PVwiNTAwXCIgdGl0bGU9XCJ7dGl0bGV9XCIgY2xhc3M9XCJ7Y3NzfVwiIHtzdGF0dXN9PntpY29ufSB7bGFiZWx9PC9hPic7XG4gICAgICAgICAgICAvL25vaW5zcGVjdGlvbiBIdG1sVW5rbm93bkF0dHJpYnV0ZVxuICAgICAgICAgICAgdEJ0bkJyb3dzZSA9ICc8ZGl2IHRhYmluZGV4PVwiNTAwXCIgY2xhc3M9XCJ7Y3NzfVwiIHtzdGF0dXN9PntpY29ufSB7bGFiZWx9PC9kaXY+JztcbiAgICAgICAgICAgIHRNb2RhbE1haW4gPSAnPGRpdiBpZD1cIicgKyAkaC5NT0RBTF9JRCArICdcIiBjbGFzcz1cImZpbGUtem9vbS1kaWFsb2cgbW9kYWwgZmFkZVwiICcgK1xuICAgICAgICAgICAgICAgICd0YWJpbmRleD1cIi0xXCIgYXJpYS1sYWJlbGxlZGJ5PVwiJyArICRoLk1PREFMX0lEICsgJ0xhYmVsXCI+PC9kaXY+JztcbiAgICAgICAgICAgIHRNb2RhbCA9ICc8ZGl2IGNsYXNzPVwibW9kYWwtZGlhbG9nIG1vZGFsLWxne3J0bH1cIiByb2xlPVwiZG9jdW1lbnRcIj5cXG4nICtcbiAgICAgICAgICAgICAgICAnICA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiPlxcbicgK1xuICAgICAgICAgICAgICAgICcgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxcbicgK1xuICAgICAgICAgICAgICAgICcgICAgICA8aDUgY2xhc3M9XCJtb2RhbC10aXRsZVwiPntoZWFkaW5nfTwvaDU+XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICAgIDxzcGFuIGNsYXNzPVwia3Ytem9vbS10aXRsZVwiPjwvc3Bhbj5cXG4nICtcbiAgICAgICAgICAgICAgICAnICAgICAgPGRpdiBjbGFzcz1cImt2LXpvb20tYWN0aW9uc1wiPnt0b2dnbGVoZWFkZXJ9e2Z1bGxzY3JlZW59e2JvcmRlcmxlc3N9e2Nsb3NlfTwvZGl2PlxcbicgK1xuICAgICAgICAgICAgICAgICcgICAgPC9kaXY+XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPlxcbicgK1xuICAgICAgICAgICAgICAgICcgICAgICA8ZGl2IGNsYXNzPVwiZmxvYXRpbmctYnV0dG9uc1wiPjwvZGl2PlxcbicgK1xuICAgICAgICAgICAgICAgICcgICAgICA8ZGl2IGNsYXNzPVwia3Ytem9vbS1ib2R5IGZpbGUtem9vbS1jb250ZW50IHt6b29tRnJhbWVDbGFzc31cIj48L2Rpdj5cXG4nICsgJ3twcmV2fSB7bmV4dH1cXG4nICtcbiAgICAgICAgICAgICAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICAgICAgICAgICAgICcgIDwvZGl2PlxcbicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj5cXG4nO1xuICAgICAgICAgICAgdFByb2dyZXNzID0gJzxkaXYgY2xhc3M9XCJwcm9ncmVzc1wiPlxcbicgK1xuICAgICAgICAgICAgICAgICcgICAgPGRpdiBjbGFzcz1cIntjbGFzc31cIiByb2xlPVwicHJvZ3Jlc3NiYXJcIicgK1xuICAgICAgICAgICAgICAgICcgYXJpYS12YWx1ZW5vdz1cIntwZXJjZW50fVwiIGFyaWEtdmFsdWVtaW49XCIwXCIgYXJpYS12YWx1ZW1heD1cIjEwMFwiIHN0eWxlPVwid2lkdGg6e3BlcmNlbnR9JTtcIj5cXG4nICtcbiAgICAgICAgICAgICAgICAnICAgICAgICB7c3RhdHVzfVxcbicgK1xuICAgICAgICAgICAgICAgICcgICAgIDwvZGl2PlxcbicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xuICAgICAgICAgICAgdFNpemUgPSAnIDxzYW1wPih7c2l6ZVRleHR9KTwvc2FtcD4nO1xuICAgICAgICAgICAgdEZvb3RlciA9ICc8ZGl2IGNsYXNzPVwiZmlsZS10aHVtYm5haWwtZm9vdGVyXCI+XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICA8ZGl2IGNsYXNzPVwiZmlsZS1mb290ZXItY2FwdGlvblwiIHRpdGxlPVwie2NhcHRpb259XCI+XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICAgICAgPGRpdiBjbGFzcz1cImZpbGUtY2FwdGlvbi1pbmZvXCI+e2NhcHRpb259PC9kaXY+XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICAgICAgPGRpdiBjbGFzcz1cImZpbGUtc2l6ZS1pbmZvXCI+e3NpemV9PC9kaXY+XFxuJyArXG4gICAgICAgICAgICAgICAgJyAgICA8L2Rpdj5cXG4nICtcbiAgICAgICAgICAgICAgICAnICAgIHtwcm9ncmVzc31cXG57aW5kaWNhdG9yfVxcbnthY3Rpb25zfVxcbicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xuICAgICAgICAgICAgdEFjdGlvbnMgPSAnPGRpdiBjbGFzcz1cImZpbGUtYWN0aW9uc1wiPlxcbicgK1xuICAgICAgICAgICAgICAgICcgICAgPGRpdiBjbGFzcz1cImZpbGUtZm9vdGVyLWJ1dHRvbnNcIj5cXG4nICtcbiAgICAgICAgICAgICAgICAnICAgICAgICB7ZG93bmxvYWR9IHt1cGxvYWR9IHtkZWxldGV9IHt6b29tfSB7b3RoZXJ9JyArXG4gICAgICAgICAgICAgICAgJyAgICA8L2Rpdj5cXG4nICtcbiAgICAgICAgICAgICAgICAnPC9kaXY+XFxuJyArXG4gICAgICAgICAgICAgICAgJ3tkcmFnfVxcbicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY2xlYXJmaXhcIj48L2Rpdj4nO1xuICAgICAgICAgICAgLy9ub2luc3BlY3Rpb24gSHRtbFVua25vd25BdHRyaWJ1dGVcbiAgICAgICAgICAgIHRBY3Rpb25EZWxldGUgPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJrdi1maWxlLXJlbW92ZSB7cmVtb3ZlQ2xhc3N9XCIgJyArXG4gICAgICAgICAgICAgICAgJ3RpdGxlPVwie3JlbW92ZVRpdGxlfVwiIHtkYXRhVXJsfXtkYXRhS2V5fT57cmVtb3ZlSWNvbn08L2J1dHRvbj5cXG4nO1xuICAgICAgICAgICAgdEFjdGlvblVwbG9hZCA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImt2LWZpbGUtdXBsb2FkIHt1cGxvYWRDbGFzc31cIiB0aXRsZT1cInt1cGxvYWRUaXRsZX1cIj4nICtcbiAgICAgICAgICAgICAgICAne3VwbG9hZEljb259PC9idXR0b24+JztcbiAgICAgICAgICAgIHRBY3Rpb25Eb3dubG9hZCA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImt2LWZpbGUtZG93bmxvYWQge2Rvd25sb2FkQ2xhc3N9XCIgdGl0bGU9XCJ7ZG93bmxvYWRUaXRsZX1cIiAnICtcbiAgICAgICAgICAgICAgICAnZGF0YS11cmw9XCJ7ZG93bmxvYWRVcmx9XCIgZGF0YS1jYXB0aW9uPVwie2NhcHRpb259XCI+e2Rvd25sb2FkSWNvbn08L2J1dHRvbj4nO1xuICAgICAgICAgICAgdEFjdGlvblpvb20gPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJrdi1maWxlLXpvb20ge3pvb21DbGFzc31cIiAnICtcbiAgICAgICAgICAgICAgICAndGl0bGU9XCJ7em9vbVRpdGxlfVwiPnt6b29tSWNvbn08L2J1dHRvbj4nO1xuICAgICAgICAgICAgdEFjdGlvbkRyYWcgPSAnPHNwYW4gY2xhc3M9XCJmaWxlLWRyYWctaGFuZGxlIHtkcmFnQ2xhc3N9XCIgdGl0bGU9XCJ7ZHJhZ1RpdGxlfVwiPntkcmFnSWNvbn08L3NwYW4+JztcbiAgICAgICAgICAgIHRJbmRpY2F0b3IgPSAnPGRpdiBjbGFzcz1cImZpbGUtdXBsb2FkLWluZGljYXRvclwiIHRpdGxlPVwie2luZGljYXRvclRpdGxlfVwiPntpbmRpY2F0b3J9PC9kaXY+JztcbiAgICAgICAgICAgIHRUYWdCZWYgPSAnPGRpdiBjbGFzcz1cImZpbGUtcHJldmlldy1mcmFtZSB7ZnJhbWVDbGFzc31cIiBpZD1cIntwcmV2aWV3SWR9XCIgZGF0YS1maWxlaW5kZXg9XCJ7ZmlsZWluZGV4fVwiJyArXG4gICAgICAgICAgICAgICAgJyBkYXRhLXRlbXBsYXRlPVwie3RlbXBsYXRlfVwiJztcbiAgICAgICAgICAgIHRUYWdCZWYxID0gdFRhZ0JlZiArICc+PGRpdiBjbGFzcz1cImt2LWZpbGUtY29udGVudFwiPlxcbic7XG4gICAgICAgICAgICB0VGFnQmVmMiA9IHRUYWdCZWYgKyAnIHRpdGxlPVwie2NhcHRpb259XCI+PGRpdiBjbGFzcz1cImt2LWZpbGUtY29udGVudFwiPlxcbic7XG4gICAgICAgICAgICB0VGFnQWZ0ID0gJzwvZGl2Pntmb290ZXJ9XFxuPC9kaXY+XFxuJztcbiAgICAgICAgICAgIHRHZW5lcmljID0gJ3tjb250ZW50fVxcbic7XG4gICAgICAgICAgICB0SHRtbCA9ICc8ZGl2IGNsYXNzPVwia3YtcHJldmlldy1kYXRhIGZpbGUtcHJldmlldy1odG1sXCIgdGl0bGU9XCJ7Y2FwdGlvbn1cIiB7c3R5bGV9PntkYXRhfTwvZGl2Plxcbic7XG4gICAgICAgICAgICB0SW1hZ2UgPSAnPGltZyBzcmM9XCJ7ZGF0YX1cIiBjbGFzcz1cImZpbGUtcHJldmlldy1pbWFnZSBrdi1wcmV2aWV3LWRhdGFcIiB0aXRsZT1cIntjYXB0aW9ufVwiICcgK1xuICAgICAgICAgICAgICAgICdhbHQ9XCJ7Y2FwdGlvbn1cIiB7c3R5bGV9Plxcbic7XG4gICAgICAgICAgICB0VGV4dCA9ICc8dGV4dGFyZWEgY2xhc3M9XCJrdi1wcmV2aWV3LWRhdGEgZmlsZS1wcmV2aWV3LXRleHRcIiB0aXRsZT1cIntjYXB0aW9ufVwiIHJlYWRvbmx5IHtzdHlsZX0+JyArXG4gICAgICAgICAgICAgICAgJ3tkYXRhfTwvdGV4dGFyZWE+XFxuJztcbiAgICAgICAgICAgIHRPZmZpY2UgPSAnPGlmcmFtZSBjbGFzcz1cImt2LXByZXZpZXctZGF0YSBmaWxlLXByZXZpZXctb2ZmaWNlXCIgJyArXG4gICAgICAgICAgICAgICAgJ3NyYz1cImh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2d2aWV3P3VybD17ZGF0YX0mZW1iZWRkZWQ9dHJ1ZVwiIHtzdHlsZX0+PC9pZnJhbWU+JztcbiAgICAgICAgICAgIHRWaWRlbyA9ICc8dmlkZW8gY2xhc3M9XCJrdi1wcmV2aWV3LWRhdGEgZmlsZS1wcmV2aWV3LXZpZGVvXCIgY29udHJvbHMge3N0eWxlfT5cXG4nICtcbiAgICAgICAgICAgICAgICAnPHNvdXJjZSBzcmM9XCJ7ZGF0YX1cIiB0eXBlPVwie3R5cGV9XCI+XFxuJyArICRoLkRFRkFVTFRfUFJFVklFVyArICdcXG48L3ZpZGVvPlxcbic7XG4gICAgICAgICAgICB0QXVkaW8gPSAnPGF1ZGlvIGNsYXNzPVwia3YtcHJldmlldy1kYXRhIGZpbGUtcHJldmlldy1hdWRpb1wiIGNvbnRyb2xzIHtzdHlsZX0+XFxuPHNvdXJjZSBzcmM9XCJ7ZGF0YX1cIiAnICtcbiAgICAgICAgICAgICAgICAndHlwZT1cInt0eXBlfVwiPlxcbicgKyAkaC5ERUZBVUxUX1BSRVZJRVcgKyAnXFxuPC9hdWRpbz5cXG4nO1xuICAgICAgICAgICAgdEZsYXNoID0gJzxlbWJlZCBjbGFzcz1cImt2LXByZXZpZXctZGF0YSBmaWxlLXByZXZpZXctZmxhc2hcIiBzcmM9XCJ7ZGF0YX1cIiB0eXBlPVwiYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2hcIiB7c3R5bGV9Plxcbic7XG4gICAgICAgICAgICB0UGRmID0gJzxlbWJlZCBjbGFzcz1cImt2LXByZXZpZXctZGF0YSBmaWxlLXByZXZpZXctcGRmXCIgc3JjPVwie2RhdGF9XCIgdHlwZT1cImFwcGxpY2F0aW9uL3BkZlwiIHtzdHlsZX0+XFxuJztcbiAgICAgICAgICAgIHRPYmplY3QgPSAnPG9iamVjdCBjbGFzcz1cImt2LXByZXZpZXctZGF0YSBmaWxlLXByZXZpZXctb2JqZWN0IGZpbGUtb2JqZWN0IHt0eXBlQ3NzfVwiICcgK1xuICAgICAgICAgICAgICAgICdkYXRhPVwie2RhdGF9XCIgdHlwZT1cInt0eXBlfVwiIHtzdHlsZX0+XFxuJyArICc8cGFyYW0gbmFtZT1cIm1vdmllXCIgdmFsdWU9XCJ7Y2FwdGlvbn1cIiAvPlxcbicgK1xuICAgICAgICAgICAgICAgICRoLk9CSkVDVF9QQVJBTVMgKyAnICcgKyAkaC5ERUZBVUxUX1BSRVZJRVcgKyAnXFxuPC9vYmplY3Q+XFxuJztcbiAgICAgICAgICAgIHRPdGhlciA9ICc8ZGl2IGNsYXNzPVwia3YtcHJldmlldy1kYXRhIGZpbGUtcHJldmlldy1vdGhlci1mcmFtZVwiIHtzdHlsZX0+XFxuJyArICRoLkRFRkFVTFRfUFJFVklFVyArICdcXG48L2Rpdj5cXG4nO1xuICAgICAgICAgICAgdFpvb21DYWNoZSA9ICc8ZGl2IGNsYXNzPVwia3Ytem9vbS1jYWNoZVwiIHN0eWxlPVwiZGlzcGxheTpub25lXCI+e3pvb21Db250ZW50fTwvZGl2Pic7XG4gICAgICAgICAgICB2RGVmYXVsdERpbSA9IHt3aWR0aDogXCIxMDAlXCIsIGhlaWdodDogXCIxMDAlXCIsICdtaW4taGVpZ2h0JzogXCI0ODBweFwifTtcbiAgICAgICAgICAgIHNlbGYuZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICAgICAgbGF5b3V0VGVtcGxhdGVzOiB7XG4gICAgICAgICAgICAgICAgICAgIG1haW4xOiB0TWFpbjEsXG4gICAgICAgICAgICAgICAgICAgIG1haW4yOiB0TWFpbjIsXG4gICAgICAgICAgICAgICAgICAgIHByZXZpZXc6IHRQcmV2aWV3LFxuICAgICAgICAgICAgICAgICAgICBjbG9zZTogdENsb3NlLFxuICAgICAgICAgICAgICAgICAgICBmaWxlSWNvbjogdEZpbGVJY29uLFxuICAgICAgICAgICAgICAgICAgICBjYXB0aW9uOiB0Q2FwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxNYWluOiB0TW9kYWxNYWluLFxuICAgICAgICAgICAgICAgICAgICBtb2RhbDogdE1vZGFsLFxuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogdFByb2dyZXNzLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiB0U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgZm9vdGVyOiB0Rm9vdGVyLFxuICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3I6IHRJbmRpY2F0b3IsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IHRBY3Rpb25zLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25EZWxldGU6IHRBY3Rpb25EZWxldGUsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvblVwbG9hZDogdEFjdGlvblVwbG9hZCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uRG93bmxvYWQ6IHRBY3Rpb25Eb3dubG9hZCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uWm9vbTogdEFjdGlvblpvb20sXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbkRyYWc6IHRBY3Rpb25EcmFnLFxuICAgICAgICAgICAgICAgICAgICBidG5EZWZhdWx0OiB0QnRuRGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgYnRuTGluazogdEJ0bkxpbmssXG4gICAgICAgICAgICAgICAgICAgIGJ0bkJyb3dzZTogdEJ0bkJyb3dzZSxcbiAgICAgICAgICAgICAgICAgICAgem9vbUNhY2hlOiB0Wm9vbUNhY2hlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwcmV2aWV3TWFya3VwVGFnczoge1xuICAgICAgICAgICAgICAgICAgICB0YWdCZWZvcmUxOiB0VGFnQmVmMSxcbiAgICAgICAgICAgICAgICAgICAgdGFnQmVmb3JlMjogdFRhZ0JlZjIsXG4gICAgICAgICAgICAgICAgICAgIHRhZ0FmdGVyOiB0VGFnQWZ0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwcmV2aWV3Q29udGVudFRlbXBsYXRlczoge1xuICAgICAgICAgICAgICAgICAgICBnZW5lcmljOiB0R2VuZXJpYyxcbiAgICAgICAgICAgICAgICAgICAgaHRtbDogdEh0bWwsXG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiB0SW1hZ2UsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRUZXh0LFxuICAgICAgICAgICAgICAgICAgICBvZmZpY2U6IHRPZmZpY2UsXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvOiB0VmlkZW8sXG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvOiB0QXVkaW8sXG4gICAgICAgICAgICAgICAgICAgIGZsYXNoOiB0Rmxhc2gsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdE9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgcGRmOiB0UGRmLFxuICAgICAgICAgICAgICAgICAgICBvdGhlcjogdE90aGVyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUHJldmlld1R5cGVzOiBbJ2ltYWdlJywgJ2h0bWwnLCAndGV4dCcsICd2aWRlbycsICdhdWRpbycsICdmbGFzaCcsICdwZGYnLCAnb2JqZWN0J10sXG4gICAgICAgICAgICAgICAgcHJldmlld1RlbXBsYXRlczoge30sXG4gICAgICAgICAgICAgICAgcHJldmlld1NldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiB7d2lkdGg6IFwiYXV0b1wiLCBoZWlnaHQ6IFwiYXV0b1wiLCAnbWF4LXdpZHRoJzogXCIxMDAlXCIsICdtYXgtaGVpZ2h0JzogXCIxMDAlXCJ9LFxuICAgICAgICAgICAgICAgICAgICBodG1sOiB7d2lkdGg6IFwiMjEzcHhcIiwgaGVpZ2h0OiBcIjE2MHB4XCJ9LFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB7d2lkdGg6IFwiMjEzcHhcIiwgaGVpZ2h0OiBcIjE2MHB4XCJ9LFxuICAgICAgICAgICAgICAgICAgICBvZmZpY2U6IHt3aWR0aDogXCIyMTNweFwiLCBoZWlnaHQ6IFwiMTYwcHhcIn0sXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvOiB7d2lkdGg6IFwiMjEzcHhcIiwgaGVpZ2h0OiBcIjE2MHB4XCJ9LFxuICAgICAgICAgICAgICAgICAgICBhdWRpbzoge3dpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcIjMwcHhcIn0sXG4gICAgICAgICAgICAgICAgICAgIGZsYXNoOiB7d2lkdGg6IFwiMjEzcHhcIiwgaGVpZ2h0OiBcIjE2MHB4XCJ9LFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHt3aWR0aDogXCIyMTNweFwiLCBoZWlnaHQ6IFwiMTYwcHhcIn0sXG4gICAgICAgICAgICAgICAgICAgIHBkZjoge3dpZHRoOiBcIjIxM3B4XCIsIGhlaWdodDogXCIxNjBweFwifSxcbiAgICAgICAgICAgICAgICAgICAgb3RoZXI6IHt3aWR0aDogXCIyMTNweFwiLCBoZWlnaHQ6IFwiMTYwcHhcIn1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByZXZpZXdTZXR0aW5nc1NtYWxsOiB7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiB7d2lkdGg6IFwiYXV0b1wiLCBoZWlnaHQ6IFwiYXV0b1wiLCAnbWF4LXdpZHRoJzogXCIxMDAlXCIsICdtYXgtaGVpZ2h0JzogXCIxMDAlXCJ9LFxuICAgICAgICAgICAgICAgICAgICBodG1sOiB7d2lkdGg6IFwiMTAwJVwiLCBoZWlnaHQ6IFwiMTYwcHhcIn0sXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHt3aWR0aDogXCIxMDAlXCIsIGhlaWdodDogXCIxNjBweFwifSxcbiAgICAgICAgICAgICAgICAgICAgb2ZmaWNlOiB7d2lkdGg6IFwiMTAwJVwiLCBoZWlnaHQ6IFwiMTYwcHhcIn0sXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvOiB7d2lkdGg6IFwiMTAwJVwiLCBoZWlnaHQ6IFwiYXV0b1wifSxcbiAgICAgICAgICAgICAgICAgICAgYXVkaW86IHt3aWR0aDogXCIxMDAlXCIsIGhlaWdodDogXCIzMHB4XCJ9LFxuICAgICAgICAgICAgICAgICAgICBmbGFzaDoge3dpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcImF1dG9cIn0sXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDoge3dpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcImF1dG9cIn0sXG4gICAgICAgICAgICAgICAgICAgIHBkZjoge3dpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcIjE2MHB4XCJ9LFxuICAgICAgICAgICAgICAgICAgICBvdGhlcjoge3dpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcIjE2MHB4XCJ9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwcmV2aWV3Wm9vbVNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiB7d2lkdGg6IFwiYXV0b1wiLCBoZWlnaHQ6IFwiYXV0b1wiLCAnbWF4LXdpZHRoJzogXCIxMDAlXCIsICdtYXgtaGVpZ2h0JzogXCIxMDAlXCJ9LFxuICAgICAgICAgICAgICAgICAgICBodG1sOiB2RGVmYXVsdERpbSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdkRlZmF1bHREaW0sXG4gICAgICAgICAgICAgICAgICAgIG9mZmljZToge3dpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcIjEwMCVcIiwgJ21heC13aWR0aCc6IFwiMTAwJVwiLCAnbWluLWhlaWdodCc6IFwiNDgwcHhcIn0sXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvOiB7d2lkdGg6IFwiYXV0b1wiLCBoZWlnaHQ6IFwiMTAwJVwiLCAnbWF4LXdpZHRoJzogXCIxMDAlXCJ9LFxuICAgICAgICAgICAgICAgICAgICBhdWRpbzoge3dpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcIjMwcHhcIn0sXG4gICAgICAgICAgICAgICAgICAgIGZsYXNoOiB7d2lkdGg6IFwiYXV0b1wiLCBoZWlnaHQ6IFwiNDgwcHhcIn0sXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDoge3dpZHRoOiBcImF1dG9cIiwgaGVpZ2h0OiBcIjEwMCVcIiwgJ21heC13aWR0aCc6IFwiMTAwJVwiLCAnbWluLWhlaWdodCc6IFwiNDgwcHhcIn0sXG4gICAgICAgICAgICAgICAgICAgIHBkZjogdkRlZmF1bHREaW0sXG4gICAgICAgICAgICAgICAgICAgIG90aGVyOiB7d2lkdGg6IFwiYXV0b1wiLCBoZWlnaHQ6IFwiMTAwJVwiLCAnbWluLWhlaWdodCc6IFwiNDgwcHhcIn1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZpbGVUeXBlU2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IGZ1bmN0aW9uICh2VHlwZSwgdk5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoJGguY29tcGFyZSh2VHlwZSwgJ2ltYWdlLionKSAmJiAhJGguY29tcGFyZSh2VHlwZSwgLyh0aWZmP3x3bWYpJC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRoLmNvbXBhcmUodk5hbWUsIC9cXC4oZ2lmfHBuZ3xqcGU/ZykkL2kpKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaHRtbDogZnVuY3Rpb24gKHZUeXBlLCB2TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRoLmNvbXBhcmUodlR5cGUsICd0ZXh0L2h0bWwnKSB8fCAkaC5jb21wYXJlKHZOYW1lLCAvXFwuKGh0bXxodG1sKSQvaSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9mZmljZTogZnVuY3Rpb24gKHZUeXBlLCB2TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRoLmNvbXBhcmUodlR5cGUsIC8od29yZHxleGNlbHxwb3dlcnBvaW50fG9mZmljZXxpd29yay1wYWdlc3x0aWZmPykkL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGguY29tcGFyZSh2TmFtZSwgL1xcLihydGZ8ZG9jeD98eGxzeD98cHB0eD98cHBzfHBvdHg/fG9kc3xvZHR8cGFnZXN8YWl8ZHhmfHR0Znx0aWZmP3x3bWZ8ZT9wcykkL2kpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBmdW5jdGlvbiAodlR5cGUsIHZOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGguY29tcGFyZSh2VHlwZSwgJ3RleHQuKicpIHx8ICRoLmNvbXBhcmUodk5hbWUsIC9cXC4oeG1sfGphdmFzY3JpcHQpJC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRoLmNvbXBhcmUodk5hbWUsIC9cXC4odHh0fG1kfGNzdnxuZm98aW5pfGpzb258cGhwfGpzfGNzcykkL2kpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB2aWRlbzogZnVuY3Rpb24gKHZUeXBlLCB2TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRoLmNvbXBhcmUodlR5cGUsICd2aWRlby4qJykgJiYgKCRoLmNvbXBhcmUodlR5cGUsIC8ob2dnfG1wNHxtcD9nfG1vdnx3ZWJtfDNncCkkL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGguY29tcGFyZSh2TmFtZSwgL1xcLihvZz98bXA0fHdlYm18bXA/Z3xtb3Z8M2dwKSQvaSkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhdWRpbzogZnVuY3Rpb24gKHZUeXBlLCB2TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRoLmNvbXBhcmUodlR5cGUsICdhdWRpby4qJykgJiYgKCRoLmNvbXBhcmUodk5hbWUsIC8ob2dnfG1wM3xtcD9nfHdhdikkL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGguY29tcGFyZSh2TmFtZSwgL1xcLihvZz98bXAzfG1wP2d8d2F2KSQvaSkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmbGFzaDogZnVuY3Rpb24gKHZUeXBlLCB2TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRoLmNvbXBhcmUodlR5cGUsICdhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCcsIHRydWUpIHx8ICRoLmNvbXBhcmUodk5hbWUsIC9cXC4oc3dmKSQvaSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBkZjogZnVuY3Rpb24gKHZUeXBlLCB2TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRoLmNvbXBhcmUodlR5cGUsICdhcHBsaWNhdGlvbi9wZGYnLCB0cnVlKSB8fCAkaC5jb21wYXJlKHZOYW1lLCAvXFwuKHBkZikkL2kpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvdGhlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25TZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93UmVtb3ZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzaG93VXBsb2FkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzaG93RG93bmxvYWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHNob3dab29tOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzaG93RHJhZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlSWNvbjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10cmFzaFwiPjwvaT4nLFxuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogJ2J0biBidG4ta3YgYnRuLWRlZmF1bHQgYnRuLW91dGxpbmUtc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRXJyb3JDbGFzczogJ2J0biBidG4ta3YgYnRuLWRhbmdlcicsXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVRpdGxlOiAnUmVtb3ZlIGZpbGUnLFxuICAgICAgICAgICAgICAgICAgICB1cGxvYWRJY29uOiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXVwbG9hZFwiPjwvaT4nLFxuICAgICAgICAgICAgICAgICAgICB1cGxvYWRDbGFzczogJ2J0biBidG4ta3YgYnRuLWRlZmF1bHQgYnRuLW91dGxpbmUtc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkVGl0bGU6ICdVcGxvYWQgZmlsZScsXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZFJldHJ5SWNvbjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZXBlYXRcIj48L2k+JyxcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkUmV0cnlUaXRsZTogJ1JldHJ5IHVwbG9hZCcsXG4gICAgICAgICAgICAgICAgICAgIGRvd25sb2FkSWNvbjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1kb3dubG9hZFwiPjwvaT4nLFxuICAgICAgICAgICAgICAgICAgICBkb3dubG9hZENsYXNzOiAnYnRuIGJ0bi1rdiBidG4tZGVmYXVsdCBidG4tb3V0bGluZS1zZWNvbmRhcnknLFxuICAgICAgICAgICAgICAgICAgICBkb3dubG9hZFRpdGxlOiAnRG93bmxvYWQgZmlsZScsXG4gICAgICAgICAgICAgICAgICAgIHpvb21JY29uOiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXpvb20taW5cIj48L2k+JyxcbiAgICAgICAgICAgICAgICAgICAgem9vbUNsYXNzOiAnYnRuIGJ0bi1rdiBidG4tZGVmYXVsdCBidG4tb3V0bGluZS1zZWNvbmRhcnknLFxuICAgICAgICAgICAgICAgICAgICB6b29tVGl0bGU6ICdWaWV3IERldGFpbHMnLFxuICAgICAgICAgICAgICAgICAgICBkcmFnSWNvbjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1tb3ZlXCI+PC9pPicsXG4gICAgICAgICAgICAgICAgICAgIGRyYWdDbGFzczogJ3RleHQtaW5mbycsXG4gICAgICAgICAgICAgICAgICAgIGRyYWdUaXRsZTogJ01vdmUgLyBSZWFycmFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICBkcmFnU2V0dGluZ3M6IHt9LFxuICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3JOZXc6ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcGx1cy1zaWduIHRleHQtd2FybmluZ1wiPjwvaT4nLFxuICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3JTdWNjZXNzOiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLW9rLXNpZ24gdGV4dC1zdWNjZXNzXCI+PC9pPicsXG4gICAgICAgICAgICAgICAgICAgIGluZGljYXRvckVycm9yOiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWV4Y2xhbWF0aW9uLXNpZ24gdGV4dC1kYW5nZXJcIj48L2k+JyxcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yTG9hZGluZzogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1ob3VyZ2xhc3MgdGV4dC1tdXRlZFwiPjwvaT4nLFxuICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3JOZXdUaXRsZTogJ05vdCB1cGxvYWRlZCB5ZXQnLFxuICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3JTdWNjZXNzVGl0bGU6ICdVcGxvYWRlZCcsXG4gICAgICAgICAgICAgICAgICAgIGluZGljYXRvckVycm9yVGl0bGU6ICdVcGxvYWQgRXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3JMb2FkaW5nVGl0bGU6ICdVcGxvYWRpbmcgLi4uJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkLmVhY2goc2VsZi5kZWZhdWx0cywgZnVuY3Rpb24gKGtleSwgc2V0dGluZykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdhbGxvd2VkUHJldmlld1R5cGVzJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5hbGxvd2VkUHJldmlld1R5cGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWxsb3dlZFByZXZpZXdUeXBlcyA9IHNldHRpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSAkLmV4dGVuZCh0cnVlLCB7fSwgc2V0dGluZywgc2VsZltrZXldKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZi5faW5pdFByZXZpZXdUZW1wbGF0ZXMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2luaXRQcmV2aWV3VGVtcGxhdGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIGNmZyA9IHNlbGYuZGVmYXVsdHMsIHRhZ3MgPSBzZWxmLnByZXZpZXdNYXJrdXBUYWdzLCB0YWdCZWYsIHRhZ0FmdCA9IHRhZ3MudGFnQWZ0ZXI7XG4gICAgICAgICAgICAkLmVhY2goY2ZnLnByZXZpZXdDb250ZW50VGVtcGxhdGVzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICgkaC5pc0VtcHR5KHNlbGYucHJldmlld1RlbXBsYXRlc1trZXldKSkge1xuICAgICAgICAgICAgICAgICAgICB0YWdCZWYgPSB0YWdzLnRhZ0JlZm9yZTI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdnZW5lcmljJyB8fCBrZXkgPT09ICdpbWFnZScgfHwga2V5ID09PSAnaHRtbCcgfHwga2V5ID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0JlZiA9IHRhZ3MudGFnQmVmb3JlMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxmLnByZXZpZXdUZW1wbGF0ZXNba2V5XSA9IHRhZ0JlZiArIHZhbHVlICsgdGFnQWZ0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfaW5pdFByZXZpZXdDYWNoZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgc2VsZi5wcmV2aWV3Q2FjaGUgPSB7XG4gICAgICAgICAgICAgICAgZGF0YToge30sXG4gICAgICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IHNlbGYuaW5pdGlhbFByZXZpZXc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50Lmxlbmd0aCA+IDAgJiYgISRoLmlzQXJyYXkoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnNwbGl0KHNlbGYuaW5pdGlhbFByZXZpZXdEZWxpbWl0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucHJldmlld0NhY2hlLmRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBzZWxmLmluaXRpYWxQcmV2aWV3Q29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnczogc2VsZi5pbml0aWFsUHJldmlld1RodW1iVGFnc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhc2VsZi5wcmV2aWV3Q2FjaGUuZGF0YSAmJiAhIXNlbGYucHJldmlld0NhY2hlLmRhdGEuY29udGVudCA/XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByZXZpZXdDYWNoZS5kYXRhLmNvbnRlbnQubGVuZ3RoIDogMDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKGksIGlzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZCA9ICdpbml0XycgKyBpLCBkYXRhID0gc2VsZi5wcmV2aWV3Q2FjaGUuZGF0YSwgY29uZmlnID0gZGF0YS5jb25maWdbaV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gZGF0YS5jb250ZW50W2ldLCBwcmV2aWV3SWQgPSBzZWxmLnByZXZpZXdJbml0SWQgKyAnLScgKyBpbmQsIG91dCwgJHRtcCwgY2F0LCBmdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmbmFtZSwgZnR5cGUsIGZyYW1lQ2xhc3MsIGFzRGF0YSA9ICRoLmlmU2V0KCdwcmV2aWV3QXNEYXRhJywgY29uZmlnLCBzZWxmLmluaXRpYWxQcmV2aWV3QXNEYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlVGVtcGxhdGUgPSBmdW5jdGlvbiAoY2F0LCBkYXQsIGZuLCBmdCwgaWQsIGZ0ciwgaW5kLCBmYywgdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZjID0gJyBmaWxlLXByZXZpZXctaW5pdGlhbCAnICsgJGguU09SVF9DU1MgKyAoZmMgPyAnICcgKyBmYyA6ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fZ2VuZXJhdGVQcmV2aWV3VGVtcGxhdGUoY2F0LCBkYXQsIGZuLCBmdCwgaWQsIGZhbHNlLCBudWxsLCBmYywgZnRyLCBpbmQsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZCA9IGlzRGlzYWJsZWQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBpc0Rpc2FibGVkO1xuICAgICAgICAgICAgICAgICAgICBjYXQgPSAkaC5pZlNldCgndHlwZScsIGNvbmZpZywgc2VsZi5pbml0aWFsUHJldmlld0ZpbGVUeXBlIHx8ICdnZW5lcmljJyk7XG4gICAgICAgICAgICAgICAgICAgIGZuYW1lID0gJGguaWZTZXQoJ2ZpbGVuYW1lJywgY29uZmlnLCAkaC5pZlNldCgnY2FwdGlvbicsIGNvbmZpZykpO1xuICAgICAgICAgICAgICAgICAgICBmdHlwZSA9ICRoLmlmU2V0KCdmaWxldHlwZScsIGNvbmZpZywgY2F0KTtcbiAgICAgICAgICAgICAgICAgICAgZnRyID0gc2VsZi5wcmV2aWV3Q2FjaGUuZm9vdGVyKGksIGlzRGlzYWJsZWQsIChjb25maWcgJiYgY29uZmlnLnNpemUgfHwgbnVsbCkpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUNsYXNzID0gJGguaWZTZXQoJ2ZyYW1lQ2xhc3MnLCBjb25maWcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXNEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgPSBwYXJzZVRlbXBsYXRlKGNhdCwgY29udGVudCwgZm5hbWUsIGZ0eXBlLCBwcmV2aWV3SWQsIGZ0ciwgaW5kLCBmcmFtZUNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dCA9IHBhcnNlVGVtcGxhdGUoJ2dlbmVyaWMnLCBjb250ZW50LCBmbmFtZSwgZnR5cGUsIHByZXZpZXdJZCwgZnRyLCBpbmQsIGZyYW1lQ2xhc3MsIGNhdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0VG9rZW5zKHsnY29udGVudCc6IGRhdGEuY29udGVudFtpXX0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnRhZ3MubGVuZ3RoICYmIGRhdGEudGFnc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ID0gJGgucmVwbGFjZVRhZ3Mob3V0LCBkYXRhLnRhZ3NbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKiBAbmFtZXNwYWNlIGNvbmZpZy5mcmFtZUF0dHIgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkaC5pc0VtcHR5KGNvbmZpZykgJiYgISRoLmlzRW1wdHkoY29uZmlnLmZyYW1lQXR0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0bXAgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5odG1sKG91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdG1wLmZpbmQoJy5maWxlLXByZXZpZXctaW5pdGlhbCcpLmF0dHIoY29uZmlnLmZyYW1lQXR0cik7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgPSAkdG1wLmh0bWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0bXAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gKGNvbnRlbnQsIGNvbmZpZywgdGFncywgYXBwZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gc2VsZi5wcmV2aWV3Q2FjaGUuZGF0YSwgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmICghJGguaXNBcnJheShjb250ZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc3BsaXQoc2VsZi5pbml0aWFsUHJldmlld0RlbGltaXRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFwcGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBkYXRhLmNvbnRlbnQucHVzaChjb250ZW50KSAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbmZpZ1tpbmRleF0gPSBjb25maWc7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRhZ3NbaW5kZXhdID0gdGFncztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gY29udGVudC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb250ZW50ID0gY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29uZmlnID0gY29uZmlnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50YWdzID0gdGFncztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxmLnByZXZpZXdDYWNoZS5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoY29udGVudCwgY29uZmlnLCB0YWdzLCBhcHBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBzZWxmLnByZXZpZXdDYWNoZS5kYXRhLCBpLCBjaGs7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29udGVudCB8fCAhY29udGVudC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoISRoLmlzQXJyYXkoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnNwbGl0KHNlbGYuaW5pdGlhbFByZXZpZXdEZWxpbWl0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoayA9IGNvbnRlbnQuZmlsdGVyKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiAhPT0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hrLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmNvbnRlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb250ZW50ID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuY29uZmlnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29uZmlnID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudGFncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRhZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYXBwZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29udGVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50W2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGVudC5wdXNoKGNvbnRlbnRbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29uZmlnLnB1c2goY29uZmlnW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWdzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudGFncy5wdXNoKHRhZ3NbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudGFncyA9IHRhZ3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wcmV2aWV3Q2FjaGUuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1bnNldDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGsgPSBzZWxmLnByZXZpZXdDYWNoZS5jb3VudCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGsgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJldmlld0NhY2hlLmRhdGEuY29udGVudCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcmV2aWV3Q2FjaGUuZGF0YS5jb25maWcgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJldmlld0NhY2hlLmRhdGEudGFncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0aWFsUHJldmlldyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0aWFsUHJldmlld0NvbmZpZyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0aWFsUHJldmlld1RodW1iVGFncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucHJldmlld0NhY2hlLmRhdGEuY29udGVudC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnByZXZpZXdDYWNoZS5kYXRhLmNvbmZpZy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnByZXZpZXdDYWNoZS5kYXRhLnRhZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG91dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbCA9ICcnLCBjYXB0aW9uLCBsZW4gPSBzZWxmLnByZXZpZXdDYWNoZS5jb3VudCgpLCBpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2NvbnRlbnQ6ICcnLCBjYXB0aW9uOiAnJ307XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9IHNlbGYucHJldmlld0NhY2hlLmdldChpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXB0aW9uID0gc2VsZi5fZ2V0TXNnU2VsZWN0ZWQobGVuKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtjb250ZW50OiBodG1sLCBjYXB0aW9uOiBjYXB0aW9ufTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZvb3RlcjogZnVuY3Rpb24gKGksIGlzRGlzYWJsZWQsIHNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBzZWxmLnByZXZpZXdDYWNoZS5kYXRhIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoJGguaXNFbXB0eShkYXRhLmNvbnRlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCRoLmlzRW1wdHkoZGF0YS5jb25maWcpIHx8ICRoLmlzRW1wdHkoZGF0YS5jb25maWdbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbmZpZ1tpXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQgPSBpc0Rpc2FibGVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogaXNEaXNhYmxlZDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbmZpZyA9IGRhdGEuY29uZmlnW2ldLCBjYXB0aW9uID0gJGguaWZTZXQoJ2NhcHRpb24nLCBjb25maWcpLCBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSAkaC5pZlNldCgnd2lkdGgnLCBjb25maWcsICdhdXRvJyksIHVybCA9ICRoLmlmU2V0KCd1cmwnLCBjb25maWcsIGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9ICRoLmlmU2V0KCdrZXknLCBjb25maWcsIG51bGwpLCBmcyA9IHNlbGYuZmlsZUFjdGlvblNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFByZXZpZXdTaG93RGVsID0gc2VsZi5pbml0aWFsUHJldmlld1Nob3dEZWxldGUgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkVXJsID0gY29uZmlnLmRvd25sb2FkVXJsIHx8IHNlbGYuaW5pdGlhbFByZXZpZXdEb3dubG9hZFVybCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRGaWwgPSBjb25maWcuZmlsZW5hbWUgfHwgY29uZmlnLmNhcHRpb24gfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0UHJldmlld1Nob3dEd2wgPSAhIShkVXJsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNEZWwgPSAkaC5pZlNldCgnc2hvd0RlbGV0ZScsIGNvbmZpZywgJGguaWZTZXQoJ3Nob3dEZWxldGUnLCBmcywgaW5pdFByZXZpZXdTaG93RGVsKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzRHdsID0gJGguaWZTZXQoJ3Nob3dEb3dubG9hZCcsIGNvbmZpZywgJGguaWZTZXQoJ3Nob3dEb3dubG9hZCcsIGZzLCBpbml0UHJldmlld1Nob3dEd2wpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNabSA9ICRoLmlmU2V0KCdzaG93Wm9vbScsIGNvbmZpZywgJGguaWZTZXQoJ3Nob3dab29tJywgZnMsIHRydWUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNEcmcgPSAkaC5pZlNldCgnc2hvd0RyYWcnLCBjb25maWcsICRoLmlmU2V0KCdzaG93RHJhZycsIGZzLCB0cnVlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXMgPSAodXJsID09PSBmYWxzZSkgJiYgaXNEaXNhYmxlZDtcbiAgICAgICAgICAgICAgICAgICAgc0R3bCA9IHNEd2wgJiYgY29uZmlnLmRvd25sb2FkVXJsICE9PSBmYWxzZSAmJiAhIWRVcmw7XG4gICAgICAgICAgICAgICAgICAgIGEgPSBzZWxmLl9yZW5kZXJGaWxlQWN0aW9ucyhmYWxzZSwgc0R3bCwgc0RlbCwgc1ptLCBzRHJnLCBkaXMsIHVybCwga2V5LCB0cnVlLCBkVXJsLCBkRmlsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2dldExheW91dFRlbXBsYXRlKCdmb290ZXInKS5zZXRUb2tlbnMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Byb2dyZXNzJzogc2VsZi5fcmVuZGVyVGh1bWJQcm9ncmVzcygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbnMnOiBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcHRpb24nOiBjYXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemUnOiBzZWxmLl9nZXRTaXplKHNpemUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAnaW5kaWNhdG9yJzogJydcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNlbGYucHJldmlld0NhY2hlLmluaXQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2hhbmRsZXI6IGZ1bmN0aW9uICgkZWwsIGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBucyA9IHNlbGYubmFtZXNwYWNlLCBldiA9IGV2ZW50LnNwbGl0KCcgJykuam9pbihucyArICcgJykgKyBucztcbiAgICAgICAgICAgIGlmICghJGVsIHx8ICEkZWwubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJGVsLm9mZihldikub24oZXYsIGNhbGxiYWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2xvZzogZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBpZCA9IHNlbGYuJGVsZW1lbnQuYXR0cignaWQnKTtcbiAgICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgICAgIG1zZyA9ICdcIicgKyBpZCArICdcIjogJyArIG1zZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93LmNvbnNvbGUubG9nICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKG1zZyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hbGVydChtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfdmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgc3RhdHVzID0gc2VsZi4kZWxlbWVudC5hdHRyKCd0eXBlJykgPT09ICdmaWxlJztcbiAgICAgICAgICAgIGlmICghc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fbG9nKCdUaGUgaW5wdXQgXCJ0eXBlXCIgbXVzdCBiZSBzZXQgdG8gXCJmaWxlXCIgZm9yIGluaXRpYWxpemluZyB0aGUgXCJib290c3RyYXAtZmlsZWlucHV0XCIgcGx1Z2luLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICAgICAgfSxcbiAgICAgICAgX2Vycm9yc0V4aXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRlcnIsICRlcnJMaXN0ID0gc2VsZi4kZXJyb3JDb250YWluZXIuZmluZCgnbGknKTtcbiAgICAgICAgICAgIGlmICgkZXJyTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRlcnIgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5odG1sKHNlbGYuJGVycm9yQ29udGFpbmVyLmh0bWwoKSk7XG4gICAgICAgICAgICAkZXJyLmZpbmQoJy5rdi1lcnJvci1jbG9zZScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgJGVyci5maW5kKCd1bCcpLnJlbW92ZSgpO1xuICAgICAgICAgICAgcmV0dXJuICEhJC50cmltKCRlcnIudGV4dCgpKS5sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIF9lcnJvckhhbmRsZXI6IGZ1bmN0aW9uIChldnQsIGNhcHRpb24pIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgZXJyID0gZXZ0LnRhcmdldC5lcnJvciwgc2hvd0Vycm9yID0gZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgICAgICAgIHNlbGYuX3Nob3dFcnJvcihtc2cucmVwbGFjZSgne25hbWV9JywgY2FwdGlvbikpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKiBAbmFtZXNwYWNlIGVyci5OT1RfRk9VTkRfRVJSICovXG4gICAgICAgICAgICAvKiogQG5hbWVzcGFjZSBlcnIuU0VDVVJJVFlfRVJSICovXG4gICAgICAgICAgICAvKiogQG5hbWVzcGFjZSBlcnIuTk9UX1JFQURBQkxFX0VSUiAqL1xuICAgICAgICAgICAgaWYgKGVyci5jb2RlID09PSBlcnIuTk9UX0ZPVU5EX0VSUikge1xuICAgICAgICAgICAgICAgIHNob3dFcnJvcihzZWxmLm1zZ0ZpbGVOb3RGb3VuZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVyci5jb2RlID09PSBlcnIuU0VDVVJJVFlfRVJSKSB7XG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yKHNlbGYubXNnRmlsZVNlY3VyZWQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnIuY29kZSA9PT0gZXJyLk5PVF9SRUFEQUJMRV9FUlIpIHtcbiAgICAgICAgICAgICAgICBzaG93RXJyb3Ioc2VsZi5tc2dGaWxlTm90UmVhZGFibGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnIuY29kZSA9PT0gZXJyLkFCT1JUX0VSUikge1xuICAgICAgICAgICAgICAgIHNob3dFcnJvcihzZWxmLm1zZ0ZpbGVQcmV2aWV3QWJvcnRlZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNob3dFcnJvcihzZWxmLm1zZ0ZpbGVQcmV2aWV3RXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfYWRkRXJyb3I6IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgJGVycm9yID0gc2VsZi4kZXJyb3JDb250YWluZXI7XG4gICAgICAgICAgICBpZiAobXNnICYmICRlcnJvci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkZXJyb3IuaHRtbChzZWxmLmVycm9yQ2xvc2VCdXR0b24gKyBtc2cpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2hhbmRsZXIoJGVycm9yLmZpbmQoJy5rdi1lcnJvci1jbG9zZScpLCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5zaG93UHJldmlldyAmJiAhc2VsZi5nZXRGcmFtZXMoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAkZXJyb3IuZmFkZU91dCgnc2xvdycpOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3NldFZhbGlkYXRpb25FcnJvcjogZnVuY3Rpb24gKGNzcykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgY3NzID0gKGNzcyA/IGNzcyArICcgJyA6ICcnKSArICdoYXMtZXJyb3InO1xuICAgICAgICAgICAgc2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKGNzcykuYWRkQ2xhc3MoJ2hhcy1lcnJvcicpO1xuICAgICAgICAgICAgJGguYWRkQ3NzKHNlbGYuJGNhcHRpb25Db250YWluZXIsICdpcy1pbnZhbGlkJyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9yZXNldEVycm9yczogZnVuY3Rpb24gKGZhZGUpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgJGVycm9yID0gc2VsZi4kZXJyb3JDb250YWluZXI7XG4gICAgICAgICAgICBzZWxmLmlzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGYuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnaGFzLWVycm9yJyk7XG4gICAgICAgICAgICBzZWxmLiRjYXB0aW9uQ29udGFpbmVyLnJlbW92ZUNsYXNzKCdpcy1pbnZhbGlkJyk7XG4gICAgICAgICAgICAkZXJyb3IuaHRtbCgnJyk7XG4gICAgICAgICAgICBpZiAoZmFkZSkge1xuICAgICAgICAgICAgICAgICRlcnJvci5mYWRlT3V0KCdzbG93Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRlcnJvci5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9zaG93Rm9sZGVyRXJyb3I6IGZ1bmN0aW9uIChmb2xkZXJzKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRlcnJvciA9IHNlbGYuJGVycm9yQ29udGFpbmVyLCBtc2c7XG4gICAgICAgICAgICBpZiAoIWZvbGRlcnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtc2cgPSBzZWxmLm1zZ0ZvbGRlcnNOb3RBbGxvd2VkLnJlcGxhY2UoJ3tufScsIGZvbGRlcnMpO1xuICAgICAgICAgICAgc2VsZi5fYWRkRXJyb3IobXNnKTtcbiAgICAgICAgICAgIHNlbGYuX3NldFZhbGlkYXRpb25FcnJvcigpO1xuICAgICAgICAgICAgJGVycm9yLmZhZGVJbig4MDApO1xuICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGVmb2xkZXJlcnJvcicsIFtmb2xkZXJzLCBtc2ddKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3Nob3dVcGxvYWRFcnJvcjogZnVuY3Rpb24gKG1zZywgcGFyYW1zLCBldmVudCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCAkZXJyb3IgPSBzZWxmLiRlcnJvckNvbnRhaW5lciwgZXYgPSBldmVudCB8fCAnZmlsZXVwbG9hZGVycm9yJywgZSA9IHBhcmFtcyAmJiBwYXJhbXMuaWQgP1xuICAgICAgICAgICAgICAgICc8bGkgZGF0YS1maWxlLWlkPVwiJyArIHBhcmFtcy5pZCArICdcIj4nICsgbXNnICsgJzwvbGk+JyA6ICc8bGk+JyArIG1zZyArICc8L2xpPic7XG4gICAgICAgICAgICBpZiAoJGVycm9yLmZpbmQoJ3VsJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fYWRkRXJyb3IoJzx1bD4nICsgZSArICc8L3VsPicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkZXJyb3IuZmluZCgndWwnKS5hcHBlbmQoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkZXJyb3IuZmFkZUluKDgwMCk7XG4gICAgICAgICAgICBzZWxmLl9yYWlzZShldiwgW3BhcmFtcywgbXNnXSk7XG4gICAgICAgICAgICBzZWxmLl9zZXRWYWxpZGF0aW9uRXJyb3IoJ2ZpbGUtaW5wdXQtbmV3Jyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgX3Nob3dFcnJvcjogZnVuY3Rpb24gKG1zZywgcGFyYW1zLCBldmVudCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCAkZXJyb3IgPSBzZWxmLiRlcnJvckNvbnRhaW5lciwgZXYgPSBldmVudCB8fCAnZmlsZWVycm9yJztcbiAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICAgICAgICAgIHBhcmFtcy5yZWFkZXIgPSBzZWxmLnJlYWRlcjtcbiAgICAgICAgICAgIHNlbGYuX2FkZEVycm9yKG1zZyk7XG4gICAgICAgICAgICAkZXJyb3IuZmFkZUluKDgwMCk7XG4gICAgICAgICAgICBzZWxmLl9yYWlzZShldiwgW3BhcmFtcywgbXNnXSk7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXNBamF4VXBsb2FkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fY2xlYXJGaWxlSW5wdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX3NldFZhbGlkYXRpb25FcnJvcignZmlsZS1pbnB1dC1uZXcnKTtcbiAgICAgICAgICAgIHNlbGYuJGJ0blVwbG9hZC5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIF9ub0ZpbGVzRXJyb3I6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgbGFiZWwgPSBzZWxmLm1pbkZpbGVDb3VudCA+IDEgPyBzZWxmLmZpbGVQbHVyYWwgOiBzZWxmLmZpbGVTaW5nbGUsXG4gICAgICAgICAgICAgICAgbXNnID0gc2VsZi5tc2dGaWxlc1Rvb0xlc3MucmVwbGFjZSgne259Jywgc2VsZi5taW5GaWxlQ291bnQpLnJlcGxhY2UoJ3tmaWxlc30nLCBsYWJlbCksXG4gICAgICAgICAgICAgICAgJGVycm9yID0gc2VsZi4kZXJyb3JDb250YWluZXI7XG4gICAgICAgICAgICBzZWxmLl9hZGRFcnJvcihtc2cpO1xuICAgICAgICAgICAgc2VsZi5pc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIHNlbGYuX3VwZGF0ZUZpbGVEZXRhaWxzKDApO1xuICAgICAgICAgICAgJGVycm9yLmZhZGVJbig4MDApO1xuICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGVlcnJvcicsIFtwYXJhbXMsIG1zZ10pO1xuICAgICAgICAgICAgc2VsZi5fY2xlYXJGaWxlSW5wdXQoKTtcbiAgICAgICAgICAgIHNlbGYuX3NldFZhbGlkYXRpb25FcnJvcigpO1xuICAgICAgICB9LFxuICAgICAgICBfcGFyc2VFcnJvcjogZnVuY3Rpb24gKG9wZXJhdGlvbiwganFYSFIsIGVycm9yVGhyb3duLCBmaWxlTmFtZSkge1xuICAgICAgICAgICAgLyoqIEBuYW1lc3BhY2UganFYSFIucmVzcG9uc2VKU09OICovXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIGVyck1zZyA9ICQudHJpbShlcnJvclRocm93biArICcnKSwgdGV4dFByZSxcbiAgICAgICAgICAgICAgICB0ZXh0ID0ganFYSFIucmVzcG9uc2VKU09OICE9PSB1bmRlZmluZWQgJiYganFYSFIucmVzcG9uc2VKU09OLmVycm9yICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgICAgICAgICBqcVhIUi5yZXNwb25zZUpTT04uZXJyb3IgOiBqcVhIUi5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICBpZiAoc2VsZi5jYW5jZWxsaW5nICYmIHNlbGYubXNnVXBsb2FkQWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIGVyck1zZyA9IHNlbGYubXNnVXBsb2FkQWJvcnRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLnNob3dBamF4RXJyb3JEZXRhaWxzICYmIHRleHQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gJC50cmltKHRleHQucmVwbGFjZSgvXFxuXFxzKlxcbi9nLCAnXFxuJykpO1xuICAgICAgICAgICAgICAgIHRleHRQcmUgPSB0ZXh0Lmxlbmd0aCA/ICc8cHJlPicgKyB0ZXh0ICsgJzwvcHJlPicgOiAnJztcbiAgICAgICAgICAgICAgICBlcnJNc2cgKz0gZXJyTXNnID8gdGV4dFByZSA6IHRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWVyck1zZykge1xuICAgICAgICAgICAgICAgIGVyck1zZyA9IHNlbGYubXNnQWpheEVycm9yLnJlcGxhY2UoJ3tvcGVyYXRpb259Jywgb3BlcmF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuY2FuY2VsbGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZpbGVOYW1lID8gJzxiPicgKyBmaWxlTmFtZSArICc6IDwvYj4nICsgZXJyTXNnIDogZXJyTXNnO1xuICAgICAgICB9LFxuICAgICAgICBfcGFyc2VGaWxlVHlwZTogZnVuY3Rpb24gKHR5cGUsIG5hbWUpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgaXNWYWxpZCwgdlR5cGUsIGNhdCwgaSwgdHlwZXMgPSBzZWxmLmFsbG93ZWRQcmV2aWV3VHlwZXMgfHwgW107XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3RleHQtcGxhaW4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0ZXh0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNhdCA9IHR5cGVzW2ldO1xuICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBzZWxmLmZpbGVUeXBlU2V0dGluZ3NbY2F0XTtcbiAgICAgICAgICAgICAgICB2VHlwZSA9IGlzVmFsaWQodHlwZSwgbmFtZSkgPyBjYXQgOiAnJztcbiAgICAgICAgICAgICAgICBpZiAoISRoLmlzRW1wdHkodlR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2VHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ290aGVyJztcbiAgICAgICAgfSxcbiAgICAgICAgX2dldFByZXZpZXdJY29uOiBmdW5jdGlvbiAoZm5hbWUpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgZXh0LCBvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGZuYW1lICYmIGZuYW1lLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgZXh0ID0gZm5hbWUuc3BsaXQoJy4nKS5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5wcmV2aWV3RmlsZUljb25TZXR0aW5ncykge1xuICAgICAgICAgICAgICAgICAgICBvdXQgPSBzZWxmLnByZXZpZXdGaWxlSWNvblNldHRpbmdzW2V4dF0gfHwgc2VsZi5wcmV2aWV3RmlsZUljb25TZXR0aW5nc1tleHQudG9Mb3dlckNhc2UoKV0gfHwgbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYucHJldmlld0ZpbGVFeHRTZXR0aW5ncykge1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2goc2VsZi5wcmV2aWV3RmlsZUV4dFNldHRpbmdzLCBmdW5jdGlvbiAoa2V5LCBmdW5jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5wcmV2aWV3RmlsZUljb25TZXR0aW5nc1trZXldICYmIGZ1bmMoZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dCA9IHNlbGYucHJldmlld0ZpbGVJY29uU2V0dGluZ3Nba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vaW5zcGVjdGlvbiBVbm5lY2Vzc2FyeVJldHVyblN0YXRlbWVudEpTXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9LFxuICAgICAgICBfcGFyc2VGaWxlUHJldmlld0ljb246IGZ1bmN0aW9uIChjb250ZW50LCBmbmFtZSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBpY24gPSBzZWxmLl9nZXRQcmV2aWV3SWNvbihmbmFtZSkgfHwgc2VsZi5wcmV2aWV3RmlsZUljb24sIG91dCA9IGNvbnRlbnQ7XG4gICAgICAgICAgICBpZiAob3V0LmluZGV4T2YoJ3twcmV2aWV3RmlsZUljb259JykgPiAtMSkge1xuICAgICAgICAgICAgICAgIG91dCA9IG91dC5zZXRUb2tlbnMoeydwcmV2aWV3RmlsZUljb25DbGFzcyc6IHNlbGYucHJldmlld0ZpbGVJY29uQ2xhc3MsICdwcmV2aWV3RmlsZUljb24nOiBpY259KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIF9yYWlzZTogZnVuY3Rpb24gKGV2ZW50LCBwYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgZSA9ICQuRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgaWYgKHBhcmFtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kZWxlbWVudC50cmlnZ2VyKGUsIHBhcmFtcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuJGVsZW1lbnQudHJpZ2dlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGUucmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgdGhlc2UgZXZlbnRzXG4gICAgICAgICAgICAgICAgY2FzZSAnZmlsZWJhdGNodXBsb2FkY29tcGxldGUnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ZpbGViYXRjaHVwbG9hZHN1Y2Nlc3MnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ZpbGV1cGxvYWRlZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZmlsZWNsZWFyJzpcbiAgICAgICAgICAgICAgICBjYXNlICdmaWxlY2xlYXJlZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZmlsZXJlc2V0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdmaWxlZXJyb3InOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ZpbGVmb2xkZXJlcnJvcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnZmlsZXVwbG9hZGVycm9yJzpcbiAgICAgICAgICAgICAgICBjYXNlICdmaWxlYmF0Y2h1cGxvYWRlcnJvcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnZmlsZWRlbGV0ZWVycm9yJzpcbiAgICAgICAgICAgICAgICBjYXNlICdmaWxlY3VzdG9tZXJyb3InOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2ZpbGVzdWNjZXNzcmVtb3ZlJzpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLy8gcmVjZWl2ZSBkYXRhIHJlc3BvbnNlIHZpYSBgZmlsZWN1c3RvbWVycm9yYCBldmVudGBcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuYWpheEFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWpheEFib3J0ZWQgPSBlLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBfbGlzdGVuRnVsbFNjcmVlbjogZnVuY3Rpb24gKGlzRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCAkbW9kYWwgPSBzZWxmLiRtb2RhbCwgJGJ0bkZ1bGwsICRidG5Cb3JkO1xuICAgICAgICAgICAgaWYgKCEkbW9kYWwgfHwgISRtb2RhbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkYnRuRnVsbCA9ICRtb2RhbCAmJiAkbW9kYWwuZmluZCgnLmJ0bi1mdWxsc2NyZWVuJyk7XG4gICAgICAgICAgICAkYnRuQm9yZCA9ICRtb2RhbCAmJiAkbW9kYWwuZmluZCgnLmJ0bi1ib3JkZXJsZXNzJyk7XG4gICAgICAgICAgICBpZiAoISRidG5GdWxsLmxlbmd0aCB8fCAhJGJ0bkJvcmQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJGJ0bkZ1bGwucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpLmF0dHIoJ2FyaWEtcHJlc3NlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgJGJ0bkJvcmQucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpLmF0dHIoJ2FyaWEtcHJlc3NlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgaWYgKGlzRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICRidG5GdWxsLmFkZENsYXNzKCdhY3RpdmUnKS5hdHRyKCdhcmlhLXByZXNzZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkYnRuQm9yZC5hZGRDbGFzcygnYWN0aXZlJykuYXR0cignYXJpYS1wcmVzc2VkJywgJ3RydWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkbW9kYWwuaGFzQ2xhc3MoJ2ZpbGUtem9vbS1mdWxsc2NyZWVuJykpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9tYXhpbWl6ZVpvb21EaWFsb2coKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9tYXhpbWl6ZVpvb21EaWFsb2coKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkYnRuQm9yZC5yZW1vdmVDbGFzcygnYWN0aXZlJykuYXR0cignYXJpYS1wcmVzc2VkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfbGlzdGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRlbCA9IHNlbGYuJGVsZW1lbnQsICRmb3JtID0gc2VsZi4kZm9ybSwgJGNvbnQgPSBzZWxmLiRjb250YWluZXIsIGZ1bGxTY3JlZW5FdmVudHM7XG4gICAgICAgICAgICBzZWxmLl9oYW5kbGVyKCRlbCwgJ2NoYW5nZScsICQucHJveHkoc2VsZi5fY2hhbmdlLCBzZWxmKSk7XG4gICAgICAgICAgICBpZiAoc2VsZi5zaG93QnJvd3NlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5faGFuZGxlcihzZWxmLiRidG5GaWxlLCAnY2xpY2snLCAkLnByb3h5KHNlbGYuX2Jyb3dzZSwgc2VsZikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5faGFuZGxlcigkY29udC5maW5kKCcuZmlsZWlucHV0LXJlbW92ZTpub3QoW2Rpc2FibGVkXSknKSwgJ2NsaWNrJywgJC5wcm94eShzZWxmLmNsZWFyLCBzZWxmKSk7XG4gICAgICAgICAgICBzZWxmLl9oYW5kbGVyKCRjb250LmZpbmQoJy5maWxlaW5wdXQtY2FuY2VsJyksICdjbGljaycsICQucHJveHkoc2VsZi5jYW5jZWwsIHNlbGYpKTtcbiAgICAgICAgICAgIHNlbGYuX2luaXREcmFnRHJvcCgpO1xuICAgICAgICAgICAgc2VsZi5faGFuZGxlcigkZm9ybSwgJ3Jlc2V0JywgJC5wcm94eShzZWxmLmNsZWFyLCBzZWxmKSk7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXNBamF4VXBsb2FkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5faGFuZGxlcigkZm9ybSwgJ3N1Ym1pdCcsICQucHJveHkoc2VsZi5fc3VibWl0Rm9ybSwgc2VsZikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5faGFuZGxlcihzZWxmLiRjb250YWluZXIuZmluZCgnLmZpbGVpbnB1dC11cGxvYWQnKSwgJ2NsaWNrJywgJC5wcm94eShzZWxmLl91cGxvYWRDbGljaywgc2VsZikpO1xuICAgICAgICAgICAgc2VsZi5faGFuZGxlcigkKHdpbmRvdyksICdyZXNpemUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fbGlzdGVuRnVsbFNjcmVlbihzY3JlZW4ud2lkdGggPT09IHdpbmRvdy5pbm5lcldpZHRoICYmIHNjcmVlbi5oZWlnaHQgPT09IHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZ1bGxTY3JlZW5FdmVudHMgPSAnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZSBtb3pmdWxsc2NyZWVuY2hhbmdlIGZ1bGxzY3JlZW5jaGFuZ2UgTVNGdWxsc2NyZWVuQ2hhbmdlJztcbiAgICAgICAgICAgIHNlbGYuX2hhbmRsZXIoJChkb2N1bWVudCksIGZ1bGxTY3JlZW5FdmVudHMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9saXN0ZW5GdWxsU2NyZWVuKCRoLmNoZWNrRnVsbFNjcmVlbigpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZi5fYXV0b0ZpdENvbnRlbnQoKTtcbiAgICAgICAgICAgIHNlbGYuX2luaXRDbGlja2FibGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2F1dG9GaXRDb250ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggfHwgZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICBzZWxmID0gdGhpcywgY29uZmlnID0gd2lkdGggPCA0MDAgPyAoc2VsZi5wcmV2aWV3U2V0dGluZ3NTbWFsbCB8fCBzZWxmLmRlZmF1bHRzLnByZXZpZXdTZXR0aW5nc1NtYWxsKSA6XG4gICAgICAgICAgICAgICAgKHNlbGYucHJldmlld1NldHRpbmdzIHx8IHNlbGYuZGVmYXVsdHMucHJldmlld1NldHRpbmdzKSwgc2VsO1xuICAgICAgICAgICAgJC5lYWNoKGNvbmZpZywgZnVuY3Rpb24gKGNhdCwgc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICBzZWwgPSAnLmZpbGUtcHJldmlldy1mcmFtZSAuZmlsZS1wcmV2aWV3LScgKyBjYXQ7XG4gICAgICAgICAgICAgICAgc2VsZi4kcHJldmlldy5maW5kKHNlbCArICcua3YtcHJldmlldy1kYXRhLCcgKyBzZWwgKyAnIC5rdi1wcmV2aWV3LWRhdGEnKS5jc3Moc2V0dGluZ3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pbml0Q2xpY2thYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICR6b25lO1xuICAgICAgICAgICAgaWYgKCFzZWxmLmlzQ2xpY2thYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHpvbmUgPSBzZWxmLmlzQWpheFVwbG9hZCA/IHNlbGYuJGRyb3Bab25lIDogc2VsZi4kcHJldmlldy5maW5kKCcuZmlsZS1kZWZhdWx0LXByZXZpZXcnKTtcbiAgICAgICAgICAgICRoLmFkZENzcygkem9uZSwgJ2NsaWNrYWJsZScpO1xuICAgICAgICAgICAgJHpvbmUuYXR0cigndGFiaW5kZXgnLCAtMSk7XG4gICAgICAgICAgICBzZWxmLl9oYW5kbGVyKCR6b25lLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciAkdGFyID0gJChlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgaWYgKCEkem9uZS5maW5kKCcua3YtZmlsZWlucHV0LWVycm9yOnZpc2libGUnKS5sZW5ndGggJiYgXG4gICAgICAgICAgICAgICAgICAgICghJHRhci5wYXJlbnRzKCcuZmlsZS1wcmV2aWV3LXRodW1ibmFpbHMnKS5sZW5ndGggfHwgJHRhci5wYXJlbnRzKCcuZmlsZS1kZWZhdWx0LXByZXZpZXcnKS5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuJGVsZW1lbnQudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgICAgICAgICAgJHpvbmUuYmx1cigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfaW5pdERyYWdEcm9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICR6b25lID0gc2VsZi4kZHJvcFpvbmU7XG4gICAgICAgICAgICBpZiAoc2VsZi5pc0FqYXhVcGxvYWQgJiYgc2VsZi5kcm9wWm9uZUVuYWJsZWQgJiYgc2VsZi5zaG93UHJldmlldykge1xuICAgICAgICAgICAgICAgIHNlbGYuX2hhbmRsZXIoJHpvbmUsICdkcmFnZW50ZXIgZHJhZ292ZXInLCAkLnByb3h5KHNlbGYuX3pvbmVEcmFnRW50ZXIsIHNlbGYpKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9oYW5kbGVyKCR6b25lLCAnZHJhZ2xlYXZlJywgJC5wcm94eShzZWxmLl96b25lRHJhZ0xlYXZlLCBzZWxmKSk7XG4gICAgICAgICAgICAgICAgc2VsZi5faGFuZGxlcigkem9uZSwgJ2Ryb3AnLCAkLnByb3h5KHNlbGYuX3pvbmVEcm9wLCBzZWxmKSk7XG4gICAgICAgICAgICAgICAgc2VsZi5faGFuZGxlcigkKGRvY3VtZW50KSwgJ2RyYWdlbnRlciBkcmFnb3ZlciBkcm9wJywgc2VsZi5fem9uZURyYWdEcm9wSW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF96b25lRHJhZ0Ryb3BJbml0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3pvbmVEcmFnRW50ZXI6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIGhhc0ZpbGVzID0gJC5pbkFycmF5KCdGaWxlcycsIGUub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIudHlwZXMpID4gLTE7XG4gICAgICAgICAgICBzZWxmLl96b25lRHJhZ0Ryb3BJbml0KGUpO1xuICAgICAgICAgICAgaWYgKHNlbGYuaXNEaXNhYmxlZCB8fCAhaGFzRmlsZXMpIHtcbiAgICAgICAgICAgICAgICBlLm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgZS5vcmlnaW5hbEV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRoLmFkZENzcyhzZWxmLiRkcm9wWm9uZSwgJ2ZpbGUtaGlnaGxpZ2h0ZWQnKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3pvbmVEcmFnTGVhdmU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBzZWxmLl96b25lRHJhZ0Ryb3BJbml0KGUpO1xuICAgICAgICAgICAgaWYgKHNlbGYuaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuJGRyb3Bab25lLnJlbW92ZUNsYXNzKCdmaWxlLWhpZ2hsaWdodGVkJyk7XG4gICAgICAgIH0sXG4gICAgICAgIF96b25lRHJvcDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8qKiBAbmFtZXNwYWNlIGUub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIgKi9cbiAgICAgICAgICAgIGlmIChzZWxmLmlzRGlzYWJsZWQgfHwgJGguaXNFbXB0eShlLm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyLmZpbGVzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX2NoYW5nZShlLCAnZHJhZ2Ryb3AnKTtcbiAgICAgICAgICAgIHNlbGYuJGRyb3Bab25lLnJlbW92ZUNsYXNzKCdmaWxlLWhpZ2hsaWdodGVkJyk7XG4gICAgICAgIH0sXG4gICAgICAgIF91cGxvYWRDbGljazogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgJGJ0biA9IHNlbGYuJGNvbnRhaW5lci5maW5kKCcuZmlsZWlucHV0LXVwbG9hZCcpLCAkZm9ybSxcbiAgICAgICAgICAgICAgICBpc0VuYWJsZWQgPSAhJGJ0bi5oYXNDbGFzcygnZGlzYWJsZWQnKSAmJiAkaC5pc0VtcHR5KCRidG4uYXR0cignZGlzYWJsZWQnKSk7XG4gICAgICAgICAgICBpZiAoZSAmJiBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzZWxmLmlzQWpheFVwbG9hZCkge1xuICAgICAgICAgICAgICAgIGlmIChpc0VuYWJsZWQgJiYgJGJ0bi5hdHRyKCd0eXBlJykgIT09ICdzdWJtaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICRmb3JtID0gJGJ0bi5jbG9zZXN0KCdmb3JtJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRvd25ncmFkZSB0byBub3JtYWwgZm9ybSBzdWJtaXQgaWYgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRmb3JtLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGZvcm0udHJpZ2dlcignc3VibWl0Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoaXNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi51cGxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3N1Ym1pdEZvcm06IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9pc0ZpbGVTZWxlY3Rpb25WYWxpZCgpICYmICFzZWxmLl9hYm9ydCh7fSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9jbGVhclByZXZpZXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgJHAgPSBzZWxmLiRwcmV2aWV3LFxuICAgICAgICAgICAgICAgICR0aHVtYnMgPSBzZWxmLnNob3dVcGxvYWRlZFRodW1icyA/IHNlbGYuZ2V0RnJhbWVzKCc6bm90KC5maWxlLXByZXZpZXctc3VjY2VzcyknKSA6IHNlbGYuZ2V0RnJhbWVzKCk7XG4gICAgICAgICAgICAkdGh1bWJzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciAkdGh1bWIgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICR0aHVtYi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAkaC5jbGVhblpvb21DYWNoZSgkcC5maW5kKCcjem9vbS0nICsgJHRodW1iLmF0dHIoJ2lkJykpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFzZWxmLmdldEZyYW1lcygpLmxlbmd0aCB8fCAhc2VsZi5zaG93UHJldmlldykge1xuICAgICAgICAgICAgICAgIHNlbGYuX3Jlc2V0VXBsb2FkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl92YWxpZGF0ZURlZmF1bHRQcmV2aWV3KCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pbml0U29ydGFibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgJGVsID0gc2VsZi4kcHJldmlldywgc2V0dGluZ3MsIHNlbGVjdG9yID0gJy4nICsgJGguU09SVF9DU1M7XG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5LdlNvcnRhYmxlIHx8ICRlbC5maW5kKHNlbGVjdG9yKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL25vaW5zcGVjdGlvbiBKU1VudXNlZEdsb2JhbFN5bWJvbHNcbiAgICAgICAgICAgIHNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgIGhhbmRsZTogJy5kcmFnLWhhbmRsZS1pbml0JyxcbiAgICAgICAgICAgICAgICBkYXRhSWRBdHRyOiAnZGF0YS1wcmV2aWV3LWlkJyxcbiAgICAgICAgICAgICAgICBzY3JvbGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogc2VsZWN0b3IsXG4gICAgICAgICAgICAgICAgb25Tb3J0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkSW5kZXggPSBlLm9sZEluZGV4LCBuZXdJbmRleCA9IGUubmV3SW5kZXgsICRmcmFtZSwgJGRyYWdFbDtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0aWFsUHJldmlldyA9ICRoLm1vdmVBcnJheShzZWxmLmluaXRpYWxQcmV2aWV3LCBvbGRJbmRleCwgbmV3SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmluaXRpYWxQcmV2aWV3Q29uZmlnID0gJGgubW92ZUFycmF5KHNlbGYuaW5pdGlhbFByZXZpZXdDb25maWcsIG9sZEluZGV4LCBuZXdJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucHJldmlld0NhY2hlLmluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmluaXRpYWxQcmV2aWV3Q29uZmlnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pbml0aWFsUHJldmlld0NvbmZpZ1tpXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkcmFnRWwgPSAkKGUuaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZyYW1lID0gJGRyYWdFbC5jbG9zZXN0KCRoLkZSQU1FUyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZyYW1lLmF0dHIoJ2RhdGEtZmlsZWluZGV4JywgJ2luaXRfJyArIGkpLmF0dHIoJ2RhdGEtZmlsZWluZGV4JywgJ2luaXRfJyArIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlc29ydGVkJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlld0lkOiAkKGUuaXRlbSkuYXR0cignaWQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdvbGRJbmRleCc6IG9sZEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ25ld0luZGV4JzogbmV3SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFjazogc2VsZi5pbml0aWFsUHJldmlld0NvbmZpZ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCRlbC5kYXRhKCdrdnNvcnRhYmxlJykpIHtcbiAgICAgICAgICAgICAgICAkZWwua3Zzb3J0YWJsZSgnZGVzdHJveScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgc2V0dGluZ3MsIHNlbGYuZmlsZUFjdGlvblNldHRpbmdzLmRyYWdTZXR0aW5ncyk7XG4gICAgICAgICAgICAkZWwua3Zzb3J0YWJsZShzZXR0aW5ncyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRQcmV2aWV3Q29udGVudDogZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHNlbGYuJHByZXZpZXcuaHRtbChjb250ZW50KTtcbiAgICAgICAgICAgIHNlbGYuX2F1dG9GaXRDb250ZW50KCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pbml0UHJldmlldzogZnVuY3Rpb24gKGlzSW5pdCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBjYXAgPSBzZWxmLmluaXRpYWxDYXB0aW9uIHx8ICcnLCBvdXQ7XG4gICAgICAgICAgICBpZiAoIXNlbGYucHJldmlld0NhY2hlLmNvdW50KCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9jbGVhclByZXZpZXcoKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNJbml0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldENhcHRpb24oY2FwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbml0Q2FwdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgPSBzZWxmLnByZXZpZXdDYWNoZS5vdXQoKTtcbiAgICAgICAgICAgIGNhcCA9IGlzSW5pdCAmJiBzZWxmLmluaXRpYWxDYXB0aW9uID8gc2VsZi5pbml0aWFsQ2FwdGlvbiA6IG91dC5jYXB0aW9uO1xuICAgICAgICAgICAgc2VsZi5fc2V0UHJldmlld0NvbnRlbnQob3V0LmNvbnRlbnQpO1xuICAgICAgICAgICAgc2VsZi5fc2V0SW5pdFRodW1iQXR0cigpO1xuICAgICAgICAgICAgc2VsZi5fc2V0Q2FwdGlvbihjYXApO1xuICAgICAgICAgICAgc2VsZi5faW5pdFNvcnRhYmxlKCk7XG4gICAgICAgICAgICBpZiAoISRoLmlzRW1wdHkob3V0LmNvbnRlbnQpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCdmaWxlLWlucHV0LW5ldycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0Wm9vbUJ1dHRvbjogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgbGFiZWwgPSBzZWxmLnByZXZpZXdab29tQnV0dG9uSWNvbnNbdHlwZV0sIGNzcyA9IHNlbGYucHJldmlld1pvb21CdXR0b25DbGFzc2VzW3R5cGVdLFxuICAgICAgICAgICAgICAgIHRpdGxlID0gJyB0aXRsZT1cIicgKyAoc2VsZi5wcmV2aWV3Wm9vbUJ1dHRvblRpdGxlc1t0eXBlXSB8fCAnJykgKyAnXCIgJyxcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSB0aXRsZSArICh0eXBlID09PSAnY2xvc2UnID8gJyBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiJyA6ICcnKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnZnVsbHNjcmVlbicgfHwgdHlwZSA9PT0gJ2JvcmRlcmxlc3MnIHx8IHR5cGUgPT09ICd0b2dnbGVoZWFkZXInKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zICs9ICcgZGF0YS10b2dnbGU9XCJidXR0b25cIiBhcmlhLXByZXNzZWQ9XCJmYWxzZVwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCInICsgY3NzICsgJyBidG4tJyArIHR5cGUgKyAnXCInICsgcGFyYW1zICsgJz4nICsgbGFiZWwgKyAnPC9idXR0b24+JztcbiAgICAgICAgfSxcbiAgICAgICAgX2dldE1vZGFsQ29udGVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2dldExheW91dFRlbXBsYXRlKCdtb2RhbCcpLnNldFRva2Vucyh7XG4gICAgICAgICAgICAgICAgJ3J0bCc6IHNlbGYucnRsID8gJyBrdi1ydGwnIDogJycsXG4gICAgICAgICAgICAgICAgJ3pvb21GcmFtZUNsYXNzJzogc2VsZi5mcmFtZUNsYXNzLFxuICAgICAgICAgICAgICAgICdoZWFkaW5nJzogc2VsZi5tc2dab29tTW9kYWxIZWFkaW5nLFxuICAgICAgICAgICAgICAgICdwcmV2Jzogc2VsZi5fZ2V0Wm9vbUJ1dHRvbigncHJldicpLFxuICAgICAgICAgICAgICAgICduZXh0Jzogc2VsZi5fZ2V0Wm9vbUJ1dHRvbignbmV4dCcpLFxuICAgICAgICAgICAgICAgICd0b2dnbGVoZWFkZXInOiBzZWxmLl9nZXRab29tQnV0dG9uKCd0b2dnbGVoZWFkZXInKSxcbiAgICAgICAgICAgICAgICAnZnVsbHNjcmVlbic6IHNlbGYuX2dldFpvb21CdXR0b24oJ2Z1bGxzY3JlZW4nKSxcbiAgICAgICAgICAgICAgICAnYm9yZGVybGVzcyc6IHNlbGYuX2dldFpvb21CdXR0b24oJ2JvcmRlcmxlc3MnKSxcbiAgICAgICAgICAgICAgICAnY2xvc2UnOiBzZWxmLl9nZXRab29tQnV0dG9uKCdjbG9zZScpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgX2xpc3Rlbk1vZGFsRXZlbnQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCAkbW9kYWwgPSBzZWxmLiRtb2RhbCwgZ2V0UGFyYW1zID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VFdmVudDogZSxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlld0lkOiAkbW9kYWwuZGF0YSgncHJldmlld0lkJyksXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsOiAkbW9kYWxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICRtb2RhbC5vbihldmVudCArICcuYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciAkYnRuRnVsbCA9ICRtb2RhbC5maW5kKCcuYnRuLWZ1bGxzY3JlZW4nKSwgJGJ0bkJvcmQgPSAkbW9kYWwuZmluZCgnLmJ0bi1ib3JkZXJsZXNzJyk7XG4gICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGV6b29tJyArIGV2ZW50LCBnZXRQYXJhbXMoZSkpO1xuICAgICAgICAgICAgICAgIGlmIChldmVudCA9PT0gJ3Nob3duJykge1xuICAgICAgICAgICAgICAgICAgICAkYnRuQm9yZC5yZW1vdmVDbGFzcygnYWN0aXZlJykuYXR0cignYXJpYS1wcmVzc2VkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICAgICAgICAgICRidG5GdWxsLnJlbW92ZUNsYXNzKCdhY3RpdmUnKS5hdHRyKCdhcmlhLXByZXNzZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRtb2RhbC5oYXNDbGFzcygnZmlsZS16b29tLWZ1bGxzY3JlZW4nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fbWF4aW1pemVab29tRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGguY2hlY2tGdWxsU2NyZWVuKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYnRuRnVsbC5hZGRDbGFzcygnYWN0aXZlJykuYXR0cignYXJpYS1wcmVzc2VkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJ0bkJvcmQuYWRkQ2xhc3MoJ2FjdGl2ZScpLmF0dHIoJ2FyaWEtcHJlc3NlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgX2luaXRab29tOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRkaWFsb2csIG1vZGFsTWFpbiA9IHNlbGYuX2dldExheW91dFRlbXBsYXRlKCdtb2RhbE1haW4nKSwgbW9kYWxJZCA9ICcjJyArICRoLk1PREFMX0lEO1xuICAgICAgICAgICAgaWYgKCFzZWxmLnNob3dQcmV2aWV3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi4kbW9kYWwgPSAkKG1vZGFsSWQpO1xuICAgICAgICAgICAgaWYgKCFzZWxmLiRtb2RhbCB8fCAhc2VsZi4kbW9kYWwubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJGRpYWxvZyA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmh0bWwobW9kYWxNYWluKS5pbnNlcnRBZnRlcihzZWxmLiRjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIHNlbGYuJG1vZGFsID0gJChtb2RhbElkKS5pbnNlcnRCZWZvcmUoJGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgJGRpYWxvZy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRoLmluaXRNb2RhbChzZWxmLiRtb2RhbCk7XG4gICAgICAgICAgICBzZWxmLiRtb2RhbC5odG1sKHNlbGYuX2dldE1vZGFsQ29udGVudCgpKTtcbiAgICAgICAgICAgICQuZWFjaCgkaC5NT0RBTF9FVkVOVFMsIGZ1bmN0aW9uIChrZXksIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fbGlzdGVuTW9kYWxFdmVudChldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgX2luaXRab29tQnV0dG9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBwcmV2aWV3SWQgPSBzZWxmLiRtb2RhbC5kYXRhKCdwcmV2aWV3SWQnKSB8fCAnJywgJGZpcnN0LCAkbGFzdCxcbiAgICAgICAgICAgICAgICB0aHVtYnMgPSBzZWxmLmdldEZyYW1lcygpLnRvQXJyYXkoKSwgbGVuID0gdGh1bWJzLmxlbmd0aCwgJHByZXYgPSBzZWxmLiRtb2RhbC5maW5kKCcuYnRuLXByZXYnKSxcbiAgICAgICAgICAgICAgICAkbmV4dCA9IHNlbGYuJG1vZGFsLmZpbmQoJy5idG4tbmV4dCcpO1xuICAgICAgICAgICAgaWYgKHRodW1icy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgJHByZXYuaGlkZSgpO1xuICAgICAgICAgICAgICAgICRuZXh0LmhpZGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRwcmV2LnNob3coKTtcbiAgICAgICAgICAgICAgICAkbmV4dC5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWxlbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRmaXJzdCA9ICQodGh1bWJzWzBdKTtcbiAgICAgICAgICAgICRsYXN0ID0gJCh0aHVtYnNbbGVuIC0gMV0pO1xuICAgICAgICAgICAgJHByZXYucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICRuZXh0LnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICBpZiAoJGZpcnN0Lmxlbmd0aCAmJiAkZmlyc3QuYXR0cignaWQnKSA9PT0gcHJldmlld0lkKSB7XG4gICAgICAgICAgICAgICAgJHByZXYuYXR0cignZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkbGFzdC5sZW5ndGggJiYgJGxhc3QuYXR0cignaWQnKSA9PT0gcHJldmlld0lkKSB7XG4gICAgICAgICAgICAgICAgJG5leHQuYXR0cignZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX21heGltaXplWm9vbURpYWxvZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCAkbW9kYWwgPSBzZWxmLiRtb2RhbCwgJGhlYWQgPSAkbW9kYWwuZmluZCgnLm1vZGFsLWhlYWRlcjp2aXNpYmxlJyksXG4gICAgICAgICAgICAgICAgJGZvb3QgPSAkbW9kYWwuZmluZCgnLm1vZGFsLWZvb3Rlcjp2aXNpYmxlJyksICRib2R5ID0gJG1vZGFsLmZpbmQoJy5tb2RhbC1ib2R5JyksXG4gICAgICAgICAgICAgICAgaCA9ICQod2luZG93KS5oZWlnaHQoKSwgZGlmZiA9IDA7XG4gICAgICAgICAgICAkbW9kYWwuYWRkQ2xhc3MoJ2ZpbGUtem9vbS1mdWxsc2NyZWVuJyk7XG4gICAgICAgICAgICBpZiAoJGhlYWQgJiYgJGhlYWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaCAtPSAkaGVhZC5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkZm9vdCAmJiAkZm9vdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBoIC09ICRmb290Lm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCRib2R5ICYmICRib2R5Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRpZmYgPSAkYm9keS5vdXRlckhlaWdodCh0cnVlKSAtICRib2R5LmhlaWdodCgpO1xuICAgICAgICAgICAgICAgIGggLT0gZGlmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRtb2RhbC5maW5kKCcua3Ytem9vbS1ib2R5JykuaGVpZ2h0KGgpO1xuICAgICAgICB9LFxuICAgICAgICBfcmVzaXplWm9vbURpYWxvZzogZnVuY3Rpb24gKGZ1bGxTY3JlZW4pIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgJG1vZGFsID0gc2VsZi4kbW9kYWwsICRidG5GdWxsID0gJG1vZGFsLmZpbmQoJy5idG4tZnVsbHNjcmVlbicpLFxuICAgICAgICAgICAgICAgICRidG5Cb3JkID0gJG1vZGFsLmZpbmQoJy5idG4tYm9yZGVybGVzcycpO1xuICAgICAgICAgICAgaWYgKCRtb2RhbC5oYXNDbGFzcygnZmlsZS16b29tLWZ1bGxzY3JlZW4nKSkge1xuICAgICAgICAgICAgICAgICRoLnRvZ2dsZUZ1bGxTY3JlZW4oZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmICghZnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISRidG5GdWxsLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJG1vZGFsLnJlbW92ZUNsYXNzKCdmaWxlLXpvb20tZnVsbHNjcmVlbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kbW9kYWwuZmluZCgnLmt2LXpvb20tYm9keScpLmNzcygnaGVpZ2h0Jywgc2VsZi56b29tTW9kYWxIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGJ0bkZ1bGwucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpLmF0dHIoJ2FyaWEtcHJlc3NlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkYnRuRnVsbC5oYXNDbGFzcygnYWN0aXZlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRtb2RhbC5yZW1vdmVDbGFzcygnZmlsZS16b29tLWZ1bGxzY3JlZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3Jlc2l6ZVpvb21EaWFsb2codHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGJ0bkJvcmQuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJ0bkJvcmQucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpLmF0dHIoJ2FyaWEtcHJlc3NlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZ1bGxTY3JlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fbWF4aW1pemVab29tRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJGgudG9nZ2xlRnVsbFNjcmVlbih0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRtb2RhbC5mb2N1cygpO1xuICAgICAgICB9LFxuICAgICAgICBfc2V0Wm9vbUNvbnRlbnQ6IGZ1bmN0aW9uICgkZnJhbWUsIGFuaW1hdGUpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgJGNvbnRlbnQsIHRtcGx0LCBib2R5LCB0aXRsZSwgJGJvZHksICRkYXRhRWwsIGNvbmZpZywgcGlkID0gJGZyYW1lLmF0dHIoJ2lkJyksXG4gICAgICAgICAgICAgICAgJG1vZGFsID0gc2VsZi4kbW9kYWwsICRwcmV2ID0gJG1vZGFsLmZpbmQoJy5idG4tcHJldicpLCAkbmV4dCA9ICRtb2RhbC5maW5kKCcuYnRuLW5leHQnKSwgJHRtcCxcbiAgICAgICAgICAgICAgICAkYnRuRnVsbCA9ICRtb2RhbC5maW5kKCcuYnRuLWZ1bGxzY3JlZW4nKSwgJGJ0bkJvcmQgPSAkbW9kYWwuZmluZCgnLmJ0bi1ib3JkZXJsZXNzJyksIGNhcCwgc2l6ZSxcbiAgICAgICAgICAgICAgICAkYnRuVG9naCA9ICRtb2RhbC5maW5kKCcuYnRuLXRvZ2dsZWhlYWRlcicpLCAkem9vbVByZXZpZXcgPSBzZWxmLiRwcmV2aWV3LmZpbmQoJyN6b29tLScgKyBwaWQpO1xuICAgICAgICAgICAgdG1wbHQgPSAkem9vbVByZXZpZXcuYXR0cignZGF0YS10ZW1wbGF0ZScpIHx8ICdnZW5lcmljJztcbiAgICAgICAgICAgICRjb250ZW50ID0gJHpvb21QcmV2aWV3LmZpbmQoJy5rdi1maWxlLWNvbnRlbnQnKTtcbiAgICAgICAgICAgIGJvZHkgPSAkY29udGVudC5sZW5ndGggPyAkY29udGVudC5odG1sKCkgOiAnJztcbiAgICAgICAgICAgIGNhcCA9ICRmcmFtZS5kYXRhKCdjYXB0aW9uJykgfHwgJyc7XG4gICAgICAgICAgICBzaXplID0gJGZyYW1lLmRhdGEoJ3NpemUnKSB8fCAnJztcbiAgICAgICAgICAgIHRpdGxlID0gY2FwICsgJyAnICsgc2l6ZTtcbiAgICAgICAgICAgICRtb2RhbC5maW5kKCcua3Ytem9vbS10aXRsZScpLmF0dHIoJ3RpdGxlJywgJCgnPGRpdi8+JykuaHRtbCh0aXRsZSkudGV4dCgpKS5odG1sKHRpdGxlKTtcbiAgICAgICAgICAgICRib2R5ID0gJG1vZGFsLmZpbmQoJy5rdi16b29tLWJvZHknKTtcbiAgICAgICAgICAgICRtb2RhbC5yZW1vdmVDbGFzcygna3Ytc2luZ2xlLWNvbnRlbnQnKTtcbiAgICAgICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgJHRtcCA9ICRib2R5LmFkZENsYXNzKCdmaWxlLXRodW1iLWxvYWRpbmcnKS5jbG9uZSgpLmluc2VydEFmdGVyKCRib2R5KTtcbiAgICAgICAgICAgICAgICAkYm9keS5odG1sKGJvZHkpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAkdG1wLmZhZGVPdXQoJ2Zhc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRib2R5LmZhZGVJbignZmFzdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRib2R5LnJlbW92ZUNsYXNzKCdmaWxlLXRodW1iLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICR0bXAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRib2R5Lmh0bWwoYm9keSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcgPSBzZWxmLnByZXZpZXdab29tU2V0dGluZ3NbdG1wbHRdO1xuICAgICAgICAgICAgaWYgKGNvbmZpZykge1xuICAgICAgICAgICAgICAgICRkYXRhRWwgPSAkYm9keS5maW5kKCcua3YtcHJldmlldy1kYXRhJyk7XG4gICAgICAgICAgICAgICAgJGguYWRkQ3NzKCRkYXRhRWwsICdmaWxlLXpvb20tZGV0YWlsJyk7XG4gICAgICAgICAgICAgICAgJC5lYWNoKGNvbmZpZywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJGRhdGFFbC5jc3Moa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoJGRhdGFFbC5hdHRyKCd3aWR0aCcpICYmIGtleSA9PT0gJ3dpZHRoJykgfHwgKCRkYXRhRWwuYXR0cignaGVpZ2h0JykgJiYga2V5ID09PSAnaGVpZ2h0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRkYXRhRWwucmVtb3ZlQXR0cihrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkbW9kYWwuZGF0YSgncHJldmlld0lkJywgcGlkKTtcbiAgICAgICAgICAgIHZhciAkaW1nID0gJGJvZHkuZmluZCgnaW1nJyk7XG4gICAgICAgICAgICBpZiAoJGltZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkaC5hZGp1c3RPcmllbnRlZEltYWdlKCRpbWcsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5faGFuZGxlcigkcHJldiwgJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuX3pvb21TbGlkZVNob3coJ3ByZXYnLCBwaWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxmLl9oYW5kbGVyKCRuZXh0LCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fem9vbVNsaWRlU2hvdygnbmV4dCcsIHBpZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGYuX2hhbmRsZXIoJGJ0bkZ1bGwsICdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9yZXNpemVab29tRGlhbG9nKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxmLl9oYW5kbGVyKCRidG5Cb3JkLCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fcmVzaXplWm9vbURpYWxvZyhmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGYuX2hhbmRsZXIoJGJ0blRvZ2gsICdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGhlYWRlciA9ICRtb2RhbC5maW5kKCcubW9kYWwtaGVhZGVyJyksICRmbG9hdEJhciA9ICRtb2RhbC5maW5kKCcubW9kYWwtYm9keSAuZmxvYXRpbmctYnV0dG9ucycpLFxuICAgICAgICAgICAgICAgICAgICBodCwgJGFjdGlvbnMgPSAkaGVhZGVyLmZpbmQoJy5rdi16b29tLWFjdGlvbnMnKSwgcmVzaXplID0gZnVuY3Rpb24gKGhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRib2R5ID0gc2VsZi4kbW9kYWwuZmluZCgnLmt2LXpvb20tYm9keScpLCBoID0gc2VsZi56b29tTW9kYWxIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJG1vZGFsLmhhc0NsYXNzKCdmaWxlLXpvb20tZnVsbHNjcmVlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9ICRib2R5Lm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSBoIC0gJGhlYWRlci5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAkYm9keS5jc3MoJ2hlaWdodCcsIGhlaWdodCA/IGggKyBoZWlnaHQgOiBoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoJGhlYWRlci5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgICAgICBodCA9ICRoZWFkZXIub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICRoZWFkZXIuc2xpZGVVcCgnc2xvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRhY3Rpb25zLmZpbmQoJy5idG4nKS5hcHBlbmRUbygkZmxvYXRCYXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzaXplKGh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJGZsb2F0QmFyLmZpbmQoJy5idG4nKS5hcHBlbmRUbygkYWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICRoZWFkZXIuc2xpZGVEb3duKCdzbG93JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkbW9kYWwuZm9jdXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZi5faGFuZGxlcigkbW9kYWwsICdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gZS53aGljaCB8fCBlLmtleUNvZGU7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gMzcgJiYgISRwcmV2LmF0dHIoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fem9vbVNsaWRlU2hvdygncHJldicsIHBpZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IDM5ICYmICEkbmV4dC5hdHRyKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3pvb21TbGlkZVNob3coJ25leHQnLCBwaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfem9vbVByZXZpZXc6IGZ1bmN0aW9uICgkYnRuKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRmcmFtZSwgJG1vZGFsID0gc2VsZi4kbW9kYWw7XG4gICAgICAgICAgICBpZiAoISRidG4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ0Nhbm5vdCB6b29tIHRvIGRldGFpbGVkIHByZXZpZXchJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRoLmluaXRNb2RhbCgkbW9kYWwpO1xuICAgICAgICAgICAgJG1vZGFsLmh0bWwoc2VsZi5fZ2V0TW9kYWxDb250ZW50KCkpO1xuICAgICAgICAgICAgJGZyYW1lID0gJGJ0bi5jbG9zZXN0KCRoLkZSQU1FUyk7XG4gICAgICAgICAgICBzZWxmLl9zZXRab29tQ29udGVudCgkZnJhbWUpO1xuICAgICAgICAgICAgJG1vZGFsLm1vZGFsKCdzaG93Jyk7XG4gICAgICAgICAgICBzZWxmLl9pbml0Wm9vbUJ1dHRvbnMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3pvb21TbGlkZVNob3c6IGZ1bmN0aW9uIChkaXIsIHByZXZpZXdJZCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCAkYnRuID0gc2VsZi4kbW9kYWwuZmluZCgnLmt2LXpvb20tYWN0aW9ucyAuYnRuLScgKyBkaXIpLCAkdGFyZ0ZyYW1lLCBpLFxuICAgICAgICAgICAgICAgIHRodW1icyA9IHNlbGYuZ2V0RnJhbWVzKCkudG9BcnJheSgpLCBsZW4gPSB0aHVtYnMubGVuZ3RoLCBvdXQ7XG4gICAgICAgICAgICBpZiAoJGJ0bi5hdHRyKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQodGh1bWJzW2ldKS5hdHRyKCdpZCcpID09PSBwcmV2aWV3SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ID0gZGlyID09PSAncHJldicgPyBpIC0gMSA6IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3V0IDwgMCB8fCBvdXQgPj0gbGVuIHx8ICF0aHVtYnNbb3V0XSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR0YXJnRnJhbWUgPSAkKHRodW1ic1tvdXRdKTtcbiAgICAgICAgICAgIGlmICgkdGFyZ0ZyYW1lLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNlbGYuX3NldFpvb21Db250ZW50KCR0YXJnRnJhbWUsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5faW5pdFpvb21CdXR0b25zKCk7XG4gICAgICAgICAgICBzZWxmLl9yYWlzZSgnZmlsZXpvb20nICsgZGlyLCB7J3ByZXZpZXdJZCc6IHByZXZpZXdJZCwgbW9kYWw6IHNlbGYuJG1vZGFsfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pbml0Wm9vbUJ1dHRvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgc2VsZi4kcHJldmlldy5maW5kKCcua3YtZmlsZS16b29tJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyICRlbCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgc2VsZi5faGFuZGxlcigkZWwsICdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fem9vbVByZXZpZXcoJGVsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfY2xlYXJPYmplY3RzOiBmdW5jdGlvbiAoJGVsKSB7XG4gICAgICAgICAgICAkZWwuZmluZCgndmlkZW8gYXVkaW8nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJGVsLmZpbmQoJ2ltZyBvYmplY3QgZGl2JykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfY2xlYXJGaWxlSW5wdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgJGVsID0gc2VsZi4kZWxlbWVudCwgJHNyY0ZybSwgJHRtcEZybSwgJHRtcEVsO1xuICAgICAgICAgICAgc2VsZi5maWxlSW5wdXRDbGVhcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICgkaC5pc0VtcHR5KCRlbC52YWwoKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaXggZm9yIElFIHZlciA8IDExLCB0aGF0IGRvZXMgbm90IGNsZWFyIGZpbGUgaW5wdXRzLiBSZXF1aXJlcyBhIHNlcXVlbmNlIG9mIHN0ZXBzIHRvIHByZXZlbnQgSUVcbiAgICAgICAgICAgIC8vIGNyYXNoaW5nIGJ1dCBzdGlsbCBhbGxvdyBjbGVhcmluZyBvZiB0aGUgZmlsZSBpbnB1dC5cbiAgICAgICAgICAgIGlmIChzZWxmLmlzSUU5IHx8IHNlbGYuaXNJRTEwKSB7XG4gICAgICAgICAgICAgICAgJHNyY0ZybSA9ICRlbC5jbG9zZXN0KCdmb3JtJyk7XG4gICAgICAgICAgICAgICAgJHRtcEZybSA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpKTtcbiAgICAgICAgICAgICAgICAkdG1wRWwgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcbiAgICAgICAgICAgICAgICAkZWwuYmVmb3JlKCR0bXBFbCk7XG4gICAgICAgICAgICAgICAgaWYgKCRzcmNGcm0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICRzcmNGcm0uYWZ0ZXIoJHRtcEZybSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHRtcEVsLmFmdGVyKCR0bXBGcm0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkdG1wRnJtLmFwcGVuZCgkZWwpLnRyaWdnZXIoJ3Jlc2V0Jyk7XG4gICAgICAgICAgICAgICAgJHRtcEVsLmJlZm9yZSgkZWwpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICR0bXBGcm0ucmVtb3ZlKCk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBub3JtYWwgaW5wdXQgY2xlYXIgYmVoYXZpb3IgZm9yIG90aGVyIHNhbmUgYnJvd3NlcnNcbiAgICAgICAgICAgICAgICAkZWwudmFsKCcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3Jlc2V0VXBsb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBzZWxmLnVwbG9hZENhY2hlID0ge2NvbnRlbnQ6IFtdLCBjb25maWc6IFtdLCB0YWdzOiBbXSwgYXBwZW5kOiB0cnVlfTtcbiAgICAgICAgICAgIHNlbGYudXBsb2FkQ291bnQgPSAwO1xuICAgICAgICAgICAgc2VsZi51cGxvYWRTdGF0dXMgPSB7fTtcbiAgICAgICAgICAgIHNlbGYudXBsb2FkTG9nID0gW107XG4gICAgICAgICAgICBzZWxmLnVwbG9hZEFzeW5jQ291bnQgPSAwO1xuICAgICAgICAgICAgc2VsZi5sb2FkZWRJbWFnZXMgPSBbXTtcbiAgICAgICAgICAgIHNlbGYudG90YWxJbWFnZXNDb3VudCA9IDA7XG4gICAgICAgICAgICBzZWxmLiRidG5VcGxvYWQucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIHNlbGYuX3NldFByb2dyZXNzKDApO1xuICAgICAgICAgICAgc2VsZi4kcHJvZ3Jlc3MuaGlkZSgpO1xuICAgICAgICAgICAgc2VsZi5fcmVzZXRFcnJvcnMoZmFsc2UpO1xuICAgICAgICAgICAgc2VsZi5hamF4QWJvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgc2VsZi5hamF4UmVxdWVzdHMgPSBbXTtcbiAgICAgICAgICAgIHNlbGYuX3Jlc2V0Q2FudmFzKCk7XG4gICAgICAgICAgICBzZWxmLmNhY2hlSW5pdGlhbFByZXZpZXcgPSB7fTtcbiAgICAgICAgICAgIGlmIChzZWxmLm92ZXJ3cml0ZUluaXRpYWwpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmluaXRpYWxQcmV2aWV3ID0gW107XG4gICAgICAgICAgICAgICAgc2VsZi5pbml0aWFsUHJldmlld0NvbmZpZyA9IFtdO1xuICAgICAgICAgICAgICAgIHNlbGYuaW5pdGlhbFByZXZpZXdUaHVtYlRhZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBzZWxmLnByZXZpZXdDYWNoZS5kYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBbXSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgdGFnczogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfcmVzZXRDYW52YXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGlmIChzZWxmLmNhbnZhcyAmJiBzZWxmLmltYWdlQ2FudmFzQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIHNlbGYuaW1hZ2VDYW52YXNDb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBzZWxmLmNhbnZhcy53aWR0aCwgc2VsZi5jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2hhc0luaXRpYWxQcmV2aWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gIXNlbGYub3ZlcndyaXRlSW5pdGlhbCAmJiBzZWxmLnByZXZpZXdDYWNoZS5jb3VudCgpO1xuICAgICAgICB9LFxuICAgICAgICBfcmVzZXRQcmV2aWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIG91dCwgY2FwO1xuICAgICAgICAgICAgaWYgKHNlbGYucHJldmlld0NhY2hlLmNvdW50KCkpIHtcbiAgICAgICAgICAgICAgICBvdXQgPSBzZWxmLnByZXZpZXdDYWNoZS5vdXQoKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9zZXRQcmV2aWV3Q29udGVudChvdXQuY29udGVudCk7XG4gICAgICAgICAgICAgICAgc2VsZi5fc2V0SW5pdFRodW1iQXR0cigpO1xuICAgICAgICAgICAgICAgIGNhcCA9IHNlbGYuaW5pdGlhbENhcHRpb24gPyBzZWxmLmluaXRpYWxDYXB0aW9uIDogb3V0LmNhcHRpb247XG4gICAgICAgICAgICAgICAgc2VsZi5fc2V0Q2FwdGlvbihjYXApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9jbGVhclByZXZpZXcoKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9pbml0Q2FwdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYuc2hvd1ByZXZpZXcpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9pbml0Wm9vbSgpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2luaXRTb3J0YWJsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfY2xlYXJEZWZhdWx0UHJldmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgc2VsZi4kcHJldmlldy5maW5kKCcuZmlsZS1kZWZhdWx0LXByZXZpZXcnKS5yZW1vdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3ZhbGlkYXRlRGVmYXVsdFByZXZpZXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGlmICghc2VsZi5zaG93UHJldmlldyB8fCAkaC5pc0VtcHR5KHNlbGYuZGVmYXVsdFByZXZpZXdDb250ZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX3NldFByZXZpZXdDb250ZW50KCc8ZGl2IGNsYXNzPVwiZmlsZS1kZWZhdWx0LXByZXZpZXdcIj4nICsgc2VsZi5kZWZhdWx0UHJldmlld0NvbnRlbnQgKyAnPC9kaXY+Jyk7XG4gICAgICAgICAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ2ZpbGUtaW5wdXQtbmV3Jyk7XG4gICAgICAgICAgICBzZWxmLl9pbml0Q2xpY2thYmxlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9yZXNldFByZXZpZXdUaHVtYnM6IGZ1bmN0aW9uIChpc0FqYXgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgb3V0O1xuICAgICAgICAgICAgaWYgKGlzQWpheCkge1xuICAgICAgICAgICAgICAgIHNlbGYuX2NsZWFyUHJldmlldygpO1xuICAgICAgICAgICAgICAgIHNlbGYuY2xlYXJTdGFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLl9oYXNJbml0aWFsUHJldmlldygpKSB7XG4gICAgICAgICAgICAgICAgb3V0ID0gc2VsZi5wcmV2aWV3Q2FjaGUub3V0KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5fc2V0UHJldmlld0NvbnRlbnQob3V0LmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIHNlbGYuX3NldEluaXRUaHVtYkF0dHIoKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9zZXRDYXB0aW9uKG91dC5jYXB0aW9uKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9pbml0UHJldmlld0FjdGlvbnMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fY2xlYXJQcmV2aWV3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRMYXlvdXRUZW1wbGF0ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgdGVtcGxhdGUgPSBzZWxmLmxheW91dFRlbXBsYXRlc1t0XTtcbiAgICAgICAgICAgIGlmICgkaC5pc0VtcHR5KHNlbGYuY3VzdG9tTGF5b3V0VGFncykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJGgucmVwbGFjZVRhZ3ModGVtcGxhdGUsIHNlbGYuY3VzdG9tTGF5b3V0VGFncyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRQcmV2aWV3VGVtcGxhdGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIHRlbXBsYXRlID0gc2VsZi5wcmV2aWV3VGVtcGxhdGVzW3RdO1xuICAgICAgICAgICAgaWYgKCRoLmlzRW1wdHkoc2VsZi5jdXN0b21QcmV2aWV3VGFncykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJGgucmVwbGFjZVRhZ3ModGVtcGxhdGUsIHNlbGYuY3VzdG9tUHJldmlld1RhZ3MpO1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0T3V0RGF0YTogZnVuY3Rpb24gKGpxWEhSLCByZXNwb25zZURhdGEsIGZpbGVzRGF0YSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAganFYSFIgPSBqcVhIUiB8fCB7fTtcbiAgICAgICAgICAgIHJlc3BvbnNlRGF0YSA9IHJlc3BvbnNlRGF0YSB8fCB7fTtcbiAgICAgICAgICAgIGZpbGVzRGF0YSA9IGZpbGVzRGF0YSB8fCBzZWxmLmZpbGVzdGFjay5zbGljZSgwKSB8fCB7fTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZm9ybTogc2VsZi5mb3JtZGF0YSxcbiAgICAgICAgICAgICAgICBmaWxlczogZmlsZXNEYXRhLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lczogc2VsZi5maWxlbmFtZXMsXG4gICAgICAgICAgICAgICAgZmlsZXNjb3VudDogc2VsZi5nZXRGaWxlc0NvdW50KCksXG4gICAgICAgICAgICAgICAgZXh0cmE6IHNlbGYuX2dldEV4dHJhRGF0YSgpLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZURhdGEsXG4gICAgICAgICAgICAgICAgcmVhZGVyOiBzZWxmLnJlYWRlcixcbiAgICAgICAgICAgICAgICBqcVhIUjoganFYSFJcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRNc2dTZWxlY3RlZDogZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgc3RyRmlsZXMgPSBuID09PSAxID8gc2VsZi5maWxlU2luZ2xlIDogc2VsZi5maWxlUGx1cmFsO1xuICAgICAgICAgICAgcmV0dXJuIG4gPiAwID8gc2VsZi5tc2dTZWxlY3RlZC5yZXBsYWNlKCd7bn0nLCBuKS5yZXBsYWNlKCd7ZmlsZXN9Jywgc3RyRmlsZXMpIDogc2VsZi5tc2dOb0ZpbGVzU2VsZWN0ZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRGcmFtZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRmcmFtZSA9ICQoJyMnICsgaWQpO1xuICAgICAgICAgICAgaWYgKCEkZnJhbWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fbG9nKCdJbnZhbGlkIHRodW1iIGZyYW1lIHdpdGggaWQ6IFwiJyArIGlkICsgJ1wiLicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICRmcmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldFRodW1iczogZnVuY3Rpb24gKGNzcykge1xuICAgICAgICAgICAgY3NzID0gY3NzIHx8ICcnO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RnJhbWVzKCc6bm90KC5maWxlLXByZXZpZXctaW5pdGlhbCknICsgY3NzKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldEV4dHJhRGF0YTogZnVuY3Rpb24gKHByZXZpZXdJZCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgZGF0YSA9IHNlbGYudXBsb2FkRXh0cmFEYXRhO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLnVwbG9hZEV4dHJhRGF0YSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHNlbGYudXBsb2FkRXh0cmFEYXRhKHByZXZpZXdJZCwgaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIF9pbml0WGhyOiBmdW5jdGlvbiAoeGhyb2JqLCBwcmV2aWV3SWQsIGZpbGVDb3VudCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHhocm9iai51cGxvYWQpIHtcbiAgICAgICAgICAgICAgICB4aHJvYmoudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwY3QgPSAwLCB0b3RhbCA9IGV2ZW50LnRvdGFsLCBwb3NpdGlvbiA9IGV2ZW50LmxvYWRlZCB8fCBldmVudC5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgLyoqIEBuYW1lc3BhY2UgZXZlbnQubGVuZ3RoQ29tcHV0YWJsZSAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQubGVuZ3RoQ29tcHV0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGN0ID0gTWF0aC5mbG9vcihwb3NpdGlvbiAvIHRvdGFsICogMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlld0lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZXRBc3luY1VwbG9hZFN0YXR1cyhwcmV2aWV3SWQsIHBjdCwgZmlsZUNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldFByb2dyZXNzKHBjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geGhyb2JqO1xuICAgICAgICB9LFxuICAgICAgICBfbWVyZ2VBamF4Q2FsbGJhY2s6IGZ1bmN0aW9uIChmdW5jTmFtZSwgc3JjRnVuYywgdHlwZSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBzZXR0aW5ncyA9IHNlbGYuYWpheFNldHRpbmdzLCBmbGFnID0gc2VsZi5tZXJnZUFqYXhDYWxsYmFja3MsIHRhcmdGdW5jO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdkZWxldGUnKSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MgPSBzZWxmLmFqYXhEZWxldGVTZXR0aW5ncztcbiAgICAgICAgICAgICAgICBmbGFnID0gc2VsZi5tZXJnZUFqYXhEZWxldGVDYWxsYmFja3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnRnVuYyA9IHNldHRpbmdzW2Z1bmNOYW1lXTtcbiAgICAgICAgICAgIGlmIChmbGFnICYmIHR5cGVvZiB0YXJnRnVuYyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZsYWcgPT09ICdiZWZvcmUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzW2Z1bmNOYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcmNGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NbZnVuY05hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ0Z1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzW2Z1bmNOYW1lXSA9IHNyY0Z1bmM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2RlbGV0ZScpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmFqYXhEZWxldGVTZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLmFqYXhTZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfYWpheFN1Ym1pdDogZnVuY3Rpb24gKGZuQmVmb3JlLCBmblN1Y2Nlc3MsIGZuQ29tcGxldGUsIGZuRXJyb3IsIHByZXZpZXdJZCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgc2V0dGluZ3M7XG4gICAgICAgICAgICBpZiAoIXNlbGYuX3JhaXNlKCdmaWxlcHJlYWpheCcsIFtwcmV2aWV3SWQsIGluZGV4XSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl91cGxvYWRFeHRyYShwcmV2aWV3SWQsIGluZGV4KTtcbiAgICAgICAgICAgIHNlbGYuX21lcmdlQWpheENhbGxiYWNrKCdiZWZvcmVTZW5kJywgZm5CZWZvcmUpO1xuICAgICAgICAgICAgc2VsZi5fbWVyZ2VBamF4Q2FsbGJhY2soJ3N1Y2Nlc3MnLCBmblN1Y2Nlc3MpO1xuICAgICAgICAgICAgc2VsZi5fbWVyZ2VBamF4Q2FsbGJhY2soJ2NvbXBsZXRlJywgZm5Db21wbGV0ZSk7XG4gICAgICAgICAgICBzZWxmLl9tZXJnZUFqYXhDYWxsYmFjaygnZXJyb3InLCBmbkVycm9yKTtcbiAgICAgICAgICAgIHNldHRpbmdzID0gJC5leHRlbmQodHJ1ZSwge30sIHtcbiAgICAgICAgICAgICAgICB4aHI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHhocm9iaiA9ICQuYWpheFNldHRpbmdzLnhocigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5faW5pdFhocih4aHJvYmosIHByZXZpZXdJZCwgc2VsZi5nZXRGaWxlU3RhY2soKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXJsOiBpbmRleCAmJiBzZWxmLnVwbG9hZFVybFRodW1iID8gc2VsZi51cGxvYWRVcmxUaHVtYiA6IHNlbGYudXBsb2FkVXJsLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgIGRhdGE6IHNlbGYuZm9ybWRhdGEsXG4gICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogZmFsc2VcbiAgICAgICAgICAgIH0sIHNlbGYuYWpheFNldHRpbmdzKTtcbiAgICAgICAgICAgIHNlbGYuYWpheFJlcXVlc3RzLnB1c2goJC5hamF4KHNldHRpbmdzKSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9tZXJnZUFycmF5OiBmdW5jdGlvbiAocHJvcCwgY29udGVudCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBhcnIxID0gJGguY2xlYW5BcnJheShzZWxmW3Byb3BdKSwgYXJyMiA9ICRoLmNsZWFuQXJyYXkoY29udGVudCk7XG4gICAgICAgICAgICBzZWxmW3Byb3BdID0gYXJyMS5jb25jYXQoYXJyMik7XG4gICAgICAgIH0sXG4gICAgICAgIF9pbml0VXBsb2FkU3VjY2VzczogZnVuY3Rpb24gKG91dCwgJHRodW1iLCBhbGxGaWxlcykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBhcHBlbmQsIGRhdGEsIGluZGV4LCAkZGl2LCAkbmV3Q2FjaGUsIGNvbnRlbnQsIGNvbmZpZywgdGFncywgaTtcbiAgICAgICAgICAgIGlmICghc2VsZi5zaG93UHJldmlldyB8fCB0eXBlb2Ygb3V0ICE9PSAnb2JqZWN0JyB8fCAkLmlzRW1wdHlPYmplY3Qob3V0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvdXQuaW5pdGlhbFByZXZpZXcgIT09IHVuZGVmaW5lZCAmJiBvdXQuaW5pdGlhbFByZXZpZXcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNlbGYuaGFzSW5pdERhdGEgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBvdXQuaW5pdGlhbFByZXZpZXcgfHwgW107XG4gICAgICAgICAgICAgICAgY29uZmlnID0gb3V0LmluaXRpYWxQcmV2aWV3Q29uZmlnIHx8IFtdO1xuICAgICAgICAgICAgICAgIHRhZ3MgPSBvdXQuaW5pdGlhbFByZXZpZXdUaHVtYlRhZ3MgfHwgW107XG4gICAgICAgICAgICAgICAgYXBwZW5kID0gb3V0LmFwcGVuZCA9PT0gdW5kZWZpbmVkIHx8IG91dC5hcHBlbmQ7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQubGVuZ3RoID4gMCAmJiAhJGguaXNBcnJheShjb250ZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5zcGxpdChzZWxmLmluaXRpYWxQcmV2aWV3RGVsaW1pdGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZi5fbWVyZ2VBcnJheSgnaW5pdGlhbFByZXZpZXcnLCBjb250ZW50KTtcbiAgICAgICAgICAgICAgICBzZWxmLl9tZXJnZUFycmF5KCdpbml0aWFsUHJldmlld0NvbmZpZycsIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgc2VsZi5fbWVyZ2VBcnJheSgnaW5pdGlhbFByZXZpZXdUaHVtYlRhZ3MnLCB0YWdzKTtcbiAgICAgICAgICAgICAgICBpZiAoJHRodW1iICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxGaWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBzZWxmLnByZXZpZXdDYWNoZS5hZGQoY29udGVudCwgY29uZmlnWzBdLCB0YWdzWzBdLCBhcHBlbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHNlbGYucHJldmlld0NhY2hlLmdldChpbmRleCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGRpdiA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmh0bWwoZGF0YSkuaGlkZSgpLmluc2VydEFmdGVyKCR0aHVtYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbmV3Q2FjaGUgPSAkZGl2LmZpbmQoJy5rdi16b29tLWNhY2hlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJG5ld0NhY2hlICYmICRuZXdDYWNoZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbmV3Q2FjaGUuaW5zZXJ0QWZ0ZXIoJHRodW1iKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICR0aHVtYi5mYWRlT3V0KCdzbG93JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkbmV3VGh1bWIgPSAkZGl2LmZpbmQoJy5maWxlLXByZXZpZXctZnJhbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJG5ld1RodW1iICYmICRuZXdUaHVtYi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG5ld1RodW1iLmluc2VydEJlZm9yZSgkdGh1bWIpLmZhZGVJbignc2xvdycpLmNzcygnZGlzcGxheTppbmxpbmUtYmxvY2snKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5faW5pdFByZXZpZXdBY3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2xlYXJGaWxlSW5wdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaC5jbGVhblpvb21DYWNoZShzZWxmLiRwcmV2aWV3LmZpbmQoJyN6b29tLScgKyAkdGh1bWIuYXR0cignaWQnKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aHVtYi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGl2LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2luaXRTb3J0YWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gJHRodW1iLmF0dHIoJ2RhdGEtZmlsZWluZGV4Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnVwbG9hZENhY2hlLmNvbnRlbnRbaV0gPSBjb250ZW50WzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGxvYWRDYWNoZS5jb25maWdbaV0gPSBjb25maWdbMF0gfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnVwbG9hZENhY2hlLnRhZ3NbaV0gPSB0YWdzWzBdIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGxvYWRDYWNoZS5hcHBlbmQgPSBhcHBlbmQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnByZXZpZXdDYWNoZS5zZXQoY29udGVudCwgY29uZmlnLCB0YWdzLCBhcHBlbmQpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbml0UHJldmlldygpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbml0UHJldmlld0FjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9pbml0U3VjY2Vzc1RodW1iczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCFzZWxmLnNob3dQcmV2aWV3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5fZ2V0VGh1bWJzKCRoLkZSQU1FUyArICcuZmlsZS1wcmV2aWV3LXN1Y2Nlc3MnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgJHRodW1iID0gJCh0aGlzKSwgJHByZXZpZXcgPSBzZWxmLiRwcmV2aWV3LCAkcmVtb3ZlID0gJHRodW1iLmZpbmQoJy5rdi1maWxlLXJlbW92ZScpO1xuICAgICAgICAgICAgICAgICRyZW1vdmUucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9oYW5kbGVyKCRyZW1vdmUsICdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gJHRodW1iLmF0dHIoJ2lkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgPSBzZWxmLl9yYWlzZSgnZmlsZXN1Y2Nlc3NyZW1vdmUnLCBbaWQsICR0aHVtYi5hdHRyKCdkYXRhLWZpbGVpbmRleCcpXSk7XG4gICAgICAgICAgICAgICAgICAgICRoLmNsZWFuTWVtb3J5KCR0aHVtYik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHRodW1iLmZhZGVPdXQoJ3Nsb3cnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaC5jbGVhblpvb21DYWNoZSgkcHJldmlldy5maW5kKCcjem9vbS0nICsgaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aHVtYi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5nZXRGcmFtZXMoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9jaGVja0FzeW5jQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgcHJldmlld0lkLCBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlbGYuZmlsZXN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuZmlsZXN0YWNrW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpZXdJZCA9IHNlbGYucHJldmlld0luaXRJZCArIFwiLVwiICsgaTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQuaW5BcnJheShwcmV2aWV3SWQsIHNlbGYudXBsb2FkTG9nKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoc2VsZi51cGxvYWRBc3luY0NvdW50ID09PSBzZWxmLnVwbG9hZExvZy5sZW5ndGgpO1xuICAgICAgICB9LFxuICAgICAgICBfdXBsb2FkRXh0cmE6IGZ1bmN0aW9uIChwcmV2aWV3SWQsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIGRhdGEgPSBzZWxmLl9nZXRFeHRyYURhdGEocHJldmlld0lkLCBpbmRleCk7XG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkLmVhY2goZGF0YSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmZvcm1kYXRhLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfdXBsb2FkU2luZ2xlOiBmdW5jdGlvbiAoaSwgaXNCYXRjaCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCB0b3RhbCA9IHNlbGYuZ2V0RmlsZVN0YWNrKCkubGVuZ3RoLCBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSgpLCBvdXREYXRhLFxuICAgICAgICAgICAgICAgIHByZXZpZXdJZCA9IHNlbGYucHJldmlld0luaXRJZCArIFwiLVwiICsgaSwgJHRodW1iLCBjaGtDb21wbGV0ZSwgJGJ0blVwbG9hZCwgJGJ0bkRlbGV0ZSxcbiAgICAgICAgICAgICAgICBoYXNQb3N0RGF0YSA9IHNlbGYuZmlsZXN0YWNrLmxlbmd0aCA+IDAgfHwgISQuaXNFbXB0eU9iamVjdChzZWxmLnVwbG9hZEV4dHJhRGF0YSksIHVwbG9hZEZhaWxlZCxcbiAgICAgICAgICAgICAgICAkcHJvZyA9ICQoJyMnICsgcHJldmlld0lkKS5maW5kKCcuZmlsZS10aHVtYi1wcm9ncmVzcycpLCBmbkJlZm9yZSwgZm5TdWNjZXNzLCBmbkNvbXBsZXRlLCBmbkVycm9yLFxuICAgICAgICAgICAgICAgIHVwZGF0ZVVwbG9hZExvZywgcGFyYW1zID0ge2lkOiBwcmV2aWV3SWQsIGluZGV4OiBpfTtcbiAgICAgICAgICAgIHNlbGYuZm9ybWRhdGEgPSBmb3JtZGF0YTtcbiAgICAgICAgICAgIGlmIChzZWxmLnNob3dQcmV2aWV3KSB7XG4gICAgICAgICAgICAgICAgJHRodW1iID0gJCgnIycgKyBwcmV2aWV3SWQgKyAnOm5vdCguZmlsZS1wcmV2aWV3LWluaXRpYWwpJyk7XG4gICAgICAgICAgICAgICAgJGJ0blVwbG9hZCA9ICR0aHVtYi5maW5kKCcua3YtZmlsZS11cGxvYWQnKTtcbiAgICAgICAgICAgICAgICAkYnRuRGVsZXRlID0gJHRodW1iLmZpbmQoJy5rdi1maWxlLXJlbW92ZScpO1xuICAgICAgICAgICAgICAgICRwcm9nLnNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b3RhbCA9PT0gMCB8fCAhaGFzUG9zdERhdGEgfHwgKCRidG5VcGxvYWQgJiYgJGJ0blVwbG9hZC5oYXNDbGFzcygnZGlzYWJsZWQnKSkgfHwgc2VsZi5fYWJvcnQocGFyYW1zKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZVVwbG9hZExvZyA9IGZ1bmN0aW9uIChpLCBwcmV2aWV3SWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXVwbG9hZEZhaWxlZCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZVN0YWNrKGksIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYudXBsb2FkTG9nLnB1c2gocHJldmlld0lkKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5fY2hlY2tBc3luY0NvbXBsZXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5maWxlQmF0Y2hDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjaGtDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdSA9IHNlbGYudXBsb2FkQ2FjaGUsICRpbml0VGh1bWJzLCBpLCBqLCBsZW4gPSAwLCBkYXRhID0gc2VsZi5jYWNoZUluaXRpYWxQcmV2aWV3O1xuICAgICAgICAgICAgICAgIGlmICghc2VsZi5maWxlQmF0Y2hDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVuID0gZGF0YS5jb250ZW50Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyUmVzZXQgPSBzZWxmLmdldEZpbGVTdGFjayh0cnVlKS5sZW5ndGggPT09IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnNob3dQcmV2aWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByZXZpZXdDYWNoZS5zZXQodS5jb250ZW50LCB1LmNvbmZpZywgdS50YWdzLCB1LmFwcGVuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHUuY29udGVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gaSArIGxlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb250ZW50W2pdID0gdS5jb250ZW50W2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5jb25maWcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbmZpZ1tqXSA9IHUuY29uZmlnW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnRhZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRhZ3Nbal0gPSB1LnRhZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0aWFsUHJldmlldyA9ICRoLmNsZWFuQXJyYXkoZGF0YS5jb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmluaXRpYWxQcmV2aWV3Q29uZmlnID0gJGguY2xlYW5BcnJheShkYXRhLmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0aWFsUHJldmlld1RodW1iVGFncyA9ICRoLmNsZWFuQXJyYXkoZGF0YS50YWdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0aWFsUHJldmlldyA9IHUuY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmluaXRpYWxQcmV2aWV3Q29uZmlnID0gdS5jb25maWc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0aWFsUHJldmlld1RodW1iVGFncyA9IHUudGFncztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FjaGVJbml0aWFsUHJldmlldyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuaGFzSW5pdERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbml0UHJldmlldygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2luaXRQcmV2aWV3QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudW5sb2NrKHRyaWdnZXJSZXNldCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyUmVzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2NsZWFyRmlsZUlucHV0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJGluaXRUaHVtYnMgPSBzZWxmLiRwcmV2aWV3LmZpbmQoJy5maWxlLXByZXZpZXctaW5pdGlhbCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi51cGxvYWRBc3luYyAmJiAkaW5pdFRodW1icy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRoLmFkZENzcygkaW5pdFRodW1icywgJGguU09SVF9DU1MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5faW5pdFNvcnRhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGViYXRjaHVwbG9hZGNvbXBsZXRlJywgW3NlbGYuZmlsZXN0YWNrLCBzZWxmLl9nZXRFeHRyYURhdGEoKV0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwbG9hZENvdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGxvYWRTdGF0dXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGxvYWRMb2cgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2V0UHJvZ3Jlc3MoMTAxKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hamF4QWJvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm5CZWZvcmUgPSBmdW5jdGlvbiAoanFYSFIpIHtcbiAgICAgICAgICAgICAgICBvdXREYXRhID0gc2VsZi5fZ2V0T3V0RGF0YShqcVhIUik7XG4gICAgICAgICAgICAgICAgc2VsZi5maWxlQmF0Y2hDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQmF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hamF4QWJvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5zaG93UHJldmlldykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISR0aHVtYi5oYXNDbGFzcygnZmlsZS1wcmV2aWV3LXN1Y2Nlc3MnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2V0VGh1bWJTdGF0dXMoJHRodW1iLCAnTG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGguYWRkQ3NzKCR0aHVtYiwgJ2ZpbGUtdXBsb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJGJ0blVwbG9hZC5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAkYnRuRGVsZXRlLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNCYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGVwcmV1cGxvYWQnLCBbb3V0RGF0YSwgcHJldmlld0lkLCBpXSk7XG4gICAgICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgcGFyYW1zLCBvdXREYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5fYWJvcnQocGFyYW1zKSkge1xuICAgICAgICAgICAgICAgICAgICBqcVhIUi5hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQmF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldFRodW1iU3RhdHVzKCR0aHVtYiwgJ05ldycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRodW1iLnJlbW92ZUNsYXNzKCdmaWxlLXVwbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGJ0blVwbG9hZC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGJ0bkRlbGV0ZS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51bmxvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZXRQcm9ncmVzc0NhbmNlbGxlZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmblN1Y2Nlc3MgPSBmdW5jdGlvbiAoZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGlkID0gc2VsZi5zaG93UHJldmlldyAmJiAkdGh1bWIuYXR0cignaWQnKSA/ICR0aHVtYi5hdHRyKCdpZCcpIDogcHJldmlld0lkO1xuICAgICAgICAgICAgICAgIG91dERhdGEgPSBzZWxmLl9nZXRPdXREYXRhKGpxWEhSLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAkLmV4dGVuZCh0cnVlLCBwYXJhbXMsIG91dERhdGEpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJGguaXNFbXB0eShkYXRhKSB8fCAkaC5pc0VtcHR5KGRhdGEuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5zaG93UHJldmlldykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldFRodW1iU3RhdHVzKCR0aHVtYiwgJ1N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYnRuVXBsb2FkLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbml0VXBsb2FkU3VjY2VzcyhkYXRhLCAkdGh1bWIsIGlzQmF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldFByb2dyZXNzKDEwMSwgJHByb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGV1cGxvYWRlZCcsIFtvdXREYXRhLCBwaWQsIGldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNCYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlU3RhY2soaSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVXBsb2FkTG9nKGksIHBpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRGYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2hvd1VwbG9hZEVycm9yKGRhdGEuZXJyb3IsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZXRQcmV2aWV3RXJyb3IoJHRodW1iLCBpLCBzZWxmLmZpbGVzdGFja1tpXSwgc2VsZi5yZXRyeUVycm9yVXBsb2Fkcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYucmV0cnlFcnJvclVwbG9hZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYnRuVXBsb2FkLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0JhdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVXBsb2FkTG9nKGksIHBpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZXRQcm9ncmVzcygxMDEsICQoJyMnICsgcGlkKS5maW5kKCcuZmlsZS10aHVtYi1wcm9ncmVzcycpLCBzZWxmLm1zZ1VwbG9hZEVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm5Db21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuc2hvd1ByZXZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRidG5VcGxvYWQucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRidG5EZWxldGUucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aHVtYi5yZW1vdmVDbGFzcygnZmlsZS11cGxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQmF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudW5sb2NrKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2NsZWFyRmlsZUlucHV0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGtDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2luaXRTdWNjZXNzVGh1bWJzKCk7XG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmbkVycm9yID0gZnVuY3Rpb24gKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIHZhciBvcCA9IHNlbGYuYWpheE9wZXJhdGlvbnMudXBsb2FkVGh1bWIsXG4gICAgICAgICAgICAgICAgICAgIGVyck1zZyA9IHNlbGYuX3BhcnNlRXJyb3Iob3AsIGpxWEhSLCBlcnJvclRocm93biwgKGlzQmF0Y2ggJiYgc2VsZi5maWxlc3RhY2tbaV0ubmFtZSA/IHNlbGYuZmlsZXN0YWNrW2ldLm5hbWUgOiBudWxsKSk7XG4gICAgICAgICAgICAgICAgdXBsb2FkRmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQmF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVVwbG9hZExvZyhpLCBwcmV2aWV3SWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBsb2FkU3RhdHVzW3ByZXZpZXdJZF0gPSAxMDA7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldFByZXZpZXdFcnJvcigkdGh1bWIsIGksIHNlbGYuZmlsZXN0YWNrW2ldLCBzZWxmLnJldHJ5RXJyb3JVcGxvYWRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnJldHJ5RXJyb3JVcGxvYWRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkYnRuVXBsb2FkLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkLmV4dGVuZCh0cnVlLCBwYXJhbXMsIHNlbGYuX2dldE91dERhdGEoanFYSFIpKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2V0UHJvZ3Jlc3MoMTAxLCAkcHJvZywgc2VsZi5tc2dBamF4UHJvZ3Jlc3NFcnJvci5yZXBsYWNlKCd7b3BlcmF0aW9ufScsIG9wKSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldFByb2dyZXNzKDEwMSwgJCgnIycgKyBwcmV2aWV3SWQpLmZpbmQoJy5maWxlLXRodW1iLXByb2dyZXNzJyksIHNlbGYubXNnVXBsb2FkRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9zaG93VXBsb2FkRXJyb3IoZXJyTXNnLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9ybWRhdGEuYXBwZW5kKHNlbGYudXBsb2FkRmlsZUF0dHIsIHNlbGYuZmlsZXN0YWNrW2ldLCBzZWxmLmZpbGVuYW1lc1tpXSk7XG4gICAgICAgICAgICBmb3JtZGF0YS5hcHBlbmQoJ2ZpbGVfaWQnLCBpKTtcbiAgICAgICAgICAgIHNlbGYuX2FqYXhTdWJtaXQoZm5CZWZvcmUsIGZuU3VjY2VzcywgZm5Db21wbGV0ZSwgZm5FcnJvciwgcHJldmlld0lkLCBpKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3VwbG9hZEJhdGNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIGZpbGVzID0gc2VsZi5maWxlc3RhY2ssIHRvdGFsID0gZmlsZXMubGVuZ3RoLCBwYXJhbXMgPSB7fSwgZm5CZWZvcmUsIGZuU3VjY2VzcywgZm5FcnJvcixcbiAgICAgICAgICAgICAgICBmbkNvbXBsZXRlLCBoYXNQb3N0RGF0YSA9IHNlbGYuZmlsZXN0YWNrLmxlbmd0aCA+IDAgfHwgISQuaXNFbXB0eU9iamVjdChzZWxmLnVwbG9hZEV4dHJhRGF0YSksXG4gICAgICAgICAgICAgICAgc2V0QWxsVXBsb2FkZWQ7XG4gICAgICAgICAgICBzZWxmLmZvcm1kYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICBpZiAodG90YWwgPT09IDAgfHwgIWhhc1Bvc3REYXRhIHx8IHNlbGYuX2Fib3J0KHBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRBbGxVcGxvYWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkLmVhY2goZmlsZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGVTdGFjayhrZXksIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2VsZi5fY2xlYXJGaWxlSW5wdXQoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmbkJlZm9yZSA9IGZ1bmN0aW9uIChqcVhIUikge1xuICAgICAgICAgICAgICAgIHNlbGYubG9jaygpO1xuICAgICAgICAgICAgICAgIHZhciBvdXREYXRhID0gc2VsZi5fZ2V0T3V0RGF0YShqcVhIUik7XG4gICAgICAgICAgICAgICAgc2VsZi5hamF4QWJvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNob3dQcmV2aWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2dldFRodW1icygpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICR0aHVtYiA9ICQodGhpcyksICRidG5VcGxvYWQgPSAkdGh1bWIuZmluZCgnLmt2LWZpbGUtdXBsb2FkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJ0bkRlbGV0ZSA9ICR0aHVtYi5maW5kKCcua3YtZmlsZS1yZW1vdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJHRodW1iLmhhc0NsYXNzKCdmaWxlLXByZXZpZXctc3VjY2VzcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2V0VGh1bWJTdGF0dXMoJHRodW1iLCAnTG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRoLmFkZENzcygkdGh1bWIsICdmaWxlLXVwbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgJGJ0blVwbG9hZC5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGJ0bkRlbGV0ZS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGViYXRjaHByZXVwbG9hZCcsIFtvdXREYXRhXSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuX2Fib3J0KG91dERhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGpxWEhSLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2dldFRodW1icygpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICR0aHVtYiA9ICQodGhpcyksICRidG5VcGxvYWQgPSAkdGh1bWIuZmluZCgnLmt2LWZpbGUtdXBsb2FkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJ0bkRlbGV0ZSA9ICR0aHVtYi5maW5kKCcua3YtZmlsZS1yZW1vdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdGh1bWIuaGFzQ2xhc3MoJ2ZpbGUtcHJldmlldy1sb2FkaW5nJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZXRUaHVtYlN0YXR1cygkdGh1bWIsICdOZXcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGh1bWIucmVtb3ZlQ2xhc3MoJ2ZpbGUtdXBsb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAkYnRuVXBsb2FkLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkYnRuRGVsZXRlLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZXRQcm9ncmVzc0NhbmNlbGxlZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmblN1Y2Nlc3MgPSBmdW5jdGlvbiAoZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHtcbiAgICAgICAgICAgICAgICAvKiogQG5hbWVzcGFjZSBkYXRhLmVycm9ya2V5cyAqL1xuICAgICAgICAgICAgICAgIHZhciBvdXREYXRhID0gc2VsZi5fZ2V0T3V0RGF0YShqcVhIUiwgZGF0YSksIGtleSA9IDAsXG4gICAgICAgICAgICAgICAgICAgICR0aHVtYnMgPSBzZWxmLl9nZXRUaHVtYnMoJzpub3QoLmZpbGUtcHJldmlldy1zdWNjZXNzKScpLFxuICAgICAgICAgICAgICAgICAgICBrZXlzID0gJGguaXNFbXB0eShkYXRhKSB8fCAkaC5pc0VtcHR5KGRhdGEuZXJyb3JrZXlzKSA/IFtdIDogZGF0YS5lcnJvcmtleXM7XG5cbiAgICAgICAgICAgICAgICBpZiAoJGguaXNFbXB0eShkYXRhKSB8fCAkaC5pc0VtcHR5KGRhdGEuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlYmF0Y2h1cGxvYWRzdWNjZXNzJywgW291dERhdGFdKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0QWxsVXBsb2FkZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuc2hvd1ByZXZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aHVtYnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICR0aHVtYiA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2V0VGh1bWJTdGF0dXMoJHRodW1iLCAnU3VjY2VzcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aHVtYi5yZW1vdmVDbGFzcygnZmlsZS11cGxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGh1bWIuZmluZCgnLmt2LWZpbGUtdXBsb2FkJykuaGlkZSgpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2luaXRVcGxvYWRTdWNjZXNzKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldFByb2dyZXNzKDEwMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuc2hvd1ByZXZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aHVtYnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICR0aHVtYiA9ICQodGhpcyksIGkgPSAkdGh1bWIuYXR0cignZGF0YS1maWxlaW5kZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGh1bWIucmVtb3ZlQ2xhc3MoJ2ZpbGUtdXBsb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRodW1iLmZpbmQoJy5rdi1maWxlLXVwbG9hZCcpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRodW1iLmZpbmQoJy5rdi1maWxlLXJlbW92ZScpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAwIHx8ICQuaW5BcnJheShrZXksIGtleXMpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZXRQcmV2aWV3RXJyb3IoJHRodW1iLCBpLCBzZWxmLmZpbGVzdGFja1tpXSwgc2VsZi5yZXRyeUVycm9yVXBsb2Fkcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5yZXRyeUVycm9yVXBsb2Fkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRodW1iLmZpbmQoJy5rdi1maWxlLXVwbG9hZCcpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlU3RhY2soaSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aHVtYi5maW5kKCcua3YtZmlsZS11cGxvYWQnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldFRodW1iU3RhdHVzKCR0aHVtYiwgJ1N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGVTdGFjayhpLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISR0aHVtYi5oYXNDbGFzcygnZmlsZS1wcmV2aWV3LWVycm9yJykgfHwgc2VsZi5yZXRyeUVycm9yVXBsb2Fkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2luaXRVcGxvYWRTdWNjZXNzKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3Nob3dVcGxvYWRFcnJvcihkYXRhLmVycm9yLCBvdXREYXRhLCAnZmlsZWJhdGNodXBsb2FkZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2V0UHJvZ3Jlc3MoMTAxLCBzZWxmLiRwcm9ncmVzcywgc2VsZi5tc2dVcGxvYWRFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZuQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi51bmxvY2soKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9pbml0U3VjY2Vzc1RodW1icygpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2NsZWFyRmlsZUlucHV0KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGViYXRjaHVwbG9hZGNvbXBsZXRlJywgW3NlbGYuZmlsZXN0YWNrLCBzZWxmLl9nZXRFeHRyYURhdGEoKV0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZuRXJyb3IgPSBmdW5jdGlvbiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdmFyIG91dERhdGEgPSBzZWxmLl9nZXRPdXREYXRhKGpxWEhSKSwgb3AgPSBzZWxmLmFqYXhPcGVyYXRpb25zLnVwbG9hZEJhdGNoLFxuICAgICAgICAgICAgICAgICAgICBlcnJNc2cgPSBzZWxmLl9wYXJzZUVycm9yKG9wLCBqcVhIUiwgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgIHNlbGYuX3Nob3dVcGxvYWRFcnJvcihlcnJNc2csIG91dERhdGEsICdmaWxlYmF0Y2h1cGxvYWRlcnJvcicpO1xuICAgICAgICAgICAgICAgIHNlbGYudXBsb2FkRmlsZUNvdW50ID0gdG90YWwgLSAxO1xuICAgICAgICAgICAgICAgIGlmICghc2VsZi5zaG93UHJldmlldykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuX2dldFRodW1icygpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJHRodW1iID0gJCh0aGlzKSwga2V5ID0gJHRodW1iLmF0dHIoJ2RhdGEtZmlsZWluZGV4Jyk7XG4gICAgICAgICAgICAgICAgICAgICR0aHVtYi5yZW1vdmVDbGFzcygnZmlsZS11cGxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuZmlsZXN0YWNrW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2V0UHJldmlld0Vycm9yKCR0aHVtYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzZWxmLl9nZXRUaHVtYnMoKS5yZW1vdmVDbGFzcygnZmlsZS11cGxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9nZXRUaHVtYnMoJyAua3YtZmlsZS11cGxvYWQnKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2dldFRodW1icygnIC5rdi1maWxlLWRlbGV0ZScpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgc2VsZi5fc2V0UHJvZ3Jlc3MoMTAxLCBzZWxmLiRwcm9ncmVzcywgc2VsZi5tc2dBamF4UHJvZ3Jlc3NFcnJvci5yZXBsYWNlKCd7b3BlcmF0aW9ufScsIG9wKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJC5lYWNoKGZpbGVzLCBmdW5jdGlvbiAoa2V5LCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkaC5pc0VtcHR5KGZpbGVzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZm9ybWRhdGEuYXBwZW5kKHNlbGYudXBsb2FkRmlsZUF0dHIsIGRhdGEsIHNlbGYuZmlsZW5hbWVzW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZi5fYWpheFN1Ym1pdChmbkJlZm9yZSwgZm5TdWNjZXNzLCBmbkNvbXBsZXRlLCBmbkVycm9yKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3VwbG9hZEV4dHJhT25seTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBwYXJhbXMgPSB7fSwgZm5CZWZvcmUsIGZuU3VjY2VzcywgZm5Db21wbGV0ZSwgZm5FcnJvcjtcbiAgICAgICAgICAgIHNlbGYuZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgIGlmIChzZWxmLl9hYm9ydChwYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm5CZWZvcmUgPSBmdW5jdGlvbiAoanFYSFIpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmxvY2soKTtcbiAgICAgICAgICAgICAgICB2YXIgb3V0RGF0YSA9IHNlbGYuX2dldE91dERhdGEoanFYSFIpO1xuICAgICAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlYmF0Y2hwcmV1cGxvYWQnLCBbb3V0RGF0YV0pO1xuICAgICAgICAgICAgICAgIHNlbGYuX3NldFByb2dyZXNzKDUwKTtcbiAgICAgICAgICAgICAgICBwYXJhbXMuZGF0YSA9IG91dERhdGE7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnhociA9IGpxWEhSO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLl9hYm9ydChwYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGpxWEhSLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldFByb2dyZXNzQ2FuY2VsbGVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZuU3VjY2VzcyA9IGZ1bmN0aW9uIChkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuICAgICAgICAgICAgICAgIHZhciBvdXREYXRhID0gc2VsZi5fZ2V0T3V0RGF0YShqcVhIUiwgZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKCRoLmlzRW1wdHkoZGF0YSkgfHwgJGguaXNFbXB0eShkYXRhLmVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9yYWlzZSgnZmlsZWJhdGNodXBsb2Fkc3VjY2VzcycsIFtvdXREYXRhXSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2NsZWFyRmlsZUlucHV0KCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2luaXRVcGxvYWRTdWNjZXNzKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZXRQcm9ncmVzcygxMDEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3Nob3dVcGxvYWRFcnJvcihkYXRhLmVycm9yLCBvdXREYXRhLCAnZmlsZWJhdGNodXBsb2FkZXJyb3InKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm5Db21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnVubG9jaygpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2NsZWFyRmlsZUlucHV0KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGViYXRjaHVwbG9hZGNvbXBsZXRlJywgW3NlbGYuZmlsZXN0YWNrLCBzZWxmLl9nZXRFeHRyYURhdGEoKV0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZuRXJyb3IgPSBmdW5jdGlvbiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdmFyIG91dERhdGEgPSBzZWxmLl9nZXRPdXREYXRhKGpxWEhSKSwgb3AgPSBzZWxmLmFqYXhPcGVyYXRpb25zLnVwbG9hZEV4dHJhLFxuICAgICAgICAgICAgICAgICAgICBlcnJNc2cgPSBzZWxmLl9wYXJzZUVycm9yKG9wLCBqcVhIUiwgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5kYXRhID0gb3V0RGF0YTtcbiAgICAgICAgICAgICAgICBzZWxmLl9zaG93VXBsb2FkRXJyb3IoZXJyTXNnLCBvdXREYXRhLCAnZmlsZWJhdGNodXBsb2FkZXJyb3InKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9zZXRQcm9ncmVzcygxMDEsIHNlbGYuJHByb2dyZXNzLCBzZWxmLm1zZ0FqYXhQcm9ncmVzc0Vycm9yLnJlcGxhY2UoJ3tvcGVyYXRpb259Jywgb3ApKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzZWxmLl9hamF4U3VibWl0KGZuQmVmb3JlLCBmblN1Y2Nlc3MsIGZuQ29tcGxldGUsIGZuRXJyb3IpO1xuICAgICAgICB9LFxuICAgICAgICBfZGVsZXRlRmlsZUluZGV4OiBmdW5jdGlvbiAoJGZyYW1lKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIGluZCA9ICRmcmFtZS5hdHRyKCdkYXRhLWZpbGVpbmRleCcpO1xuICAgICAgICAgICAgaWYgKGluZC5zdWJzdHJpbmcoMCwgNSkgPT09ICdpbml0XycpIHtcbiAgICAgICAgICAgICAgICBpbmQgPSBwYXJzZUludChpbmQucmVwbGFjZSgnaW5pdF8nLCAnJykpO1xuICAgICAgICAgICAgICAgIHNlbGYuaW5pdGlhbFByZXZpZXcgPSAkaC5zcGxpY2VBcnJheShzZWxmLmluaXRpYWxQcmV2aWV3LCBpbmQpO1xuICAgICAgICAgICAgICAgIHNlbGYuaW5pdGlhbFByZXZpZXdDb25maWcgPSAkaC5zcGxpY2VBcnJheShzZWxmLmluaXRpYWxQcmV2aWV3Q29uZmlnLCBpbmQpO1xuICAgICAgICAgICAgICAgIHNlbGYuaW5pdGlhbFByZXZpZXdUaHVtYlRhZ3MgPSAkaC5zcGxpY2VBcnJheShzZWxmLmluaXRpYWxQcmV2aWV3VGh1bWJUYWdzLCBpbmQpO1xuICAgICAgICAgICAgICAgIHNlbGYuZ2V0RnJhbWVzKCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkbkZyYW1lID0gJCh0aGlzKSwgbkluZCA9ICRuRnJhbWUuYXR0cignZGF0YS1maWxlaW5kZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5JbmQuc3Vic3RyaW5nKDAsIDUpID09PSAnaW5pdF8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuSW5kID0gcGFyc2VJbnQobkluZC5yZXBsYWNlKCdpbml0XycsICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobkluZCA+IGluZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5JbmQtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbkZyYW1lLmF0dHIoJ2RhdGEtZmlsZWluZGV4JywgJ2luaXRfJyArIG5JbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYudXBsb2FkQXN5bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWNoZUluaXRpYWxQcmV2aWV3ID0gc2VsZi5nZXRQcmV2aWV3KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfaW5pdEZpbGVBY3Rpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRwcmV2aWV3ID0gc2VsZi4kcHJldmlldztcbiAgICAgICAgICAgIGlmICghc2VsZi5zaG93UHJldmlldykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX2luaXRab29tQnV0dG9uKCk7XG4gICAgICAgICAgICBzZWxmLmdldEZyYW1lcygnIC5rdi1maWxlLXJlbW92ZScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciAkZWwgPSAkKHRoaXMpLCAkZnJhbWUgPSAkZWwuY2xvc2VzdCgkaC5GUkFNRVMpLCBoYXNFcnJvciwgaWQgPSAkZnJhbWUuYXR0cignaWQnKSxcbiAgICAgICAgICAgICAgICAgICAgaW5kID0gJGZyYW1lLmF0dHIoJ2RhdGEtZmlsZWluZGV4JyksIG4sIGNhcCwgc3RhdHVzO1xuICAgICAgICAgICAgICAgIHNlbGYuX2hhbmRsZXIoJGVsLCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IHNlbGYuX3JhaXNlKCdmaWxlcHJlcmVtb3ZlJywgW2lkLCBpbmRdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gZmFsc2UgfHwgIXNlbGYuX3ZhbGlkYXRlTWluQ291bnQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gJGZyYW1lLmhhc0NsYXNzKCdmaWxlLXByZXZpZXctZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgJGguY2xlYW5NZW1vcnkoJGZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgJGZyYW1lLmZhZGVPdXQoJ3Nsb3cnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaC5jbGVhblpvb21DYWNoZSgkcHJldmlldy5maW5kKCcjem9vbS0nICsgaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlU3RhY2soaW5kLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2xlYXJPYmplY3RzKCRmcmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkZnJhbWUucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWQgJiYgaGFzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRlcnJvckNvbnRhaW5lci5maW5kKCdsaVtkYXRhLWZpbGUtaWQ9XCInICsgaWQgKyAnXCJdJykuZmFkZU91dCgnZmFzdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLl9lcnJvcnNFeGlzdCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9yZXNldEVycm9ycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9jbGVhckZpbGVJbnB1dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVzdGFjayA9IHNlbGYuZ2V0RmlsZVN0YWNrKHRydWUpLCBjaGsgPSBzZWxmLnByZXZpZXdDYWNoZS5jb3VudCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IGZpbGVzdGFjay5sZW5ndGgsIGhhc1RodW1iID0gc2VsZi5zaG93UHJldmlldyAmJiBzZWxmLmdldEZyYW1lcygpLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4gPT09IDAgJiYgY2hrID09PSAwICYmICFoYXNUaHVtYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGNoayArIGxlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXAgPSBuID4gMSA/IHNlbGYuX2dldE1zZ1NlbGVjdGVkKG4pIDogKGZpbGVzdGFja1swXSA/IHNlbGYuX2dldEZpbGVOYW1lcygpWzBdIDogJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldENhcHRpb24oY2FwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlcmVtb3ZlZCcsIFtpZCwgaW5kXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxmLmdldEZyYW1lcygnIC5rdi1maWxlLXVwbG9hZCcpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciAkZWwgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2hhbmRsZXIoJGVsLCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkZnJhbWUgPSAkZWwuY2xvc2VzdCgkaC5GUkFNRVMpLCBpbmQgPSAkZnJhbWUuYXR0cignZGF0YS1maWxlaW5kZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kcHJvZ3Jlc3MuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJGZyYW1lLmhhc0NsYXNzKCdmaWxlLXByZXZpZXctZXJyb3InKSAmJiAhc2VsZi5yZXRyeUVycm9yVXBsb2Fkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3VwbG9hZFNpbmdsZShpbmQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfaW5pdFByZXZpZXdBY3Rpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRwcmV2aWV3ID0gc2VsZi4kcHJldmlldywgZGVsZXRlRXh0cmFEYXRhID0gc2VsZi5kZWxldGVFeHRyYURhdGEgfHwge30sXG4gICAgICAgICAgICAgICAgYnRuUmVtb3ZlID0gJGguRlJBTUVTICsgJyAua3YtZmlsZS1yZW1vdmUnLCBzZXR0aW5ncyA9IHNlbGYuZmlsZUFjdGlvblNldHRpbmdzLFxuICAgICAgICAgICAgICAgIG9yaWdDbGFzcyA9IHNldHRpbmdzLnJlbW92ZUNsYXNzLCBlcnJDbGFzcyA9IHNldHRpbmdzLnJlbW92ZUVycm9yQ2xhc3MsXG4gICAgICAgICAgICAgICAgcmVzZXRQcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc0ZpbGVzID0gc2VsZi5pc0FqYXhVcGxvYWQgPyBzZWxmLnByZXZpZXdDYWNoZS5jb3VudCgpIDogc2VsZi4kZWxlbWVudC5nZXQoMCkuZmlsZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAoISRwcmV2aWV3LmZpbmQoJGguRlJBTUVTKS5sZW5ndGggJiYgIWhhc0ZpbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZXRDYXB0aW9uKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaW5pdGlhbENhcHRpb24gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzZWxmLl9pbml0Wm9vbUJ1dHRvbigpO1xuICAgICAgICAgICAgJHByZXZpZXcuZmluZChidG5SZW1vdmUpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciAkZWwgPSAkKHRoaXMpLCB2VXJsID0gJGVsLmRhdGEoJ3VybCcpIHx8IHNlbGYuZGVsZXRlVXJsLCB2S2V5ID0gJGVsLmRhdGEoJ2tleScpLFxuICAgICAgICAgICAgICAgICAgICBmbkJlZm9yZSwgZm5TdWNjZXNzLCBmbkVycm9yO1xuICAgICAgICAgICAgICAgIGlmICgkaC5pc0VtcHR5KHZVcmwpIHx8IHZLZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciAkZnJhbWUgPSAkZWwuY2xvc2VzdCgkaC5GUkFNRVMpLCBjYWNoZSA9IHNlbGYucHJldmlld0NhY2hlLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLCBwYXJhbXMsIGluZGV4ID0gJGZyYW1lLmF0dHIoJ2RhdGEtZmlsZWluZGV4JyksIGNvbmZpZywgZXh0cmFEYXRhO1xuICAgICAgICAgICAgICAgIGluZGV4ID0gcGFyc2VJbnQoaW5kZXgucmVwbGFjZSgnaW5pdF8nLCAnJykpO1xuICAgICAgICAgICAgICAgIGNvbmZpZyA9ICRoLmlzRW1wdHkoY2FjaGUuY29uZmlnKSAmJiAkaC5pc0VtcHR5KGNhY2hlLmNvbmZpZ1tpbmRleF0pID8gbnVsbCA6IGNhY2hlLmNvbmZpZ1tpbmRleF07XG4gICAgICAgICAgICAgICAgZXh0cmFEYXRhID0gJGguaXNFbXB0eShjb25maWcpIHx8ICRoLmlzRW1wdHkoY29uZmlnLmV4dHJhKSA/IGRlbGV0ZUV4dHJhRGF0YSA6IGNvbmZpZy5leHRyYTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV4dHJhRGF0YSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4dHJhRGF0YSA9IGV4dHJhRGF0YSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJhbXMgPSB7aWQ6ICRlbC5hdHRyKCdpZCcpLCBrZXk6IHZLZXksIGV4dHJhOiBleHRyYURhdGF9O1xuICAgICAgICAgICAgICAgIGZuQmVmb3JlID0gZnVuY3Rpb24gKGpxWEhSKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWpheEFib3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGVwcmVkZWxldGUnLCBbdktleSwganFYSFIsIGV4dHJhRGF0YV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5fYWJvcnQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAganFYSFIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRlbC5yZW1vdmVDbGFzcyhlcnJDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaC5hZGRDc3MoJGZyYW1lLCAnZmlsZS11cGxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRoLmFkZENzcygkZWwsICdkaXNhYmxlZCAnICsgb3JpZ0NsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZm5TdWNjZXNzID0gZnVuY3Rpb24gKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuLCBjYXA7XG4gICAgICAgICAgICAgICAgICAgIGlmICghJGguaXNFbXB0eShkYXRhKSAmJiAhJGguaXNFbXB0eShkYXRhLmVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmpxWEhSID0ganFYSFI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMucmVzcG9uc2UgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2hvd0Vycm9yKGRhdGEuZXJyb3IsIHBhcmFtcywgJ2ZpbGVkZWxldGVlcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGZyYW1lLnJlbW92ZUNsYXNzKCdmaWxlLXVwbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGVsLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCAnICsgb3JpZ0NsYXNzKS5hZGRDbGFzcyhlcnJDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldFByb2dyZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJGZyYW1lLnJlbW92ZUNsYXNzKCdmaWxlLXVwbG9hZGluZycpLmFkZENsYXNzKCdmaWxlLWRlbGV0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgJGZyYW1lLmZhZGVPdXQoJ3Nsb3cnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHBhcnNlSW50KCgkZnJhbWUuYXR0cignZGF0YS1maWxlaW5kZXgnKSkucmVwbGFjZSgnaW5pdF8nLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcmV2aWV3Q2FjaGUudW5zZXQoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHNlbGYucHJldmlld0NhY2hlLmNvdW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXAgPSBuID4gMCA/IHNlbGYuX2dldE1zZ1NlbGVjdGVkKG4pIDogJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9kZWxldGVGaWxlSW5kZXgoJGZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldENhcHRpb24oY2FwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlZGVsZXRlZCcsIFt2S2V5LCBqcVhIUiwgZXh0cmFEYXRhXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaC5jbGVhblpvb21DYWNoZSgkcHJldmlldy5maW5kKCcjem9vbS0nICsgJGZyYW1lLmF0dHIoJ2lkJykpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2NsZWFyT2JqZWN0cygkZnJhbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGZyYW1lLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRQcm9ncmVzcygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGZuRXJyb3IgPSBmdW5jdGlvbiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcCA9IHNlbGYuYWpheE9wZXJhdGlvbnMuZGVsZXRlVGh1bWIsIGVyck1zZyA9IHNlbGYuX3BhcnNlRXJyb3Iob3AsIGpxWEhSLCBlcnJvclRocm93bik7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5qcVhIUiA9IGpxWEhSO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMucmVzcG9uc2UgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2hvd0Vycm9yKGVyck1zZywgcGFyYW1zLCAnZmlsZWRlbGV0ZWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICRmcmFtZS5yZW1vdmVDbGFzcygnZmlsZS11cGxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgJGVsLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCAnICsgb3JpZ0NsYXNzKS5hZGRDbGFzcyhlcnJDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0UHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHNlbGYuX21lcmdlQWpheENhbGxiYWNrKCdiZWZvcmVTZW5kJywgZm5CZWZvcmUsICdkZWxldGUnKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9tZXJnZUFqYXhDYWxsYmFjaygnc3VjY2VzcycsIGZuU3VjY2VzcywgJ2RlbGV0ZScpO1xuICAgICAgICAgICAgICAgIHNlbGYuX21lcmdlQWpheENhbGxiYWNrKCdlcnJvcicsIGZuRXJyb3IsICdkZWxldGUnKTtcbiAgICAgICAgICAgICAgICBzZXR0aW5ncyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogdlVybCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiAkLmV4dGVuZCh0cnVlLCB7fSwge2tleTogdktleX0sIGV4dHJhRGF0YSlcbiAgICAgICAgICAgICAgICB9LCBzZWxmLmFqYXhEZWxldGVTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgc2VsZi5faGFuZGxlcigkZWwsICdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLl92YWxpZGF0ZU1pbkNvdW50KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFqYXhBYm9ydGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlYmVmb3JlZGVsZXRlJywgW3ZLZXksIGV4dHJhRGF0YV0pO1xuICAgICAgICAgICAgICAgICAgICAvL25vaW5zcGVjdGlvbiBKU1VucmVzb2x2ZWRWYXJpYWJsZSxKU0hpbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuYWpheEFib3J0ZWQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFqYXhBYm9ydGVkLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuYWpheChzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuYWpheEFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGYuZ2V0RnJhbWVzKCcgLmt2LWZpbGUtZG93bmxvYWQnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGVsID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9oYW5kbGVyKCRlbCwgJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgICAgICAgICAgYS5ocmVmID0gJGVsLmF0dHIoJ2RhdGEtdXJsJyk7XG4gICAgICAgICAgICAgICAgICAgIGEuZG93bmxvYWQgPSAkZWwuYXR0cignZGF0YS1jYXB0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgIGEudGFyZ2V0ID0gJ19ibGFuayc7XG4gICAgICAgICAgICAgICAgICAgIGEuY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfaGlkZUZpbGVJY29uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoc2VsZi5vdmVyd3JpdGVJbml0aWFsKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kY2FwdGlvbkNvbnRhaW5lci5yZW1vdmVDbGFzcygnaWNvbi12aXNpYmxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9zaG93RmlsZUljb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICRoLmFkZENzcyhzZWxmLiRjYXB0aW9uQ29udGFpbmVyLCAnaWNvbi12aXNpYmxlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRTaXplOiBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgc2l6ZSA9IHBhcnNlRmxvYXQoYnl0ZXMpLCBpLCBmdW5jID0gc2VsZi5maWxlU2l6ZUdldHRlciwgc2l6ZXMsIG91dDtcbiAgICAgICAgICAgIGlmICghJC5pc051bWVyaWMoYnl0ZXMpIHx8ICEkLmlzTnVtZXJpYyhzaXplKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG91dCA9IGZ1bmMoc2l6ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dCA9ICcwLjAwIEInO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGkgPSBNYXRoLmZsb29yKE1hdGgubG9nKHNpemUpIC8gTWF0aC5sb2coMTAyNCkpO1xuICAgICAgICAgICAgICAgICAgICBzaXplcyA9IFsnQicsICdLQicsICdNQicsICdHQicsICdUQicsICdQQicsICdFQicsICdaQicsICdZQiddO1xuICAgICAgICAgICAgICAgICAgICBvdXQgPSAoc2l6ZSAvIE1hdGgucG93KDEwMjQsIGkpKS50b0ZpeGVkKDIpICogMSArICcgJyArIHNpemVzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9nZXRMYXlvdXRUZW1wbGF0ZSgnc2l6ZScpLnJlcGxhY2UoJ3tzaXplVGV4dH0nLCBvdXQpO1xuICAgICAgICB9LFxuICAgICAgICBfZ2VuZXJhdGVQcmV2aWV3VGVtcGxhdGU6IGZ1bmN0aW9uIChjYXQsIGRhdGEsIGZuYW1lLCBmdHlwZSwgcHJldmlld0lkLCBpc0Vycm9yLCBzaXplLCBmcmFtZUNsYXNzLCBmb290LCBpbmQsIHRlbXBsKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIGNhcHRpb24gPSBzZWxmLnNsdWcoZm5hbWUpLCBwcmV2Q29udGVudCwgem9vbUNvbnRlbnQgPSAnJywgc3R5bGVBdHRyaWJzID0gJycsXG4gICAgICAgICAgICAgICAgc2NyZWVuVyA9IHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCB8fCBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICAgIGNvbmZpZyA9IHNjcmVlblcgPCA0MDAgPyAoc2VsZi5wcmV2aWV3U2V0dGluZ3NTbWFsbFtjYXRdIHx8IHNlbGYuZGVmYXVsdHMucHJldmlld1NldHRpbmdzU21hbGxbY2F0XSkgOlxuICAgICAgICAgICAgICAgICAgICAoc2VsZi5wcmV2aWV3U2V0dGluZ3NbY2F0XSB8fCBzZWxmLmRlZmF1bHRzLnByZXZpZXdTZXR0aW5nc1tjYXRdKSxcbiAgICAgICAgICAgICAgICBmb290ZXIgPSBmb290IHx8IHNlbGYuX3JlbmRlckZpbGVGb290ZXIoY2FwdGlvbiwgc2l6ZSwgJ2F1dG8nLCBpc0Vycm9yKSxcbiAgICAgICAgICAgICAgICBoYXNJY29uU2V0dGluZyA9IHNlbGYuX2dldFByZXZpZXdJY29uKGZuYW1lKSwgdHlwZUNzcyA9ICd0eXBlLWRlZmF1bHQnLFxuICAgICAgICAgICAgICAgIGZvcmNlUHJldkljb24gPSBoYXNJY29uU2V0dGluZyAmJiBzZWxmLnByZWZlckljb25pY1ByZXZpZXcsXG4gICAgICAgICAgICAgICAgZm9yY2Vab29tSWNvbiA9IGhhc0ljb25TZXR0aW5nICYmIHNlbGYucHJlZmVySWNvbmljWm9vbVByZXZpZXcsIGdldENvbnRlbnQ7XG4gICAgICAgICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgJC5lYWNoKGNvbmZpZywgZnVuY3Rpb24gKGtleSwgdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlQXR0cmlicyArPSBrZXkgKyAnOicgKyB2YWwgKyAnOyc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZXRDb250ZW50ID0gZnVuY3Rpb24gKGMsIGQsIHpvb20sIGZyYW1lQ3NzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gem9vbSA/ICd6b29tLScgKyBwcmV2aWV3SWQgOiBwcmV2aWV3SWQsIHRtcGx0ID0gc2VsZi5fZ2V0UHJldmlld1RlbXBsYXRlKGMpLFxuICAgICAgICAgICAgICAgICAgICBjc3MgPSAoZnJhbWVDbGFzcyB8fCAnJykgKyAnICcgKyBmcmFtZUNzcztcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5mcmFtZUNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNzcyA9IHNlbGYuZnJhbWVDbGFzcyArICcgJyArIGNzcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHpvb20pIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzID0gY3NzLnJlcGxhY2UoJyAnICsgJGguU09SVF9DU1MsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG1wbHQgPSBzZWxmLl9wYXJzZUZpbGVQcmV2aWV3SWNvbih0bXBsdCwgZm5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChjID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZCA9ICRoLmh0bWxFbmNvZGUoZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjYXQgPT09ICdvYmplY3QnICYmICFmdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2goc2VsZi5kZWZhdWx0cy5maWxlVHlwZVNldHRpbmdzLCBmdW5jdGlvbiAoa2V5LCBmdW5jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnb2JqZWN0JyB8fCBrZXkgPT09ICdvdGhlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnVuYyhmbmFtZSwgZnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNzcyA9ICd0eXBlLScgKyBrZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdG1wbHQuc2V0VG9rZW5zKHtcbiAgICAgICAgICAgICAgICAgICAgJ3ByZXZpZXdJZCc6IGlkLFxuICAgICAgICAgICAgICAgICAgICAnY2FwdGlvbic6IGNhcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICdmcmFtZUNsYXNzJzogY3NzLFxuICAgICAgICAgICAgICAgICAgICAndHlwZSc6IGZ0eXBlLFxuICAgICAgICAgICAgICAgICAgICAnZmlsZWluZGV4JzogaW5kLFxuICAgICAgICAgICAgICAgICAgICAndHlwZUNzcyc6IHR5cGVDc3MsXG4gICAgICAgICAgICAgICAgICAgICdmb290ZXInOiBmb290ZXIsXG4gICAgICAgICAgICAgICAgICAgICdkYXRhJzogZCxcbiAgICAgICAgICAgICAgICAgICAgJ3RlbXBsYXRlJzogdGVtcGwgfHwgY2F0LFxuICAgICAgICAgICAgICAgICAgICAnc3R5bGUnOiBzdHlsZUF0dHJpYnMgPyAnc3R5bGU9XCInICsgc3R5bGVBdHRyaWJzICsgJ1wiJyA6ICcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaW5kID0gaW5kIHx8IHByZXZpZXdJZC5zbGljZShwcmV2aWV3SWQubGFzdEluZGV4T2YoJy0nKSArIDEpO1xuICAgICAgICAgICAgaWYgKHNlbGYuZmlsZUFjdGlvblNldHRpbmdzLnNob3dab29tKSB7XG4gICAgICAgICAgICAgICAgem9vbUNvbnRlbnQgPSBnZXRDb250ZW50KChmb3JjZVpvb21JY29uID8gJ290aGVyJyA6IGNhdCksIGRhdGEsIHRydWUsICdrdi16b29tLXRodW1iJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB6b29tQ29udGVudCA9ICdcXG4nICsgc2VsZi5fZ2V0TGF5b3V0VGVtcGxhdGUoJ3pvb21DYWNoZScpLnJlcGxhY2UoJ3t6b29tQ29udGVudH0nLCB6b29tQ29udGVudCk7XG4gICAgICAgICAgICBwcmV2Q29udGVudCA9IGdldENvbnRlbnQoKGZvcmNlUHJldkljb24gPyAnb3RoZXInIDogY2F0KSwgZGF0YSwgZmFsc2UsICdrdi1wcmV2aWV3LXRodW1iJyk7XG4gICAgICAgICAgICByZXR1cm4gcHJldkNvbnRlbnQgKyB6b29tQ29udGVudDtcbiAgICAgICAgfSxcbiAgICAgICAgX3ByZXZpZXdEZWZhdWx0OiBmdW5jdGlvbiAoZmlsZSwgcHJldmlld0lkLCBpc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRwcmV2aWV3ID0gc2VsZi4kcHJldmlldztcbiAgICAgICAgICAgIGlmICghc2VsZi5zaG93UHJldmlldykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBmbmFtZSA9IGZpbGUgPyBmaWxlLm5hbWUgOiAnJywgZnR5cGUgPSBmaWxlID8gZmlsZS50eXBlIDogJycsIGNvbnRlbnQsIHNpemUgPSBmaWxlLnNpemUgfHwgMCxcbiAgICAgICAgICAgICAgICBjYXB0aW9uID0gc2VsZi5zbHVnKGZuYW1lKSwgaXNFcnJvciA9IGlzRGlzYWJsZWQgPT09IHRydWUgJiYgIXNlbGYuaXNBamF4VXBsb2FkLFxuICAgICAgICAgICAgICAgIGRhdGEgPSAkaC5vYmpVcmwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xuICAgICAgICAgICAgc2VsZi5fY2xlYXJEZWZhdWx0UHJldmlldygpO1xuICAgICAgICAgICAgY29udGVudCA9IHNlbGYuX2dlbmVyYXRlUHJldmlld1RlbXBsYXRlKCdvdGhlcicsIGRhdGEsIGZuYW1lLCBmdHlwZSwgcHJldmlld0lkLCBpc0Vycm9yLCBzaXplKTtcbiAgICAgICAgICAgICRwcmV2aWV3LmFwcGVuZChcIlxcblwiICsgY29udGVudCk7XG4gICAgICAgICAgICBzZWxmLl9zZXRUaHVtYkF0dHIocHJldmlld0lkLCBjYXB0aW9uLCBzaXplKTtcbiAgICAgICAgICAgIGlmIChpc0Rpc2FibGVkID09PSB0cnVlICYmIHNlbGYuaXNBamF4VXBsb2FkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fc2V0VGh1bWJTdGF0dXMoJCgnIycgKyBwcmV2aWV3SWQpLCAnRXJyb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3ByZXZpZXdGaWxlOiBmdW5jdGlvbiAoaSwgZmlsZSwgdGhlRmlsZSwgcHJldmlld0lkLCBkYXRhLCBmaWxlSW5mbykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNob3dQcmV2aWV3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBmbmFtZSA9IGZpbGUgPyBmaWxlLm5hbWUgOiAnJywgZnR5cGUgPSBmaWxlSW5mby50eXBlLCBjYXB0aW9uID0gZmlsZUluZm8ubmFtZSxcbiAgICAgICAgICAgICAgICBjYXQgPSBzZWxmLl9wYXJzZUZpbGVUeXBlKGZ0eXBlLCBmbmFtZSksIHR5cGVzID0gc2VsZi5hbGxvd2VkUHJldmlld1R5cGVzLCBjb250ZW50LFxuICAgICAgICAgICAgICAgIG1pbWVzID0gc2VsZi5hbGxvd2VkUHJldmlld01pbWVUeXBlcywgJHByZXZpZXcgPSBzZWxmLiRwcmV2aWV3LCBmc2l6ZSA9IGZpbGUuc2l6ZSB8fCAwLFxuICAgICAgICAgICAgICAgIGNoa1R5cGVzID0gdHlwZXMgJiYgdHlwZXMuaW5kZXhPZihjYXQpID49IDAsIGNoa01pbWVzID0gbWltZXMgJiYgbWltZXMuaW5kZXhPZihmdHlwZSkgIT09IC0xLFxuICAgICAgICAgICAgICAgIGlEYXRhID0gKGNhdCA9PT0gJ3RleHQnIHx8IGNhdCA9PT0gJ2h0bWwnIHx8IGNhdCA9PT0gJ2ltYWdlJykgPyB0aGVGaWxlLnRhcmdldC5yZXN1bHQgOiBkYXRhO1xuICAgICAgICAgICAgLyoqIEBuYW1lc3BhY2Ugd2luZG93LkRPTVB1cmlmeSAqL1xuICAgICAgICAgICAgaWYgKGNhdCA9PT0gJ2h0bWwnICYmIHNlbGYucHVyaWZ5SHRtbCAmJiB3aW5kb3cuRE9NUHVyaWZ5KSB7XG4gICAgICAgICAgICAgICAgaURhdGEgPSB3aW5kb3cuRE9NUHVyaWZ5LnNhbml0aXplKGlEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGtUeXBlcyB8fCBjaGtNaW1lcykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBzZWxmLl9nZW5lcmF0ZVByZXZpZXdUZW1wbGF0ZShjYXQsIGlEYXRhLCBmbmFtZSwgZnR5cGUsIHByZXZpZXdJZCwgZmFsc2UsIGZzaXplKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9jbGVhckRlZmF1bHRQcmV2aWV3KCk7XG4gICAgICAgICAgICAgICAgJHByZXZpZXcuYXBwZW5kKFwiXFxuXCIgKyBjb250ZW50KTtcbiAgICAgICAgICAgICAgICB2YXIgJGltZyA9ICRwcmV2aWV3LmZpbmQoJyMnICsgcHJldmlld0lkICsgJyBpbWcnKTtcbiAgICAgICAgICAgICAgICBpZiAoJGltZy5sZW5ndGggJiYgc2VsZi5hdXRvT3JpZW50SW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgJGgudmFsaWRhdGVPcmllbnRhdGlvbihmaWxlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl92YWxpZGF0ZUltYWdlKHByZXZpZXdJZCwgY2FwdGlvbiwgZnR5cGUsIGZzaXplLCBpRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICR6b29tSW1nID0gJHByZXZpZXcuZmluZCgnI3pvb20tJyArIHByZXZpZXdJZCArICcgaW1nJyksIGNzcyA9ICdyb3RhdGUtJyArIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcyArPSAoJGltZy53aWR0aCgpID4gJGltZy5oZWlnaHQoKSA/ICcgaXMtcG9ydHJhaXQtZ3Q0JyA6ICcgaXMtbGFuZHNjYXBlLWd0NCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgJGguYWRkQ3NzKCRpbWcsIGNzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaC5hZGRDc3MoJHpvb21JbWcsIGNzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9yYWlzZSgnZmlsZWltYWdlb3JpZW50ZWQnLCB7JyRpbWcnOiAkaW1nLCAnZmlsZSc6IGZpbGV9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3ZhbGlkYXRlSW1hZ2UocHJldmlld0lkLCBjYXB0aW9uLCBmdHlwZSwgZnNpemUsIGlEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRoLmFkanVzdE9yaWVudGVkSW1hZ2UoJGltZyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3ZhbGlkYXRlSW1hZ2UocHJldmlld0lkLCBjYXB0aW9uLCBmdHlwZSwgZnNpemUsIGlEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuX3ByZXZpZXdEZWZhdWx0KGZpbGUsIHByZXZpZXdJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl9zZXRUaHVtYkF0dHIocHJldmlld0lkLCBjYXB0aW9uLCBmc2l6ZSk7XG4gICAgICAgICAgICBzZWxmLl9pbml0U29ydGFibGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NldFRodW1iQXR0cjogZnVuY3Rpb24gKGlkLCBjYXB0aW9uLCBzaXplKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRmcmFtZSA9ICQoJyMnICsgaWQpO1xuICAgICAgICAgICAgaWYgKCRmcmFtZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzaXplID0gc2l6ZSAmJiBzaXplID4gMCA/IHNlbGYuX2dldFNpemUoc2l6ZSkgOiAnJztcbiAgICAgICAgICAgICAgICAkZnJhbWUuZGF0YSh7J2NhcHRpb24nOiBjYXB0aW9uLCAnc2l6ZSc6IHNpemV9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3NldEluaXRUaHVtYkF0dHI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgZGF0YSA9IHNlbGYucHJldmlld0NhY2hlLmRhdGEsIGxlbiA9IHNlbGYucHJldmlld0NhY2hlLmNvdW50KCksIGNvbmZpZyxcbiAgICAgICAgICAgICAgICBjYXB0aW9uLCBzaXplLCBwcmV2aWV3SWQ7XG4gICAgICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbmZpZyA9IGRhdGEuY29uZmlnW2ldO1xuICAgICAgICAgICAgICAgIHByZXZpZXdJZCA9IHNlbGYucHJldmlld0luaXRJZCArICctJyArICdpbml0XycgKyBpO1xuICAgICAgICAgICAgICAgIGNhcHRpb24gPSAkaC5pZlNldCgnY2FwdGlvbicsIGNvbmZpZywgJGguaWZTZXQoJ2ZpbGVuYW1lJywgY29uZmlnKSk7XG4gICAgICAgICAgICAgICAgc2l6ZSA9ICRoLmlmU2V0KCdzaXplJywgY29uZmlnKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9zZXRUaHVtYkF0dHIocHJldmlld0lkLCBjYXB0aW9uLCBzaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3NsdWdEZWZhdWx0OiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuICRoLmlzRW1wdHkodGV4dCkgPyAnJyA6IFN0cmluZyh0ZXh0KS5yZXBsYWNlKC9bXFxbXFxdXFwvXFx7fTo7IyU9XFwoXFwpXFwqXFwrXFw/XFxcXFxcXlxcJFxcfDw+JlwiJ10vZywgJ18nKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3JlYWRGaWxlczogZnVuY3Rpb24gKGZpbGVzKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRlbCA9IHNlbGYuJGVsZW1lbnQsICRwcmV2aWV3ID0gc2VsZi4kcHJldmlldywgcmVhZGVyID0gc2VsZi5yZWFkZXIsXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lciA9IHNlbGYuJHByZXZpZXdDb250YWluZXIsICRzdGF0dXMgPSBzZWxmLiRwcmV2aWV3U3RhdHVzLCBtc2dMb2FkaW5nID0gc2VsZi5tc2dMb2FkaW5nLFxuICAgICAgICAgICAgICAgIG1zZ1Byb2dyZXNzID0gc2VsZi5tc2dQcm9ncmVzcywgcHJldmlld0luaXRJZCA9IHNlbGYucHJldmlld0luaXRJZCwgbnVtRmlsZXMgPSBmaWxlcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3MgPSBzZWxmLmZpbGVUeXBlU2V0dGluZ3MsIGN0ciA9IHNlbGYuZmlsZXN0YWNrLmxlbmd0aCwgcmVhZEZpbGUsXG4gICAgICAgICAgICAgICAgZmlsZVR5cGVzID0gc2VsZi5hbGxvd2VkRmlsZVR5cGVzLCB0eXBMZW4gPSBmaWxlVHlwZXMgPyBmaWxlVHlwZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICAgICAgICBmaWxlRXh0ID0gc2VsZi5hbGxvd2VkRmlsZUV4dGVuc2lvbnMsIHN0ckV4dCA9ICRoLmlzRW1wdHkoZmlsZUV4dCkgPyAnJyA6IGZpbGVFeHQuam9pbignLCAnKSxcbiAgICAgICAgICAgICAgICBtYXhQcmV2aWV3U2l6ZSA9IHNlbGYubWF4RmlsZVByZXZpZXdTaXplICYmIHBhcnNlRmxvYXQoc2VsZi5tYXhGaWxlUHJldmlld1NpemUpLFxuICAgICAgICAgICAgICAgIGNhblByZXZpZXcgPSAkcHJldmlldy5sZW5ndGggJiYgKCFtYXhQcmV2aWV3U2l6ZSB8fCBpc05hTihtYXhQcmV2aWV3U2l6ZSkpLFxuICAgICAgICAgICAgICAgIHRocm93RXJyb3IgPSBmdW5jdGlvbiAobXNnLCBmaWxlLCBwcmV2aWV3SWQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwMSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBzZWxmLl9nZXRPdXREYXRhKHt9LCB7fSwgZmlsZXMpLCB7aWQ6IHByZXZpZXdJZCwgaW5kZXg6IGluZGV4fSksXG4gICAgICAgICAgICAgICAgICAgICAgICBwMiA9IHtpZDogcHJldmlld0lkLCBpbmRleDogaW5kZXgsIGZpbGU6IGZpbGUsIGZpbGVzOiBmaWxlc30sICR0aHVtYjtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcHJldmlld0RlZmF1bHQoZmlsZSwgcHJldmlld0lkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuaXNBamF4VXBsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZFRvU3RhY2sodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRGaWxlKGluZGV4ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbnVtRmlsZXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2luaXRGaWxlQWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAkdGh1bWIgPSAkKCcjJyArIHByZXZpZXdJZCk7XG4gICAgICAgICAgICAgICAgICAgICR0aHVtYi5maW5kKCcua3YtZmlsZS11cGxvYWQnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnJlbW92ZUZyb21QcmV2aWV3T25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRodW1iLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaXNFcnJvciA9IHNlbGYuaXNBamF4VXBsb2FkID8gc2VsZi5fc2hvd1VwbG9hZEVycm9yKG1zZywgcDEpIDogc2VsZi5fc2hvd0Vycm9yKG1zZywgcDIpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl91cGRhdGVGaWxlRGV0YWlscyhudW1GaWxlcyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2VsZi5sb2FkZWRJbWFnZXMgPSBbXTtcbiAgICAgICAgICAgIHNlbGYudG90YWxJbWFnZXNDb3VudCA9IDA7XG5cbiAgICAgICAgICAgICQuZWFjaChmaWxlcywgZnVuY3Rpb24gKGtleSwgZmlsZSkge1xuICAgICAgICAgICAgICAgIHZhciBmdW5jID0gc2VsZi5maWxlVHlwZVNldHRpbmdzLmltYWdlO1xuICAgICAgICAgICAgICAgIGlmIChmdW5jICYmIGZ1bmMoZmlsZS50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnRvdGFsSW1hZ2VzQ291bnQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlYWRGaWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICBpZiAoJGguaXNFbXB0eSgkZWwuYXR0cignbXVsdGlwbGUnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtRmlsZXMgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSA+PSBudW1GaWxlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pc0FqYXhVcGxvYWQgJiYgc2VsZi5maWxlc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGViYXRjaHNlbGVjdGVkJywgW3NlbGYuZ2V0RmlsZVN0YWNrKCldKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlYmF0Y2hzZWxlY3RlZCcsIFtmaWxlc10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ2ZpbGUtdGh1bWItbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAkc3RhdHVzLmh0bWwoJycpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gY3RyICsgaSwgcHJldmlld0lkID0gcHJldmlld0luaXRJZCArIFwiLVwiICsgbm9kZSwgZmlsZSA9IGZpbGVzW2ldLCBmU2l6ZUtCLCBqLCBtc2csXG4gICAgICAgICAgICAgICAgICAgIGZuVGV4dCA9IHNldHRpbmdzLnRleHQsIGZuSW1hZ2UgPSBzZXR0aW5ncy5pbWFnZSwgZm5IdG1sID0gc2V0dGluZ3MuaHRtbCwgdHlwLCBjaGssIHR5cDEsIHR5cDIsXG4gICAgICAgICAgICAgICAgICAgIGNhcHRpb24gPSBmaWxlLm5hbWUgPyBzZWxmLnNsdWcoZmlsZS5uYW1lKSA6ICcnLCBmaWxlU2l6ZSA9IChmaWxlLnNpemUgfHwgMCkgLyAxMDAwLFxuICAgICAgICAgICAgICAgICAgICBmaWxlRXh0RXhwciA9ICcnLCBwcmV2aWV3RGF0YSA9ICRoLm9ialVybC5jcmVhdGVPYmplY3RVUkwoZmlsZSksIGZpbGVDb3VudCA9IDAsIHN0clR5cGVzID0gJycsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMsIGtub3duVHlwZXMgPSAwLCBpc1RleHQsIGlzSHRtbCwgaXNJbWFnZSwgdHh0RmxhZywgcHJvY2Vzc0ZpbGVMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXNnID0gbXNnUHJvZ3Jlc3Muc2V0VG9rZW5zKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5kZXgnOiBpICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmlsZXMnOiBudW1GaWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGVyY2VudCc6IDUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJzogY2FwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdHVzLmh0bWwobXNnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl91cGRhdGVGaWxlRGV0YWlscyhudW1GaWxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZEZpbGUoaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlbG9hZGVkJywgW2ZpbGUsIHByZXZpZXdJZCwgaSwgcmVhZGVyXSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHR5cExlbiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHR5cExlbjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXAxID0gZmlsZVR5cGVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwMiA9IHNlbGYubXNnRmlsZVR5cGVzW3R5cDFdIHx8IHR5cDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJUeXBlcyArPSBqID09PSAwID8gdHlwMiA6ICcsICcgKyB0eXAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjYXB0aW9uID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICByZWFkRmlsZShpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNhcHRpb24ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IHNlbGYubXNnSW52YWxpZEZpbGVOYW1lLnJlcGxhY2UoJ3tuYW1lfScsICRoLmh0bWxFbmNvZGUoZmlsZS5uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IobXNnLCBmaWxlLCBwcmV2aWV3SWQsIGkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghJGguaXNFbXB0eShmaWxlRXh0KSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxlRXh0RXhwciA9IG5ldyBSZWdFeHAoJ1xcXFwuKCcgKyBmaWxlRXh0LmpvaW4oJ3wnKSArICcpJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZTaXplS0IgPSBmaWxlU2l6ZS50b0ZpeGVkKDIpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLm1heEZpbGVTaXplID4gMCAmJiBmaWxlU2l6ZSA+IHNlbGYubWF4RmlsZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgbXNnID0gc2VsZi5tc2dTaXplVG9vTGFyZ2Uuc2V0VG9rZW5zKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJzogY2FwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICdzaXplJzogZlNpemVLQixcbiAgICAgICAgICAgICAgICAgICAgICAgICdtYXhTaXplJzogc2VsZi5tYXhGaWxlU2l6ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcihtc2csIGZpbGUsIHByZXZpZXdJZCwgaSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYubWluRmlsZVNpemUgIT09IG51bGwgJiYgZmlsZVNpemUgPD0gJGguZ2V0TnVtKHNlbGYubWluRmlsZVNpemUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IHNlbGYubXNnU2l6ZVRvb1NtYWxsLnNldFRva2Vucyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IGNhcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZSc6IGZTaXplS0IsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWluU2l6ZSc6IHNlbGYubWluRmlsZVNpemVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IobXNnLCBmaWxlLCBwcmV2aWV3SWQsIGkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghJGguaXNFbXB0eShmaWxlVHlwZXMpICYmICRoLmlzQXJyYXkoZmlsZVR5cGVzKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZmlsZVR5cGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXAgPSBmaWxlVHlwZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jID0gc2V0dGluZ3NbdHlwXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVDb3VudCArPSAhZnVuYyB8fCAodHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpID8gMCA6IChmdW5jKGZpbGUudHlwZSwgZmlsZS5uYW1lKSA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBzZWxmLm1zZ0ludmFsaWRGaWxlVHlwZS5zZXRUb2tlbnMoeyduYW1lJzogY2FwdGlvbiwgJ3R5cGVzJzogc3RyVHlwZXN9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IobXNnLCBmaWxlLCBwcmV2aWV3SWQsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmaWxlQ291bnQgPT09IDAgJiYgISRoLmlzRW1wdHkoZmlsZUV4dCkgJiYgJGguaXNBcnJheShmaWxlRXh0KSAmJiAhJGguaXNFbXB0eShmaWxlRXh0RXhwcikpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hrID0gJGguY29tcGFyZShjYXB0aW9uLCBmaWxlRXh0RXhwcik7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVDb3VudCArPSAkaC5pc0VtcHR5KGNoaykgPyAwIDogY2hrLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXNnID0gc2VsZi5tc2dJbnZhbGlkRmlsZUV4dGVuc2lvbi5zZXRUb2tlbnMoeyduYW1lJzogY2FwdGlvbiwgJ2V4dGVuc2lvbnMnOiBzdHJFeHR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IobXNnLCBmaWxlLCBwcmV2aWV3SWQsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5zaG93UHJldmlldykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5pc0FqYXhVcGxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkVG9TdGFjayhmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRGaWxlKGkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3VwZGF0ZUZpbGVEZXRhaWxzKG51bUZpbGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGVsb2FkZWQnLCBbZmlsZSwgcHJldmlld0lkLCBpLCByZWFkZXJdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWNhblByZXZpZXcgJiYgZmlsZVNpemUgPiBtYXhQcmV2aWV3U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZFRvU3RhY2soZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICRjb250YWluZXIuYWRkQ2xhc3MoJ2ZpbGUtdGh1bWItbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9wcmV2aWV3RGVmYXVsdChmaWxlLCBwcmV2aWV3SWQpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbml0RmlsZUFjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fdXBkYXRlRmlsZURldGFpbHMobnVtRmlsZXMpO1xuICAgICAgICAgICAgICAgICAgICByZWFkRmlsZShpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCRwcmV2aWV3Lmxlbmd0aCAmJiBGaWxlUmVhZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNUZXh0ID0gZm5UZXh0KGZpbGUudHlwZSwgY2FwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGlzSHRtbCA9IGZuSHRtbChmaWxlLnR5cGUsIGNhcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICBpc0ltYWdlID0gZm5JbWFnZShmaWxlLnR5cGUsIGNhcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAkc3RhdHVzLmh0bWwobXNnTG9hZGluZy5yZXBsYWNlKCd7aW5kZXh9JywgaSArIDEpLnJlcGxhY2UoJ3tmaWxlc30nLCBudW1GaWxlcykpO1xuICAgICAgICAgICAgICAgICAgICAkY29udGFpbmVyLmFkZENsYXNzKCdmaWxlLXRodW1iLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9lcnJvckhhbmRsZXIoZXZ0LCBjYXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICh0aGVGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGV4LCBmaWxlSW5mbywgdWludCwgYnl0ZSwgYnl0ZXMgPSBbXSwgY29udGVudHMsIG1pbWUsIHJlYWRUZXh0SW1hZ2UgPSBmdW5jdGlvbiAodGV4dEZsYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdSZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uICh0aGVGaWxlTmV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2Vycm9ySGFuZGxlcih0aGVGaWxlTmV3LCBjYXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1JlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAodGhlRmlsZU5ldykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9wcmV2aWV3RmlsZShpLCBmaWxlLCB0aGVGaWxlTmV3LCBwcmV2aWV3SWQsIHByZXZpZXdEYXRhLCBmaWxlSW5mbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2luaXRGaWxlQWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRmlsZUxvYWRlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRGbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1JlYWRlci5yZWFkQXNUZXh0KGZpbGUsIHNlbGYudGV4dEVuY29kaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdSZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUluZm8gPSB7J25hbWUnOiBjYXB0aW9uLCAndHlwZSc6IGZpbGUudHlwZX07XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goc2V0dGluZ3MsIGZ1bmN0aW9uIChrZXksIGZ1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAnb2JqZWN0JyAmJiBrZXkgIT09ICdvdGhlcicgJiYgZnVuYyhmaWxlLnR5cGUsIGNhcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtub3duVHlwZXMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrbm93blR5cGVzID09PSAwKSB7Ly8gYXV0byBkZXRlY3QgbWltZSB0eXBlcyBmcm9tIGNvbnRlbnQgaWYgbm8ga25vd24gZmlsZSB0eXBlcyBkZXRlY3RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQgPSBuZXcgVWludDhBcnJheSh0aGVGaWxlLnRhcmdldC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB1aW50Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGUgPSB1aW50W2pdLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXMucHVzaChieXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGV4ID0gYnl0ZXMuam9pbignJykudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMCwgOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltZSA9ICRoLmdldE1pbWVUeXBlKGhleCwgJycsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGguaXNFbXB0eShtaW1lKSkgeyAvLyBsb29rIGZvciBhc2NpaSB0ZXh0IGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSAkaC5hcnJheUJ1ZmZlcjJTdHJpbmcocmVhZGVyLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWUgPSAkaC5pc1N2Zyhjb250ZW50cykgPyAnaW1hZ2Uvc3ZnK3htbCcgOiAkaC5nZXRNaW1lVHlwZShoZXgsIGNvbnRlbnRzLCBmaWxlLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlSW5mbyA9IHsnbmFtZSc6IGNhcHRpb24sICd0eXBlJzogbWltZX07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUZXh0ID0gZm5UZXh0KG1pbWUsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0h0bWwgPSBmbkh0bWwobWltZSwgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSW1hZ2UgPSBmbkltYWdlKG1pbWUsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eHRGbGFnID0gaXNUZXh0IHx8IGlzSHRtbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHh0RmxhZyB8fCBpc0ltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRUZXh0SW1hZ2UodHh0RmxhZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9wcmV2aWV3RmlsZShpLCBmaWxlLCB0aGVGaWxlLCBwcmV2aWV3SWQsIHByZXZpZXdEYXRhLCBmaWxlSW5mbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbml0RmlsZUFjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NGaWxlTG9hZGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aENvbXB1dGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmFjdCA9IChkYXRhLmxvYWRlZCAvIGRhdGEudG90YWwpICogMTAwLCBwcm9ncmVzcyA9IE1hdGguY2VpbChmYWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBtc2dQcm9ncmVzcy5zZXRUb2tlbnMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5kZXgnOiBpICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpbGVzJzogbnVtRmlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwZXJjZW50JzogcHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJzogY2FwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdHVzLmh0bWwobXNnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1RleHQgfHwgaXNIdG1sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlLCBzZWxmLnRleHRFbmNvZGluZyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbWFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9wcmV2aWV3RGVmYXVsdChmaWxlLCBwcmV2aWV3SWQpO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRGaWxlKGkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3VwZGF0ZUZpbGVEZXRhaWxzKG51bUZpbGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGVsb2FkZWQnLCBbZmlsZSwgcHJldmlld0lkLCBpLCByZWFkZXJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZi5hZGRUb1N0YWNrKGZpbGUpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmVhZEZpbGUoMCk7XG4gICAgICAgICAgICBzZWxmLl91cGRhdGVGaWxlRGV0YWlscyhudW1GaWxlcywgZmFsc2UpO1xuICAgICAgICB9LFxuICAgICAgICBfdXBkYXRlRmlsZURldGFpbHM6IGZ1bmN0aW9uIChudW1GaWxlcykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCAkZWwgPSBzZWxmLiRlbGVtZW50LCBmaWxlU3RhY2sgPSBzZWxmLmdldEZpbGVTdGFjaygpLFxuICAgICAgICAgICAgICAgIG5hbWUgPSAoJGguaXNJRSg5KSAmJiAkaC5maW5kRmlsZU5hbWUoJGVsLnZhbCgpKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKCRlbFswXS5maWxlc1swXSAmJiAkZWxbMF0uZmlsZXNbMF0ubmFtZSkgfHwgKGZpbGVTdGFjay5sZW5ndGggJiYgZmlsZVN0YWNrWzBdLm5hbWUpIHx8ICcnLFxuICAgICAgICAgICAgICAgIGxhYmVsID0gc2VsZi5zbHVnKG5hbWUpLCBuID0gc2VsZi5pc0FqYXhVcGxvYWQgPyBmaWxlU3RhY2subGVuZ3RoIDogbnVtRmlsZXMsXG4gICAgICAgICAgICAgICAgbkZpbGVzID0gc2VsZi5wcmV2aWV3Q2FjaGUuY291bnQoKSArIG4sIGxvZyA9IG4gPT09IDEgPyBsYWJlbCA6IHNlbGYuX2dldE1zZ1NlbGVjdGVkKG5GaWxlcyk7XG4gICAgICAgICAgICBpZiAoc2VsZi5pc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kcHJldmlld0NvbnRhaW5lci5yZW1vdmVDbGFzcygnZmlsZS10aHVtYi1sb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgc2VsZi4kcHJldmlld1N0YXR1cy5odG1sKCcnKTtcbiAgICAgICAgICAgICAgICBzZWxmLiRjYXB0aW9uQ29udGFpbmVyLnJlbW92ZUNsYXNzKCdpY29uLXZpc2libGUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fc2hvd0ZpbGVJY29uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl9zZXRDYXB0aW9uKGxvZywgc2VsZi5pc0Vycm9yKTtcbiAgICAgICAgICAgIHNlbGYuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnZmlsZS1pbnB1dC1uZXcgZmlsZS1pbnB1dC1hamF4LW5ldycpO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9yYWlzZSgnZmlsZXNlbGVjdCcsIFtudW1GaWxlcywgbGFiZWxdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLnByZXZpZXdDYWNoZS5jb3VudCgpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5faW5pdFByZXZpZXdBY3Rpb25zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRUaHVtYlN0YXR1czogZnVuY3Rpb24gKCR0aHVtYiwgc3RhdHVzKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoIXNlbGYuc2hvd1ByZXZpZXcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaWNvbiA9ICdpbmRpY2F0b3InICsgc3RhdHVzLCBtc2cgPSBpY29uICsgJ1RpdGxlJyxcbiAgICAgICAgICAgICAgICBjc3MgPSAnZmlsZS1wcmV2aWV3LScgKyBzdGF0dXMudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAkaW5kaWNhdG9yID0gJHRodW1iLmZpbmQoJy5maWxlLXVwbG9hZC1pbmRpY2F0b3InKSxcbiAgICAgICAgICAgICAgICBjb25maWcgPSBzZWxmLmZpbGVBY3Rpb25TZXR0aW5ncztcbiAgICAgICAgICAgICR0aHVtYi5yZW1vdmVDbGFzcygnZmlsZS1wcmV2aWV3LXN1Y2Nlc3MgZmlsZS1wcmV2aWV3LWVycm9yIGZpbGUtcHJldmlldy1sb2FkaW5nJyk7XG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnU3VjY2VzcycpIHtcbiAgICAgICAgICAgICAgICAkdGh1bWIuZmluZCgnLmZpbGUtZHJhZy1oYW5kbGUnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRpbmRpY2F0b3IuaHRtbChjb25maWdbaWNvbl0pO1xuICAgICAgICAgICAgJGluZGljYXRvci5hdHRyKCd0aXRsZScsIGNvbmZpZ1ttc2ddKTtcbiAgICAgICAgICAgICR0aHVtYi5hZGRDbGFzcyhjc3MpO1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ0Vycm9yJyAmJiAhc2VsZi5yZXRyeUVycm9yVXBsb2Fkcykge1xuICAgICAgICAgICAgICAgICR0aHVtYi5maW5kKCcua3YtZmlsZS11cGxvYWQnKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfc2V0UHJvZ3Jlc3NDYW5jZWxsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHNlbGYuX3NldFByb2dyZXNzKDEwMSwgc2VsZi4kcHJvZ3Jlc3MsIHNlbGYubXNnQ2FuY2VsbGVkKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NldFByb2dyZXNzOiBmdW5jdGlvbiAocCwgJGVsLCBlcnJvcikge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBwY3QgPSBNYXRoLm1pbihwLCAxMDApLCBvdXQsIHBjdExpbWl0ID0gc2VsZi5wcm9ncmVzc1VwbG9hZFRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICB0ID0gcCA8PSAxMDAgPyBzZWxmLnByb2dyZXNzVGVtcGxhdGUgOiBzZWxmLnByb2dyZXNzQ29tcGxldGVUZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IHBjdCA8IDEwMCA/IHNlbGYucHJvZ3Jlc3NUZW1wbGF0ZSA6IChlcnJvciA/IHNlbGYucHJvZ3Jlc3NFcnJvclRlbXBsYXRlIDogdCk7XG4gICAgICAgICAgICAkZWwgPSAkZWwgfHwgc2VsZi4kcHJvZ3Jlc3M7XG4gICAgICAgICAgICBpZiAoISRoLmlzRW1wdHkodGVtcGxhdGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBjdExpbWl0ICYmIHBjdCA+IHBjdExpbWl0ICYmIHAgPD0gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dCA9IHRlbXBsYXRlLnNldFRva2Vucyh7J3BlcmNlbnQnOiBwY3RMaW1pdCwgJ3N0YXR1cyc6IHNlbGYubXNnVXBsb2FkVGhyZXNob2xkfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ID0gdGVtcGxhdGUuc2V0VG9rZW5zKHsncGVyY2VudCc6IHBjdCwgJ3N0YXR1cyc6IChwID4gMTAwID8gc2VsZi5tc2dVcGxvYWRFbmQgOiBwY3QgKyAnJScpfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRlbC5odG1sKG91dCk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICRlbC5maW5kKCdbcm9sZT1cInByb2dyZXNzYmFyXCJdJykuaHRtbChlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfc2V0RmlsZURyb3Bab25lVGl0bGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgJHpvbmUgPSBzZWxmLiRjb250YWluZXIuZmluZCgnLmZpbGUtZHJvcC16b25lJyksIHRpdGxlID0gc2VsZi5kcm9wWm9uZVRpdGxlLCBzdHJGaWxlcztcbiAgICAgICAgICAgIGlmIChzZWxmLmlzQ2xpY2thYmxlKSB7XG4gICAgICAgICAgICAgICAgc3RyRmlsZXMgPSAkaC5pc0VtcHR5KHNlbGYuJGVsZW1lbnQuYXR0cignbXVsdGlwbGUnKSkgPyBzZWxmLmZpbGVTaW5nbGUgOiBzZWxmLmZpbGVQbHVyYWw7XG4gICAgICAgICAgICAgICAgdGl0bGUgKz0gc2VsZi5kcm9wWm9uZUNsaWNrVGl0bGUucmVwbGFjZSgne2ZpbGVzfScsIHN0ckZpbGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR6b25lLmZpbmQoJy4nICsgc2VsZi5kcm9wWm9uZVRpdGxlQ2xhc3MpLnJlbW92ZSgpO1xuICAgICAgICAgICAgaWYgKCFzZWxmLmlzQWpheFVwbG9hZCB8fCAhc2VsZi5zaG93UHJldmlldyB8fCAkem9uZS5sZW5ndGggPT09IDAgfHwgc2VsZi5nZXRGaWxlU3RhY2soKS5sZW5ndGggPiAwIHx8ICFzZWxmLmRyb3Bab25lRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkem9uZS5maW5kKCRoLkZSQU1FUykubGVuZ3RoID09PSAwICYmICRoLmlzRW1wdHkoc2VsZi5kZWZhdWx0UHJldmlld0NvbnRlbnQpKSB7XG4gICAgICAgICAgICAgICAgJHpvbmUucHJlcGVuZCgnPGRpdiBjbGFzcz1cIicgKyBzZWxmLmRyb3Bab25lVGl0bGVDbGFzcyArICdcIj4nICsgdGl0bGUgKyAnPC9kaXY+Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ2ZpbGUtaW5wdXQtbmV3Jyk7XG4gICAgICAgICAgICAkaC5hZGRDc3Moc2VsZi4kY29udGFpbmVyLCAnZmlsZS1pbnB1dC1hamF4LW5ldycpO1xuICAgICAgICB9LFxuICAgICAgICBfc2V0QXN5bmNVcGxvYWRTdGF0dXM6IGZ1bmN0aW9uIChwcmV2aWV3SWQsIHBjdCwgdG90YWwpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgc3VtID0gMDtcbiAgICAgICAgICAgIHNlbGYuX3NldFByb2dyZXNzKHBjdCwgJCgnIycgKyBwcmV2aWV3SWQpLmZpbmQoJy5maWxlLXRodW1iLXByb2dyZXNzJykpO1xuICAgICAgICAgICAgc2VsZi51cGxvYWRTdGF0dXNbcHJldmlld0lkXSA9IHBjdDtcbiAgICAgICAgICAgICQuZWFjaChzZWxmLnVwbG9hZFN0YXR1cywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzdW0gKz0gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGYuX3NldFByb2dyZXNzKE1hdGguZmxvb3Ioc3VtIC8gdG90YWwpKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3ZhbGlkYXRlTWluQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgbGVuID0gc2VsZi5pc0FqYXhVcGxvYWQgPyBzZWxmLmdldEZpbGVTdGFjaygpLmxlbmd0aCA6IHNlbGYuJGVsZW1lbnQuZ2V0KDApLmZpbGVzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChzZWxmLnZhbGlkYXRlSW5pdGlhbENvdW50ICYmIHNlbGYubWluRmlsZUNvdW50ID4gMCAmJiBzZWxmLl9nZXRGaWxlQ291bnQobGVuIC0gMSkgPCBzZWxmLm1pbkZpbGVDb3VudCkge1xuICAgICAgICAgICAgICAgIHNlbGYuX25vRmlsZXNFcnJvcih7fSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRGaWxlQ291bnQ6IGZ1bmN0aW9uIChmaWxlQ291bnQpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgYWRkQ291bnQgPSAwO1xuICAgICAgICAgICAgaWYgKHNlbGYudmFsaWRhdGVJbml0aWFsQ291bnQgJiYgIXNlbGYub3ZlcndyaXRlSW5pdGlhbCkge1xuICAgICAgICAgICAgICAgIGFkZENvdW50ID0gc2VsZi5wcmV2aWV3Q2FjaGUuY291bnQoKTtcbiAgICAgICAgICAgICAgICBmaWxlQ291bnQgKz0gYWRkQ291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmlsZUNvdW50O1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0RmlsZUlkOiBmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBjdXN0b20gPSBzZWxmLmdlbmVyYXRlRmlsZUlkLCByZWxhdGl2ZVBhdGg7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGN1c3RvbSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXN0b20oZmlsZSwgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiogQG5hbWVzcGFjZSBmaWxlLndlYmtpdFJlbGF0aXZlUGF0aCAqL1xuICAgICAgICAgICAgcmVsYXRpdmVQYXRoID0gU3RyaW5nKGZpbGUud2Via2l0UmVsYXRpdmVQYXRoIHx8IGZpbGUuZmlsZU5hbWUgfHwgZmlsZS5uYW1lIHx8IG51bGwpO1xuICAgICAgICAgICAgaWYgKCFyZWxhdGl2ZVBhdGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoZmlsZS5zaXplICsgJy0nICsgcmVsYXRpdmVQYXRoLnJlcGxhY2UoL1teMC05YS16QS1aXy1dL2ltZywgJycpKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldEZpbGVOYW1lOiBmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGUgJiYgZmlsZS5uYW1lID8gdGhpcy5zbHVnKGZpbGUubmFtZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRGaWxlSWRzOiBmdW5jdGlvbiAoc2tpcE51bGwpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmZpbGVpZHMuZmlsdGVyKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChza2lwTnVsbCA/IG4gIT09IHVuZGVmaW5lZCA6IG4gIT09IHVuZGVmaW5lZCAmJiBuICE9PSBudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0RmlsZU5hbWVzOiBmdW5jdGlvbiAoc2tpcE51bGwpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmZpbGVuYW1lcy5maWx0ZXIoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHNraXBOdWxsID8gbiAhPT0gdW5kZWZpbmVkIDogbiAhPT0gdW5kZWZpbmVkICYmIG4gIT09IG51bGwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRQcmV2aWV3RXJyb3I6IGZ1bmN0aW9uICgkdGh1bWIsIGksIHZhbCwgcmVwZWF0KSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoaSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVTdGFjayhpLCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzZWxmLnNob3dQcmV2aWV3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYucmVtb3ZlRnJvbVByZXZpZXdPbkVycm9yICYmICFyZXBlYXQpIHtcbiAgICAgICAgICAgICAgICAkdGh1bWIucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9zZXRUaHVtYlN0YXR1cygkdGh1bWIsICdFcnJvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5fcmVmcmVzaFVwbG9hZEJ1dHRvbigkdGh1bWIsIHJlcGVhdCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9yZWZyZXNoVXBsb2FkQnV0dG9uOiBmdW5jdGlvbiAoJHRodW1iLCByZXBlYXQpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgJGJ0biA9ICR0aHVtYi5maW5kKCcua3YtZmlsZS11cGxvYWQnKSwgY2ZnID0gc2VsZi5maWxlQWN0aW9uU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgaWNvbiA9IGNmZy51cGxvYWRJY29uLCB0aXRsZSA9IGNmZy51cGxvYWRUaXRsZTtcbiAgICAgICAgICAgIGlmICghJGJ0bi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVwZWF0KSB7XG4gICAgICAgICAgICAgICAgaWNvbiA9IGNmZy51cGxvYWRSZXRyeUljb247XG4gICAgICAgICAgICAgICAgdGl0bGUgPSBjZmcudXBsb2FkUmV0cnlUaXRsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRidG4uYXR0cigndGl0bGUnLCB0aXRsZSkuaHRtbChpY29uKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2NoZWNrRGltZW5zaW9uczogZnVuY3Rpb24gKGksIGNoaywgJGltZywgJHRodW1iLCBmbmFtZSwgdHlwZSwgcGFyYW1zKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIG1zZywgZGltLCB0YWcgPSBjaGsgPT09ICdTbWFsbCcgPyAnbWluJyA6ICdtYXgnLCBsaW1pdCA9IHNlbGZbdGFnICsgJ0ltYWdlJyArIHR5cGVdLFxuICAgICAgICAgICAgICAgICRpbWdFbCwgaXNWYWxpZDtcbiAgICAgICAgICAgIGlmICgkaC5pc0VtcHR5KGxpbWl0KSB8fCAhJGltZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkaW1nRWwgPSAkaW1nWzBdO1xuICAgICAgICAgICAgZGltID0gKHR5cGUgPT09ICdXaWR0aCcpID8gJGltZ0VsLm5hdHVyYWxXaWR0aCB8fCAkaW1nRWwud2lkdGggOiAkaW1nRWwubmF0dXJhbEhlaWdodCB8fCAkaW1nRWwuaGVpZ2h0O1xuICAgICAgICAgICAgaXNWYWxpZCA9IGNoayA9PT0gJ1NtYWxsJyA/IGRpbSA+PSBsaW1pdCA6IGRpbSA8PSBsaW1pdDtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbXNnID0gc2VsZlsnbXNnSW1hZ2UnICsgdHlwZSArIGNoa10uc2V0VG9rZW5zKHsnbmFtZSc6IGZuYW1lLCAnc2l6ZSc6IGxpbWl0fSk7XG4gICAgICAgICAgICBzZWxmLl9zaG93VXBsb2FkRXJyb3IobXNnLCBwYXJhbXMpO1xuICAgICAgICAgICAgc2VsZi5fc2V0UHJldmlld0Vycm9yKCR0aHVtYiwgaSwgbnVsbCk7XG4gICAgICAgIH0sXG4gICAgICAgIF92YWxpZGF0ZUltYWdlOiBmdW5jdGlvbiAocHJldmlld0lkLCBmbmFtZSwgZnR5cGUsIGZzaXplLCBpRGF0YSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCAkcHJldmlldyA9IHNlbGYuJHByZXZpZXcsIHBhcmFtcywgdzEsIHcyLCAkdGh1bWIgPSAkcHJldmlldy5maW5kKFwiI1wiICsgcHJldmlld0lkKSxcbiAgICAgICAgICAgICAgICBpID0gJHRodW1iLmF0dHIoJ2RhdGEtZmlsZWluZGV4JyksICRpbWcgPSAkdGh1bWIuZmluZCgnaW1nJyksIGV4aWZPYmplY3Q7XG4gICAgICAgICAgICBmbmFtZSA9IGZuYW1lIHx8ICdVbnRpdGxlZCc7XG4gICAgICAgICAgICAkaW1nLm9uZSgnbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB3MSA9ICR0aHVtYi53aWR0aCgpO1xuICAgICAgICAgICAgICAgIHcyID0gJHByZXZpZXcud2lkdGgoKTtcbiAgICAgICAgICAgICAgICBpZiAodzEgPiB3Mikge1xuICAgICAgICAgICAgICAgICAgICAkaW1nLmNzcygnd2lkdGgnLCAnMTAwJScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJhbXMgPSB7aW5kOiBpLCBpZDogcHJldmlld0lkfTtcbiAgICAgICAgICAgICAgICBzZWxmLl9jaGVja0RpbWVuc2lvbnMoaSwgJ1NtYWxsJywgJGltZywgJHRodW1iLCBmbmFtZSwgJ1dpZHRoJywgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9jaGVja0RpbWVuc2lvbnMoaSwgJ1NtYWxsJywgJGltZywgJHRodW1iLCBmbmFtZSwgJ0hlaWdodCcsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLnJlc2l6ZUltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2NoZWNrRGltZW5zaW9ucyhpLCAnTGFyZ2UnLCAkaW1nLCAkdGh1bWIsIGZuYW1lLCAnV2lkdGgnLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9jaGVja0RpbWVuc2lvbnMoaSwgJ0xhcmdlJywgJGltZywgJHRodW1iLCBmbmFtZSwgJ0hlaWdodCcsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlaW1hZ2Vsb2FkZWQnLCBbcHJldmlld0lkXSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZXhpZk9iamVjdCA9IHdpbmRvdy5waWV4aWYgPyB3aW5kb3cucGlleGlmLmxvYWQoaURhdGEpIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhpZk9iamVjdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYubG9hZGVkSW1hZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBpbmQ6IGksXG4gICAgICAgICAgICAgICAgICAgIGltZzogJGltZyxcbiAgICAgICAgICAgICAgICAgICAgdGh1bWI6ICR0aHVtYixcbiAgICAgICAgICAgICAgICAgICAgcGlkOiBwcmV2aWV3SWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cDogZnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHNpejogZnNpemUsXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGltZ0RhdGE6IGlEYXRhLFxuICAgICAgICAgICAgICAgICAgICBleGlmT2JqOiBleGlmT2JqZWN0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgJHRodW1iLmRhdGEoJ2V4aWYnLCBleGlmT2JqZWN0KTtcbiAgICAgICAgICAgICAgICBzZWxmLl92YWxpZGF0ZUFsbEltYWdlcygpO1xuICAgICAgICAgICAgfSkub25lKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9yYWlzZSgnZmlsZWltYWdlbG9hZGVycm9yJywgW3ByZXZpZXdJZF0pO1xuICAgICAgICAgICAgfSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCdsb2FkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudHJpZ2dlcignZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfdmFsaWRhdGVBbGxJbWFnZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgaSwgY291bnRlciA9IHt2YWw6IDB9LCBudW1JbWdzID0gc2VsZi5sb2FkZWRJbWFnZXMubGVuZ3RoLCBjb25maWcsXG4gICAgICAgICAgICAgICAgZnNpemUsIG1pblNpemUgPSBzZWxmLnJlc2l6ZUlmU2l6ZU1vcmVUaGFuO1xuICAgICAgICAgICAgaWYgKG51bUltZ3MgIT09IHNlbGYudG90YWxJbWFnZXNDb3VudCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlaW1hZ2VzbG9hZGVkJyk7XG4gICAgICAgICAgICBpZiAoIXNlbGYucmVzaXplSW1hZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2VsZi5sb2FkZWRJbWFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25maWcgPSBzZWxmLmxvYWRlZEltYWdlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnZhbGlkYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnNpemUgPSBjb25maWcuc2l6O1xuICAgICAgICAgICAgICAgIGlmIChmc2l6ZSAmJiBmc2l6ZSA+IG1pblNpemUgKiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2dldFJlc2l6ZWRJbWFnZShjb25maWcsIGNvdW50ZXIsIG51bUltZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLmxvYWRlZEltYWdlc1tpXS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0UmVzaXplZEltYWdlOiBmdW5jdGlvbiAoY29uZmlnLCBjb3VudGVyLCBudW1JbWdzKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIGltZyA9ICQoY29uZmlnLmltZylbMF0sIHdpZHRoID0gaW1nLm5hdHVyYWxXaWR0aCwgaGVpZ2h0ID0gaW1nLm5hdHVyYWxIZWlnaHQsIGJsb2IsXG4gICAgICAgICAgICAgICAgcmF0aW8gPSAxLCBtYXhXaWR0aCA9IHNlbGYubWF4SW1hZ2VXaWR0aCB8fCB3aWR0aCwgbWF4SGVpZ2h0ID0gc2VsZi5tYXhJbWFnZUhlaWdodCB8fCBoZWlnaHQsXG4gICAgICAgICAgICAgICAgaXNWYWxpZEltYWdlID0gISEod2lkdGggJiYgaGVpZ2h0KSwgY2hrV2lkdGgsIGNoa0hlaWdodCwgY2FudmFzID0gc2VsZi5pbWFnZUNhbnZhcywgZGF0YVVSSSxcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gc2VsZi5pbWFnZUNhbnZhc0NvbnRleHQsIHR5cGUgPSBjb25maWcudHlwLCBwaWQgPSBjb25maWcucGlkLCBpbmQgPSBjb25maWcuaW5kLFxuICAgICAgICAgICAgICAgICR0aHVtYiA9IGNvbmZpZy50aHVtYiwgdGhyb3dFcnJvciwgbXNnLCBleGlmT2JqID0gY29uZmlnLmV4aWZPYmosIGV4aWZTdHI7XG4gICAgICAgICAgICB0aHJvd0Vycm9yID0gZnVuY3Rpb24gKG1zZywgcGFyYW1zLCBldikge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmlzQWpheFVwbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9zaG93VXBsb2FkRXJyb3IobXNnLCBwYXJhbXMsIGV2KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9zaG93RXJyb3IobXNnLCBwYXJhbXMsIGV2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZi5fc2V0UHJldmlld0Vycm9yKCR0aHVtYiwgaW5kKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIXNlbGYuZmlsZXN0YWNrW2luZF0gfHwgIWlzVmFsaWRJbWFnZSB8fCAod2lkdGggPD0gbWF4V2lkdGggJiYgaGVpZ2h0IDw9IG1heEhlaWdodCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZEltYWdlICYmIHNlbGYuZmlsZXN0YWNrW2luZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGVpbWFnZXJlc2l6ZWQnLCBbcGlkLCBpbmRdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY291bnRlci52YWwrKztcbiAgICAgICAgICAgICAgICBpZiAoY291bnRlci52YWwgPT09IG51bUltZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGVpbWFnZXNyZXNpemVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZEltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3Ioc2VsZi5tc2dJbWFnZVJlc2l6ZUVycm9yLCB7aWQ6IHBpZCwgJ2luZGV4JzogaW5kfSwgJ2ZpbGVpbWFnZXJlc2l6ZWVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0eXBlID0gdHlwZSB8fCBzZWxmLnJlc2l6ZURlZmF1bHRJbWFnZVR5cGU7XG4gICAgICAgICAgICBjaGtXaWR0aCA9IHdpZHRoID4gbWF4V2lkdGg7XG4gICAgICAgICAgICBjaGtIZWlnaHQgPSBoZWlnaHQgPiBtYXhIZWlnaHQ7XG4gICAgICAgICAgICBpZiAoc2VsZi5yZXNpemVQcmVmZXJlbmNlID09PSAnd2lkdGgnKSB7XG4gICAgICAgICAgICAgICAgcmF0aW8gPSBjaGtXaWR0aCA/IG1heFdpZHRoIC8gd2lkdGggOiAoY2hrSGVpZ2h0ID8gbWF4SGVpZ2h0IC8gaGVpZ2h0IDogMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJhdGlvID0gY2hrSGVpZ2h0ID8gbWF4SGVpZ2h0IC8gaGVpZ2h0IDogKGNoa1dpZHRoID8gbWF4V2lkdGggLyB3aWR0aCA6IDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5fcmVzZXRDYW52YXMoKTtcbiAgICAgICAgICAgIHdpZHRoICo9IHJhdGlvO1xuICAgICAgICAgICAgaGVpZ2h0ICo9IHJhdGlvO1xuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWcsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIGRhdGFVUkkgPSBjYW52YXMudG9EYXRhVVJMKHR5cGUsIHNlbGYucmVzaXplUXVhbGl0eSk7XG4gICAgICAgICAgICAgICAgaWYgKGV4aWZPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgZXhpZlN0ciA9IHdpbmRvdy5waWV4aWYuZHVtcChleGlmT2JqKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVVSSSA9IHdpbmRvdy5waWV4aWYuaW5zZXJ0KGV4aWZTdHIsIGRhdGFVUkkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBibG9iID0gJGguZGF0YVVSSTJCbG9iKGRhdGFVUkkpO1xuICAgICAgICAgICAgICAgIHNlbGYuZmlsZXN0YWNrW2luZF0gPSBibG9iO1xuICAgICAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlaW1hZ2VyZXNpemVkJywgW3BpZCwgaW5kXSk7XG4gICAgICAgICAgICAgICAgY291bnRlci52YWwrKztcbiAgICAgICAgICAgICAgICBpZiAoY291bnRlci52YWwgPT09IG51bUltZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGVpbWFnZXNyZXNpemVkJywgW3VuZGVmaW5lZCwgdW5kZWZpbmVkXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghKGJsb2IgaW5zdGFuY2VvZiBCbG9iKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKHNlbGYubXNnSW1hZ2VSZXNpemVFcnJvciwge2lkOiBwaWQsICdpbmRleCc6IGluZH0sICdmaWxlaW1hZ2VyZXNpemVlcnJvcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb3VudGVyLnZhbCsrO1xuICAgICAgICAgICAgICAgIGlmIChjb3VudGVyLnZhbCA9PT0gbnVtSW1ncykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9yYWlzZSgnZmlsZWltYWdlc3Jlc2l6ZWQnLCBbdW5kZWZpbmVkLCB1bmRlZmluZWRdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbXNnID0gc2VsZi5tc2dJbWFnZVJlc2l6ZUV4Y2VwdGlvbi5yZXBsYWNlKCd7ZXJyb3JzfScsIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKG1zZywge2lkOiBwaWQsICdpbmRleCc6IGluZH0sICdmaWxlaW1hZ2VyZXNpemVleGNlcHRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2luaXRCcm93c2U6IGZ1bmN0aW9uICgkY29udGFpbmVyKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoc2VsZi5zaG93QnJvd3NlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kYnRuRmlsZSA9ICRjb250YWluZXIuZmluZCgnLmJ0bi1maWxlJyk7XG4gICAgICAgICAgICAgICAgc2VsZi4kYnRuRmlsZS5hcHBlbmQoc2VsZi4kZWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuJGVsZW1lbnQuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfaW5pdENhcHRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgY2FwID0gc2VsZi5pbml0aWFsQ2FwdGlvbiB8fCAnJztcbiAgICAgICAgICAgIGlmIChzZWxmLm92ZXJ3cml0ZUluaXRpYWwgfHwgJGguaXNFbXB0eShjYXApKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kY2FwdGlvbi52YWwoJycpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX3NldENhcHRpb24oY2FwKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBfc2V0Q2FwdGlvbjogZnVuY3Rpb24gKGNvbnRlbnQsIGlzRXJyb3IpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgdGl0bGUsIG91dCwgaWNvbiwgbiwgY2FwLCBzdGFjayA9IHNlbGYuZ2V0RmlsZVN0YWNrKCk7XG4gICAgICAgICAgICBpZiAoIXNlbGYuJGNhcHRpb24ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi4kY2FwdGlvbkNvbnRhaW5lci5yZW1vdmVDbGFzcygnaWNvbi12aXNpYmxlJyk7XG4gICAgICAgICAgICBpZiAoaXNFcnJvcikge1xuICAgICAgICAgICAgICAgIHRpdGxlID0gJCgnPGRpdj4nICsgc2VsZi5tc2dWYWxpZGF0aW9uRXJyb3IgKyAnPC9kaXY+JykudGV4dCgpO1xuICAgICAgICAgICAgICAgIG4gPSBzdGFjay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FwID0gbiA9PT0gMSAmJiBzdGFja1swXSA/IHNlbGYuX2dldEZpbGVOYW1lcygpWzBdIDogc2VsZi5fZ2V0TXNnU2VsZWN0ZWQobik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FwID0gc2VsZi5fZ2V0TXNnU2VsZWN0ZWQoc2VsZi5tc2dObyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dCA9ICRoLmlzRW1wdHkoY29udGVudCkgPyBjYXAgOiBjb250ZW50O1xuICAgICAgICAgICAgICAgIGljb24gPSAnPHNwYW4gY2xhc3M9XCInICsgc2VsZi5tc2dWYWxpZGF0aW9uRXJyb3JDbGFzcyArICdcIj4nICsgc2VsZi5tc2dWYWxpZGF0aW9uRXJyb3JJY29uICsgJzwvc3Bhbj4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoJGguaXNFbXB0eShjb250ZW50KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRpdGxlID0gJCgnPGRpdj4nICsgY29udGVudCArICc8L2Rpdj4nKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgb3V0ID0gdGl0bGU7XG4gICAgICAgICAgICAgICAgaWNvbiA9IHNlbGYuX2dldExheW91dFRlbXBsYXRlKCdmaWxlSWNvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi4kY2FwdGlvbkNvbnRhaW5lci5hZGRDbGFzcygnaWNvbi12aXNpYmxlJyk7XG4gICAgICAgICAgICBzZWxmLiRjYXB0aW9uLmF0dHIoJ3RpdGxlJywgdGl0bGUpLnZhbChvdXQpO1xuICAgICAgICAgICAgc2VsZi4kY2FwdGlvbkljb24uaHRtbChpY29uKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2NyZWF0ZUNvbnRhaW5lcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBhdHRyaWJzID0ge1wiY2xhc3NcIjogJ2ZpbGUtaW5wdXQgZmlsZS1pbnB1dC1uZXcnICsgKHNlbGYucnRsID8gJyBrdi1ydGwnIDogJycpfSxcbiAgICAgICAgICAgICAgICAkY29udGFpbmVyID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKS5hdHRyKGF0dHJpYnMpLmh0bWwoc2VsZi5fcmVuZGVyTWFpbigpKTtcbiAgICAgICAgICAgIHNlbGYuJGVsZW1lbnQuYmVmb3JlKCRjb250YWluZXIpO1xuICAgICAgICAgICAgc2VsZi5faW5pdEJyb3dzZSgkY29udGFpbmVyKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnRoZW1lKSB7XG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcygndGhlbWUtJyArIHNlbGYudGhlbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICRjb250YWluZXI7XG4gICAgICAgIH0sXG4gICAgICAgIF9yZWZyZXNoQ29udGFpbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRjb250YWluZXIgPSBzZWxmLiRjb250YWluZXI7XG4gICAgICAgICAgICAkY29udGFpbmVyLmJlZm9yZShzZWxmLiRlbGVtZW50KTtcbiAgICAgICAgICAgICRjb250YWluZXIuaHRtbChzZWxmLl9yZW5kZXJNYWluKCkpO1xuICAgICAgICAgICAgc2VsZi5faW5pdEJyb3dzZSgkY29udGFpbmVyKTtcbiAgICAgICAgICAgIHNlbGYuX3ZhbGlkYXRlRGlzYWJsZWQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3ZhbGlkYXRlRGlzYWJsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHNlbGYuJGNhcHRpb24uYXR0cih7cmVhZG9ubHk6IHNlbGYuaXNEaXNhYmxlZH0pO1xuICAgICAgICB9LFxuICAgICAgICBfcmVuZGVyTWFpbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGRyb3BDc3MgPSAoc2VsZi5pc0FqYXhVcGxvYWQgJiYgc2VsZi5kcm9wWm9uZUVuYWJsZWQpID8gJyBmaWxlLWRyb3Atem9uZScgOiAnZmlsZS1kcm9wLWRpc2FibGVkJyxcbiAgICAgICAgICAgICAgICBjbG9zZSA9ICFzZWxmLnNob3dDbG9zZSA/ICcnIDogc2VsZi5fZ2V0TGF5b3V0VGVtcGxhdGUoJ2Nsb3NlJyksXG4gICAgICAgICAgICAgICAgcHJldmlldyA9ICFzZWxmLnNob3dQcmV2aWV3ID8gJycgOiBzZWxmLl9nZXRMYXlvdXRUZW1wbGF0ZSgncHJldmlldycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb2tlbnMoeydjbGFzcyc6IHNlbGYucHJldmlld0NsYXNzLCAnZHJvcENsYXNzJzogZHJvcENzc30pLFxuICAgICAgICAgICAgICAgIGNzcyA9IHNlbGYuaXNEaXNhYmxlZCA/IHNlbGYuY2FwdGlvbkNsYXNzICsgJyBmaWxlLWNhcHRpb24tZGlzYWJsZWQnIDogc2VsZi5jYXB0aW9uQ2xhc3MsXG4gICAgICAgICAgICAgICAgY2FwdGlvbiA9IHNlbGYuY2FwdGlvblRlbXBsYXRlLnNldFRva2Vucyh7J2NsYXNzJzogY3NzICsgJyBrdi1maWxlaW5wdXQtY2FwdGlvbid9KTtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLm1haW5UZW1wbGF0ZS5zZXRUb2tlbnMoe1xuICAgICAgICAgICAgICAgICdjbGFzcyc6IHNlbGYubWFpbkNsYXNzICsgKCFzZWxmLnNob3dCcm93c2UgJiYgc2VsZi5zaG93Q2FwdGlvbiA/ICcgbm8tYnJvd3NlJyA6ICcnKSxcbiAgICAgICAgICAgICAgICAncHJldmlldyc6IHByZXZpZXcsXG4gICAgICAgICAgICAgICAgJ2Nsb3NlJzogY2xvc2UsXG4gICAgICAgICAgICAgICAgJ2NhcHRpb24nOiBjYXB0aW9uLFxuICAgICAgICAgICAgICAgICd1cGxvYWQnOiBzZWxmLl9yZW5kZXJCdXR0b24oJ3VwbG9hZCcpLFxuICAgICAgICAgICAgICAgICdyZW1vdmUnOiBzZWxmLl9yZW5kZXJCdXR0b24oJ3JlbW92ZScpLFxuICAgICAgICAgICAgICAgICdjYW5jZWwnOiBzZWxmLl9yZW5kZXJCdXR0b24oJ2NhbmNlbCcpLFxuICAgICAgICAgICAgICAgICdicm93c2UnOiBzZWxmLl9yZW5kZXJCdXR0b24oJ2Jyb3dzZScpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuICAgICAgICBfcmVuZGVyQnV0dG9uOiBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCB0bXBsdCA9IHNlbGYuX2dldExheW91dFRlbXBsYXRlKCdidG5EZWZhdWx0JyksIGNzcyA9IHNlbGZbdHlwZSArICdDbGFzcyddLFxuICAgICAgICAgICAgICAgIHRpdGxlID0gc2VsZlt0eXBlICsgJ1RpdGxlJ10sIGljb24gPSBzZWxmW3R5cGUgKyAnSWNvbiddLCBsYWJlbCA9IHNlbGZbdHlwZSArICdMYWJlbCddLFxuICAgICAgICAgICAgICAgIHN0YXR1cyA9IHNlbGYuaXNEaXNhYmxlZCA/ICcgZGlzYWJsZWQnIDogJycsIGJ0blR5cGUgPSAnYnV0dG9uJztcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JlbW92ZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5zaG93UmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2FuY2VsJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnNob3dDYW5jZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjc3MgKz0gJyBrdi1oaWRkZW4nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1cGxvYWQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuc2hvd1VwbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmlzQWpheFVwbG9hZCAmJiAhc2VsZi5pc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBsdCA9IHNlbGYuX2dldExheW91dFRlbXBsYXRlKCdidG5MaW5rJykucmVwbGFjZSgne2hyZWZ9Jywgc2VsZi51cGxvYWRVcmwpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnRuVHlwZSA9ICdzdWJtaXQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Jyb3dzZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5zaG93QnJvd3NlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdG1wbHQgPSBzZWxmLl9nZXRMYXlvdXRUZW1wbGF0ZSgnYnRuQnJvd3NlJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3NzICs9IHR5cGUgPT09ICdicm93c2UnID8gJyBidG4tZmlsZScgOiAnIGZpbGVpbnB1dC0nICsgdHlwZSArICcgZmlsZWlucHV0LScgKyB0eXBlICsgJy1idXR0b24nO1xuICAgICAgICAgICAgaWYgKCEkaC5pc0VtcHR5KGxhYmVsKSkge1xuICAgICAgICAgICAgICAgIGxhYmVsID0gJyA8c3BhbiBjbGFzcz1cIicgKyBzZWxmLmJ1dHRvbkxhYmVsQ2xhc3MgKyAnXCI+JyArIGxhYmVsICsgJzwvc3Bhbj4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRtcGx0LnNldFRva2Vucyh7XG4gICAgICAgICAgICAgICAgJ3R5cGUnOiBidG5UeXBlLCAnY3NzJzogY3NzLCAndGl0bGUnOiB0aXRsZSwgJ3N0YXR1cyc6IHN0YXR1cywgJ2ljb24nOiBpY29uLCAnbGFiZWwnOiBsYWJlbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9yZW5kZXJUaHVtYlByb2dyZXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJmaWxlLXRodW1iLXByb2dyZXNzIGt2LWhpZGRlblwiPicgK1xuICAgICAgICAgICAgICAgIHNlbGYucHJvZ3Jlc3NUZW1wbGF0ZS5zZXRUb2tlbnMoeydwZXJjZW50JzogJzAnLCAnc3RhdHVzJzogc2VsZi5tc2dVcGxvYWRCZWdpbn0pICtcbiAgICAgICAgICAgICAgICAnPC9kaXY+JztcbiAgICAgICAgfSxcbiAgICAgICAgX3JlbmRlckZpbGVGb290ZXI6IGZ1bmN0aW9uIChjYXB0aW9uLCBzaXplLCB3aWR0aCwgaXNFcnJvcikge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBjb25maWcgPSBzZWxmLmZpbGVBY3Rpb25TZXR0aW5ncywgcmVtID0gY29uZmlnLnNob3dSZW1vdmUsIGRyZyA9IGNvbmZpZy5zaG93RHJhZyxcbiAgICAgICAgICAgICAgICB1cGwgPSBjb25maWcuc2hvd1VwbG9hZCwgem9vbSA9IGNvbmZpZy5zaG93Wm9vbSwgb3V0LFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gc2VsZi5fZ2V0TGF5b3V0VGVtcGxhdGUoJ2Zvb3RlcicpLCB0SW5kID0gc2VsZi5fZ2V0TGF5b3V0VGVtcGxhdGUoJ2luZGljYXRvcicpLFxuICAgICAgICAgICAgICAgIGluZCA9IGlzRXJyb3IgPyBjb25maWcuaW5kaWNhdG9yRXJyb3IgOiBjb25maWcuaW5kaWNhdG9yTmV3LFxuICAgICAgICAgICAgICAgIHRpdGxlID0gaXNFcnJvciA/IGNvbmZpZy5pbmRpY2F0b3JFcnJvclRpdGxlIDogY29uZmlnLmluZGljYXRvck5ld1RpdGxlLFxuICAgICAgICAgICAgICAgIGluZGljYXRvciA9IHRJbmQuc2V0VG9rZW5zKHsnaW5kaWNhdG9yJzogaW5kLCAnaW5kaWNhdG9yVGl0bGUnOiB0aXRsZX0pO1xuICAgICAgICAgICAgc2l6ZSA9IHNlbGYuX2dldFNpemUoc2l6ZSk7XG4gICAgICAgICAgICBpZiAoc2VsZi5pc0FqYXhVcGxvYWQpIHtcbiAgICAgICAgICAgICAgICBvdXQgPSB0ZW1wbGF0ZS5zZXRUb2tlbnMoe1xuICAgICAgICAgICAgICAgICAgICAnYWN0aW9ucyc6IHNlbGYuX3JlbmRlckZpbGVBY3Rpb25zKHVwbCwgZmFsc2UsIHJlbSwgem9vbSwgZHJnLCBmYWxzZSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgJ2NhcHRpb24nOiBjYXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAnc2l6ZSc6IHNpemUsXG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCc6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAncHJvZ3Jlc3MnOiBzZWxmLl9yZW5kZXJUaHVtYlByb2dyZXNzKCksXG4gICAgICAgICAgICAgICAgICAgICdpbmRpY2F0b3InOiBpbmRpY2F0b3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0ID0gdGVtcGxhdGUuc2V0VG9rZW5zKHtcbiAgICAgICAgICAgICAgICAgICAgJ2FjdGlvbnMnOiBzZWxmLl9yZW5kZXJGaWxlQWN0aW9ucyhmYWxzZSwgZmFsc2UsIGZhbHNlLCB6b29tLCBkcmcsIGZhbHNlLCBmYWxzZSwgZmFsc2UpLFxuICAgICAgICAgICAgICAgICAgICAnY2FwdGlvbic6IGNhcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICdzaXplJzogc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICdwcm9ncmVzcyc6ICcnLFxuICAgICAgICAgICAgICAgICAgICAnaW5kaWNhdG9yJzogaW5kaWNhdG9yXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgPSAkaC5yZXBsYWNlVGFncyhvdXQsIHNlbGYucHJldmlld1RodW1iVGFncyk7XG4gICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9LFxuICAgICAgICBfcmVuZGVyRmlsZUFjdGlvbnM6IGZ1bmN0aW9uIChzaG93VXBsLCBzaG93RHduLCBzaG93RGVsLCBzaG93Wm9vbSwgc2hvd0RyYWcsIGRpc2FibGVkLCB1cmwsIGtleSwgaXNJbml0LCBkVXJsLCBkRmlsZSkge1xuICAgICAgICAgICAgaWYgKCFzaG93VXBsICYmICFzaG93RHduICYmICFzaG93RGVsICYmICFzaG93Wm9vbSAmJiAhc2hvd0RyYWcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIHZVcmwgPSB1cmwgPT09IGZhbHNlID8gJycgOiAnIGRhdGEtdXJsPVwiJyArIHVybCArICdcIicsXG4gICAgICAgICAgICAgICAgdktleSA9IGtleSA9PT0gZmFsc2UgPyAnJyA6ICcgZGF0YS1rZXk9XCInICsga2V5ICsgJ1wiJywgYnRuRGVsZXRlID0gJycsIGJ0blVwbG9hZCA9ICcnLCBidG5Eb3dubG9hZCA9ICcnLFxuICAgICAgICAgICAgICAgIGJ0blpvb20gPSAnJywgYnRuRHJhZyA9ICcnLCBjc3MsIHRlbXBsYXRlID0gc2VsZi5fZ2V0TGF5b3V0VGVtcGxhdGUoJ2FjdGlvbnMnKSxcbiAgICAgICAgICAgICAgICBjb25maWcgPSBzZWxmLmZpbGVBY3Rpb25TZXR0aW5ncyxcbiAgICAgICAgICAgICAgICBvdGhlckJ1dHRvbnMgPSBzZWxmLm90aGVyQWN0aW9uQnV0dG9ucy5zZXRUb2tlbnMoeydkYXRhS2V5JzogdktleSwgJ2tleSc6IGtleX0pLFxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzID0gZGlzYWJsZWQgPyBjb25maWcucmVtb3ZlQ2xhc3MgKyAnIGRpc2FibGVkJyA6IGNvbmZpZy5yZW1vdmVDbGFzcztcbiAgICAgICAgICAgIGlmIChzaG93RGVsKSB7XG4gICAgICAgICAgICAgICAgYnRuRGVsZXRlID0gc2VsZi5fZ2V0TGF5b3V0VGVtcGxhdGUoJ2FjdGlvbkRlbGV0ZScpLnNldFRva2Vucyh7XG4gICAgICAgICAgICAgICAgICAgICdyZW1vdmVDbGFzcyc6IHJlbW92ZUNsYXNzLFxuICAgICAgICAgICAgICAgICAgICAncmVtb3ZlSWNvbic6IGNvbmZpZy5yZW1vdmVJY29uLFxuICAgICAgICAgICAgICAgICAgICAncmVtb3ZlVGl0bGUnOiBjb25maWcucmVtb3ZlVGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICdkYXRhVXJsJzogdlVybCxcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGFLZXknOiB2S2V5LFxuICAgICAgICAgICAgICAgICAgICAna2V5Jzoga2V5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hvd1VwbCkge1xuICAgICAgICAgICAgICAgIGJ0blVwbG9hZCA9IHNlbGYuX2dldExheW91dFRlbXBsYXRlKCdhY3Rpb25VcGxvYWQnKS5zZXRUb2tlbnMoe1xuICAgICAgICAgICAgICAgICAgICAndXBsb2FkQ2xhc3MnOiBjb25maWcudXBsb2FkQ2xhc3MsXG4gICAgICAgICAgICAgICAgICAgICd1cGxvYWRJY29uJzogY29uZmlnLnVwbG9hZEljb24sXG4gICAgICAgICAgICAgICAgICAgICd1cGxvYWRUaXRsZSc6IGNvbmZpZy51cGxvYWRUaXRsZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNob3dEd24pIHtcbiAgICAgICAgICAgICAgICBidG5Eb3dubG9hZCA9IHNlbGYuX2dldExheW91dFRlbXBsYXRlKCdhY3Rpb25Eb3dubG9hZCcpLnNldFRva2Vucyh7XG4gICAgICAgICAgICAgICAgICAgICdkb3dubG9hZENsYXNzJzogY29uZmlnLmRvd25sb2FkQ2xhc3MsXG4gICAgICAgICAgICAgICAgICAgICdkb3dubG9hZEljb24nOiBjb25maWcuZG93bmxvYWRJY29uLFxuICAgICAgICAgICAgICAgICAgICAnZG93bmxvYWRUaXRsZSc6IGNvbmZpZy5kb3dubG9hZFRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAnZG93bmxvYWRVcmwnOiBkVXJsIHx8IHNlbGYuaW5pdGlhbFByZXZpZXdEb3dubG9hZFVybFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJ0bkRvd25sb2FkID0gYnRuRG93bmxvYWQuc2V0VG9rZW5zKHsnZmlsZW5hbWUnOiBkRmlsZSwgJ2tleSc6IGtleX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNob3dab29tKSB7XG4gICAgICAgICAgICAgICAgYnRuWm9vbSA9IHNlbGYuX2dldExheW91dFRlbXBsYXRlKCdhY3Rpb25ab29tJykuc2V0VG9rZW5zKHtcbiAgICAgICAgICAgICAgICAgICAgJ3pvb21DbGFzcyc6IGNvbmZpZy56b29tQ2xhc3MsXG4gICAgICAgICAgICAgICAgICAgICd6b29tSWNvbic6IGNvbmZpZy56b29tSWNvbixcbiAgICAgICAgICAgICAgICAgICAgJ3pvb21UaXRsZSc6IGNvbmZpZy56b29tVGl0bGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaG93RHJhZyAmJiBpc0luaXQpIHtcbiAgICAgICAgICAgICAgICBjc3MgPSAnZHJhZy1oYW5kbGUtaW5pdCAnICsgY29uZmlnLmRyYWdDbGFzcztcbiAgICAgICAgICAgICAgICBidG5EcmFnID0gc2VsZi5fZ2V0TGF5b3V0VGVtcGxhdGUoJ2FjdGlvbkRyYWcnKS5zZXRUb2tlbnMoe1xuICAgICAgICAgICAgICAgICAgICAnZHJhZ0NsYXNzJzogY3NzLFxuICAgICAgICAgICAgICAgICAgICAnZHJhZ1RpdGxlJzogY29uZmlnLmRyYWdUaXRsZSxcbiAgICAgICAgICAgICAgICAgICAgJ2RyYWdJY29uJzogY29uZmlnLmRyYWdJY29uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdGUuc2V0VG9rZW5zKHtcbiAgICAgICAgICAgICAgICAnZGVsZXRlJzogYnRuRGVsZXRlLFxuICAgICAgICAgICAgICAgICd1cGxvYWQnOiBidG5VcGxvYWQsXG4gICAgICAgICAgICAgICAgJ2Rvd25sb2FkJzogYnRuRG93bmxvYWQsXG4gICAgICAgICAgICAgICAgJ3pvb20nOiBidG5ab29tLFxuICAgICAgICAgICAgICAgICdkcmFnJzogYnRuRHJhZyxcbiAgICAgICAgICAgICAgICAnb3RoZXInOiBvdGhlckJ1dHRvbnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBfYnJvd3NlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgc2VsZi5fcmFpc2UoJ2ZpbGVicm93c2UnKTtcbiAgICAgICAgICAgIGlmIChlICYmIGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5pc0Vycm9yICYmICFzZWxmLmlzQWpheFVwbG9hZCkge1xuICAgICAgICAgICAgICAgIHNlbGYuY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuJGNhcHRpb25Db250YWluZXIuZm9jdXMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2ZpbHRlckR1cGxpY2F0ZTogZnVuY3Rpb24gKGZpbGUsIGZpbGVzLCBmaWxlSWRzKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIGZpbGVJZCA9IHNlbGYuX2dldEZpbGVJZChmaWxlKTtcbiAgICAgICAgICAgIGlmIChmaWxlSWQgJiYgZmlsZUlkcyAmJiBmaWxlSWRzLmluZGV4T2YoZmlsZUlkKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFmaWxlSWRzKSB7XG4gICAgICAgICAgICAgICAgZmlsZUlkcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsZXMucHVzaChmaWxlKTtcbiAgICAgICAgICAgIGZpbGVJZHMucHVzaChmaWxlSWQpO1xuICAgICAgICB9LFxuICAgICAgICBfY2hhbmdlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCAkZWwgPSBzZWxmLiRlbGVtZW50O1xuICAgICAgICAgICAgaWYgKCFzZWxmLmlzQWpheFVwbG9hZCAmJiAkaC5pc0VtcHR5KCRlbC52YWwoKSkgJiYgc2VsZi5maWxlSW5wdXRDbGVhcmVkKSB7IC8vIElFIDExIGZpeFxuICAgICAgICAgICAgICAgIHNlbGYuZmlsZUlucHV0Q2xlYXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuZmlsZUlucHV0Q2xlYXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHRmaWxlcyA9IFtdLCBtc2csIHRvdGFsLCBpc0RyYWdEcm9wID0gYXJndW1lbnRzLmxlbmd0aCA+IDEsIGlzQWpheFVwbG9hZCA9IHNlbGYuaXNBamF4VXBsb2FkLCBuLCBsZW4sXG4gICAgICAgICAgICAgICAgZmlsZXMgPSBpc0RyYWdEcm9wID8gZS5vcmlnaW5hbEV2ZW50LmRhdGFUcmFuc2Zlci5maWxlcyA6ICRlbC5nZXQoMCkuZmlsZXMsIGN0ciA9IHNlbGYuZmlsZXN0YWNrLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpc1NpbmdsZVVwbG9hZCA9ICRoLmlzRW1wdHkoJGVsLmF0dHIoJ211bHRpcGxlJykpLCBmbGFnU2luZ2xlID0gKGlzU2luZ2xlVXBsb2FkICYmIGN0ciA+IDApLFxuICAgICAgICAgICAgICAgIGZvbGRlcnMgPSAwLCBmaWxlSWRzID0gc2VsZi5fZ2V0RmlsZUlkcygpLCB0aHJvd0Vycm9yID0gZnVuY3Rpb24gKG1lc2csIGZpbGUsIHByZXZpZXdJZCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHAxID0gJC5leHRlbmQodHJ1ZSwge30sIHNlbGYuX2dldE91dERhdGEoe30sIHt9LCBmaWxlcyksIHtpZDogcHJldmlld0lkLCBpbmRleDogaW5kZXh9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID0ge2lkOiBwcmV2aWV3SWQsIGluZGV4OiBpbmRleCwgZmlsZTogZmlsZSwgZmlsZXM6IGZpbGVzfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuaXNBamF4VXBsb2FkID8gc2VsZi5fc2hvd1VwbG9hZEVycm9yKG1lc2csIHAxKSA6IHNlbGYuX3Nob3dFcnJvcihtZXNnLCBwMik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNlbGYucmVhZGVyID0gbnVsbDtcbiAgICAgICAgICAgIHNlbGYuX3Jlc2V0VXBsb2FkKCk7XG4gICAgICAgICAgICBzZWxmLl9oaWRlRmlsZUljb24oKTtcbiAgICAgICAgICAgIGlmIChzZWxmLmlzQWpheFVwbG9hZCkge1xuICAgICAgICAgICAgICAgIHNlbGYuJGNvbnRhaW5lci5maW5kKCcuZmlsZS1kcm9wLXpvbmUgLicgKyBzZWxmLmRyb3Bab25lVGl0bGVDbGFzcykucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNEcmFnRHJvcCkge1xuICAgICAgICAgICAgICAgICQuZWFjaChmaWxlcywgZnVuY3Rpb24gKGksIGYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGYgJiYgIWYudHlwZSAmJiBmLnNpemUgIT09IHVuZGVmaW5lZCAmJiBmLnNpemUgJSA0MDk2ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2xkZXJzKys7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9maWx0ZXJEdXBsaWNhdGUoZiwgdGZpbGVzLCBmaWxlSWRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgJiYgZS50YXJnZXQuZmlsZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBmaWxlcyA9IGUudGFyZ2V0LnZhbHVlID8gW3tuYW1lOiBlLnRhcmdldC52YWx1ZS5yZXBsYWNlKC9eLitcXFxcLywgJycpfV0gOiBbXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWxlcyA9IGUudGFyZ2V0LmZpbGVzIHx8IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNBamF4VXBsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChmaWxlcywgZnVuY3Rpb24gKGksIGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2ZpbHRlckR1cGxpY2F0ZShmLCB0ZmlsZXMsIGZpbGVJZHMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZmlsZXMgPSBmaWxlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJGguaXNFbXB0eSh0ZmlsZXMpIHx8IHRmaWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQWpheFVwbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuX3Nob3dGb2xkZXJFcnJvcihmb2xkZXJzKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9yYWlzZSgnZmlsZXNlbGVjdG5vbmUnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl9yZXNldEVycm9ycygpO1xuICAgICAgICAgICAgbGVuID0gdGZpbGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHRvdGFsID0gc2VsZi5fZ2V0RmlsZUNvdW50KHNlbGYuaXNBamF4VXBsb2FkID8gKHNlbGYuZ2V0RmlsZVN0YWNrKCkubGVuZ3RoICsgbGVuKSA6IGxlbik7XG4gICAgICAgICAgICBpZiAoc2VsZi5tYXhGaWxlQ291bnQgPiAwICYmIHRvdGFsID4gc2VsZi5tYXhGaWxlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYuYXV0b1JlcGxhY2UgfHwgbGVuID4gc2VsZi5tYXhGaWxlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbiA9IChzZWxmLmF1dG9SZXBsYWNlICYmIGxlbiA+IHNlbGYubWF4RmlsZUNvdW50KSA/IGxlbiA6IHRvdGFsO1xuICAgICAgICAgICAgICAgICAgICBtc2cgPSBzZWxmLm1zZ0ZpbGVzVG9vTWFueS5yZXBsYWNlKCd7bX0nLCBzZWxmLm1heEZpbGVDb3VudCkucmVwbGFjZSgne259Jywgbik7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaXNFcnJvciA9IHRocm93RXJyb3IobXNnLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kY2FwdGlvbkNvbnRhaW5lci5yZW1vdmVDbGFzcygnaWNvbi12aXNpYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldENhcHRpb24oJycsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ2ZpbGUtaW5wdXQtbmV3IGZpbGUtaW5wdXQtYWpheC1uZXcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodG90YWwgPiBzZWxmLm1heEZpbGVDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9yZXNldFByZXZpZXdUaHVtYnMoaXNBamF4VXBsb2FkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghaXNBamF4VXBsb2FkIHx8IGZsYWdTaW5nbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVzZXRQcmV2aWV3VGh1bWJzKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWdTaW5nbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2xlYXJTdGFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWpheFVwbG9hZCAmJiBjdHIgPT09IDAgJiYgKCFzZWxmLnByZXZpZXdDYWNoZS5jb3VudCgpIHx8IHNlbGYub3ZlcndyaXRlSW5pdGlhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3Jlc2V0UHJldmlld1RodW1icyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLmlzUHJldmlld2FibGUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9yZWFkRmlsZXModGZpbGVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fdXBkYXRlRmlsZURldGFpbHMoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl9zaG93Rm9sZGVyRXJyb3IoZm9sZGVycyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9hYm9ydDogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBkYXRhO1xuICAgICAgICAgICAgaWYgKHNlbGYuYWpheEFib3J0ZWQgJiYgdHlwZW9mIHNlbGYuYWpheEFib3J0ZWQgPT09IFwib2JqZWN0XCIgJiYgc2VsZi5hamF4QWJvcnRlZC5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIHNlbGYuX2dldE91dERhdGEoKSwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBkYXRhLmFib3J0RGF0YSA9IHNlbGYuYWpheEFib3J0ZWQuZGF0YSB8fCB7fTtcbiAgICAgICAgICAgICAgICBkYXRhLmFib3J0TWVzc2FnZSA9IHNlbGYuYWpheEFib3J0ZWQubWVzc2FnZTtcbiAgICAgICAgICAgICAgICBzZWxmLl9zZXRQcm9ncmVzcygxMDEsIHNlbGYuJHByb2dyZXNzLCBzZWxmLm1zZ0NhbmNlbGxlZCk7XG4gICAgICAgICAgICAgICAgc2VsZi5fc2hvd1VwbG9hZEVycm9yKHNlbGYuYWpheEFib3J0ZWQubWVzc2FnZSwgZGF0YSwgJ2ZpbGVjdXN0b21lcnJvcicpO1xuICAgICAgICAgICAgICAgIHNlbGYuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gISFzZWxmLmFqYXhBYm9ydGVkO1xuICAgICAgICB9LFxuICAgICAgICBfcmVzZXRGaWxlU3RhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgaSA9IDAsIG5ld3N0YWNrID0gW10sIG5ld25hbWVzID0gW10sIG5ld2lkcyA9IFtdO1xuICAgICAgICAgICAgc2VsZi5fZ2V0VGh1bWJzKCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyICR0aHVtYiA9ICQodGhpcyksIGluZCA9ICR0aHVtYi5hdHRyKCdkYXRhLWZpbGVpbmRleCcpLCBmaWxlID0gc2VsZi5maWxlc3RhY2tbaW5kXSxcbiAgICAgICAgICAgICAgICAgICAgcGlkID0gJHRodW1iLmF0dHIoJ2lkJyksIG5ld0lkO1xuICAgICAgICAgICAgICAgIGlmIChpbmQgPT09ICctMScgfHwgaW5kID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmaWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3c3RhY2tbaV0gPSBmaWxlO1xuICAgICAgICAgICAgICAgICAgICBuZXduYW1lc1tpXSA9IHNlbGYuX2dldEZpbGVOYW1lKGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICBuZXdpZHNbaV0gPSBzZWxmLl9nZXRGaWxlSWQoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICR0aHVtYi5hdHRyKHsnaWQnOiBzZWxmLnByZXZpZXdJbml0SWQgKyAnLScgKyBpLCAnZGF0YS1maWxlaW5kZXgnOiBpfSk7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdJZCA9ICd1cGxvYWRlZC0nICsgJGgudW5pcUlkKCk7XG4gICAgICAgICAgICAgICAgICAgICR0aHVtYi5hdHRyKHsnaWQnOiBuZXdJZCwgJ2RhdGEtZmlsZWluZGV4JzogJy0xJ30pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLiRwcmV2aWV3LmZpbmQoJyN6b29tLScgKyBwaWQpLmF0dHIoJ2lkJywgJ3pvb20tJyArIG5ld0lkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGYuZmlsZXN0YWNrID0gbmV3c3RhY2s7XG4gICAgICAgICAgICBzZWxmLmZpbGVuYW1lcyA9IG5ld25hbWVzO1xuICAgICAgICAgICAgc2VsZi5maWxlaWRzID0gbmV3aWRzO1xuICAgICAgICB9LFxuICAgICAgICBfaXNGaWxlU2VsZWN0aW9uVmFsaWQ6IGZ1bmN0aW9uIChjbnQpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGNudCA9IGNudCB8fCAwO1xuICAgICAgICAgICAgaWYgKHNlbGYucmVxdWlyZWQgJiYgIXNlbGYuZ2V0RmlsZXNDb3VudCgpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kZXJyb3JDb250YWluZXIuaHRtbCgnJyk7XG4gICAgICAgICAgICAgICAgc2VsZi5fc2hvd1VwbG9hZEVycm9yKHNlbGYubXNnRmlsZVJlcXVpcmVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5taW5GaWxlQ291bnQgPiAwICYmIHNlbGYuX2dldEZpbGVDb3VudChjbnQpIDwgc2VsZi5taW5GaWxlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9ub0ZpbGVzRXJyb3Ioe30pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBjbGVhclN0YWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBzZWxmLmZpbGVzdGFjayA9IFtdO1xuICAgICAgICAgICAgc2VsZi5maWxlbmFtZXMgPSBbXTtcbiAgICAgICAgICAgIHNlbGYuZmlsZWlkcyA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuJGVsZW1lbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVN0YWNrOiBmdW5jdGlvbiAoaSwgZmlsZSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgc2VsZi5maWxlc3RhY2tbaV0gPSBmaWxlO1xuICAgICAgICAgICAgc2VsZi5maWxlbmFtZXNbaV0gPSBzZWxmLl9nZXRGaWxlTmFtZShmaWxlKTtcbiAgICAgICAgICAgIHNlbGYuZmlsZWlkc1tpXSA9IGZpbGUgJiYgc2VsZi5fZ2V0RmlsZUlkKGZpbGUpIHx8IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi4kZWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkVG9TdGFjazogZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHNlbGYuZmlsZXN0YWNrLnB1c2goZmlsZSk7XG4gICAgICAgICAgICBzZWxmLmZpbGVuYW1lcy5wdXNoKHNlbGYuX2dldEZpbGVOYW1lKGZpbGUpKTtcbiAgICAgICAgICAgIHNlbGYuZmlsZWlkcy5wdXNoKHNlbGYuX2dldEZpbGVJZChmaWxlKSk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi4kZWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0RmlsZVN0YWNrOiBmdW5jdGlvbiAoc2tpcE51bGwpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmZpbGVzdGFjay5maWx0ZXIoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHNraXBOdWxsID8gbiAhPT0gdW5kZWZpbmVkIDogbiAhPT0gdW5kZWZpbmVkICYmIG4gIT09IG51bGwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEZpbGVzQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgbGVuID0gc2VsZi5pc0FqYXhVcGxvYWQgPyBzZWxmLmdldEZpbGVTdGFjaygpLmxlbmd0aCA6IHNlbGYuJGVsZW1lbnQuZ2V0KDApLmZpbGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9nZXRGaWxlQ291bnQobGVuKTtcbiAgICAgICAgfSxcbiAgICAgICAgbG9jazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgc2VsZi5fcmVzZXRFcnJvcnMoKTtcbiAgICAgICAgICAgIHNlbGYuZGlzYWJsZSgpO1xuICAgICAgICAgICAgaWYgKHNlbGYuc2hvd1JlbW92ZSkge1xuICAgICAgICAgICAgICAgIHNlbGYuJGNvbnRhaW5lci5maW5kKCcuZmlsZWlucHV0LXJlbW92ZScpLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLnNob3dDYW5jZWwpIHtcbiAgICAgICAgICAgICAgICBzZWxmLiRjb250YWluZXIuZmluZCgnLmZpbGVpbnB1dC1jYW5jZWwnKS5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl9yYWlzZSgnZmlsZWxvY2snLCBbc2VsZi5maWxlc3RhY2ssIHNlbGYuX2dldEV4dHJhRGF0YSgpXSk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi4kZWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgdW5sb2NrOiBmdW5jdGlvbiAocmVzZXQpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGlmIChyZXNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzZXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5lbmFibGUoKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnNob3dDYW5jZWwpIHtcbiAgICAgICAgICAgICAgICBzZWxmLiRjb250YWluZXIuZmluZCgnLmZpbGVpbnB1dC1jYW5jZWwnKS5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5zaG93UmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kY29udGFpbmVyLmZpbmQoJy5maWxlaW5wdXQtcmVtb3ZlJykuc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fcmVzZXRGaWxlU3RhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxldW5sb2NrJywgW3NlbGYuZmlsZXN0YWNrLCBzZWxmLl9nZXRFeHRyYURhdGEoKV0pO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuJGVsZW1lbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCB4aHIgPSBzZWxmLmFqYXhSZXF1ZXN0cywgbGVuID0geGhyLmxlbmd0aCwgaTtcbiAgICAgICAgICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FuY2VsbGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHhocltpXS5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX3NldFByb2dyZXNzQ2FuY2VsbGVkKCk7XG4gICAgICAgICAgICBzZWxmLl9nZXRUaHVtYnMoKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgJHRodW1iID0gJCh0aGlzKSwgaW5kID0gJHRodW1iLmF0dHIoJ2RhdGEtZmlsZWluZGV4Jyk7XG4gICAgICAgICAgICAgICAgJHRodW1iLnJlbW92ZUNsYXNzKCdmaWxlLXVwbG9hZGluZycpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmZpbGVzdGFja1tpbmRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHRodW1iLmZpbmQoJy5rdi1maWxlLXVwbG9hZCcpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICR0aHVtYi5maW5kKCcua3YtZmlsZS1yZW1vdmUnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLnVubG9jaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi4kZWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgY2FwO1xuICAgICAgICAgICAgaWYgKCFzZWxmLl9yYWlzZSgnZmlsZWNsZWFyJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLiRidG5VcGxvYWQucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIHNlbGYuX2dldFRodW1icygpLmZpbmQoJ3ZpZGVvLGF1ZGlvLGltZycpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRoLmNsZWFuTWVtb3J5KCQodGhpcykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxmLl9yZXNldFVwbG9hZCgpO1xuICAgICAgICAgICAgc2VsZi5jbGVhclN0YWNrKCk7XG4gICAgICAgICAgICBzZWxmLl9jbGVhckZpbGVJbnB1dCgpO1xuICAgICAgICAgICAgc2VsZi5fcmVzZXRFcnJvcnModHJ1ZSk7XG4gICAgICAgICAgICBpZiAoc2VsZi5faGFzSW5pdGlhbFByZXZpZXcoKSkge1xuICAgICAgICAgICAgICAgIHNlbGYuX3Nob3dGaWxlSWNvbigpO1xuICAgICAgICAgICAgICAgIHNlbGYuX3Jlc2V0UHJldmlldygpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2luaXRQcmV2aWV3QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIHNlbGYuJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnZmlsZS1pbnB1dC1uZXcnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fZ2V0VGh1bWJzKCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2NsZWFyT2JqZWN0cygkKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5pc0FqYXhVcGxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wcmV2aWV3Q2FjaGUuZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLiRwcmV2aWV3Lmh0bWwoJycpO1xuICAgICAgICAgICAgICAgIGNhcCA9ICghc2VsZi5vdmVyd3JpdGVJbml0aWFsICYmIHNlbGYuaW5pdGlhbENhcHRpb24ubGVuZ3RoID4gMCkgPyBzZWxmLmluaXRpYWxDYXB0aW9uIDogJyc7XG4gICAgICAgICAgICAgICAgc2VsZi4kY2FwdGlvbi5hdHRyKCd0aXRsZScsICcnKS52YWwoY2FwKTtcbiAgICAgICAgICAgICAgICAkaC5hZGRDc3Moc2VsZi4kY29udGFpbmVyLCAnZmlsZS1pbnB1dC1uZXcnKTtcbiAgICAgICAgICAgICAgICBzZWxmLl92YWxpZGF0ZURlZmF1bHRQcmV2aWV3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi4kY29udGFpbmVyLmZpbmQoJGguRlJBTUVTKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYuX2luaXRDYXB0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kY2FwdGlvbkNvbnRhaW5lci5yZW1vdmVDbGFzcygnaWNvbi12aXNpYmxlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5faGlkZUZpbGVJY29uKCk7XG4gICAgICAgICAgICBzZWxmLl9yYWlzZSgnZmlsZWNsZWFyZWQnKTtcbiAgICAgICAgICAgIHNlbGYuJGNhcHRpb25Db250YWluZXIuZm9jdXMoKTtcbiAgICAgICAgICAgIHNlbGYuX3NldEZpbGVEcm9wWm9uZVRpdGxlKCk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi4kZWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGlmICghc2VsZi5fcmFpc2UoJ2ZpbGVyZXNldCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5fcmVzZXRQcmV2aWV3KCk7XG4gICAgICAgICAgICBzZWxmLiRjb250YWluZXIuZmluZCgnLmZpbGVpbnB1dC1maWxlbmFtZScpLnRleHQoJycpO1xuICAgICAgICAgICAgJGguYWRkQ3NzKHNlbGYuJGNvbnRhaW5lciwgJ2ZpbGUtaW5wdXQtbmV3Jyk7XG4gICAgICAgICAgICBpZiAoc2VsZi5nZXRGcmFtZXMoKS5sZW5ndGggfHwgc2VsZi5pc0FqYXhVcGxvYWQgJiYgc2VsZi5kcm9wWm9uZUVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ2ZpbGUtaW5wdXQtbmV3Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmNsZWFyU3RhY2soKTtcbiAgICAgICAgICAgIHNlbGYuZm9ybWRhdGEgPSB7fTtcbiAgICAgICAgICAgIHNlbGYuX3NldEZpbGVEcm9wWm9uZVRpdGxlKCk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi4kZWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgZGlzYWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgc2VsZi5pc0Rpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIHNlbGYuJGVsZW1lbnQuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIHNlbGYuJGNvbnRhaW5lci5maW5kKFwiLmt2LWZpbGVpbnB1dC1jYXB0aW9uXCIpLmFkZENsYXNzKFwiZmlsZS1jYXB0aW9uLWRpc2FibGVkXCIpO1xuICAgICAgICAgICAgc2VsZi4kY29udGFpbmVyLmZpbmQoXCIuZmlsZWlucHV0LXJlbW92ZSwgLmZpbGVpbnB1dC11cGxvYWQsIC5maWxlLXByZXZpZXctZnJhbWUgYnV0dG9uXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICRoLmFkZENzcyhzZWxmLiRjb250YWluZXIuZmluZCgnLmJ0bi1maWxlJyksICdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgc2VsZi5faW5pdERyYWdEcm9wKCk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi4kZWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgZW5hYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBzZWxmLmlzRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGYuX3JhaXNlKCdmaWxlZW5hYmxlZCcpO1xuICAgICAgICAgICAgc2VsZi4kZWxlbWVudC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgc2VsZi4kY29udGFpbmVyLmZpbmQoXCIua3YtZmlsZWlucHV0LWNhcHRpb25cIikucmVtb3ZlQ2xhc3MoXCJmaWxlLWNhcHRpb24tZGlzYWJsZWRcIik7XG4gICAgICAgICAgICBzZWxmLiRjb250YWluZXIuZmluZChcIi5maWxlaW5wdXQtcmVtb3ZlLCAuZmlsZWlucHV0LXVwbG9hZCwgLmZpbGUtcHJldmlldy1mcmFtZSBidXR0b25cIilcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgc2VsZi4kY29udGFpbmVyLmZpbmQoJy5idG4tZmlsZScpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgc2VsZi5faW5pdERyYWdEcm9wKCk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi4kZWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgdXBsb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIHRvdExlbiA9IHNlbGYuZ2V0RmlsZVN0YWNrKCkubGVuZ3RoLCBpLCBvdXREYXRhLCBsZW4sXG4gICAgICAgICAgICAgICAgaGFzRXh0cmFEYXRhID0gISQuaXNFbXB0eU9iamVjdChzZWxmLl9nZXRFeHRyYURhdGEoKSk7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXNBamF4VXBsb2FkIHx8IHNlbGYuaXNEaXNhYmxlZCB8fCAhc2VsZi5faXNGaWxlU2VsZWN0aW9uVmFsaWQodG90TGVuKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX3Jlc2V0VXBsb2FkKCk7XG4gICAgICAgICAgICBpZiAodG90TGVuID09PSAwICYmICFoYXNFeHRyYURhdGEpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9zaG93VXBsb2FkRXJyb3Ioc2VsZi5tc2dVcGxvYWRFbXB0eSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi4kcHJvZ3Jlc3Muc2hvdygpO1xuICAgICAgICAgICAgc2VsZi51cGxvYWRDb3VudCA9IDA7XG4gICAgICAgICAgICBzZWxmLnVwbG9hZFN0YXR1cyA9IHt9O1xuICAgICAgICAgICAgc2VsZi51cGxvYWRMb2cgPSBbXTtcbiAgICAgICAgICAgIHNlbGYubG9jaygpO1xuICAgICAgICAgICAgc2VsZi5fc2V0UHJvZ3Jlc3MoMik7XG4gICAgICAgICAgICBpZiAodG90TGVuID09PSAwICYmIGhhc0V4dHJhRGF0YSkge1xuICAgICAgICAgICAgICAgIHNlbGYuX3VwbG9hZEV4dHJhT25seSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlbiA9IHNlbGYuZmlsZXN0YWNrLmxlbmd0aDtcbiAgICAgICAgICAgIHNlbGYuaGFzSW5pdERhdGEgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzZWxmLnVwbG9hZEFzeW5jKSB7XG4gICAgICAgICAgICAgICAgb3V0RGF0YSA9IHNlbGYuX2dldE91dERhdGEoKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9yYWlzZSgnZmlsZWJhdGNocHJldXBsb2FkJywgW291dERhdGFdKTtcbiAgICAgICAgICAgICAgICBzZWxmLmZpbGVCYXRjaENvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHNlbGYudXBsb2FkQ2FjaGUgPSB7Y29udGVudDogW10sIGNvbmZpZzogW10sIHRhZ3M6IFtdLCBhcHBlbmQ6IHRydWV9O1xuICAgICAgICAgICAgICAgIHNlbGYudXBsb2FkQXN5bmNDb3VudCA9IHNlbGYuZ2V0RmlsZVN0YWNrKCkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwbG9hZENhY2hlLmNvbnRlbnRbaV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwbG9hZENhY2hlLmNvbmZpZ1tpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBsb2FkQ2FjaGUudGFnc1tpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuJHByZXZpZXcuZmluZCgnLmZpbGUtcHJldmlldy1pbml0aWFsJykucmVtb3ZlQ2xhc3MoJGguU09SVF9DU1MpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2luaXRTb3J0YWJsZSgpO1xuICAgICAgICAgICAgICAgIHNlbGYuY2FjaGVJbml0aWFsUHJldmlldyA9IHNlbGYuZ2V0UHJldmlldygpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmZpbGVzdGFja1tpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fdXBsb2FkU2luZ2xlKGksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX3VwbG9hZEJhdGNoKCk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi4kZWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCAkZm9ybSA9IHNlbGYuJGZvcm0sICRjb250ID0gc2VsZi4kY29udGFpbmVyLCAkZWwgPSBzZWxmLiRlbGVtZW50LCBucyA9IHNlbGYubmFtZXNwYWNlO1xuICAgICAgICAgICAgJChkb2N1bWVudCkub2ZmKG5zKTtcbiAgICAgICAgICAgICQod2luZG93KS5vZmYobnMpO1xuICAgICAgICAgICAgaWYgKCRmb3JtICYmICRmb3JtLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRmb3JtLm9mZihucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5pc0FqYXhVcGxvYWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9jbGVhckZpbGVJbnB1dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5fY2xlYW51cCgpO1xuICAgICAgICAgICAgc2VsZi5faW5pdFByZXZpZXdDYWNoZSgpO1xuICAgICAgICAgICAgJGVsLmluc2VydEJlZm9yZSgkY29udCkub2ZmKG5zKS5yZW1vdmVEYXRhKCk7XG4gICAgICAgICAgICAkY29udC5vZmYoKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHJldHVybiAkZWw7XG4gICAgICAgIH0sXG4gICAgICAgIHJlZnJlc2g6IGZ1bmN0aW9uIChvcHRpb25zLCB0cmlnZ2VyQ2hhbmdlKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsICRlbCA9IHNlbGYuJGVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnIHx8ICRoLmlzRW1wdHkob3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gc2VsZi5vcHRpb25zO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHNlbGYub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl9pbml0KG9wdGlvbnMsIHRydWUpO1xuICAgICAgICAgICAgc2VsZi5fbGlzdGVuKCk7XG4gICAgICAgICAgICBpZiAodHJpZ2dlckNoYW5nZSkge1xuICAgICAgICAgICAgICAgICRlbC50cmlnZ2VyKCdjaGFuZ2UnICsgc2VsZi5uYW1lc3BhY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICRlbDtcbiAgICAgICAgfSxcbiAgICAgICAgem9vbTogZnVuY3Rpb24gKGZyYW1lSWQpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgJGZyYW1lID0gc2VsZi5fZ2V0RnJhbWUoZnJhbWVJZCksICRtb2RhbCA9IHNlbGYuJG1vZGFsO1xuICAgICAgICAgICAgaWYgKCEkZnJhbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkaC5pbml0TW9kYWwoJG1vZGFsKTtcbiAgICAgICAgICAgICRtb2RhbC5odG1sKHNlbGYuX2dldE1vZGFsQ29udGVudCgpKTtcbiAgICAgICAgICAgIHNlbGYuX3NldFpvb21Db250ZW50KCRmcmFtZSk7XG4gICAgICAgICAgICAkbW9kYWwubW9kYWwoJ3Nob3cnKTtcbiAgICAgICAgICAgIHNlbGYuX2luaXRab29tQnV0dG9ucygpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRFeGlmOiBmdW5jdGlvbiAoZnJhbWVJZCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCAkZnJhbWUgPSBzZWxmLl9nZXRGcmFtZShmcmFtZUlkKTtcbiAgICAgICAgICAgIHJldHVybiAkZnJhbWUgJiYgJGZyYW1lLmRhdGEoJ2V4aWYnKSB8fCBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBnZXRGcmFtZXM6IGZ1bmN0aW9uIChjc3NGaWx0ZXIpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGNzc0ZpbHRlciA9IGNzc0ZpbHRlciB8fCAnJztcbiAgICAgICAgICAgIHJldHVybiBzZWxmLiRwcmV2aWV3LmZpbmQoJGguRlJBTUVTICsgY3NzRmlsdGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UHJldmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiBzZWxmLmluaXRpYWxQcmV2aWV3LFxuICAgICAgICAgICAgICAgIGNvbmZpZzogc2VsZi5pbml0aWFsUHJldmlld0NvbmZpZyxcbiAgICAgICAgICAgICAgICB0YWdzOiBzZWxmLmluaXRpYWxQcmV2aWV3VGh1bWJUYWdzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgICQuZm4uZmlsZWlucHV0ID0gZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICBpZiAoISRoLmhhc0ZpbGVBUElTdXBwb3J0KCkgJiYgISRoLmlzSUUoOSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJncyA9IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyksIHJldHZhbHMgPSBbXTtcbiAgICAgICAgYXJncy5zaGlmdCgpO1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSAkKHRoaXMpLCBkYXRhID0gc2VsZi5kYXRhKCdmaWxlaW5wdXQnKSwgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT09ICdvYmplY3QnICYmIG9wdGlvbixcbiAgICAgICAgICAgICAgICB0aGVtZSA9IG9wdGlvbnMudGhlbWUgfHwgc2VsZi5kYXRhKCd0aGVtZScpLCBsID0ge30sIHQgPSB7fSxcbiAgICAgICAgICAgICAgICBsYW5nID0gb3B0aW9ucy5sYW5ndWFnZSB8fCBzZWxmLmRhdGEoJ2xhbmd1YWdlJykgfHwgJC5mbi5maWxlaW5wdXQuZGVmYXVsdHMubGFuZ3VhZ2UgfHwgJ2VuJywgb3B0O1xuICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoZW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHQgPSAkLmZuLmZpbGVpbnB1dFRoZW1lc1t0aGVtZV0gfHwge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsYW5nICE9PSAnZW4nICYmICEkaC5pc0VtcHR5KCQuZm4uZmlsZWlucHV0TG9jYWxlc1tsYW5nXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbCA9ICQuZm4uZmlsZWlucHV0TG9jYWxlc1tsYW5nXSB8fCB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0ID0gJC5leHRlbmQodHJ1ZSwge30sICQuZm4uZmlsZWlucHV0LmRlZmF1bHRzLCB0LCAkLmZuLmZpbGVpbnB1dExvY2FsZXMuZW4sIGwsIG9wdGlvbnMsIHNlbGYuZGF0YSgpKTtcbiAgICAgICAgICAgICAgICBkYXRhID0gbmV3IEZpbGVJbnB1dCh0aGlzLCBvcHQpO1xuICAgICAgICAgICAgICAgIHNlbGYuZGF0YSgnZmlsZWlucHV0JywgZGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHZhbHMucHVzaChkYXRhW29wdGlvbl0uYXBwbHkoZGF0YSwgYXJncykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc3dpdGNoIChyZXR2YWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXR2YWxzWzBdO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0dmFscztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkLmZuLmZpbGVpbnB1dC5kZWZhdWx0cyA9IHtcbiAgICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgICAgIHNob3dDYXB0aW9uOiB0cnVlLFxuICAgICAgICBzaG93QnJvd3NlOiB0cnVlLFxuICAgICAgICBzaG93UHJldmlldzogdHJ1ZSxcbiAgICAgICAgc2hvd1JlbW92ZTogdHJ1ZSxcbiAgICAgICAgc2hvd1VwbG9hZDogdHJ1ZSxcbiAgICAgICAgc2hvd0NhbmNlbDogdHJ1ZSxcbiAgICAgICAgc2hvd0Nsb3NlOiB0cnVlLFxuICAgICAgICBzaG93VXBsb2FkZWRUaHVtYnM6IHRydWUsXG4gICAgICAgIGJyb3dzZU9uWm9uZUNsaWNrOiBmYWxzZSxcbiAgICAgICAgYXV0b1JlcGxhY2U6IGZhbHNlLFxuICAgICAgICBhdXRvT3JpZW50SW1hZ2U6IHRydWUsIC8vIGZvciBKUEVHIGltYWdlcyBiYXNlZCBvbiBFWElGIG9yaWVudGF0aW9uIHRhZ1xuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHJ0bDogZmFsc2UsXG4gICAgICAgIGhpZGVUaHVtYm5haWxDb250ZW50OiBmYWxzZSxcbiAgICAgICAgZ2VuZXJhdGVGaWxlSWQ6IG51bGwsXG4gICAgICAgIHByZXZpZXdDbGFzczogJycsXG4gICAgICAgIGNhcHRpb25DbGFzczogJycsXG4gICAgICAgIGZyYW1lQ2xhc3M6ICdrcmFqZWUtZGVmYXVsdCcsXG4gICAgICAgIG1haW5DbGFzczogJ2ZpbGUtY2FwdGlvbi1tYWluJyxcbiAgICAgICAgbWFpblRlbXBsYXRlOiBudWxsLFxuICAgICAgICBwdXJpZnlIdG1sOiB0cnVlLFxuICAgICAgICBmaWxlU2l6ZUdldHRlcjogbnVsbCxcbiAgICAgICAgaW5pdGlhbENhcHRpb246ICcnLFxuICAgICAgICBpbml0aWFsUHJldmlldzogW10sXG4gICAgICAgIGluaXRpYWxQcmV2aWV3RGVsaW1pdGVyOiAnKiQkKicsXG4gICAgICAgIGluaXRpYWxQcmV2aWV3QXNEYXRhOiBmYWxzZSxcbiAgICAgICAgaW5pdGlhbFByZXZpZXdGaWxlVHlwZTogJ2ltYWdlJyxcbiAgICAgICAgaW5pdGlhbFByZXZpZXdDb25maWc6IFtdLFxuICAgICAgICBpbml0aWFsUHJldmlld1RodW1iVGFnczogW10sXG4gICAgICAgIHByZXZpZXdUaHVtYlRhZ3M6IHt9LFxuICAgICAgICBpbml0aWFsUHJldmlld1Nob3dEZWxldGU6IHRydWUsXG4gICAgICAgIGluaXRpYWxQcmV2aWV3RG93bmxvYWRVcmw6ICcnLFxuICAgICAgICByZW1vdmVGcm9tUHJldmlld09uRXJyb3I6IGZhbHNlLFxuICAgICAgICBkZWxldGVVcmw6ICcnLFxuICAgICAgICBkZWxldGVFeHRyYURhdGE6IHt9LFxuICAgICAgICBvdmVyd3JpdGVJbml0aWFsOiB0cnVlLFxuICAgICAgICBwcmV2aWV3Wm9vbUJ1dHRvbkljb25zOiB7XG4gICAgICAgICAgICBwcmV2OiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRyaWFuZ2xlLWxlZnRcIj48L2k+JyxcbiAgICAgICAgICAgIG5leHQ6ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdHJpYW5nbGUtcmlnaHRcIj48L2k+JyxcbiAgICAgICAgICAgIHRvZ2dsZWhlYWRlcjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZXNpemUtdmVydGljYWxcIj48L2k+JyxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tZnVsbHNjcmVlblwiPjwvaT4nLFxuICAgICAgICAgICAgYm9yZGVybGVzczogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZXNpemUtZnVsbFwiPjwvaT4nLFxuICAgICAgICAgICAgY2xvc2U6ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlXCI+PC9pPidcbiAgICAgICAgfSxcbiAgICAgICAgcHJldmlld1pvb21CdXR0b25DbGFzc2VzOiB7XG4gICAgICAgICAgICBwcmV2OiAnYnRuIGJ0bi1uYXZpZ2F0ZScsXG4gICAgICAgICAgICBuZXh0OiAnYnRuIGJ0bi1uYXZpZ2F0ZScsXG4gICAgICAgICAgICB0b2dnbGVoZWFkZXI6ICdidG4gYnRuLWt2IGJ0bi1kZWZhdWx0IGJ0bi1vdXRsaW5lLXNlY29uZGFyeScsXG4gICAgICAgICAgICBmdWxsc2NyZWVuOiAnYnRuIGJ0bi1rdiBidG4tZGVmYXVsdCBidG4tb3V0bGluZS1zZWNvbmRhcnknLFxuICAgICAgICAgICAgYm9yZGVybGVzczogJ2J0biBidG4ta3YgYnRuLWRlZmF1bHQgYnRuLW91dGxpbmUtc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgIGNsb3NlOiAnYnRuIGJ0bi1rdiBidG4tZGVmYXVsdCBidG4tb3V0bGluZS1zZWNvbmRhcnknXG4gICAgICAgIH0sXG4gICAgICAgIHByZWZlckljb25pY1ByZXZpZXc6IGZhbHNlLFxuICAgICAgICBwcmVmZXJJY29uaWNab29tUHJldmlldzogZmFsc2UsXG4gICAgICAgIGFsbG93ZWRQcmV2aWV3VHlwZXM6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dlZFByZXZpZXdNaW1lVHlwZXM6IG51bGwsXG4gICAgICAgIGFsbG93ZWRGaWxlVHlwZXM6IG51bGwsXG4gICAgICAgIGFsbG93ZWRGaWxlRXh0ZW5zaW9uczogbnVsbCxcbiAgICAgICAgZGVmYXVsdFByZXZpZXdDb250ZW50OiBudWxsLFxuICAgICAgICBjdXN0b21MYXlvdXRUYWdzOiB7fSxcbiAgICAgICAgY3VzdG9tUHJldmlld1RhZ3M6IHt9LFxuICAgICAgICBwcmV2aWV3RmlsZUljb246ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tZmlsZVwiPjwvaT4nLFxuICAgICAgICBwcmV2aWV3RmlsZUljb25DbGFzczogJ2ZpbGUtb3RoZXItaWNvbicsXG4gICAgICAgIHByZXZpZXdGaWxlSWNvblNldHRpbmdzOiB7fSxcbiAgICAgICAgcHJldmlld0ZpbGVFeHRTZXR0aW5nczoge30sXG4gICAgICAgIGJ1dHRvbkxhYmVsQ2xhc3M6ICdoaWRkZW4teHMnLFxuICAgICAgICBicm93c2VJY29uOiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZvbGRlci1vcGVuXCI+PC9pPiZuYnNwOycsXG4gICAgICAgIGJyb3dzZUNsYXNzOiAnYnRuIGJ0bi1wcmltYXJ5JyxcbiAgICAgICAgcmVtb3ZlSWNvbjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10cmFzaFwiPjwvaT4nLFxuICAgICAgICByZW1vdmVDbGFzczogJ2J0biBidG4tZGVmYXVsdCBidG4tc2Vjb25kYXJ5JyxcbiAgICAgICAgY2FuY2VsSWNvbjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1iYW4tY2lyY2xlXCI+PC9pPicsXG4gICAgICAgIGNhbmNlbENsYXNzOiAnYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zZWNvbmRhcnknLFxuICAgICAgICB1cGxvYWRJY29uOiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXVwbG9hZFwiPjwvaT4nLFxuICAgICAgICB1cGxvYWRDbGFzczogJ2J0biBidG4tZGVmYXVsdCBidG4tc2Vjb25kYXJ5JyxcbiAgICAgICAgdXBsb2FkVXJsOiBudWxsLFxuICAgICAgICB1cGxvYWRVcmxUaHVtYjogbnVsbCxcbiAgICAgICAgdXBsb2FkQXN5bmM6IHRydWUsXG4gICAgICAgIHVwbG9hZEV4dHJhRGF0YToge30sXG4gICAgICAgIHpvb21Nb2RhbEhlaWdodDogNDgwLFxuICAgICAgICBtaW5JbWFnZVdpZHRoOiBudWxsLFxuICAgICAgICBtaW5JbWFnZUhlaWdodDogbnVsbCxcbiAgICAgICAgbWF4SW1hZ2VXaWR0aDogbnVsbCxcbiAgICAgICAgbWF4SW1hZ2VIZWlnaHQ6IG51bGwsXG4gICAgICAgIHJlc2l6ZUltYWdlOiBmYWxzZSxcbiAgICAgICAgcmVzaXplUHJlZmVyZW5jZTogJ3dpZHRoJyxcbiAgICAgICAgcmVzaXplUXVhbGl0eTogMC45MixcbiAgICAgICAgcmVzaXplRGVmYXVsdEltYWdlVHlwZTogJ2ltYWdlL2pwZWcnLFxuICAgICAgICByZXNpemVJZlNpemVNb3JlVGhhbjogMCwgLy8gaW4gS0JcbiAgICAgICAgbWluRmlsZVNpemU6IDAsXG4gICAgICAgIG1heEZpbGVTaXplOiAwLFxuICAgICAgICBtYXhGaWxlUHJldmlld1NpemU6IDI1NjAwLCAvLyAyNSBNQlxuICAgICAgICBtaW5GaWxlQ291bnQ6IDAsXG4gICAgICAgIG1heEZpbGVDb3VudDogMCxcbiAgICAgICAgdmFsaWRhdGVJbml0aWFsQ291bnQ6IGZhbHNlLFxuICAgICAgICBtc2dWYWxpZGF0aW9uRXJyb3JDbGFzczogJ3RleHQtZGFuZ2VyJyxcbiAgICAgICAgbXNnVmFsaWRhdGlvbkVycm9ySWNvbjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1leGNsYW1hdGlvbi1zaWduXCI+PC9pPiAnLFxuICAgICAgICBtc2dFcnJvckNsYXNzOiAnZmlsZS1lcnJvci1tZXNzYWdlJyxcbiAgICAgICAgcHJvZ3Jlc3NUaHVtYkNsYXNzOiBcInByb2dyZXNzLWJhciBiZy1zdWNjZXNzIHByb2dyZXNzLWJhci1zdWNjZXNzIHByb2dyZXNzLWJhci1zdHJpcGVkIGFjdGl2ZVwiLFxuICAgICAgICBwcm9ncmVzc0NsYXNzOiBcInByb2dyZXNzLWJhciBiZy1zdWNjZXNzIHByb2dyZXNzLWJhci1zdWNjZXNzIHByb2dyZXNzLWJhci1zdHJpcGVkIGFjdGl2ZVwiLFxuICAgICAgICBwcm9ncmVzc0NvbXBsZXRlQ2xhc3M6IFwicHJvZ3Jlc3MtYmFyIGJnLXN1Y2Nlc3MgcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3NcIixcbiAgICAgICAgcHJvZ3Jlc3NFcnJvckNsYXNzOiBcInByb2dyZXNzLWJhciBiZy1kYW5nZXIgcHJvZ3Jlc3MtYmFyLWRhbmdlclwiLFxuICAgICAgICBwcm9ncmVzc1VwbG9hZFRocmVzaG9sZDogOTksXG4gICAgICAgIHByZXZpZXdGaWxlVHlwZTogJ2ltYWdlJyxcbiAgICAgICAgZWxDYXB0aW9uQ29udGFpbmVyOiBudWxsLFxuICAgICAgICBlbENhcHRpb25UZXh0OiBudWxsLFxuICAgICAgICBlbFByZXZpZXdDb250YWluZXI6IG51bGwsXG4gICAgICAgIGVsUHJldmlld0ltYWdlOiBudWxsLFxuICAgICAgICBlbFByZXZpZXdTdGF0dXM6IG51bGwsXG4gICAgICAgIGVsRXJyb3JDb250YWluZXI6IG51bGwsXG4gICAgICAgIGVycm9yQ2xvc2VCdXR0b246ICRoLmNsb3NlQnV0dG9uKCdrdi1lcnJvci1jbG9zZScpLFxuICAgICAgICBzbHVnQ2FsbGJhY2s6IG51bGwsXG4gICAgICAgIGRyb3Bab25lRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZHJvcFpvbmVUaXRsZUNsYXNzOiAnZmlsZS1kcm9wLXpvbmUtdGl0bGUnLFxuICAgICAgICBmaWxlQWN0aW9uU2V0dGluZ3M6IHt9LFxuICAgICAgICBvdGhlckFjdGlvbkJ1dHRvbnM6ICcnLFxuICAgICAgICB0ZXh0RW5jb2Rpbmc6ICdVVEYtOCcsXG4gICAgICAgIGFqYXhTZXR0aW5nczoge30sXG4gICAgICAgIGFqYXhEZWxldGVTZXR0aW5nczoge30sXG4gICAgICAgIHNob3dBamF4RXJyb3JEZXRhaWxzOiB0cnVlLFxuICAgICAgICBtZXJnZUFqYXhDYWxsYmFja3M6IGZhbHNlLFxuICAgICAgICBtZXJnZUFqYXhEZWxldGVDYWxsYmFja3M6IGZhbHNlLFxuICAgICAgICByZXRyeUVycm9yVXBsb2FkczogdHJ1ZVxuICAgIH07XG5cbiAgICAkLmZuLmZpbGVpbnB1dExvY2FsZXMuZW4gPSB7XG4gICAgICAgIGZpbGVTaW5nbGU6ICdmaWxlJyxcbiAgICAgICAgZmlsZVBsdXJhbDogJ2ZpbGVzJyxcbiAgICAgICAgYnJvd3NlTGFiZWw6ICdCcm93c2UgJmhlbGxpcDsnLFxuICAgICAgICByZW1vdmVMYWJlbDogJ1JlbW92ZScsXG4gICAgICAgIHJlbW92ZVRpdGxlOiAnQ2xlYXIgc2VsZWN0ZWQgZmlsZXMnLFxuICAgICAgICBjYW5jZWxMYWJlbDogJ0NhbmNlbCcsXG4gICAgICAgIGNhbmNlbFRpdGxlOiAnQWJvcnQgb25nb2luZyB1cGxvYWQnLFxuICAgICAgICB1cGxvYWRMYWJlbDogJ1VwbG9hZCcsXG4gICAgICAgIHVwbG9hZFRpdGxlOiAnVXBsb2FkIHNlbGVjdGVkIGZpbGVzJyxcbiAgICAgICAgbXNnTm86ICdObycsXG4gICAgICAgIG1zZ05vRmlsZXNTZWxlY3RlZDogJ05vIGZpbGVzIHNlbGVjdGVkJyxcbiAgICAgICAgbXNnQ2FuY2VsbGVkOiAnQ2FuY2VsbGVkJyxcbiAgICAgICAgbXNnUGxhY2Vob2xkZXI6ICdTZWxlY3Qge2ZpbGVzfS4uLicsXG4gICAgICAgIG1zZ1pvb21Nb2RhbEhlYWRpbmc6ICdEZXRhaWxlZCBQcmV2aWV3JyxcbiAgICAgICAgbXNnRmlsZVJlcXVpcmVkOiAnWW91IG11c3Qgc2VsZWN0IGEgZmlsZSB0byB1cGxvYWQuJyxcbiAgICAgICAgbXNnU2l6ZVRvb1NtYWxsOiAnRmlsZSBcIntuYW1lfVwiICg8Yj57c2l6ZX0gS0I8L2I+KSBpcyB0b28gc21hbGwgYW5kIG11c3QgYmUgbGFyZ2VyIHRoYW4gPGI+e21pblNpemV9IEtCPC9iPi4nLFxuICAgICAgICBtc2dTaXplVG9vTGFyZ2U6ICdGaWxlIFwie25hbWV9XCIgKDxiPntzaXplfSBLQjwvYj4pIGV4Y2VlZHMgbWF4aW11bSBhbGxvd2VkIHVwbG9hZCBzaXplIG9mIDxiPnttYXhTaXplfSBLQjwvYj4uJyxcbiAgICAgICAgbXNnRmlsZXNUb29MZXNzOiAnWW91IG11c3Qgc2VsZWN0IGF0IGxlYXN0IDxiPntufTwvYj4ge2ZpbGVzfSB0byB1cGxvYWQuJyxcbiAgICAgICAgbXNnRmlsZXNUb29NYW55OiAnTnVtYmVyIG9mIGZpbGVzIHNlbGVjdGVkIGZvciB1cGxvYWQgPGI+KHtufSk8L2I+IGV4Y2VlZHMgbWF4aW11bSBhbGxvd2VkIGxpbWl0IG9mIDxiPnttfTwvYj4uJyxcbiAgICAgICAgbXNnRmlsZU5vdEZvdW5kOiAnRmlsZSBcIntuYW1lfVwiIG5vdCBmb3VuZCEnLFxuICAgICAgICBtc2dGaWxlU2VjdXJlZDogJ1NlY3VyaXR5IHJlc3RyaWN0aW9ucyBwcmV2ZW50IHJlYWRpbmcgdGhlIGZpbGUgXCJ7bmFtZX1cIi4nLFxuICAgICAgICBtc2dGaWxlTm90UmVhZGFibGU6ICdGaWxlIFwie25hbWV9XCIgaXMgbm90IHJlYWRhYmxlLicsXG4gICAgICAgIG1zZ0ZpbGVQcmV2aWV3QWJvcnRlZDogJ0ZpbGUgcHJldmlldyBhYm9ydGVkIGZvciBcIntuYW1lfVwiLicsXG4gICAgICAgIG1zZ0ZpbGVQcmV2aWV3RXJyb3I6ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSByZWFkaW5nIHRoZSBmaWxlIFwie25hbWV9XCIuJyxcbiAgICAgICAgbXNnSW52YWxpZEZpbGVOYW1lOiAnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBjaGFyYWN0ZXJzIGluIGZpbGUgbmFtZSBcIntuYW1lfVwiLicsXG4gICAgICAgIG1zZ0ludmFsaWRGaWxlVHlwZTogJ0ludmFsaWQgdHlwZSBmb3IgZmlsZSBcIntuYW1lfVwiLiBPbmx5IFwie3R5cGVzfVwiIGZpbGVzIGFyZSBzdXBwb3J0ZWQuJyxcbiAgICAgICAgbXNnSW52YWxpZEZpbGVFeHRlbnNpb246ICdJbnZhbGlkIGV4dGVuc2lvbiBmb3IgZmlsZSBcIntuYW1lfVwiLiBPbmx5IFwie2V4dGVuc2lvbnN9XCIgZmlsZXMgYXJlIHN1cHBvcnRlZC4nLFxuICAgICAgICBtc2dGaWxlVHlwZXM6IHtcbiAgICAgICAgICAgICdpbWFnZSc6ICdpbWFnZScsXG4gICAgICAgICAgICAnaHRtbCc6ICdIVE1MJyxcbiAgICAgICAgICAgICd0ZXh0JzogJ3RleHQnLFxuICAgICAgICAgICAgJ3ZpZGVvJzogJ3ZpZGVvJyxcbiAgICAgICAgICAgICdhdWRpbyc6ICdhdWRpbycsXG4gICAgICAgICAgICAnZmxhc2gnOiAnZmxhc2gnLFxuICAgICAgICAgICAgJ3BkZic6ICdQREYnLFxuICAgICAgICAgICAgJ29iamVjdCc6ICdvYmplY3QnXG4gICAgICAgIH0sXG4gICAgICAgIG1zZ1VwbG9hZEFib3J0ZWQ6ICdUaGUgZmlsZSB1cGxvYWQgd2FzIGFib3J0ZWQnLFxuICAgICAgICBtc2dVcGxvYWRUaHJlc2hvbGQ6ICdQcm9jZXNzaW5nLi4uJyxcbiAgICAgICAgbXNnVXBsb2FkQmVnaW46ICdJbml0aWFsaXppbmcuLi4nLFxuICAgICAgICBtc2dVcGxvYWRFbmQ6ICdEb25lJyxcbiAgICAgICAgbXNnVXBsb2FkRW1wdHk6ICdObyB2YWxpZCBkYXRhIGF2YWlsYWJsZSBmb3IgdXBsb2FkLicsXG4gICAgICAgIG1zZ1VwbG9hZEVycm9yOiAnRXJyb3InLFxuICAgICAgICBtc2dWYWxpZGF0aW9uRXJyb3I6ICdWYWxpZGF0aW9uIEVycm9yJyxcbiAgICAgICAgbXNnTG9hZGluZzogJ0xvYWRpbmcgZmlsZSB7aW5kZXh9IG9mIHtmaWxlc30gJmhlbGxpcDsnLFxuICAgICAgICBtc2dQcm9ncmVzczogJ0xvYWRpbmcgZmlsZSB7aW5kZXh9IG9mIHtmaWxlc30gLSB7bmFtZX0gLSB7cGVyY2VudH0lIGNvbXBsZXRlZC4nLFxuICAgICAgICBtc2dTZWxlY3RlZDogJ3tufSB7ZmlsZXN9IHNlbGVjdGVkJyxcbiAgICAgICAgbXNnRm9sZGVyc05vdEFsbG93ZWQ6ICdEcmFnICYgZHJvcCBmaWxlcyBvbmx5ISB7bn0gZm9sZGVyKHMpIGRyb3BwZWQgd2VyZSBza2lwcGVkLicsXG4gICAgICAgIG1zZ0ltYWdlV2lkdGhTbWFsbDogJ1dpZHRoIG9mIGltYWdlIGZpbGUgXCJ7bmFtZX1cIiBtdXN0IGJlIGF0IGxlYXN0IHtzaXplfSBweC4nLFxuICAgICAgICBtc2dJbWFnZUhlaWdodFNtYWxsOiAnSGVpZ2h0IG9mIGltYWdlIGZpbGUgXCJ7bmFtZX1cIiBtdXN0IGJlIGF0IGxlYXN0IHtzaXplfSBweC4nLFxuICAgICAgICBtc2dJbWFnZVdpZHRoTGFyZ2U6ICdXaWR0aCBvZiBpbWFnZSBmaWxlIFwie25hbWV9XCIgY2Fubm90IGV4Y2VlZCB7c2l6ZX0gcHguJyxcbiAgICAgICAgbXNnSW1hZ2VIZWlnaHRMYXJnZTogJ0hlaWdodCBvZiBpbWFnZSBmaWxlIFwie25hbWV9XCIgY2Fubm90IGV4Y2VlZCB7c2l6ZX0gcHguJyxcbiAgICAgICAgbXNnSW1hZ2VSZXNpemVFcnJvcjogJ0NvdWxkIG5vdCBnZXQgdGhlIGltYWdlIGRpbWVuc2lvbnMgdG8gcmVzaXplLicsXG4gICAgICAgIG1zZ0ltYWdlUmVzaXplRXhjZXB0aW9uOiAnRXJyb3Igd2hpbGUgcmVzaXppbmcgdGhlIGltYWdlLjxwcmU+e2Vycm9yc308L3ByZT4nLFxuICAgICAgICBtc2dBamF4RXJyb3I6ICdTb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIHRoZSB7b3BlcmF0aW9ufSBvcGVyYXRpb24uIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIhJyxcbiAgICAgICAgbXNnQWpheFByb2dyZXNzRXJyb3I6ICd7b3BlcmF0aW9ufSBmYWlsZWQnLFxuICAgICAgICBhamF4T3BlcmF0aW9uczoge1xuICAgICAgICAgICAgZGVsZXRlVGh1bWI6ICdmaWxlIGRlbGV0ZScsXG4gICAgICAgICAgICB1cGxvYWRUaHVtYjogJ2ZpbGUgdXBsb2FkJyxcbiAgICAgICAgICAgIHVwbG9hZEJhdGNoOiAnYmF0Y2ggZmlsZSB1cGxvYWQnLFxuICAgICAgICAgICAgdXBsb2FkRXh0cmE6ICdmb3JtIGRhdGEgdXBsb2FkJ1xuICAgICAgICB9LFxuICAgICAgICBkcm9wWm9uZVRpdGxlOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZSAmaGVsbGlwOycsXG4gICAgICAgIGRyb3Bab25lQ2xpY2tUaXRsZTogJzxicj4ob3IgY2xpY2sgdG8gc2VsZWN0IHtmaWxlc30pJyxcbiAgICAgICAgcHJldmlld1pvb21CdXR0b25UaXRsZXM6IHtcbiAgICAgICAgICAgIHByZXY6ICdWaWV3IHByZXZpb3VzIGZpbGUnLFxuICAgICAgICAgICAgbmV4dDogJ1ZpZXcgbmV4dCBmaWxlJyxcbiAgICAgICAgICAgIHRvZ2dsZWhlYWRlcjogJ1RvZ2dsZSBoZWFkZXInLFxuICAgICAgICAgICAgZnVsbHNjcmVlbjogJ1RvZ2dsZSBmdWxsIHNjcmVlbicsXG4gICAgICAgICAgICBib3JkZXJsZXNzOiAnVG9nZ2xlIGJvcmRlcmxlc3MgbW9kZScsXG4gICAgICAgICAgICBjbG9zZTogJ0Nsb3NlIGRldGFpbGVkIHByZXZpZXcnXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5mbi5maWxlaW5wdXQuQ29uc3RydWN0b3IgPSBGaWxlSW5wdXQ7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGF1dG9tYXRpY2FsbHkgZmlsZSBpbnB1dHMgd2l0aCBjbGFzcyAnZmlsZScgaW50byBhIGJvb3RzdHJhcCBmaWxlaW5wdXQgY29udHJvbC5cbiAgICAgKi9cbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkaW5wdXQgPSAkKCdpbnB1dC5maWxlW3R5cGU9ZmlsZV0nKTtcbiAgICAgICAgaWYgKCRpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICRpbnB1dC5maWxlaW5wdXQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSkpO1xuLyohXG4gKiBib290c3RyYXAtZmlsZWlucHV0IHY0LjQuNlxuICogaHR0cDovL3BsdWdpbnMua3JhamVlLmNvbS9maWxlLWlucHV0XG4gKlxuICogR2x5cGhpY29uIChkZWZhdWx0KSB0aGVtZSBjb25maWd1cmF0aW9uIGZvciBib290c3RyYXAtZmlsZWlucHV0LlxuICpcbiAqIEF1dGhvcjogS2FydGlrIFZpc3dlc3dhcmFuXG4gKiBDb3B5cmlnaHQ6IDIwMTQgLSAyMDE3LCBLYXJ0aWsgVmlzd2Vzd2FyYW4sIEtyYWplZS5jb21cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtQ2xhdXNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20va2FydGlrLXYvYm9vdHN0cmFwLWZpbGVpbnB1dC9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4gKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgJC5mbi5maWxlaW5wdXRUaGVtZXMuZ2x5ID0ge1xuICAgICAgICBmaWxlQWN0aW9uU2V0dGluZ3M6IHtcbiAgICAgICAgICAgIHJlbW92ZUljb246ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdHJhc2hcIj48L2k+JyxcbiAgICAgICAgICAgIHVwbG9hZEljb246ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdXBsb2FkXCI+PC9pPicsXG4gICAgICAgICAgICB6b29tSWNvbjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi16b29tLWluXCI+PC9pPicsXG4gICAgICAgICAgICBkcmFnSWNvbjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1tb3ZlXCI+PC9pPicsXG4gICAgICAgICAgICBpbmRpY2F0b3JOZXc6ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcGx1cy1zaWduIHRleHQtd2FybmluZ1wiPjwvaT4nLFxuICAgICAgICAgICAgaW5kaWNhdG9yU3VjY2VzczogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1vay1zaWduIHRleHQtc3VjY2Vzc1wiPjwvaT4nLFxuICAgICAgICAgICAgaW5kaWNhdG9yRXJyb3I6ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tZXhjbGFtYXRpb24tc2lnbiB0ZXh0LWRhbmdlclwiPjwvaT4nLFxuICAgICAgICAgICAgaW5kaWNhdG9yTG9hZGluZzogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1ob3VyZ2xhc3MgdGV4dC1tdXRlZFwiPjwvaT4nXG4gICAgICAgIH0sXG4gICAgICAgIGxheW91dFRlbXBsYXRlczoge1xuICAgICAgICAgICAgZmlsZUljb246ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tZmlsZSBrdi1jYXB0aW9uLWljb25cIj48L2k+J1xuICAgICAgICB9LFxuICAgICAgICBwcmV2aWV3Wm9vbUJ1dHRvbkljb25zOiB7XG4gICAgICAgICAgICBwcmV2OiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRyaWFuZ2xlLWxlZnRcIj48L2k+JyxcbiAgICAgICAgICAgIG5leHQ6ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdHJpYW5nbGUtcmlnaHRcIj48L2k+JyxcbiAgICAgICAgICAgIHRvZ2dsZWhlYWRlcjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZXNpemUtdmVydGljYWxcIj48L2k+JyxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tZnVsbHNjcmVlblwiPjwvaT4nLFxuICAgICAgICAgICAgYm9yZGVybGVzczogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZXNpemUtZnVsbFwiPjwvaT4nLFxuICAgICAgICAgICAgY2xvc2U6ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlXCI+PC9pPidcbiAgICAgICAgfSxcbiAgICAgICAgcHJldmlld0ZpbGVJY29uOiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZpbGVcIj48L2k+JyxcbiAgICAgICAgYnJvd3NlSWNvbjogJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1mb2xkZXItb3BlblwiPjwvaT4mbmJzcDsnLFxuICAgICAgICByZW1vdmVJY29uOiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRyYXNoXCI+PC9pPicsXG4gICAgICAgIGNhbmNlbEljb246ICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tYmFuLWNpcmNsZVwiPjwvaT4nLFxuICAgICAgICB1cGxvYWRJY29uOiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXVwbG9hZFwiPjwvaT4nLFxuICAgICAgICBtc2dWYWxpZGF0aW9uRXJyb3JJY29uOiAnPGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWV4Y2xhbWF0aW9uLXNpZ25cIj48L2k+ICdcbiAgICB9O1xufSkod2luZG93LmpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIuanNcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIENvcHlyaWdodCAyMDEyIFN0ZWZhbiBQZXRyZVxyXG4gKlxyXG4gKiBJbXByb3ZlbWVudHMgYnkgQW5kcmV3IFJvd2xzXHJcbiAqIEltcHJvdmVtZW50cyBieSBTw6liYXN0aWVuIE1hbG90XHJcbiAqIEltcHJvdmVtZW50cyBieSBZdW4gTGFpXHJcbiAqIEltcHJvdmVtZW50cyBieSBLZW5uZXRoIEhlbmRlcmlja1xyXG4gKiBJbXByb3ZlbWVudHMgYnkgQ3VHQmFieUJlYVJcclxuICogSW1wcm92ZW1lbnRzIGJ5IENocmlzdGlhbiBWYWFzIDxhdXNwZXhAYXVzcGV4LmV1PlxyXG4gKlxyXG4gKiBQcm9qZWN0IFVSTCA6IGh0dHA6Ly93d3cubWFsb3QuZnIvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuKGZ1bmN0aW9uKGZhY3Rvcnkpe1xyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcclxuICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xyXG4gICAgZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxyXG4gICAgICBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcclxuICAgIGVsc2VcclxuICAgICAgZmFjdG9yeShqUXVlcnkpO1xyXG5cclxufShmdW5jdGlvbigkLCB1bmRlZmluZWQpe1xyXG5cclxuICAvLyBBZGQgRUNNQTI2Mi01IEFycmF5IG1ldGhvZHMgaWYgbm90IHN1cHBvcnRlZCBuYXRpdmVseSAoSUU4KVxyXG4gIGlmICghKCdpbmRleE9mJyBpbiBBcnJheS5wcm90b3R5cGUpKSB7XHJcbiAgICBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIChmaW5kLCBpKSB7XHJcbiAgICAgIGlmIChpID09PSB1bmRlZmluZWQpIGkgPSAwO1xyXG4gICAgICBpZiAoaSA8IDApIGkgKz0gdGhpcy5sZW5ndGg7XHJcbiAgICAgIGlmIChpIDwgMCkgaSA9IDA7XHJcbiAgICAgIGZvciAodmFyIG4gPSB0aGlzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgIGlmIChpIGluIHRoaXMgJiYgdGhpc1tpXSA9PT0gZmluZCkge1xyXG4gICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEFkZCB0aW1lem9uZSBhYmJyZXZpYXRpb24gc3VwcG9ydCBmb3IgaWU2KywgQ2hyb21lLCBGaXJlZm94XHJcbiAgZnVuY3Rpb24gdGltZVpvbmVBYmJyZXZpYXRpb24oKSB7XHJcbiAgICB2YXIgYWJicmV2aWF0aW9uLCBkYXRlLCBmb3JtYXR0ZWRTdHIsIGksIGxlbiwgbWF0Y2hlZFN0cmluZ3MsIHJlZiwgc3RyO1xyXG4gICAgZGF0ZSA9IChuZXcgRGF0ZSgpKS50b1N0cmluZygpO1xyXG4gICAgZm9ybWF0dGVkU3RyID0gKChyZWYgPSBkYXRlLnNwbGl0KCcoJylbMV0pICE9IG51bGwgPyByZWYuc2xpY2UoMCwgLTEpIDogMCkgfHwgZGF0ZS5zcGxpdCgnICcpO1xyXG4gICAgaWYgKGZvcm1hdHRlZFN0ciBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgIG1hdGNoZWRTdHJpbmdzID0gW107XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBmb3JtYXR0ZWRTdHIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBzdHIgPSBmb3JtYXR0ZWRTdHJbaV07XHJcbiAgICAgICAgaWYgKChhYmJyZXZpYXRpb24gPSAocmVmID0gc3RyLm1hdGNoKC9cXGJbQS1aXStcXGIvKSkgIT09IG51bGwpID8gcmVmWzBdIDogMCkge1xyXG4gICAgICAgICAgbWF0Y2hlZFN0cmluZ3MucHVzaChhYmJyZXZpYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBmb3JtYXR0ZWRTdHIgPSBtYXRjaGVkU3RyaW5ncy5wb3AoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmb3JtYXR0ZWRTdHI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBVVENEYXRlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KERhdGUsIGFyZ3VtZW50cykpO1xyXG4gIH1cclxuXHJcbiAgLy8gUGlja2VyIG9iamVjdFxyXG4gIHZhciBEYXRldGltZXBpY2tlciA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB2YXIgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gJChlbGVtZW50KTtcclxuXHJcbiAgICAvLyBhZGQgY29udGFpbmVyIGZvciBzaW5nbGUgcGFnZSBhcHBsaWNhdGlvblxyXG4gICAgLy8gd2hlbiBwYWdlIHN3aXRjaCB0aGUgZGF0ZXRpbWVwaWNrZXIgZGl2IHdpbGwgYmUgcmVtb3ZlZCBhbHNvLlxyXG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCAnYm9keSc7XHJcblxyXG4gICAgdGhpcy5sYW5ndWFnZSA9IG9wdGlvbnMubGFuZ3VhZ2UgfHwgdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUtbGFuZ3VhZ2UnKSB8fCAnZW4nO1xyXG4gICAgdGhpcy5sYW5ndWFnZSA9IHRoaXMubGFuZ3VhZ2UgaW4gZGF0ZXMgPyB0aGlzLmxhbmd1YWdlIDogdGhpcy5sYW5ndWFnZS5zcGxpdCgnLScpWzBdOyAvLyBmci1DQSBmYWxsYmFjayB0byBmclxyXG4gICAgdGhpcy5sYW5ndWFnZSA9IHRoaXMubGFuZ3VhZ2UgaW4gZGF0ZXMgPyB0aGlzLmxhbmd1YWdlIDogJ2VuJztcclxuICAgIHRoaXMuaXNSVEwgPSBkYXRlc1t0aGlzLmxhbmd1YWdlXS5ydGwgfHwgZmFsc2U7XHJcbiAgICB0aGlzLmZvcm1hdFR5cGUgPSBvcHRpb25zLmZvcm1hdFR5cGUgfHwgdGhpcy5lbGVtZW50LmRhdGEoJ2Zvcm1hdC10eXBlJykgfHwgJ3N0YW5kYXJkJztcclxuICAgIHRoaXMuZm9ybWF0ID0gRFBHbG9iYWwucGFyc2VGb3JtYXQob3B0aW9ucy5mb3JtYXQgfHwgdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUtZm9ybWF0JykgfHwgZGF0ZXNbdGhpcy5sYW5ndWFnZV0uZm9ybWF0IHx8IERQR2xvYmFsLmdldERlZmF1bHRGb3JtYXQodGhpcy5mb3JtYXRUeXBlLCAnaW5wdXQnKSwgdGhpcy5mb3JtYXRUeXBlKTtcclxuICAgIHRoaXMuaXNJbmxpbmUgPSBmYWxzZTtcclxuICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XHJcbiAgICB0aGlzLmlzSW5wdXQgPSB0aGlzLmVsZW1lbnQuaXMoJ2lucHV0Jyk7XHJcbiAgICB0aGlzLmZvbnRBd2Vzb21lID0gb3B0aW9ucy5mb250QXdlc29tZSB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnZm9udC1hd2Vzb21lJykgfHwgZmFsc2U7XHJcblxyXG4gICAgdGhpcy5ib290Y3NzVmVyID0gb3B0aW9ucy5ib290Y3NzVmVyIHx8ICh0aGlzLmlzSW5wdXQgPyAodGhpcy5lbGVtZW50LmlzKCcuZm9ybS1jb250cm9sJykgPyAzIDogMikgOiAoIHRoaXMuYm9vdGNzc1ZlciA9IHRoaXMuZWxlbWVudC5pcygnLmlucHV0LWdyb3VwJykgPyAzIDogMiApKTtcclxuXHJcbiAgICB0aGlzLmNvbXBvbmVudCA9IHRoaXMuZWxlbWVudC5pcygnLmRhdGUnKSA/ICggdGhpcy5ib290Y3NzVmVyID09PSAzID8gdGhpcy5lbGVtZW50LmZpbmQoJy5pbnB1dC1ncm91cC1hZGRvbiAuZ2x5cGhpY29uLXRoLCAuaW5wdXQtZ3JvdXAtYWRkb24gLmdseXBoaWNvbi10aW1lLCAuaW5wdXQtZ3JvdXAtYWRkb24gLmdseXBoaWNvbi1yZW1vdmUsIC5pbnB1dC1ncm91cC1hZGRvbiAuZ2x5cGhpY29uLWNhbGVuZGFyLCAuaW5wdXQtZ3JvdXAtYWRkb24gLmZhLWNhbGVuZGFyLCAuaW5wdXQtZ3JvdXAtYWRkb24gLmZhLWNsb2NrLW8nKS5wYXJlbnQoKSA6IHRoaXMuZWxlbWVudC5maW5kKCcuYWRkLW9uIC5pY29uLXRoLCAuYWRkLW9uIC5pY29uLXRpbWUsIC5hZGQtb24gLmljb24tY2FsZW5kYXIsIC5hZGQtb24gLmZhLWNhbGVuZGFyLCAuYWRkLW9uIC5mYS1jbG9jay1vJykucGFyZW50KCkpIDogZmFsc2U7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlc2V0ID0gdGhpcy5lbGVtZW50LmlzKCcuZGF0ZScpID8gKCB0aGlzLmJvb3Rjc3NWZXIgPT09IDMgPyB0aGlzLmVsZW1lbnQuZmluZCgnLmlucHV0LWdyb3VwLWFkZG9uIC5nbHlwaGljb24tcmVtb3ZlLCAuaW5wdXQtZ3JvdXAtYWRkb24gLmZhLXRpbWVzJykucGFyZW50KCk6dGhpcy5lbGVtZW50LmZpbmQoJy5hZGQtb24gLmljb24tcmVtb3ZlLCAuYWRkLW9uIC5mYS10aW1lcycpLnBhcmVudCgpKSA6IGZhbHNlO1xyXG4gICAgdGhpcy5oYXNJbnB1dCA9IHRoaXMuY29tcG9uZW50ICYmIHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpLmxlbmd0aDtcclxuICAgIGlmICh0aGlzLmNvbXBvbmVudCAmJiB0aGlzLmNvbXBvbmVudC5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhpcy5jb21wb25lbnQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHRoaXMubGlua0ZpZWxkID0gb3B0aW9ucy5saW5rRmllbGQgfHwgdGhpcy5lbGVtZW50LmRhdGEoJ2xpbmstZmllbGQnKSB8fCBmYWxzZTtcclxuICAgIHRoaXMubGlua0Zvcm1hdCA9IERQR2xvYmFsLnBhcnNlRm9ybWF0KG9wdGlvbnMubGlua0Zvcm1hdCB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnbGluay1mb3JtYXQnKSB8fCBEUEdsb2JhbC5nZXREZWZhdWx0Rm9ybWF0KHRoaXMuZm9ybWF0VHlwZSwgJ2xpbmsnKSwgdGhpcy5mb3JtYXRUeXBlKTtcclxuICAgIHRoaXMubWludXRlU3RlcCA9IG9wdGlvbnMubWludXRlU3RlcCB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnbWludXRlLXN0ZXAnKSB8fCA1O1xyXG4gICAgdGhpcy5waWNrZXJQb3NpdGlvbiA9IG9wdGlvbnMucGlja2VyUG9zaXRpb24gfHwgdGhpcy5lbGVtZW50LmRhdGEoJ3BpY2tlci1wb3NpdGlvbicpIHx8ICdib3R0b20tcmlnaHQnO1xyXG4gICAgdGhpcy5zaG93TWVyaWRpYW4gPSBvcHRpb25zLnNob3dNZXJpZGlhbiB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnc2hvdy1tZXJpZGlhbicpIHx8IGZhbHNlO1xyXG4gICAgdGhpcy5pbml0aWFsRGF0ZSA9IG9wdGlvbnMuaW5pdGlhbERhdGUgfHwgbmV3IERhdGUoKTtcclxuICAgIHRoaXMuekluZGV4ID0gb3B0aW9ucy56SW5kZXggfHwgdGhpcy5lbGVtZW50LmRhdGEoJ3otaW5kZXgnKSB8fCB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLnRpdGxlID0gdHlwZW9mIG9wdGlvbnMudGl0bGUgPT09ICd1bmRlZmluZWQnID8gZmFsc2UgOiBvcHRpb25zLnRpdGxlO1xyXG4gICAgdGhpcy50aW1lem9uZSA9IG9wdGlvbnMudGltZXpvbmUgfHwgdGltZVpvbmVBYmJyZXZpYXRpb24oKTtcclxuXHJcbiAgICB0aGlzLmljb25zID0ge1xyXG4gICAgICBsZWZ0QXJyb3c6IHRoaXMuZm9udEF3ZXNvbWUgPyAnZmEtYXJyb3ctbGVmdCcgOiAodGhpcy5ib290Y3NzVmVyID09PSAzID8gJ2dseXBoaWNvbi1hcnJvdy1sZWZ0JyA6ICdpY29uLWFycm93LWxlZnQnKSxcclxuICAgICAgcmlnaHRBcnJvdzogdGhpcy5mb250QXdlc29tZSA/ICdmYS1hcnJvdy1yaWdodCcgOiAodGhpcy5ib290Y3NzVmVyID09PSAzID8gJ2dseXBoaWNvbi1hcnJvdy1yaWdodCcgOiAnaWNvbi1hcnJvdy1yaWdodCcpXHJcbiAgICB9XHJcbiAgICB0aGlzLmljb250eXBlID0gdGhpcy5mb250QXdlc29tZSA/ICdmYScgOiAnZ2x5cGhpY29uJztcclxuXHJcbiAgICB0aGlzLl9hdHRhY2hFdmVudHMoKTtcclxuXHJcbiAgICB0aGlzLmNsaWNrZWRPdXRzaWRlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAvLyBDbGlja2VkIG91dHNpZGUgdGhlIGRhdGV0aW1lcGlja2VyLCBoaWRlIGl0XHJcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmNsb3Nlc3QoJy5kYXRldGltZXBpY2tlcicpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGF0LmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5mb3JtYXRWaWV3VHlwZSA9ICdkYXRldGltZSc7XHJcbiAgICBpZiAoJ2Zvcm1hdFZpZXdUeXBlJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgIHRoaXMuZm9ybWF0Vmlld1R5cGUgPSBvcHRpb25zLmZvcm1hdFZpZXdUeXBlO1xyXG4gICAgfSBlbHNlIGlmICgnZm9ybWF0Vmlld1R5cGUnIGluIHRoaXMuZWxlbWVudC5kYXRhKCkpIHtcclxuICAgICAgdGhpcy5mb3JtYXRWaWV3VHlwZSA9IHRoaXMuZWxlbWVudC5kYXRhKCdmb3JtYXRWaWV3VHlwZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubWluVmlldyA9IDA7XHJcbiAgICBpZiAoJ21pblZpZXcnIGluIG9wdGlvbnMpIHtcclxuICAgICAgdGhpcy5taW5WaWV3ID0gb3B0aW9ucy5taW5WaWV3O1xyXG4gICAgfSBlbHNlIGlmICgnbWluVmlldycgaW4gdGhpcy5lbGVtZW50LmRhdGEoKSkge1xyXG4gICAgICB0aGlzLm1pblZpZXcgPSB0aGlzLmVsZW1lbnQuZGF0YSgnbWluLXZpZXcnKTtcclxuICAgIH1cclxuICAgIHRoaXMubWluVmlldyA9IERQR2xvYmFsLmNvbnZlcnRWaWV3TW9kZSh0aGlzLm1pblZpZXcpO1xyXG5cclxuICAgIHRoaXMubWF4VmlldyA9IERQR2xvYmFsLm1vZGVzLmxlbmd0aCAtIDE7XHJcbiAgICBpZiAoJ21heFZpZXcnIGluIG9wdGlvbnMpIHtcclxuICAgICAgdGhpcy5tYXhWaWV3ID0gb3B0aW9ucy5tYXhWaWV3O1xyXG4gICAgfSBlbHNlIGlmICgnbWF4VmlldycgaW4gdGhpcy5lbGVtZW50LmRhdGEoKSkge1xyXG4gICAgICB0aGlzLm1heFZpZXcgPSB0aGlzLmVsZW1lbnQuZGF0YSgnbWF4LXZpZXcnKTtcclxuICAgIH1cclxuICAgIHRoaXMubWF4VmlldyA9IERQR2xvYmFsLmNvbnZlcnRWaWV3TW9kZSh0aGlzLm1heFZpZXcpO1xyXG5cclxuICAgIHRoaXMud2hlZWxWaWV3TW9kZU5hdmlnYXRpb24gPSBmYWxzZTtcclxuICAgIGlmICgnd2hlZWxWaWV3TW9kZU5hdmlnYXRpb24nIGluIG9wdGlvbnMpIHtcclxuICAgICAgdGhpcy53aGVlbFZpZXdNb2RlTmF2aWdhdGlvbiA9IG9wdGlvbnMud2hlZWxWaWV3TW9kZU5hdmlnYXRpb247XHJcbiAgICB9IGVsc2UgaWYgKCd3aGVlbFZpZXdNb2RlTmF2aWdhdGlvbicgaW4gdGhpcy5lbGVtZW50LmRhdGEoKSkge1xyXG4gICAgICB0aGlzLndoZWVsVmlld01vZGVOYXZpZ2F0aW9uID0gdGhpcy5lbGVtZW50LmRhdGEoJ3ZpZXctbW9kZS13aGVlbC1uYXZpZ2F0aW9uJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy53aGVlbFZpZXdNb2RlTmF2aWdhdGlvbkludmVyc2VEaXJlY3Rpb24gPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoJ3doZWVsVmlld01vZGVOYXZpZ2F0aW9uSW52ZXJzZURpcmVjdGlvbicgaW4gb3B0aW9ucykge1xyXG4gICAgICB0aGlzLndoZWVsVmlld01vZGVOYXZpZ2F0aW9uSW52ZXJzZURpcmVjdGlvbiA9IG9wdGlvbnMud2hlZWxWaWV3TW9kZU5hdmlnYXRpb25JbnZlcnNlRGlyZWN0aW9uO1xyXG4gICAgfSBlbHNlIGlmICgnd2hlZWxWaWV3TW9kZU5hdmlnYXRpb25JbnZlcnNlRGlyZWN0aW9uJyBpbiB0aGlzLmVsZW1lbnQuZGF0YSgpKSB7XHJcbiAgICAgIHRoaXMud2hlZWxWaWV3TW9kZU5hdmlnYXRpb25JbnZlcnNlRGlyZWN0aW9uID0gdGhpcy5lbGVtZW50LmRhdGEoJ3ZpZXctbW9kZS13aGVlbC1uYXZpZ2F0aW9uLWludmVyc2UtZGlyJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy53aGVlbFZpZXdNb2RlTmF2aWdhdGlvbkRlbGF5ID0gMTAwO1xyXG4gICAgaWYgKCd3aGVlbFZpZXdNb2RlTmF2aWdhdGlvbkRlbGF5JyBpbiBvcHRpb25zKSB7XHJcbiAgICAgIHRoaXMud2hlZWxWaWV3TW9kZU5hdmlnYXRpb25EZWxheSA9IG9wdGlvbnMud2hlZWxWaWV3TW9kZU5hdmlnYXRpb25EZWxheTtcclxuICAgIH0gZWxzZSBpZiAoJ3doZWVsVmlld01vZGVOYXZpZ2F0aW9uRGVsYXknIGluIHRoaXMuZWxlbWVudC5kYXRhKCkpIHtcclxuICAgICAgdGhpcy53aGVlbFZpZXdNb2RlTmF2aWdhdGlvbkRlbGF5ID0gdGhpcy5lbGVtZW50LmRhdGEoJ3ZpZXctbW9kZS13aGVlbC1uYXZpZ2F0aW9uLWRlbGF5Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zdGFydFZpZXdNb2RlID0gMjtcclxuICAgIGlmICgnc3RhcnRWaWV3JyBpbiBvcHRpb25zKSB7XHJcbiAgICAgIHRoaXMuc3RhcnRWaWV3TW9kZSA9IG9wdGlvbnMuc3RhcnRWaWV3O1xyXG4gICAgfSBlbHNlIGlmICgnc3RhcnRWaWV3JyBpbiB0aGlzLmVsZW1lbnQuZGF0YSgpKSB7XHJcbiAgICAgIHRoaXMuc3RhcnRWaWV3TW9kZSA9IHRoaXMuZWxlbWVudC5kYXRhKCdzdGFydC12aWV3Jyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnN0YXJ0Vmlld01vZGUgPSBEUEdsb2JhbC5jb252ZXJ0Vmlld01vZGUodGhpcy5zdGFydFZpZXdNb2RlKTtcclxuICAgIHRoaXMudmlld01vZGUgPSB0aGlzLnN0YXJ0Vmlld01vZGU7XHJcblxyXG4gICAgdGhpcy52aWV3U2VsZWN0ID0gdGhpcy5taW5WaWV3O1xyXG4gICAgaWYgKCd2aWV3U2VsZWN0JyBpbiBvcHRpb25zKSB7XHJcbiAgICAgIHRoaXMudmlld1NlbGVjdCA9IG9wdGlvbnMudmlld1NlbGVjdDtcclxuICAgIH0gZWxzZSBpZiAoJ3ZpZXdTZWxlY3QnIGluIHRoaXMuZWxlbWVudC5kYXRhKCkpIHtcclxuICAgICAgdGhpcy52aWV3U2VsZWN0ID0gdGhpcy5lbGVtZW50LmRhdGEoJ3ZpZXctc2VsZWN0Jyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnZpZXdTZWxlY3QgPSBEUEdsb2JhbC5jb252ZXJ0Vmlld01vZGUodGhpcy52aWV3U2VsZWN0KTtcclxuXHJcbiAgICB0aGlzLmZvcmNlUGFyc2UgPSB0cnVlO1xyXG4gICAgaWYgKCdmb3JjZVBhcnNlJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgIHRoaXMuZm9yY2VQYXJzZSA9IG9wdGlvbnMuZm9yY2VQYXJzZTtcclxuICAgIH0gZWxzZSBpZiAoJ2RhdGVGb3JjZVBhcnNlJyBpbiB0aGlzLmVsZW1lbnQuZGF0YSgpKSB7XHJcbiAgICAgIHRoaXMuZm9yY2VQYXJzZSA9IHRoaXMuZWxlbWVudC5kYXRhKCdkYXRlLWZvcmNlLXBhcnNlJyk7XHJcbiAgICB9XHJcbiAgICB2YXIgdGVtcGxhdGUgPSB0aGlzLmJvb3Rjc3NWZXIgPT09IDMgPyBEUEdsb2JhbC50ZW1wbGF0ZVYzIDogRFBHbG9iYWwudGVtcGxhdGU7XHJcbiAgICB3aGlsZSAodGVtcGxhdGUuaW5kZXhPZigne2ljb25UeXBlfScpICE9PSAtMSkge1xyXG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoJ3tpY29uVHlwZX0nLCB0aGlzLmljb250eXBlKTtcclxuICAgIH1cclxuICAgIHdoaWxlICh0ZW1wbGF0ZS5pbmRleE9mKCd7bGVmdEFycm93fScpICE9PSAtMSkge1xyXG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoJ3tsZWZ0QXJyb3d9JywgdGhpcy5pY29ucy5sZWZ0QXJyb3cpO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKHRlbXBsYXRlLmluZGV4T2YoJ3tyaWdodEFycm93fScpICE9PSAtMSkge1xyXG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoJ3tyaWdodEFycm93fScsIHRoaXMuaWNvbnMucmlnaHRBcnJvdyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnBpY2tlciA9ICQodGVtcGxhdGUpXHJcbiAgICAgIC5hcHBlbmRUbyh0aGlzLmlzSW5saW5lID8gdGhpcy5lbGVtZW50IDogdGhpcy5jb250YWluZXIpIC8vICdib2R5JylcclxuICAgICAgLm9uKHtcclxuICAgICAgICBjbGljazogICAgICQucHJveHkodGhpcy5jbGljaywgdGhpcyksXHJcbiAgICAgICAgbW91c2Vkb3duOiAkLnByb3h5KHRoaXMubW91c2Vkb3duLCB0aGlzKVxyXG4gICAgICB9KTtcclxuXHJcbiAgICBpZiAodGhpcy53aGVlbFZpZXdNb2RlTmF2aWdhdGlvbikge1xyXG4gICAgICBpZiAoJC5mbi5tb3VzZXdoZWVsKSB7XHJcbiAgICAgICAgdGhpcy5waWNrZXIub24oe21vdXNld2hlZWw6ICQucHJveHkodGhpcy5tb3VzZXdoZWVsLCB0aGlzKX0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdNb3VzZSBXaGVlbCBldmVudCBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgaW5jbHVkZSB0aGUgalF1ZXJ5IE1vdXNlIFdoZWVsIHBsdWdpbiBiZWZvcmUgZW5hYmxpbmcgdGhpcyBvcHRpb24nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmlzSW5saW5lKSB7XHJcbiAgICAgIHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRldGltZXBpY2tlci1pbmxpbmUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRldGltZXBpY2tlci1kcm9wZG93bi0nICsgdGhpcy5waWNrZXJQb3NpdGlvbiArICcgZHJvcGRvd24tbWVudScpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuaXNSVEwpIHtcclxuICAgICAgdGhpcy5waWNrZXIuYWRkQ2xhc3MoJ2RhdGV0aW1lcGlja2VyLXJ0bCcpO1xyXG4gICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLmJvb3Rjc3NWZXIgPT09IDMgPyAnLnByZXYgc3BhbiwgLm5leHQgc3BhbicgOiAnLnByZXYgaSwgLm5leHQgaSc7XHJcbiAgICAgIHRoaXMucGlja2VyLmZpbmQoc2VsZWN0b3IpLnRvZ2dsZUNsYXNzKHRoaXMuaWNvbnMubGVmdEFycm93ICsgJyAnICsgdGhpcy5pY29ucy5yaWdodEFycm93KTtcclxuICAgIH1cclxuXHJcbiAgICAkKGRvY3VtZW50KS5vbignbW91c2Vkb3duIHRvdWNoZW5kJywgdGhpcy5jbGlja2VkT3V0c2lkZSk7XHJcblxyXG4gICAgdGhpcy5hdXRvY2xvc2UgPSBmYWxzZTtcclxuICAgIGlmICgnYXV0b2Nsb3NlJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgIHRoaXMuYXV0b2Nsb3NlID0gb3B0aW9ucy5hdXRvY2xvc2U7XHJcbiAgICB9IGVsc2UgaWYgKCdkYXRlQXV0b2Nsb3NlJyBpbiB0aGlzLmVsZW1lbnQuZGF0YSgpKSB7XHJcbiAgICAgIHRoaXMuYXV0b2Nsb3NlID0gdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUtYXV0b2Nsb3NlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5rZXlib2FyZE5hdmlnYXRpb24gPSB0cnVlO1xyXG4gICAgaWYgKCdrZXlib2FyZE5hdmlnYXRpb24nIGluIG9wdGlvbnMpIHtcclxuICAgICAgdGhpcy5rZXlib2FyZE5hdmlnYXRpb24gPSBvcHRpb25zLmtleWJvYXJkTmF2aWdhdGlvbjtcclxuICAgIH0gZWxzZSBpZiAoJ2RhdGVLZXlib2FyZE5hdmlnYXRpb24nIGluIHRoaXMuZWxlbWVudC5kYXRhKCkpIHtcclxuICAgICAgdGhpcy5rZXlib2FyZE5hdmlnYXRpb24gPSB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS1rZXlib2FyZC1uYXZpZ2F0aW9uJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50b2RheUJ0biA9IChvcHRpb25zLnRvZGF5QnRuIHx8IHRoaXMuZWxlbWVudC5kYXRhKCdkYXRlLXRvZGF5LWJ0bicpIHx8IGZhbHNlKTtcclxuICAgIHRoaXMuY2xlYXJCdG4gPSAob3B0aW9ucy5jbGVhckJ0biB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS1jbGVhci1idG4nKSB8fCBmYWxzZSk7XHJcbiAgICB0aGlzLnRvZGF5SGlnaGxpZ2h0ID0gKG9wdGlvbnMudG9kYXlIaWdobGlnaHQgfHwgdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUtdG9kYXktaGlnaGxpZ2h0JykgfHwgZmFsc2UpO1xyXG5cclxuICAgIHRoaXMud2Vla1N0YXJ0ID0gMDtcclxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53ZWVrU3RhcnQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRoaXMud2Vla1N0YXJ0ID0gb3B0aW9ucy53ZWVrU3RhcnQ7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS13ZWVrc3RhcnQnKSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhpcy53ZWVrU3RhcnQgPSB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS13ZWVrc3RhcnQnKTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGVzW3RoaXMubGFuZ3VhZ2VdLndlZWtTdGFydCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhpcy53ZWVrU3RhcnQgPSBkYXRlc1t0aGlzLmxhbmd1YWdlXS53ZWVrU3RhcnQ7XHJcbiAgICB9XHJcbiAgICB0aGlzLndlZWtTdGFydCA9IHRoaXMud2Vla1N0YXJ0ICUgNztcclxuICAgIHRoaXMud2Vla0VuZCA9ICgodGhpcy53ZWVrU3RhcnQgKyA2KSAlIDcpO1xyXG4gICAgdGhpcy5vblJlbmRlckRheSA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgIHZhciByZW5kZXIgPSAob3B0aW9ucy5vblJlbmRlckRheSB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfSkoZGF0ZSk7XHJcbiAgICAgIGlmICh0eXBlb2YgcmVuZGVyID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJlbmRlciA9IFtyZW5kZXJdO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciByZXMgPSBbJ2RheSddO1xyXG4gICAgICByZXR1cm4gcmVzLmNvbmNhdCgocmVuZGVyID8gcmVuZGVyIDogW10pKTtcclxuICAgIH07XHJcbiAgICB0aGlzLm9uUmVuZGVySG91ciA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgIHZhciByZW5kZXIgPSAob3B0aW9ucy5vblJlbmRlckhvdXIgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH0pKGRhdGUpO1xyXG4gICAgICB2YXIgcmVzID0gWydob3VyJ107XHJcbiAgICAgIGlmICh0eXBlb2YgcmVuZGVyID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJlbmRlciA9IFtyZW5kZXJdO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZXMuY29uY2F0KChyZW5kZXIgPyByZW5kZXIgOiBbXSkpO1xyXG4gICAgfTtcclxuICAgIHRoaXMub25SZW5kZXJNaW51dGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICB2YXIgcmVuZGVyID0gKG9wdGlvbnMub25SZW5kZXJNaW51dGUgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH0pKGRhdGUpO1xyXG4gICAgICB2YXIgcmVzID0gWydtaW51dGUnXTtcclxuICAgICAgaWYgKHR5cGVvZiByZW5kZXIgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmVuZGVyID0gW3JlbmRlcl07XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGRhdGUgPCB0aGlzLnN0YXJ0RGF0ZSB8fCBkYXRlID4gdGhpcy5lbmREYXRlKSB7XHJcbiAgICAgICAgcmVzLnB1c2goJ2Rpc2FibGVkJyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoTWF0aC5mbG9vcih0aGlzLmRhdGUuZ2V0VVRDTWludXRlcygpIC8gdGhpcy5taW51dGVTdGVwKSA9PT0gTWF0aC5mbG9vcihkYXRlLmdldFVUQ01pbnV0ZXMoKSAvIHRoaXMubWludXRlU3RlcCkpIHtcclxuICAgICAgICByZXMucHVzaCgnYWN0aXZlJyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlcy5jb25jYXQoKHJlbmRlciA/IHJlbmRlciA6IFtdKSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5vblJlbmRlclllYXIgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICB2YXIgcmVuZGVyID0gKG9wdGlvbnMub25SZW5kZXJZZWFyIHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9KShkYXRlKTtcclxuICAgICAgdmFyIHJlcyA9IFsneWVhciddO1xyXG4gICAgICBpZiAodHlwZW9mIHJlbmRlciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZW5kZXIgPSBbcmVuZGVyXTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5kYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPT09IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkge1xyXG4gICAgICAgIHJlcy5wdXNoKCdhY3RpdmUnKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgY3VycmVudFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XHJcbiAgICAgIHZhciBlbmRZZWFyID0gdGhpcy5lbmREYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XHJcbiAgICAgIGlmIChkYXRlIDwgdGhpcy5zdGFydERhdGUgfHwgY3VycmVudFllYXIgPiBlbmRZZWFyKSB7XHJcbiAgICAgICAgcmVzLnB1c2goJ2Rpc2FibGVkJyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlcy5jb25jYXQoKHJlbmRlciA/IHJlbmRlciA6IFtdKSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLm9uUmVuZGVyTW9udGggPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICB2YXIgcmVuZGVyID0gKG9wdGlvbnMub25SZW5kZXJNb250aCB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfSkoZGF0ZSk7XHJcbiAgICAgIHZhciByZXMgPSBbJ21vbnRoJ107XHJcbiAgICAgIGlmICh0eXBlb2YgcmVuZGVyID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJlbmRlciA9IFtyZW5kZXJdO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZXMuY29uY2F0KChyZW5kZXIgPyByZW5kZXIgOiBbXSkpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zdGFydERhdGUgPSBuZXcgRGF0ZSgtODYzOTk2ODQ0MzA0ODAwMCk7XHJcbiAgICB0aGlzLmVuZERhdGUgPSBuZXcgRGF0ZSg4NjM5OTY4NDQzMDQ4MDAwKTtcclxuICAgIHRoaXMuZGF0ZXNEaXNhYmxlZCA9IFtdO1xyXG4gICAgdGhpcy5kYXlzT2ZXZWVrRGlzYWJsZWQgPSBbXTtcclxuICAgIHRoaXMuc2V0U3RhcnREYXRlKG9wdGlvbnMuc3RhcnREYXRlIHx8IHRoaXMuZWxlbWVudC5kYXRhKCdkYXRlLXN0YXJ0ZGF0ZScpKTtcclxuICAgIHRoaXMuc2V0RW5kRGF0ZShvcHRpb25zLmVuZERhdGUgfHwgdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUtZW5kZGF0ZScpKTtcclxuICAgIHRoaXMuc2V0RGF0ZXNEaXNhYmxlZChvcHRpb25zLmRhdGVzRGlzYWJsZWQgfHwgdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUtZGF0ZXMtZGlzYWJsZWQnKSk7XHJcbiAgICB0aGlzLnNldERheXNPZldlZWtEaXNhYmxlZChvcHRpb25zLmRheXNPZldlZWtEaXNhYmxlZCB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS1kYXlzLW9mLXdlZWstZGlzYWJsZWQnKSk7XHJcbiAgICB0aGlzLnNldE1pbnV0ZXNEaXNhYmxlZChvcHRpb25zLm1pbnV0ZXNEaXNhYmxlZCB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS1taW51dGUtZGlzYWJsZWQnKSk7XHJcbiAgICB0aGlzLnNldEhvdXJzRGlzYWJsZWQob3B0aW9ucy5ob3Vyc0Rpc2FibGVkIHx8IHRoaXMuZWxlbWVudC5kYXRhKCdkYXRlLWhvdXItZGlzYWJsZWQnKSk7XHJcbiAgICB0aGlzLmZpbGxEb3coKTtcclxuICAgIHRoaXMuZmlsbE1vbnRocygpO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICAgIHRoaXMuc2hvd01vZGUoKTtcclxuXHJcbiAgICBpZiAodGhpcy5pc0lubGluZSkge1xyXG4gICAgICB0aGlzLnNob3coKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBEYXRldGltZXBpY2tlci5wcm90b3R5cGUgPSB7XHJcbiAgICBjb25zdHJ1Y3RvcjogRGF0ZXRpbWVwaWNrZXIsXHJcblxyXG4gICAgX2V2ZW50czogICAgICAgW10sXHJcbiAgICBfYXR0YWNoRXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRoaXMuX2RldGFjaEV2ZW50cygpO1xyXG4gICAgICBpZiAodGhpcy5pc0lucHV0KSB7IC8vIHNpbmdsZSBpbnB1dFxyXG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IFtcclxuICAgICAgICAgIFt0aGlzLmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgZm9jdXM6ICAgJC5wcm94eSh0aGlzLnNob3csIHRoaXMpLFxyXG4gICAgICAgICAgICBrZXl1cDogICAkLnByb3h5KHRoaXMudXBkYXRlLCB0aGlzKSxcclxuICAgICAgICAgICAga2V5ZG93bjogJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpXHJcbiAgICAgICAgICB9XVxyXG4gICAgICAgIF07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAodGhpcy5jb21wb25lbnQgJiYgdGhpcy5oYXNJbnB1dCkgeyAvLyBjb21wb25lbnQ6IGlucHV0ICsgYnV0dG9uXHJcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gW1xyXG4gICAgICAgICAgLy8gRm9yIGNvbXBvbmVudHMgdGhhdCBhcmUgbm90IHJlYWRvbmx5LCBhbGxvdyBrZXlib2FyZCBuYXZcclxuICAgICAgICAgIFt0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKSwge1xyXG4gICAgICAgICAgICBmb2N1czogICAkLnByb3h5KHRoaXMuc2hvdywgdGhpcyksXHJcbiAgICAgICAgICAgIGtleXVwOiAgICQucHJveHkodGhpcy51cGRhdGUsIHRoaXMpLFxyXG4gICAgICAgICAgICBrZXlkb3duOiAkLnByb3h5KHRoaXMua2V5ZG93biwgdGhpcylcclxuICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgW3RoaXMuY29tcG9uZW50LCB7XHJcbiAgICAgICAgICAgIGNsaWNrOiAkLnByb3h5KHRoaXMuc2hvdywgdGhpcylcclxuICAgICAgICAgIH1dXHJcbiAgICAgICAgXTtcclxuICAgICAgICBpZiAodGhpcy5jb21wb25lbnRSZXNldCkge1xyXG4gICAgICAgICAgdGhpcy5fZXZlbnRzLnB1c2goW1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlc2V0LFxyXG4gICAgICAgICAgICB7Y2xpY2s6ICQucHJveHkodGhpcy5yZXNldCwgdGhpcyl9XHJcbiAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAodGhpcy5lbGVtZW50LmlzKCdkaXYnKSkgeyAgLy8gaW5saW5lIGRhdGV0aW1lcGlja2VyXHJcbiAgICAgICAgdGhpcy5pc0lubGluZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gW1xyXG4gICAgICAgICAgW3RoaXMuZWxlbWVudCwge1xyXG4gICAgICAgICAgICBjbGljazogJC5wcm94eSh0aGlzLnNob3csIHRoaXMpXHJcbiAgICAgICAgICB9XVxyXG4gICAgICAgIF07XHJcbiAgICAgIH1cclxuICAgICAgZm9yICh2YXIgaSA9IDAsIGVsLCBldjsgaSA8IHRoaXMuX2V2ZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGVsID0gdGhpcy5fZXZlbnRzW2ldWzBdO1xyXG4gICAgICAgIGV2ID0gdGhpcy5fZXZlbnRzW2ldWzFdO1xyXG4gICAgICAgIGVsLm9uKGV2KTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfZGV0YWNoRXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBlbCwgZXY7IGkgPCB0aGlzLl9ldmVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBlbCA9IHRoaXMuX2V2ZW50c1tpXVswXTtcclxuICAgICAgICBldiA9IHRoaXMuX2V2ZW50c1tpXVsxXTtcclxuICAgICAgICBlbC5vZmYoZXYpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX2V2ZW50cyA9IFtdO1xyXG4gICAgfSxcclxuXHJcbiAgICBzaG93OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICB0aGlzLnBpY2tlci5zaG93KCk7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5jb21wb25lbnQgPyB0aGlzLmNvbXBvbmVudC5vdXRlckhlaWdodCgpIDogdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCk7XHJcbiAgICAgIGlmICh0aGlzLmZvcmNlUGFyc2UpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucGxhY2UoKTtcclxuICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCAkLnByb3h5KHRoaXMucGxhY2UsIHRoaXMpKTtcclxuICAgICAgaWYgKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmlzVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgIHRoaXMuZWxlbWVudC50cmlnZ2VyKHtcclxuICAgICAgICB0eXBlOiAnc2hvdycsXHJcbiAgICAgICAgZGF0ZTogdGhpcy5kYXRlXHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICghdGhpcy5pc1Zpc2libGUpIHJldHVybjtcclxuICAgICAgaWYgKHRoaXMuaXNJbmxpbmUpIHJldHVybjtcclxuICAgICAgdGhpcy5waWNrZXIuaGlkZSgpO1xyXG4gICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUnLCB0aGlzLnBsYWNlKTtcclxuICAgICAgdGhpcy52aWV3TW9kZSA9IHRoaXMuc3RhcnRWaWV3TW9kZTtcclxuICAgICAgdGhpcy5zaG93TW9kZSgpO1xyXG4gICAgICBpZiAoIXRoaXMuaXNJbnB1dCkge1xyXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZignbW91c2Vkb3duJywgdGhpcy5oaWRlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMuZm9yY2VQYXJzZSAmJlxyXG4gICAgICAgICAgKFxyXG4gICAgICAgICAgICB0aGlzLmlzSW5wdXQgJiYgdGhpcy5lbGVtZW50LnZhbCgpIHx8XHJcbiAgICAgICAgICAgICAgdGhpcy5oYXNJbnB1dCAmJiB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKS52YWwoKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKVxyXG4gICAgICAgIHRoaXMuc2V0VmFsdWUoKTtcclxuICAgICAgdGhpcy5pc1Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5lbGVtZW50LnRyaWdnZXIoe1xyXG4gICAgICAgIHR5cGU6ICdoaWRlJyxcclxuICAgICAgICBkYXRlOiB0aGlzLmRhdGVcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGlzLl9kZXRhY2hFdmVudHMoKTtcclxuICAgICAgJChkb2N1bWVudCkub2ZmKCdtb3VzZWRvd24nLCB0aGlzLmNsaWNrZWRPdXRzaWRlKTtcclxuICAgICAgdGhpcy5waWNrZXIucmVtb3ZlKCk7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLnBpY2tlcjtcclxuICAgICAgZGVsZXRlIHRoaXMuZWxlbWVudC5kYXRhKCkuZGF0ZXRpbWVwaWNrZXI7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldERhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIGQgPSB0aGlzLmdldFVUQ0RhdGUoKTtcclxuICAgICAgaWYgKGQgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbmV3IERhdGUoZC5nZXRUaW1lKCkgKyAoZC5nZXRUaW1lem9uZU9mZnNldCgpICogNjAwMDApKTtcclxuICAgIH0sXHJcblxyXG4gICAgZ2V0VVRDRGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5kYXRlO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRJbml0aWFsRGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5pbml0aWFsRGF0ZVxyXG4gICAgfSxcclxuXHJcbiAgICBzZXRJbml0aWFsRGF0ZTogZnVuY3Rpb24gKGluaXRpYWxEYXRlKSB7XHJcbiAgICAgIHRoaXMuaW5pdGlhbERhdGUgPSBpbml0aWFsRGF0ZTtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0RGF0ZTogZnVuY3Rpb24gKGQpIHtcclxuICAgICAgdGhpcy5zZXRVVENEYXRlKG5ldyBEYXRlKGQuZ2V0VGltZSgpIC0gKGQuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwMDAwKSkpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRVVENEYXRlOiBmdW5jdGlvbiAoZCkge1xyXG4gICAgICBpZiAoZCA+PSB0aGlzLnN0YXJ0RGF0ZSAmJiBkIDw9IHRoaXMuZW5kRGF0ZSkge1xyXG4gICAgICAgIHRoaXMuZGF0ZSA9IGQ7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSgpO1xyXG4gICAgICAgIHRoaXMudmlld0RhdGUgPSB0aGlzLmRhdGU7XHJcbiAgICAgICAgdGhpcy5maWxsKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnRyaWdnZXIoe1xyXG4gICAgICAgICAgdHlwZTogICAgICAnb3V0T2ZSYW5nZScsXHJcbiAgICAgICAgICBkYXRlOiAgICAgIGQsXHJcbiAgICAgICAgICBzdGFydERhdGU6IHRoaXMuc3RhcnREYXRlLFxyXG4gICAgICAgICAgZW5kRGF0ZTogICB0aGlzLmVuZERhdGVcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBzZXRGb3JtYXQ6IGZ1bmN0aW9uIChmb3JtYXQpIHtcclxuICAgICAgdGhpcy5mb3JtYXQgPSBEUEdsb2JhbC5wYXJzZUZvcm1hdChmb3JtYXQsIHRoaXMuZm9ybWF0VHlwZSk7XHJcbiAgICAgIHZhciBlbGVtZW50O1xyXG4gICAgICBpZiAodGhpcy5pc0lucHV0KSB7XHJcbiAgICAgICAgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnZhbCgpKSB7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBmb3JtYXR0ZWQgPSB0aGlzLmdldEZvcm1hdHRlZERhdGUoKTtcclxuICAgICAgaWYgKCF0aGlzLmlzSW5wdXQpIHtcclxuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpLnZhbChmb3JtYXR0ZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZScsIGZvcm1hdHRlZCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnZhbChmb3JtYXR0ZWQpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLmxpbmtGaWVsZCkge1xyXG4gICAgICAgICQoJyMnICsgdGhpcy5saW5rRmllbGQpLnZhbCh0aGlzLmdldEZvcm1hdHRlZERhdGUodGhpcy5saW5rRm9ybWF0KSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZ2V0Rm9ybWF0dGVkRGF0ZTogZnVuY3Rpb24gKGZvcm1hdCkge1xyXG4gICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgdGhpcy5mb3JtYXQ7XHJcbiAgICAgIHJldHVybiBEUEdsb2JhbC5mb3JtYXREYXRlKHRoaXMuZGF0ZSwgZm9ybWF0LCB0aGlzLmxhbmd1YWdlLCB0aGlzLmZvcm1hdFR5cGUsIHRoaXMudGltZXpvbmUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdGFydERhdGU6IGZ1bmN0aW9uIChzdGFydERhdGUpIHtcclxuICAgICAgdGhpcy5zdGFydERhdGUgPSBzdGFydERhdGUgfHwgdGhpcy5zdGFydERhdGU7XHJcbiAgICAgIGlmICh0aGlzLnN0YXJ0RGF0ZS52YWx1ZU9mKCkgIT09IDg2Mzk5Njg0NDMwNDgwMDApIHtcclxuICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IERQR2xvYmFsLnBhcnNlRGF0ZSh0aGlzLnN0YXJ0RGF0ZSwgdGhpcy5mb3JtYXQsIHRoaXMubGFuZ3VhZ2UsIHRoaXMuZm9ybWF0VHlwZSwgdGhpcy50aW1lem9uZSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgdGhpcy51cGRhdGVOYXZBcnJvd3MoKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0RW5kRGF0ZTogZnVuY3Rpb24gKGVuZERhdGUpIHtcclxuICAgICAgdGhpcy5lbmREYXRlID0gZW5kRGF0ZSB8fCB0aGlzLmVuZERhdGU7XHJcbiAgICAgIGlmICh0aGlzLmVuZERhdGUudmFsdWVPZigpICE9PSA4NjM5OTY4NDQzMDQ4MDAwKSB7XHJcbiAgICAgICAgdGhpcy5lbmREYXRlID0gRFBHbG9iYWwucGFyc2VEYXRlKHRoaXMuZW5kRGF0ZSwgdGhpcy5mb3JtYXQsIHRoaXMubGFuZ3VhZ2UsIHRoaXMuZm9ybWF0VHlwZSwgdGhpcy50aW1lem9uZSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgdGhpcy51cGRhdGVOYXZBcnJvd3MoKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0RGF0ZXNEaXNhYmxlZDogZnVuY3Rpb24gKGRhdGVzRGlzYWJsZWQpIHtcclxuICAgICAgdGhpcy5kYXRlc0Rpc2FibGVkID0gZGF0ZXNEaXNhYmxlZCB8fCBbXTtcclxuICAgICAgaWYgKCEkLmlzQXJyYXkodGhpcy5kYXRlc0Rpc2FibGVkKSkge1xyXG4gICAgICAgIHRoaXMuZGF0ZXNEaXNhYmxlZCA9IHRoaXMuZGF0ZXNEaXNhYmxlZC5zcGxpdCgvLFxccyovKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgbVRoaXMgPSB0aGlzO1xyXG4gICAgICB0aGlzLmRhdGVzRGlzYWJsZWQgPSAkLm1hcCh0aGlzLmRhdGVzRGlzYWJsZWQsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgcmV0dXJuIERQR2xvYmFsLnBhcnNlRGF0ZShkLCBtVGhpcy5mb3JtYXQsIG1UaGlzLmxhbmd1YWdlLCBtVGhpcy5mb3JtYXRUeXBlLCBtVGhpcy50aW1lem9uZSkudG9EYXRlU3RyaW5nKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICB0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRUaXRsZTogZnVuY3Rpb24gKHNlbGVjdG9yLCB2YWx1ZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5waWNrZXIuZmluZChzZWxlY3RvcilcclxuICAgICAgICAuZmluZCgndGg6ZXEoMSknKVxyXG4gICAgICAgIC50ZXh0KHRoaXMudGl0bGUgPT09IGZhbHNlID8gdmFsdWUgOiB0aGlzLnRpdGxlKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0RGF5c09mV2Vla0Rpc2FibGVkOiBmdW5jdGlvbiAoZGF5c09mV2Vla0Rpc2FibGVkKSB7XHJcbiAgICAgIHRoaXMuZGF5c09mV2Vla0Rpc2FibGVkID0gZGF5c09mV2Vla0Rpc2FibGVkIHx8IFtdO1xyXG4gICAgICBpZiAoISQuaXNBcnJheSh0aGlzLmRheXNPZldlZWtEaXNhYmxlZCkpIHtcclxuICAgICAgICB0aGlzLmRheXNPZldlZWtEaXNhYmxlZCA9IHRoaXMuZGF5c09mV2Vla0Rpc2FibGVkLnNwbGl0KC8sXFxzKi8pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZGF5c09mV2Vla0Rpc2FibGVkID0gJC5tYXAodGhpcy5kYXlzT2ZXZWVrRGlzYWJsZWQsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGQsIDEwKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgIHRoaXMudXBkYXRlTmF2QXJyb3dzKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHNldE1pbnV0ZXNEaXNhYmxlZDogZnVuY3Rpb24gKG1pbnV0ZXNEaXNhYmxlZCkge1xyXG4gICAgICB0aGlzLm1pbnV0ZXNEaXNhYmxlZCA9IG1pbnV0ZXNEaXNhYmxlZCB8fCBbXTtcclxuICAgICAgaWYgKCEkLmlzQXJyYXkodGhpcy5taW51dGVzRGlzYWJsZWQpKSB7XHJcbiAgICAgICAgdGhpcy5taW51dGVzRGlzYWJsZWQgPSB0aGlzLm1pbnV0ZXNEaXNhYmxlZC5zcGxpdCgvLFxccyovKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLm1pbnV0ZXNEaXNhYmxlZCA9ICQubWFwKHRoaXMubWludXRlc0Rpc2FibGVkLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgIHJldHVybiBwYXJzZUludChkLCAxMCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICB0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRIb3Vyc0Rpc2FibGVkOiBmdW5jdGlvbiAoaG91cnNEaXNhYmxlZCkge1xyXG4gICAgICB0aGlzLmhvdXJzRGlzYWJsZWQgPSBob3Vyc0Rpc2FibGVkIHx8IFtdO1xyXG4gICAgICBpZiAoISQuaXNBcnJheSh0aGlzLmhvdXJzRGlzYWJsZWQpKSB7XHJcbiAgICAgICAgdGhpcy5ob3Vyc0Rpc2FibGVkID0gdGhpcy5ob3Vyc0Rpc2FibGVkLnNwbGl0KC8sXFxzKi8pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuaG91cnNEaXNhYmxlZCA9ICQubWFwKHRoaXMuaG91cnNEaXNhYmxlZCwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoZCwgMTApO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgdGhpcy51cGRhdGVOYXZBcnJvd3MoKTtcclxuICAgIH0sXHJcblxyXG4gICAgcGxhY2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHRoaXMuaXNJbmxpbmUpIHJldHVybjtcclxuXHJcbiAgICAgIGlmICghdGhpcy56SW5kZXgpIHtcclxuICAgICAgICB2YXIgaW5kZXhfaGlnaGVzdCA9IDA7XHJcbiAgICAgICAgJCgnZGl2JykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgaW5kZXhfY3VycmVudCA9IHBhcnNlSW50KCQodGhpcykuY3NzKCd6SW5kZXgnKSwgMTApO1xyXG4gICAgICAgICAgaWYgKGluZGV4X2N1cnJlbnQgPiBpbmRleF9oaWdoZXN0KSB7XHJcbiAgICAgICAgICAgIGluZGV4X2hpZ2hlc3QgPSBpbmRleF9jdXJyZW50O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuekluZGV4ID0gaW5kZXhfaGlnaGVzdCArIDEwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgb2Zmc2V0LCB0b3AsIGxlZnQsIGNvbnRhaW5lck9mZnNldDtcclxuICAgICAgaWYgKHRoaXMuY29udGFpbmVyIGluc3RhbmNlb2YgJCkge1xyXG4gICAgICAgIGNvbnRhaW5lck9mZnNldCA9IHRoaXMuY29udGFpbmVyLm9mZnNldCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnRhaW5lck9mZnNldCA9ICQodGhpcy5jb250YWluZXIpLm9mZnNldCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcclxuICAgICAgICBvZmZzZXQgPSB0aGlzLmNvbXBvbmVudC5vZmZzZXQoKTtcclxuICAgICAgICBsZWZ0ID0gb2Zmc2V0LmxlZnQ7XHJcbiAgICAgICAgaWYgKHRoaXMucGlja2VyUG9zaXRpb24gPT09ICdib3R0b20tbGVmdCcgfHwgdGhpcy5waWNrZXJQb3NpdGlvbiA9PT0gJ3RvcC1sZWZ0Jykge1xyXG4gICAgICAgICAgbGVmdCArPSB0aGlzLmNvbXBvbmVudC5vdXRlcldpZHRoKCkgLSB0aGlzLnBpY2tlci5vdXRlcldpZHRoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9mZnNldCA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKTtcclxuICAgICAgICBsZWZ0ID0gb2Zmc2V0LmxlZnQ7XHJcbiAgICAgICAgaWYgKHRoaXMucGlja2VyUG9zaXRpb24gPT09ICdib3R0b20tbGVmdCcgfHwgdGhpcy5waWNrZXJQb3NpdGlvbiA9PT0gJ3RvcC1sZWZ0Jykge1xyXG4gICAgICAgICAgbGVmdCArPSB0aGlzLmVsZW1lbnQub3V0ZXJXaWR0aCgpIC0gdGhpcy5waWNrZXIub3V0ZXJXaWR0aCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGJvZHlXaWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggfHwgd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgIGlmIChsZWZ0ICsgMjIwID4gYm9keVdpZHRoKSB7XHJcbiAgICAgICAgbGVmdCA9IGJvZHlXaWR0aCAtIDIyMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMucGlja2VyUG9zaXRpb24gPT09ICd0b3AtbGVmdCcgfHwgdGhpcy5waWNrZXJQb3NpdGlvbiA9PT0gJ3RvcC1yaWdodCcpIHtcclxuICAgICAgICB0b3AgPSBvZmZzZXQudG9wIC0gdGhpcy5waWNrZXIub3V0ZXJIZWlnaHQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0b3AgPSBvZmZzZXQudG9wICsgdGhpcy5oZWlnaHQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRvcCA9IHRvcCAtIGNvbnRhaW5lck9mZnNldC50b3A7XHJcbiAgICAgIGxlZnQgPSBsZWZ0IC0gY29udGFpbmVyT2Zmc2V0LmxlZnQ7XHJcblxyXG4gICAgICB0aGlzLnBpY2tlci5jc3Moe1xyXG4gICAgICAgIHRvcDogICAgdG9wLFxyXG4gICAgICAgIGxlZnQ6ICAgbGVmdCxcclxuICAgICAgICB6SW5kZXg6IHRoaXMuekluZGV4XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBob3VyX21pbnV0ZTogXCJeKFswLTldfDBbMC05XXwxWzAtOV18MlswLTNdKTpbMC01XVswLTldXCIsXHJcblxyXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBkYXRlLCBmcm9tQXJncyA9IGZhbHNlO1xyXG4gICAgICBpZiAoYXJndW1lbnRzICYmIGFyZ3VtZW50cy5sZW5ndGggJiYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdzdHJpbmcnIHx8IGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIERhdGUpKSB7XHJcbiAgICAgICAgZGF0ZSA9IGFyZ3VtZW50c1swXTtcclxuICAgICAgICBmcm9tQXJncyA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGF0ZSA9ICh0aGlzLmlzSW5wdXQgPyB0aGlzLmVsZW1lbnQudmFsKCkgOiB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKS52YWwoKSkgfHwgdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUnKSB8fCB0aGlzLmluaXRpYWxEYXRlO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGF0ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIGRhdGUgPSBkYXRlLnJlcGxhY2UoL15cXHMrfFxccyskL2csJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFkYXRlKSB7XHJcbiAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgZnJvbUFyZ3MgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHR5cGVvZiBkYXRlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgaWYgKG5ldyBSZWdFeHAodGhpcy5ob3VyX21pbnV0ZSkudGVzdChkYXRlKSB8fCBuZXcgUmVnRXhwKHRoaXMuaG91cl9taW51dGUgKyBcIjpbMC01XVswLTldXCIpLnRlc3QoZGF0ZSkpIHtcclxuICAgICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGUoKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5kYXRlID0gRFBHbG9iYWwucGFyc2VEYXRlKGRhdGUsIHRoaXMuZm9ybWF0LCB0aGlzLmxhbmd1YWdlLCB0aGlzLmZvcm1hdFR5cGUsIHRoaXMudGltZXpvbmUpO1xyXG5cclxuICAgICAgaWYgKGZyb21BcmdzKSB0aGlzLnNldFZhbHVlKCk7XHJcblxyXG4gICAgICBpZiAodGhpcy5kYXRlIDwgdGhpcy5zdGFydERhdGUpIHtcclxuICAgICAgICB0aGlzLnZpZXdEYXRlID0gbmV3IERhdGUodGhpcy5zdGFydERhdGUpO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0ZSA+IHRoaXMuZW5kRGF0ZSkge1xyXG4gICAgICAgIHRoaXMudmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLmVuZERhdGUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMudmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGUpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZmlsbCgpO1xyXG4gICAgfSxcclxuXHJcbiAgICBmaWxsRG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBkb3dDbnQgPSB0aGlzLndlZWtTdGFydCxcclxuICAgICAgICBodG1sID0gJzx0cj4nO1xyXG4gICAgICB3aGlsZSAoZG93Q250IDwgdGhpcy53ZWVrU3RhcnQgKyA3KSB7XHJcbiAgICAgICAgaHRtbCArPSAnPHRoIGNsYXNzPVwiZG93XCI+JyArIGRhdGVzW3RoaXMubGFuZ3VhZ2VdLmRheXNNaW5bKGRvd0NudCsrKSAlIDddICsgJzwvdGg+JztcclxuICAgICAgfVxyXG4gICAgICBodG1sICs9ICc8L3RyPic7XHJcbiAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5kYXRldGltZXBpY2tlci1kYXlzIHRoZWFkJykuYXBwZW5kKGh0bWwpO1xyXG4gICAgfSxcclxuXHJcbiAgICBmaWxsTW9udGhzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBodG1sID0gJyc7XHJcbiAgICAgIHZhciBkID0gbmV3IERhdGUodGhpcy52aWV3RGF0ZSk7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTI7IGkrKykge1xyXG4gICAgICAgIGQuc2V0VVRDTW9udGgoaSk7XHJcbiAgICAgICAgdmFyIGNsYXNzZXMgPSB0aGlzLm9uUmVuZGVyTW9udGgoZCk7XHJcbiAgICAgICAgaHRtbCArPSAnPHNwYW4gY2xhc3M9XCInICsgY2xhc3Nlcy5qb2luKCcgJykgKyAnXCI+JyArIGRhdGVzW3RoaXMubGFuZ3VhZ2VdLm1vbnRoc1Nob3J0W2ldICsgJzwvc3Bhbj4nO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5kYXRldGltZXBpY2tlci1tb250aHMgdGQnKS5odG1sKGh0bWwpO1xyXG4gICAgfSxcclxuXHJcbiAgICBmaWxsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICghdGhpcy5kYXRlIHx8ICF0aGlzLnZpZXdEYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBkID0gbmV3IERhdGUodGhpcy52aWV3RGF0ZSksXHJcbiAgICAgICAgeWVhciA9IGQuZ2V0VVRDRnVsbFllYXIoKSxcclxuICAgICAgICBtb250aCA9IGQuZ2V0VVRDTW9udGgoKSxcclxuICAgICAgICBkYXlNb250aCA9IGQuZ2V0VVRDRGF0ZSgpLFxyXG4gICAgICAgIGhvdXJzID0gZC5nZXRVVENIb3VycygpLFxyXG4gICAgICAgIHN0YXJ0WWVhciA9IHRoaXMuc3RhcnREYXRlLmdldFVUQ0Z1bGxZZWFyKCksXHJcbiAgICAgICAgc3RhcnRNb250aCA9IHRoaXMuc3RhcnREYXRlLmdldFVUQ01vbnRoKCksXHJcbiAgICAgICAgZW5kWWVhciA9IHRoaXMuZW5kRGF0ZS5nZXRVVENGdWxsWWVhcigpLFxyXG4gICAgICAgIGVuZE1vbnRoID0gdGhpcy5lbmREYXRlLmdldFVUQ01vbnRoKCkgKyAxLFxyXG4gICAgICAgIGN1cnJlbnREYXRlID0gKG5ldyBVVENEYXRlKHRoaXMuZGF0ZS5nZXRVVENGdWxsWWVhcigpLCB0aGlzLmRhdGUuZ2V0VVRDTW9udGgoKSwgdGhpcy5kYXRlLmdldFVUQ0RhdGUoKSkpLnZhbHVlT2YoKSxcclxuICAgICAgICB0b2RheSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgIHRoaXMuc2V0VGl0bGUoJy5kYXRldGltZXBpY2tlci1kYXlzJywgZGF0ZXNbdGhpcy5sYW5ndWFnZV0ubW9udGhzW21vbnRoXSArICcgJyArIHllYXIpXHJcbiAgICAgIGlmICh0aGlzLmZvcm1hdFZpZXdUeXBlID09PSAndGltZScpIHtcclxuICAgICAgICB2YXIgZm9ybWF0dGVkID0gdGhpcy5nZXRGb3JtYXR0ZWREYXRlKCk7XHJcbiAgICAgICAgdGhpcy5zZXRUaXRsZSgnLmRhdGV0aW1lcGlja2VyLWhvdXJzJywgZm9ybWF0dGVkKTtcclxuICAgICAgICB0aGlzLnNldFRpdGxlKCcuZGF0ZXRpbWVwaWNrZXItbWludXRlcycsIGZvcm1hdHRlZCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zZXRUaXRsZSgnLmRhdGV0aW1lcGlja2VyLWhvdXJzJywgZGF5TW9udGggKyAnICcgKyBkYXRlc1t0aGlzLmxhbmd1YWdlXS5tb250aHNbbW9udGhdICsgJyAnICsgeWVhcik7XHJcbiAgICAgICAgdGhpcy5zZXRUaXRsZSgnLmRhdGV0aW1lcGlja2VyLW1pbnV0ZXMnLCBkYXlNb250aCArICcgJyArIGRhdGVzW3RoaXMubGFuZ3VhZ2VdLm1vbnRoc1ttb250aF0gKyAnICcgKyB5ZWFyKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnBpY2tlci5maW5kKCd0Zm9vdCB0aC50b2RheScpXHJcbiAgICAgICAgLnRleHQoZGF0ZXNbdGhpcy5sYW5ndWFnZV0udG9kYXkgfHwgZGF0ZXNbJ2VuJ10udG9kYXkpXHJcbiAgICAgICAgLnRvZ2dsZSh0aGlzLnRvZGF5QnRuICE9PSBmYWxzZSk7XHJcbiAgICAgIHRoaXMucGlja2VyLmZpbmQoJ3Rmb290IHRoLmNsZWFyJylcclxuICAgICAgICAudGV4dChkYXRlc1t0aGlzLmxhbmd1YWdlXS5jbGVhciB8fCBkYXRlc1snZW4nXS5jbGVhcilcclxuICAgICAgICAudG9nZ2xlKHRoaXMuY2xlYXJCdG4gIT09IGZhbHNlKTtcclxuICAgICAgdGhpcy51cGRhdGVOYXZBcnJvd3MoKTtcclxuICAgICAgdGhpcy5maWxsTW9udGhzKCk7XHJcbiAgICAgIHZhciBwcmV2TW9udGggPSBVVENEYXRlKHllYXIsIG1vbnRoIC0gMSwgMjgsIDAsIDAsIDAsIDApLFxyXG4gICAgICAgIGRheSA9IERQR2xvYmFsLmdldERheXNJbk1vbnRoKHByZXZNb250aC5nZXRVVENGdWxsWWVhcigpLCBwcmV2TW9udGguZ2V0VVRDTW9udGgoKSk7XHJcbiAgICAgIHByZXZNb250aC5zZXRVVENEYXRlKGRheSk7XHJcbiAgICAgIHByZXZNb250aC5zZXRVVENEYXRlKGRheSAtIChwcmV2TW9udGguZ2V0VVRDRGF5KCkgLSB0aGlzLndlZWtTdGFydCArIDcpICUgNyk7XHJcbiAgICAgIHZhciBuZXh0TW9udGggPSBuZXcgRGF0ZShwcmV2TW9udGgpO1xyXG4gICAgICBuZXh0TW9udGguc2V0VVRDRGF0ZShuZXh0TW9udGguZ2V0VVRDRGF0ZSgpICsgNDIpO1xyXG4gICAgICBuZXh0TW9udGggPSBuZXh0TW9udGgudmFsdWVPZigpO1xyXG4gICAgICB2YXIgaHRtbCA9IFtdO1xyXG4gICAgICB2YXIgY2xhc3NlcztcclxuICAgICAgd2hpbGUgKHByZXZNb250aC52YWx1ZU9mKCkgPCBuZXh0TW9udGgpIHtcclxuICAgICAgICBpZiAocHJldk1vbnRoLmdldFVUQ0RheSgpID09PSB0aGlzLndlZWtTdGFydCkge1xyXG4gICAgICAgICAgaHRtbC5wdXNoKCc8dHI+Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsYXNzZXMgPSB0aGlzLm9uUmVuZGVyRGF5KHByZXZNb250aCk7XHJcbiAgICAgICAgaWYgKHByZXZNb250aC5nZXRVVENGdWxsWWVhcigpIDwgeWVhciB8fCAocHJldk1vbnRoLmdldFVUQ0Z1bGxZZWFyKCkgPT09IHllYXIgJiYgcHJldk1vbnRoLmdldFVUQ01vbnRoKCkgPCBtb250aCkpIHtcclxuICAgICAgICAgIGNsYXNzZXMucHVzaCgnb2xkJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwcmV2TW9udGguZ2V0VVRDRnVsbFllYXIoKSA+IHllYXIgfHwgKHByZXZNb250aC5nZXRVVENGdWxsWWVhcigpID09PSB5ZWFyICYmIHByZXZNb250aC5nZXRVVENNb250aCgpID4gbW9udGgpKSB7XHJcbiAgICAgICAgICBjbGFzc2VzLnB1c2goJ25ldycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBDb21wYXJlIGludGVybmFsIFVUQyBkYXRlIHdpdGggbG9jYWwgdG9kYXksIG5vdCBVVEMgdG9kYXlcclxuICAgICAgICBpZiAodGhpcy50b2RheUhpZ2hsaWdodCAmJlxyXG4gICAgICAgICAgcHJldk1vbnRoLmdldFVUQ0Z1bGxZZWFyKCkgPT09IHRvZGF5LmdldEZ1bGxZZWFyKCkgJiZcclxuICAgICAgICAgIHByZXZNb250aC5nZXRVVENNb250aCgpID09PSB0b2RheS5nZXRNb250aCgpICYmXHJcbiAgICAgICAgICBwcmV2TW9udGguZ2V0VVRDRGF0ZSgpID09PSB0b2RheS5nZXREYXRlKCkpIHtcclxuICAgICAgICAgIGNsYXNzZXMucHVzaCgndG9kYXknKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXZNb250aC52YWx1ZU9mKCkgPT09IGN1cnJlbnREYXRlKSB7XHJcbiAgICAgICAgICBjbGFzc2VzLnB1c2goJ2FjdGl2ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByZXZNb250aC52YWx1ZU9mKCkgKyA4NjQwMDAwMCkgPD0gdGhpcy5zdGFydERhdGUgfHwgcHJldk1vbnRoLnZhbHVlT2YoKSA+IHRoaXMuZW5kRGF0ZSB8fFxyXG4gICAgICAgICAgJC5pbkFycmF5KHByZXZNb250aC5nZXRVVENEYXkoKSwgdGhpcy5kYXlzT2ZXZWVrRGlzYWJsZWQpICE9PSAtMSB8fFxyXG4gICAgICAgICAgJC5pbkFycmF5KHByZXZNb250aC50b0RhdGVTdHJpbmcoKSwgdGhpcy5kYXRlc0Rpc2FibGVkKSAhPT0gLTEpIHtcclxuICAgICAgICAgIGNsYXNzZXMucHVzaCgnZGlzYWJsZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaHRtbC5wdXNoKCc8dGQgY2xhc3M9XCInICsgY2xhc3Nlcy5qb2luKCcgJykgKyAnXCI+JyArIHByZXZNb250aC5nZXRVVENEYXRlKCkgKyAnPC90ZD4nKTtcclxuICAgICAgICBpZiAocHJldk1vbnRoLmdldFVUQ0RheSgpID09PSB0aGlzLndlZWtFbmQpIHtcclxuICAgICAgICAgIGh0bWwucHVzaCgnPC90cj4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJldk1vbnRoLnNldFVUQ0RhdGUocHJldk1vbnRoLmdldFVUQ0RhdGUoKSArIDEpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5kYXRldGltZXBpY2tlci1kYXlzIHRib2R5JykuZW1wdHkoKS5hcHBlbmQoaHRtbC5qb2luKCcnKSk7XHJcblxyXG4gICAgICBodG1sID0gW107XHJcbiAgICAgIHZhciB0eHQgPSAnJywgbWVyaWRpYW4gPSAnJywgbWVyaWRpYW5PbGQgPSAnJztcclxuICAgICAgdmFyIGhvdXJzRGlzYWJsZWQgPSB0aGlzLmhvdXJzRGlzYWJsZWQgfHwgW107XHJcbiAgICAgIGQgPSBuZXcgRGF0ZSh0aGlzLnZpZXdEYXRlKVxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHtcclxuICAgICAgICBkLnNldFVUQ0hvdXJzKGkpO1xyXG4gICAgICAgIGNsYXNzZXMgPSB0aGlzLm9uUmVuZGVySG91cihkKTtcclxuICAgICAgICBpZiAoaG91cnNEaXNhYmxlZC5pbmRleE9mKGkpICE9PSAtMSkge1xyXG4gICAgICAgICAgY2xhc3Nlcy5wdXNoKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWN0dWFsID0gVVRDRGF0ZSh5ZWFyLCBtb250aCwgZGF5TW9udGgsIGkpO1xyXG4gICAgICAgIC8vIFdlIHdhbnQgdGhlIHByZXZpb3VzIGhvdXIgZm9yIHRoZSBzdGFydERhdGVcclxuICAgICAgICBpZiAoKGFjdHVhbC52YWx1ZU9mKCkgKyAzNjAwMDAwKSA8PSB0aGlzLnN0YXJ0RGF0ZSB8fCBhY3R1YWwudmFsdWVPZigpID4gdGhpcy5lbmREYXRlKSB7XHJcbiAgICAgICAgICBjbGFzc2VzLnB1c2goJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChob3VycyA9PT0gaSkge1xyXG4gICAgICAgICAgY2xhc3Nlcy5wdXNoKCdhY3RpdmUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd01lcmlkaWFuICYmIGRhdGVzW3RoaXMubGFuZ3VhZ2VdLm1lcmlkaWVtLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgbWVyaWRpYW4gPSAoaSA8IDEyID8gZGF0ZXNbdGhpcy5sYW5ndWFnZV0ubWVyaWRpZW1bMF0gOiBkYXRlc1t0aGlzLmxhbmd1YWdlXS5tZXJpZGllbVsxXSk7XHJcbiAgICAgICAgICBpZiAobWVyaWRpYW4gIT09IG1lcmlkaWFuT2xkKSB7XHJcbiAgICAgICAgICAgIGlmIChtZXJpZGlhbk9sZCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICBodG1sLnB1c2goJzwvZmllbGRzZXQ+Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaHRtbC5wdXNoKCc8ZmllbGRzZXQgY2xhc3M9XCJob3VyXCI+PGxlZ2VuZD4nICsgbWVyaWRpYW4udG9VcHBlckNhc2UoKSArICc8L2xlZ2VuZD4nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG1lcmlkaWFuT2xkID0gbWVyaWRpYW47XHJcbiAgICAgICAgICB0eHQgPSAoaSAlIDEyID8gaSAlIDEyIDogMTIpO1xyXG4gICAgICAgICAgaWYgKGkgPCAxMikge1xyXG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2hvdXJfYW0nKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnaG91cl9wbScpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaHRtbC5wdXNoKCc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc2VzLmpvaW4oJyAnKSArICdcIj4nICsgdHh0ICsgJzwvc3Bhbj4nKTtcclxuICAgICAgICAgIGlmIChpID09PSAyMykge1xyXG4gICAgICAgICAgICBodG1sLnB1c2goJzwvZmllbGRzZXQ+Jyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHR4dCA9IGkgKyAnOjAwJztcclxuICAgICAgICAgIGh0bWwucHVzaCgnPHNwYW4gY2xhc3M9XCInICsgY2xhc3Nlcy5qb2luKCcgJykgKyAnXCI+JyArIHR4dCArICc8L3NwYW4+Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5kYXRldGltZXBpY2tlci1ob3VycyB0ZCcpLmh0bWwoaHRtbC5qb2luKCcnKSk7XHJcblxyXG4gICAgICBodG1sID0gW107XHJcbiAgICAgIHR4dCA9ICcnO1xyXG4gICAgICBtZXJpZGlhbiA9ICcnO1xyXG4gICAgICBtZXJpZGlhbk9sZCA9ICcnO1xyXG4gICAgICB2YXIgbWludXRlc0Rpc2FibGVkID0gdGhpcy5taW51dGVzRGlzYWJsZWQgfHwgW107XHJcbiAgICAgIGQgPSBuZXcgRGF0ZSh0aGlzLnZpZXdEYXRlKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2MDsgaSArPSB0aGlzLm1pbnV0ZVN0ZXApIHtcclxuICAgICAgICBpZiAobWludXRlc0Rpc2FibGVkLmluZGV4T2YoaSkgIT09IC0xKSBjb250aW51ZTtcclxuICAgICAgICBkLnNldFVUQ01pbnV0ZXMoaSk7XHJcbiAgICAgICAgZC5zZXRVVENTZWNvbmRzKDApO1xyXG4gICAgICAgIGNsYXNzZXMgPSB0aGlzLm9uUmVuZGVyTWludXRlKGQpO1xyXG4gICAgICAgIGlmICh0aGlzLnNob3dNZXJpZGlhbiAmJiBkYXRlc1t0aGlzLmxhbmd1YWdlXS5tZXJpZGllbS5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgIG1lcmlkaWFuID0gKGhvdXJzIDwgMTIgPyBkYXRlc1t0aGlzLmxhbmd1YWdlXS5tZXJpZGllbVswXSA6IGRhdGVzW3RoaXMubGFuZ3VhZ2VdLm1lcmlkaWVtWzFdKTtcclxuICAgICAgICAgIGlmIChtZXJpZGlhbiAhPT0gbWVyaWRpYW5PbGQpIHtcclxuICAgICAgICAgICAgaWYgKG1lcmlkaWFuT2xkICE9PSAnJykge1xyXG4gICAgICAgICAgICAgIGh0bWwucHVzaCgnPC9maWVsZHNldD4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBodG1sLnB1c2goJzxmaWVsZHNldCBjbGFzcz1cIm1pbnV0ZVwiPjxsZWdlbmQ+JyArIG1lcmlkaWFuLnRvVXBwZXJDYXNlKCkgKyAnPC9sZWdlbmQ+Jyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBtZXJpZGlhbk9sZCA9IG1lcmlkaWFuO1xyXG4gICAgICAgICAgdHh0ID0gKGhvdXJzICUgMTIgPyBob3VycyAlIDEyIDogMTIpO1xyXG4gICAgICAgICAgaHRtbC5wdXNoKCc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc2VzLmpvaW4oJyAnKSArICdcIj4nICsgdHh0ICsgJzonICsgKGkgPCAxMCA/ICcwJyArIGkgOiBpKSArICc8L3NwYW4+Jyk7XHJcbiAgICAgICAgICBpZiAoaSA9PT0gNTkpIHtcclxuICAgICAgICAgICAgaHRtbC5wdXNoKCc8L2ZpZWxkc2V0PicpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0eHQgPSBpICsgJzowMCc7XHJcbiAgICAgICAgICBodG1sLnB1c2goJzxzcGFuIGNsYXNzPVwiJyArIGNsYXNzZXMuam9pbignICcpICsgJ1wiPicgKyBob3VycyArICc6JyArIChpIDwgMTAgPyAnMCcgKyBpIDogaSkgKyAnPC9zcGFuPicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXRpbWVwaWNrZXItbWludXRlcyB0ZCcpLmh0bWwoaHRtbC5qb2luKCcnKSk7XHJcblxyXG4gICAgICB2YXIgY3VycmVudFllYXIgPSB0aGlzLmRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcclxuICAgICAgdmFyIG1vbnRocyA9IHRoaXMuc2V0VGl0bGUoJy5kYXRldGltZXBpY2tlci1tb250aHMnLCB5ZWFyKVxyXG4gICAgICAgIC5lbmQoKVxyXG4gICAgICAgIC5maW5kKCcubW9udGgnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgIGlmIChjdXJyZW50WWVhciA9PT0geWVhcikge1xyXG4gICAgICAgIC8vIGdldFVUQ01vbnRocygpIHJldHVybnMgMCBiYXNlZCwgYW5kIHdlIG5lZWQgdG8gc2VsZWN0IHRoZSBuZXh0IG9uZVxyXG4gICAgICAgIC8vIFRvIGNhdGVyIGJvb3RzdHJhcCAyIHdlIGRvbid0IG5lZWQgdG8gc2VsZWN0IHRoZSBuZXh0IG9uZVxyXG4gICAgICAgIG1vbnRocy5lcSh0aGlzLmRhdGUuZ2V0VVRDTW9udGgoKSkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh5ZWFyIDwgc3RhcnRZZWFyIHx8IHllYXIgPiBlbmRZZWFyKSB7XHJcbiAgICAgICAgbW9udGhzLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh5ZWFyID09PSBzdGFydFllYXIpIHtcclxuICAgICAgICBtb250aHMuc2xpY2UoMCwgc3RhcnRNb250aCkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHllYXIgPT09IGVuZFllYXIpIHtcclxuICAgICAgICBtb250aHMuc2xpY2UoZW5kTW9udGgpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBodG1sID0gJyc7XHJcbiAgICAgIHllYXIgPSBwYXJzZUludCh5ZWFyIC8gMTAsIDEwKSAqIDEwO1xyXG4gICAgICB2YXIgeWVhckNvbnQgPSB0aGlzLnNldFRpdGxlKCcuZGF0ZXRpbWVwaWNrZXIteWVhcnMnLCB5ZWFyICsgJy0nICsgKHllYXIgKyA5KSlcclxuICAgICAgICAuZW5kKClcclxuICAgICAgICAuZmluZCgndGQnKTtcclxuICAgICAgeWVhciAtPSAxO1xyXG4gICAgICBkID0gbmV3IERhdGUodGhpcy52aWV3RGF0ZSk7XHJcbiAgICAgIGZvciAodmFyIGkgPSAtMTsgaSA8IDExOyBpKyspIHtcclxuICAgICAgICBkLnNldFVUQ0Z1bGxZZWFyKHllYXIpO1xyXG4gICAgICAgIGNsYXNzZXMgPSB0aGlzLm9uUmVuZGVyWWVhcihkKTtcclxuICAgICAgICBpZiAoaSA9PT0gLTEgfHwgaSA9PT0gMTApIHtcclxuICAgICAgICAgIGNsYXNzZXMucHVzaChvbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBodG1sICs9ICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc2VzLmpvaW4oJyAnKSArICdcIj4nICsgeWVhciArICc8L3NwYW4+JztcclxuICAgICAgICB5ZWFyICs9IDE7XHJcbiAgICAgIH1cclxuICAgICAgeWVhckNvbnQuaHRtbChodG1sKTtcclxuICAgICAgdGhpcy5wbGFjZSgpO1xyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGVOYXZBcnJvd3M6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIGQgPSBuZXcgRGF0ZSh0aGlzLnZpZXdEYXRlKSxcclxuICAgICAgICB5ZWFyID0gZC5nZXRVVENGdWxsWWVhcigpLFxyXG4gICAgICAgIG1vbnRoID0gZC5nZXRVVENNb250aCgpLFxyXG4gICAgICAgIGRheSA9IGQuZ2V0VVRDRGF0ZSgpLFxyXG4gICAgICAgIGhvdXIgPSBkLmdldFVUQ0hvdXJzKCk7XHJcbiAgICAgIHN3aXRjaCAodGhpcy52aWV3TW9kZSkge1xyXG4gICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgIGlmICh5ZWFyIDw9IHRoaXMuc3RhcnREYXRlLmdldFVUQ0Z1bGxZZWFyKClcclxuICAgICAgICAgICAgJiYgbW9udGggPD0gdGhpcy5zdGFydERhdGUuZ2V0VVRDTW9udGgoKVxyXG4gICAgICAgICAgICAmJiBkYXkgPD0gdGhpcy5zdGFydERhdGUuZ2V0VVRDRGF0ZSgpXHJcbiAgICAgICAgICAgICYmIGhvdXIgPD0gdGhpcy5zdGFydERhdGUuZ2V0VVRDSG91cnMoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcucHJldicpLmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbid9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5wcmV2JykuY3NzKHt2aXNpYmlsaXR5OiAndmlzaWJsZSd9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh5ZWFyID49IHRoaXMuZW5kRGF0ZS5nZXRVVENGdWxsWWVhcigpXHJcbiAgICAgICAgICAgICYmIG1vbnRoID49IHRoaXMuZW5kRGF0ZS5nZXRVVENNb250aCgpXHJcbiAgICAgICAgICAgICYmIGRheSA+PSB0aGlzLmVuZERhdGUuZ2V0VVRDRGF0ZSgpXHJcbiAgICAgICAgICAgICYmIGhvdXIgPj0gdGhpcy5lbmREYXRlLmdldFVUQ0hvdXJzKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLm5leHQnKS5jc3Moe3Zpc2liaWxpdHk6ICdoaWRkZW4nfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcubmV4dCcpLmNzcyh7dmlzaWJpbGl0eTogJ3Zpc2libGUnfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICBpZiAoeWVhciA8PSB0aGlzLnN0YXJ0RGF0ZS5nZXRVVENGdWxsWWVhcigpXHJcbiAgICAgICAgICAgICYmIG1vbnRoIDw9IHRoaXMuc3RhcnREYXRlLmdldFVUQ01vbnRoKClcclxuICAgICAgICAgICAgJiYgZGF5IDw9IHRoaXMuc3RhcnREYXRlLmdldFVUQ0RhdGUoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcucHJldicpLmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbid9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5wcmV2JykuY3NzKHt2aXNpYmlsaXR5OiAndmlzaWJsZSd9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh5ZWFyID49IHRoaXMuZW5kRGF0ZS5nZXRVVENGdWxsWWVhcigpXHJcbiAgICAgICAgICAgICYmIG1vbnRoID49IHRoaXMuZW5kRGF0ZS5nZXRVVENNb250aCgpXHJcbiAgICAgICAgICAgICYmIGRheSA+PSB0aGlzLmVuZERhdGUuZ2V0VVRDRGF0ZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5uZXh0JykuY3NzKHt2aXNpYmlsaXR5OiAnaGlkZGVuJ30pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLm5leHQnKS5jc3Moe3Zpc2liaWxpdHk6ICd2aXNpYmxlJ30pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgaWYgKHllYXIgPD0gdGhpcy5zdGFydERhdGUuZ2V0VVRDRnVsbFllYXIoKVxyXG4gICAgICAgICAgICAmJiBtb250aCA8PSB0aGlzLnN0YXJ0RGF0ZS5nZXRVVENNb250aCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5wcmV2JykuY3NzKHt2aXNpYmlsaXR5OiAnaGlkZGVuJ30pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLnByZXYnKS5jc3Moe3Zpc2liaWxpdHk6ICd2aXNpYmxlJ30pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHllYXIgPj0gdGhpcy5lbmREYXRlLmdldFVUQ0Z1bGxZZWFyKClcclxuICAgICAgICAgICAgJiYgbW9udGggPj0gdGhpcy5lbmREYXRlLmdldFVUQ01vbnRoKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLm5leHQnKS5jc3Moe3Zpc2liaWxpdHk6ICdoaWRkZW4nfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcubmV4dCcpLmNzcyh7dmlzaWJpbGl0eTogJ3Zpc2libGUnfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgaWYgKHllYXIgPD0gdGhpcy5zdGFydERhdGUuZ2V0VVRDRnVsbFllYXIoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcucHJldicpLmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbid9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5wcmV2JykuY3NzKHt2aXNpYmlsaXR5OiAndmlzaWJsZSd9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh5ZWFyID49IHRoaXMuZW5kRGF0ZS5nZXRVVENGdWxsWWVhcigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5uZXh0JykuY3NzKHt2aXNpYmlsaXR5OiAnaGlkZGVuJ30pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLm5leHQnKS5jc3Moe3Zpc2liaWxpdHk6ICd2aXNpYmxlJ30pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgbW91c2V3aGVlbDogZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLndoZWVsUGF1c2UpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMud2hlZWxQYXVzZSA9IHRydWU7XHJcblxyXG4gICAgICB2YXIgb3JpZ2luYWxFdmVudCA9IGUub3JpZ2luYWxFdmVudDtcclxuXHJcbiAgICAgIHZhciBkZWx0YSA9IG9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YTtcclxuXHJcbiAgICAgIHZhciBtb2RlID0gZGVsdGEgPiAwID8gMSA6IChkZWx0YSA9PT0gMCkgPyAwIDogLTE7XHJcblxyXG4gICAgICBpZiAodGhpcy53aGVlbFZpZXdNb2RlTmF2aWdhdGlvbkludmVyc2VEaXJlY3Rpb24pIHtcclxuICAgICAgICBtb2RlID0gLW1vZGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc2hvd01vZGUobW9kZSk7XHJcblxyXG4gICAgICBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB0aGlzLndoZWVsUGF1c2UgPSBmYWxzZVxyXG5cclxuICAgICAgfSwgdGhpcyksIHRoaXMud2hlZWxWaWV3TW9kZU5hdmlnYXRpb25EZWxheSk7XHJcblxyXG4gICAgfSxcclxuXHJcbiAgICBjbGljazogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB2YXIgdGFyZ2V0ID0gJChlLnRhcmdldCkuY2xvc2VzdCgnc3BhbiwgdGQsIHRoLCBsZWdlbmQnKTtcclxuICAgICAgaWYgKHRhcmdldC5pcygnLicgKyB0aGlzLmljb250eXBlKSkge1xyXG4gICAgICAgIHRhcmdldCA9ICQodGFyZ2V0KS5wYXJlbnQoKS5jbG9zZXN0KCdzcGFuLCB0ZCwgdGgsIGxlZ2VuZCcpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0YXJnZXQubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgaWYgKHRhcmdldC5pcygnLmRpc2FibGVkJykpIHtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudC50cmlnZ2VyKHtcclxuICAgICAgICAgICAgdHlwZTogICAgICAnb3V0T2ZSYW5nZScsXHJcbiAgICAgICAgICAgIGRhdGU6ICAgICAgdGhpcy52aWV3RGF0ZSxcclxuICAgICAgICAgICAgc3RhcnREYXRlOiB0aGlzLnN0YXJ0RGF0ZSxcclxuICAgICAgICAgICAgZW5kRGF0ZTogICB0aGlzLmVuZERhdGVcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKHRhcmdldFswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICBjYXNlICd0aCc6XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGFyZ2V0WzBdLmNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICAgIGNhc2UgJ3N3aXRjaCc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dNb2RlKDEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAncHJldic6XHJcbiAgICAgICAgICAgICAgY2FzZSAnbmV4dCc6XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlyID0gRFBHbG9iYWwubW9kZXNbdGhpcy52aWV3TW9kZV0ubmF2U3RlcCAqICh0YXJnZXRbMF0uY2xhc3NOYW1lID09PSAncHJldicgPyAtMSA6IDEpO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnZpZXdNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlID0gdGhpcy5tb3ZlSG91cih0aGlzLnZpZXdEYXRlLCBkaXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZSA9IHRoaXMubW92ZURhdGUodGhpcy52aWV3RGF0ZSwgZGlyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLnZpZXdEYXRlLCBkaXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlID0gdGhpcy5tb3ZlWWVhcih0aGlzLnZpZXdEYXRlLCBkaXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5maWxsKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcih7XHJcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICAgICAgdGFyZ2V0WzBdLmNsYXNzTmFtZSArICc6JyArIHRoaXMuY29udmVydFZpZXdNb2RlVGV4dCh0aGlzLnZpZXdNb2RlKSxcclxuICAgICAgICAgICAgICAgICAgZGF0ZTogICAgICB0aGlzLnZpZXdEYXRlLFxyXG4gICAgICAgICAgICAgICAgICBzdGFydERhdGU6IHRoaXMuc3RhcnREYXRlLFxyXG4gICAgICAgICAgICAgICAgICBlbmREYXRlOiAgIHRoaXMuZW5kRGF0ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlICdjbGVhcic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRvY2xvc2UpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlICd0b2RheSc6XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBkYXRlID0gVVRDRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZXNwZWN0IHN0YXJ0RGF0ZSBhbmQgZW5kRGF0ZS5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRlIDwgdGhpcy5zdGFydERhdGUpIGRhdGUgPSB0aGlzLnN0YXJ0RGF0ZTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRhdGUgPiB0aGlzLmVuZERhdGUpIGRhdGUgPSB0aGlzLmVuZERhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3TW9kZSA9IHRoaXMuc3RhcnRWaWV3TW9kZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd01vZGUoMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXREYXRlKGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWxsKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRvY2xvc2UpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ3NwYW4nOlxyXG4gICAgICAgICAgICBpZiAoIXRhcmdldC5pcygnLmRpc2FibGVkJykpIHtcclxuICAgICAgICAgICAgICB2YXIgeWVhciA9IHRoaXMudmlld0RhdGUuZ2V0VVRDRnVsbFllYXIoKSxcclxuICAgICAgICAgICAgICAgIG1vbnRoID0gdGhpcy52aWV3RGF0ZS5nZXRVVENNb250aCgpLFxyXG4gICAgICAgICAgICAgICAgZGF5ID0gdGhpcy52aWV3RGF0ZS5nZXRVVENEYXRlKCksXHJcbiAgICAgICAgICAgICAgICBob3VycyA9IHRoaXMudmlld0RhdGUuZ2V0VVRDSG91cnMoKSxcclxuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ01pbnV0ZXMoKSxcclxuICAgICAgICAgICAgICAgIHNlY29uZHMgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ1NlY29uZHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHRhcmdldC5pcygnLm1vbnRoJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld0RhdGUuc2V0VVRDRGF0ZSgxKTtcclxuICAgICAgICAgICAgICAgIG1vbnRoID0gdGFyZ2V0LnBhcmVudCgpLmZpbmQoJ3NwYW4nKS5pbmRleCh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgZGF5ID0gdGhpcy52aWV3RGF0ZS5nZXRVVENEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlLnNldFVUQ01vbnRoKG1vbnRoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC50cmlnZ2VyKHtcclxuICAgICAgICAgICAgICAgICAgdHlwZTogJ2NoYW5nZU1vbnRoJyxcclxuICAgICAgICAgICAgICAgICAgZGF0ZTogdGhpcy52aWV3RGF0ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3U2VsZWN0ID49IDMpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RGF0ZShVVENEYXRlKHllYXIsIG1vbnRoLCBkYXksIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCAwKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQuaXMoJy55ZWFyJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld0RhdGUuc2V0VVRDRGF0ZSgxKTtcclxuICAgICAgICAgICAgICAgIHllYXIgPSBwYXJzZUludCh0YXJnZXQudGV4dCgpLCAxMCkgfHwgMDtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld0RhdGUuc2V0VVRDRnVsbFllYXIoeWVhcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcih7XHJcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdjaGFuZ2VZZWFyJyxcclxuICAgICAgICAgICAgICAgICAgZGF0ZTogdGhpcy52aWV3RGF0ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3U2VsZWN0ID49IDQpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RGF0ZShVVENEYXRlKHllYXIsIG1vbnRoLCBkYXksIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCAwKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQuaXMoJy5ob3VyJykpIHtcclxuICAgICAgICAgICAgICAgIGhvdXJzID0gcGFyc2VJbnQodGFyZ2V0LnRleHQoKSwgMTApIHx8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0Lmhhc0NsYXNzKCdob3VyX2FtJykgfHwgdGFyZ2V0Lmhhc0NsYXNzKCdob3VyX3BtJykpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKGhvdXJzID09PSAxMiAmJiB0YXJnZXQuaGFzQ2xhc3MoJ2hvdXJfYW0nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvdXJzID0gMDtcclxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyAhPT0gMTIgJiYgdGFyZ2V0Lmhhc0NsYXNzKCdob3VyX3BtJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBob3VycyArPSAxMjtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZS5zZXRVVENIb3Vycyhob3Vycyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcih7XHJcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdjaGFuZ2VIb3VyJyxcclxuICAgICAgICAgICAgICAgICAgZGF0ZTogdGhpcy52aWV3RGF0ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3U2VsZWN0ID49IDEpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RGF0ZShVVENEYXRlKHllYXIsIG1vbnRoLCBkYXksIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCAwKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQuaXMoJy5taW51dGUnKSkge1xyXG4gICAgICAgICAgICAgICAgbWludXRlcyA9IHBhcnNlSW50KHRhcmdldC50ZXh0KCkuc3Vic3RyKHRhcmdldC50ZXh0KCkuaW5kZXhPZignOicpICsgMSksIDEwKSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZS5zZXRVVENNaW51dGVzKG1pbnV0ZXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnRyaWdnZXIoe1xyXG4gICAgICAgICAgICAgICAgICB0eXBlOiAnY2hhbmdlTWludXRlJyxcclxuICAgICAgICAgICAgICAgICAgZGF0ZTogdGhpcy52aWV3RGF0ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3U2VsZWN0ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RGF0ZShVVENEYXRlKHllYXIsIG1vbnRoLCBkYXksIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCAwKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmICh0aGlzLnZpZXdNb2RlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2xkVmlld01vZGUgPSB0aGlzLnZpZXdNb2RlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TW9kZSgtMSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGwoKTtcclxuICAgICAgICAgICAgICAgIGlmIChvbGRWaWV3TW9kZSA9PT0gdGhpcy52aWV3TW9kZSAmJiB0aGlzLmF1dG9jbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWxsKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRvY2xvc2UpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAndGQnOlxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0LmlzKCcuZGF5JykgJiYgIXRhcmdldC5pcygnLmRpc2FibGVkJykpIHtcclxuICAgICAgICAgICAgICB2YXIgZGF5ID0gcGFyc2VJbnQodGFyZ2V0LnRleHQoKSwgMTApIHx8IDE7XHJcbiAgICAgICAgICAgICAgdmFyIHllYXIgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ0Z1bGxZZWFyKCksXHJcbiAgICAgICAgICAgICAgICBtb250aCA9IHRoaXMudmlld0RhdGUuZ2V0VVRDTW9udGgoKSxcclxuICAgICAgICAgICAgICAgIGhvdXJzID0gdGhpcy52aWV3RGF0ZS5nZXRVVENIb3VycygpLFxyXG4gICAgICAgICAgICAgICAgbWludXRlcyA9IHRoaXMudmlld0RhdGUuZ2V0VVRDTWludXRlcygpLFxyXG4gICAgICAgICAgICAgICAgc2Vjb25kcyA9IHRoaXMudmlld0RhdGUuZ2V0VVRDU2Vjb25kcygpO1xyXG4gICAgICAgICAgICAgIGlmICh0YXJnZXQuaXMoJy5vbGQnKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vbnRoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIG1vbnRoID0gMTE7XHJcbiAgICAgICAgICAgICAgICAgIHllYXIgLT0gMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIG1vbnRoIC09IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQuaXMoJy5uZXcnKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vbnRoID09PSAxMSkge1xyXG4gICAgICAgICAgICAgICAgICBtb250aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgIHllYXIgKz0gMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIG1vbnRoICs9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHRoaXMudmlld0RhdGUuc2V0VVRDRnVsbFllYXIoeWVhcik7XHJcbiAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZS5zZXRVVENNb250aChtb250aCwgZGF5KTtcclxuICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcih7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2hhbmdlRGF5JyxcclxuICAgICAgICAgICAgICAgIGRhdGU6IHRoaXMudmlld0RhdGVcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBpZiAodGhpcy52aWV3U2VsZWN0ID49IDIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldERhdGUoVVRDRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCBob3VycywgbWludXRlcywgc2Vjb25kcywgMCkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgb2xkVmlld01vZGUgPSB0aGlzLnZpZXdNb2RlO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dNb2RlKC0xKTtcclxuICAgICAgICAgICAgdGhpcy5maWxsKCk7XHJcbiAgICAgICAgICAgIGlmIChvbGRWaWV3TW9kZSA9PT0gdGhpcy52aWV3TW9kZSAmJiB0aGlzLmF1dG9jbG9zZSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfc2V0RGF0ZTogZnVuY3Rpb24gKGRhdGUsIHdoaWNoKSB7XHJcbiAgICAgIGlmICghd2hpY2ggfHwgd2hpY2ggPT09ICdkYXRlJylcclxuICAgICAgICB0aGlzLmRhdGUgPSBkYXRlO1xyXG4gICAgICBpZiAoIXdoaWNoIHx8IHdoaWNoID09PSAndmlldycpXHJcbiAgICAgICAgdGhpcy52aWV3RGF0ZSA9IGRhdGU7XHJcbiAgICAgIHRoaXMuZmlsbCgpO1xyXG4gICAgICB0aGlzLnNldFZhbHVlKCk7XHJcbiAgICAgIHZhciBlbGVtZW50O1xyXG4gICAgICBpZiAodGhpcy5pc0lucHV0KSB7XHJcbiAgICAgICAgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgIGVsZW1lbnQuY2hhbmdlKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5lbGVtZW50LnRyaWdnZXIoe1xyXG4gICAgICAgIHR5cGU6ICdjaGFuZ2VEYXRlJyxcclxuICAgICAgICBkYXRlOiB0aGlzLmdldERhdGUoKVxyXG4gICAgICB9KTtcclxuICAgICAgaWYoZGF0ZSA9PT0gbnVsbClcclxuICAgICAgICB0aGlzLmRhdGUgPSB0aGlzLnZpZXdEYXRlO1xyXG4gICAgfSxcclxuXHJcbiAgICBtb3ZlTWludXRlOiBmdW5jdGlvbiAoZGF0ZSwgZGlyKSB7XHJcbiAgICAgIGlmICghZGlyKSByZXR1cm4gZGF0ZTtcclxuICAgICAgdmFyIG5ld19kYXRlID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpO1xyXG4gICAgICAvL2RpciA9IGRpciA+IDAgPyAxIDogLTE7XHJcbiAgICAgIG5ld19kYXRlLnNldFVUQ01pbnV0ZXMobmV3X2RhdGUuZ2V0VVRDTWludXRlcygpICsgKGRpciAqIHRoaXMubWludXRlU3RlcCkpO1xyXG4gICAgICByZXR1cm4gbmV3X2RhdGU7XHJcbiAgICB9LFxyXG5cclxuICAgIG1vdmVIb3VyOiBmdW5jdGlvbiAoZGF0ZSwgZGlyKSB7XHJcbiAgICAgIGlmICghZGlyKSByZXR1cm4gZGF0ZTtcclxuICAgICAgdmFyIG5ld19kYXRlID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpO1xyXG4gICAgICAvL2RpciA9IGRpciA+IDAgPyAxIDogLTE7XHJcbiAgICAgIG5ld19kYXRlLnNldFVUQ0hvdXJzKG5ld19kYXRlLmdldFVUQ0hvdXJzKCkgKyBkaXIpO1xyXG4gICAgICByZXR1cm4gbmV3X2RhdGU7XHJcbiAgICB9LFxyXG5cclxuICAgIG1vdmVEYXRlOiBmdW5jdGlvbiAoZGF0ZSwgZGlyKSB7XHJcbiAgICAgIGlmICghZGlyKSByZXR1cm4gZGF0ZTtcclxuICAgICAgdmFyIG5ld19kYXRlID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpO1xyXG4gICAgICAvL2RpciA9IGRpciA+IDAgPyAxIDogLTE7XHJcbiAgICAgIG5ld19kYXRlLnNldFVUQ0RhdGUobmV3X2RhdGUuZ2V0VVRDRGF0ZSgpICsgZGlyKTtcclxuICAgICAgcmV0dXJuIG5ld19kYXRlO1xyXG4gICAgfSxcclxuXHJcbiAgICBtb3ZlTW9udGg6IGZ1bmN0aW9uIChkYXRlLCBkaXIpIHtcclxuICAgICAgaWYgKCFkaXIpIHJldHVybiBkYXRlO1xyXG4gICAgICB2YXIgbmV3X2RhdGUgPSBuZXcgRGF0ZShkYXRlLnZhbHVlT2YoKSksXHJcbiAgICAgICAgZGF5ID0gbmV3X2RhdGUuZ2V0VVRDRGF0ZSgpLFxyXG4gICAgICAgIG1vbnRoID0gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKSxcclxuICAgICAgICBtYWcgPSBNYXRoLmFicyhkaXIpLFxyXG4gICAgICAgIG5ld19tb250aCwgdGVzdDtcclxuICAgICAgZGlyID0gZGlyID4gMCA/IDEgOiAtMTtcclxuICAgICAgaWYgKG1hZyA9PT0gMSkge1xyXG4gICAgICAgIHRlc3QgPSBkaXIgPT09IC0xXHJcbiAgICAgICAgICAvLyBJZiBnb2luZyBiYWNrIG9uZSBtb250aCwgbWFrZSBzdXJlIG1vbnRoIGlzIG5vdCBjdXJyZW50IG1vbnRoXHJcbiAgICAgICAgICAvLyAoZWcsIE1hciAzMSAtPiBGZWIgMzEgPT09IEZlYiAyOCwgbm90IE1hciAwMilcclxuICAgICAgICAgID8gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgcmV0dXJuIG5ld19kYXRlLmdldFVUQ01vbnRoKCkgPT09IG1vbnRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICAgIC8vIElmIGdvaW5nIGZvcndhcmQgb25lIG1vbnRoLCBtYWtlIHN1cmUgbW9udGggaXMgYXMgZXhwZWN0ZWRcclxuICAgICAgICAgIC8vIChlZywgSmFuIDMxIC0+IEZlYiAzMSA9PT0gRmViIDI4LCBub3QgTWFyIDAyKVxyXG4gICAgICAgICAgOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICByZXR1cm4gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKSAhPT0gbmV3X21vbnRoO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbmV3X21vbnRoID0gbW9udGggKyBkaXI7XHJcbiAgICAgICAgbmV3X2RhdGUuc2V0VVRDTW9udGgobmV3X21vbnRoKTtcclxuICAgICAgICAvLyBEZWMgLT4gSmFuICgxMikgb3IgSmFuIC0+IERlYyAoLTEpIC0tIGxpbWl0IGV4cGVjdGVkIGRhdGUgdG8gMC0xMVxyXG4gICAgICAgIGlmIChuZXdfbW9udGggPCAwIHx8IG5ld19tb250aCA+IDExKVxyXG4gICAgICAgICAgbmV3X21vbnRoID0gKG5ld19tb250aCArIDEyKSAlIDEyO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZvciBtYWduaXR1ZGVzID4xLCBtb3ZlIG9uZSBtb250aCBhdCBhIHRpbWUuLi5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hZzsgaSsrKVxyXG4gICAgICAgICAgLy8gLi4ud2hpY2ggbWlnaHQgZGVjcmVhc2UgdGhlIGRheSAoZWcsIEphbiAzMSB0byBGZWIgMjgsIGV0YykuLi5cclxuICAgICAgICAgIG5ld19kYXRlID0gdGhpcy5tb3ZlTW9udGgobmV3X2RhdGUsIGRpcik7XHJcbiAgICAgICAgLy8gLi4udGhlbiByZXNldCB0aGUgZGF5LCBrZWVwaW5nIGl0IGluIHRoZSBuZXcgbW9udGhcclxuICAgICAgICBuZXdfbW9udGggPSBuZXdfZGF0ZS5nZXRVVENNb250aCgpO1xyXG4gICAgICAgIG5ld19kYXRlLnNldFVUQ0RhdGUoZGF5KTtcclxuICAgICAgICB0ZXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgcmV0dXJuIG5ld19tb250aCAhPT0gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIC8vIENvbW1vbiBkYXRlLXJlc2V0dGluZyBsb29wIC0tIGlmIGRhdGUgaXMgYmV5b25kIGVuZCBvZiBtb250aCwgbWFrZSBpdFxyXG4gICAgICAvLyBlbmQgb2YgbW9udGhcclxuICAgICAgd2hpbGUgKHRlc3QoKSkge1xyXG4gICAgICAgIG5ld19kYXRlLnNldFVUQ0RhdGUoLS1kYXkpO1xyXG4gICAgICAgIG5ld19kYXRlLnNldFVUQ01vbnRoKG5ld19tb250aCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG5ld19kYXRlO1xyXG4gICAgfSxcclxuXHJcbiAgICBtb3ZlWWVhcjogZnVuY3Rpb24gKGRhdGUsIGRpcikge1xyXG4gICAgICByZXR1cm4gdGhpcy5tb3ZlTW9udGgoZGF0ZSwgZGlyICogMTIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBkYXRlV2l0aGluUmFuZ2U6IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgIHJldHVybiBkYXRlID49IHRoaXMuc3RhcnREYXRlICYmIGRhdGUgPD0gdGhpcy5lbmREYXRlO1xyXG4gICAgfSxcclxuXHJcbiAgICBrZXlkb3duOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBpZiAodGhpcy5waWNrZXIuaXMoJzpub3QoOnZpc2libGUpJykpIHtcclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAyNykgLy8gYWxsb3cgZXNjYXBlIHRvIGhpZGUgYW5kIHJlLXNob3cgcGlja2VyXHJcbiAgICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGRhdGVDaGFuZ2VkID0gZmFsc2UsXHJcbiAgICAgICAgZGlyLCBuZXdEYXRlLCBuZXdWaWV3RGF0ZTtcclxuICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcclxuICAgICAgICBjYXNlIDI3OiAvLyBlc2NhcGVcclxuICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAzNzogLy8gbGVmdFxyXG4gICAgICAgIGNhc2UgMzk6IC8vIHJpZ2h0XHJcbiAgICAgICAgICBpZiAoIXRoaXMua2V5Ym9hcmROYXZpZ2F0aW9uKSBicmVhaztcclxuICAgICAgICAgIGRpciA9IGUua2V5Q29kZSA9PT0gMzcgPyAtMSA6IDE7XHJcbiAgICAgICAgICB2YXIgdmlld01vZGUgPSB0aGlzLnZpZXdNb2RlO1xyXG4gICAgICAgICAgaWYgKGUuY3RybEtleSkge1xyXG4gICAgICAgICAgICB2aWV3TW9kZSArPSAyO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChlLnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgIHZpZXdNb2RlICs9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAodmlld01vZGUgPT09IDQpIHtcclxuICAgICAgICAgICAgbmV3RGF0ZSA9IHRoaXMubW92ZVllYXIodGhpcy5kYXRlLCBkaXIpO1xyXG4gICAgICAgICAgICBuZXdWaWV3RGF0ZSA9IHRoaXMubW92ZVllYXIodGhpcy52aWV3RGF0ZSwgZGlyKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAodmlld01vZGUgPT09IDMpIHtcclxuICAgICAgICAgICAgbmV3RGF0ZSA9IHRoaXMubW92ZU1vbnRoKHRoaXMuZGF0ZSwgZGlyKTtcclxuICAgICAgICAgICAgbmV3Vmlld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLnZpZXdEYXRlLCBkaXIpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh2aWV3TW9kZSA9PT0gMikge1xyXG4gICAgICAgICAgICBuZXdEYXRlID0gdGhpcy5tb3ZlRGF0ZSh0aGlzLmRhdGUsIGRpcik7XHJcbiAgICAgICAgICAgIG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlRGF0ZSh0aGlzLnZpZXdEYXRlLCBkaXIpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh2aWV3TW9kZSA9PT0gMSkge1xyXG4gICAgICAgICAgICBuZXdEYXRlID0gdGhpcy5tb3ZlSG91cih0aGlzLmRhdGUsIGRpcik7XHJcbiAgICAgICAgICAgIG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlSG91cih0aGlzLnZpZXdEYXRlLCBkaXIpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh2aWV3TW9kZSA9PT0gMCkge1xyXG4gICAgICAgICAgICBuZXdEYXRlID0gdGhpcy5tb3ZlTWludXRlKHRoaXMuZGF0ZSwgZGlyKTtcclxuICAgICAgICAgICAgbmV3Vmlld0RhdGUgPSB0aGlzLm1vdmVNaW51dGUodGhpcy52aWV3RGF0ZSwgZGlyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh0aGlzLmRhdGVXaXRoaW5SYW5nZShuZXdEYXRlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXdEYXRlO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdEYXRlID0gbmV3Vmlld0RhdGU7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBkYXRlQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDM4OiAvLyB1cFxyXG4gICAgICAgIGNhc2UgNDA6IC8vIGRvd25cclxuICAgICAgICAgIGlmICghdGhpcy5rZXlib2FyZE5hdmlnYXRpb24pIGJyZWFrO1xyXG4gICAgICAgICAgZGlyID0gZS5rZXlDb2RlID09PSAzOCA/IC0xIDogMTtcclxuICAgICAgICAgIHZpZXdNb2RlID0gdGhpcy52aWV3TW9kZTtcclxuICAgICAgICAgIGlmIChlLmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgdmlld01vZGUgKz0gMjtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICB2aWV3TW9kZSArPSAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHZpZXdNb2RlID09PSA0KSB7XHJcbiAgICAgICAgICAgIG5ld0RhdGUgPSB0aGlzLm1vdmVZZWFyKHRoaXMuZGF0ZSwgZGlyKTtcclxuICAgICAgICAgICAgbmV3Vmlld0RhdGUgPSB0aGlzLm1vdmVZZWFyKHRoaXMudmlld0RhdGUsIGRpcik7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHZpZXdNb2RlID09PSAzKSB7XHJcbiAgICAgICAgICAgIG5ld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLmRhdGUsIGRpcik7XHJcbiAgICAgICAgICAgIG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlTW9udGgodGhpcy52aWV3RGF0ZSwgZGlyKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAodmlld01vZGUgPT09IDIpIHtcclxuICAgICAgICAgICAgbmV3RGF0ZSA9IHRoaXMubW92ZURhdGUodGhpcy5kYXRlLCBkaXIgKiA3KTtcclxuICAgICAgICAgICAgbmV3Vmlld0RhdGUgPSB0aGlzLm1vdmVEYXRlKHRoaXMudmlld0RhdGUsIGRpciAqIDcpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh2aWV3TW9kZSA9PT0gMSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaG93TWVyaWRpYW4pIHtcclxuICAgICAgICAgICAgICBuZXdEYXRlID0gdGhpcy5tb3ZlSG91cih0aGlzLmRhdGUsIGRpciAqIDYpO1xyXG4gICAgICAgICAgICAgIG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlSG91cih0aGlzLnZpZXdEYXRlLCBkaXIgKiA2KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBuZXdEYXRlID0gdGhpcy5tb3ZlSG91cih0aGlzLmRhdGUsIGRpciAqIDQpO1xyXG4gICAgICAgICAgICAgIG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlSG91cih0aGlzLnZpZXdEYXRlLCBkaXIgKiA0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmICh2aWV3TW9kZSA9PT0gMCkge1xyXG4gICAgICAgICAgICBuZXdEYXRlID0gdGhpcy5tb3ZlTWludXRlKHRoaXMuZGF0ZSwgZGlyICogNCk7XHJcbiAgICAgICAgICAgIG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlTWludXRlKHRoaXMudmlld0RhdGUsIGRpciAqIDQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHRoaXMuZGF0ZVdpdGhpblJhbmdlKG5ld0RhdGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ld0RhdGU7XHJcbiAgICAgICAgICAgIHRoaXMudmlld0RhdGUgPSBuZXdWaWV3RGF0ZTtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGRhdGVDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTM6IC8vIGVudGVyXHJcbiAgICAgICAgICBpZiAodGhpcy52aWV3TW9kZSAhPT0gMCkge1xyXG4gICAgICAgICAgICB2YXIgb2xkVmlld01vZGUgPSB0aGlzLnZpZXdNb2RlO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dNb2RlKC0xKTtcclxuICAgICAgICAgICAgdGhpcy5maWxsKCk7XHJcbiAgICAgICAgICAgIGlmIChvbGRWaWV3TW9kZSA9PT0gdGhpcy52aWV3TW9kZSAmJiB0aGlzLmF1dG9jbG9zZSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZpbGwoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXV0b2Nsb3NlKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgOTogLy8gdGFiXHJcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChkYXRlQ2hhbmdlZCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50O1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5wdXQpIHtcclxuICAgICAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgZWxlbWVudCA9IHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgZWxlbWVudC5jaGFuZ2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnRyaWdnZXIoe1xyXG4gICAgICAgICAgdHlwZTogJ2NoYW5nZURhdGUnLFxyXG4gICAgICAgICAgZGF0ZTogdGhpcy5nZXREYXRlKClcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBzaG93TW9kZTogZnVuY3Rpb24gKGRpcikge1xyXG4gICAgICBpZiAoZGlyKSB7XHJcbiAgICAgICAgdmFyIG5ld1ZpZXdNb2RlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oRFBHbG9iYWwubW9kZXMubGVuZ3RoIC0gMSwgdGhpcy52aWV3TW9kZSArIGRpcikpO1xyXG4gICAgICAgIGlmIChuZXdWaWV3TW9kZSA+PSB0aGlzLm1pblZpZXcgJiYgbmV3Vmlld01vZGUgPD0gdGhpcy5tYXhWaWV3KSB7XHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcih7XHJcbiAgICAgICAgICAgIHR5cGU6ICAgICAgICAnY2hhbmdlTW9kZScsXHJcbiAgICAgICAgICAgIGRhdGU6ICAgICAgICB0aGlzLnZpZXdEYXRlLFxyXG4gICAgICAgICAgICBvbGRWaWV3TW9kZTogdGhpcy52aWV3TW9kZSxcclxuICAgICAgICAgICAgbmV3Vmlld01vZGU6IG5ld1ZpZXdNb2RlXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB0aGlzLnZpZXdNb2RlID0gbmV3Vmlld01vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8qXHJcbiAgICAgICB2aXRhbGV0czogZml4aW5nIGJ1ZyBvZiB2ZXJ5IHNwZWNpYWwgY29uZGl0aW9uczpcclxuICAgICAgIGpxdWVyeSAxLjcuMSArIHdlYmtpdCArIHNob3cgaW5saW5lIGRhdGV0aW1lcGlja2VyIGluIGJvb3RzdHJhcCBwb3BvdmVyLlxyXG4gICAgICAgTWV0aG9kIHNob3coKSBkb2VzIG5vdCBzZXQgZGlzcGxheSBjc3MgY29ycmVjdGx5IGFuZCBkYXRldGltZXBpY2tlciBpcyBub3Qgc2hvd24uXHJcbiAgICAgICBDaGFuZ2VkIHRvIC5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKSBzb2x2ZSB0aGUgcHJvYmxlbS5cclxuICAgICAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdml0YWxldHMveC1lZGl0YWJsZS9pc3N1ZXMvMzdcclxuXHJcbiAgICAgICBJbiBqcXVlcnkgMS43LjIrIGV2ZXJ5dGhpbmcgd29ya3MgZmluZS5cclxuICAgICAgICovXHJcbiAgICAgIC8vdGhpcy5waWNrZXIuZmluZCgnPmRpdicpLmhpZGUoKS5maWx0ZXIoJy5kYXRldGltZXBpY2tlci0nK0RQR2xvYmFsLm1vZGVzW3RoaXMudmlld01vZGVdLmNsc05hbWUpLnNob3coKTtcclxuICAgICAgdGhpcy5waWNrZXIuZmluZCgnPmRpdicpLmhpZGUoKS5maWx0ZXIoJy5kYXRldGltZXBpY2tlci0nICsgRFBHbG9iYWwubW9kZXNbdGhpcy52aWV3TW9kZV0uY2xzTmFtZSkuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbiAgICAgIHRoaXMudXBkYXRlTmF2QXJyb3dzKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRoaXMuX3NldERhdGUobnVsbCwgJ2RhdGUnKTtcclxuICAgIH0sXHJcblxyXG4gICAgY29udmVydFZpZXdNb2RlVGV4dDogIGZ1bmN0aW9uICh2aWV3TW9kZSkge1xyXG4gICAgICBzd2l0Y2ggKHZpZXdNb2RlKSB7XHJcbiAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgcmV0dXJuICdkZWNhZGUnO1xyXG4gICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgIHJldHVybiAneWVhcic7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgcmV0dXJuICdtb250aCc7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgcmV0dXJuICdkYXknO1xyXG4gICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgIHJldHVybiAnaG91cic7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgb2xkID0gJC5mbi5kYXRldGltZXBpY2tlcjtcclxuICAkLmZuLmRhdGV0aW1lcGlja2VyID0gZnVuY3Rpb24gKG9wdGlvbikge1xyXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG4gICAgYXJncy5zaGlmdCgpO1xyXG4gICAgdmFyIGludGVybmFsX3JldHVybjtcclxuICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXHJcbiAgICAgICAgZGF0YSA9ICR0aGlzLmRhdGEoJ2RhdGV0aW1lcGlja2VyJyksXHJcbiAgICAgICAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT09ICdvYmplY3QnICYmIG9wdGlvbjtcclxuICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgJHRoaXMuZGF0YSgnZGF0ZXRpbWVwaWNrZXInLCAoZGF0YSA9IG5ldyBEYXRldGltZXBpY2tlcih0aGlzLCAkLmV4dGVuZCh7fSwgJC5mbi5kYXRldGltZXBpY2tlci5kZWZhdWx0cywgb3B0aW9ucykpKSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnICYmIHR5cGVvZiBkYXRhW29wdGlvbl0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBpbnRlcm5hbF9yZXR1cm4gPSBkYXRhW29wdGlvbl0uYXBwbHkoZGF0YSwgYXJncyk7XHJcbiAgICAgICAgaWYgKGludGVybmFsX3JldHVybiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmIChpbnRlcm5hbF9yZXR1cm4gIT09IHVuZGVmaW5lZClcclxuICAgICAgcmV0dXJuIGludGVybmFsX3JldHVybjtcclxuICAgIGVsc2VcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgJC5mbi5kYXRldGltZXBpY2tlci5kZWZhdWx0cyA9IHtcclxuICB9O1xyXG4gICQuZm4uZGF0ZXRpbWVwaWNrZXIuQ29uc3RydWN0b3IgPSBEYXRldGltZXBpY2tlcjtcclxuICB2YXIgZGF0ZXMgPSAkLmZuLmRhdGV0aW1lcGlja2VyLmRhdGVzID0ge1xyXG4gICAgZW46IHtcclxuICAgICAgZGF5czogICAgICAgIFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknLCAnU3VuZGF5J10sXHJcbiAgICAgIGRheXNTaG9ydDogICBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCcsICdTdW4nXSxcclxuICAgICAgZGF5c01pbjogICAgIFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnLCAnU3UnXSxcclxuICAgICAgbW9udGhzOiAgICAgIFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddLFxyXG4gICAgICBtb250aHNTaG9ydDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxyXG4gICAgICBtZXJpZGllbTogICAgWydhbScsICdwbSddLFxyXG4gICAgICBzdWZmaXg6ICAgICAgWydzdCcsICduZCcsICdyZCcsICd0aCddLFxyXG4gICAgICB0b2RheTogICAgICAgJ1RvZGF5JyxcclxuICAgICAgY2xlYXI6ICAgICAgICdDbGVhcidcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgRFBHbG9iYWwgPSB7XHJcbiAgICBtb2RlczogICAgICAgICAgICBbXHJcbiAgICAgIHtcclxuICAgICAgICBjbHNOYW1lOiAnbWludXRlcycsXHJcbiAgICAgICAgbmF2Rm5jOiAgJ0hvdXJzJyxcclxuICAgICAgICBuYXZTdGVwOiAxXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBjbHNOYW1lOiAnaG91cnMnLFxyXG4gICAgICAgIG5hdkZuYzogICdEYXRlJyxcclxuICAgICAgICBuYXZTdGVwOiAxXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBjbHNOYW1lOiAnZGF5cycsXHJcbiAgICAgICAgbmF2Rm5jOiAgJ01vbnRoJyxcclxuICAgICAgICBuYXZTdGVwOiAxXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBjbHNOYW1lOiAnbW9udGhzJyxcclxuICAgICAgICBuYXZGbmM6ICAnRnVsbFllYXInLFxyXG4gICAgICAgIG5hdlN0ZXA6IDFcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGNsc05hbWU6ICd5ZWFycycsXHJcbiAgICAgICAgbmF2Rm5jOiAgJ0Z1bGxZZWFyJyxcclxuICAgICAgICBuYXZTdGVwOiAxMFxyXG4gICAgICB9XHJcbiAgICBdLFxyXG4gICAgaXNMZWFwWWVhcjogICAgICAgZnVuY3Rpb24gKHllYXIpIHtcclxuICAgICAgcmV0dXJuICgoKHllYXIgJSA0ID09PSAwKSAmJiAoeWVhciAlIDEwMCAhPT0gMCkpIHx8ICh5ZWFyICUgNDAwID09PSAwKSlcclxuICAgIH0sXHJcbiAgICBnZXREYXlzSW5Nb250aDogICBmdW5jdGlvbiAoeWVhciwgbW9udGgpIHtcclxuICAgICAgcmV0dXJuIFszMSwgKERQR2xvYmFsLmlzTGVhcFllYXIoeWVhcikgPyAyOSA6IDI4KSwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdW21vbnRoXVxyXG4gICAgfSxcclxuICAgIGdldERlZmF1bHRGb3JtYXQ6IGZ1bmN0aW9uICh0eXBlLCBmaWVsZCkge1xyXG4gICAgICBpZiAodHlwZSA9PT0gJ3N0YW5kYXJkJykge1xyXG4gICAgICAgIGlmIChmaWVsZCA9PT0gJ2lucHV0JylcclxuICAgICAgICAgIHJldHVybiAneXl5eS1tbS1kZCBoaDppaSc7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgcmV0dXJuICd5eXl5LW1tLWRkIGhoOmlpOnNzJztcclxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncGhwJykge1xyXG4gICAgICAgIGlmIChmaWVsZCA9PT0gJ2lucHV0JylcclxuICAgICAgICAgIHJldHVybiAnWS1tLWQgSDppJztcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICByZXR1cm4gJ1ktbS1kIEg6aTpzJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZm9ybWF0IHR5cGUuJyk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB2YWxpZFBhcnRzOiBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICBpZiAodHlwZSA9PT0gJ3N0YW5kYXJkJykge1xyXG4gICAgICAgIHJldHVybiAvdHxoaD98SEg/fHB8UHx6fFp8aWk/fHNzP3xkZD98REQ/fG1tP3xNTT98eXkoPzp5eSk/L2c7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3BocCcpIHtcclxuICAgICAgICByZXR1cm4gL1tkRGpsTnd6Rm1NblN0eVlhQUJnR2hIaXNdL2c7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZvcm1hdCB0eXBlLicpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgbm9ucHVuY3R1YXRpb246IC9bXiAtXFwvOi1AXFxbLWB7LX5cXHRcXG5cXHJUWl0rL2csXHJcbiAgICBwYXJzZUZvcm1hdDogZnVuY3Rpb24gKGZvcm1hdCwgdHlwZSkge1xyXG4gICAgICAvLyBJRSB0cmVhdHMgXFwwIGFzIGEgc3RyaW5nIGVuZCBpbiBpbnB1dHMgKHRydW5jYXRpbmcgdGhlIHZhbHVlKSxcclxuICAgICAgLy8gc28gaXQncyBhIGJhZCBmb3JtYXQgZGVsaW1pdGVyLCBhbnl3YXlcclxuICAgICAgdmFyIHNlcGFyYXRvcnMgPSBmb3JtYXQucmVwbGFjZSh0aGlzLnZhbGlkUGFydHModHlwZSksICdcXDAnKS5zcGxpdCgnXFwwJyksXHJcbiAgICAgICAgcGFydHMgPSBmb3JtYXQubWF0Y2godGhpcy52YWxpZFBhcnRzKHR5cGUpKTtcclxuICAgICAgaWYgKCFzZXBhcmF0b3JzIHx8ICFzZXBhcmF0b3JzLmxlbmd0aCB8fCAhcGFydHMgfHwgcGFydHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRhdGUgZm9ybWF0LicpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB7c2VwYXJhdG9yczogc2VwYXJhdG9ycywgcGFydHM6IHBhcnRzfTtcclxuICAgIH0sXHJcbiAgICBwYXJzZURhdGU6IGZ1bmN0aW9uIChkYXRlLCBmb3JtYXQsIGxhbmd1YWdlLCB0eXBlLCB0aW1lem9uZSkge1xyXG4gICAgICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICB2YXIgZGF0ZVVUQyA9IG5ldyBEYXRlKGRhdGUudmFsdWVPZigpIC0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAwMDApO1xyXG4gICAgICAgIGRhdGVVVEMuc2V0TWlsbGlzZWNvbmRzKDApO1xyXG4gICAgICAgIHJldHVybiBkYXRlVVRDO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgvXlxcZHs0fVxcLVxcZHsxLDJ9XFwtXFxkezEsMn0kLy50ZXN0KGRhdGUpKSB7XHJcbiAgICAgICAgZm9ybWF0ID0gdGhpcy5wYXJzZUZvcm1hdCgneXl5eS1tbS1kZCcsIHR5cGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgvXlxcZHs0fVxcLVxcZHsxLDJ9XFwtXFxkezEsMn1bVCBdXFxkezEsMn1cXDpcXGR7MSwyfSQvLnRlc3QoZGF0ZSkpIHtcclxuICAgICAgICBmb3JtYXQgPSB0aGlzLnBhcnNlRm9ybWF0KCd5eXl5LW1tLWRkIGhoOmlpJywgdHlwZSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKC9eXFxkezR9XFwtXFxkezEsMn1cXC1cXGR7MSwyfVtUIF1cXGR7MSwyfVxcOlxcZHsxLDJ9XFw6XFxkezEsMn1bWl17MCwxfSQvLnRlc3QoZGF0ZSkpIHtcclxuICAgICAgICBmb3JtYXQgPSB0aGlzLnBhcnNlRm9ybWF0KCd5eXl5LW1tLWRkIGhoOmlpOnNzJywgdHlwZSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKC9eWy0rXVxcZCtbZG13eV0oW1xccyxdK1stK11cXGQrW2Rtd3ldKSokLy50ZXN0KGRhdGUpKSB7XHJcbiAgICAgICAgdmFyIHBhcnRfcmUgPSAvKFstK11cXGQrKShbZG13eV0pLyxcclxuICAgICAgICAgIHBhcnRzID0gZGF0ZS5tYXRjaCgvKFstK11cXGQrKShbZG13eV0pL2cpLFxyXG4gICAgICAgICAgcGFydCwgZGlyO1xyXG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIHBhcnQgPSBwYXJ0X3JlLmV4ZWMocGFydHNbaV0pO1xyXG4gICAgICAgICAgZGlyID0gcGFyc2VJbnQocGFydFsxXSk7XHJcbiAgICAgICAgICBzd2l0Y2ggKHBhcnRbMl0pIHtcclxuICAgICAgICAgICAgY2FzZSAnZCc6XHJcbiAgICAgICAgICAgICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgZGlyKTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbSc6XHJcbiAgICAgICAgICAgICAgZGF0ZSA9IERhdGV0aW1lcGlja2VyLnByb3RvdHlwZS5tb3ZlTW9udGguY2FsbChEYXRldGltZXBpY2tlci5wcm90b3R5cGUsIGRhdGUsIGRpcik7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3cnOlxyXG4gICAgICAgICAgICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpciAqIDcpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd5JzpcclxuICAgICAgICAgICAgICBkYXRlID0gRGF0ZXRpbWVwaWNrZXIucHJvdG90eXBlLm1vdmVZZWFyLmNhbGwoRGF0ZXRpbWVwaWNrZXIucHJvdG90eXBlLCBkYXRlLCBkaXIpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gVVRDRGF0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRhdGUuZ2V0VVRDTW9udGgoKSwgZGF0ZS5nZXRVVENEYXRlKCksIGRhdGUuZ2V0VVRDSG91cnMoKSwgZGF0ZS5nZXRVVENNaW51dGVzKCksIGRhdGUuZ2V0VVRDU2Vjb25kcygpLCAwKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgcGFydHMgPSBkYXRlICYmIGRhdGUudG9TdHJpbmcoKS5tYXRjaCh0aGlzLm5vbnB1bmN0dWF0aW9uKSB8fCBbXSxcclxuICAgICAgICBkYXRlID0gbmV3IERhdGUoMCwgMCwgMCwgMCwgMCwgMCwgMCksXHJcbiAgICAgICAgcGFyc2VkID0ge30sXHJcbiAgICAgICAgc2V0dGVyc19vcmRlciA9IFsnaGgnLCAnaCcsICdpaScsICdpJywgJ3NzJywgJ3MnLCAneXl5eScsICd5eScsICdNJywgJ01NJywgJ20nLCAnbW0nLCAnRCcsICdERCcsICdkJywgJ2RkJywgJ0gnLCAnSEgnLCAncCcsICdQJywgJ3onLCAnWiddLFxyXG4gICAgICAgIHNldHRlcnNfbWFwID0ge1xyXG4gICAgICAgICAgaGg6ICAgZnVuY3Rpb24gKGQsIHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQuc2V0VVRDSG91cnModik7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgaDogICAgZnVuY3Rpb24gKGQsIHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQuc2V0VVRDSG91cnModik7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgSEg6ICAgZnVuY3Rpb24gKGQsIHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQuc2V0VVRDSG91cnModiA9PT0gMTIgPyAwIDogdik7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgSDogICAgZnVuY3Rpb24gKGQsIHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQuc2V0VVRDSG91cnModiA9PT0gMTIgPyAwIDogdik7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgaWk6ICAgZnVuY3Rpb24gKGQsIHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQuc2V0VVRDTWludXRlcyh2KTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBpOiAgICBmdW5jdGlvbiAoZCwgdikge1xyXG4gICAgICAgICAgICByZXR1cm4gZC5zZXRVVENNaW51dGVzKHYpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHNzOiAgIGZ1bmN0aW9uIChkLCB2KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkLnNldFVUQ1NlY29uZHModik7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgczogICAgZnVuY3Rpb24gKGQsIHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQuc2V0VVRDU2Vjb25kcyh2KTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB5eXl5OiBmdW5jdGlvbiAoZCwgdikge1xyXG4gICAgICAgICAgICByZXR1cm4gZC5zZXRVVENGdWxsWWVhcih2KTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB5eTogICBmdW5jdGlvbiAoZCwgdikge1xyXG4gICAgICAgICAgICByZXR1cm4gZC5zZXRVVENGdWxsWWVhcigyMDAwICsgdik7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgbTogICAgZnVuY3Rpb24gKGQsIHYpIHtcclxuICAgICAgICAgICAgdiAtPSAxO1xyXG4gICAgICAgICAgICB3aGlsZSAodiA8IDApIHYgKz0gMTI7XHJcbiAgICAgICAgICAgIHYgJT0gMTI7XHJcbiAgICAgICAgICAgIGQuc2V0VVRDTW9udGgodik7XHJcbiAgICAgICAgICAgIHdoaWxlIChkLmdldFVUQ01vbnRoKCkgIT09IHYpXHJcbiAgICAgICAgICAgICAgaWYgKGlzTmFOKGQuZ2V0VVRDTW9udGgoKSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcclxuICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBkLnNldFVUQ0RhdGUoZC5nZXRVVENEYXRlKCkgLSAxKTtcclxuICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZDogICAgZnVuY3Rpb24gKGQsIHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQuc2V0VVRDRGF0ZSh2KTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBwOiAgICBmdW5jdGlvbiAoZCwgdikge1xyXG4gICAgICAgICAgICByZXR1cm4gZC5zZXRVVENIb3Vycyh2ID09PSAxID8gZC5nZXRVVENIb3VycygpICsgMTIgOiBkLmdldFVUQ0hvdXJzKCkpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHo6ICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRpbWV6b25lXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2YWwsIGZpbHRlcmVkLCBwYXJ0O1xyXG4gICAgICBzZXR0ZXJzX21hcFsnTSddID0gc2V0dGVyc19tYXBbJ01NJ10gPSBzZXR0ZXJzX21hcFsnbW0nXSA9IHNldHRlcnNfbWFwWydtJ107XHJcbiAgICAgIHNldHRlcnNfbWFwWydkZCddID0gc2V0dGVyc19tYXBbJ2QnXTtcclxuICAgICAgc2V0dGVyc19tYXBbJ1AnXSA9IHNldHRlcnNfbWFwWydwJ107XHJcbiAgICAgIHNldHRlcnNfbWFwWydaJ10gPSBzZXR0ZXJzX21hcFsneiddO1xyXG4gICAgICBkYXRlID0gVVRDRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpKTtcclxuICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gZm9ybWF0LnBhcnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBjbnQgPSBmb3JtYXQucGFydHMubGVuZ3RoOyBpIDwgY250OyBpKyspIHtcclxuICAgICAgICAgIHZhbCA9IHBhcnNlSW50KHBhcnRzW2ldLCAxMCk7XHJcbiAgICAgICAgICBwYXJ0ID0gZm9ybWF0LnBhcnRzW2ldO1xyXG4gICAgICAgICAgaWYgKGlzTmFOKHZhbCkpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChwYXJ0KSB7XHJcbiAgICAgICAgICAgICAgY2FzZSAnTU0nOlxyXG4gICAgICAgICAgICAgICAgZmlsdGVyZWQgPSAkKGRhdGVzW2xhbmd1YWdlXS5tb250aHMpLmZpbHRlcihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhciBtID0gdGhpcy5zbGljZSgwLCBwYXJ0c1tpXS5sZW5ndGgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHAgPSBwYXJ0c1tpXS5zbGljZSgwLCBtLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBtID09PSBwO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YWwgPSAkLmluQXJyYXkoZmlsdGVyZWRbMF0sIGRhdGVzW2xhbmd1YWdlXS5tb250aHMpICsgMTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgJ00nOlxyXG4gICAgICAgICAgICAgICAgZmlsdGVyZWQgPSAkKGRhdGVzW2xhbmd1YWdlXS5tb250aHNTaG9ydCkuZmlsdGVyKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgdmFyIG0gPSB0aGlzLnNsaWNlKDAsIHBhcnRzW2ldLmxlbmd0aCksXHJcbiAgICAgICAgICAgICAgICAgICAgcCA9IHBhcnRzW2ldLnNsaWNlKDAsIG0ubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG0udG9Mb3dlckNhc2UoKSA9PT0gcC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YWwgPSAkLmluQXJyYXkoZmlsdGVyZWRbMF0sIGRhdGVzW2xhbmd1YWdlXS5tb250aHNTaG9ydCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAncCc6XHJcbiAgICAgICAgICAgICAgY2FzZSAnUCc6XHJcbiAgICAgICAgICAgICAgICB2YWwgPSAkLmluQXJyYXkocGFydHNbaV0udG9Mb3dlckNhc2UoKSwgZGF0ZXNbbGFuZ3VhZ2VdLm1lcmlkaWVtKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgJ3onOlxyXG4gICAgICAgICAgICAgIGNhc2UgJ1onOlxyXG4gICAgICAgICAgICAgICAgdGltZXpvbmU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHBhcnNlZFtwYXJ0XSA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHM7IGkgPCBzZXR0ZXJzX29yZGVyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBzID0gc2V0dGVyc19vcmRlcltpXTtcclxuICAgICAgICAgIGlmIChzIGluIHBhcnNlZCAmJiAhaXNOYU4ocGFyc2VkW3NdKSlcclxuICAgICAgICAgICAgc2V0dGVyc19tYXBbc10oZGF0ZSwgcGFyc2VkW3NdKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZGF0ZTtcclxuICAgIH0sXHJcbiAgICBmb3JtYXREYXRlOiAgICAgICBmdW5jdGlvbiAoZGF0ZSwgZm9ybWF0LCBsYW5ndWFnZSwgdHlwZSwgdGltZXpvbmUpIHtcclxuICAgICAgaWYgKGRhdGUgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIHZhbDtcclxuICAgICAgaWYgKHR5cGUgPT09ICdzdGFuZGFyZCcpIHtcclxuICAgICAgICB2YWwgPSB7XHJcbiAgICAgICAgICB0OiAgICBkYXRlLmdldFRpbWUoKSxcclxuICAgICAgICAgIC8vIHllYXJcclxuICAgICAgICAgIHl5OiAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcclxuICAgICAgICAgIHl5eXk6IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcclxuICAgICAgICAgIC8vIG1vbnRoXHJcbiAgICAgICAgICBtOiAgICBkYXRlLmdldFVUQ01vbnRoKCkgKyAxLFxyXG4gICAgICAgICAgTTogICAgZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRoc1Nob3J0W2RhdGUuZ2V0VVRDTW9udGgoKV0sXHJcbiAgICAgICAgICBNTTogICBkYXRlc1tsYW5ndWFnZV0ubW9udGhzW2RhdGUuZ2V0VVRDTW9udGgoKV0sXHJcbiAgICAgICAgICAvLyBkYXlcclxuICAgICAgICAgIGQ6ICAgIGRhdGUuZ2V0VVRDRGF0ZSgpLFxyXG4gICAgICAgICAgRDogICAgZGF0ZXNbbGFuZ3VhZ2VdLmRheXNTaG9ydFtkYXRlLmdldFVUQ0RheSgpXSxcclxuICAgICAgICAgIEREOiAgIGRhdGVzW2xhbmd1YWdlXS5kYXlzW2RhdGUuZ2V0VVRDRGF5KCldLFxyXG4gICAgICAgICAgcDogICAgKGRhdGVzW2xhbmd1YWdlXS5tZXJpZGllbS5sZW5ndGggPT09IDIgPyBkYXRlc1tsYW5ndWFnZV0ubWVyaWRpZW1bZGF0ZS5nZXRVVENIb3VycygpIDwgMTIgPyAwIDogMV0gOiAnJyksXHJcbiAgICAgICAgICAvLyBob3VyXHJcbiAgICAgICAgICBoOiAgICBkYXRlLmdldFVUQ0hvdXJzKCksXHJcbiAgICAgICAgICAvLyBtaW51dGVcclxuICAgICAgICAgIGk6ICAgIGRhdGUuZ2V0VVRDTWludXRlcygpLFxyXG4gICAgICAgICAgLy8gc2Vjb25kXHJcbiAgICAgICAgICBzOiAgICBkYXRlLmdldFVUQ1NlY29uZHMoKSxcclxuICAgICAgICAgIC8vIHRpbWV6b25lXHJcbiAgICAgICAgICB6OiAgICB0aW1lem9uZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmIChkYXRlc1tsYW5ndWFnZV0ubWVyaWRpZW0ubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICB2YWwuSCA9ICh2YWwuaCAlIDEyID09PSAwID8gMTIgOiB2YWwuaCAlIDEyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB2YWwuSCA9IHZhbC5oO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWwuSEggPSAodmFsLkggPCAxMCA/ICcwJyA6ICcnKSArIHZhbC5IO1xyXG4gICAgICAgIHZhbC5QID0gdmFsLnAudG9VcHBlckNhc2UoKTtcclxuICAgICAgICB2YWwuWiA9IHZhbC56O1xyXG4gICAgICAgIHZhbC5oaCA9ICh2YWwuaCA8IDEwID8gJzAnIDogJycpICsgdmFsLmg7XHJcbiAgICAgICAgdmFsLmlpID0gKHZhbC5pIDwgMTAgPyAnMCcgOiAnJykgKyB2YWwuaTtcclxuICAgICAgICB2YWwuc3MgPSAodmFsLnMgPCAxMCA/ICcwJyA6ICcnKSArIHZhbC5zO1xyXG4gICAgICAgIHZhbC5kZCA9ICh2YWwuZCA8IDEwID8gJzAnIDogJycpICsgdmFsLmQ7XHJcbiAgICAgICAgdmFsLm1tID0gKHZhbC5tIDwgMTAgPyAnMCcgOiAnJykgKyB2YWwubTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncGhwJykge1xyXG4gICAgICAgIC8vIHBocCBmb3JtYXRcclxuICAgICAgICB2YWwgPSB7XHJcbiAgICAgICAgICAvLyB5ZWFyXHJcbiAgICAgICAgICB5OiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXHJcbiAgICAgICAgICBZOiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCksXHJcbiAgICAgICAgICAvLyBtb250aFxyXG4gICAgICAgICAgRjogZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRoc1tkYXRlLmdldFVUQ01vbnRoKCldLFxyXG4gICAgICAgICAgTTogZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRoc1Nob3J0W2RhdGUuZ2V0VVRDTW9udGgoKV0sXHJcbiAgICAgICAgICBuOiBkYXRlLmdldFVUQ01vbnRoKCkgKyAxLFxyXG4gICAgICAgICAgdDogRFBHbG9iYWwuZ2V0RGF5c0luTW9udGgoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldFVUQ01vbnRoKCkpLFxyXG4gICAgICAgICAgLy8gZGF5XHJcbiAgICAgICAgICBqOiBkYXRlLmdldFVUQ0RhdGUoKSxcclxuICAgICAgICAgIGw6IGRhdGVzW2xhbmd1YWdlXS5kYXlzW2RhdGUuZ2V0VVRDRGF5KCldLFxyXG4gICAgICAgICAgRDogZGF0ZXNbbGFuZ3VhZ2VdLmRheXNTaG9ydFtkYXRlLmdldFVUQ0RheSgpXSxcclxuICAgICAgICAgIHc6IGRhdGUuZ2V0VVRDRGF5KCksIC8vIDAgLT4gNlxyXG4gICAgICAgICAgTjogKGRhdGUuZ2V0VVRDRGF5KCkgPT09IDAgPyA3IDogZGF0ZS5nZXRVVENEYXkoKSksICAgICAgIC8vIDEgLT4gN1xyXG4gICAgICAgICAgUzogKGRhdGUuZ2V0VVRDRGF0ZSgpICUgMTAgPD0gZGF0ZXNbbGFuZ3VhZ2VdLnN1ZmZpeC5sZW5ndGggPyBkYXRlc1tsYW5ndWFnZV0uc3VmZml4W2RhdGUuZ2V0VVRDRGF0ZSgpICUgMTAgLSAxXSA6ICcnKSxcclxuICAgICAgICAgIC8vIGhvdXJcclxuICAgICAgICAgIGE6IChkYXRlc1tsYW5ndWFnZV0ubWVyaWRpZW0ubGVuZ3RoID09PSAyID8gZGF0ZXNbbGFuZ3VhZ2VdLm1lcmlkaWVtW2RhdGUuZ2V0VVRDSG91cnMoKSA8IDEyID8gMCA6IDFdIDogJycpLFxyXG4gICAgICAgICAgZzogKGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyID09PSAwID8gMTIgOiBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMiksXHJcbiAgICAgICAgICBHOiBkYXRlLmdldFVUQ0hvdXJzKCksXHJcbiAgICAgICAgICAvLyBtaW51dGVcclxuICAgICAgICAgIGk6IGRhdGUuZ2V0VVRDTWludXRlcygpLFxyXG4gICAgICAgICAgLy8gc2Vjb25kXHJcbiAgICAgICAgICBzOiBkYXRlLmdldFVUQ1NlY29uZHMoKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFsLm0gPSAodmFsLm4gPCAxMCA/ICcwJyA6ICcnKSArIHZhbC5uO1xyXG4gICAgICAgIHZhbC5kID0gKHZhbC5qIDwgMTAgPyAnMCcgOiAnJykgKyB2YWwuajtcclxuICAgICAgICB2YWwuQSA9IHZhbC5hLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKTtcclxuICAgICAgICB2YWwuaCA9ICh2YWwuZyA8IDEwID8gJzAnIDogJycpICsgdmFsLmc7XHJcbiAgICAgICAgdmFsLkggPSAodmFsLkcgPCAxMCA/ICcwJyA6ICcnKSArIHZhbC5HO1xyXG4gICAgICAgIHZhbC5pID0gKHZhbC5pIDwgMTAgPyAnMCcgOiAnJykgKyB2YWwuaTtcclxuICAgICAgICB2YWwucyA9ICh2YWwucyA8IDEwID8gJzAnIDogJycpICsgdmFsLnM7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZvcm1hdCB0eXBlLicpO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBkYXRlID0gW10sXHJcbiAgICAgICAgc2VwcyA9ICQuZXh0ZW5kKFtdLCBmb3JtYXQuc2VwYXJhdG9ycyk7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBjbnQgPSBmb3JtYXQucGFydHMubGVuZ3RoOyBpIDwgY250OyBpKyspIHtcclxuICAgICAgICBpZiAoc2Vwcy5sZW5ndGgpIHtcclxuICAgICAgICAgIGRhdGUucHVzaChzZXBzLnNoaWZ0KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkYXRlLnB1c2godmFsW2Zvcm1hdC5wYXJ0c1tpXV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChzZXBzLmxlbmd0aCkge1xyXG4gICAgICAgIGRhdGUucHVzaChzZXBzLnNoaWZ0KCkpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBkYXRlLmpvaW4oJycpO1xyXG4gICAgfSxcclxuICAgIGNvbnZlcnRWaWV3TW9kZTogIGZ1bmN0aW9uICh2aWV3TW9kZSkge1xyXG4gICAgICBzd2l0Y2ggKHZpZXdNb2RlKSB7XHJcbiAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgIGNhc2UgJ2RlY2FkZSc6XHJcbiAgICAgICAgICB2aWV3TW9kZSA9IDQ7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgY2FzZSAneWVhcic6XHJcbiAgICAgICAgICB2aWV3TW9kZSA9IDM7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgY2FzZSAnbW9udGgnOlxyXG4gICAgICAgICAgdmlld01vZGUgPSAyO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgIGNhc2UgJ2RheSc6XHJcbiAgICAgICAgICB2aWV3TW9kZSA9IDE7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgY2FzZSAnaG91cic6XHJcbiAgICAgICAgICB2aWV3TW9kZSA9IDA7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHZpZXdNb2RlO1xyXG4gICAgfSxcclxuICAgIGhlYWRUZW1wbGF0ZTogJzx0aGVhZD4nICtcclxuICAgICAgICAgICAgICAgICc8dHI+JyArXHJcbiAgICAgICAgICAgICAgICAnPHRoIGNsYXNzPVwicHJldlwiPjxpIGNsYXNzPVwie2ljb25UeXBlfSB7bGVmdEFycm93fVwiLz48L3RoPicgK1xyXG4gICAgICAgICAgICAgICAgJzx0aCBjb2xzcGFuPVwiNVwiIGNsYXNzPVwic3dpdGNoXCI+PC90aD4nICtcclxuICAgICAgICAgICAgICAgICc8dGggY2xhc3M9XCJuZXh0XCI+PGkgY2xhc3M9XCJ7aWNvblR5cGV9IHtyaWdodEFycm93fVwiLz48L3RoPicgK1xyXG4gICAgICAgICAgICAgICAgJzwvdHI+JyArXHJcbiAgICAgICc8L3RoZWFkPicsXHJcbiAgICBoZWFkVGVtcGxhdGVWMzogJzx0aGVhZD4nICtcclxuICAgICAgICAgICAgICAgICc8dHI+JyArXHJcbiAgICAgICAgICAgICAgICAnPHRoIGNsYXNzPVwicHJldlwiPjxzcGFuIGNsYXNzPVwie2ljb25UeXBlfSB7bGVmdEFycm93fVwiPjwvc3Bhbj4gPC90aD4nICtcclxuICAgICAgICAgICAgICAgICc8dGggY29sc3Bhbj1cIjVcIiBjbGFzcz1cInN3aXRjaFwiPjwvdGg+JyArXHJcbiAgICAgICAgICAgICAgICAnPHRoIGNsYXNzPVwibmV4dFwiPjxzcGFuIGNsYXNzPVwie2ljb25UeXBlfSB7cmlnaHRBcnJvd31cIj48L3NwYW4+IDwvdGg+JyArXHJcbiAgICAgICAgICAgICAgICAnPC90cj4nICtcclxuICAgICAgJzwvdGhlYWQ+JyxcclxuICAgIGNvbnRUZW1wbGF0ZTogJzx0Ym9keT48dHI+PHRkIGNvbHNwYW49XCI3XCI+PC90ZD48L3RyPjwvdGJvZHk+JyxcclxuICAgIGZvb3RUZW1wbGF0ZTogJzx0Zm9vdD4nICsgXHJcbiAgICAgICAgICAgICAgICAgICAgJzx0cj48dGggY29sc3Bhbj1cIjdcIiBjbGFzcz1cInRvZGF5XCI+PC90aD48L3RyPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8dHI+PHRoIGNvbHNwYW49XCI3XCIgY2xhc3M9XCJjbGVhclwiPjwvdGg+PC90cj4nICtcclxuICAgICAgICAgICAgICAgICAgJzwvdGZvb3Q+J1xyXG4gIH07XHJcbiAgRFBHbG9iYWwudGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cImRhdGV0aW1lcGlja2VyXCI+JyArXHJcbiAgICAnPGRpdiBjbGFzcz1cImRhdGV0aW1lcGlja2VyLW1pbnV0ZXNcIj4nICtcclxuICAgICc8dGFibGUgY2xhc3M9XCIgdGFibGUtY29uZGVuc2VkXCI+JyArXHJcbiAgICBEUEdsb2JhbC5oZWFkVGVtcGxhdGUgK1xyXG4gICAgRFBHbG9iYWwuY29udFRlbXBsYXRlICtcclxuICAgIERQR2xvYmFsLmZvb3RUZW1wbGF0ZSArXHJcbiAgICAnPC90YWJsZT4nICtcclxuICAgICc8L2Rpdj4nICtcclxuICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXRpbWVwaWNrZXItaG91cnNcIj4nICtcclxuICAgICc8dGFibGUgY2xhc3M9XCIgdGFibGUtY29uZGVuc2VkXCI+JyArXHJcbiAgICBEUEdsb2JhbC5oZWFkVGVtcGxhdGUgK1xyXG4gICAgRFBHbG9iYWwuY29udFRlbXBsYXRlICtcclxuICAgIERQR2xvYmFsLmZvb3RUZW1wbGF0ZSArXHJcbiAgICAnPC90YWJsZT4nICtcclxuICAgICc8L2Rpdj4nICtcclxuICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXRpbWVwaWNrZXItZGF5c1wiPicgK1xyXG4gICAgJzx0YWJsZSBjbGFzcz1cIiB0YWJsZS1jb25kZW5zZWRcIj4nICtcclxuICAgIERQR2xvYmFsLmhlYWRUZW1wbGF0ZSArXHJcbiAgICAnPHRib2R5PjwvdGJvZHk+JyArXHJcbiAgICBEUEdsb2JhbC5mb290VGVtcGxhdGUgK1xyXG4gICAgJzwvdGFibGU+JyArXHJcbiAgICAnPC9kaXY+JyArXHJcbiAgICAnPGRpdiBjbGFzcz1cImRhdGV0aW1lcGlja2VyLW1vbnRoc1wiPicgK1xyXG4gICAgJzx0YWJsZSBjbGFzcz1cInRhYmxlLWNvbmRlbnNlZFwiPicgK1xyXG4gICAgRFBHbG9iYWwuaGVhZFRlbXBsYXRlICtcclxuICAgIERQR2xvYmFsLmNvbnRUZW1wbGF0ZSArXHJcbiAgICBEUEdsb2JhbC5mb290VGVtcGxhdGUgK1xyXG4gICAgJzwvdGFibGU+JyArXHJcbiAgICAnPC9kaXY+JyArXHJcbiAgICAnPGRpdiBjbGFzcz1cImRhdGV0aW1lcGlja2VyLXllYXJzXCI+JyArXHJcbiAgICAnPHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+JyArXHJcbiAgICBEUEdsb2JhbC5oZWFkVGVtcGxhdGUgK1xyXG4gICAgRFBHbG9iYWwuY29udFRlbXBsYXRlICtcclxuICAgIERQR2xvYmFsLmZvb3RUZW1wbGF0ZSArXHJcbiAgICAnPC90YWJsZT4nICtcclxuICAgICc8L2Rpdj4nICtcclxuICAgICc8L2Rpdj4nO1xyXG4gIERQR2xvYmFsLnRlbXBsYXRlVjMgPSAnPGRpdiBjbGFzcz1cImRhdGV0aW1lcGlja2VyXCI+JyArXHJcbiAgICAnPGRpdiBjbGFzcz1cImRhdGV0aW1lcGlja2VyLW1pbnV0ZXNcIj4nICtcclxuICAgICc8dGFibGUgY2xhc3M9XCIgdGFibGUtY29uZGVuc2VkXCI+JyArXHJcbiAgICBEUEdsb2JhbC5oZWFkVGVtcGxhdGVWMyArXHJcbiAgICBEUEdsb2JhbC5jb250VGVtcGxhdGUgK1xyXG4gICAgRFBHbG9iYWwuZm9vdFRlbXBsYXRlICtcclxuICAgICc8L3RhYmxlPicgK1xyXG4gICAgJzwvZGl2PicgK1xyXG4gICAgJzxkaXYgY2xhc3M9XCJkYXRldGltZXBpY2tlci1ob3Vyc1wiPicgK1xyXG4gICAgJzx0YWJsZSBjbGFzcz1cIiB0YWJsZS1jb25kZW5zZWRcIj4nICtcclxuICAgIERQR2xvYmFsLmhlYWRUZW1wbGF0ZVYzICtcclxuICAgIERQR2xvYmFsLmNvbnRUZW1wbGF0ZSArXHJcbiAgICBEUEdsb2JhbC5mb290VGVtcGxhdGUgK1xyXG4gICAgJzwvdGFibGU+JyArXHJcbiAgICAnPC9kaXY+JyArXHJcbiAgICAnPGRpdiBjbGFzcz1cImRhdGV0aW1lcGlja2VyLWRheXNcIj4nICtcclxuICAgICc8dGFibGUgY2xhc3M9XCIgdGFibGUtY29uZGVuc2VkXCI+JyArXHJcbiAgICBEUEdsb2JhbC5oZWFkVGVtcGxhdGVWMyArXHJcbiAgICAnPHRib2R5PjwvdGJvZHk+JyArXHJcbiAgICBEUEdsb2JhbC5mb290VGVtcGxhdGUgK1xyXG4gICAgJzwvdGFibGU+JyArXHJcbiAgICAnPC9kaXY+JyArXHJcbiAgICAnPGRpdiBjbGFzcz1cImRhdGV0aW1lcGlja2VyLW1vbnRoc1wiPicgK1xyXG4gICAgJzx0YWJsZSBjbGFzcz1cInRhYmxlLWNvbmRlbnNlZFwiPicgK1xyXG4gICAgRFBHbG9iYWwuaGVhZFRlbXBsYXRlVjMgK1xyXG4gICAgRFBHbG9iYWwuY29udFRlbXBsYXRlICtcclxuICAgIERQR2xvYmFsLmZvb3RUZW1wbGF0ZSArXHJcbiAgICAnPC90YWJsZT4nICtcclxuICAgICc8L2Rpdj4nICtcclxuICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXRpbWVwaWNrZXIteWVhcnNcIj4nICtcclxuICAgICc8dGFibGUgY2xhc3M9XCJ0YWJsZS1jb25kZW5zZWRcIj4nICtcclxuICAgIERQR2xvYmFsLmhlYWRUZW1wbGF0ZVYzICtcclxuICAgIERQR2xvYmFsLmNvbnRUZW1wbGF0ZSArXHJcbiAgICBEUEdsb2JhbC5mb290VGVtcGxhdGUgK1xyXG4gICAgJzwvdGFibGU+JyArXHJcbiAgICAnPC9kaXY+JyArXHJcbiAgICAnPC9kaXY+JztcclxuICAkLmZuLmRhdGV0aW1lcGlja2VyLkRQR2xvYmFsID0gRFBHbG9iYWw7XHJcblxyXG4gIC8qIERBVEVUSU1FUElDS0VSIE5PIENPTkZMSUNUXHJcbiAgICogPT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAkLmZuLmRhdGV0aW1lcGlja2VyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAkLmZuLmRhdGV0aW1lcGlja2VyID0gb2xkO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgLyogREFURVRJTUVQSUNLRVIgREFUQS1BUElcclxuICAgKiA9PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgJChkb2N1bWVudCkub24oXHJcbiAgICAnZm9jdXMuZGF0ZXRpbWVwaWNrZXIuZGF0YS1hcGkgY2xpY2suZGF0ZXRpbWVwaWNrZXIuZGF0YS1hcGknLFxyXG4gICAgJ1tkYXRhLXByb3ZpZGU9XCJkYXRldGltZXBpY2tlclwiXScsXHJcbiAgICBmdW5jdGlvbiAoZSkge1xyXG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG4gICAgICBpZiAoJHRoaXMuZGF0YSgnZGF0ZXRpbWVwaWNrZXInKSkgcmV0dXJuO1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIC8vIGNvbXBvbmVudCBjbGljayByZXF1aXJlcyB1cyB0byBleHBsaWNpdGx5IHNob3cgaXRcclxuICAgICAgJHRoaXMuZGF0ZXRpbWVwaWNrZXIoJ3Nob3cnKTtcclxuICAgIH1cclxuICApO1xyXG4gICQoZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnW2RhdGEtcHJvdmlkZT1cImRhdGV0aW1lcGlja2VyLWlubGluZVwiXScpLmRhdGV0aW1lcGlja2VyKCk7XHJcbiAgfSk7XHJcblxyXG59KSk7XHJcblxuLyohIFgtZWRpdGFibGUgLSB2MS41LjEgXG4qIEluLXBsYWNlIGVkaXRpbmcgd2l0aCBUd2l0dGVyIEJvb3RzdHJhcCwgalF1ZXJ5IFVJIG9yIHB1cmUgalF1ZXJ5XG4qIGh0dHA6Ly9naXRodWIuY29tL3ZpdGFsZXRzL3gtZWRpdGFibGVcbiogQ29weXJpZ2h0IChjKSAyMDEzIFZpdGFsaXkgUG90YXBvdjsgTGljZW5zZWQgTUlUICovXG4vKipcbkZvcm0gd2l0aCBzaW5nbGUgaW5wdXQgZWxlbWVudCwgdHdvIGJ1dHRvbnMgYW5kIHR3byBzdGF0ZXM6IG5vcm1hbC9sb2FkaW5nLlxuQXBwbGllZCBhcyBqUXVlcnkgbWV0aG9kIHRvIERJViB0YWcgKG5vdCB0byBmb3JtIHRhZyEpLiBUaGlzIGlzIGJlY2F1c2UgZm9ybSBjYW4gYmUgaW4gbG9hZGluZyBzdGF0ZSB3aGVuIHNwaW5uZXIgc2hvd24uXG5FZGl0YWJsZWZvcm0gaXMgbGlua2VkIHdpdGggb25lIG9mIGlucHV0IHR5cGVzLCBlLmcuICd0ZXh0JywgJ3NlbGVjdCcgZXRjLlxuXG5AY2xhc3MgZWRpdGFibGVmb3JtXG5AdXNlcyB0ZXh0XG5AdXNlcyB0ZXh0YXJlYVxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICB2YXIgRWRpdGFibGVGb3JtID0gZnVuY3Rpb24gKGRpdiwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZWZvcm0uZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLiRkaXYgPSAkKGRpdik7IC8vZGl2LCBjb250YWluaW5nIGZvcm0uIE5vdCBmb3JtIHRhZy4gTm90IGVkaXRhYmxlLWVsZW1lbnQuXG4gICAgICAgIGlmKCF0aGlzLm9wdGlvbnMuc2NvcGUpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zY29wZSA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy9ub3RoaW5nIHNob3duIGFmdGVyIGluaXRcbiAgICB9O1xuXG4gICAgRWRpdGFibGVGb3JtLnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29uc3RydWN0b3I6IEVkaXRhYmxlRm9ybSxcbiAgICAgICAgaW5pdElucHV0OiBmdW5jdGlvbigpIHsgIC8vY2FsbGVkIG9uY2VcbiAgICAgICAgICAgIC8vdGFrZSBpbnB1dCBmcm9tIG9wdGlvbnMgKGFzIGl0IGlzIGNyZWF0ZWQgaW4gZWRpdGFibGUtZWxlbWVudClcbiAgICAgICAgICAgIHRoaXMuaW5wdXQgPSB0aGlzLm9wdGlvbnMuaW5wdXQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vc2V0IGluaXRpYWwgdmFsdWVcbiAgICAgICAgICAgIC8vdG9kbzogbWF5IGJlIGFkZCBjaGVjazogdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmlucHV0LnN0cjJ2YWx1ZSh0aGlzLm9wdGlvbnMudmFsdWUpOyBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9wcmVyZW5kZXI6IGdldCBpbnB1dC4kaW5wdXRcbiAgICAgICAgICAgIHRoaXMuaW5wdXQucHJlcmVuZGVyKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGluaXRUZW1wbGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRmb3JtID0gJCgkLmZuLmVkaXRhYmxlZm9ybS50ZW1wbGF0ZSk7IFxuICAgICAgICB9LFxuICAgICAgICBpbml0QnV0dG9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgJGJ0biA9IHRoaXMuJGZvcm0uZmluZCgnLmVkaXRhYmxlLWJ1dHRvbnMnKTtcbiAgICAgICAgICAgICRidG4uYXBwZW5kKCQuZm4uZWRpdGFibGVmb3JtLmJ1dHRvbnMpO1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnNob3didXR0b25zID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgICAgICRidG4uYWRkQ2xhc3MoJ2VkaXRhYmxlLWJ1dHRvbnMtYm90dG9tJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICBSZW5kZXJzIGVkaXRhYmxlZm9ybVxuXG4gICAgICAgIEBtZXRob2QgcmVuZGVyXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvL2luaXQgbG9hZGVyXG4gICAgICAgICAgICB0aGlzLiRsb2FkaW5nID0gJCgkLmZuLmVkaXRhYmxlZm9ybS5sb2FkaW5nKTsgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kZGl2LmVtcHR5KCkuYXBwZW5kKHRoaXMuJGxvYWRpbmcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2luaXQgZm9ybSB0ZW1wbGF0ZSBhbmQgYnV0dG9uc1xuICAgICAgICAgICAgdGhpcy5pbml0VGVtcGxhdGUoKTtcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5zaG93YnV0dG9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdEJ1dHRvbnMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuZWRpdGFibGUtYnV0dG9ucycpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3Nob3cgbG9hZGluZyBzdGF0ZVxuICAgICAgICAgICAgdGhpcy5zaG93TG9hZGluZygpOyAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2ZsYWcgc2hvd2luZyBpcyBmb3JtIG5vdyBzYXZpbmcgdmFsdWUgdG8gc2VydmVyLiBcbiAgICAgICAgICAgIC8vSXQgaXMgbmVlZGVkIHRvIHdhaXQgd2hlbiBjbG9zaW5nIGZvcm0uXG4gICAgICAgICAgICB0aGlzLmlzU2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICBGaXJlZCB3aGVuIHJlbmRlcmluZyBzdGFydHNcbiAgICAgICAgICAgIEBldmVudCByZW5kZXJpbmcgXG4gICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gZXZlbnQgZXZlbnQgb2JqZWN0XG4gICAgICAgICAgICAqKi8gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGRpdi50cmlnZ2VySGFuZGxlcigncmVuZGVyaW5nJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaW5pdCBpbnB1dFxuICAgICAgICAgICAgdGhpcy5pbml0SW5wdXQoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9hcHBlbmQgaW5wdXQgdG8gZm9ybVxuICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCdkaXYuZWRpdGFibGUtaW5wdXQnKS5hcHBlbmQodGhpcy5pbnB1dC4kdHBsKTsgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9hcHBlbmQgZm9ybSB0byBjb250YWluZXJcbiAgICAgICAgICAgIHRoaXMuJGRpdi5hcHBlbmQodGhpcy4kZm9ybSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vcmVuZGVyIGlucHV0XG4gICAgICAgICAgICAkLndoZW4odGhpcy5pbnB1dC5yZW5kZXIoKSlcbiAgICAgICAgICAgIC50aGVuKCQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vc2V0dXAgaW5wdXQgdG8gc3VibWl0IGF1dG9tYXRpY2FsbHkgd2hlbiBubyBidXR0b25zIHNob3duXG4gICAgICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy5zaG93YnV0dG9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0LmF1dG9zdWJtaXQoKTsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL2F0dGFjaCAnY2FuY2VsJyBoYW5kbGVyXG4gICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuZWRpdGFibGUtY2FuY2VsJykuY2xpY2soJC5wcm94eSh0aGlzLmNhbmNlbCwgdGhpcykpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHRoaXMuaW5wdXQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcih0aGlzLmlucHV0LmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuZWRpdGFibGUtc3VibWl0JykuYXR0cignZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC4kaW5wdXQuYXR0cignZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgLy9wcmV2ZW50IGZvcm0gZnJvbSBzdWJtaXR0aW5nXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGZvcm0uc3VibWl0KGZ1bmN0aW9uKGUpeyBlLnByZXZlbnREZWZhdWx0KCk7IH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0LiRpbnB1dC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRmb3JtLmZpbmQoJy5lZGl0YWJsZS1zdWJtaXQnKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAodGhpcy52YWx1ZSA9PT0gbnVsbCB8fCB0aGlzLnZhbHVlID09PSB1bmRlZmluZWQgfHwgdGhpcy52YWx1ZSA9PT0gJycpID8gdGhpcy5vcHRpb25zLmRlZmF1bHRWYWx1ZSA6IHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQudmFsdWUyaW5wdXQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAvL2F0dGFjaCBzdWJtaXQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRmb3JtLnN1Ym1pdCgkLnByb3h5KHRoaXMuc3VibWl0LCB0aGlzKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqICAgICAgICBcbiAgICAgICAgICAgICAgICBGaXJlZCB3aGVuIGZvcm0gaXMgcmVuZGVyZWRcbiAgICAgICAgICAgICAgICBAZXZlbnQgcmVuZGVyZWRcbiAgICAgICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gZXZlbnQgZXZlbnQgb2JqZWN0XG4gICAgICAgICAgICAgICAgKiovICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy4kZGl2LnRyaWdnZXJIYW5kbGVyKCdyZW5kZXJlZCcpOyAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Zvcm0oKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL2NhbGwgcG9zdHJlbmRlciBtZXRob2QgdG8gcGVyZm9ybSBhY3Rpb25zIHJlcXVpcmVkIHZpc2liaWxpdHkgb2YgZm9ybVxuICAgICAgICAgICAgICAgIGlmKHRoaXMuaW5wdXQucG9zdHJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0LnBvc3RyZW5kZXIoKTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICB9LFxuICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkgeyAgIFxuICAgICAgICAgICAgLyoqICAgICAgICBcbiAgICAgICAgICAgIEZpcmVkIHdoZW4gZm9ybSB3YXMgY2FuY2VsbGVkIGJ5IHVzZXJcbiAgICAgICAgICAgIEBldmVudCBjYW5jZWwgXG4gICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gZXZlbnQgZXZlbnQgb2JqZWN0XG4gICAgICAgICAgICAqKi8gICAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kZGl2LnRyaWdnZXJIYW5kbGVyKCdjYW5jZWwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd0xvYWRpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHcsIGg7XG4gICAgICAgICAgICBpZih0aGlzLiRmb3JtKSB7XG4gICAgICAgICAgICAgICAgLy9zZXQgbG9hZGluZyBzaXplIGVxdWFsIHRvIGZvcm1cbiAgICAgICAgICAgICAgICB3ID0gdGhpcy4kZm9ybS5vdXRlcldpZHRoKCk7XG4gICAgICAgICAgICAgICAgaCA9IHRoaXMuJGZvcm0ub3V0ZXJIZWlnaHQoKTsgXG4gICAgICAgICAgICAgICAgaWYodykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRsb2FkaW5nLndpZHRoKHcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGxvYWRpbmcuaGVpZ2h0KGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLiRmb3JtLmhpZGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9zdHJldGNoIGxvYWRpbmcgdG8gZmlsbCBjb250YWluZXIgd2lkdGhcbiAgICAgICAgICAgICAgICB3ID0gdGhpcy4kbG9hZGluZy5wYXJlbnQoKS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIGlmKHcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kbG9hZGluZy53aWR0aCh3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLiRsb2FkaW5nLnNob3coKTsgXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvd0Zvcm06IGZ1bmN0aW9uKGFjdGl2YXRlKSB7XG4gICAgICAgICAgICB0aGlzLiRsb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgIHRoaXMuJGZvcm0uc2hvdygpO1xuICAgICAgICAgICAgaWYoYWN0aXZhdGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5hY3RpdmF0ZSgpOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICBGaXJlZCB3aGVuIGZvcm0gaXMgc2hvd25cbiAgICAgICAgICAgIEBldmVudCBzaG93IFxuICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgKiovICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGRpdi50cmlnZ2VySGFuZGxlcignc2hvdycpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgICAgIHZhciAkZ3JvdXAgPSB0aGlzLiRmb3JtLmZpbmQoJy5jb250cm9sLWdyb3VwJyksXG4gICAgICAgICAgICAgICAgJGJsb2NrID0gdGhpcy4kZm9ybS5maW5kKCcuZWRpdGFibGUtZXJyb3ItYmxvY2snKSxcbiAgICAgICAgICAgICAgICBsaW5lcztcblxuICAgICAgICAgICAgaWYobXNnID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICRncm91cC5yZW1vdmVDbGFzcygkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckdyb3VwQ2xhc3MpO1xuICAgICAgICAgICAgICAgICRibG9jay5yZW1vdmVDbGFzcygkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckJsb2NrQ2xhc3MpLmVtcHR5KCkuaGlkZSgpOyBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0IG5ld2xpbmUgdG8gPGJyPiBmb3IgbW9yZSBwcmV0dHkgZXJyb3IgZGlzcGxheVxuICAgICAgICAgICAgICAgIGlmKG1zZykge1xuICAgICAgICAgICAgICAgICAgICBsaW5lcyA9ICgnJyttc2cpLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZXNbaV0gPSAkKCc8ZGl2PicpLnRleHQobGluZXNbaV0pLmh0bWwoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtc2cgPSBsaW5lcy5qb2luKCc8YnI+Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRncm91cC5hZGRDbGFzcygkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckdyb3VwQ2xhc3MpO1xuICAgICAgICAgICAgICAgICRibG9jay5hZGRDbGFzcygkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckJsb2NrQ2xhc3MpLmh0bWwobXNnKS5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3VibWl0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2dldCBuZXcgdmFsdWUgZnJvbSBpbnB1dFxuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gdGhpcy5pbnB1dC5pbnB1dDJ2YWx1ZSgpOyBcblxuICAgICAgICAgICAgLy92YWxpZGF0aW9uOiBpZiB2YWxpZGF0ZSByZXR1cm5zIHN0cmluZyBvciB0cnV0aHkgdmFsdWUgLSBtZWFucyBlcnJvclxuICAgICAgICAgICAgLy9pZiByZXR1cm5zIG9iamVjdCBsaWtlIHtuZXdWYWx1ZTogJy4uLid9ID0+IHN1Ym1pdHRlZCB2YWx1ZSBpcyByZWFzc2lnbmVkIHRvIGl0XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIGlmICgkLnR5cGUoZXJyb3IpID09PSAnb2JqZWN0JyAmJiBlcnJvci5uZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBlcnJvci5uZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0LnZhbHVlMmlucHV0KG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgZXJyb3IubXNnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycm9yLm1zZyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Zvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dGb3JtKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9pZiB2YWx1ZSBub3QgY2hhbmdlZCAtLT4gdHJpZ2dlciAnbm9jaGFuZ2UnIGV2ZW50IGFuZCByZXR1cm5cbiAgICAgICAgICAgIC8qanNsaW50IGVxZXE6IHRydWUqL1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2F2ZW5vY2hhbmdlICYmIHRoaXMuaW5wdXQudmFsdWUyc3RyKG5ld1ZhbHVlKSA9PSB0aGlzLmlucHV0LnZhbHVlMnN0cih0aGlzLnZhbHVlKSkge1xuICAgICAgICAgICAgLypqc2xpbnQgZXFlcTogZmFsc2UqLyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvKiogICAgICAgIFxuICAgICAgICAgICAgICAgIEZpcmVkIHdoZW4gdmFsdWUgbm90IGNoYW5nZWQgYnV0IGZvcm0gaXMgc3VibWl0dGVkLiBSZXF1aXJlcyBzYXZlbm9jaGFuZ2UgPSBmYWxzZS5cbiAgICAgICAgICAgICAgICBAZXZlbnQgbm9jaGFuZ2UgXG4gICAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgICAgICoqLyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy4kZGl2LnRyaWdnZXJIYW5kbGVyKCdub2NoYW5nZScpOyAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIC8vY29udmVydCB2YWx1ZSBmb3Igc3VibWl0dGluZyB0byBzZXJ2ZXJcbiAgICAgICAgICAgIHZhciBzdWJtaXRWYWx1ZSA9IHRoaXMuaW5wdXQudmFsdWUyc3VibWl0KG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5pc1NhdmluZyA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vc2VuZGluZyBkYXRhIHRvIHNlcnZlclxuICAgICAgICAgICAgJC53aGVuKHRoaXMuc2F2ZShzdWJtaXRWYWx1ZSkpXG4gICAgICAgICAgICAuZG9uZSgkLnByb3h5KGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1NhdmluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgLy9ydW4gc3VjY2VzcyBjYWxsYmFja1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSB0eXBlb2YgdGhpcy5vcHRpb25zLnN1Y2Nlc3MgPT09ICdmdW5jdGlvbicgPyB0aGlzLm9wdGlvbnMuc3VjY2Vzcy5jYWxsKHRoaXMub3B0aW9ucy5zY29wZSwgcmVzcG9uc2UsIG5ld1ZhbHVlKSA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvL2lmIHN1Y2Nlc3MgY2FsbGJhY2sgcmV0dXJucyBmYWxzZSAtLT4ga2VlcCBmb3JtIG9wZW4gYW5kIGRvIG5vdCBhY3RpdmF0ZSBpbnB1dFxuICAgICAgICAgICAgICAgIGlmKHJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Zvcm0oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9pZiBzdWNjZXNzIGNhbGxiYWNrIHJldHVybnMgc3RyaW5nIC0tPiAga2VlcCBmb3JtIG9wZW4sIHNob3cgZXJyb3IgYW5kIGFjdGl2YXRlIGlucHV0ICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHJlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihyZXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL2lmIHN1Y2Nlc3MgY2FsbGJhY2sgcmV0dXJucyBvYmplY3QgbGlrZSB7bmV3VmFsdWU6IDxzb21ldGhpbmc+fSAtLT4gdXNlIHRoYXQgdmFsdWUgaW5zdGVhZCBvZiBzdWJtaXR0ZWRcbiAgICAgICAgICAgICAgICAvL2l0IGlzIHVzZWZ1bGwgaWYgeW91IHdhbnQgdG8gY2huYWdlIHZhbHVlIGluIHVybC1mdW5jdGlvblxuICAgICAgICAgICAgICAgIGlmKHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiByZXMuaGFzT3duUHJvcGVydHkoJ25ld1ZhbHVlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUgPSByZXMubmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9jbGVhciBlcnJvciBtZXNzYWdlXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcihmYWxzZSk7ICAgXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICAgICAgRmlyZWQgd2hlbiBmb3JtIGlzIHN1Ym1pdHRlZFxuICAgICAgICAgICAgICAgIEBldmVudCBzYXZlIFxuICAgICAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBldmVudCBldmVudCBvYmplY3RcbiAgICAgICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gcGFyYW1zIGFkZGl0aW9uYWwgcGFyYW1zXG4gICAgICAgICAgICAgICAgQHBhcmFtIHttaXhlZH0gcGFyYW1zLm5ld1ZhbHVlIHJhdyBuZXcgdmFsdWVcbiAgICAgICAgICAgICAgICBAcGFyYW0ge21peGVkfSBwYXJhbXMuc3VibWl0VmFsdWUgc3VibWl0dGVkIHZhbHVlIGFzIHN0cmluZ1xuICAgICAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMucmVzcG9uc2UgYWpheCByZXNwb25zZVxuXG4gICAgICAgICAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgICAgICAgICAkKCcjZm9ybS1kaXYnKS5vbignc2F2ZScpLCBmdW5jdGlvbihlLCBwYXJhbXMpe1xuICAgICAgICAgICAgICAgICAgICBpZihwYXJhbXMubmV3VmFsdWUgPT09ICd1c2VybmFtZScpIHsuLi59XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgKiovXG4gICAgICAgICAgICAgICAgdGhpcy4kZGl2LnRyaWdnZXJIYW5kbGVyKCdzYXZlJywge25ld1ZhbHVlOiBuZXdWYWx1ZSwgc3VibWl0VmFsdWU6IHN1Ym1pdFZhbHVlLCByZXNwb25zZTogcmVzcG9uc2V9KTtcbiAgICAgICAgICAgIH0sIHRoaXMpKVxuICAgICAgICAgICAgLmZhaWwoJC5wcm94eShmdW5jdGlvbih4aHIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzU2F2aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICB2YXIgbXNnO1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiB0aGlzLm9wdGlvbnMuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgbXNnID0gdGhpcy5vcHRpb25zLmVycm9yLmNhbGwodGhpcy5vcHRpb25zLnNjb3BlLCB4aHIsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtc2cgPSB0eXBlb2YgeGhyID09PSAnc3RyaW5nJyA/IHhociA6IHhoci5yZXNwb25zZVRleHQgfHwgeGhyLnN0YXR1c1RleHQgfHwgJ1Vua25vd24gZXJyb3IhJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKG1zZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93Rm9ybSgpO1xuICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uKHN1Ym1pdFZhbHVlKSB7XG4gICAgICAgICAgICAvL3RyeSBwYXJzZSBjb21wb3NpdGUgcGsgZGVmaW5lZCBhcyBqc29uIHN0cmluZyBpbiBkYXRhLXBrIFxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBrID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbih0aGlzLm9wdGlvbnMucGssIHRydWUpOyBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHBrID0gKHR5cGVvZiB0aGlzLm9wdGlvbnMucGsgPT09ICdmdW5jdGlvbicpID8gdGhpcy5vcHRpb25zLnBrLmNhbGwodGhpcy5vcHRpb25zLnNjb3BlKSA6IHRoaXMub3B0aW9ucy5wayxcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgIHNlbmQgb24gc2VydmVyIGluIGZvbGxvd2luZyBjYXNlczpcbiAgICAgICAgICAgICAgMS4gdXJsIGlzIGZ1bmN0aW9uXG4gICAgICAgICAgICAgIDIuIHVybCBpcyBzdHJpbmcgQU5EIChwayBkZWZpbmVkIE9SIHNlbmQgb3B0aW9uID0gYWx3YXlzKSBcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBzZW5kID0gISEodHlwZW9mIHRoaXMub3B0aW9ucy51cmwgPT09ICdmdW5jdGlvbicgfHwgKHRoaXMub3B0aW9ucy51cmwgJiYgKCh0aGlzLm9wdGlvbnMuc2VuZCA9PT0gJ2Fsd2F5cycpIHx8ICh0aGlzLm9wdGlvbnMuc2VuZCA9PT0gJ2F1dG8nICYmIHBrICE9PSBudWxsICYmIHBrICE9PSB1bmRlZmluZWQpKSkpLFxuICAgICAgICAgICAgcGFyYW1zO1xuXG4gICAgICAgICAgICBpZiAoc2VuZCkgeyAvL3NlbmQgdG8gc2VydmVyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xuXG4gICAgICAgICAgICAgICAgLy9zdGFuZGFyZCBwYXJhbXNcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMub3B0aW9ucy5uYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc3VibWl0VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHBrOiBwayBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy9hZGRpdGlvbmFsIHBhcmFtc1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiB0aGlzLm9wdGlvbnMucGFyYW1zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHRoaXMub3B0aW9ucy5wYXJhbXMuY2FsbCh0aGlzLm9wdGlvbnMuc2NvcGUsIHBhcmFtcyk7ICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL3RyeSBwYXJzZSBqc29uIGluIHNpbmdsZSBxdW90ZXMgKGZyb20gZGF0YS1wYXJhbXMgYXR0cmlidXRlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucGFyYW1zID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbih0aGlzLm9wdGlvbnMucGFyYW1zLCB0cnVlKTsgICBcbiAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQocGFyYW1zLCB0aGlzLm9wdGlvbnMucGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5vcHRpb25zLnVybCA9PT0gJ2Z1bmN0aW9uJykgeyAvL3VzZXIncyBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnVybC5jYWxsKHRoaXMub3B0aW9ucy5zY29wZSwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgXG4gICAgICAgICAgICAgICAgICAgIC8vc2VuZCBhamF4IHRvIHNlcnZlciBhbmQgcmV0dXJuIGRlZmVycmVkIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5hamF4KCQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCAgICAgOiB0aGlzLm9wdGlvbnMudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSAgICA6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgOiAnUE9TVCdcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zLmFqYXhPcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBcblxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnZhbGlkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52YWxpZGF0ZS5jYWxsKHRoaXMub3B0aW9ucy5zY29wZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYoa2V5IGluIHRoaXMub3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKGtleSA9PT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2RvIG5vdCBwYXNzIG9wdGlvbiB0byBpbnB1dCBhcyBpdCBpcyBwYXNzZWQgaW4gZWRpdGFibGUtZWxlbWVudFxuICAgICAgICB9LFxuXG4gICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgY29udmVydFN0cikge1xuICAgICAgICAgICAgaWYoY29udmVydFN0cikge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmlucHV0LnN0cjJ2YWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9pZiBmb3JtIGlzIHZpc2libGUsIHVwZGF0ZSBpbnB1dFxuICAgICAgICAgICAgaWYodGhpcy4kZm9ybSAmJiB0aGlzLiRmb3JtLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dC52YWx1ZTJpbnB1dCh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfSAgICAgICAgICAgICAgIFxuICAgIH07XG5cbiAgICAvKlxuICAgIEluaXRpYWxpemUgZWRpdGFibGVmb3JtLiBBcHBsaWVkIHRvIGpRdWVyeSBvYmplY3QuXG5cbiAgICBAbWV0aG9kICQoKS5lZGl0YWJsZWZvcm0ob3B0aW9ucylcbiAgICBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnNcbiAgICBAZXhhbXBsZVxuICAgIHZhciAkZm9ybSA9ICQoJyZsdDtkaXYmZ3Q7JykuZWRpdGFibGVmb3JtKHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICBuYW1lOiAndXNlcm5hbWUnLFxuICAgICAgICB1cmw6ICcvcG9zdCcsXG4gICAgICAgIHZhbHVlOiAndml0YWxpeSdcbiAgICB9KTtcblxuICAgIC8vdG8gZGlzcGxheSBmb3JtIHlvdSBzaG91bGQgY2FsbCAncmVuZGVyJyBtZXRob2RcbiAgICAkZm9ybS5lZGl0YWJsZWZvcm0oJ3JlbmRlcicpOyAgICAgXG4gICAgKi9cbiAgICAkLmZuLmVkaXRhYmxlZm9ybSA9IGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSwgXG4gICAgICAgICAgICBkYXRhID0gJHRoaXMuZGF0YSgnZWRpdGFibGVmb3JtJyksIFxuICAgICAgICAgICAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT09ICdvYmplY3QnICYmIG9wdGlvbjsgXG4gICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdlZGl0YWJsZWZvcm0nLCAoZGF0YSA9IG5ldyBFZGl0YWJsZUZvcm0odGhpcywgb3B0aW9ucykpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKSB7IC8vY2FsbCBtZXRob2QgXG4gICAgICAgICAgICAgICAgZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDEpKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvL2tlZXAgbGluayB0byBjb25zdHJ1Y3RvciB0byBhbGxvdyBpbmhlcml0YW5jZVxuICAgICQuZm4uZWRpdGFibGVmb3JtLkNvbnN0cnVjdG9yID0gRWRpdGFibGVGb3JtOyAgICBcblxuICAgIC8vZGVmYXVsdHNcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5kZWZhdWx0cyA9IHtcbiAgICAgICAgLyogc2VlIGFsc28gZGVmYXVsdHMgZm9yIGlucHV0ICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgIFR5cGUgb2YgaW5wdXQuIENhbiBiZSA8Y29kZT50ZXh0fHRleHRhcmVhfHNlbGVjdHxkYXRlfGNoZWNrbGlzdDwvY29kZT5cblxuICAgICAgICBAcHJvcGVydHkgdHlwZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICd0ZXh0J1xuICAgICAgICAqKi9cbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAvKipcbiAgICAgICAgVXJsIGZvciBzdWJtaXQsIGUuZy4gPGNvZGU+Jy9wb3N0JzwvY29kZT4gIFxuICAgICAgICBJZiBmdW5jdGlvbiAtIGl0IHdpbGwgYmUgY2FsbGVkIGluc3RlYWQgb2YgYWpheC4gRnVuY3Rpb24gc2hvdWxkIHJldHVybiBkZWZlcnJlZCBvYmplY3QgdG8gcnVuIGZhaWwvZG9uZSBjYWxsYmFja3MuXG5cbiAgICAgICAgQHByb3BlcnR5IHVybCBcbiAgICAgICAgQHR5cGUgc3RyaW5nfGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgdXJsOiBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBkID0gbmV3ICQuRGVmZXJyZWQ7XG4gICAgICAgICAgICBpZihwYXJhbXMudmFsdWUgPT09ICdhYmMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucmVqZWN0KCdlcnJvciBtZXNzYWdlJyk7IC8vcmV0dXJuaW5nIGVycm9yIHZpYSBkZWZlcnJlZCBvYmplY3RcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9hc3luYyBzYXZpbmcgZGF0YSBpbiBqcyBtb2RlbFxuICAgICAgICAgICAgICAgIHNvbWVNb2RlbC5hc3luY1NhdmVNZXRob2Qoe1xuICAgICAgICAgICAgICAgICAgIC4uLiwgXG4gICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7IFxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgdXJsOm51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBBZGRpdGlvbmFsIHBhcmFtcyBmb3Igc3VibWl0LiBJZiBkZWZpbmVkIGFzIDxjb2RlPm9iamVjdDwvY29kZT4gLSBpdCBpcyAqKmFwcGVuZGVkKiogdG8gb3JpZ2luYWwgYWpheCBkYXRhIChwaywgbmFtZSBhbmQgdmFsdWUpLiAgXG4gICAgICAgIElmIGRlZmluZWQgYXMgPGNvZGU+ZnVuY3Rpb248L2NvZGU+IC0gcmV0dXJuZWQgb2JqZWN0ICoqb3ZlcndyaXRlcyoqIG9yaWdpbmFsIGFqYXggZGF0YS5cbiAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgcGFyYW1zOiBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgICAgICAgIC8vb3JpZ2luYWxseSBwYXJhbXMgY29udGFpbiBwaywgbmFtZSBhbmQgdmFsdWVcbiAgICAgICAgICAgIHBhcmFtcy5hID0gMTtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICAgIH1cblxuICAgICAgICBAcHJvcGVydHkgcGFyYW1zIFxuICAgICAgICBAdHlwZSBvYmplY3R8ZnVuY3Rpb25cbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIHBhcmFtczpudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgTmFtZSBvZiBmaWVsZC4gV2lsbCBiZSBzdWJtaXR0ZWQgb24gc2VydmVyLiBDYW4gYmUgdGFrZW4gZnJvbSA8Y29kZT5pZDwvY29kZT4gYXR0cmlidXRlXG5cbiAgICAgICAgQHByb3BlcnR5IG5hbWUgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgUHJpbWFyeSBrZXkgb2YgZWRpdGFibGUgb2JqZWN0IChlLmcuIHJlY29yZCBpZCBpbiBkYXRhYmFzZSkuIEZvciBjb21wb3NpdGUga2V5cyB1c2Ugb2JqZWN0LCBlLmcuIDxjb2RlPntpZDogMSwgbGFuZzogJ2VuJ308L2NvZGU+LlxuICAgICAgICBDYW4gYmUgY2FsY3VsYXRlZCBkeW5hbWljYWxseSB2aWEgZnVuY3Rpb24uXG5cbiAgICAgICAgQHByb3BlcnR5IHBrIFxuICAgICAgICBAdHlwZSBzdHJpbmd8b2JqZWN0fGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHBrOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgSW5pdGlhbCB2YWx1ZS4gSWYgbm90IGRlZmluZWQgLSB3aWxsIGJlIHRha2VuIGZyb20gZWxlbWVudCdzIGNvbnRlbnQuXG4gICAgICAgIEZvciBfX3NlbGVjdF9fIHR5cGUgc2hvdWxkIGJlIGRlZmluZWQgKGFzIGl0IGlzIElEIG9mIHNob3duIHRleHQpLlxuXG4gICAgICAgIEBwcm9wZXJ0eSB2YWx1ZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nfG9iamVjdFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgVmFsdWUgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBpbiBpbnB1dCBpZiBvcmlnaW5hbCBmaWVsZCB2YWx1ZSBpcyBlbXB0eSAoYG51bGx8dW5kZWZpbmVkfCcnYCkuXG5cbiAgICAgICAgQHByb3BlcnR5IGRlZmF1bHRWYWx1ZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nfG9iamVjdFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBzaW5jZSAxLjQuNlxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBTdHJhdGVneSBmb3Igc2VuZGluZyBkYXRhIG9uIHNlcnZlci4gQ2FuIGJlIGBhdXRvfGFsd2F5c3xuZXZlcmAuXG4gICAgICAgIFdoZW4gJ2F1dG8nIGRhdGEgd2lsbCBiZSBzZW50IG9uIHNlcnZlciAqKm9ubHkgaWYgcGsgYW5kIHVybCBkZWZpbmVkKiosIG90aGVyd2lzZSBuZXcgdmFsdWUgd2lsbCBiZSBzdG9yZWQgbG9jYWxseS5cblxuICAgICAgICBAcHJvcGVydHkgc2VuZCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICdhdXRvJ1xuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIHNlbmQ6ICdhdXRvJywgXG4gICAgICAgIC8qKlxuICAgICAgICBGdW5jdGlvbiBmb3IgY2xpZW50LXNpZGUgdmFsaWRhdGlvbi4gSWYgcmV0dXJucyBzdHJpbmcgLSBtZWFucyB2YWxpZGF0aW9uIG5vdCBwYXNzZWQgYW5kIHN0cmluZyBzaG93ZWQgYXMgZXJyb3IuXG4gICAgICAgIFNpbmNlIDEuNS4xIHlvdSBjYW4gbW9kaWZ5IHN1Ym1pdHRlZCB2YWx1ZSBieSByZXR1cm5pbmcgb2JqZWN0IGZyb20gYHZhbGlkYXRlYDogXG4gICAgICAgIGB7bmV3VmFsdWU6ICcuLi4nfWAgb3IgYHtuZXdWYWx1ZTogJy4uLicsIG1zZzogJy4uLid9YFxuXG4gICAgICAgIEBwcm9wZXJ0eSB2YWxpZGF0ZSBcbiAgICAgICAgQHR5cGUgZnVuY3Rpb25cbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICBAZXhhbXBsZVxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmKCQudHJpbSh2YWx1ZSkgPT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB2YWxpZGF0ZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIFN1Y2Nlc3MgY2FsbGJhY2suIENhbGxlZCB3aGVuIHZhbHVlIHN1Y2Nlc3NmdWxseSBzZW50IG9uIHNlcnZlciBhbmQgKipyZXNwb25zZSBzdGF0dXMgPSAyMDAqKi4gIFxuICAgICAgICBVc2VmdWxsIHRvIHdvcmsgd2l0aCBqc29uIHJlc3BvbnNlLiBGb3IgZXhhbXBsZSwgaWYgeW91ciBiYWNrZW5kIHJlc3BvbnNlIGNhbiBiZSA8Y29kZT57c3VjY2VzczogdHJ1ZX08L2NvZGU+XG4gICAgICAgIG9yIDxjb2RlPntzdWNjZXNzOiBmYWxzZSwgbXNnOiBcInNlcnZlciBlcnJvclwifTwvY29kZT4geW91IGNhbiBjaGVjayBpdCBpbnNpZGUgdGhpcyBjYWxsYmFjay4gIFxuICAgICAgICBJZiBpdCByZXR1cm5zICoqc3RyaW5nKiogLSBtZWFucyBlcnJvciBvY2N1cmVkIGFuZCBzdHJpbmcgaXMgc2hvd24gYXMgZXJyb3IgbWVzc2FnZS4gIFxuICAgICAgICBJZiBpdCByZXR1cm5zICoqb2JqZWN0IGxpa2UqKiA8Y29kZT57bmV3VmFsdWU6ICZsdDtzb21ldGhpbmcmZ3Q7fTwvY29kZT4gLSBpdCBvdmVyd3JpdGVzIHZhbHVlLCBzdWJtaXR0ZWQgYnkgdXNlci4gIFxuICAgICAgICBPdGhlcndpc2UgbmV3VmFsdWUgc2ltcGx5IHJlbmRlcmVkIGludG8gZWxlbWVudC5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBzdWNjZXNzIFxuICAgICAgICBAdHlwZSBmdW5jdGlvblxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYoIXJlc3BvbnNlLnN1Y2Nlc3MpIHJldHVybiByZXNwb25zZS5tc2c7XG4gICAgICAgIH1cbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICBzdWNjZXNzOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgRXJyb3IgY2FsbGJhY2suIENhbGxlZCB3aGVuIHJlcXVlc3QgZmFpbGVkIChyZXNwb25zZSBzdGF0dXMgIT0gMjAwKS4gIFxuICAgICAgICBVc2VmdWxsIHdoZW4geW91IHdhbnQgdG8gcGFyc2UgZXJyb3IgcmVzcG9uc2UgYW5kIGRpc3BsYXkgYSBjdXN0b20gbWVzc2FnZS5cbiAgICAgICAgTXVzdCByZXR1cm4gKipzdHJpbmcqKiAtIHRoZSBtZXNzYWdlIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgZXJyb3IgYmxvY2suXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBlcnJvciBcbiAgICAgICAgQHR5cGUgZnVuY3Rpb25cbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICBAc2luY2UgMS40LjRcbiAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlc3BvbnNlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYocmVzcG9uc2Uuc3RhdHVzID09PSA1MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1NlcnZpY2UgdW5hdmFpbGFibGUuIFBsZWFzZSB0cnkgbGF0ZXIuJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgQWRkaXRpb25hbCBvcHRpb25zIGZvciBzdWJtaXQgYWpheCByZXF1ZXN0LlxuICAgICAgICBMaXN0IG9mIHZhbHVlczogaHR0cDovL2FwaS5qcXVlcnkuY29tL2pRdWVyeS5hamF4XG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgYWpheE9wdGlvbnMgXG4gICAgICAgIEB0eXBlIG9iamVjdFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBzaW5jZSAxLjEuMSAgICAgICAgXG4gICAgICAgIEBleGFtcGxlIFxuICAgICAgICBhamF4T3B0aW9uczoge1xuICAgICAgICAgICAgdHlwZTogJ3B1dCcsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBhamF4T3B0aW9uczogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIFdoZXJlIHRvIHNob3cgYnV0dG9uczogbGVmdCh0cnVlKXxib3R0b218ZmFsc2UgIFxuICAgICAgICBGb3JtIHdpdGhvdXQgYnV0dG9ucyBpcyBhdXRvLXN1Ym1pdHRlZC5cblxuICAgICAgICBAcHJvcGVydHkgc2hvd2J1dHRvbnMgXG4gICAgICAgIEB0eXBlIGJvb2xlYW58c3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IHRydWVcbiAgICAgICAgQHNpbmNlIDEuMS4xXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBzaG93YnV0dG9uczogdHJ1ZSxcbiAgICAgICAgLyoqXG4gICAgICAgIFNjb3BlIGZvciBjYWxsYmFjayBtZXRob2RzIChzdWNjZXNzLCB2YWxpZGF0ZSkuICBcbiAgICAgICAgSWYgPGNvZGU+bnVsbDwvY29kZT4gbWVhbnMgZWRpdGFibGVmb3JtIGluc3RhbmNlIGl0c2VsZi4gXG5cbiAgICAgICAgQHByb3BlcnR5IHNjb3BlIFxuICAgICAgICBAdHlwZSBET01FbGVtZW50fG9iamVjdFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBzaW5jZSAxLjIuMFxuICAgICAgICBAcHJpdmF0ZVxuICAgICAgICAqKi8gICAgICAgICAgICBcbiAgICAgICAgc2NvcGU6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBXaGV0aGVyIHRvIHNhdmUgb3IgY2FuY2VsIHZhbHVlIHdoZW4gaXQgd2FzIG5vdCBjaGFuZ2VkIGJ1dCBmb3JtIHdhcyBzdWJtaXR0ZWRcblxuICAgICAgICBAcHJvcGVydHkgc2F2ZW5vY2hhbmdlIFxuICAgICAgICBAdHlwZSBib29sZWFuXG4gICAgICAgIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgIEBzaW5jZSAxLjIuMFxuICAgICAgICAqKi9cbiAgICAgICAgc2F2ZW5vY2hhbmdlOiBmYWxzZVxuICAgIH07ICAgXG5cbiAgICAvKlxuICAgIE5vdGU6IGZvbGxvd2luZyBwYXJhbXMgY291bGQgcmVkZWZpbmVkIGluIGVuZ2luZTogYm9vdHN0cmFwIG9yIGpxdWVyeXVpOlxuICAgIENsYXNzZXMgJ2NvbnRyb2wtZ3JvdXAnIGFuZCAnZWRpdGFibGUtZXJyb3ItYmxvY2snIG11c3QgYWx3YXlzIHByZXNlbnQhXG4gICAgKi8gICAgICBcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS50ZW1wbGF0ZSA9ICc8Zm9ybSBjbGFzcz1cImZvcm0taW5saW5lIGVkaXRhYmxlZm9ybVwiPicrXG4gICAgJzxkaXYgY2xhc3M9XCJjb250cm9sLWdyb3VwXCI+JyArIFxuICAgICc8ZGl2PjxkaXYgY2xhc3M9XCJlZGl0YWJsZS1pbnB1dFwiPjwvZGl2PjxkaXYgY2xhc3M9XCJlZGl0YWJsZS1idXR0b25zXCI+PC9kaXY+PC9kaXY+JytcbiAgICAnPGRpdiBjbGFzcz1cImVkaXRhYmxlLWVycm9yLWJsb2NrXCI+PC9kaXY+JyArIFxuICAgICc8L2Rpdj4nICsgXG4gICAgJzwvZm9ybT4nO1xuXG4gICAgLy9sb2FkaW5nIGRpdlxuICAgICQuZm4uZWRpdGFibGVmb3JtLmxvYWRpbmcgPSAnPGRpdiBjbGFzcz1cImVkaXRhYmxlZm9ybS1sb2FkaW5nXCI+PC9kaXY+JztcblxuICAgIC8vYnV0dG9uc1xuICAgICQuZm4uZWRpdGFibGVmb3JtLmJ1dHRvbnMgPSAnPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJlZGl0YWJsZS1zdWJtaXRcIj5vazwvYnV0dG9uPicrXG4gICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZWRpdGFibGUtY2FuY2VsXCI+Y2FuY2VsPC9idXR0b24+JzsgICAgICBcblxuICAgIC8vZXJyb3IgY2xhc3MgYXR0YWNoZWQgdG8gY29udHJvbC1ncm91cFxuICAgICQuZm4uZWRpdGFibGVmb3JtLmVycm9yR3JvdXBDbGFzcyA9IG51bGw7ICBcblxuICAgIC8vZXJyb3IgY2xhc3MgYXR0YWNoZWQgdG8gZWRpdGFibGUtZXJyb3ItYmxvY2tcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckJsb2NrQ2xhc3MgPSAnZWRpdGFibGUtZXJyb3InO1xuICAgIFxuICAgIC8vZW5naW5lXG4gICAgJC5mbi5lZGl0YWJsZWZvcm0uZW5naW5lID0gJ2pxdWVyeSc7XG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG4qIEVkaXRhYmxlRm9ybSB1dGlsaXRlc1xuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIC8vdXRpbHNcbiAgICAkLmZuLmVkaXRhYmxldXRpbHMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAqIGNsYXNzaWMgSlMgaW5oZXJpdGFuY2UgZnVuY3Rpb25cbiAgICAgICAgKi8gIFxuICAgICAgICBpbmhlcml0OiBmdW5jdGlvbiAoQ2hpbGQsIFBhcmVudCkge1xuICAgICAgICAgICAgdmFyIEYgPSBmdW5jdGlvbigpIHsgfTtcbiAgICAgICAgICAgIEYucHJvdG90eXBlID0gUGFyZW50LnByb3RvdHlwZTtcbiAgICAgICAgICAgIENoaWxkLnByb3RvdHlwZSA9IG5ldyBGKCk7XG4gICAgICAgICAgICBDaGlsZC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaGlsZDtcbiAgICAgICAgICAgIENoaWxkLnN1cGVyY2xhc3MgPSBQYXJlbnQucHJvdG90eXBlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAqIHNldCBjYXJldCBwb3NpdGlvbiBpbiBpbnB1dFxuICAgICAgICAqIHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ5OTEyNi9qcXVlcnktc2V0LWN1cnNvci1wb3NpdGlvbi1pbi10ZXh0LWFyZWFcbiAgICAgICAgKi8gICAgICAgIFxuICAgICAgICBzZXRDdXJzb3JQb3NpdGlvbjogZnVuY3Rpb24oZWxlbSwgcG9zKSB7XG4gICAgICAgICAgICBpZiAoZWxlbS5zZXRTZWxlY3Rpb25SYW5nZSkge1xuICAgICAgICAgICAgICAgIGVsZW0uc2V0U2VsZWN0aW9uUmFuZ2UocG9zLCBwb3MpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtLmNyZWF0ZVRleHRSYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IGVsZW0uY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgcG9zKTtcbiAgICAgICAgICAgICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHBvcyk7XG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICogZnVuY3Rpb24gdG8gcGFyc2UgSlNPTiBpbiAqc2luZ2xlKiBxdW90ZXMuIChqcXVlcnkgYXV0b21hdGljYWxseSBwYXJzZSBvbmx5IGRvdWJsZSBxdW90ZXMpXG4gICAgICAgICogVGhhdCBhbGxvd3Mgc3VjaCBjb2RlIGFzOiA8YSBkYXRhLXNvdXJjZT1cInsnYSc6ICdiJywgJ2MnOiAnZCd9XCI+XG4gICAgICAgICogc2FmZSA9IHRydWUgLS0+IG1lYW5zIG5vIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93blxuICAgICAgICAqIGZvciBkZXRhaWxzIHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc0MTAzNDgvaG93LXRvLXNldC1qc29uLWZvcm1hdC10by1odG1sNS1kYXRhLWF0dHJpYnV0ZXMtaW4tdGhlLWpxdWVyeVxuICAgICAgICAqL1xuICAgICAgICB0cnlQYXJzZUpzb246IGZ1bmN0aW9uKHMsIHNhZmUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcyA9PT0gJ3N0cmluZycgJiYgcy5sZW5ndGggJiYgcy5tYXRjaCgvXltcXHtcXFtdLipbXFx9XFxdXSQvKSkge1xuICAgICAgICAgICAgICAgIGlmIChzYWZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKmpzbGludCBldmlsOiB0cnVlKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSAobmV3IEZ1bmN0aW9uKCdyZXR1cm4gJyArIHMpKSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLypqc2xpbnQgZXZpbDogZmFsc2UqL1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLypqc2xpbnQgZXZpbDogdHJ1ZSovXG4gICAgICAgICAgICAgICAgICAgIHMgPSAobmV3IEZ1bmN0aW9uKCdyZXR1cm4gJyArIHMpKSgpO1xuICAgICAgICAgICAgICAgICAgICAvKmpzbGludCBldmlsOiBmYWxzZSovXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICogc2xpY2Ugb2JqZWN0IGJ5IHNwZWNpZmllZCBrZXlzXG4gICAgICAgICovXG4gICAgICAgIHNsaWNlT2JqOiBmdW5jdGlvbihvYmosIGtleXMsIGNhc2VTZW5zaXRpdmUgLyogZGVmYXVsdDogZmFsc2UgKi8pIHtcbiAgICAgICAgICAgIHZhciBrZXksIGtleUxvd2VyLCBuZXdPYmogPSB7fTtcblxuICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkoa2V5cykgfHwgIWtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld09iajtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihjYXNlU2Vuc2l0aXZlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vd2hlbiBnZXR0aW5nIGRhdGEtKiBhdHRyaWJ1dGVzIHZpYSAkLmRhdGEoKSBpdCdzIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UuXG4gICAgICAgICAgICAgICAgLy9kZXRhaWxzOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc2MDI1NjUvdXNpbmctZGF0YS1hdHRyaWJ1dGVzLXdpdGgtanF1ZXJ5XG4gICAgICAgICAgICAgICAgLy93b3JrYXJvdW5kIGlzIGNvZGUgYmVsb3cuXG4gICAgICAgICAgICAgICAga2V5TG93ZXIgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleUxvd2VyKSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXlMb3dlcl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3T2JqO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qXG4gICAgICAgIGV4Y2x1ZGUgY29tcGxleCBvYmplY3RzIGZyb20gJC5kYXRhKCkgYmVmb3JlIHBhc3MgdG8gY29uZmlnXG4gICAgICAgICovXG4gICAgICAgIGdldENvbmZpZ0RhdGE6IGZ1bmN0aW9uKCRlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgICAgICAgJC5lYWNoKCRlbGVtZW50LmRhdGEoKSwgZnVuY3Rpb24oaywgdikge1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiB2ICE9PSAnb2JqZWN0JyB8fCAodiAmJiB0eXBlb2YgdiA9PT0gJ29iamVjdCcgJiYgKHYuY29uc3RydWN0b3IgPT09IE9iamVjdCB8fCB2LmNvbnN0cnVjdG9yID09PSBBcnJheSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFba10gPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLypcbiAgICAgICAgIHJldHVybnMga2V5cyBvZiBvYmplY3RcbiAgICAgICAgKi9cbiAgICAgICAgb2JqZWN0S2V5czogZnVuY3Rpb24obykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG8pOyAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChvICE9PSBPYmplY3QobykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaz1bXSwgcDtcbiAgICAgICAgICAgICAgICBmb3IgKHAgaW4gbykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8scCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGsucHVzaChwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAvKipcbiAgICAgICAgbWV0aG9kIHRvIGVzY2FwZSBodG1sLlxuICAgICAgICoqL1xuICAgICAgIGVzY2FwZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgIHJldHVybiAkKCc8ZGl2PicpLnRleHQoc3RyKS5odG1sKCk7XG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICAvKlxuICAgICAgICByZXR1cm5zIGFycmF5IGl0ZW1zIGZyb20gc291cmNlRGF0YSBoYXZpbmcgdmFsdWUgcHJvcGVydHkgZXF1YWwgb3IgaW5BcnJheSBvZiAndmFsdWUnXG4gICAgICAgKi9cbiAgICAgICBpdGVtc0J5VmFsdWU6IGZ1bmN0aW9uKHZhbHVlLCBzb3VyY2VEYXRhLCB2YWx1ZVByb3ApIHtcbiAgICAgICAgICAgaWYoIXNvdXJjZURhdGEgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICBcbiAgICAgICAgICAgaWYgKHR5cGVvZih2YWx1ZVByb3ApICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgIHZhciBpZEtleSA9IHZhbHVlUHJvcCB8fCAndmFsdWUnO1xuICAgICAgICAgICAgICAgdmFsdWVQcm9wID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGVbaWRLZXldOyB9O1xuICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgIHZhciBpc1ZhbEFycmF5ID0gJC5pc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICAgcmVzdWx0ID0gW10sIFxuICAgICAgICAgICB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAkLmVhY2goc291cmNlRGF0YSwgZnVuY3Rpb24oaSwgbykge1xuICAgICAgICAgICAgICAgaWYoby5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhhdC5pdGVtc0J5VmFsdWUodmFsdWUsIG8uY2hpbGRyZW4sIHZhbHVlUHJvcCkpO1xuICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAvKmpzbGludCBlcWVxOiB0cnVlKi9cbiAgICAgICAgICAgICAgICAgICBpZihpc1ZhbEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgIGlmKCQuZ3JlcCh2YWx1ZSwgZnVuY3Rpb24odil7ICByZXR1cm4gdiA9PSAobyAmJiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgPyB2YWx1ZVByb3AobykgOiBvKTsgfSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvKTsgXG4gICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbVZhbHVlID0gKG8gJiYgKHR5cGVvZiBvID09PSAnb2JqZWN0JykpID8gdmFsdWVQcm9wKG8pIDogbztcbiAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUgPT0gaXRlbVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvKTsgXG4gICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgLypqc2xpbnQgZXFlcTogZmFsc2UqL1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgXG4gICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICAvKlxuICAgICAgIFJldHVybnMgaW5wdXQgYnkgb3B0aW9uczogdHlwZSwgbW9kZS4gXG4gICAgICAgKi9cbiAgICAgICBjcmVhdGVJbnB1dDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICB2YXIgVHlwZUNvbnN0cnVjdG9yLCB0eXBlT3B0aW9ucywgaW5wdXQsXG4gICAgICAgICAgIHR5cGUgPSBvcHRpb25zLnR5cGU7XG5cbiAgICAgICAgICAgLy9gZGF0ZWAgaXMgc29tZSBraW5kIG9mIHZpcnR1YWwgdHlwZSB0aGF0IGlzIHRyYW5zZm9ybWVkIHRvIG9uZSBvZiBleGFjdCB0eXBlc1xuICAgICAgICAgICAvL2RlcGVuZGluZyBvbiBtb2RlIGFuZCBjb3JlIGxpYlxuICAgICAgICAgICBpZih0eXBlID09PSAnZGF0ZScpIHtcbiAgICAgICAgICAgICAgIC8vaW5saW5lXG4gICAgICAgICAgICAgICBpZihvcHRpb25zLm1vZGUgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgaWYoJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGVmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2RhdGVmaWVsZCc7XG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCQuZm4uZWRpdGFibGV0eXBlcy5kYXRldWlmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2RhdGV1aWZpZWxkJztcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAvL3BvcHVwXG4gICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgIGlmKCQuZm4uZWRpdGFibGV0eXBlcy5kYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnZGF0ZSc7XG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCQuZm4uZWRpdGFibGV0eXBlcy5kYXRldWkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdkYXRldWknO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgLy9pZiB0eXBlIHN0aWxsIGBkYXRlYCBhbmQgbm90IGV4aXN0IGluIHR5cGVzLCByZXBsYWNlIHdpdGggYGNvbWJvZGF0ZWAgdGhhdCBpcyBiYXNlIGlucHV0XG4gICAgICAgICAgICAgICBpZih0eXBlID09PSAnZGF0ZScgJiYgISQuZm4uZWRpdGFibGV0eXBlcy5kYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgdHlwZSA9ICdjb21ib2RhdGUnO1xuICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgfVxuICAgICAgICAgICBcbiAgICAgICAgICAgLy9gZGF0ZXRpbWVgIHNob3VsZCBiZSBkYXRldGltZWZpZWxkIGluICdpbmxpbmUnIG1vZGVcbiAgICAgICAgICAgaWYodHlwZSA9PT0gJ2RhdGV0aW1lJyAmJiBvcHRpb25zLm1vZGUgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICAgdHlwZSA9ICdkYXRldGltZWZpZWxkJzsgIFxuICAgICAgICAgICB9ICAgICAgICAgICBcblxuICAgICAgICAgICAvL2NoYW5nZSB3eXNpaHRtbDUgdG8gdGV4dGFyZWEgZm9yIGpxdWVyeSBVSSBhbmQgcGxhaW4gdmVyc2lvbnNcbiAgICAgICAgICAgaWYodHlwZSA9PT0gJ3d5c2lodG1sNScgJiYgISQuZm4uZWRpdGFibGV0eXBlc1t0eXBlXSkge1xuICAgICAgICAgICAgICAgdHlwZSA9ICd0ZXh0YXJlYSc7XG4gICAgICAgICAgIH1cblxuICAgICAgICAgICAvL2NyZWF0ZSBpbnB1dCBvZiBzcGVjaWZpZWQgdHlwZS4gSW5wdXQgd2lsbCBiZSB1c2VkIGZvciBjb252ZXJ0aW5nIHZhbHVlLCBub3QgaW4gZm9ybVxuICAgICAgICAgICBpZih0eXBlb2YgJC5mbi5lZGl0YWJsZXR5cGVzW3R5cGVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICBUeXBlQ29uc3RydWN0b3IgPSAkLmZuLmVkaXRhYmxldHlwZXNbdHlwZV07XG4gICAgICAgICAgICAgICB0eXBlT3B0aW9ucyA9IHRoaXMuc2xpY2VPYmoob3B0aW9ucywgdGhpcy5vYmplY3RLZXlzKFR5cGVDb25zdHJ1Y3Rvci5kZWZhdWx0cykpO1xuICAgICAgICAgICAgICAgaW5wdXQgPSBuZXcgVHlwZUNvbnN0cnVjdG9yKHR5cGVPcHRpb25zKTtcbiAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICQuZXJyb3IoJ1Vua25vd24gdHlwZTogJysgdHlwZSk7XG4gICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IFxuICAgICAgICAgICB9ICBcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIC8vc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzI2NDg5OS9kZXRlY3QtY3NzLXRyYW5zaXRpb25zLXVzaW5nLWphdmFzY3JpcHQtYW5kLXdpdGhvdXQtbW9kZXJuaXpyXG4gICAgICAgc3VwcG9ydHNUcmFuc2l0aW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICB2YXIgYiA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICAgICAgICAgcyA9IGIuc3R5bGUsXG4gICAgICAgICAgICAgICBwID0gJ3RyYW5zaXRpb24nLFxuICAgICAgICAgICAgICAgdiA9IFsnTW96JywgJ1dlYmtpdCcsICdLaHRtbCcsICdPJywgJ21zJ107XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgaWYodHlwZW9mIHNbcF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgXG4gICAgICAgICAgIH1cblxuICAgICAgICAgICAvLyBUZXN0cyBmb3IgdmVuZG9yIHNwZWNpZmljIHByb3BcbiAgICAgICAgICAgcCA9IHAuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwLnN1YnN0cigxKTtcbiAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8di5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgaWYodHlwZW9mIHNbdltpXSArIHBdID09PSAnc3RyaW5nJykgeyBcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgXG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICBcbiAgICB9OyAgICAgIFxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuQXR0YWNoZXMgc3RhbmQtYWxvbmUgY29udGFpbmVyIHdpdGggZWRpdGFibGUtZm9ybSB0byBIVE1MIGVsZW1lbnQuIEVsZW1lbnQgaXMgdXNlZCBvbmx5IGZvciBwb3NpdGlvbmluZywgdmFsdWUgaXMgbm90IHN0b3JlZCBhbnl3aGVyZS48YnI+XG5UaGlzIG1ldGhvZCBhcHBsaWVkIGludGVybmFsbHkgaW4gPGNvZGU+JCgpLmVkaXRhYmxlKCk8L2NvZGU+LiBZb3Ugc2hvdWxkIHN1YnNjcmliZSBvbiBpdCdzIGV2ZW50cyAoc2F2ZSAvIGNhbmNlbCkgdG8gZ2V0IHByb2ZpdCBvZiBpdC48YnI+XG5GaW5hbCByZWFsaXphdGlvbiBjYW4gYmUgZGlmZmVyZW50OiBib290c3RyYXAtcG9wb3ZlciwganF1ZXJ5dWktdG9vbHRpcCwgcG9zaHl0aXAsIGlubGluZS1kaXYuIEl0IGRlcGVuZHMgb24gd2hpY2gganMgZmlsZSB5b3UgaW5jbHVkZS48YnI+XG5BcHBsaWVkIGFzIGpRdWVyeSBtZXRob2QuXG5cbkBjbGFzcyBlZGl0YWJsZUNvbnRhaW5lclxuQHVzZXMgZWRpdGFibGVmb3JtXG4qKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIFBvcHVwID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgXG4gICAgdmFyIElubGluZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdChlbGVtZW50LCBvcHRpb25zKTtcbiAgICB9OyAgICBcblxuICAgIC8vbWV0aG9kc1xuICAgIFBvcHVwLnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29udGFpbmVyTmFtZTogbnVsbCwgLy9tZXRob2QgdG8gY2FsbCBjb250YWluZXIgb24gZWxlbWVudFxuICAgICAgICBjb250YWluZXJEYXRhTmFtZTogbnVsbCwgLy9vYmplY3QgbmFtZSBpbiBlbGVtZW50J3MgLmRhdGEoKVxuICAgICAgICBpbm5lckNzczogbnVsbCwgLy90YmQgaW4gY2hpbGQgY2xhc3NcbiAgICAgICAgY29udGFpbmVyQ2xhc3M6ICdlZGl0YWJsZS1jb250YWluZXIgZWRpdGFibGUtcG9wdXAnLCAvL2NzcyBjbGFzcyBhcHBsaWVkIHRvIGNvbnRhaW5lciBlbGVtZW50XG4gICAgICAgIGRlZmF1bHRzOiB7fSwgLy9jb250YWluZXIgaXRzZWxmIGRlZmF1bHRzXG4gICAgICAgIFxuICAgICAgICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIC8vc2luY2UgMS40LjEgY29udGFpbmVyIGRvIG5vdCB1c2UgZGF0YS0qIGRpcmVjdGx5IGFzIHRoZXkgYWxyZWFkeSBtZXJnZWQgaW50byBvcHRpb25zLlxuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGVDb250YWluZXIuZGVmYXVsdHMsIG9wdGlvbnMpOyAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zcGxpdE9wdGlvbnMoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9zZXQgc2NvcGUgb2YgZm9ybSBjYWxsYmFja3MgdG8gZWxlbWVudFxuICAgICAgICAgICAgdGhpcy5mb3JtT3B0aW9ucy5zY29wZSA9IHRoaXMuJGVsZW1lbnRbMF07IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmluaXRDb250YWluZXIoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9mbGFnIHRvIGhpZGUgY29udGFpbmVyLCB3aGVuIHNhdmluZyB2YWx1ZSB3aWxsIGZpbmlzaFxuICAgICAgICAgICAgdGhpcy5kZWxheWVkSGlkZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvL2JpbmQgJ2Rlc3Ryb3llZCcgbGlzdGVuZXIgdG8gZGVzdHJveSBjb250YWluZXIgd2hlbiBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSBkb21cbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2Rlc3Ryb3llZCcsICQucHJveHkoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH0sIHRoaXMpKTsgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vYXR0YWNoIGRvY3VtZW50IGhhbmRsZXIgdG8gY2xvc2UgY29udGFpbmVycyBvbiBjbGljayAvIGVzY2FwZVxuICAgICAgICAgICAgaWYoISQoZG9jdW1lbnQpLmRhdGEoJ2VkaXRhYmxlLWhhbmRsZXJzLWF0dGFjaGVkJykpIHtcbiAgICAgICAgICAgICAgICAvL2Nsb3NlIGFsbCBvbiBlc2NhcGVcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbigna2V5dXAuZWRpdGFibGUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS53aGljaCA9PT0gMjcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5lZGl0YWJsZS1vcGVuJykuZWRpdGFibGVDb250YWluZXIoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9kbzogcmV0dXJuIGZvY3VzIG9uIGVsZW1lbnQgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vY2xvc2UgY29udGFpbmVycyB3aGVuIGNsaWNrIG91dHNpZGUgXG4gICAgICAgICAgICAgICAgLy8obW91c2Vkb3duIGNvdWxkIGJlIGJldHRlciB0aGFuIGNsaWNrLCBpdCBjbG9zZXMgZXZlcnl0aGluZyBhbHNvIG9uIGRyYWcgZHJvcClcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2suZWRpdGFibGUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkdGFyZ2V0ID0gJChlLnRhcmdldCksIGksXG4gICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlX2NsYXNzZXMgPSBbJy5lZGl0YWJsZS1jb250YWluZXInLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLnVpLWRhdGVwaWNrZXItaGVhZGVyJywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5kYXRlcGlja2VyJywgLy9pbiBpbmxpbmUgbW9kZSBkYXRlcGlja2VyIGlzIHJlbmRlcmVkIGludG8gYm9keVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcubW9kYWwtYmFja2Ryb3AnLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLmJvb3RzdHJhcC13eXNpaHRtbDUtaW5zZXJ0LWltYWdlLW1vZGFsJywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5ib290c3RyYXAtd3lzaWh0bWw1LWluc2VydC1saW5rLW1vZGFsJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGVsZW1lbnQgaXMgZGV0YWNoZWQuIEl0IG9jY3VycyB3aGVuIGNsaWNraW5nIGluIGJvb3RzdHJhcCBkYXRlcGlja2VyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJC5jb250YWlucyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vZm9yIHNvbWUgcmVhc29uIEZGIDIwIGdlbmVyYXRlcyBleHRyYSBldmVudCAoY2xpY2spIGluIHNlbGVjdDIgd2lkZ2V0IHdpdGggZS50YXJnZXQgPSBkb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAvL3dlIG5lZWQgdG8gZmlsdGVyIGl0IHZpYSBjb25zdHJ1Y3Rpb24gYmVsb3cuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdml0YWxldHMveC1lZGl0YWJsZS9pc3N1ZXMvMTk5XG4gICAgICAgICAgICAgICAgICAgIC8vUG9zc2libHkgcmVsYXRlZCB0byBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwMTE5NzkzL3doeS1kb2VzLWZpcmVmb3gtcmVhY3QtZGlmZmVyZW50bHktZnJvbS13ZWJraXQtYW5kLWllLXRvLWNsaWNrLWV2ZW50LW9uLXNlbGVjXG4gICAgICAgICAgICAgICAgICAgIGlmKCR0YXJnZXQuaXMoZG9jdW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgY2xpY2sgaW5zaWRlIG9uZSBvZiBleGNsdWRlIGNsYXNzZXMgLS0+IG5vIG5vdGhpbmdcbiAgICAgICAgICAgICAgICAgICAgZm9yKGk9MDsgaTxleGNsdWRlX2NsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZigkdGFyZ2V0LmlzKGV4Y2x1ZGVfY2xhc3Nlc1tpXSkgfHwgJHRhcmdldC5wYXJlbnRzKGV4Y2x1ZGVfY2xhc3Nlc1tpXSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy9jbG9zZSBhbGwgb3BlbiBjb250YWluZXJzIChleGNlcHQgb25lIC0gdGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICBQb3B1cC5wcm90b3R5cGUuY2xvc2VPdGhlcnMoZS50YXJnZXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLmRhdGEoJ2VkaXRhYmxlLWhhbmRsZXJzLWF0dGFjaGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy9zcGxpdCBvcHRpb25zIG9uIGNvbnRhaW5lck9wdGlvbnMgYW5kIGZvcm1PcHRpb25zXG4gICAgICAgIHNwbGl0T3B0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lck9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuZm9ybU9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoISQuZm5bdGhpcy5jb250YWluZXJOYW1lXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLmNvbnRhaW5lck5hbWUgKyAnIG5vdCBmb3VuZC4gSGF2ZSB5b3UgaW5jbHVkZWQgY29ycmVzcG9uZGluZyBqcyBmaWxlPycpOyAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2tleXMgZGVmaW5lZCBpbiBjb250YWluZXIgZGVmYXVsdHMgZ28gdG8gY29udGFpbmVyLCBvdGhlcnMgZ28gdG8gZm9ybVxuICAgICAgICAgICAgZm9yKHZhciBrIGluIHRoaXMub3B0aW9ucykge1xuICAgICAgICAgICAgICBpZihrIGluIHRoaXMuZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJPcHRpb25zW2tdID0gdGhpcy5vcHRpb25zW2tdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICB0aGlzLmZvcm1PcHRpb25zW2tdID0gdGhpcy5vcHRpb25zW2tdO1xuICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgUmV0dXJucyBqcXVlcnkgb2JqZWN0IG9mIGNvbnRhaW5lclxuICAgICAgICBAbWV0aG9kIHRpcCgpXG4gICAgICAgICovICAgICAgICAgXG4gICAgICAgIHRpcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIoKSA/IHRoaXMuY29udGFpbmVyKCkuJHRpcCA6IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyogcmV0dXJucyBjb250YWluZXIgb2JqZWN0ICovXG4gICAgICAgIGNvbnRhaW5lcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyO1xuICAgICAgICAgICAgLy9maXJzdCwgdHJ5IGdldCBpdCBieSBgY29udGFpbmVyRGF0YU5hbWVgXG4gICAgICAgICAgICBpZih0aGlzLmNvbnRhaW5lckRhdGFOYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYoY29udGFpbmVyID0gdGhpcy4kZWxlbWVudC5kYXRhKHRoaXMuY29udGFpbmVyRGF0YU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9zZWNvbmQsIHRyeSBgY29udGFpbmVyTmFtZWBcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IHRoaXMuJGVsZW1lbnQuZGF0YSh0aGlzLmNvbnRhaW5lck5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiBjYWxsIG5hdGl2ZSBtZXRob2Qgb2YgdW5kZXJseWluZyBjb250YWluZXIsIGUuZy4gdGhpcy4kZWxlbWVudC5wb3BvdmVyKCdtZXRob2QnKSAqLyBcbiAgICAgICAgY2FsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50W3RoaXMuY29udGFpbmVyTmFtZV0uYXBwbHkodGhpcy4kZWxlbWVudCwgYXJndW1lbnRzKTsgXG4gICAgICAgIH0sICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGluaXRDb250YWluZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB0aGlzLmNhbGwodGhpcy5jb250YWluZXJPcHRpb25zKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXJGb3JtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGZvcm1cbiAgICAgICAgICAgIC5lZGl0YWJsZWZvcm0odGhpcy5mb3JtT3B0aW9ucylcbiAgICAgICAgICAgIC5vbih7XG4gICAgICAgICAgICAgICAgc2F2ZTogJC5wcm94eSh0aGlzLnNhdmUsIHRoaXMpLCAvL2NsaWNrIG9uIHN1Ym1pdCBidXR0b24gKHZhbHVlIGNoYW5nZWQpXG4gICAgICAgICAgICAgICAgbm9jaGFuZ2U6ICQucHJveHkoZnVuY3Rpb24oKXsgdGhpcy5oaWRlKCdub2NoYW5nZScpOyB9LCB0aGlzKSwgLy9jbGljayBvbiBzdWJtaXQgYnV0dG9uICh2YWx1ZSBOT1QgY2hhbmdlZCkgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2FuY2VsOiAkLnByb3h5KGZ1bmN0aW9uKCl7IHRoaXMuaGlkZSgnY2FuY2VsJyk7IH0sIHRoaXMpLCAvL2NsaWNrIG9uIGNhbGNlbCBidXR0b25cbiAgICAgICAgICAgICAgICBzaG93OiAkLnByb3h5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmRlbGF5ZWRIaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUodGhpcy5kZWxheWVkSGlkZS5yZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxheWVkSGlkZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgdGhpcyksIC8vcmUtcG9zaXRpb24gY29udGFpbmVyIGV2ZXJ5IHRpbWUgZm9ybSBpcyBzaG93biAob2NjdXJzIGVhY2ggdGltZSBhZnRlciBsb2FkaW5nIHN0YXRlKVxuICAgICAgICAgICAgICAgIHJlbmRlcmluZzogJC5wcm94eSh0aGlzLnNldFBvc2l0aW9uLCB0aGlzKSwgLy90aGlzIGFsbG93cyB0byBwbGFjZSBjb250YWluZXIgY29ycmVjdGx5IHdoZW4gbG9hZGluZyBzaG93blxuICAgICAgICAgICAgICAgIHJlc2l6ZTogJC5wcm94eSh0aGlzLnNldFBvc2l0aW9uLCB0aGlzKSwgLy90aGlzIGFsbG93cyB0byByZS1wb3NpdGlvbiBjb250YWluZXIgd2hlbiBmb3JtIHNpemUgaXMgY2hhbmdlZCBcbiAgICAgICAgICAgICAgICByZW5kZXJlZDogJC5wcm94eShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAvKiogICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBGaXJlZCB3aGVuIGNvbnRhaW5lciBpcyBzaG93biBhbmQgZm9ybSBpcyByZW5kZXJlZCAoZm9yIHNlbGVjdCB3aWxsIHdhaXQgZm9yIGxvYWRpbmcgZHJvcGRvd24gb3B0aW9ucykuICBcbiAgICAgICAgICAgICAgICAgICAgKipOb3RlOioqIEJvb3RzdHJhcCBwb3BvdmVyIGhhcyBvd24gYHNob3duYCBldmVudCB0aGF0IG5vdyBjYW5ub3QgYmUgc2VwYXJhdGVkIGZyb20geC1lZGl0YWJsZSdzIG9uZS5cbiAgICAgICAgICAgICAgICAgICAgVGhlIHdvcmthcm91bmQgaXMgdG8gY2hlY2sgYGFyZ3VtZW50cy5sZW5ndGhgIHRoYXQgaXMgYWx3YXlzIGAyYCBmb3IgeC1lZGl0YWJsZS4gICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIEBldmVudCBzaG93biBcbiAgICAgICAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgICAgICAgICBAZXhhbXBsZVxuICAgICAgICAgICAgICAgICAgICAkKCcjdXNlcm5hbWUnKS5vbignc2hvd24nLCBmdW5jdGlvbihlLCBlZGl0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdGFibGUuaW5wdXQuJGlucHV0LnZhbCgnb3ZlcndyaXRpbmcgdmFsdWUgb2YgaW5wdXQuLicpO1xuICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgKiovICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgVE9ETzogYWRkZWQgc2Vjb25kIHBhcmFtIG1haW5seSB0byBkaXN0aW5ndWlzaCBmcm9tIGJvb3RzdHJhcCdzIHNob3duIGV2ZW50LiBJdCdzIGEgaG90Zml4IHRoYXQgd2lsbCBiZSBzb2x2ZWQgaW4gZnV0dXJlIHZlcnNpb25zIHZpYSBuYW1lc3BhY2VkIGV2ZW50cy4gIFxuICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCdzaG93bicsICQodGhpcy5vcHRpb25zLnNjb3BlKS5kYXRhKCdlZGl0YWJsZScpKTsgXG4gICAgICAgICAgICAgICAgfSwgdGhpcykgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmVkaXRhYmxlZm9ybSgncmVuZGVyJyk7XG4gICAgICAgIH0sICAgICAgICBcblxuICAgICAgICAvKipcbiAgICAgICAgU2hvd3MgY29udGFpbmVyIHdpdGggZm9ybVxuICAgICAgICBAbWV0aG9kIHNob3coKVxuICAgICAgICBAcGFyYW0ge2Jvb2xlYW59IGNsb3NlQWxsIFdoZXRoZXIgdG8gY2xvc2UgYWxsIG90aGVyIGVkaXRhYmxlIGNvbnRhaW5lcnMgd2hlbiBzaG93aW5nIHRoaXMgb25lLiBEZWZhdWx0IHRydWUuXG4gICAgICAgICoqL1xuICAgICAgICAvKiBOb3RlOiBwb3NoeXRpcCBvd2Vyd3JpdGVzIHRoaXMgbWV0aG9kIHRvdGFsbHkhICovICAgICAgICAgIFxuICAgICAgICBzaG93OiBmdW5jdGlvbiAoY2xvc2VBbGwpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2VkaXRhYmxlLW9wZW4nKTtcbiAgICAgICAgICAgIGlmKGNsb3NlQWxsICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIC8vY2xvc2UgYWxsIG9wZW4gY29udGFpbmVycyAoZXhjZXB0IHRoaXMpXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZU90aGVycyh0aGlzLiRlbGVtZW50WzBdKTsgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3Nob3cgY29udGFpbmVyIGl0c2VsZlxuICAgICAgICAgICAgdGhpcy5pbm5lclNob3coKTtcbiAgICAgICAgICAgIHRoaXMudGlwKCkuYWRkQ2xhc3ModGhpcy5jb250YWluZXJDbGFzcyk7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBDdXJyZW50bHksIGZvcm0gaXMgcmUtcmVuZGVyZWQgb24gZXZlcnkgc2hvdy4gXG4gICAgICAgICAgICBUaGUgbWFpbiByZWFzb24gaXMgdGhhdCB3ZSBkb250IGtub3csIHdoYXQgd2lsbCBjb250YWluZXIgZG8gd2l0aCBjb250ZW50IHdoZW4gY2xvc2VkOlxuICAgICAgICAgICAgcmVtb3ZlKCksIGRldGFjaCgpIG9yIGp1c3QgaGlkZSgpIC0gaXQgZGVwZW5kcyBvbiBjb250YWluZXIuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIERldGFjaGluZyBmb3JtIGl0c2VsZiBiZWZvcmUgaGlkZSBhbmQgcmUtaW5zZXJ0IGJlZm9yZSBzaG93IGlzIGdvb2Qgc29sdXRpb24sIFxuICAgICAgICAgICAgYnV0IHZpc3VhbGx5IGl0IGxvb2tzIHVnbHkgLS0+IGNvbnRhaW5lciBjaGFuZ2VzIHNpemUgYmVmb3JlIGhpZGUuICBcbiAgICAgICAgICAgICovICAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2lmIGZvcm0gYWxyZWFkeSBleGlzdCAtIGRlbGV0ZSBwcmV2aW91cyBkYXRhIFxuICAgICAgICAgICAgaWYodGhpcy4kZm9ybSkge1xuICAgICAgICAgICAgICAgIC8vdG9kbzogZGVzdHJveSBwcmV2IGRhdGEhXG4gICAgICAgICAgICAgICAgLy90aGlzLiRmb3JtLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy4kZm9ybSA9ICQoJzxkaXY+Jyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaW5zZXJ0IGZvcm0gaW50byBjb250YWluZXIgYm9keVxuICAgICAgICAgICAgaWYodGhpcy50aXAoKS5pcyh0aGlzLmlubmVyQ3NzKSkge1xuICAgICAgICAgICAgICAgIC8vZm9yIGlubGluZSBjb250YWluZXJcbiAgICAgICAgICAgICAgICB0aGlzLnRpcCgpLmFwcGVuZCh0aGlzLiRmb3JtKTsgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudGlwKCkuZmluZCh0aGlzLmlubmVyQ3NzKS5hcHBlbmQodGhpcy4kZm9ybSk7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3JlbmRlciBmb3JtXG4gICAgICAgICAgICB0aGlzLnJlbmRlckZvcm0oKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgSGlkZXMgY29udGFpbmVyIHdpdGggZm9ybVxuICAgICAgICBAbWV0aG9kIGhpZGUoKVxuICAgICAgICBAcGFyYW0ge3N0cmluZ30gcmVhc29uIFJlYXNvbiBjYXVzZWQgaGlkaW5nLiBDYW4gYmUgPGNvZGU+c2F2ZXxjYW5jZWx8b25ibHVyfG5vY2hhbmdlfHVuZGVmaW5lZCAoPW1hbnVhbCk8L2NvZGU+XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBoaWRlOiBmdW5jdGlvbihyZWFzb24pIHsgIFxuICAgICAgICAgICAgaWYoIXRoaXMudGlwKCkgfHwgIXRoaXMudGlwKCkuaXMoJzp2aXNpYmxlJykgfHwgIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2VkaXRhYmxlLW9wZW4nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9pZiBmb3JtIGlzIHNhdmluZyB2YWx1ZSwgc2NoZWR1bGUgaGlkZVxuICAgICAgICAgICAgaWYodGhpcy4kZm9ybS5kYXRhKCdlZGl0YWJsZWZvcm0nKS5pc1NhdmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsYXllZEhpZGUgPSB7cmVhc29uOiByZWFzb259O1xuICAgICAgICAgICAgICAgIHJldHVybjsgICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsYXllZEhpZGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnZWRpdGFibGUtb3BlbicpOyAgIFxuICAgICAgICAgICAgdGhpcy5pbm5lckhpZGUoKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICBGaXJlZCB3aGVuIGNvbnRhaW5lciB3YXMgaGlkZGVuLiBJdCBvY2N1cnMgb24gYm90aCBzYXZlIG9yIGNhbmNlbC4gIFxuICAgICAgICAgICAgKipOb3RlOioqIEJvb3RzdHJhcCBwb3BvdmVyIGhhcyBvd24gYGhpZGRlbmAgZXZlbnQgdGhhdCBub3cgY2Fubm90IGJlIHNlcGFyYXRlZCBmcm9tIHgtZWRpdGFibGUncyBvbmUuXG4gICAgICAgICAgICBUaGUgd29ya2Fyb3VuZCBpcyB0byBjaGVjayBgYXJndW1lbnRzLmxlbmd0aGAgdGhhdCBpcyBhbHdheXMgYDJgIGZvciB4LWVkaXRhYmxlLiBcblxuICAgICAgICAgICAgQGV2ZW50IGhpZGRlbiBcbiAgICAgICAgICAgIEBwYXJhbSB7b2JqZWN0fSBldmVudCBldmVudCBvYmplY3RcbiAgICAgICAgICAgIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gUmVhc29uIGNhdXNlZCBoaWRpbmcuIENhbiBiZSA8Y29kZT5zYXZlfGNhbmNlbHxvbmJsdXJ8bm9jaGFuZ2V8bWFudWFsPC9jb2RlPlxuICAgICAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgICAgICQoJyN1c2VybmFtZScpLm9uKCdoaWRkZW4nLCBmdW5jdGlvbihlLCByZWFzb24pIHtcbiAgICAgICAgICAgICAgICBpZihyZWFzb24gPT09ICdzYXZlJyB8fCByZWFzb24gPT09ICdjYW5jZWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vYXV0by1vcGVuIG5leHQgZWRpdGFibGVcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCd0cicpLm5leHQoKS5maW5kKCcuZWRpdGFibGUnKS5lZGl0YWJsZSgnc2hvdycpO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICoqL1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VySGFuZGxlcignaGlkZGVuJywgcmVhc29uIHx8ICdtYW51YWwnKTsgICBcbiAgICAgICAgfSxcblxuICAgICAgICAvKiBpbnRlcm5hbCBzaG93IG1ldGhvZC4gVG8gYmUgb3ZlcndyaXR0ZW4gaW4gY2hpbGQgY2xhc3NlcyAqL1xuICAgICAgICBpbm5lclNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICBcbiAgICAgICAgfSwgICAgICAgIFxuXG4gICAgICAgIC8qIGludGVybmFsIGhpZGUgbWV0aG9kLiBUbyBiZSBvdmVyd3JpdHRlbiBpbiBjaGlsZCBjbGFzc2VzICovXG4gICAgICAgIGlubmVySGlkZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgVG9nZ2xlcyBjb250YWluZXIgdmlzaWJpbGl0eSAoc2hvdyAvIGhpZGUpXG4gICAgICAgIEBtZXRob2QgdG9nZ2xlKClcbiAgICAgICAgQHBhcmFtIHtib29sZWFufSBjbG9zZUFsbCBXaGV0aGVyIHRvIGNsb3NlIGFsbCBvdGhlciBlZGl0YWJsZSBjb250YWluZXJzIHdoZW4gc2hvd2luZyB0aGlzIG9uZS4gRGVmYXVsdCB0cnVlLlxuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oY2xvc2VBbGwpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuY29udGFpbmVyKCkgJiYgdGhpcy50aXAoKSAmJiB0aGlzLnRpcCgpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhjbG9zZUFsbCk7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qXG4gICAgICAgIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIGNvbnRhaW5lciB3aGVuIGNvbnRlbnQgY2hhbmdlZC5cbiAgICAgICAgQG1ldGhvZCBzZXRQb3NpdGlvbigpXG4gICAgICAgICovICAgICAgIFxuICAgICAgICBzZXRQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvL3RiZCBpbiBjaGlsZCBjbGFzc1xuICAgICAgICB9LFxuXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uKGUsIHBhcmFtcykge1xuICAgICAgICAgICAgLyoqICAgICAgICBcbiAgICAgICAgICAgIEZpcmVkIHdoZW4gbmV3IHZhbHVlIHdhcyBzdWJtaXR0ZWQuIFlvdSBjYW4gdXNlIDxjb2RlPiQodGhpcykuZGF0YSgnZWRpdGFibGVDb250YWluZXInKTwvY29kZT4gaW5zaWRlIGhhbmRsZXIgdG8gYWNjZXNzIHRvIGVkaXRhYmxlQ29udGFpbmVyIGluc3RhbmNlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEBldmVudCBzYXZlIFxuICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBhZGRpdGlvbmFsIHBhcmFtc1xuICAgICAgICAgICAgQHBhcmFtIHttaXhlZH0gcGFyYW1zLm5ld1ZhbHVlIHN1Ym1pdHRlZCB2YWx1ZVxuICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IHBhcmFtcy5yZXNwb25zZSBhamF4IHJlc3BvbnNlXG4gICAgICAgICAgICBAZXhhbXBsZVxuICAgICAgICAgICAgJCgnI3VzZXJuYW1lJykub24oJ3NhdmUnLCBmdW5jdGlvbihlLCBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAvL2Fzc3VtaW5nIHNlcnZlciByZXNwb25zZTogJ3tzdWNjZXNzOiB0cnVlfSdcbiAgICAgICAgICAgICAgICB2YXIgcGsgPSAkKHRoaXMpLmRhdGEoJ2VkaXRhYmxlQ29udGFpbmVyJykub3B0aW9ucy5waztcbiAgICAgICAgICAgICAgICBpZihwYXJhbXMucmVzcG9uc2UgJiYgcGFyYW1zLnJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ3ZhbHVlOiAnICsgcGFyYW1zLm5ld1ZhbHVlICsgJyB3aXRoIHBrOiAnICsgcGsgKyAnIHNhdmVkIScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdlcnJvciEnKTsgXG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKiovICAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VySGFuZGxlcignc2F2ZScsIHBhcmFtcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaGlkZSBtdXN0IGJlIGFmdGVyIHRyaWdnZXIsIGFzIHNhdmluZyB2YWx1ZSBtYXkgcmVxdWlyZSBtZXRob2RzIG9mIHBsdWdpbiwgYXBwbGllZCB0byBpbnB1dFxuICAgICAgICAgICAgdGhpcy5oaWRlKCdzYXZlJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgIFNldHMgbmV3IG9wdGlvblxuICAgICAgICBcbiAgICAgICAgQG1ldGhvZCBvcHRpb24oa2V5LCB2YWx1ZSlcbiAgICAgICAgQHBhcmFtIHtzdHJpbmd9IGtleSBcbiAgICAgICAgQHBhcmFtIHttaXhlZH0gdmFsdWUgXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBvcHRpb246IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICBpZihrZXkgaW4gdGhpcy5jb250YWluZXJPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJPcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENvbnRhaW5lck9wdGlvbihrZXksIHZhbHVlKTsgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9ybU9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuJGZvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5lZGl0YWJsZWZvcm0oJ29wdGlvbicsIGtleSwgdmFsdWUpOyAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgc2V0Q29udGFpbmVyT3B0aW9uOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGwoJ29wdGlvbicsIGtleSwgdmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICBEZXN0cm95cyB0aGUgY29udGFpbmVyIGluc3RhbmNlXG4gICAgICAgIEBtZXRob2QgZGVzdHJveSgpXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB0aGlzLmlubmVyRGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2Rlc3Ryb3llZCcpO1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVEYXRhKCdlZGl0YWJsZUNvbnRhaW5lcicpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyogdG8gYmUgb3ZlcndyaXR0ZW4gaW4gY2hpbGQgY2xhc3NlcyAqL1xuICAgICAgICBpbm5lckRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXG4gICAgICAgIH0sIFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgQ2xvc2VzIG90aGVyIGNvbnRhaW5lcnMgZXhjZXB0IG9uZSByZWxhdGVkIHRvIHBhc3NlZCBlbGVtZW50LiBcbiAgICAgICAgT3RoZXIgY29udGFpbmVycyBjYW4gYmUgY2FuY2VsbGVkIG9yIHN1Ym1pdHRlZCAoZGVwZW5kcyBvbiBvbmJsdXIgb3B0aW9uKVxuICAgICAgICAqL1xuICAgICAgICBjbG9zZU90aGVyczogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgJCgnLmVkaXRhYmxlLW9wZW4nKS5lYWNoKGZ1bmN0aW9uKGksIGVsKXtcbiAgICAgICAgICAgICAgICAvL2RvIG5vdGhpbmcgd2l0aCBwYXNzZWQgZWxlbWVudCBhbmQgaXQncyBjaGlsZHJlblxuICAgICAgICAgICAgICAgIGlmKGVsID09PSBlbGVtZW50IHx8ICQoZWwpLmZpbmQoZWxlbWVudCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL290aGVyd2lzZSBjYW5jZWwgb3Igc3VibWl0IGFsbCBvcGVuIGNvbnRhaW5lcnMgXG4gICAgICAgICAgICAgICAgdmFyICRlbCA9ICQoZWwpLFxuICAgICAgICAgICAgICAgIGVjID0gJGVsLmRhdGEoJ2VkaXRhYmxlQ29udGFpbmVyJyk7XG5cbiAgICAgICAgICAgICAgICBpZighZWMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKGVjLm9wdGlvbnMub25ibHVyID09PSAnY2FuY2VsJykge1xuICAgICAgICAgICAgICAgICAgICAkZWwuZGF0YSgnZWRpdGFibGVDb250YWluZXInKS5oaWRlKCdvbmJsdXInKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoZWMub3B0aW9ucy5vbmJsdXIgPT09ICdzdWJtaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICRlbC5kYXRhKCdlZGl0YWJsZUNvbnRhaW5lcicpLnRpcCgpLmZpbmQoJ2Zvcm0nKS5zdWJtaXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIEFjdGl2YXRlcyBpbnB1dCBvZiB2aXNpYmxlIGNvbnRhaW5lciAoZS5nLiBzZXQgZm9jdXMpXG4gICAgICAgIEBtZXRob2QgYWN0aXZhdGUoKVxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYodGhpcy50aXAgJiYgdGhpcy50aXAoKS5pcygnOnZpc2libGUnKSAmJiB0aGlzLiRmb3JtKSB7XG4gICAgICAgICAgICAgICB0aGlzLiRmb3JtLmRhdGEoJ2VkaXRhYmxlZm9ybScpLmlucHV0LmFjdGl2YXRlKCk7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9IFxuXG4gICAgfTtcblxuICAgIC8qKlxuICAgIGpRdWVyeSBtZXRob2QgdG8gaW5pdGlhbGl6ZSBlZGl0YWJsZUNvbnRhaW5lci5cbiAgICBcbiAgICBAbWV0aG9kICQoKS5lZGl0YWJsZUNvbnRhaW5lcihvcHRpb25zKVxuICAgIEBwYXJhbXMge09iamVjdH0gb3B0aW9uc1xuICAgIEBleGFtcGxlXG4gICAgJCgnI2VkaXQnKS5lZGl0YWJsZUNvbnRhaW5lcih7XG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgdXJsOiAnL3Bvc3QnLFxuICAgICAgICBwazogMSxcbiAgICAgICAgdmFsdWU6ICdoZWxsbydcbiAgICB9KTtcbiAgICAqKi8gIFxuICAgICQuZm4uZWRpdGFibGVDb250YWluZXIgPSBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXG4gICAgICAgICAgICBkYXRhS2V5ID0gJ2VkaXRhYmxlQ29udGFpbmVyJywgXG4gICAgICAgICAgICBkYXRhID0gJHRoaXMuZGF0YShkYXRhS2V5KSxcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09PSAnb2JqZWN0JyAmJiBvcHRpb24sXG4gICAgICAgICAgICBDb25zdHJ1Y3RvciA9IChvcHRpb25zLm1vZGUgPT09ICdpbmxpbmUnKSA/IElubGluZSA6IFBvcHVwOyAgICAgICAgICAgICBcblxuICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YShkYXRhS2V5LCAoZGF0YSA9IG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBvcHRpb25zKSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycpIHsgLy9jYWxsIG1ldGhvZCBcbiAgICAgICAgICAgICAgICBkYXRhW29wdGlvbl0uYXBwbHkoZGF0YSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSkpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICB9OyAgICAgXG5cbiAgICAvL3N0b3JlIGNvbnN0cnVjdG9yc1xuICAgICQuZm4uZWRpdGFibGVDb250YWluZXIuUG9wdXAgPSBQb3B1cDtcbiAgICAkLmZuLmVkaXRhYmxlQ29udGFpbmVyLklubGluZSA9IElubGluZTtcblxuICAgIC8vZGVmYXVsdHNcbiAgICAkLmZuLmVkaXRhYmxlQ29udGFpbmVyLmRlZmF1bHRzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgSW5pdGlhbCB2YWx1ZSBvZiBmb3JtIGlucHV0XG5cbiAgICAgICAgQHByb3BlcnR5IHZhbHVlIFxuICAgICAgICBAdHlwZSBtaXhlZFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBwcml2YXRlXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgUGxhY2VtZW50IG9mIGNvbnRhaW5lciByZWxhdGl2ZSB0byBlbGVtZW50LiBDYW4gYmUgPGNvZGU+dG9wfHJpZ2h0fGJvdHRvbXxsZWZ0PC9jb2RlPi4gTm90IHVzZWQgZm9yIGlubGluZSBjb250YWluZXIuXG5cbiAgICAgICAgQHByb3BlcnR5IHBsYWNlbWVudCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICd0b3AnXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgICAgIC8qKlxuICAgICAgICBXaGV0aGVyIHRvIGhpZGUgY29udGFpbmVyIG9uIHNhdmUvY2FuY2VsLlxuXG4gICAgICAgIEBwcm9wZXJ0eSBhdXRvaGlkZSBcbiAgICAgICAgQHR5cGUgYm9vbGVhblxuICAgICAgICBAZGVmYXVsdCB0cnVlXG4gICAgICAgIEBwcml2YXRlIFxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBhdXRvaGlkZTogdHJ1ZSxcbiAgICAgICAgLyoqXG4gICAgICAgIEFjdGlvbiB3aGVuIHVzZXIgY2xpY2tzIG91dHNpZGUgdGhlIGNvbnRhaW5lci4gQ2FuIGJlIDxjb2RlPmNhbmNlbHxzdWJtaXR8aWdub3JlPC9jb2RlPi4gIFxuICAgICAgICBTZXR0aW5nIDxjb2RlPmlnbm9yZTwvY29kZT4gYWxsb3dzIHRvIGhhdmUgc2V2ZXJhbCBjb250YWluZXJzIG9wZW4uIFxuXG4gICAgICAgIEBwcm9wZXJ0eSBvbmJsdXIgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAnY2FuY2VsJ1xuICAgICAgICBAc2luY2UgMS4xLjFcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgb25ibHVyOiAnY2FuY2VsJyxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBBbmltYXRpb24gc3BlZWQgKGlubGluZSBtb2RlIG9ubHkpXG4gICAgICAgIEBwcm9wZXJ0eSBhbmltIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgYW5pbTogZmFsc2UsXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgTW9kZSBvZiBlZGl0YWJsZSwgY2FuIGJlIGBwb3B1cGAgb3IgYGlubGluZWAgXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgbW9kZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nICAgICAgICAgXG4gICAgICAgIEBkZWZhdWx0ICdwb3B1cCdcbiAgICAgICAgQHNpbmNlIDEuNC4wICAgICAgICBcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgbW9kZTogJ3BvcHVwJyAgICAgICAgXG4gICAgfTtcblxuICAgIC8qIFxuICAgICogd29ya2Fyb3VuZCB0byBoYXZlICdkZXN0cm95ZWQnIGV2ZW50IHRvIGRlc3Ryb3kgcG9wb3ZlciB3aGVuIGVsZW1lbnQgaXMgZGVzdHJveWVkXG4gICAgKiBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMjAwNDk0L2pxdWVyeS10cmlnZ2VyLWV2ZW50LXdoZW4tYW4tZWxlbWVudC1pcy1yZW1vdmVkLWZyb20tdGhlLWRvbVxuICAgICovXG4gICAgalF1ZXJ5LmV2ZW50LnNwZWNpYWwuZGVzdHJveWVkID0ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgIGlmIChvLmhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBvLmhhbmRsZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07ICAgIFxuXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG4qIEVkaXRhYmxlIElubGluZSBcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgLy9jb3B5IHByb3RvdHlwZSBmcm9tIEVkaXRhYmxlQ29udGFpbmVyXG4gICAgLy9leHRlbmQgbWV0aG9kc1xuICAgICQuZXh0ZW5kKCQuZm4uZWRpdGFibGVDb250YWluZXIuSW5saW5lLnByb3RvdHlwZSwgJC5mbi5lZGl0YWJsZUNvbnRhaW5lci5Qb3B1cC5wcm90b3R5cGUsIHtcbiAgICAgICAgY29udGFpbmVyTmFtZTogJ2VkaXRhYmxlZm9ybScsXG4gICAgICAgIGlubmVyQ3NzOiAnLmVkaXRhYmxlLWlubGluZScsXG4gICAgICAgIGNvbnRhaW5lckNsYXNzOiAnZWRpdGFibGUtY29udGFpbmVyIGVkaXRhYmxlLWlubGluZScsIC8vY3NzIGNsYXNzIGFwcGxpZWQgdG8gY29udGFpbmVyIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgXG4gICAgICAgIGluaXRDb250YWluZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvL2NvbnRhaW5lciBpcyA8c3Bhbj4gZWxlbWVudFxuICAgICAgICAgICAgdGhpcy4kdGlwID0gJCgnPHNwYW4+PC9zcGFuPicpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2NvbnZlcnQgYW5pbSB0byBtaWxpc2Vjb25kcyAoaW50KVxuICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy5hbmltKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmFuaW0gPSAwO1xuICAgICAgICAgICAgfSAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgc3BsaXRPcHRpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vYWxsIG9wdGlvbnMgYXJlIHBhc3NlZCB0byBmb3JtXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lck9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuZm9ybU9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICB0aXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICByZXR1cm4gdGhpcy4kdGlwOyBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGlubmVyU2hvdzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKCk7XG4gICAgICAgICAgICB0aGlzLnRpcCgpLmluc2VydEFmdGVyKHRoaXMuJGVsZW1lbnQpLnNob3coKTtcbiAgICAgICAgfSwgXG4gICAgICAgIFxuICAgICAgICBpbm5lckhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJHRpcC5oaWRlKHRoaXMub3B0aW9ucy5hbmltLCAkLnByb3h5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuc2hvdygpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJEZXN0cm95KCk7XG4gICAgICAgICAgICB9LCB0aGlzKSk7IFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgaW5uZXJEZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHRoaXMudGlwKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRpcCgpLmVtcHR5KCkucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG4gICAgfSk7XG5cbn0od2luZG93LmpRdWVyeSkpO1xuLyoqXG5NYWtlcyBlZGl0YWJsZSBhbnkgSFRNTCBlbGVtZW50IG9uIHRoZSBwYWdlLiBBcHBsaWVkIGFzIGpRdWVyeSBtZXRob2QuXG5cbkBjbGFzcyBlZGl0YWJsZVxuQHVzZXMgZWRpdGFibGVDb250YWluZXJcbioqL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICB2YXIgRWRpdGFibGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICAgICAgLy9kYXRhLSogaGFzIG1vcmUgcHJpb3JpdHkgb3ZlciBqcyBvcHRpb25zOiBiZWNhdXNlIGR5bmFtaWNhbGx5IGNyZWF0ZWQgZWxlbWVudHMgbWF5IGNoYW5nZSBkYXRhLSogXG4gICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxlLmRlZmF1bHRzLCBvcHRpb25zLCAkLmZuLmVkaXRhYmxldXRpbHMuZ2V0Q29uZmlnRGF0YSh0aGlzLiRlbGVtZW50KSk7ICBcbiAgICAgICAgaWYodGhpcy5vcHRpb25zLnNlbGVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRMaXZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy9jaGVjayBmb3IgdHJhbnNpdGlvbiBzdXBwb3J0XG4gICAgICAgIGlmKHRoaXMub3B0aW9ucy5oaWdobGlnaHQgJiYgISQuZm4uZWRpdGFibGV1dGlscy5zdXBwb3J0c1RyYW5zaXRpb25zKCkpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5oaWdobGlnaHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBFZGl0YWJsZS5wcm90b3R5cGUgPSB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiBFZGl0YWJsZSwgXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpc1ZhbHVlQnlUZXh0ID0gZmFsc2UsIFxuICAgICAgICAgICAgICAgIGRvQXV0b3RleHQsIGZpbmFsaXplO1xuXG4gICAgICAgICAgICAvL25hbWVcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5uYW1lID0gdGhpcy5vcHRpb25zLm5hbWUgfHwgdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpO1xuICAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jcmVhdGUgaW5wdXQgb2Ygc3BlY2lmaWVkIHR5cGUuIElucHV0IG5lZWRlZCBhbHJlYWR5IGhlcmUgdG8gY29udmVydCB2YWx1ZSBmb3IgaW5pdGlhbCBkaXNwbGF5IChlLmcuIHNob3cgdGV4dCBieSBpZCBmb3Igc2VsZWN0KVxuICAgICAgICAgICAgLy9hbHNvIHdlIHNldCBzY29wZSBvcHRpb24gdG8gaGF2ZSBhY2Nlc3MgdG8gZWxlbWVudCBpbnNpZGUgaW5wdXQgc3BlY2lmaWMgY2FsbGJhY2tzIChlLiBnLiBzb3VyY2UgYXMgZnVuY3Rpb24pXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2NvcGUgPSB0aGlzLiRlbGVtZW50WzBdOyBcbiAgICAgICAgICAgIHRoaXMuaW5wdXQgPSAkLmZuLmVkaXRhYmxldXRpbHMuY3JlYXRlSW5wdXQodGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIGlmKCF0aGlzLmlucHV0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyBcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcblxuICAgICAgICAgICAgLy9zZXQgdmFsdWUgZnJvbSBzZXR0aW5ncyBvciBieSBlbGVtZW50J3MgdGV4dFxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy52YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMub3B0aW9ucy52YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmlucHV0Lmh0bWwydmFsdWUoJC50cmltKHRoaXMuJGVsZW1lbnQuaHRtbCgpKSk7XG4gICAgICAgICAgICAgICAgaXNWYWx1ZUJ5VGV4dCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICB2YWx1ZSBjYW4gYmUgc3RyaW5nIHdoZW4gcmVjZWl2ZWQgZnJvbSAnZGF0YS12YWx1ZScgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICBmb3IgY29tcGxleHQgb2JqZWN0cyB2YWx1ZSBjYW4gYmUgc2V0IGFzIGpzb24gc3RyaW5nIGluIGRhdGEtdmFsdWUgYXR0cmlidXRlLCBcbiAgICAgICAgICAgICAgICAgIGUuZy4gZGF0YS12YWx1ZT1cIntjaXR5OiAnTW9zY293Jywgc3RyZWV0OiAnTGVuaW5hJ31cIlxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnZhbHVlID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbih0aGlzLm9wdGlvbnMudmFsdWUsIHRydWUpOyBcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5vcHRpb25zLnZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5pbnB1dC5zdHIydmFsdWUodGhpcy5vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5vcHRpb25zLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9hZGQgJ2VkaXRhYmxlJyBjbGFzcyB0byBldmVyeSBlZGl0YWJsZSBlbGVtZW50XG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdlZGl0YWJsZScpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3NwZWNpZmljYWxseSBmb3IgXCJ0ZXh0YXJlYVwiIGFkZCBjbGFzcyAuZWRpdGFibGUtcHJlLXdyYXBwZWQgdG8ga2VlcCBsaW5lYnJlYWtzXG4gICAgICAgICAgICBpZih0aGlzLmlucHV0LnR5cGUgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdlZGl0YWJsZS1wcmUtd3JhcHBlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2F0dGFjaCBoYW5kbGVyIGFjdGl2YXRpbmcgZWRpdGFibGUuIEluIGRpc2FibGVkIG1vZGUgaXQganVzdCBwcmV2ZW50IGRlZmF1bHQgYWN0aW9uICh1c2VmdWwgZm9yIGxpbmtzKVxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnRvZ2dsZSAhPT0gJ21hbnVhbCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdlZGl0YWJsZS1jbGljaycpO1xuICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24odGhpcy5vcHRpb25zLnRvZ2dsZSArICcuZWRpdGFibGUnLCAkLnByb3h5KGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICAvL3ByZXZlbnQgZm9sbG93aW5nIGxpbmsgaWYgZWRpdGFibGUgZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5vcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vc3RvcCBwcm9wYWdhdGlvbiBub3QgcmVxdWlyZWQgYmVjYXVzZSBpbiBkb2N1bWVudCBjbGljayBoYW5kbGVyIGl0IGNoZWNrcyBldmVudCB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgLy9lLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnRvZ2dsZSA9PT0gJ21vdXNlZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZvciBob3ZlciBvbmx5IHNob3cgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vd2hlbiB0b2dnbGU9J2NsaWNrJyB3ZSBzaG91bGQgbm90IGNsb3NlIGFsbCBvdGhlciBjb250YWluZXJzIGFzIHRoZXkgd2lsbCBiZSBjbG9zZWQgYXV0b21hdGljYWxseSBpbiBkb2N1bWVudCBjbGljayBsaXN0ZW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsb3NlQWxsID0gKHRoaXMub3B0aW9ucy50b2dnbGUgIT09ICdjbGljaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGUoY2xvc2VBbGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JywgLTEpOyAvL2RvIG5vdCBzdG9wIGZvY3VzIG9uIGVsZW1lbnQgd2hlbiB0b2dnbGVkIG1hbnVhbGx5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaWYgZGlzcGxheSBpcyBmdW5jdGlvbiBpdCdzIGZhciBtb3JlIGNvbnZpbmllbnQgdG8gaGF2ZSBhdXRvdGV4dCA9IGFsd2F5cyB0byByZW5kZXIgY29ycmVjdGx5IG9uIGluaXRcbiAgICAgICAgICAgIC8vc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRhbGV0cy94LWVkaXRhYmxlLXlpaS9pc3N1ZXMvMzRcbiAgICAgICAgICAgIGlmKHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlzcGxheSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5hdXRvdGV4dCA9ICdhbHdheXMnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2NoZWNrIGNvbmRpdGlvbnMgZm9yIGF1dG90ZXh0OlxuICAgICAgICAgICAgc3dpdGNoKHRoaXMub3B0aW9ucy5hdXRvdGV4dCkge1xuICAgICAgICAgICAgICBjYXNlICdhbHdheXMnOlxuICAgICAgICAgICAgICAgZG9BdXRvdGV4dCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdhdXRvJzpcbiAgICAgICAgICAgICAgICAvL2lmIGVsZW1lbnQgdGV4dCBpcyBlbXB0eSBhbmQgdmFsdWUgaXMgZGVmaW5lZCBhbmQgdmFsdWUgbm90IGdlbmVyYXRlZCBieSB0ZXh0IC0tPiBydW4gYXV0b3RleHRcbiAgICAgICAgICAgICAgICBkb0F1dG90ZXh0ID0gISQudHJpbSh0aGlzLiRlbGVtZW50LnRleHQoKSkubGVuZ3RoICYmIHRoaXMudmFsdWUgIT09IG51bGwgJiYgdGhpcy52YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFpc1ZhbHVlQnlUZXh0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgIGRvQXV0b3RleHQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9kZXBlbmRpbmcgb24gYXV0b3RleHQgcnVuIHJlbmRlcigpIG9yIGp1c3QgZmluaWxpemUgaW5pdFxuICAgICAgICAgICAgJC53aGVuKGRvQXV0b3RleHQgPyB0aGlzLnJlbmRlcigpIDogdHJ1ZSkudGhlbigkLnByb3h5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSgpOyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAvKiogICAgICAgIFxuICAgICAgICAgICAgICAgRmlyZWQgd2hlbiBlbGVtZW50IHdhcyBpbml0aWFsaXplZCBieSBgJCgpLmVkaXRhYmxlKClgIG1ldGhvZC4gXG4gICAgICAgICAgICAgICBQbGVhc2Ugbm90ZSB0aGF0IHlvdSBzaG91bGQgc2V0dXAgYGluaXRgIGhhbmRsZXIgKipiZWZvcmUqKiBhcHBseWluZyBgZWRpdGFibGVgLiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgQGV2ZW50IGluaXQgXG4gICAgICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gZXZlbnQgZXZlbnQgb2JqZWN0XG4gICAgICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gZWRpdGFibGUgZWRpdGFibGUgaW5zdGFuY2UgKGFzIGhlcmUgaXQgY2Fubm90IGFjY2Vzc2VkIHZpYSBkYXRhKCdlZGl0YWJsZScpKVxuICAgICAgICAgICAgICAgQHNpbmNlIDEuMi4wXG4gICAgICAgICAgICAgICBAZXhhbXBsZVxuICAgICAgICAgICAgICAgJCgnI3VzZXJuYW1lJykub24oJ2luaXQnLCBmdW5jdGlvbihlLCBlZGl0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdpbml0aWFsaXplZCAnICsgZWRpdGFibGUub3B0aW9ucy5uYW1lKTtcbiAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgJCgnI3VzZXJuYW1lJykuZWRpdGFibGUoKTtcbiAgICAgICAgICAgICAgICoqLyAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlckhhbmRsZXIoJ2luaXQnLCB0aGlzKTtcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKlxuICAgICAgICAgSW5pdGlhbGl6ZXMgcGFyZW50IGVsZW1lbnQgZm9yIGxpdmUgZWRpdGFibGVzIFxuICAgICAgICAqL1xuICAgICAgICBpbml0TGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIC8vc3RvcmUgc2VsZWN0b3IgXG4gICAgICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMub3B0aW9ucy5zZWxlY3RvcjtcbiAgICAgICAgICAgLy9tb2RpZnkgb3B0aW9ucyBmb3IgY2hpbGQgZWxlbWVudHNcbiAgICAgICAgICAgdGhpcy5vcHRpb25zLnNlbGVjdG9yID0gZmFsc2U7IFxuICAgICAgICAgICB0aGlzLm9wdGlvbnMuYXV0b3RleHQgPSAnbmV2ZXInO1xuICAgICAgICAgICAvL2xpc3RlbiB0b2dnbGUgZXZlbnRzXG4gICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24odGhpcy5vcHRpb25zLnRvZ2dsZSArICcuZWRpdGFibGUnLCBzZWxlY3RvciwgJC5wcm94eShmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgIHZhciAkdGFyZ2V0ID0gJChlLnRhcmdldCk7XG4gICAgICAgICAgICAgICBpZighJHRhcmdldC5kYXRhKCdlZGl0YWJsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgLy9pZiBkZWxlZ2F0ZWQgZWxlbWVudCBpbml0aWFsbHkgZW1wdHksIHdlIG5lZWQgdG8gY2xlYXIgaXQncyB0ZXh0ICh0aGF0IHdhcyBtYW51YWxseSBzZXQgdG8gYGVtcHR5YCBieSB1c2VyKVxuICAgICAgICAgICAgICAgICAgIC8vc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRhbGV0cy94LWVkaXRhYmxlL2lzc3Vlcy8xMzcgXG4gICAgICAgICAgICAgICAgICAgaWYoJHRhcmdldC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMuZW1wdHljbGFzcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0LmVtcHR5KCk7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICR0YXJnZXQuZWRpdGFibGUodGhpcy5vcHRpb25zKS50cmlnZ2VyKGUpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9LCB0aGlzKSk7IFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgUmVuZGVycyB2YWx1ZSBpbnRvIGVsZW1lbnQncyB0ZXh0LlxuICAgICAgICBDYW4gY2FsbCBjdXN0b20gZGlzcGxheSBtZXRob2QgZnJvbSBvcHRpb25zLlxuICAgICAgICBDYW4gcmV0dXJuIGRlZmVycmVkIG9iamVjdC5cbiAgICAgICAgQG1ldGhvZCByZW5kZXIoKVxuICAgICAgICBAcGFyYW0ge21peGVkfSByZXNwb25zZSBzZXJ2ZXIgcmVzcG9uc2UgKGlmIGV4aXN0KSB0byBwYXNzIGludG8gZGlzcGxheSBmdW5jdGlvblxuICAgICAgICAqLyAgICAgICAgICBcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgLy9kbyBub3QgZGlzcGxheSBhbnl0aGluZ1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmRpc3BsYXkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2lmIGlucHV0IGhhcyBgdmFsdWUyaHRtbEZpbmFsYCBtZXRob2QsIHdlIHBhc3MgY2FsbGJhY2sgaW4gdGhpcmQgcGFyYW0gdG8gYmUgY2FsbGVkIHdoZW4gc291cmNlIGlzIGxvYWRlZFxuICAgICAgICAgICAgaWYodGhpcy5pbnB1dC52YWx1ZTJodG1sRmluYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC52YWx1ZTJodG1sKHRoaXMudmFsdWUsIHRoaXMuJGVsZW1lbnRbMF0sIHRoaXMub3B0aW9ucy5kaXNwbGF5LCByZXNwb25zZSk7IFxuICAgICAgICAgICAgLy9pZiBkaXNwbGF5IG1ldGhvZCBkZWZpbmVkIC0tPiB1c2UgaXQgICAgXG4gICAgICAgICAgICB9IGVsc2UgaWYodHlwZW9mIHRoaXMub3B0aW9ucy5kaXNwbGF5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5kaXNwbGF5LmNhbGwodGhpcy4kZWxlbWVudFswXSwgdGhpcy52YWx1ZSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgLy9lbHNlIHVzZSBpbnB1dCdzIG9yaWdpbmFsIHZhbHVlMmh0bWwoKSBtZXRob2QgICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0LnZhbHVlMmh0bWwodGhpcy52YWx1ZSwgdGhpcy4kZWxlbWVudFswXSk7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIEVuYWJsZXMgZWRpdGFibGVcbiAgICAgICAgQG1ldGhvZCBlbmFibGUoKVxuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIGVuYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2VkaXRhYmxlLWRpc2FibGVkJyk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVtcHR5KHRoaXMuaXNFbXB0eSk7XG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMudG9nZ2xlICE9PSAnbWFudWFsJykge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnKSA9PT0gJy0xJykgeyAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVBdHRyKCd0YWJpbmRleCcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIERpc2FibGVzIGVkaXRhYmxlXG4gICAgICAgIEBtZXRob2QgZGlzYWJsZSgpXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBkaXNhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IHRydWU7IFxuICAgICAgICAgICAgdGhpcy5oaWRlKCk7ICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2VkaXRhYmxlLWRpc2FibGVkJyk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVtcHR5KHRoaXMuaXNFbXB0eSk7XG4gICAgICAgICAgICAvL2RvIG5vdCBzdG9wIGZvY3VzIG9uIHRoaXMgZWxlbWVudFxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIC0xKTsgICAgICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgVG9nZ2xlcyBlbmFibGVkIC8gZGlzYWJsZWQgc3RhdGUgb2YgZWRpdGFibGUgZWxlbWVudFxuICAgICAgICBAbWV0aG9kIHRvZ2dsZURpc2FibGVkKClcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHRvZ2dsZURpc2FibGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlKCk7XG4gICAgICAgICAgICB9IGVsc2UgeyBcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGUoKTsgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sICBcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBTZXRzIG5ldyBvcHRpb25cbiAgICAgICAgXG4gICAgICAgIEBtZXRob2Qgb3B0aW9uKGtleSwgdmFsdWUpXG4gICAgICAgIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0ga2V5IG9wdGlvbiBuYW1lIG9yIG9iamVjdCB3aXRoIHNldmVyYWwgb3B0aW9uc1xuICAgICAgICBAcGFyYW0ge21peGVkfSB2YWx1ZSBvcHRpb24gbmV3IHZhbHVlXG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgICQoJy5lZGl0YWJsZScpLmVkaXRhYmxlKCdvcHRpb24nLCAncGsnLCAyKTtcbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICBvcHRpb246IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIC8vc2V0IG9wdGlvbihzKSBieSBvYmplY3RcbiAgICAgICAgICAgIGlmKGtleSAmJiB0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgJC5lYWNoKGtleSwgJC5wcm94eShmdW5jdGlvbihrLCB2KXtcbiAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uKCQudHJpbShrKSwgdik7IFxuICAgICAgICAgICAgICAgfSwgdGhpcykpOyBcbiAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9zZXQgb3B0aW9uIGJ5IHN0cmluZyAgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9kaXNhYmxlZFxuICAgICAgICAgICAgaWYoa2V5ID09PSAnZGlzYWJsZWQnKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPyB0aGlzLmRpc2FibGUoKSA6IHRoaXMuZW5hYmxlKCk7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3ZhbHVlXG4gICAgICAgICAgICBpZihrZXkgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy90cmFuc2ZlciBuZXcgb3B0aW9uIHRvIGNvbnRhaW5lciEgXG4gICAgICAgICAgICBpZih0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLm9wdGlvbihrZXksIHZhbHVlKTsgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9wYXNzIG9wdGlvbiB0byBpbnB1dCBkaXJlY3RseSAoYXMgaXQgcG9pbnRzIHRvIHRoZSBzYW1lIGluIGZvcm0pXG4gICAgICAgICAgICBpZih0aGlzLmlucHV0Lm9wdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQub3B0aW9uKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0sICAgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgICogc2V0IGVtcHR5dGV4dCBpZiBlbGVtZW50IGlzIGVtcHR5XG4gICAgICAgICovXG4gICAgICAgIGhhbmRsZUVtcHR5OiBmdW5jdGlvbiAoaXNFbXB0eSkge1xuICAgICAgICAgICAgLy9kbyBub3QgaGFuZGxlIGVtcHR5IGlmIHdlIGRvIG5vdCBkaXNwbGF5IGFueXRoaW5nXG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZGlzcGxheSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIFxuICAgICAgICAgICAgaXNFbXB0eSBtYXkgYmUgc2V0IGRpcmVjdGx5IGFzIHBhcmFtIG9mIG1ldGhvZC5cbiAgICAgICAgICAgIEl0IGlzIHJlcXVpcmVkIHdoZW4gd2UgZW5hYmxlL2Rpc2FibGUgZmllbGQgYW5kIGNhbid0IHJlbHkgb24gY29udGVudCBcbiAgICAgICAgICAgIGFzIG5vZGUgY29udGVudCBpcyB0ZXh0OiBcIkVtcHR5XCIgdGhhdCBpcyBub3QgZW1wdHkgJSlcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZihpc0VtcHR5ICE9PSB1bmRlZmluZWQpIHsgXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9kZXRlY3QgZW1wdHlcbiAgICAgICAgICAgICAgICAvL2ZvciBzb21lIGlucHV0cyB3ZSBuZWVkIG1vcmUgc21hcnQgY2hlY2tcbiAgICAgICAgICAgICAgICAvL2UuZy4gd3lzaWh0bWw1IG1heSBoYXZlIDxicj4sIDxwPjwvcD4sIDxpbWc+XG4gICAgICAgICAgICAgICAgaWYodHlwZW9mKHRoaXMuaW5wdXQuaXNFbXB0eSkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0VtcHR5ID0gdGhpcy5pbnB1dC5pc0VtcHR5KHRoaXMuJGVsZW1lbnQpOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0VtcHR5ID0gJC50cmltKHRoaXMuJGVsZW1lbnQuaHRtbCgpKSA9PT0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vZW1wdHl0ZXh0IHNob3duIG9ubHkgZm9yIGVuYWJsZWRcbiAgICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuaHRtbCh0aGlzLm9wdGlvbnMuZW1wdHl0ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmVtcHR5Y2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmVtcHR5Y2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHRoaXMub3B0aW9ucy5lbXB0eWNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmVtcHR5Y2xhc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9iZWxvdyByZXF1aXJlZCBpZiBlbGVtZW50IGRpc2FibGUgcHJvcGVydHkgd2FzIGNoYW5nZWRcbiAgICAgICAgICAgICAgICBpZih0aGlzLmlzRW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5lbXB0eSgpO1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZW1wdHljbGFzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZW1wdHljbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBTaG93cyBjb250YWluZXIgd2l0aCBmb3JtXG4gICAgICAgIEBtZXRob2Qgc2hvdygpXG4gICAgICAgIEBwYXJhbSB7Ym9vbGVhbn0gY2xvc2VBbGwgV2hldGhlciB0byBjbG9zZSBhbGwgb3RoZXIgZWRpdGFibGUgY29udGFpbmVycyB3aGVuIHNob3dpbmcgdGhpcyBvbmUuIERlZmF1bHQgdHJ1ZS5cbiAgICAgICAgKiovICBcbiAgICAgICAgc2hvdzogZnVuY3Rpb24gKGNsb3NlQWxsKSB7XG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaW5pdCBlZGl0YWJsZUNvbnRhaW5lcjogcG9wb3ZlciwgdG9vbHRpcCwgaW5saW5lLCBldGMuLlxuICAgICAgICAgICAgaWYoIXRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lck9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBpbnB1dDogdGhpcy5pbnB1dCAvL3Bhc3MgaW5wdXQgdG8gZm9ybSAoYXMgaXQgaXMgYWxyZWFkeSBjcmVhdGVkKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuZWRpdGFibGVDb250YWluZXIoY29udGFpbmVyT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgLy9saXN0ZW4gYHNhdmVgIGV2ZW50IFxuICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24oXCJzYXZlLmludGVybmFsXCIsICQucHJveHkodGhpcy5zYXZlLCB0aGlzKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ2VkaXRhYmxlQ29udGFpbmVyJyk7IFxuICAgICAgICAgICAgfSBlbHNlIGlmKHRoaXMuY29udGFpbmVyLnRpcCgpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3Nob3cgY29udGFpbmVyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zaG93KGNsb3NlQWxsKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBIaWRlcyBjb250YWluZXIgd2l0aCBmb3JtXG4gICAgICAgIEBtZXRob2QgaGlkZSgpXG4gICAgICAgICoqLyAgICAgICBcbiAgICAgICAgaGlkZTogZnVuY3Rpb24gKCkgeyAgIFxuICAgICAgICAgICAgaWYodGhpcy5jb250YWluZXIpIHsgIFxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBUb2dnbGVzIGNvbnRhaW5lciB2aXNpYmlsaXR5IChzaG93IC8gaGlkZSlcbiAgICAgICAgQG1ldGhvZCB0b2dnbGUoKVxuICAgICAgICBAcGFyYW0ge2Jvb2xlYW59IGNsb3NlQWxsIFdoZXRoZXIgdG8gY2xvc2UgYWxsIG90aGVyIGVkaXRhYmxlIGNvbnRhaW5lcnMgd2hlbiBzaG93aW5nIHRoaXMgb25lLiBEZWZhdWx0IHRydWUuXG4gICAgICAgICoqLyAgXG4gICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oY2xvc2VBbGwpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuY29udGFpbmVyICYmIHRoaXMuY29udGFpbmVyLnRpcCgpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhjbG9zZUFsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICAqIGNhbGxlZCB3aGVuIGZvcm0gd2FzIHN1Ym1pdHRlZFxuICAgICAgICAqLyAgICAgICAgICBcbiAgICAgICAgc2F2ZTogZnVuY3Rpb24oZSwgcGFyYW1zKSB7XG4gICAgICAgICAgICAvL21hcmsgZWxlbWVudCB3aXRoIHVuc2F2ZWQgY2xhc3MgaWYgbmVlZGVkXG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMudW5zYXZlZGNsYXNzKSB7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgQWRkIHVuc2F2ZWQgY3NzIHRvIGVsZW1lbnQgaWY6XG4gICAgICAgICAgICAgICAgICAtIHVybCBpcyBub3QgdXNlcidzIGZ1bmN0aW9uIFxuICAgICAgICAgICAgICAgICAgLSB2YWx1ZSB3YXMgbm90IHNlbnQgdG8gc2VydmVyXG4gICAgICAgICAgICAgICAgICAtIHBhcmFtcy5yZXNwb25zZSA9PT0gdW5kZWZpbmVkLCB0aGF0IG1lYW5zIGRhdGEgd2FzIG5vdCBzZW50XG4gICAgICAgICAgICAgICAgICAtIHZhbHVlIGNoYW5nZWQgXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgc2VudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHNlbnQgPSBzZW50IHx8IHR5cGVvZiB0aGlzLm9wdGlvbnMudXJsID09PSAnZnVuY3Rpb24nO1xuICAgICAgICAgICAgICAgIHNlbnQgPSBzZW50IHx8IHRoaXMub3B0aW9ucy5kaXNwbGF5ID09PSBmYWxzZTsgXG4gICAgICAgICAgICAgICAgc2VudCA9IHNlbnQgfHwgcGFyYW1zLnJlc3BvbnNlICE9PSB1bmRlZmluZWQ7IFxuICAgICAgICAgICAgICAgIHNlbnQgPSBzZW50IHx8ICh0aGlzLm9wdGlvbnMuc2F2ZW5vY2hhbmdlICYmIHRoaXMuaW5wdXQudmFsdWUyc3RyKHRoaXMudmFsdWUpICE9PSB0aGlzLmlucHV0LnZhbHVlMnN0cihwYXJhbXMubmV3VmFsdWUpKTsgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoc2VudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy51bnNhdmVkY2xhc3MpOyBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy51bnNhdmVkY2xhc3MpOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2hpZ2hsaWdodCB3aGVuIHNhdmluZ1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmhpZ2hsaWdodCkge1xuICAgICAgICAgICAgICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGJnQ29sb3IgPSAkZS5jc3MoJ2JhY2tncm91bmQtY29sb3InKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgJGUuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgdGhpcy5vcHRpb25zLmhpZ2hsaWdodCk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpZihiZ0NvbG9yID09PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZ0NvbG9yID0gJyc7IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICRlLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIGJnQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAkZS5hZGRDbGFzcygnZWRpdGFibGUtYmctdHJhbnNpdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICRlLnJlbW92ZUNsYXNzKCdlZGl0YWJsZS1iZy10cmFuc2l0aW9uJyk7ICBcbiAgICAgICAgICAgICAgICAgICAgfSwgMTcwMCk7XG4gICAgICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3NldCBuZXcgdmFsdWVcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUocGFyYW1zLm5ld1ZhbHVlLCBmYWxzZSwgcGFyYW1zLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLyoqICAgICAgICBcbiAgICAgICAgICAgIEZpcmVkIHdoZW4gbmV3IHZhbHVlIHdhcyBzdWJtaXR0ZWQuIFlvdSBjYW4gdXNlIDxjb2RlPiQodGhpcykuZGF0YSgnZWRpdGFibGUnKTwvY29kZT4gdG8gYWNjZXNzIHRvIGVkaXRhYmxlIGluc3RhbmNlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEBldmVudCBzYXZlIFxuICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBhZGRpdGlvbmFsIHBhcmFtc1xuICAgICAgICAgICAgQHBhcmFtIHttaXhlZH0gcGFyYW1zLm5ld1ZhbHVlIHN1Ym1pdHRlZCB2YWx1ZVxuICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IHBhcmFtcy5yZXNwb25zZSBhamF4IHJlc3BvbnNlXG4gICAgICAgICAgICBAZXhhbXBsZVxuICAgICAgICAgICAgJCgnI3VzZXJuYW1lJykub24oJ3NhdmUnLCBmdW5jdGlvbihlLCBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBhbGVydCgnU2F2ZWQgdmFsdWU6ICcgKyBwYXJhbXMubmV3VmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAqKi9cbiAgICAgICAgICAgIC8vZXZlbnQgaXRzZWxmIGlzIHRyaWdnZXJlZCBieSBlZGl0YWJsZUNvbnRhaW5lci4gRGVzY3JpcHRpb24gaGVyZSBpcyBvbmx5IGZvciBkb2N1bWVudGF0aW9uICAgICAgICAgICAgICBcbiAgICAgICAgfSxcblxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMudmFsaWRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnZhbGlkYXRlLmNhbGwodGhpcywgdGhpcy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgU2V0cyBuZXcgdmFsdWUgb2YgZWRpdGFibGVcbiAgICAgICAgQG1ldGhvZCBzZXRWYWx1ZSh2YWx1ZSwgY29udmVydFN0cilcbiAgICAgICAgQHBhcmFtIHttaXhlZH0gdmFsdWUgbmV3IHZhbHVlIFxuICAgICAgICBAcGFyYW0ge2Jvb2xlYW59IGNvbnZlcnRTdHIgd2hldGhlciB0byBjb252ZXJ0IHZhbHVlIGZyb20gc3RyaW5nIHRvIGludGVybmFsIGZvcm1hdFxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uKHZhbHVlLCBjb252ZXJ0U3RyLCByZXNwb25zZSkge1xuICAgICAgICAgICAgaWYoY29udmVydFN0cikge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmlucHV0LnN0cjJ2YWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIub3B0aW9uKCd2YWx1ZScsIHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJC53aGVuKHRoaXMucmVuZGVyKHJlc3BvbnNlKSlcbiAgICAgICAgICAgIC50aGVuKCQucHJveHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFbXB0eSgpO1xuICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIEFjdGl2YXRlcyBpbnB1dCBvZiB2aXNpYmxlIGNvbnRhaW5lciAoZS5nLiBzZXQgZm9jdXMpXG4gICAgICAgIEBtZXRob2QgYWN0aXZhdGUoKVxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYodGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFjdGl2YXRlKCk7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFJlbW92ZXMgZWRpdGFibGUgZmVhdHVyZSBmcm9tIGVsZW1lbnRcbiAgICAgICAgQG1ldGhvZCBkZXN0cm95KClcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYodGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmRlc3Ryb3koKTsgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMudG9nZ2xlICE9PSAnbWFudWFsJykge1xuICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2VkaXRhYmxlLWNsaWNrJyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYodGhpcy5vcHRpb25zLnRvZ2dsZSArICcuZWRpdGFibGUnKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKFwic2F2ZS5pbnRlcm5hbFwiKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnZWRpdGFibGUgZWRpdGFibGUtb3BlbiBlZGl0YWJsZS1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVEYXRhKCdlZGl0YWJsZScpO1xuICAgICAgICB9ICAgICAgICBcbiAgICB9O1xuXG4gICAgLyogRURJVEFCTEUgUExVR0lOIERFRklOSVRJT05cbiAgICAqID09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICBqUXVlcnkgbWV0aG9kIHRvIGluaXRpYWxpemUgZWRpdGFibGUgZWxlbWVudC5cbiAgICBcbiAgICBAbWV0aG9kICQoKS5lZGl0YWJsZShvcHRpb25zKVxuICAgIEBwYXJhbXMge09iamVjdH0gb3B0aW9uc1xuICAgIEBleGFtcGxlXG4gICAgJCgnI3VzZXJuYW1lJykuZWRpdGFibGUoe1xuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIHVybDogJy9wb3N0JyxcbiAgICAgICAgcGs6IDFcbiAgICB9KTtcbiAgICAqKi9cbiAgICAkLmZuLmVkaXRhYmxlID0gZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICAvL3NwZWNpYWwgQVBJIG1ldGhvZHMgcmV0dXJuaW5nIG5vbi1qcXVlcnkgb2JqZWN0XG4gICAgICAgIHZhciByZXN1bHQgPSB7fSwgYXJncyA9IGFyZ3VtZW50cywgZGF0YWtleSA9ICdlZGl0YWJsZSc7XG4gICAgICAgIHN3aXRjaCAob3B0aW9uKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgIFJ1bnMgY2xpZW50LXNpZGUgdmFsaWRhdGlvbiBmb3IgYWxsIG1hdGNoZWQgZWRpdGFibGVzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEBtZXRob2QgdmFsaWRhdGUoKVxuICAgICAgICAgICAgQHJldHVybnMge09iamVjdH0gdmFsaWRhdGlvbiBlcnJvcnMgbWFwXG4gICAgICAgICAgICBAZXhhbXBsZVxuICAgICAgICAgICAgJCgnI3VzZXJuYW1lLCAjZnVsbG5hbWUnKS5lZGl0YWJsZSgndmFsaWRhdGUnKTtcbiAgICAgICAgICAgIC8vIHBvc3NpYmxlIHJlc3VsdDpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdXNlcm5hbWU6IFwidXNlcm5hbWUgaXMgcmVxdWlyZWRcIixcbiAgICAgICAgICAgICAgZnVsbG5hbWU6IFwiZnVsbG5hbWUgc2hvdWxkIGJlIG1pbmltdW0gMyBsZXR0ZXJzIGxlbmd0aFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAqKi9cbiAgICAgICAgICAgIGNhc2UgJ3ZhbGlkYXRlJzpcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLCBkYXRhID0gJHRoaXMuZGF0YShkYXRha2V5KSwgZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIChlcnJvciA9IGRhdGEudmFsaWRhdGUoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtkYXRhLm9wdGlvbnMubmFtZV0gPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICBSZXR1cm5zIGN1cnJlbnQgdmFsdWVzIG9mIGVkaXRhYmxlIGVsZW1lbnRzLiAgIFxuICAgICAgICAgICAgTm90ZSB0aGF0IGl0IHJldHVybnMgYW4gKipvYmplY3QqKiB3aXRoIG5hbWUtdmFsdWUgcGFpcnMsIG5vdCBhIHZhbHVlIGl0c2VsZi4gSXQgYWxsb3dzIHRvIGdldCBkYXRhIGZyb20gc2V2ZXJhbCBlbGVtZW50cy4gICAgXG4gICAgICAgICAgICBJZiB2YWx1ZSBvZiBzb21lIGVkaXRhYmxlIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYCBpdCBpcyBleGNsdWRlZCBmcm9tIHJlc3VsdCBvYmplY3QuXG4gICAgICAgICAgICBXaGVuIHBhcmFtIGBpc1NpbmdsZWAgaXMgc2V0IHRvICoqdHJ1ZSoqIC0gaXQgaXMgc3VwcG9zZWQgeW91IGhhdmUgc2luZ2xlIGVsZW1lbnQgYW5kIHdpbGwgcmV0dXJuIHZhbHVlIG9mIGVkaXRhYmxlIGluc3RlYWQgb2Ygb2JqZWN0LiAgIFxuICAgICAgICAgICAgIFxuICAgICAgICAgICAgQG1ldGhvZCBnZXRWYWx1ZSgpXG4gICAgICAgICAgICBAcGFyYW0ge2Jvb2x9IGlzU2luZ2xlIHdoZXRoZXIgdG8gcmV0dXJuIGp1c3QgdmFsdWUgb2Ygc2luZ2xlIGVsZW1lbnRcbiAgICAgICAgICAgIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBvZiBlbGVtZW50IG5hbWVzIGFuZCB2YWx1ZXNcbiAgICAgICAgICAgIEBleGFtcGxlXG4gICAgICAgICAgICAkKCcjdXNlcm5hbWUsICNmdWxsbmFtZScpLmVkaXRhYmxlKCdnZXRWYWx1ZScpO1xuICAgICAgICAgICAgLy9yZXN1bHQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICB1c2VybmFtZTogXCJzdXBlcnVzZXJcIixcbiAgICAgICAgICAgIGZ1bGxuYW1lOiBcIkpvaG5cIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9pc1NpbmdsZSA9IHRydWVcbiAgICAgICAgICAgICQoJyN1c2VybmFtZScpLmVkaXRhYmxlKCdnZXRWYWx1ZScsIHRydWUpO1xuICAgICAgICAgICAgLy9yZXN1bHQgXCJzdXBlcnVzZXJcIiBcbiAgICAgICAgICAgICoqL1xuICAgICAgICAgICAgY2FzZSAnZ2V0VmFsdWUnOlxuICAgICAgICAgICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgYXJndW1lbnRzWzFdID09PSB0cnVlKSB7IC8vaXNTaW5nbGUgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZXEoMCkuZGF0YShkYXRha2V5KS52YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSwgZGF0YSA9ICR0aGlzLmRhdGEoZGF0YWtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgZGF0YS52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtkYXRhLm9wdGlvbnMubmFtZV0gPSBkYXRhLmlucHV0LnZhbHVlMnN1Ym1pdChkYXRhLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICBUaGlzIG1ldGhvZCBjb2xsZWN0cyB2YWx1ZXMgZnJvbSBzZXZlcmFsIGVkaXRhYmxlIGVsZW1lbnRzIGFuZCBzdWJtaXQgdGhlbSBhbGwgdG8gc2VydmVyLiAgIFxuICAgICAgICAgICAgSW50ZXJuYWxseSBpdCBydW5zIGNsaWVudC1zaWRlIHZhbGlkYXRpb24gZm9yIGFsbCBmaWVsZHMgYW5kIHN1Ym1pdHMgb25seSBpbiBjYXNlIG9mIHN1Y2Nlc3MuICBcbiAgICAgICAgICAgIFNlZSA8YSBocmVmPVwiI25ld3JlY29yZFwiPmNyZWF0aW5nIG5ldyByZWNvcmRzPC9hPiBmb3IgZGV0YWlscy4gIFxuICAgICAgICAgICAgU2luY2UgMS41LjEgYHN1Ym1pdGAgY2FuIGJlIGFwcGxpZWQgdG8gc2luZ2xlIGVsZW1lbnQgdG8gc2VuZCBkYXRhIHByb2dyYW1tYXRpY2FsbHkuIEluIHRoYXQgY2FzZVxuICAgICAgICAgICAgYHVybGAsIGBzdWNjZXNzYCBhbmQgYGVycm9yYCBpcyB0YWtlbiBmcm9tIGluaXRpYWwgb3B0aW9ucyBhbmQgeW91IGNhbiBqdXN0IGNhbGwgYCQoJyN1c2VybmFtZScpLmVkaXRhYmxlKCdzdWJtaXQnKWAuIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBAbWV0aG9kIHN1Ym1pdChvcHRpb25zKVxuICAgICAgICAgICAgQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgXG4gICAgICAgICAgICBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy51cmwgdXJsIHRvIHN1Ym1pdCBkYXRhIFxuICAgICAgICAgICAgQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMuZGF0YSBhZGRpdGlvbmFsIGRhdGEgdG8gc3VibWl0XG4gICAgICAgICAgICBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy5hamF4T3B0aW9ucyBhZGRpdGlvbmFsIGFqYXggb3B0aW9uc1xuICAgICAgICAgICAgQHBhcmFtIHtmdW5jdGlvbn0gb3B0aW9ucy5lcnJvcihvYmopIGVycm9yIGhhbmRsZXIgXG4gICAgICAgICAgICBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLnN1Y2Nlc3Mob2JqLGNvbmZpZykgc3VjY2VzcyBoYW5kbGVyXG4gICAgICAgICAgICBAcmV0dXJucyB7T2JqZWN0fSBqUXVlcnkgb2JqZWN0XG4gICAgICAgICAgICAqKi9cbiAgICAgICAgICAgIGNhc2UgJ3N1Ym1pdCc6ICAvL2NvbGxlY3RzIHZhbHVlLCB2YWxpZGF0ZSBhbmQgc3VibWl0IHRvIHNlcnZlciBmb3IgY3JlYXRpbmcgbmV3IHJlY29yZFxuICAgICAgICAgICAgICAgIHZhciBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge30sXG4gICAgICAgICAgICAgICAgJGVsZW1zID0gdGhpcyxcbiAgICAgICAgICAgICAgICBlcnJvcnMgPSB0aGlzLmVkaXRhYmxlKCd2YWxpZGF0ZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gdmFsaWRhdGlvbiBva1xuICAgICAgICAgICAgICAgIGlmKCQuaXNFbXB0eU9iamVjdChlcnJvcnMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhamF4T3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciBzaW5nbGUgZWxlbWVudCB1c2UgdXJsLCBzdWNjZXNzIGV0YyBmcm9tIG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgaWYoJGVsZW1zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVkaXRhYmxlID0gJGVsZW1zLmRhdGEoJ2VkaXRhYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3N0YW5kYXJkIHBhcmFtc1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBlZGl0YWJsZS5vcHRpb25zLm5hbWUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGVkaXRhYmxlLmlucHV0LnZhbHVlMnN1Ym1pdChlZGl0YWJsZS52YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGs6ICh0eXBlb2YgZWRpdGFibGUub3B0aW9ucy5wayA9PT0gJ2Z1bmN0aW9uJykgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdGFibGUub3B0aW9ucy5way5jYWxsKGVkaXRhYmxlLm9wdGlvbnMuc2NvcGUpIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlLm9wdGlvbnMucGsgXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FkZGl0aW9uYWwgcGFyYW1zXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgZWRpdGFibGUub3B0aW9ucy5wYXJhbXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSBlZGl0YWJsZS5vcHRpb25zLnBhcmFtcy5jYWxsKGVkaXRhYmxlLm9wdGlvbnMuc2NvcGUsIHBhcmFtcyk7ICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90cnkgcGFyc2UganNvbiBpbiBzaW5nbGUgcXVvdGVzIChmcm9tIGRhdGEtcGFyYW1zIGF0dHJpYnV0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0YWJsZS5vcHRpb25zLnBhcmFtcyA9ICQuZm4uZWRpdGFibGV1dGlscy50cnlQYXJzZUpzb24oZWRpdGFibGUub3B0aW9ucy5wYXJhbXMsIHRydWUpOyAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKHBhcmFtcywgZWRpdGFibGUub3B0aW9ucy5wYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBhamF4T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGVkaXRhYmxlLm9wdGlvbnMudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlIHN1Y2Nlc3MgLyBlcnJvciBmcm9tIG9wdGlvbnMgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuc3VjY2VzcyA9IGNvbmZpZy5zdWNjZXNzIHx8IGVkaXRhYmxlLm9wdGlvbnMuc3VjY2VzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5lcnJvciA9IGNvbmZpZy5lcnJvciB8fCBlZGl0YWJsZS5vcHRpb25zLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy5lZGl0YWJsZSgnZ2V0VmFsdWUnKTsgXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGFqYXhPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogY29uZmlnLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB2YWx1ZXMsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWpheCBzdWNjZXNzIGNhbGxhYmNrIChyZXNwb25zZSAyMDAgT0spXG4gICAgICAgICAgICAgICAgICAgIGFqYXhPcHRpb25zLnN1Y2Nlc3MgPSB0eXBlb2YgY29uZmlnLnN1Y2Nlc3MgPT09ICdmdW5jdGlvbicgPyBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5zdWNjZXNzLmNhbGwoJGVsZW1zLCByZXNwb25zZSwgY29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiAkLm5vb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGFqYXggZXJyb3IgY2FsbGFiY2tcbiAgICAgICAgICAgICAgICAgICAgYWpheE9wdGlvbnMuZXJyb3IgPSB0eXBlb2YgY29uZmlnLmVycm9yID09PSAnZnVuY3Rpb24nID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5lcnJvci5hcHBseSgkZWxlbXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IDogJC5ub29wO1xuICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gZXh0ZW5kIGFqYXhPcHRpb25zICAgIFxuICAgICAgICAgICAgICAgICAgICBpZihjb25maWcuYWpheE9wdGlvbnMpIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmV4dGVuZChhamF4T3B0aW9ucywgY29uZmlnLmFqYXhPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gZXh0cmEgZGF0YSBcbiAgICAgICAgICAgICAgICAgICAgaWYoY29uZmlnLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKGFqYXhPcHRpb25zLmRhdGEsIGNvbmZpZy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gcGVyZm9ybSBhamF4IHJlcXVlc3RcbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KGFqYXhPcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvL2NsaWVudC1zaWRlIHZhbGlkYXRpb24gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGNvbmZpZy5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmVycm9yLmNhbGwoJGVsZW1zLCBlcnJvcnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICAvL3JldHVybiBqcXVlcnkgb2JqZWN0XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSwgXG4gICAgICAgICAgICAgICAgZGF0YSA9ICR0aGlzLmRhdGEoZGF0YWtleSksIFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09PSAnb2JqZWN0JyAmJiBvcHRpb247XG5cbiAgICAgICAgICAgIC8vZm9yIGRlbGVnYXRlZCB0YXJnZXRzIGRvIG5vdCBzdG9yZSBgZWRpdGFibGVgIG9iamVjdCBmb3IgZWxlbWVudFxuICAgICAgICAgICAgLy9pdCdzIGFsbG93cyBzZXZlcmFsIGRpZmZlcmVudCBzZWxlY3RvcnMuXG4gICAgICAgICAgICAvL3NlZTogaHR0cHM6Ly9naXRodWIuY29tL3ZpdGFsZXRzL3gtZWRpdGFibGUvaXNzdWVzLzMxMiAgICBcbiAgICAgICAgICAgIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy5zZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBuZXcgRWRpdGFibGUodGhpcywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyBcbiAgICAgICAgICAgIH0gICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoZGF0YWtleSwgKGRhdGEgPSBuZXcgRWRpdGFibGUodGhpcywgb3B0aW9ucykpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKSB7IC8vY2FsbCBtZXRob2QgXG4gICAgICAgICAgICAgICAgZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDEpKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0pO1xuICAgIH07ICAgIFxuICAgICAgICAgICAgXG5cbiAgICAkLmZuLmVkaXRhYmxlLmRlZmF1bHRzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgVHlwZSBvZiBpbnB1dC4gQ2FuIGJlIDxjb2RlPnRleHR8dGV4dGFyZWF8c2VsZWN0fGRhdGV8Y2hlY2tsaXN0PC9jb2RlPiBhbmQgbW9yZVxuXG4gICAgICAgIEBwcm9wZXJ0eSB0eXBlIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJ3RleHQnXG4gICAgICAgICoqL1xuICAgICAgICB0eXBlOiAndGV4dCcsICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFNldHMgZGlzYWJsZWQgc3RhdGUgb2YgZWRpdGFibGVcblxuICAgICAgICBAcHJvcGVydHkgZGlzYWJsZWQgXG4gICAgICAgIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgIEhvdyB0byB0b2dnbGUgZWRpdGFibGUuIENhbiBiZSA8Y29kZT5jbGlja3xkYmxjbGlja3xtb3VzZWVudGVyfG1hbnVhbDwvY29kZT4uICAgXG4gICAgICAgIFdoZW4gc2V0IHRvIDxjb2RlPm1hbnVhbDwvY29kZT4geW91IHNob3VsZCBtYW51YWxseSBjYWxsIDxjb2RlPnNob3cvaGlkZTwvY29kZT4gbWV0aG9kcyBvZiBlZGl0YWJsZS4gICAgXG4gICAgICAgICoqTm90ZSoqOiBpZiB5b3UgY2FsbCA8Y29kZT5zaG93PC9jb2RlPiBvciA8Y29kZT50b2dnbGU8L2NvZGU+IGluc2lkZSAqKmNsaWNrKiogaGFuZGxlciBvZiBzb21lIERPTSBlbGVtZW50LCBcbiAgICAgICAgeW91IG5lZWQgdG8gYXBwbHkgPGNvZGU+ZS5zdG9wUHJvcGFnYXRpb24oKTwvY29kZT4gYmVjYXVzZSBjb250YWluZXJzIGFyZSBiZWluZyBjbG9zZWQgb24gYW55IGNsaWNrIG9uIGRvY3VtZW50LlxuICAgICAgICBcbiAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgJCgnI2VkaXQtYnV0dG9uJykuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICQoJyN1c2VybmFtZScpLmVkaXRhYmxlKCd0b2dnbGUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgQHByb3BlcnR5IHRvZ2dsZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICdjbGljaydcbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICB0b2dnbGU6ICdjbGljaycsXG4gICAgICAgIC8qKlxuICAgICAgICBUZXh0IHNob3duIHdoZW4gZWxlbWVudCBpcyBlbXB0eS5cblxuICAgICAgICBAcHJvcGVydHkgZW1wdHl0ZXh0IFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJ0VtcHR5J1xuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgZW1wdHl0ZXh0OiAnRW1wdHknLFxuICAgICAgICAvKipcbiAgICAgICAgQWxsb3dzIHRvIGF1dG9tYXRpY2FsbHkgc2V0IGVsZW1lbnQncyB0ZXh0IGJhc2VkIG9uIGl0J3MgdmFsdWUuIENhbiBiZSA8Y29kZT5hdXRvfGFsd2F5c3xuZXZlcjwvY29kZT4uIFVzZWZ1bCBmb3Igc2VsZWN0IGFuZCBkYXRlLlxuICAgICAgICBGb3IgZXhhbXBsZSwgaWYgZHJvcGRvd24gbGlzdCBpcyA8Y29kZT57MTogJ2EnLCAyOiAnYid9PC9jb2RlPiBhbmQgZWxlbWVudCdzIHZhbHVlIHNldCB0byA8Y29kZT4xPC9jb2RlPiwgaXQncyBodG1sIHdpbGwgYmUgYXV0b21hdGljYWxseSBzZXQgdG8gPGNvZGU+J2EnPC9jb2RlPi4gIFxuICAgICAgICA8Y29kZT5hdXRvPC9jb2RlPiAtIHRleHQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHNldCBvbmx5IGlmIGVsZW1lbnQgaXMgZW1wdHkuICBcbiAgICAgICAgPGNvZGU+YWx3YXlzfG5ldmVyPC9jb2RlPiAtIGFsd2F5cyhuZXZlcikgdHJ5IHRvIHNldCBlbGVtZW50J3MgdGV4dC5cblxuICAgICAgICBAcHJvcGVydHkgYXV0b3RleHQgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAnYXV0bydcbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICBhdXRvdGV4dDogJ2F1dG8nLCBcbiAgICAgICAgLyoqXG4gICAgICAgIEluaXRpYWwgdmFsdWUgb2YgaW5wdXQuIElmIG5vdCBzZXQsIHRha2VuIGZyb20gZWxlbWVudCdzIHRleHQuICBcbiAgICAgICAgTm90ZSwgdGhhdCBpZiBlbGVtZW50J3MgdGV4dCBpcyBlbXB0eSAtIHRleHQgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgZnJvbSB2YWx1ZSBhbmQgY2FuIGJlIGN1c3RvbWl6ZWQgKHNlZSBgYXV0b3RleHRgIG9wdGlvbikuICBcbiAgICAgICAgRm9yIGV4YW1wbGUsIHRvIGRpc3BsYXkgY3VycmVuY3kgc2lnbjpcbiAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgPGEgaWQ9XCJwcmljZVwiIGRhdGEtdHlwZT1cInRleHRcIiBkYXRhLXZhbHVlPVwiMTAwXCI+PC9hPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICAkKCcjcHJpY2UnKS5lZGl0YWJsZSh7XG4gICAgICAgICAgICAuLi5cbiAgICAgICAgICAgIGRpc3BsYXk6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICQodGhpcykudGV4dCh2YWx1ZSArICckJyk7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9KSBcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSB2YWx1ZSBcbiAgICAgICAgQHR5cGUgbWl4ZWRcbiAgICAgICAgQGRlZmF1bHQgZWxlbWVudCdzIHRleHRcbiAgICAgICAgKiovXG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgQ2FsbGJhY2sgdG8gcGVyZm9ybSBjdXN0b20gZGlzcGxheWluZyBvZiB2YWx1ZSBpbiBlbGVtZW50J3MgdGV4dC4gIFxuICAgICAgICBJZiBgbnVsbGAsIGRlZmF1bHQgaW5wdXQncyBkaXNwbGF5IHVzZWQuICBcbiAgICAgICAgSWYgYGZhbHNlYCwgbm8gZGlzcGxheWluZyBtZXRob2RzIHdpbGwgYmUgY2FsbGVkLCBlbGVtZW50J3MgdGV4dCB3aWxsIG5ldmVyIGNoYW5nZS4gIFxuICAgICAgICBSdW5zIHVuZGVyIGVsZW1lbnQncyBzY29wZS4gIFxuICAgICAgICBfKipQYXJhbWV0ZXJzOioqXyAgXG4gICAgICAgIFxuICAgICAgICAqIGB2YWx1ZWAgY3VycmVudCB2YWx1ZSB0byBiZSBkaXNwbGF5ZWRcbiAgICAgICAgKiBgcmVzcG9uc2VgIHNlcnZlciByZXNwb25zZSAoaWYgZGlzcGxheSBjYWxsZWQgYWZ0ZXIgYWpheCBzdWJtaXQpLCBzaW5jZSAxLjQuMFxuICAgICAgICAgXG4gICAgICAgIEZvciBfaW5wdXRzIHdpdGggc291cmNlXyAoc2VsZWN0LCBjaGVja2xpc3QpIHBhcmFtZXRlcnMgYXJlIGRpZmZlcmVudDogIFxuICAgICAgICAgIFxuICAgICAgICAqIGB2YWx1ZWAgY3VycmVudCB2YWx1ZSB0byBiZSBkaXNwbGF5ZWRcbiAgICAgICAgKiBgc291cmNlRGF0YWAgYXJyYXkgb2YgaXRlbXMgZm9yIGN1cnJlbnQgaW5wdXQgKGUuZy4gZHJvcGRvd24gaXRlbXMpIFxuICAgICAgICAqIGByZXNwb25zZWAgc2VydmVyIHJlc3BvbnNlIChpZiBkaXNwbGF5IGNhbGxlZCBhZnRlciBhamF4IHN1Ym1pdCksIHNpbmNlIDEuNC4wXG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgVG8gZ2V0IGN1cnJlbnRseSBzZWxlY3RlZCBpdGVtcyB1c2UgYCQuZm4uZWRpdGFibGV1dGlscy5pdGVtc0J5VmFsdWUodmFsdWUsIHNvdXJjZURhdGEpYC5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBkaXNwbGF5IFxuICAgICAgICBAdHlwZSBmdW5jdGlvbnxib29sZWFuXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgQHNpbmNlIDEuMi4wXG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgIGRpc3BsYXk6IGZ1bmN0aW9uKHZhbHVlLCBzb3VyY2VEYXRhKSB7XG4gICAgICAgICAgIC8vZGlzcGxheSBjaGVja2xpc3QgYXMgY29tbWEtc2VwYXJhdGVkIHZhbHVlc1xuICAgICAgICAgICB2YXIgaHRtbCA9IFtdLFxuICAgICAgICAgICAgICAgY2hlY2tlZCA9ICQuZm4uZWRpdGFibGV1dGlscy5pdGVtc0J5VmFsdWUodmFsdWUsIHNvdXJjZURhdGEpO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgIGlmKGNoZWNrZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAkLmVhY2goY2hlY2tlZCwgZnVuY3Rpb24oaSwgdikgeyBodG1sLnB1c2goJC5mbi5lZGl0YWJsZXV0aWxzLmVzY2FwZSh2LnRleHQpKTsgfSk7XG4gICAgICAgICAgICAgICAkKHRoaXMpLmh0bWwoaHRtbC5qb2luKCcsICcpKTtcbiAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICQodGhpcykuZW1wdHkoKTsgXG4gICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIGRpc3BsYXk6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBDc3MgY2xhc3MgYXBwbGllZCB3aGVuIGVkaXRhYmxlIHRleHQgaXMgZW1wdHkuXG5cbiAgICAgICAgQHByb3BlcnR5IGVtcHR5Y2xhc3MgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAc2luY2UgMS40LjEgICAgICAgIFxuICAgICAgICBAZGVmYXVsdCBlZGl0YWJsZS1lbXB0eVxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBlbXB0eWNsYXNzOiAnZWRpdGFibGUtZW1wdHknLFxuICAgICAgICAvKipcbiAgICAgICAgQ3NzIGNsYXNzIGFwcGxpZWQgd2hlbiB2YWx1ZSB3YXMgc3RvcmVkIGJ1dCBub3Qgc2VudCB0byBzZXJ2ZXIgKGBwa2AgaXMgZW1wdHkgb3IgYHNlbmQgPSAnbmV2ZXInYCkuICBcbiAgICAgICAgWW91IG1heSBzZXQgaXQgdG8gYG51bGxgIGlmIHlvdSB3b3JrIHdpdGggZWRpdGFibGVzIGxvY2FsbHkgYW5kIHN1Ym1pdCB0aGVtIHRvZ2V0aGVyLiAgXG5cbiAgICAgICAgQHByb3BlcnR5IHVuc2F2ZWRjbGFzcyBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBzaW5jZSAxLjQuMSAgICAgICAgXG4gICAgICAgIEBkZWZhdWx0IGVkaXRhYmxlLXVuc2F2ZWRcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgdW5zYXZlZGNsYXNzOiAnZWRpdGFibGUtdW5zYXZlZCcsXG4gICAgICAgIC8qKlxuICAgICAgICBJZiBzZWxlY3RvciBpcyBwcm92aWRlZCwgZWRpdGFibGUgd2lsbCBiZSBkZWxlZ2F0ZWQgdG8gdGhlIHNwZWNpZmllZCB0YXJnZXRzLiAgXG4gICAgICAgIFVzZWZ1bGwgZm9yIGR5bmFtaWNhbGx5IGdlbmVyYXRlZCBET00gZWxlbWVudHMuICBcbiAgICAgICAgKipQbGVhc2Ugbm90ZSoqLCB0aGF0IGRlbGVnYXRlZCB0YXJnZXRzIGNhbid0IGJlIGluaXRpYWxpemVkIHdpdGggYGVtcHR5dGV4dGAgYW5kIGBhdXRvdGV4dGAgb3B0aW9ucywgXG4gICAgICAgIGFzIHRoZXkgYWN0dWFsbHkgYmVjb21lIGVkaXRhYmxlIG9ubHkgYWZ0ZXIgZmlyc3QgY2xpY2suICBcbiAgICAgICAgWW91IHNob3VsZCBtYW51YWxseSBzZXQgY2xhc3MgYGVkaXRhYmxlLWNsaWNrYCB0byB0aGVzZSBlbGVtZW50cy4gIFxuICAgICAgICBBbHNvLCBpZiBlbGVtZW50IG9yaWdpbmFsbHkgZW1wdHkgeW91IHNob3VsZCBhZGQgY2xhc3MgYGVkaXRhYmxlLWVtcHR5YCwgc2V0IGBkYXRhLXZhbHVlPVwiXCJgIGFuZCB3cml0ZSBlbXB0eXRleHQgaW50byBlbGVtZW50OlxuXG4gICAgICAgIEBwcm9wZXJ0eSBzZWxlY3RvciBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBzaW5jZSAxLjQuMSAgICAgICAgXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgPGRpdiBpZD1cInVzZXJcIj5cbiAgICAgICAgICA8IS0tIGVtcHR5IC0tPlxuICAgICAgICAgIDxhIGhyZWY9XCIjXCIgZGF0YS1uYW1lPVwidXNlcm5hbWVcIiBkYXRhLXR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJlZGl0YWJsZS1jbGljayBlZGl0YWJsZS1lbXB0eVwiIGRhdGEtdmFsdWU9XCJcIiB0aXRsZT1cIlVzZXJuYW1lXCI+RW1wdHk8L2E+XG4gICAgICAgICAgPCEtLSBub24tZW1wdHkgLS0+XG4gICAgICAgICAgPGEgaHJlZj1cIiNcIiBkYXRhLW5hbWU9XCJncm91cFwiIGRhdGEtdHlwZT1cInNlbGVjdFwiIGRhdGEtc291cmNlPVwiL2dyb3Vwc1wiIGRhdGEtdmFsdWU9XCIxXCIgY2xhc3M9XCJlZGl0YWJsZS1jbGlja1wiIHRpdGxlPVwiR3JvdXBcIj5PcGVyYXRvcjwvYT5cbiAgICAgICAgPC9kaXY+ICAgICBcbiAgICAgICAgXG4gICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICQoJyN1c2VyJykuZWRpdGFibGUoe1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdhJyxcbiAgICAgICAgICAgIHVybDogJy9wb3N0JyxcbiAgICAgICAgICAgIHBrOiAxXG4gICAgICAgIH0pO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHNlbGVjdG9yOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgQ29sb3IgdXNlZCB0byBoaWdobGlnaHQgZWxlbWVudCBhZnRlciB1cGRhdGUuIEltcGxlbWVudGVkIHZpYSBDU1MzIHRyYW5zaXRpb24sIHdvcmtzIGluIG1vZGVybiBicm93c2Vycy5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBoaWdobGlnaHQgXG4gICAgICAgIEB0eXBlIHN0cmluZ3xib29sZWFuXG4gICAgICAgIEBzaW5jZSAxLjQuNSAgICAgICAgXG4gICAgICAgIEBkZWZhdWx0ICNGRkZGODAgXG4gICAgICAgICoqL1xuICAgICAgICBoaWdobGlnaHQ6ICcjRkZGRjgwJ1xuICAgIH07XG4gICAgXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG5BYnN0cmFjdElucHV0IC0gYmFzZSBjbGFzcyBmb3IgYWxsIGVkaXRhYmxlIGlucHV0cy5cbkl0IGRlZmluZXMgaW50ZXJmYWNlIHRvIGJlIGltcGxlbWVudGVkIGJ5IGFueSBpbnB1dCB0eXBlLlxuVG8gY3JlYXRlIHlvdXIgb3duIGlucHV0IHlvdSBjYW4gaW5oZXJpdCBmcm9tIHRoaXMgY2xhc3MuXG5cbkBjbGFzcyBhYnN0cmFjdGlucHV0XG4qKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLy90eXBlc1xuICAgICQuZm4uZWRpdGFibGV0eXBlcyA9IHt9O1xuXG4gICAgdmFyIEFic3RyYWN0SW5wdXQgPSBmdW5jdGlvbiAoKSB7IH07XG5cbiAgICBBYnN0cmFjdElucHV0LnByb3RvdHlwZSA9IHtcbiAgICAgICAvKipcbiAgICAgICAgSW5pdGlhbGl6ZXMgaW5wdXRcblxuICAgICAgICBAbWV0aG9kIGluaXQoKSBcbiAgICAgICAgKiovXG4gICAgICAgaW5pdDogZnVuY3Rpb24odHlwZSwgb3B0aW9ucywgZGVmYXVsdHMpIHtcbiAgICAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgICB9LFxuXG4gICAgICAgLypcbiAgICAgICB0aGlzIG1ldGhvZCBjYWxsZWQgYmVmb3JlIHJlbmRlciB0byBpbml0ICR0cGwgdGhhdCBpcyBpbnNlcnRlZCBpbiBET01cbiAgICAgICAqL1xuICAgICAgIHByZXJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHRoaXMuJHRwbCA9ICQodGhpcy5vcHRpb25zLnRwbCk7IC8vd2hvbGUgdHBsIGFzIGpxdWVyeSBvYmplY3QgICAgXG4gICAgICAgICAgIHRoaXMuJGlucHV0ID0gdGhpcy4kdHBsOyAgICAgICAgIC8vY29udHJvbCBpdHNlbGYsIGNhbiBiZSBjaGFuZ2VkIGluIHJlbmRlciBtZXRob2RcbiAgICAgICAgICAgdGhpcy4kY2xlYXIgPSBudWxsOyAgICAgICAgICAgICAgLy9jbGVhciBidXR0b25cbiAgICAgICAgICAgdGhpcy5lcnJvciA9IG51bGw7ICAgICAgICAgICAgICAgLy9lcnJvciBtZXNzYWdlLCBpZiBpbnB1dCBjYW5ub3QgYmUgcmVuZGVyZWQgICAgICAgICAgIFxuICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgLyoqXG4gICAgICAgIFJlbmRlcnMgaW5wdXQgZnJvbSB0cGwuIENhbiByZXR1cm4galF1ZXJ5IGRlZmVycmVkIG9iamVjdC5cbiAgICAgICAgQ2FuIGJlIG92ZXJ3cml0dGVuIGluIGNoaWxkIG9iamVjdHNcblxuICAgICAgICBAbWV0aG9kIHJlbmRlcigpXG4gICAgICAgKiovXG4gICAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcblxuICAgICAgIH0sIFxuXG4gICAgICAgLyoqXG4gICAgICAgIFNldHMgZWxlbWVudCdzIGh0bWwgYnkgdmFsdWUuIFxuXG4gICAgICAgIEBtZXRob2QgdmFsdWUyaHRtbCh2YWx1ZSwgZWxlbWVudClcbiAgICAgICAgQHBhcmFtIHttaXhlZH0gdmFsdWVcbiAgICAgICAgQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50XG4gICAgICAgKiovXG4gICAgICAgdmFsdWUyaHRtbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgJChlbGVtZW50KVt0aGlzLm9wdGlvbnMuZXNjYXBlID8gJ3RleHQnIDogJ2h0bWwnXSgkLnRyaW0odmFsdWUpKTtcbiAgICAgICB9LFxuXG4gICAgICAgLyoqXG4gICAgICAgIENvbnZlcnRzIGVsZW1lbnQncyBodG1sIHRvIHZhbHVlXG5cbiAgICAgICAgQG1ldGhvZCBodG1sMnZhbHVlKGh0bWwpXG4gICAgICAgIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gICAgICAgIEByZXR1cm5zIHttaXhlZH1cbiAgICAgICAqKi9cbiAgICAgICBodG1sMnZhbHVlOiBmdW5jdGlvbihodG1sKSB7XG4gICAgICAgICAgIHJldHVybiAkKCc8ZGl2PicpLmh0bWwoaHRtbCkudGV4dCgpO1xuICAgICAgIH0sXG5cbiAgICAgICAvKipcbiAgICAgICAgQ29udmVydHMgdmFsdWUgdG8gc3RyaW5nIChmb3IgaW50ZXJuYWwgY29tcGFyZSkuIEZvciBzdWJtaXR0aW5nIHRvIHNlcnZlciB1c2VkIHZhbHVlMnN1Ym1pdCgpLlxuXG4gICAgICAgIEBtZXRob2QgdmFsdWUyc3RyKHZhbHVlKSBcbiAgICAgICAgQHBhcmFtIHttaXhlZH0gdmFsdWVcbiAgICAgICAgQHJldHVybnMge3N0cmluZ31cbiAgICAgICAqKi9cbiAgICAgICB2YWx1ZTJzdHI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICB9LCBcblxuICAgICAgIC8qKlxuICAgICAgICBDb252ZXJ0cyBzdHJpbmcgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXIgaW50byB2YWx1ZS4gVXN1YWxseSBmcm9tIGBkYXRhLXZhbHVlYCBhdHRyaWJ1dGUuXG5cbiAgICAgICAgQG1ldGhvZCBzdHIydmFsdWUoc3RyKVxuICAgICAgICBAcGFyYW0ge3N0cmluZ30gc3RyXG4gICAgICAgIEByZXR1cm5zIHttaXhlZH1cbiAgICAgICAqKi9cbiAgICAgICBzdHIydmFsdWU6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgIH0sIFxuICAgICAgIFxuICAgICAgIC8qKlxuICAgICAgICBDb252ZXJ0cyB2YWx1ZSBmb3Igc3VibWl0dGluZyB0byBzZXJ2ZXIuIFJlc3VsdCBjYW4gYmUgc3RyaW5nIG9yIG9iamVjdC5cblxuICAgICAgICBAbWV0aG9kIHZhbHVlMnN1Ym1pdCh2YWx1ZSkgXG4gICAgICAgIEBwYXJhbSB7bWl4ZWR9IHZhbHVlXG4gICAgICAgIEByZXR1cm5zIHttaXhlZH1cbiAgICAgICAqKi9cbiAgICAgICB2YWx1ZTJzdWJtaXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICB9LFxuXG4gICAgICAgLyoqXG4gICAgICAgIFNldHMgdmFsdWUgb2YgaW5wdXQuXG5cbiAgICAgICAgQG1ldGhvZCB2YWx1ZTJpbnB1dCh2YWx1ZSkgXG4gICAgICAgIEBwYXJhbSB7bWl4ZWR9IHZhbHVlXG4gICAgICAgKiovXG4gICAgICAgdmFsdWUyaW5wdXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHRoaXMuJGlucHV0LnZhbCh2YWx1ZSk7XG4gICAgICAgfSxcblxuICAgICAgIC8qKlxuICAgICAgICBSZXR1cm5zIHZhbHVlIG9mIGlucHV0LiBWYWx1ZSBjYW4gYmUgb2JqZWN0IChlLmcuIGRhdGVwaWNrZXIpXG5cbiAgICAgICAgQG1ldGhvZCBpbnB1dDJ2YWx1ZSgpIFxuICAgICAgICoqL1xuICAgICAgIGlucHV0MnZhbHVlOiBmdW5jdGlvbigpIHsgXG4gICAgICAgICAgIHJldHVybiB0aGlzLiRpbnB1dC52YWwoKTtcbiAgICAgICB9LCBcblxuICAgICAgIC8qKlxuICAgICAgICBBY3RpdmF0ZXMgaW5wdXQuIEZvciB0ZXh0IGl0IHNldHMgZm9jdXMuXG5cbiAgICAgICAgQG1ldGhvZCBhY3RpdmF0ZSgpIFxuICAgICAgICoqL1xuICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgaWYodGhpcy4kaW5wdXQuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgIH1cbiAgICAgICB9LFxuXG4gICAgICAgLyoqXG4gICAgICAgIENyZWF0ZXMgaW5wdXQuXG5cbiAgICAgICAgQG1ldGhvZCBjbGVhcigpIFxuICAgICAgICoqLyAgICAgICAgXG4gICAgICAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB0aGlzLiRpbnB1dC52YWwobnVsbCk7XG4gICAgICAgfSxcblxuICAgICAgIC8qKlxuICAgICAgICBtZXRob2QgdG8gZXNjYXBlIGh0bWwuXG4gICAgICAgKiovXG4gICAgICAgZXNjYXBlOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgcmV0dXJuICQoJzxkaXY+JykudGV4dChzdHIpLmh0bWwoKTtcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIC8qKlxuICAgICAgICBhdHRhY2ggaGFuZGxlciB0byBhdXRvbWF0aWNhbGx5IHN1Ym1pdCBmb3JtIHdoZW4gdmFsdWUgY2hhbmdlZCAodXNlZnVsIHdoZW4gYnV0dG9ucyBub3Qgc2hvd24pXG4gICAgICAgKiovXG4gICAgICAgYXV0b3N1Ym1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIFxuICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgLyoqXG4gICAgICAgQWRkaXRpb25hbCBhY3Rpb25zIHdoZW4gZGVzdHJveWluZyBlbGVtZW50IFxuICAgICAgICoqL1xuICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgIH0sXG5cbiAgICAgICAvLyAtLS0tLS0tLSBoZWxwZXIgZnVuY3Rpb25zIC0tLS0tLS0tXG4gICAgICAgc2V0Q2xhc3M6IGZ1bmN0aW9uKCkgeyAgICAgICAgICBcbiAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmlucHV0Y2xhc3MpIHtcbiAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LmFkZENsYXNzKHRoaXMub3B0aW9ucy5pbnB1dGNsYXNzKTsgXG4gICAgICAgICAgIH0gXG4gICAgICAgfSxcblxuICAgICAgIHNldEF0dHI6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uc1thdHRyXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMub3B0aW9uc1thdHRyXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQuYXR0cihhdHRyLCB0aGlzLm9wdGlvbnNbYXR0cl0pO1xuICAgICAgICAgICB9IFxuICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgb3B0aW9uOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgIH1cbiAgICAgICBcbiAgICB9O1xuICAgICAgICBcbiAgICBBYnN0cmFjdElucHV0LmRlZmF1bHRzID0geyAgXG4gICAgICAgIC8qKlxuICAgICAgICBIVE1MIHRlbXBsYXRlIG9mIGlucHV0LiBOb3JtYWxseSB5b3Ugc2hvdWxkIG5vdCBjaGFuZ2UgaXQuXG5cbiAgICAgICAgQHByb3BlcnR5IHRwbCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICcnXG4gICAgICAgICoqLyAgIFxuICAgICAgICB0cGw6ICcnLFxuICAgICAgICAvKipcbiAgICAgICAgQ1NTIGNsYXNzIGF1dG9tYXRpY2FsbHkgYXBwbGllZCB0byBpbnB1dFxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IGlucHV0Y2xhc3MgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBpbnB1dGNsYXNzOiBudWxsLFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIElmIGB0cnVlYCAtIGh0bWwgd2lsbCBiZSBlc2NhcGVkIGluIGNvbnRlbnQgb2YgZWxlbWVudCB2aWEgJC50ZXh0KCkgbWV0aG9kLiAgXG4gICAgICAgIElmIGBmYWxzZWAgLSBodG1sIHdpbGwgbm90IGJlIGVzY2FwZWQsICQuaHRtbCgpIHVzZWQuICBcbiAgICAgICAgV2hlbiB5b3UgdXNlIG93biBgZGlzcGxheWAgZnVuY3Rpb24sIHRoaXMgb3B0aW9uIG9idmlvc2x5IGhhcyBubyBlZmZlY3QuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgZXNjYXBlIFxuICAgICAgICBAdHlwZSBib29sZWFuXG4gICAgICAgIEBzaW5jZSAxLjUuMFxuICAgICAgICBAZGVmYXVsdCB0cnVlXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBlc2NhcGU6IHRydWUsXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIC8vc2NvcGUgZm9yIGV4dGVybmFsIG1ldGhvZHMgKGUuZy4gc291cmNlIGRlZmluZWQgYXMgZnVuY3Rpb24pXG4gICAgICAgIC8vZm9yIGludGVybmFsIHVzZSBvbmx5XG4gICAgICAgIHNjb3BlOiBudWxsLFxuICAgICAgICBcbiAgICAgICAgLy9uZWVkIHRvIHJlLWRlY2xhcmUgc2hvd2J1dHRvbnMgaGVyZSB0byBnZXQgaXQncyB2YWx1ZSBmcm9tIGNvbW1vbiBjb25maWcgKHBhc3NlZCBvbmx5IG9wdGlvbnMgZXhpc3RpbmcgaW4gZGVmYXVsdHMpXG4gICAgICAgIHNob3didXR0b25zOiB0cnVlIFxuICAgIH07XG4gICAgXG4gICAgJC5leHRlbmQoJC5mbi5lZGl0YWJsZXR5cGVzLCB7YWJzdHJhY3RpbnB1dDogQWJzdHJhY3RJbnB1dH0pO1xuICAgICAgICBcbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKipcbkxpc3QgLSBhYnN0cmFjdCBjbGFzcyBmb3IgaW5wdXRzIHRoYXQgaGF2ZSBzb3VyY2Ugb3B0aW9uIGxvYWRlZCBmcm9tIGpzIGFycmF5IG9yIHZpYSBhamF4XG5cbkBjbGFzcyBsaXN0XG5AZXh0ZW5kcyBhYnN0cmFjdGlucHV0XG4qKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIHZhciBMaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICBcbiAgICB9O1xuXG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoTGlzdCwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQpO1xuXG4gICAgJC5leHRlbmQoTGlzdC5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG5cbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5vblNvdXJjZVJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckxpc3QoKTtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IHRoaXMub3B0aW9ucy5zb3VyY2VFcnJvcjtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBodG1sMnZhbHVlOiBmdW5jdGlvbiAoaHRtbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vY2FuJ3Qgc2V0IHZhbHVlIGJ5IHRleHRcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHZhbHVlMmh0bWw6IGZ1bmN0aW9uICh2YWx1ZSwgZWxlbWVudCwgZGlzcGxheSwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgZGlzcGxheSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9jdXN0b20gZGlzcGxheSBtZXRob2RcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXkuY2FsbChlbGVtZW50LCB2YWx1ZSwgdGhpcy5zb3VyY2VEYXRhLCByZXNwb25zZSk7IFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZTJodG1sRmluYWwodmFsdWUsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vZm9yIG51bGwgdmFsdWUganVzdCBjYWxsIHN1Y2Nlc3Mgd2l0aG91dCBsb2FkaW5nIHNvdXJjZVxuICAgICAgICAgICAgaWYodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgIHN1Y2Nlc3MuY2FsbCh0aGlzKTsgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICB0aGlzLm9uU291cmNlUmVhZHkoc3VjY2VzcywgZnVuY3Rpb24gKCkgeyBkZWZlcnJlZC5yZXNvbHZlKCk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICAgICAgICB9LCAgXG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLSBhZGRpdGlvbmFsIGZ1bmN0aW9ucyAtLS0tLS0tLS0tLS1cblxuICAgICAgICBvblNvdXJjZVJlYWR5OiBmdW5jdGlvbiAoc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgICAgIC8vcnVuIHNvdXJjZSBpZiBpdCBmdW5jdGlvblxuICAgICAgICAgICAgdmFyIHNvdXJjZTtcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLnNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSB0aGlzLm9wdGlvbnMuc291cmNlLmNhbGwodGhpcy5vcHRpb25zLnNjb3BlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZURhdGEgPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vbm90ZTogaWYgZnVuY3Rpb24gcmV0dXJucyB0aGUgc2FtZSBzb3VyY2UgYXMgVVJMIC0gc291cmNlRGF0YSB3aWxsIGJlIHRha2VuIGZyb20gY2FoY2UgYW5kIG5vIGV4dHJhIHJlcXVlc3QgcGVyZm9ybWVkXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHRoaXMub3B0aW9ucy5zb3VyY2U7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaWYgYWxscmVhZHkgbG9hZGVkIGp1c3QgY2FsbCBzdWNjZXNzXG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuc291cmNlQ2FjaGUgJiYgJC5pc0FycmF5KHRoaXMuc291cmNlRGF0YSkpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy90cnkgcGFyc2UganNvbiBpbiBzaW5nbGUgcXVvdGVzIChmb3IgZG91YmxlIHF1b3RlcyBqcXVlcnkgZG9lcyBhdXRvbWF0aWNhbGx5KVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSAkLmZuLmVkaXRhYmxldXRpbHMudHJ5UGFyc2VKc29uKHNvdXJjZSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL2xvYWRpbmcgZnJvbSB1cmxcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIC8vdHJ5IHRvIGdldCBzb3VyY2VEYXRhIGZyb20gY2FjaGVcbiAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuc291cmNlQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhY2hlSUQgPSBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghJChkb2N1bWVudCkuZGF0YShjYWNoZUlEKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkuZGF0YShjYWNoZUlELCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSAkKGRvY3VtZW50KS5kYXRhKGNhY2hlSUQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgZm9yIGNhY2hlZCBkYXRhXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZS5sb2FkaW5nID09PSBmYWxzZSAmJiBjYWNoZS5zb3VyY2VEYXRhKSB7IC8vdGFrZSBzb3VyY2UgZnJvbSBjYWNoZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gY2FjaGUuc291cmNlRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9QcmVwZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FjaGUubG9hZGluZyA9PT0gdHJ1ZSkgeyAvL2NhY2hlIGlzIGxvYWRpbmcsIHB1dCBjYWxsYmFjayBpbiBzdGFjayB0byBiZSBjYWxsZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmNhbGxiYWNrcy5wdXNoKCQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlRGF0YSA9IGNhY2hlLnNvdXJjZURhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1ByZXBlbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxzbyBjb2xsZWN0aW5nIGVycm9yIGNhbGxiYWNrc1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuZXJyX2NhbGxiYWNrcy5wdXNoKCQucHJveHkoZXJyb3IsIHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy9ubyBjYWNoZSB5ZXQsIGFjdGl2YXRlIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmNhbGxiYWNrcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuZXJyX2NhbGxiYWNrcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vYWpheE9wdGlvbnMgZm9yIHNvdXJjZS4gQ2FuIGJlIG92ZXJ3cml0dGVuIGJ0IG9wdGlvbnMuc291cmNlT3B0aW9uc1xuICAgICAgICAgICAgICAgIHZhciBhamF4T3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdnZXQnLFxuICAgICAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICQucHJveHkoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gdGhpcy5tYWtlQXJyYXkoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZigkLmlzQXJyYXkodGhpcy5zb3VyY2VEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc3RvcmUgcmVzdWx0IGluIGNhY2hlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnNvdXJjZURhdGEgPSB0aGlzLnNvdXJjZURhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcnVuIHN1Y2Nlc3MgY2FsbGJhY2tzIGZvciBvdGhlciBmaWVsZHMgd2FpdGluZyBmb3IgdGhpcyBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNhY2hlLmNhbGxiYWNrcywgZnVuY3Rpb24gKCkgeyB0aGlzLmNhbGwoKTsgfSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUHJlcGVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3J1biBlcnJvciBjYWxsYmFja3MgZm9yIG90aGVyIGZpZWxkcyB3YWl0aW5nIGZvciB0aGlzIHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY2FjaGUuZXJyX2NhbGxiYWNrcywgZnVuY3Rpb24gKCkgeyB0aGlzLmNhbGwoKTsgfSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcnVuIGVycm9yIGNhbGxiYWNrcyBmb3Igb3RoZXIgZmllbGRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChjYWNoZS5lcnJfY2FsbGJhY2tzLCBmdW5jdGlvbiAoKSB7IHRoaXMuY2FsbCgpOyB9KTsgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpXG4gICAgICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zLnNvdXJjZU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vbG9hZGluZyBzb3VyY2VEYXRhIGZyb20gc2VydmVyXG4gICAgICAgICAgICAgICAgJC5hamF4KGFqYXhPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vb3B0aW9ucyBhcyBqc29uL2FycmF5XG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gdGhpcy5tYWtlQXJyYXkoc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoJC5pc0FycmF5KHRoaXMuc291cmNlRGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1ByZXBlbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzcy5jYWxsKHRoaXMpOyAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGRvUHJlcGVuZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnByZXBlbmQgPT09IG51bGwgfHwgdGhpcy5vcHRpb25zLnByZXBlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZighJC5pc0FycmF5KHRoaXMucHJlcGVuZERhdGEpKSB7XG4gICAgICAgICAgICAgICAgLy9ydW4gcHJlcGVuZCBpZiBpdCBpcyBmdW5jdGlvbiAob25jZSlcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5wcmVwZW5kKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucHJlcGVuZCA9IHRoaXMub3B0aW9ucy5wcmVwZW5kLmNhbGwodGhpcy5vcHRpb25zLnNjb3BlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vdHJ5IHBhcnNlIGpzb24gaW4gc2luZ2xlIHF1b3Rlc1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wcmVwZW5kID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbih0aGlzLm9wdGlvbnMucHJlcGVuZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0IHByZXBlbmQgZnJvbSBzdHJpbmcgdG8gb2JqZWN0XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMucHJlcGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnByZXBlbmQgPSB7Jyc6IHRoaXMub3B0aW9ucy5wcmVwZW5kfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5wcmVwZW5kRGF0YSA9IHRoaXMubWFrZUFycmF5KHRoaXMub3B0aW9ucy5wcmVwZW5kKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoJC5pc0FycmF5KHRoaXMucHJlcGVuZERhdGEpICYmICQuaXNBcnJheSh0aGlzLnNvdXJjZURhdGEpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gdGhpcy5wcmVwZW5kRGF0YS5jb25jYXQodGhpcy5zb3VyY2VEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKlxuICAgICAgICAgcmVuZGVycyBpbnB1dCBsaXN0XG4gICAgICAgICovXG4gICAgICAgIHJlbmRlckxpc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gdGhpcyBtZXRob2Qgc2hvdWxkIGJlIG92ZXJ3cml0dGVuIGluIGNoaWxkIGNsYXNzXG4gICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgICAvKlxuICAgICAgICAgc2V0IGVsZW1lbnQncyBodG1sIGJ5IHZhbHVlXG4gICAgICAgICovXG4gICAgICAgIHZhbHVlMmh0bWxGaW5hbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBvdmVyd3JpdHRlbiBpbiBjaGlsZCBjbGFzc1xuICAgICAgICB9LCAgICAgICAgXG5cbiAgICAgICAgLyoqXG4gICAgICAgICogY29udmVydCBkYXRhIHRvIGFycmF5IHN1aXRhYmxlIGZvciBzb3VyY2VEYXRhLCBlLmcuIFt7dmFsdWU6IDEsIHRleHQ6ICdhYmMnfSwgey4uLn1dXG4gICAgICAgICovXG4gICAgICAgIG1ha2VBcnJheTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgdmFyIGNvdW50LCBvYmosIHJlc3VsdCA9IFtdLCBpdGVtLCBpdGVyYXRlSXRlbTtcbiAgICAgICAgICAgIGlmKCFkYXRhIHx8IHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoJC5pc0FycmF5KGRhdGEpKSB7IC8vYXJyYXlcbiAgICAgICAgICAgICAgICAvKiBcbiAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0byBpdGVyYXRlIGluc2lkZSBpdGVtIG9mIGFycmF5IGlmIGl0ZW0gaXMgb2JqZWN0LlxuICAgICAgICAgICAgICAgICAgIENhY2x1bGF0ZXMgY291bnQgb2Yga2V5cyBpbiBpdGVtIGFuZCBzdG9yZSBpbiBvYmouIFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaXRlcmF0ZUl0ZW0gPSBmdW5jdGlvbiAoaywgdikge1xuICAgICAgICAgICAgICAgICAgICBvYmogPSB7dmFsdWU6IGssIHRleHQ6IHZ9O1xuICAgICAgICAgICAgICAgICAgICBpZihjb3VudCsrID49IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsvLyBleGl0IGZyb20gYGVhY2hgIGlmIGl0ZW0gaGFzIG1vcmUgdGhhbiBvbmUga2V5LlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBkYXRhW2ldOyBcbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCA9IDA7IC8vY291bnQgb2Yga2V5cyBpbnNpZGUgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGl0ZW0sIGl0ZXJhdGVJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2FzZTogW3t2YWwxOiAndGV4dDEnfSwge3ZhbDI6ICd0ZXh0Mn0gLi4uXVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY291bnQgPT09IDEpIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2JqKTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jYXNlOiBbe3ZhbHVlOiAxLCB0ZXh0OiAndGV4dDEnfSwge3ZhbHVlOiAyLCB0ZXh0OiAndGV4dDInfSwgLi4uXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGNvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlZCBjaGVjayBvZiBleGlzdGFuY2U6IGl0ZW0uaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiYgaXRlbS5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNoaWxkcmVuID0gdGhpcy5tYWtlQXJyYXkoaXRlbS5jaGlsZHJlbik7ICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9jYXNlOiBbJ3RleHQxJywgJ3RleHQyJyAuLi5dXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7dmFsdWU6IGl0ZW0sIHRleHQ6IGl0ZW19KTsgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgeyAgLy9jYXNlOiB7dmFsMTogJ3RleHQxJywgdmFsMjogJ3RleHQyLCAuLi59XG4gICAgICAgICAgICAgICAgJC5lYWNoKGRhdGEsIGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHt2YWx1ZTogaywgdGV4dDogdn0pO1xuICAgICAgICAgICAgICAgIH0pOyAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgb3B0aW9uOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYoa2V5ID09PSAnc291cmNlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlRGF0YSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihrZXkgPT09ICdwcmVwZW5kJykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJlcGVuZERhdGEgPSBudWxsO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9ICAgICAgICBcblxuICAgIH0pOyAgICAgIFxuXG4gICAgTGlzdC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dC5kZWZhdWx0cywge1xuICAgICAgICAvKipcbiAgICAgICAgU291cmNlIGRhdGEgZm9yIGxpc3QuICBcbiAgICAgICAgSWYgKiphcnJheSoqIC0gaXQgc2hvdWxkIGJlIGluIGZvcm1hdDogYFt7dmFsdWU6IDEsIHRleHQ6IFwidGV4dDFcIn0sIHt2YWx1ZTogMiwgdGV4dDogXCJ0ZXh0MlwifSwgLi4uXWAgIFxuICAgICAgICBGb3IgY29tcGFiaWxpdHksIG9iamVjdCBmb3JtYXQgaXMgYWxzbyBzdXBwb3J0ZWQ6IGB7XCIxXCI6IFwidGV4dDFcIiwgXCIyXCI6IFwidGV4dDJcIiAuLi59YCBidXQgaXQgZG9lcyBub3QgZ3VhcmFudGVlIGVsZW1lbnRzIG9yZGVyLlxuICAgICAgICBcbiAgICAgICAgSWYgKipzdHJpbmcqKiAtIGNvbnNpZGVyZWQgYWpheCB1cmwgdG8gbG9hZCBpdGVtcy4gSW4gdGhhdCBjYXNlIHJlc3VsdHMgd2lsbCBiZSBjYWNoZWQgZm9yIGZpZWxkcyB3aXRoIHRoZSBzYW1lIHNvdXJjZSBhbmQgbmFtZS4gU2VlIGFsc28gYHNvdXJjZUNhY2hlYCBvcHRpb24uXG4gICAgICAgICAgXG4gICAgICAgIElmICoqZnVuY3Rpb24qKiwgaXQgc2hvdWxkIHJldHVybiBkYXRhIGluIGZvcm1hdCBhYm92ZSAoc2luY2UgMS40LjApLlxuICAgICAgICBcbiAgICAgICAgU2luY2UgMS40LjEga2V5IGBjaGlsZHJlbmAgc3VwcG9ydGVkIHRvIHJlbmRlciBPUFRHUk9VUCAoZm9yICoqc2VsZWN0KiogaW5wdXQgb25seSkuICBcbiAgICAgICAgYFt7dGV4dDogXCJncm91cDFcIiwgY2hpbGRyZW46IFt7dmFsdWU6IDEsIHRleHQ6IFwidGV4dDFcIn0sIHt2YWx1ZTogMiwgdGV4dDogXCJ0ZXh0MlwifV19LCAuLi5dYCBcblxuXHRcdFxuICAgICAgICBAcHJvcGVydHkgc291cmNlIFxuICAgICAgICBAdHlwZSBzdHJpbmcgfCBhcnJheSB8IG9iamVjdCB8IGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHNvdXJjZTogbnVsbCwgXG4gICAgICAgIC8qKlxuICAgICAgICBEYXRhIGF1dG9tYXRpY2FsbHkgcHJlcGVuZGVkIHRvIHRoZSBiZWdpbm5pbmcgb2YgZHJvcGRvd24gbGlzdC5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBwcmVwZW5kIFxuICAgICAgICBAdHlwZSBzdHJpbmcgfCBhcnJheSB8IG9iamVjdCB8IGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBwcmVwZW5kOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgIEVycm9yIG1lc3NhZ2Ugd2hlbiBsaXN0IGNhbm5vdCBiZSBsb2FkZWQgKGUuZy4gYWpheCBlcnJvcilcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBzb3VyY2VFcnJvciBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IEVycm9yIHdoZW4gbG9hZGluZyBsaXN0XG4gICAgICAgICoqLyAgICAgICAgICBcbiAgICAgICAgc291cmNlRXJyb3I6ICdFcnJvciB3aGVuIGxvYWRpbmcgbGlzdCcsXG4gICAgICAgIC8qKlxuICAgICAgICBpZiA8Y29kZT50cnVlPC9jb2RlPiBhbmQgc291cmNlIGlzICoqc3RyaW5nIHVybCoqIC0gcmVzdWx0cyB3aWxsIGJlIGNhY2hlZCBmb3IgZmllbGRzIHdpdGggdGhlIHNhbWUgc291cmNlLiAgICBcbiAgICAgICAgVXNlZnVsbCBmb3IgZWRpdGFibGUgY29sdW1uIGluIGdyaWQgdG8gcHJldmVudCBleHRyYSByZXF1ZXN0cy5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBzb3VyY2VDYWNoZSBcbiAgICAgICAgQHR5cGUgYm9vbGVhblxuICAgICAgICBAZGVmYXVsdCB0cnVlXG4gICAgICAgIEBzaW5jZSAxLjIuMFxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBzb3VyY2VDYWNoZTogdHJ1ZSxcbiAgICAgICAgLyoqXG4gICAgICAgIEFkZGl0aW9uYWwgYWpheCBvcHRpb25zIHRvIGJlIHVzZWQgaW4gJC5hamF4KCkgd2hlbiBsb2FkaW5nIGxpc3QgZnJvbSBzZXJ2ZXIuXG4gICAgICAgIFVzZWZ1bCB0byBzZW5kIGV4dHJhIHBhcmFtZXRlcnMgKGBkYXRhYCBrZXkpIG9yIGNoYW5nZSByZXF1ZXN0IG1ldGhvZCAoYHR5cGVgIGtleSkuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgc291cmNlT3B0aW9ucyBcbiAgICAgICAgQHR5cGUgb2JqZWN0fGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgQHNpbmNlIDEuNS4wXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHNvdXJjZU9wdGlvbnM6IG51bGxcbiAgICB9KTtcblxuICAgICQuZm4uZWRpdGFibGV0eXBlcy5saXN0ID0gTGlzdDsgICAgICBcblxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuVGV4dCBpbnB1dFxuXG5AY2xhc3MgdGV4dFxuQGV4dGVuZHMgYWJzdHJhY3RpbnB1dFxuQGZpbmFsXG5AZXhhbXBsZVxuPGEgaHJlZj1cIiNcIiBpZD1cInVzZXJuYW1lXCIgZGF0YS10eXBlPVwidGV4dFwiIGRhdGEtcGs9XCIxXCI+YXdlc29tZTwvYT5cbjxzY3JpcHQ+XG4kKGZ1bmN0aW9uKCl7XG4gICAgJCgnI3VzZXJuYW1lJykuZWRpdGFibGUoe1xuICAgICAgICB1cmw6ICcvcG9zdCcsXG4gICAgICAgIHRpdGxlOiAnRW50ZXIgdXNlcm5hbWUnXG4gICAgfSk7XG59KTtcbjwvc2NyaXB0PlxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICB2YXIgVGV4dCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgndGV4dCcsIG9wdGlvbnMsIFRleHQuZGVmYXVsdHMpO1xuICAgIH07XG5cbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChUZXh0LCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dCk7XG5cbiAgICAkLmV4dGVuZChUZXh0LnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB0aGlzLnJlbmRlckNsZWFyKCk7XG4gICAgICAgICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdwbGFjZWhvbGRlcicpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYodGhpcy4kaW5wdXQuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICQuZm4uZWRpdGFibGV1dGlscy5zZXRDdXJzb3JQb3NpdGlvbih0aGlzLiRpbnB1dC5nZXQoMCksIHRoaXMuJGlucHV0LnZhbCgpLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYodGhpcy50b2dnbGVDbGVhcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUNsZWFyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLy9yZW5kZXIgY2xlYXIgYnV0dG9uXG4gICAgICAgIHJlbmRlckNsZWFyOiAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xlYXIpIHtcbiAgICAgICAgICAgICAgIHRoaXMuJGNsZWFyID0gJCgnPHNwYW4gY2xhc3M9XCJlZGl0YWJsZS1jbGVhci14XCI+PC9zcGFuPicpO1xuICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQuYWZ0ZXIodGhpcy4kY2xlYXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoJ3BhZGRpbmctcmlnaHQnLCAyNClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmtleXVwKCQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hcnJvd3MsIGVudGVyLCB0YWIsIGV0Y1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYofiQuaW5BcnJheShlLmtleUNvZGUsIFs0MCwzOCw5LDEzLDI3XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnRvZ2dsZUNsZWFyKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICB0aGlzLiRjbGVhci5jbGljaygkLnByb3h5KHRoaXMuY2xlYXIsIHRoaXMpKTsgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBwb3N0cmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAvL25vdyBgY2xlYXJgIGlzIHBvc2l0aW9uZWQgdmlhIGNzc1xuICAgICAgICAgICAgaWYodGhpcy4kY2xlYXIpIHtcbiAgICAgICAgICAgICAgICAvL2NhbiBwb3NpdGlvbiBjbGVhciBidXR0b24gb25seSBoZXJlLCB3aGVuIGZvcm0gaXMgc2hvd24gYW5kIGhlaWdodCBjYW4gYmUgY2FsY3VsYXRlZFxuLy8gICAgICAgICAgICAgICAgdmFyIGggPSB0aGlzLiRpbnB1dC5vdXRlckhlaWdodCh0cnVlKSB8fCAyMCxcbiAgICAgICAgICAgICAgICB2YXIgaCA9IHRoaXMuJGNsZWFyLnBhcmVudCgpLmhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICBkZWx0YSA9IChoIC0gdGhpcy4kY2xlYXIuaGVpZ2h0KCkpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy90aGlzLiRjbGVhci5jc3Moe2JvdHRvbTogZGVsdGEsIHJpZ2h0OiBkZWx0YX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKi8gXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvL3Nob3cgLyBoaWRlIGNsZWFyIGJ1dHRvblxuICAgICAgICB0b2dnbGVDbGVhcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYoIXRoaXMuJGNsZWFyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgbGVuID0gdGhpcy4kaW5wdXQudmFsKCkubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHZpc2libGUgPSB0aGlzLiRjbGVhci5pcygnOnZpc2libGUnKTtcbiAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihsZW4gJiYgIXZpc2libGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRjbGVhci5zaG93KCk7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZighbGVuICYmIHZpc2libGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRjbGVhci5oaWRlKCk7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB0aGlzLiRjbGVhci5oaWRlKCk7XG4gICAgICAgICAgIHRoaXMuJGlucHV0LnZhbCgnJykuZm9jdXMoKTtcbiAgICAgICAgfSAgICAgICAgICBcbiAgICB9KTtcblxuICAgIFRleHQuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQuZGVmYXVsdHMsIHtcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSB0cGwgXG4gICAgICAgIEBkZWZhdWx0IDxpbnB1dCB0eXBlPVwidGV4dFwiPlxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgdHBsOiAnPGlucHV0IHR5cGU9XCJ0ZXh0XCI+JyxcbiAgICAgICAgLyoqXG4gICAgICAgIFBsYWNlaG9sZGVyIGF0dHJpYnV0ZSBvZiBpbnB1dC4gU2hvd24gd2hlbiBpbnB1dCBpcyBlbXB0eS5cblxuICAgICAgICBAcHJvcGVydHkgcGxhY2Vob2xkZXIgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqLyAgICAgICAgICAgICBcbiAgICAgICAgcGxhY2Vob2xkZXI6IG51bGwsXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgV2hldGhlciB0byBzaG93IGBjbGVhcmAgYnV0dG9uIFxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IGNsZWFyIFxuICAgICAgICBAdHlwZSBib29sZWFuXG4gICAgICAgIEBkZWZhdWx0IHRydWUgICAgICAgIFxuICAgICAgICAqKi9cbiAgICAgICAgY2xlYXI6IHRydWVcbiAgICB9KTtcblxuICAgICQuZm4uZWRpdGFibGV0eXBlcy50ZXh0ID0gVGV4dDtcblxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuVGV4dGFyZWEgaW5wdXRcblxuQGNsYXNzIHRleHRhcmVhXG5AZXh0ZW5kcyBhYnN0cmFjdGlucHV0XG5AZmluYWxcbkBleGFtcGxlXG48YSBocmVmPVwiI1wiIGlkPVwiY29tbWVudHNcIiBkYXRhLXR5cGU9XCJ0ZXh0YXJlYVwiIGRhdGEtcGs9XCIxXCI+YXdlc29tZSBjb21tZW50ITwvYT5cbjxzY3JpcHQ+XG4kKGZ1bmN0aW9uKCl7XG4gICAgJCgnI2NvbW1lbnRzJykuZWRpdGFibGUoe1xuICAgICAgICB1cmw6ICcvcG9zdCcsXG4gICAgICAgIHRpdGxlOiAnRW50ZXIgY29tbWVudHMnLFxuICAgICAgICByb3dzOiAxMFxuICAgIH0pO1xufSk7XG48L3NjcmlwdD5cbioqL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIFRleHRhcmVhID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCd0ZXh0YXJlYScsIG9wdGlvbnMsIFRleHRhcmVhLmRlZmF1bHRzKTtcbiAgICB9O1xuXG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoVGV4dGFyZWEsICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0KTtcblxuICAgICQuZXh0ZW5kKFRleHRhcmVhLnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cigncGxhY2Vob2xkZXInKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cigncm93cycpOyAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2N0cmwgKyBlbnRlclxuICAgICAgICAgICAgdGhpcy4kaW5wdXQua2V5ZG93bihmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS53aGljaCA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCdmb3JtJykuc3VibWl0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgIC8vdXNpbmcgYHdoaXRlLXNwYWNlOiBwcmUtd3JhcGAgc29sdmVzIFxcbiAgPC0tPiBCUiBjb252ZXJzaW9uIHZlcnkgZWxlZ2FudCFcbiAgICAgICAvKiBcbiAgICAgICB2YWx1ZTJodG1sOiBmdW5jdGlvbih2YWx1ZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGh0bWwgPSAnJywgbGluZXM7XG4gICAgICAgICAgICBpZih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGxpbmVzID0gdmFsdWUuc3BsaXQoXCJcXG5cIik7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsaW5lc1tpXSA9ICQoJzxkaXY+JykudGV4dChsaW5lc1tpXSkuaHRtbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBodG1sID0gbGluZXMuam9pbignPGJyPicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJChlbGVtZW50KS5odG1sKGh0bWwpO1xuICAgICAgICB9LFxuICAgICAgIFxuICAgICAgICBodG1sMnZhbHVlOiBmdW5jdGlvbihodG1sKSB7XG4gICAgICAgICAgICBpZighaHRtbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChTdHJpbmcuZnJvbUNoYXJDb2RlKDEwKSwgJ2cnKTtcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IGh0bWwuc3BsaXQoLzxiclxccypcXC8/Pi9pKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9ICQoJzxkaXY+JykuaHRtbChsaW5lc1tpXSkudGV4dCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIG5ld2xpbmUgY2hhcmFjdGVycyAoXFxuKSB0byBhdm9pZCB0aGVtIGJlaW5nIGNvbnZlcnRlZCBieSB2YWx1ZTJodG1sKCkgbWV0aG9kXG4gICAgICAgICAgICAgICAgLy8gdGh1cyBhZGRpbmcgZXh0cmEgPGJyPiB0YWdzXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShyZWdleCwgJycpO1xuXG4gICAgICAgICAgICAgICAgbGluZXNbaV0gPSB0ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxpbmVzLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIH0sXG4gICAgICAgICAqL1xuICAgICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkLmZuLmVkaXRhYmxldHlwZXMudGV4dC5wcm90b3R5cGUuYWN0aXZhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgVGV4dGFyZWEuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQuZGVmYXVsdHMsIHtcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSB0cGxcbiAgICAgICAgQGRlZmF1bHQgPHRleHRhcmVhPjwvdGV4dGFyZWE+XG4gICAgICAgICoqL1xuICAgICAgICB0cGw6Jzx0ZXh0YXJlYT48L3RleHRhcmVhPicsXG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgaW5wdXRjbGFzc1xuICAgICAgICBAZGVmYXVsdCBpbnB1dC1sYXJnZVxuICAgICAgICAqKi9cbiAgICAgICAgaW5wdXRjbGFzczogJ2lucHV0LWxhcmdlJyxcbiAgICAgICAgLyoqXG4gICAgICAgIFBsYWNlaG9sZGVyIGF0dHJpYnV0ZSBvZiBpbnB1dC4gU2hvd24gd2hlbiBpbnB1dCBpcyBlbXB0eS5cblxuICAgICAgICBAcHJvcGVydHkgcGxhY2Vob2xkZXJcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovXG4gICAgICAgIHBsYWNlaG9sZGVyOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgTnVtYmVyIG9mIHJvd3MgaW4gdGV4dGFyZWFcblxuICAgICAgICBAcHJvcGVydHkgcm93c1xuICAgICAgICBAdHlwZSBpbnRlZ2VyXG4gICAgICAgIEBkZWZhdWx0IDdcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgcm93czogNyAgICAgICAgXG4gICAgfSk7XG5cbiAgICAkLmZuLmVkaXRhYmxldHlwZXMudGV4dGFyZWEgPSBUZXh0YXJlYTtcblxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuU2VsZWN0IChkcm9wZG93bilcblxuQGNsYXNzIHNlbGVjdFxuQGV4dGVuZHMgbGlzdFxuQGZpbmFsXG5AZXhhbXBsZVxuPGEgaHJlZj1cIiNcIiBpZD1cInN0YXR1c1wiIGRhdGEtdHlwZT1cInNlbGVjdFwiIGRhdGEtcGs9XCIxXCIgZGF0YS11cmw9XCIvcG9zdFwiIGRhdGEtdGl0bGU9XCJTZWxlY3Qgc3RhdHVzXCI+PC9hPlxuPHNjcmlwdD5cbiQoZnVuY3Rpb24oKXtcbiAgICAkKCcjc3RhdHVzJykuZWRpdGFibGUoe1xuICAgICAgICB2YWx1ZTogMiwgICAgXG4gICAgICAgIHNvdXJjZTogW1xuICAgICAgICAgICAgICB7dmFsdWU6IDEsIHRleHQ6ICdBY3RpdmUnfSxcbiAgICAgICAgICAgICAge3ZhbHVlOiAyLCB0ZXh0OiAnQmxvY2tlZCd9LFxuICAgICAgICAgICAgICB7dmFsdWU6IDMsIHRleHQ6ICdEZWxldGVkJ31cbiAgICAgICAgICAgXVxuICAgIH0pO1xufSk7XG48L3NjcmlwdD5cbioqL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIFNlbGVjdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgnc2VsZWN0Jywgb3B0aW9ucywgU2VsZWN0LmRlZmF1bHRzKTtcbiAgICB9O1xuXG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoU2VsZWN0LCAkLmZuLmVkaXRhYmxldHlwZXMubGlzdCk7XG5cbiAgICAkLmV4dGVuZChTZWxlY3QucHJvdG90eXBlLCB7XG4gICAgICAgIHJlbmRlckxpc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQuZW1wdHkoKTtcblxuICAgICAgICAgICAgdmFyIGZpbGxJdGVtcyA9IGZ1bmN0aW9uKCRlbCwgZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyO1xuICAgICAgICAgICAgICAgIGlmKCQuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhW2ldLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ci5sYWJlbCA9IGRhdGFbaV0udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZWwuYXBwZW5kKGZpbGxJdGVtcygkKCc8b3B0Z3JvdXA+JywgYXR0ciksIGRhdGFbaV0uY2hpbGRyZW4pKTsgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIudmFsdWUgPSBkYXRhW2ldLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGFbaV0uZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ci5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlbC5hcHBlbmQoJCgnPG9wdGlvbj4nLCBhdHRyKS50ZXh0KGRhdGFbaV0udGV4dCkpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJGVsO1xuICAgICAgICAgICAgfTsgICAgICAgIFxuXG4gICAgICAgICAgICBmaWxsSXRlbXModGhpcy4kaW5wdXQsIHRoaXMuc291cmNlRGF0YSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9lbnRlciBzdWJtaXRcbiAgICAgICAgICAgIHRoaXMuJGlucHV0Lm9uKCdrZXlkb3duLmVkaXRhYmxlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS53aGljaCA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCdmb3JtJykuc3VibWl0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7ICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgIHZhbHVlMmh0bWxGaW5hbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gJycsIFxuICAgICAgICAgICAgICAgIGl0ZW1zID0gJC5mbi5lZGl0YWJsZXV0aWxzLml0ZW1zQnlWYWx1ZSh2YWx1ZSwgdGhpcy5zb3VyY2VEYXRhKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRleHQgPSBpdGVtc1swXS50ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyQoZWxlbWVudCkudGV4dCh0ZXh0KTtcbiAgICAgICAgICAgICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LnByb3RvdHlwZS52YWx1ZTJodG1sLmNhbGwodGhpcywgdGV4dCwgZWxlbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBhdXRvc3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0Lm9mZigna2V5ZG93bi5lZGl0YWJsZScpLm9uKCdjaGFuZ2UuZWRpdGFibGUnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnZm9ybScpLnN1Ym1pdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTsgICAgICBcblxuICAgIFNlbGVjdC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMubGlzdC5kZWZhdWx0cywge1xuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IHRwbCBcbiAgICAgICAgQGRlZmF1bHQgPHNlbGVjdD48L3NlbGVjdD5cbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHRwbDonPHNlbGVjdD48L3NlbGVjdD4nXG4gICAgfSk7XG5cbiAgICAkLmZuLmVkaXRhYmxldHlwZXMuc2VsZWN0ID0gU2VsZWN0OyAgICAgIFxuXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG5MaXN0IG9mIGNoZWNrYm94ZXMuIFxuSW50ZXJuYWxseSB2YWx1ZSBzdG9yZWQgYXMgamF2YXNjcmlwdCBhcnJheSBvZiB2YWx1ZXMuXG5cbkBjbGFzcyBjaGVja2xpc3RcbkBleHRlbmRzIGxpc3RcbkBmaW5hbFxuQGV4YW1wbGVcbjxhIGhyZWY9XCIjXCIgaWQ9XCJvcHRpb25zXCIgZGF0YS10eXBlPVwiY2hlY2tsaXN0XCIgZGF0YS1waz1cIjFcIiBkYXRhLXVybD1cIi9wb3N0XCIgZGF0YS10aXRsZT1cIlNlbGVjdCBvcHRpb25zXCI+PC9hPlxuPHNjcmlwdD5cbiQoZnVuY3Rpb24oKXtcbiAgICAkKCcjb3B0aW9ucycpLmVkaXRhYmxlKHtcbiAgICAgICAgdmFsdWU6IFsyLCAzXSwgICAgXG4gICAgICAgIHNvdXJjZTogW1xuICAgICAgICAgICAgICB7dmFsdWU6IDEsIHRleHQ6ICdvcHRpb24xJ30sXG4gICAgICAgICAgICAgIHt2YWx1ZTogMiwgdGV4dDogJ29wdGlvbjInfSxcbiAgICAgICAgICAgICAge3ZhbHVlOiAzLCB0ZXh0OiAnb3B0aW9uMyd9XG4gICAgICAgICAgIF1cbiAgICB9KTtcbn0pO1xuPC9zY3JpcHQ+XG4qKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIHZhciBDaGVja2xpc3QgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ2NoZWNrbGlzdCcsIG9wdGlvbnMsIENoZWNrbGlzdC5kZWZhdWx0cyk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KENoZWNrbGlzdCwgJC5mbi5lZGl0YWJsZXR5cGVzLmxpc3QpO1xuXG4gICAgJC5leHRlbmQoQ2hlY2tsaXN0LnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXJMaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkbGFiZWwsICRkaXY7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJHRwbC5lbXB0eSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZighJC5pc0FycmF5KHRoaXMuc291cmNlRGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPHRoaXMuc291cmNlRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICRsYWJlbCA9ICQoJzxsYWJlbD4nKS5hcHBlbmQoJCgnPGlucHV0PicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnNvdXJjZURhdGFbaV0udmFsdWUgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nKS50ZXh0KCcgJyt0aGlzLnNvdXJjZURhdGFbaV0udGV4dCkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICQoJzxkaXY+JykuYXBwZW5kKCRsYWJlbCkuYXBwZW5kVG8odGhpcy4kdHBsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kaW5wdXQgPSB0aGlzLiR0cGwuZmluZCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyk7XG4gICAgICAgICAgICB0aGlzLnNldENsYXNzKCk7XG4gICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgdmFsdWUyc3RyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICByZXR1cm4gJC5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLnNvcnQoKS5qb2luKCQudHJpbSh0aGlzLm9wdGlvbnMuc2VwYXJhdG9yKSkgOiAnJztcbiAgICAgICB9LCAgXG4gICAgICAgXG4gICAgICAgLy9wYXJzZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICAgICAgIHN0cjJ2YWx1ZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgIHZhciByZWcsIHZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgaWYodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgJiYgc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgcmVnID0gbmV3IFJlZ0V4cCgnXFxcXHMqJyskLnRyaW0odGhpcy5vcHRpb25zLnNlcGFyYXRvcikrJ1xcXFxzKicpO1xuICAgICAgICAgICAgICAgdmFsdWUgPSBzdHIuc3BsaXQocmVnKTtcbiAgICAgICAgICAgfSBlbHNlIGlmKCQuaXNBcnJheShzdHIpKSB7XG4gICAgICAgICAgICAgICB2YWx1ZSA9IHN0cjsgXG4gICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICB2YWx1ZSA9IFtzdHJdO1xuICAgICAgICAgICB9XG4gICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSwgICAgICAgXG4gICAgICAgXG4gICAgICAgLy9zZXQgY2hlY2tlZCBvbiByZXF1aXJlZCBjaGVja2JveGVzXG4gICAgICAgdmFsdWUyaW5wdXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgaWYoJC5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LmVhY2goZnVuY3Rpb24oaSwgZWwpIHtcbiAgICAgICAgICAgICAgICAgICB2YXIgJGVsID0gJChlbCk7XG4gICAgICAgICAgICAgICAgICAgLy8gY2Fubm90IHVzZSAkLmluQXJyYXkgYXMgaXQgcGVyZm9ybXMgc3RyaWN0IGNvbXBhcmlzb25cbiAgICAgICAgICAgICAgICAgICAkLmVhY2godmFsdWUsIGZ1bmN0aW9uKGosIHZhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgIC8qanNsaW50IGVxZXE6IHRydWUqL1xuICAgICAgICAgICAgICAgICAgICAgICBpZigkZWwudmFsKCkgPT0gdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIC8qanNsaW50IGVxZXE6IGZhbHNlKi8gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRlbC5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgIH0pOyBcbiAgICAgICAgICAgIH0gIFxuICAgICAgICB9LCAgXG4gICAgICAgIFxuICAgICAgIGlucHV0MnZhbHVlOiBmdW5jdGlvbigpIHsgXG4gICAgICAgICAgIHZhciBjaGVja2VkID0gW107XG4gICAgICAgICAgIHRoaXMuJGlucHV0LmZpbHRlcignOmNoZWNrZWQnKS5lYWNoKGZ1bmN0aW9uKGksIGVsKSB7XG4gICAgICAgICAgICAgICBjaGVja2VkLnB1c2goJChlbCkudmFsKCkpO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgcmV0dXJuIGNoZWNrZWQ7XG4gICAgICAgfSwgICAgICAgICAgICBcbiAgICAgICAgICBcbiAgICAgICAvL2NvbGxlY3QgdGV4dCBvZiBjaGVja2VkIGJveGVzXG4gICAgICAgIHZhbHVlMmh0bWxGaW5hbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgdmFyIGh0bWwgPSBbXSxcbiAgICAgICAgICAgICAgIGNoZWNrZWQgPSAkLmZuLmVkaXRhYmxldXRpbHMuaXRlbXNCeVZhbHVlKHZhbHVlLCB0aGlzLnNvdXJjZURhdGEpLFxuICAgICAgICAgICAgICAgZXNjYXBlID0gdGhpcy5vcHRpb25zLmVzY2FwZTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICBpZihjaGVja2VkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgJC5lYWNoKGNoZWNrZWQsIGZ1bmN0aW9uKGksIHYpIHtcbiAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGVzY2FwZSA/ICQuZm4uZWRpdGFibGV1dGlscy5lc2NhcGUodi50ZXh0KSA6IHYudGV4dDsgXG4gICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKHRleHQpOyBcbiAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgJChlbGVtZW50KS5odG1sKGh0bWwuam9pbignPGJyPicpKTtcbiAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICQoZWxlbWVudCkuZW1wdHkoKTsgXG4gICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB0aGlzLiRpbnB1dC5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICBhdXRvc3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdGhpcy4kaW5wdXQub24oJ2tleWRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgIGlmIChlLndoaWNoID09PSAxMykge1xuICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnZm9ybScpLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9KTtcbiAgICAgICB9XG4gICAgfSk7ICAgICAgXG5cbiAgICBDaGVja2xpc3QuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLmxpc3QuZGVmYXVsdHMsIHtcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSB0cGwgXG4gICAgICAgIEBkZWZhdWx0IDxkaXY+PC9kaXY+XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB0cGw6JzxkaXYgY2xhc3M9XCJlZGl0YWJsZS1jaGVja2xpc3RcIj48L2Rpdj4nLFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSBpbnB1dGNsYXNzIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgaW5wdXRjbGFzczogbnVsbCwgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFNlcGFyYXRvciBvZiB2YWx1ZXMgd2hlbiByZWFkaW5nIGZyb20gYGRhdGEtdmFsdWVgIGF0dHJpYnV0ZVxuXG4gICAgICAgIEBwcm9wZXJ0eSBzZXBhcmF0b3IgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAnLCdcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHNlcGFyYXRvcjogJywnXG4gICAgfSk7XG5cbiAgICAkLmZuLmVkaXRhYmxldHlwZXMuY2hlY2tsaXN0ID0gQ2hlY2tsaXN0OyAgICAgIFxuXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG5IVE1MNSBpbnB1dCB0eXBlcy5cbkZvbGxvd2luZyB0eXBlcyBhcmUgc3VwcG9ydGVkOlxuXG4qIHBhc3N3b3JkXG4qIGVtYWlsXG4qIHVybFxuKiB0ZWxcbiogbnVtYmVyXG4qIHJhbmdlXG4qIHRpbWVcblxuTGVhcm4gbW9yZSBhYm91dCBodG1sNSBpbnB1dHM6ICBcbmh0dHA6Ly93d3cudzMub3JnL3dpa2kvSFRNTDVfZm9ybV9hZGRpdGlvbnMgIFxuVG8gY2hlY2sgYnJvd3NlciBjb21wYXRpYmlsaXR5IHBsZWFzZSBzZWU6ICBcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSFRNTC9FbGVtZW50L0lucHV0XG4gICAgICAgICAgICBcbkBjbGFzcyBodG1sNXR5cGVzIFxuQGV4dGVuZHMgdGV4dFxuQGZpbmFsXG5Ac2luY2UgMS4zLjBcbkBleGFtcGxlXG48YSBocmVmPVwiI1wiIGlkPVwiZW1haWxcIiBkYXRhLXR5cGU9XCJlbWFpbFwiIGRhdGEtcGs9XCIxXCI+YWRtaW5AZXhhbXBsZS5jb208L2E+XG48c2NyaXB0PlxuJChmdW5jdGlvbigpe1xuICAgICQoJyNlbWFpbCcpLmVkaXRhYmxlKHtcbiAgICAgICAgdXJsOiAnL3Bvc3QnLFxuICAgICAgICB0aXRsZTogJ0VudGVyIGVtYWlsJ1xuICAgIH0pO1xufSk7XG48L3NjcmlwdD5cbioqL1xuXG4vKipcbkBwcm9wZXJ0eSB0cGwgXG5AZGVmYXVsdCBkZXBlbmRzIG9uIHR5cGVcbioqLyBcblxuLypcblBhc3N3b3JkXG4qL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIFBhc3N3b3JkID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCdwYXNzd29yZCcsIG9wdGlvbnMsIFBhc3N3b3JkLmRlZmF1bHRzKTtcbiAgICB9O1xuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KFBhc3N3b3JkLCAkLmZuLmVkaXRhYmxldHlwZXMudGV4dCk7XG4gICAgJC5leHRlbmQoUGFzc3dvcmQucHJvdG90eXBlLCB7XG4gICAgICAgLy9kbyBub3QgZGlzcGxheSBwYXNzd29yZCwgc2hvdyAnW2hpZGRlbl0nIGluc3RlYWRcbiAgICAgICB2YWx1ZTJodG1sOiBmdW5jdGlvbih2YWx1ZSwgZWxlbWVudCkge1xuICAgICAgICAgICBpZih2YWx1ZSkge1xuICAgICAgICAgICAgICAgJChlbGVtZW50KS50ZXh0KCdbaGlkZGVuXScpO1xuICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgJChlbGVtZW50KS5lbXB0eSgpOyBcbiAgICAgICAgICAgfVxuICAgICAgIH0sXG4gICAgICAgLy9hcyBwYXNzd29yZCBub3QgZGlzcGxheWVkLCBzaG91bGQgbm90IHNldCB2YWx1ZSBieSBodG1sXG4gICAgICAgaHRtbDJ2YWx1ZTogZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICB9ICAgICAgIFxuICAgIH0pOyAgICBcbiAgICBQYXNzd29yZC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMudGV4dC5kZWZhdWx0cywge1xuICAgICAgICB0cGw6ICc8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCI+J1xuICAgIH0pO1xuICAgICQuZm4uZWRpdGFibGV0eXBlcy5wYXNzd29yZCA9IFBhc3N3b3JkO1xufSh3aW5kb3cualF1ZXJ5KSk7XG5cblxuLypcbkVtYWlsXG4qL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIEVtYWlsID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCdlbWFpbCcsIG9wdGlvbnMsIEVtYWlsLmRlZmF1bHRzKTtcbiAgICB9O1xuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KEVtYWlsLCAkLmZuLmVkaXRhYmxldHlwZXMudGV4dCk7XG4gICAgRW1haWwuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQuZGVmYXVsdHMsIHtcbiAgICAgICAgdHBsOiAnPGlucHV0IHR5cGU9XCJlbWFpbFwiPidcbiAgICB9KTtcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMuZW1haWwgPSBFbWFpbDtcbn0od2luZG93LmpRdWVyeSkpO1xuXG5cbi8qXG5VcmxcbiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICB2YXIgVXJsID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCd1cmwnLCBvcHRpb25zLCBVcmwuZGVmYXVsdHMpO1xuICAgIH07XG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoVXJsLCAkLmZuLmVkaXRhYmxldHlwZXMudGV4dCk7XG4gICAgVXJsLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy50ZXh0LmRlZmF1bHRzLCB7XG4gICAgICAgIHRwbDogJzxpbnB1dCB0eXBlPVwidXJsXCI+J1xuICAgIH0pO1xuICAgICQuZm4uZWRpdGFibGV0eXBlcy51cmwgPSBVcmw7XG59KHdpbmRvdy5qUXVlcnkpKTtcblxuXG4vKlxuVGVsXG4qL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIFRlbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgndGVsJywgb3B0aW9ucywgVGVsLmRlZmF1bHRzKTtcbiAgICB9O1xuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KFRlbCwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQpO1xuICAgIFRlbC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMudGV4dC5kZWZhdWx0cywge1xuICAgICAgICB0cGw6ICc8aW5wdXQgdHlwZT1cInRlbFwiPidcbiAgICB9KTtcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMudGVsID0gVGVsO1xufSh3aW5kb3cualF1ZXJ5KSk7XG5cblxuLypcbk51bWJlclxuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIHZhciBOdW1iZXJJbnB1dCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgnbnVtYmVyJywgb3B0aW9ucywgTnVtYmVySW5wdXQuZGVmYXVsdHMpO1xuICAgIH07XG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoTnVtYmVySW5wdXQsICQuZm4uZWRpdGFibGV0eXBlcy50ZXh0KTtcbiAgICAkLmV4dGVuZChOdW1iZXJJbnB1dC5wcm90b3R5cGUsIHtcbiAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgTnVtYmVySW5wdXQuc3VwZXJjbGFzcy5yZW5kZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignbWluJyk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ21heCcpO1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdzdGVwJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3RyZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYodGhpcy4kY2xlYXIpIHtcbiAgICAgICAgICAgICAgICAvL2luY3JlYXNlIHJpZ2h0IGZmc2V0ICBmb3IgdXAvZG93biBhcnJvd3NcbiAgICAgICAgICAgICAgICB0aGlzLiRjbGVhci5jc3Moe3JpZ2h0OiAyNH0pO1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgLy9jYW4gcG9zaXRpb24gY2xlYXIgYnV0dG9uIG9ubHkgaGVyZSwgd2hlbiBmb3JtIGlzIHNob3duIGFuZCBoZWlnaHQgY2FuIGJlIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgICAgICB2YXIgaCA9IHRoaXMuJGlucHV0Lm91dGVySGVpZ2h0KHRydWUpIHx8IDIwLFxuICAgICAgICAgICAgICAgICAgICBkZWx0YSA9IChoIC0gdGhpcy4kY2xlYXIuaGVpZ2h0KCkpIC8gMjtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL2FkZCAxMnB4IHRvIG9mZnNldCByaWdodCBmb3IgdXAvZG93biBhcnJvd3MgICAgXG4gICAgICAgICAgICAgICAgdGhpcy4kY2xlYXIuY3NzKHt0b3A6IGRlbHRhLCByaWdodDogZGVsdGEgKyAxNn0pO1xuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICB9IFxuICAgICAgICB9ICAgICAgICBcbiAgICB9KTsgICAgIFxuICAgIE51bWJlcklucHV0LmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy50ZXh0LmRlZmF1bHRzLCB7XG4gICAgICAgIHRwbDogJzxpbnB1dCB0eXBlPVwibnVtYmVyXCI+JyxcbiAgICAgICAgaW5wdXRjbGFzczogJ2lucHV0LW1pbmknLFxuICAgICAgICBtaW46IG51bGwsXG4gICAgICAgIG1heDogbnVsbCxcbiAgICAgICAgc3RlcDogbnVsbFxuICAgIH0pO1xuICAgICQuZm4uZWRpdGFibGV0eXBlcy5udW1iZXIgPSBOdW1iZXJJbnB1dDtcbn0od2luZG93LmpRdWVyeSkpO1xuXG5cbi8qXG5SYW5nZSAoaW5oZXJpdCBmcm9tIG51bWJlcilcbiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICB2YXIgUmFuZ2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ3JhbmdlJywgb3B0aW9ucywgUmFuZ2UuZGVmYXVsdHMpO1xuICAgIH07XG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoUmFuZ2UsICQuZm4uZWRpdGFibGV0eXBlcy5udW1iZXIpO1xuICAgICQuZXh0ZW5kKFJhbmdlLnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0ID0gdGhpcy4kdHBsLmZpbHRlcignaW5wdXQnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZXRDbGFzcygpO1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdtaW4nKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignbWF4Jyk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3N0ZXAnKTsgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5vbignaW5wdXQnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICQodGhpcykuc2libGluZ3MoJ291dHB1dCcpLnRleHQoJCh0aGlzKS52YWwoKSk7IFxuICAgICAgICAgICAgfSk7ICBcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgfSAgICAgICAgIFxuICAgIH0pO1xuICAgIFJhbmdlLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5udW1iZXIuZGVmYXVsdHMsIHtcbiAgICAgICAgdHBsOiAnPGlucHV0IHR5cGU9XCJyYW5nZVwiPjxvdXRwdXQgc3R5bGU9XCJ3aWR0aDogMzBweDsgZGlzcGxheTogaW5saW5lLWJsb2NrXCI+PC9vdXRwdXQ+JyxcbiAgICAgICAgaW5wdXRjbGFzczogJ2lucHV0LW1lZGl1bSdcbiAgICB9KTtcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMucmFuZ2UgPSBSYW5nZTtcbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKlxuVGltZVxuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIFRpbWUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ3RpbWUnLCBvcHRpb25zLCBUaW1lLmRlZmF1bHRzKTtcbiAgICB9O1xuICAgIC8vaW5oZXJpdCBmcm9tIGFic3RyYWN0LCBhcyBpbmhlcml0YW5jZSBmcm9tIHRleHQgZ2l2ZXMgc2VsZWN0aW9uIGVycm9yLlxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KFRpbWUsICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0KTtcbiAgICAkLmV4dGVuZChUaW1lLnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB0aGlzLnNldENsYXNzKCk7XG4gICAgICAgIH0gICAgICAgIFxuICAgIH0pO1xuICAgIFRpbWUuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQuZGVmYXVsdHMsIHtcbiAgICAgICAgdHBsOiAnPGlucHV0IHR5cGU9XCJ0aW1lXCI+J1xuICAgIH0pO1xuICAgICQuZm4uZWRpdGFibGV0eXBlcy50aW1lID0gVGltZTtcbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKipcblNlbGVjdDIgaW5wdXQuIEJhc2VkIG9uIGFtYXppbmcgd29yayBvZiBJZ29yIFZheW5iZXJnIGh0dHBzOi8vZ2l0aHViLmNvbS9pdmF5bmJlcmcvc2VsZWN0Mi4gIFxuUGxlYXNlIHNlZSBbb3JpZ2luYWwgc2VsZWN0MiBkb2NzXShodHRwOi8vaXZheW5iZXJnLmdpdGh1Yi5jb20vc2VsZWN0MikgZm9yIGRldGFpbGVkIGRlc2NyaXB0aW9uIGFuZCBvcHRpb25zLiAgXG4gXG5Zb3Ugc2hvdWxkIG1hbnVhbGx5IGRvd25sb2FkIGFuZCBpbmNsdWRlIHNlbGVjdDIgZGlzdHJpYnV0aXZlOiAgXG5cbiAgICA8bGluayBocmVmPVwic2VsZWN0Mi9zZWxlY3QyLmNzc1wiIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIj48L2xpbms+ICBcbiAgICA8c2NyaXB0IHNyYz1cInNlbGVjdDIvc2VsZWN0Mi5qc1wiPjwvc2NyaXB0PiAgXG4gICAgXG5UbyBtYWtlIGl0ICoqYm9vdHN0cmFwLXN0eWxlZCoqIHlvdSBjYW4gdXNlIGNzcyBmcm9tIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vdDBtL3NlbGVjdDItYm9vdHN0cmFwLWNzcyk6IFxuXG4gICAgPGxpbmsgaHJlZj1cInNlbGVjdDItYm9vdHN0cmFwLmNzc1wiIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIj48L2xpbms+ICAgIFxuICAgIFxuKipOb3RlOioqIGN1cnJlbnRseSBgYXV0b3RleHRgIGZlYXR1cmUgZG9lcyBub3Qgd29yayBmb3Igc2VsZWN0MiB3aXRoIGBhamF4YCByZW1vdGUgc291cmNlLiAgICBcbllvdSBuZWVkIGluaXRpYWxseSBwdXQgYm90aCBgZGF0YS12YWx1ZWAgYW5kIGVsZW1lbnQncyB0ZXh0IHlvdXNlbGY6ICAgIFxuXG4gICAgPGEgaHJlZj1cIiNcIiBkYXRhLXR5cGU9XCJzZWxlY3QyXCIgZGF0YS12YWx1ZT1cIjFcIj5UZXh0MTwvYT5cbiAgICBcbiAgICBcbkBjbGFzcyBzZWxlY3QyXG5AZXh0ZW5kcyBhYnN0cmFjdGlucHV0XG5Ac2luY2UgMS40LjFcbkBmaW5hbFxuQGV4YW1wbGVcbjxhIGhyZWY9XCIjXCIgaWQ9XCJjb3VudHJ5XCIgZGF0YS10eXBlPVwic2VsZWN0MlwiIGRhdGEtcGs9XCIxXCIgZGF0YS12YWx1ZT1cInJ1XCIgZGF0YS11cmw9XCIvcG9zdFwiIGRhdGEtdGl0bGU9XCJTZWxlY3QgY291bnRyeVwiPjwvYT5cbjxzY3JpcHQ+XG4kKGZ1bmN0aW9uKCl7XG4gICAgLy9sb2NhbCBzb3VyY2VcbiAgICAkKCcjY291bnRyeScpLmVkaXRhYmxlKHtcbiAgICAgICAgc291cmNlOiBbXG4gICAgICAgICAgICAgIHtpZDogJ2diJywgdGV4dDogJ0dyZWF0IEJyaXRhaW4nfSxcbiAgICAgICAgICAgICAge2lkOiAndXMnLCB0ZXh0OiAnVW5pdGVkIFN0YXRlcyd9LFxuICAgICAgICAgICAgICB7aWQ6ICdydScsIHRleHQ6ICdSdXNzaWEnfVxuICAgICAgICAgICBdLFxuICAgICAgICBzZWxlY3QyOiB7XG4gICAgICAgICAgIG11bHRpcGxlOiB0cnVlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvL3JlbW90ZSBzb3VyY2UgKHNpbXBsZSlcbiAgICAkKCcjY291bnRyeScpLmVkaXRhYmxlKHtcbiAgICAgICAgc291cmNlOiAnL2dldENvdW50cmllcycsXG4gICAgICAgIHNlbGVjdDI6IHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IENvdW50cnknLFxuICAgICAgICAgICAgbWluaW11bUlucHV0TGVuZ3RoOiAxXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvL3JlbW90ZSBzb3VyY2UgKGFkdmFuY2VkKVxuICAgICQoJyNjb3VudHJ5JykuZWRpdGFibGUoe1xuICAgICAgICBzZWxlY3QyOiB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBDb3VudHJ5JyxcbiAgICAgICAgICAgIGFsbG93Q2xlYXI6IHRydWUsXG4gICAgICAgICAgICBtaW5pbXVtSW5wdXRMZW5ndGg6IDMsXG4gICAgICAgICAgICBpZDogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5Db3VudHJ5SWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWpheDoge1xuICAgICAgICAgICAgICAgIHVybDogJy9nZXRDb3VudHJpZXMnLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24gKHRlcm0sIHBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcXVlcnk6IHRlcm0gfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc3VsdHM6IGZ1bmN0aW9uIChkYXRhLCBwYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHJlc3VsdHM6IGRhdGEgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9ybWF0UmVzdWx0OiBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLkNvdW50cnlOYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvcm1hdFNlbGVjdGlvbjogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5Db3VudHJ5TmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbml0U2VsZWN0aW9uOiBmdW5jdGlvbiAoZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5nZXQoJy9nZXRDb3VudHJ5QnlJZCcsIHsgcXVlcnk6IGVsZW1lbnQudmFsKCkgfSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9ICBcbiAgICB9KTtcbn0pO1xuPC9zY3JpcHQ+XG4qKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgnc2VsZWN0MicsIG9wdGlvbnMsIENvbnN0cnVjdG9yLmRlZmF1bHRzKTtcblxuICAgICAgICBvcHRpb25zLnNlbGVjdDIgPSBvcHRpb25zLnNlbGVjdDIgfHwge307XG5cbiAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIC8vcGxhY2Vob2xkZXJcbiAgICAgICAgaWYob3B0aW9ucy5wbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgb3B0aW9ucy5zZWxlY3QyLnBsYWNlaG9sZGVyID0gb3B0aW9ucy5wbGFjZWhvbGRlcjtcbiAgICAgICAgfVxuICAgICAgIFxuICAgICAgICAvL2lmIG5vdCBgdGFnc2AgbW9kZSwgdXNlIHNvdXJjZVxuICAgICAgICBpZighb3B0aW9ucy5zZWxlY3QyLnRhZ3MgJiYgb3B0aW9ucy5zb3VyY2UpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBvcHRpb25zLnNvdXJjZTtcbiAgICAgICAgICAgIC8vaWYgc291cmNlIGlzIGZ1bmN0aW9uLCBjYWxsIGl0IChvbmNlISlcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0aW9ucy5zb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgc291cmNlID0gb3B0aW9ucy5zb3VyY2UuY2FsbChvcHRpb25zLnNjb3BlKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zZWxlY3QyLmFqYXggPSBvcHRpb25zLnNlbGVjdDIuYWpheCB8fCB7fTtcbiAgICAgICAgICAgICAgICAvL3NvbWUgZGVmYXVsdCBhamF4IHBhcmFtc1xuICAgICAgICAgICAgICAgIGlmKCFvcHRpb25zLnNlbGVjdDIuYWpheC5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc2VsZWN0Mi5hamF4LmRhdGEgPSBmdW5jdGlvbih0ZXJtKSB7cmV0dXJuIHsgcXVlcnk6dGVybSB9O307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCFvcHRpb25zLnNlbGVjdDIuYWpheC5yZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc2VsZWN0Mi5hamF4LnJlc3VsdHMgPSBmdW5jdGlvbihkYXRhKSB7IHJldHVybiB7cmVzdWx0czpkYXRhIH07fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zZWxlY3QyLmFqYXgudXJsID0gc291cmNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGZvcm1hdCBhbmQgY29udmVydCB4LWVkaXRhYmxlIGZvcm1hdCB0byBzZWxlY3QyIGZvcm1hdCAoaWYgbmVlZGVkKVxuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlRGF0YSA9IHRoaXMuY29udmVydFNvdXJjZShzb3VyY2UpO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2VsZWN0Mi5kYXRhID0gdGhpcy5zb3VyY2VEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IFxuXG4gICAgICAgIC8vb3ZlcnJpZGluZyBvYmplY3RzIGluIGNvbmZpZyAoYXMgYnkgZGVmYXVsdCBqUXVlcnkgZXh0ZW5kKCkgaXMgbm90IHJlY3Vyc2l2ZSlcbiAgICAgICAgdGhpcy5vcHRpb25zLnNlbGVjdDIgPSAkLmV4dGVuZCh7fSwgQ29uc3RydWN0b3IuZGVmYXVsdHMuc2VsZWN0Miwgb3B0aW9ucy5zZWxlY3QyKTtcblxuICAgICAgICAvL2RldGVjdCB3aGV0aGVyIGl0IGlzIG11bHRpLXZhbHVlZFxuICAgICAgICB0aGlzLmlzTXVsdGlwbGUgPSB0aGlzLm9wdGlvbnMuc2VsZWN0Mi50YWdzIHx8IHRoaXMub3B0aW9ucy5zZWxlY3QyLm11bHRpcGxlO1xuICAgICAgICB0aGlzLmlzUmVtb3RlID0gKCdhamF4JyBpbiB0aGlzLm9wdGlvbnMuc2VsZWN0Mik7XG5cbiAgICAgICAgLy9zdG9yZSBmdW5jdGlvbiByZXR1cm5pbmcgSUQgb2YgaXRlbVxuICAgICAgICAvL3Nob3VsZCBiZSBoZXJlIGFzIHVzZWQgaW5hdXRvdGV4dCBmb3IgbG9jYWwgc291cmNlXG4gICAgICAgIHRoaXMuaWRGdW5jID0gdGhpcy5vcHRpb25zLnNlbGVjdDIuaWQ7XG4gICAgICAgIGlmICh0eXBlb2YodGhpcy5pZEZ1bmMpICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhciBpZEtleSA9IHRoaXMuaWRGdW5jIHx8ICdpZCc7XG4gICAgICAgICAgICB0aGlzLmlkRnVuYyA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlW2lkS2V5XTsgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vc3RvcmUgZnVuY3Rpb24gdGhhdCByZW5kZXJzIHRleHQgaW4gc2VsZWN0MlxuICAgICAgICB0aGlzLmZvcm1hdFNlbGVjdGlvbiA9IHRoaXMub3B0aW9ucy5zZWxlY3QyLmZvcm1hdFNlbGVjdGlvbjtcbiAgICAgICAgaWYgKHR5cGVvZih0aGlzLmZvcm1hdFNlbGVjdGlvbikgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpcy5mb3JtYXRTZWxlY3Rpb24gPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS50ZXh0OyB9O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KENvbnN0cnVjdG9yLCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dCk7XG5cbiAgICAkLmV4dGVuZChDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3MoKTtcblxuICAgICAgICAgICAgLy9jYW4gbm90IGFwcGx5IHNlbGVjdDIgaGVyZSBhcyBpdCBjYWxscyBpbml0U2VsZWN0aW9uIFxuICAgICAgICAgICAgLy9vdmVyIGlucHV0IHRoYXQgZG9lcyBub3QgaGF2ZSBjb3JyZWN0IHZhbHVlIHlldC5cbiAgICAgICAgICAgIC8vYXBwbHkgc2VsZWN0MiBvbmx5IGluIHZhbHVlMmlucHV0XG4gICAgICAgICAgICAvL3RoaXMuJGlucHV0LnNlbGVjdDIodGhpcy5vcHRpb25zLnNlbGVjdDIpO1xuXG4gICAgICAgICAgICAvL3doZW4gZGF0YSBpcyBsb2FkZWQgdmlhIGFqYXgsIHdlIG5lZWQgdG8ga25vdyB3aGVuIGl0J3MgZG9uZSB0byBwb3B1bGF0ZSBsaXN0RGF0YVxuICAgICAgICAgICAgaWYodGhpcy5pc1JlbW90ZSkge1xuICAgICAgICAgICAgICAgIC8vbGlzdGVuIHRvIGxvYWRlZCBldmVudCB0byBwb3B1bGF0ZSBkYXRhXG4gICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQub24oJ3NlbGVjdDItbG9hZGVkJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlRGF0YSA9IGUuaXRlbXMucmVzdWx0cztcbiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdHJpZ2dlciByZXNpemUgb2YgZWRpdGFibGVmb3JtIHRvIHJlLXBvc2l0aW9uIGNvbnRhaW5lciBpbiBtdWx0aS12YWx1ZWQgbW9kZVxuICAgICAgICAgICAgaWYodGhpcy5pc011bHRpcGxlKSB7XG4gICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCdmb3JtJykucGFyZW50KCkudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZScpO1xuICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgfSxcblxuICAgICAgIHZhbHVlMmh0bWw6IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgICAgICAgIHZhciB0ZXh0ID0gJycsIGRhdGEsXG4gICAgICAgICAgICAgICB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuc2VsZWN0Mi50YWdzKSB7IC8vaW4gdGFncyBtb2RlIGp1c3QgYXNzaWduIHZhbHVlXG4gICAgICAgICAgICAgIGRhdGEgPSB2YWx1ZTsgXG4gICAgICAgICAgICAgIC8vZGF0YSA9ICQuZm4uZWRpdGFibGV1dGlscy5pdGVtc0J5VmFsdWUodmFsdWUsIHRoaXMub3B0aW9ucy5zZWxlY3QyLnRhZ3MsIHRoaXMuaWRGdW5jKTtcbiAgICAgICAgICAgfSBlbHNlIGlmKHRoaXMuc291cmNlRGF0YSkge1xuICAgICAgICAgICAgICBkYXRhID0gJC5mbi5lZGl0YWJsZXV0aWxzLml0ZW1zQnlWYWx1ZSh2YWx1ZSwgdGhpcy5zb3VyY2VEYXRhLCB0aGlzLmlkRnVuYyk7IFxuICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvL2NhbiBub3QgZ2V0IGxpc3Qgb2YgcG9zc2libGUgdmFsdWVzIFxuICAgICAgICAgICAgICAvLyhlLmcuIGF1dG90ZXh0IGZvciBzZWxlY3QyIHdpdGggYWpheCBzb3VyY2UpXG4gICAgICAgICAgIH1cblxuICAgICAgICAgICAvL2RhdGEgbWF5IGJlIGFycmF5ICh3aGVuIG11bHRpcGxlIHZhbHVlcyBhbGxvd2VkKVxuICAgICAgICAgICBpZigkLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgIC8vY29sbGVjdCBzZWxlY3RlZCBkYXRhIGFuZCBzaG93IHdpdGggc2VwYXJhdG9yXG4gICAgICAgICAgICAgICB0ZXh0ID0gW107XG4gICAgICAgICAgICAgICAkLmVhY2goZGF0YSwgZnVuY3Rpb24oaywgdil7XG4gICAgICAgICAgICAgICAgICAgdGV4dC5wdXNoKHYgJiYgdHlwZW9mIHYgPT09ICdvYmplY3QnID8gdGhhdC5mb3JtYXRTZWxlY3Rpb24odikgOiB2KTtcbiAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICB9IGVsc2UgaWYoZGF0YSkge1xuICAgICAgICAgICAgICAgdGV4dCA9IHRoYXQuZm9ybWF0U2VsZWN0aW9uKGRhdGEpO1xuICAgICAgICAgICB9XG5cbiAgICAgICAgICAgdGV4dCA9ICQuaXNBcnJheSh0ZXh0KSA/IHRleHQuam9pbih0aGlzLm9wdGlvbnMudmlld3NlcGFyYXRvcikgOiB0ZXh0O1xuXG4gICAgICAgICAgIC8vJChlbGVtZW50KS50ZXh0KHRleHQpO1xuICAgICAgICAgICBDb25zdHJ1Y3Rvci5zdXBlcmNsYXNzLnZhbHVlMmh0bWwuY2FsbCh0aGlzLCB0ZXh0LCBlbGVtZW50KTsgXG4gICAgICAgfSxcblxuICAgICAgIGh0bWwydmFsdWU6IGZ1bmN0aW9uKGh0bWwpIHtcbiAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5zZWxlY3QyLnRhZ3MgPyB0aGlzLnN0cjJ2YWx1ZShodG1sLCB0aGlzLm9wdGlvbnMudmlld3NlcGFyYXRvcikgOiBudWxsO1xuICAgICAgIH0sXG5cbiAgICAgICB2YWx1ZTJpbnB1dDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgLy8gaWYgdmFsdWUgYXJyYXkgPT4gam9pbiBpdCBhbnl3YXlcbiAgICAgICAgICAgaWYoJC5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmpvaW4odGhpcy5nZXRTZXBhcmF0b3IoKSk7XG4gICAgICAgICAgIH1cblxuICAgICAgICAgICAvL2ZvciByZW1vdGUgc291cmNlIGp1c3Qgc2V0IHZhbHVlLCB0ZXh0IGlzIHVwZGF0ZWQgYnkgaW5pdFNlbGVjdGlvblxuICAgICAgICAgICBpZighdGhpcy4kaW5wdXQuZGF0YSgnc2VsZWN0MicpKSB7XG4gICAgICAgICAgICAgICB0aGlzLiRpbnB1dC52YWwodmFsdWUpO1xuICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQuc2VsZWN0Mih0aGlzLm9wdGlvbnMuc2VsZWN0Mik7XG4gICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAvL3NlY29uZCBhcmd1bWVudCBuZWVkZWQgdG8gc2VwYXJhdGUgaW5pdGlhbCBjaGFuZ2UgZnJvbSB1c2VyJ3MgY2xpY2sgKGZvciBhdXRvc3VibWl0KSAgIFxuICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQudmFsKHZhbHVlKS50cmlnZ2VyKCdjaGFuZ2UnLCB0cnVlKTsgXG5cbiAgICAgICAgICAgICAgIC8vVW5jYXVnaHQgRXJyb3I6IGNhbm5vdCBjYWxsIHZhbCgpIGlmIGluaXRTZWxlY3Rpb24oKSBpcyBub3QgZGVmaW5lZFxuICAgICAgICAgICAgICAgLy90aGlzLiRpbnB1dC5zZWxlY3QyKCd2YWwnLCB2YWx1ZSk7XG4gICAgICAgICAgIH1cblxuICAgICAgICAgICAvLyBpZiBkZWZpbmVkIHJlbW90ZSBzb3VyY2UgQU5EIG5vIG11bHRpcGxlIG1vZGUgQU5EIG5vIHVzZXIncyBpbml0U2VsZWN0aW9uIHByb3ZpZGVkIC0tPiBcbiAgICAgICAgICAgLy8gd2Ugc2hvdWxkIHNvbWVob3cgZ2V0IHRleHQgZm9yIHByb3ZpZGVkIGlkLlxuICAgICAgICAgICAvLyBUaGUgc29sdXRpb24gaXMgdG8gdXNlIGVsZW1lbnQncyB0ZXh0IGFzIHRleHQgZm9yIHRoYXQgaWQgKGV4Y2x1ZGUgZW1wdHkpXG4gICAgICAgICAgIGlmKHRoaXMuaXNSZW1vdGUgJiYgIXRoaXMuaXNNdWx0aXBsZSAmJiAhdGhpcy5vcHRpb25zLnNlbGVjdDIuaW5pdFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgLy8gY3VzdG9tSWQgYW5kIGN1c3RvbVRleHQgYXJlIG1ldGhvZHMgdG8gZXh0cmFjdCBgaWRgIGFuZCBgdGV4dGAgZnJvbSBkYXRhIG9iamVjdFxuICAgICAgICAgICAgICAgLy8gd2UgY2FuIHVzZSB0aGlzIHdvcmthcm91bmQgb25seSBpZiB1c2VyIGRpZCBub3QgZGVmaW5lIHRoZXNlIG1ldGhvZHNcbiAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBjYW50IGNvbnN0cnVjdCBkYXRhIG9iamVjdFxuICAgICAgICAgICAgICAgdmFyIGN1c3RvbUlkID0gdGhpcy5vcHRpb25zLnNlbGVjdDIuaWQsXG4gICAgICAgICAgICAgICAgICAgY3VzdG9tVGV4dCA9IHRoaXMub3B0aW9ucy5zZWxlY3QyLmZvcm1hdFNlbGVjdGlvbjtcblxuICAgICAgICAgICAgICAgaWYoIWN1c3RvbUlkICYmICFjdXN0b21UZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgdmFyICRlbCA9ICQodGhpcy5vcHRpb25zLnNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICBpZiAoISRlbC5kYXRhKCdlZGl0YWJsZScpLmlzRW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7aWQ6IHZhbHVlLCB0ZXh0OiAkZWwudGV4dCgpfTtcbiAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQuc2VsZWN0MignZGF0YScsIGRhdGEpOyBcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgIH1cbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIGlucHV0MnZhbHVlOiBmdW5jdGlvbigpIHsgXG4gICAgICAgICAgIHJldHVybiB0aGlzLiRpbnB1dC5zZWxlY3QyKCd2YWwnKTtcbiAgICAgICB9LFxuXG4gICAgICAgc3RyMnZhbHVlOiBmdW5jdGlvbihzdHIsIHNlcGFyYXRvcikge1xuICAgICAgICAgICAgaWYodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgIXRoaXMuaXNNdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlcGFyYXRvciA9IHNlcGFyYXRvciB8fCB0aGlzLmdldFNlcGFyYXRvcigpO1xuXG4gICAgICAgICAgICB2YXIgdmFsLCBpLCBsO1xuXG4gICAgICAgICAgICBpZiAoc3RyID09PSBudWxsIHx8IHN0ci5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWwgPSBzdHIuc3BsaXQoc2VwYXJhdG9yKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSA9IGkgKyAxKSB7XG4gICAgICAgICAgICAgICAgdmFsW2ldID0gJC50cmltKHZhbFtpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgfSxcblxuICAgICAgICBhdXRvc3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbihlLCBpc0luaXRpYWwpe1xuICAgICAgICAgICAgICAgIGlmKCFpc0luaXRpYWwpIHtcbiAgICAgICAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnZm9ybScpLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFNlcGFyYXRvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnNlbGVjdDIuc2VwYXJhdG9yIHx8ICQuZm4uc2VsZWN0Mi5kZWZhdWx0cy5zZXBhcmF0b3I7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLypcbiAgICAgICAgQ29udmVydHMgc291cmNlIGZyb20geC1lZGl0YWJsZSBmb3JtYXQ6IHt2YWx1ZTogMSwgdGV4dDogXCIxXCJ9IHRvXG4gICAgICAgIHNlbGVjdDIgZm9ybWF0OiB7aWQ6IDEsIHRleHQ6IFwiMVwifVxuICAgICAgICAqL1xuICAgICAgICBjb252ZXJ0U291cmNlOiBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmKCQuaXNBcnJheShzb3VyY2UpICYmIHNvdXJjZS5sZW5ndGggJiYgc291cmNlWzBdLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpPHNvdXJjZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZihzb3VyY2VbaV0udmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlW2ldLmlkID0gc291cmNlW2ldLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNvdXJjZVtpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuJGlucHV0LmRhdGEoJ3NlbGVjdDInKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LnNlbGVjdDIoJ2Rlc3Ryb3knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9KTtcblxuICAgIENvbnN0cnVjdG9yLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICBAZGVmYXVsdCA8aW5wdXQgdHlwZT1cImhpZGRlblwiPlxuICAgICAgICAqKi9cbiAgICAgICAgdHBsOic8aW5wdXQgdHlwZT1cImhpZGRlblwiPicsXG4gICAgICAgIC8qKlxuICAgICAgICBDb25maWd1cmF0aW9uIG9mIHNlbGVjdDIuIFtGdWxsIGxpc3Qgb2Ygb3B0aW9uc10oaHR0cDovL2l2YXluYmVyZy5naXRodWIuY29tL3NlbGVjdDIpLlxuXG4gICAgICAgIEBwcm9wZXJ0eSBzZWxlY3QyIFxuICAgICAgICBAdHlwZSBvYmplY3RcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi9cbiAgICAgICAgc2VsZWN0MjogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIFBsYWNlaG9sZGVyIGF0dHJpYnV0ZSBvZiBzZWxlY3RcblxuICAgICAgICBAcHJvcGVydHkgcGxhY2Vob2xkZXIgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIFNvdXJjZSBkYXRhIGZvciBzZWxlY3QuIEl0IHdpbGwgYmUgYXNzaWduZWQgdG8gc2VsZWN0MiBgZGF0YWAgcHJvcGVydHkgYW5kIGtlcHQgaGVyZSBqdXN0IGZvciBjb252ZW5pZW5jZS5cbiAgICAgICAgUGxlYXNlIG5vdGUsIHRoYXQgZm9ybWF0IGlzIGRpZmZlcmVudCBmcm9tIHNpbXBsZSBgc2VsZWN0YCBpbnB1dDogdXNlICdpZCcgaW5zdGVhZCBvZiAndmFsdWUnLlxuICAgICAgICBFLmcuIGBbe2lkOiAxLCB0ZXh0OiBcInRleHQxXCJ9LCB7aWQ6IDIsIHRleHQ6IFwidGV4dDJcIn0sIC4uLl1gLlxuXG4gICAgICAgIEBwcm9wZXJ0eSBzb3VyY2UgXG4gICAgICAgIEB0eXBlIGFycmF5fHN0cmluZ3xmdW5jdGlvblxuICAgICAgICBAZGVmYXVsdCBudWxsICAgICAgICBcbiAgICAgICAgKiovXG4gICAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIFNlcGFyYXRvciB1c2VkIHRvIGRpc3BsYXkgdGFncy5cblxuICAgICAgICBAcHJvcGVydHkgdmlld3NlcGFyYXRvciBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICcsICcgICAgICAgIFxuICAgICAgICAqKi9cbiAgICAgICAgdmlld3NlcGFyYXRvcjogJywgJ1xuICAgIH0pO1xuXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLnNlbGVjdDIgPSBDb25zdHJ1Y3RvcjtcblxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuKiBDb21ib2RhdGUgLSAxLjAuNVxuKiBEcm9wZG93biBkYXRlIGFuZCB0aW1lIHBpY2tlci5cbiogQ29udmVydHMgdGV4dCBpbnB1dCBpbnRvIGRyb3Bkb3ducyB0byBwaWNrIGRheSwgbW9udGgsIHllYXIsIGhvdXIsIG1pbnV0ZSBhbmQgc2Vjb25kLlxuKiBVc2VzIG1vbWVudGpzIGFzIGRhdGV0aW1lIGxpYnJhcnkgaHR0cDovL21vbWVudGpzLmNvbS5cbiogRm9yIGkxOG4gaW5jbHVkZSBjb3JyZXNwb25kaW5nIGZpbGUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdGltcndvb2QvbW9tZW50L3RyZWUvbWFzdGVyL2xhbmcgXG4qXG4qIENvbmZ1c2lvbiBhdCBub29uIGFuZCBtaWRuaWdodCAtIHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpLzEyLWhvdXJfY2xvY2sjQ29uZnVzaW9uX2F0X25vb25fYW5kX21pZG5pZ2h0XG4qIEluIGNvbWJvZGF0ZTogXG4qIDEyOjAwIHBtIC0tPiAxMjowMCAoMjQtaCBmb3JtYXQsIG1pZGRheSlcbiogMTI6MDAgYW0gLS0+IDAwOjAwICgyNC1oIGZvcm1hdCwgbWlkbmlnaHQsIHN0YXJ0IG9mIGRheSlcbiogXG4qIERpZmZlcnMgZnJvbSBtb21lbnRqcyBwYXJzZSBydWxlczpcbiogMDA6MDAgcG0sIDEyOjAwIHBtIC0tPiAxMjowMCAoMjQtaCBmb3JtYXQsIGRheSBub3QgY2hhbmdlKVxuKiAwMDowMCBhbSwgMTI6MDAgYW0gLS0+IDAwOjAwICgyNC1oIGZvcm1hdCwgZGF5IG5vdCBjaGFuZ2UpXG4qIFxuKiBcbiogQXV0aG9yOiBWaXRhbGl5IFBvdGFwb3ZcbiogUHJvamVjdCBwYWdlOiBodHRwOi8vZ2l0aHViLmNvbS92aXRhbGV0cy9jb21ib2RhdGVcbiogQ29weXJpZ2h0IChjKSAyMDEyIFZpdGFsaXkgUG90YXBvdi4gUmVsZWFzZWQgdW5kZXIgTUlUIExpY2Vuc2UuXG4qKi9cbihmdW5jdGlvbiAoJCkge1xuXG4gICAgdmFyIENvbWJvZGF0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgICAgICBpZighdGhpcy4kZWxlbWVudC5pcygnaW5wdXQnKSkge1xuICAgICAgICAgICAgJC5lcnJvcignQ29tYm9kYXRlIHNob3VsZCBiZSBhcHBsaWVkIHRvIElOUFVUIGVsZW1lbnQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5mbi5jb21ib2RhdGUuZGVmYXVsdHMsIG9wdGlvbnMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpKTtcbiAgICAgICAgdGhpcy5pbml0KCk7ICBcbiAgICAgfTtcblxuICAgIENvbWJvZGF0ZS5wcm90b3R5cGUgPSB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiBDb21ib2RhdGUsIFxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLm1hcCA9IHtcbiAgICAgICAgICAgICAgICAvL2tleSAgIHJlZ2V4cCAgICBtb21lbnQubWV0aG9kXG4gICAgICAgICAgICAgICAgZGF5OiAgICBbJ0QnLCAgICAnZGF0ZSddLCBcbiAgICAgICAgICAgICAgICBtb250aDogIFsnTScsICAgICdtb250aCddLCBcbiAgICAgICAgICAgICAgICB5ZWFyOiAgIFsnWScsICAgICd5ZWFyJ10sIFxuICAgICAgICAgICAgICAgIGhvdXI6ICAgWydbSGhdJywgJ2hvdXJzJ10sXG4gICAgICAgICAgICAgICAgbWludXRlOiBbJ20nLCAgICAnbWludXRlcyddLCBcbiAgICAgICAgICAgICAgICBzZWNvbmQ6IFsncycsICAgICdzZWNvbmRzJ10sXG4gICAgICAgICAgICAgICAgYW1wbTogICBbJ1tBYV0nLCAnJ10gXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiR3aWRnZXQgPSAkKCc8c3BhbiBjbGFzcz1cImNvbWJvZGF0ZVwiPjwvc3Bhbj4nKS5odG1sKHRoaXMuZ2V0VGVtcGxhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmluaXRDb21ib3MoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy91cGRhdGUgb3JpZ2luYWwgaW5wdXQgb24gY2hhbmdlIFxuICAgICAgICAgICAgdGhpcy4kd2lkZ2V0Lm9uKCdjaGFuZ2UnLCAnc2VsZWN0JywgJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC52YWwodGhpcy5nZXRWYWx1ZSgpKS5jaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgZGF5cyBjb3VudCBpZiBtb250aCBvciB5ZWFyIGNoYW5nZXNcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNtYXJ0RGF5cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJChlLnRhcmdldCkuaXMoJy5tb250aCcpIHx8ICQoZS50YXJnZXQpLmlzKCcueWVhcicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGxDb21ibygnZGF5Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJHdpZGdldC5maW5kKCdzZWxlY3QnKS5jc3MoJ3dpZHRoJywgJ2F1dG8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gaGlkZSBvcmlnaW5hbCBpbnB1dCBhbmQgaW5zZXJ0IHdpZGdldCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKCkuYWZ0ZXIodGhpcy4kd2lkZ2V0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gc2V0IGluaXRpYWwgdmFsdWVcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy4kZWxlbWVudC52YWwoKSB8fCB0aGlzLm9wdGlvbnMudmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgIFJlcGxhY2UgdG9rZW5zIGluIHRlbXBsYXRlIHdpdGggPHNlbGVjdD4gZWxlbWVudHMgXG4gICAgICAgICovICAgICAgICAgXG4gICAgICAgIGdldFRlbXBsYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0cGwgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGU7XG5cbiAgICAgICAgICAgIC8vZmlyc3QgcGFzc1xuICAgICAgICAgICAgJC5lYWNoKHRoaXMubWFwLCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgICAgICAgdiA9IHZbMF07IFxuICAgICAgICAgICAgICAgIHZhciByID0gbmV3IFJlZ0V4cCh2KycrJyksXG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gdi5sZW5ndGggPiAxID8gdi5zdWJzdHJpbmcoMSwgMikgOiB2O1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0cGwgPSB0cGwucmVwbGFjZShyLCAneycrdG9rZW4rJ30nKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvL3JlcGxhY2Ugc3BhY2VzIHdpdGggJm5ic3A7XG4gICAgICAgICAgICB0cGwgPSB0cGwucmVwbGFjZSgvIC9nLCAnJm5ic3A7Jyk7XG5cbiAgICAgICAgICAgIC8vc2Vjb25kIHBhc3NcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLm1hcCwgZnVuY3Rpb24oaywgdikge1xuICAgICAgICAgICAgICAgIHYgPSB2WzBdO1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IHYubGVuZ3RoID4gMSA/IHYuc3Vic3RyaW5nKDEsIDIpIDogdjtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdHBsID0gdHBsLnJlcGxhY2UoJ3snK3Rva2VuKyd9JywgJzxzZWxlY3QgY2xhc3M9XCInK2srJ1wiPjwvc2VsZWN0PicpO1xuICAgICAgICAgICAgfSk7ICAgXG5cbiAgICAgICAgICAgIHJldHVybiB0cGw7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICAgSW5pdGlhbGl6ZSBjb21ib3MgdGhhdCBwcmVzZW50cyBpbiB0ZW1wbGF0ZSBcbiAgICAgICAgKi8gICAgICAgIFxuICAgICAgICBpbml0Q29tYm9zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5tYXApIHtcbiAgICAgICAgICAgICAgICB2YXIgJGMgPSB0aGlzLiR3aWRnZXQuZmluZCgnLicrayk7XG4gICAgICAgICAgICAgICAgLy8gc2V0IHByb3BlcnRpZXMgbGlrZSB0aGlzLiRkYXksIHRoaXMuJG1vbnRoIGV0Yy5cbiAgICAgICAgICAgICAgICB0aGlzWyckJytrXSA9ICRjLmxlbmd0aCA/ICRjIDogbnVsbDtcbiAgICAgICAgICAgICAgICAvLyBmaWxsIHdpdGggaXRlbXNcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGxDb21ibyhrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKlxuICAgICAgICAgRmlsbCBjb21ibyB3aXRoIGl0ZW1zIFxuICAgICAgICAqLyAgICAgICAgXG4gICAgICAgIGZpbGxDb21ibzogZnVuY3Rpb24oaykge1xuICAgICAgICAgICAgdmFyICRjb21ibyA9IHRoaXNbJyQnK2tdO1xuICAgICAgICAgICAgaWYgKCEkY29tYm8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGRlZmluZSBtZXRob2QgbmFtZSB0byBmaWxsIGl0ZW1zLCBlLmcgYGZpbGxEYXlzYFxuICAgICAgICAgICAgdmFyIGYgPSAnZmlsbCcgKyBrLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgay5zbGljZSgxKTsgXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzW2ZdKCk7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSAkY29tYm8udmFsKCk7XG5cbiAgICAgICAgICAgICRjb21iby5lbXB0eSgpO1xuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8aXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAkY29tYm8uYXBwZW5kKCc8b3B0aW9uIHZhbHVlPVwiJytpdGVtc1tpXVswXSsnXCI+JytpdGVtc1tpXVsxXSsnPC9vcHRpb24+Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRjb21iby52YWwodmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qXG4gICAgICAgICBJbml0aWFsaXplIGl0ZW1zIG9mIGNvbWJvcy4gSGFuZGxlcyBgZmlyc3RJdGVtYCBvcHRpb24gXG4gICAgICAgICovXG4gICAgICAgIGZpbGxDb21tb246IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtdLFxuICAgICAgICAgICAgICAgIHJlbFRpbWU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZmlyc3RJdGVtID09PSAnbmFtZScpIHtcbiAgICAgICAgICAgICAgICAvL25lZWQgYm90aCB0byBzdXBwb3J0IG1vbWVudCB2ZXIgPCAyIGFuZCAgPj0gMlxuICAgICAgICAgICAgICAgIHJlbFRpbWUgPSBtb21lbnQucmVsYXRpdmVUaW1lIHx8IG1vbWVudC5sYW5nRGF0YSgpLl9yZWxhdGl2ZVRpbWU7IFxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXIgPSB0eXBlb2YgcmVsVGltZVtrZXldID09PSAnZnVuY3Rpb24nID8gcmVsVGltZVtrZXldKDEsIHRydWUsIGtleSwgZmFsc2UpIDogcmVsVGltZVtrZXldO1xuICAgICAgICAgICAgICAgIC8vdGFrZSBsYXN0IGVudHJ5IChzZWUgbW9tZW50anMgbGFuZyBmaWxlcyBzdHJ1Y3R1cmUpIFxuICAgICAgICAgICAgICAgIGhlYWRlciA9IGhlYWRlci5zcGxpdCgnICcpLnJldmVyc2UoKVswXTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goWycnLCBoZWFkZXJdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzLm9wdGlvbnMuZmlyc3RJdGVtID09PSAnZW1wdHknKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goWycnLCAnJ10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfSwgIFxuXG5cbiAgICAgICAgLypcbiAgICAgICAgZmlsbCBkYXlcbiAgICAgICAgKi9cbiAgICAgICAgZmlsbERheTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLmZpbGxDb21tb24oJ2QnKSwgbmFtZSwgaSxcbiAgICAgICAgICAgICAgICB0d29EaWdpdCA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5pbmRleE9mKCdERCcpICE9PSAtMSxcbiAgICAgICAgICAgICAgICBkYXlzQ291bnQgPSAzMTtcblxuICAgICAgICAgICAgLy8gZGV0ZWN0IGRheXMgY291bnQgKGRlcGVuZHMgb24gbW9udGggYW5kIHllYXIpXG4gICAgICAgICAgICAvLyBvcmlnaW5hbGx5IGh0dHBzOi8vZ2l0aHViLmNvbS92aXRhbGV0cy9jb21ib2RhdGUvcHVsbC83XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNtYXJ0RGF5cyAmJiB0aGlzLiRtb250aCAmJiB0aGlzLiR5ZWFyKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gcGFyc2VJbnQodGhpcy4kbW9udGgudmFsKCksIDEwKTtcbiAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KHRoaXMuJHllYXIudmFsKCksIDEwKTtcblxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4obW9udGgpICYmICFpc05hTih5ZWFyKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXlzQ291bnQgPSBtb21lbnQoW3llYXIsIG1vbnRoXSkuZGF5c0luTW9udGgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPD0gZGF5c0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gdHdvRGlnaXQgPyB0aGlzLmxlYWRaZXJvKGkpIDogaTtcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKFtpLCBuYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7ICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIGZpbGwgbW9udGhcbiAgICAgICAgKi9cbiAgICAgICAgZmlsbE1vbnRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuZmlsbENvbW1vbignTScpLCBuYW1lLCBpLCBcbiAgICAgICAgICAgICAgICBsb25nTmFtZXMgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUuaW5kZXhPZignTU1NTScpICE9PSAtMSxcbiAgICAgICAgICAgICAgICBzaG9ydE5hbWVzID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLmluZGV4T2YoJ01NTScpICE9PSAtMSxcbiAgICAgICAgICAgICAgICB0d29EaWdpdCA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5pbmRleE9mKCdNTScpICE9PSAtMTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGZvcihpPTA7IGk8PTExOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZihsb25nTmFtZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zZWUgaHR0cHM6Ly9naXRodWIuY29tL3RpbXJ3b29kL21vbWVudGpzLmNvbS9wdWxsLzM2XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBtb21lbnQoKS5kYXRlKDEpLm1vbnRoKGkpLmZvcm1hdCgnTU1NTScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZihzaG9ydE5hbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBtb21lbnQoKS5kYXRlKDEpLm1vbnRoKGkpLmZvcm1hdCgnTU1NJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHR3b0RpZ2l0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSB0aGlzLmxlYWRaZXJvKGkrMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGkrMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChbaSwgbmFtZV0pO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgICAgfSwgIFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgZmlsbCB5ZWFyXG4gICAgICAgICovXG4gICAgICAgIGZpbGxZZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IFtdLCBuYW1lLCBpLCBcbiAgICAgICAgICAgICAgICBsb25nTmFtZXMgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUuaW5kZXhPZignWVlZWScpICE9PSAtMTtcbiAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IoaT10aGlzLm9wdGlvbnMubWF4WWVhcjsgaT49dGhpcy5vcHRpb25zLm1pblllYXI7IGktLSkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBsb25nTmFtZXMgPyBpIDogKGkrJycpLnN1YnN0cmluZygyKTtcbiAgICAgICAgICAgICAgICBpdGVtc1t0aGlzLm9wdGlvbnMueWVhckRlc2NlbmRpbmcgPyAncHVzaCcgOiAndW5zaGlmdCddKFtpLCBuYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGl0ZW1zID0gdGhpcy5maWxsQ29tbW9uKCd5JykuY29uY2F0KGl0ZW1zKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zOyAgICAgICAgICAgICAgXG4gICAgICAgIH0sICAgIFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgZmlsbCBob3VyXG4gICAgICAgICovXG4gICAgICAgIGZpbGxIb3VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuZmlsbENvbW1vbignaCcpLCBuYW1lLCBpLFxuICAgICAgICAgICAgICAgIGgxMiA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5pbmRleE9mKCdoJykgIT09IC0xLFxuICAgICAgICAgICAgICAgIGgyNCA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5pbmRleE9mKCdIJykgIT09IC0xLFxuICAgICAgICAgICAgICAgIHR3b0RpZ2l0ID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignaGgnKSAhPT0gLTEsXG4gICAgICAgICAgICAgICAgbWluID0gaDEyID8gMSA6IDAsIFxuICAgICAgICAgICAgICAgIG1heCA9IGgxMiA/IDEyIDogMjM7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IoaT1taW47IGk8PW1heDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IHR3b0RpZ2l0ID8gdGhpcy5sZWFkWmVybyhpKSA6IGk7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChbaSwgbmFtZV0pO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIHJldHVybiBpdGVtczsgICAgICAgICAgICAgICAgIFxuICAgICAgICB9LCAgICBcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIGZpbGwgbWludXRlXG4gICAgICAgICovXG4gICAgICAgIGZpbGxNaW51dGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5maWxsQ29tbW9uKCdtJyksIG5hbWUsIGksXG4gICAgICAgICAgICAgICAgdHdvRGlnaXQgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUuaW5kZXhPZignbW0nKSAhPT0gLTE7XG5cbiAgICAgICAgICAgIGZvcihpPTA7IGk8PTU5OyBpKz0gdGhpcy5vcHRpb25zLm1pbnV0ZVN0ZXApIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gdHdvRGlnaXQgPyB0aGlzLmxlYWRaZXJvKGkpIDogaTtcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKFtpLCBuYW1lXSk7XG4gICAgICAgICAgICB9ICAgIFxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zOyAgICAgICAgICAgICAgXG4gICAgICAgIH0sICBcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIGZpbGwgc2Vjb25kXG4gICAgICAgICovXG4gICAgICAgIGZpbGxTZWNvbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5maWxsQ29tbW9uKCdzJyksIG5hbWUsIGksXG4gICAgICAgICAgICAgICAgdHdvRGlnaXQgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUuaW5kZXhPZignc3MnKSAhPT0gLTE7XG5cbiAgICAgICAgICAgIGZvcihpPTA7IGk8PTU5OyBpKz0gdGhpcy5vcHRpb25zLnNlY29uZFN0ZXApIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gdHdvRGlnaXQgPyB0aGlzLmxlYWRaZXJvKGkpIDogaTtcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKFtpLCBuYW1lXSk7XG4gICAgICAgICAgICB9ICAgIFxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zOyAgICAgICAgICAgICAgXG4gICAgICAgIH0sICBcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIGZpbGwgYW1wbVxuICAgICAgICAqL1xuICAgICAgICBmaWxsQW1wbTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYW1wbUwgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUuaW5kZXhPZignYScpICE9PSAtMSxcbiAgICAgICAgICAgICAgICBhbXBtVSA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5pbmRleE9mKCdBJykgIT09IC0xLCAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGl0ZW1zID0gW1xuICAgICAgICAgICAgICAgICAgICBbJ2FtJywgYW1wbUwgPyAnYW0nIDogJ0FNJ10sXG4gICAgICAgICAgICAgICAgICAgIFsncG0nLCBhbXBtTCA/ICdwbScgOiAnUE0nXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIH0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgLypcbiAgICAgICAgIFJldHVybnMgY3VycmVudCBkYXRlIHZhbHVlIGZyb20gY29tYm9zLiBcbiAgICAgICAgIElmIGZvcm1hdCBub3Qgc3BlY2lmaWVkIC0gYG9wdGlvbnMuZm9ybWF0YCB1c2VkLlxuICAgICAgICAgSWYgZm9ybWF0ID0gYG51bGxgIC0gTW9tZW50IG9iamVjdCByZXR1cm5lZC5cbiAgICAgICAgKi9cbiAgICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICAgICAgdmFyIGR0LCB2YWx1ZXMgPSB7fSwgXG4gICAgICAgICAgICAgICAgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgbm90U2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vZ2V0dGluZyBzZWxlY3RlZCB2YWx1ZXMgICAgXG4gICAgICAgICAgICAkLmVhY2godGhpcy5tYXAsIGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgICAgICAgICAgICBpZihrID09PSAnYW1wbScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZGVmID0gayA9PT0gJ2RheScgPyAxIDogMDtcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhbHVlc1trXSA9IHRoYXRbJyQnK2tdID8gcGFyc2VJbnQodGhhdFsnJCcra10udmFsKCksIDEwKSA6IGRlZjsgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoaXNOYU4odmFsdWVzW2tdKSkge1xuICAgICAgICAgICAgICAgICAgIG5vdFNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2lmIGF0IGxlYXN0IG9uZSB2aXNpYmxlIGNvbWJvIG5vdCBzZWxlY3RlZCAtIHJldHVybiBlbXB0eSBzdHJpbmdcbiAgICAgICAgICAgIGlmKG5vdFNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vY29udmVydCBob3VycyAxMmggLS0+IDI0aCBcbiAgICAgICAgICAgIGlmKHRoaXMuJGFtcG0pIHtcbiAgICAgICAgICAgICAgICAvLzEyOjAwIHBtIC0tPiAxMjowMCAoMjQtaCBmb3JtYXQsIG1pZGRheSksIDEyOjAwIGFtIC0tPiAwMDowMCAoMjQtaCBmb3JtYXQsIG1pZG5pZ2h0LCBzdGFydCBvZiBkYXkpXG4gICAgICAgICAgICAgICAgaWYodmFsdWVzLmhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5ob3VyID0gdGhpcy4kYW1wbS52YWwoKSA9PT0gJ2FtJyA/IDAgOiAxMjsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5ob3VyID0gdGhpcy4kYW1wbS52YWwoKSA9PT0gJ2FtJyA/IHZhbHVlcy5ob3VyIDogdmFsdWVzLmhvdXIrMTI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZHQgPSBtb21lbnQoW3ZhbHVlcy55ZWFyLCB2YWx1ZXMubW9udGgsIHZhbHVlcy5kYXksIHZhbHVlcy5ob3VyLCB2YWx1ZXMubWludXRlLCB2YWx1ZXMuc2Vjb25kXSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaGlnaGxpZ2h0IGludmFsaWQgZGF0ZVxuICAgICAgICAgICAgdGhpcy5oaWdobGlnaHQoZHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgPT09IHVuZGVmaW5lZCA/IHRoaXMub3B0aW9ucy5mb3JtYXQgOiBmb3JtYXQ7XG4gICAgICAgICAgICBpZihmb3JtYXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgIHJldHVybiBkdC5pc1ZhbGlkKCkgPyBkdCA6IG51bGw7IFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgIHJldHVybiBkdC5pc1ZhbGlkKCkgPyBkdC5mb3JtYXQoZm9ybWF0KSA6ICcnOyBcbiAgICAgICAgICAgIH0gICAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZighdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBkdCA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBtb21lbnQodmFsdWUsIHRoaXMub3B0aW9ucy5mb3JtYXQpIDogbW9tZW50KHZhbHVlKSxcbiAgICAgICAgICAgICAgICB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSB7fTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9mdW5jdGlvbiB0byBmaW5kIG5lYXJlc3QgdmFsdWUgaW4gc2VsZWN0IG9wdGlvbnNcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5lYXJlc3QoJHNlbGVjdCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAkc2VsZWN0LmNoaWxkcmVuKCdvcHRpb24nKS5lYWNoKGZ1bmN0aW9uKGksIG9wdCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcHRWYWx1ZSA9ICQob3B0KS5hdHRyKCd2YWx1ZScpLFxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTtcblxuICAgICAgICAgICAgICAgICAgICBpZihvcHRWYWx1ZSA9PT0gJycpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhvcHRWYWx1ZSAtIHZhbHVlKTsgXG4gICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBkZWx0YS5kaXN0YW5jZSA9PT0gJ3VuZGVmaW5lZCcgfHwgZGlzdGFuY2UgPCBkZWx0YS5kaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGEgPSB7dmFsdWU6IG9wdFZhbHVlLCBkaXN0YW5jZTogZGlzdGFuY2V9O1xuICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgIH0pOyBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVsdGEudmFsdWU7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihkdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAvL3JlYWQgdmFsdWVzIGZyb20gZGF0ZSBvYmplY3RcbiAgICAgICAgICAgICAgICAkLmVhY2godGhpcy5tYXAsIGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoayA9PT0gJ2FtcG0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2tdID0gZHRbdlsxXV0oKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHRoaXMuJGFtcG0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8xMjowMCBwbSAtLT4gMTI6MDAgKDI0LWggZm9ybWF0LCBtaWRkYXkpLCAxMjowMCBhbSAtLT4gMDA6MDAgKDI0LWggZm9ybWF0LCBtaWRuaWdodCwgc3RhcnQgb2YgZGF5KVxuICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZXMuaG91ciA+PSAxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmFtcG0gPSAncG0nO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsdWVzLmhvdXIgPiAxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5ob3VyIC09IDEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmFtcG0gPSAnYW0nO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsdWVzLmhvdXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuaG91ciA9IDEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICQuZWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jYWxsIHZhbCgpIGZvciBlYWNoIGV4aXN0aW5nIGNvbWJvLCBlLmcuIHRoaXMuJGhvdXIudmFsKClcbiAgICAgICAgICAgICAgICAgICAgaWYodGhhdFsnJCcra10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihrID09PSAnbWludXRlJyAmJiB0aGF0Lm9wdGlvbnMubWludXRlU3RlcCA+IDEgJiYgdGhhdC5vcHRpb25zLnJvdW5kVGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IGdldE5lYXJlc3QodGhhdFsnJCcra10sIHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGsgPT09ICdzZWNvbmQnICYmIHRoYXQub3B0aW9ucy5zZWNvbmRTdGVwID4gMSAmJiB0aGF0Lm9wdGlvbnMucm91bmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gZ2V0TmVhcmVzdCh0aGF0WyckJytrXSwgdik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0WyckJytrXS52YWwodik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBkYXlzIGNvdW50XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zbWFydERheXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsQ29tYm8oJ2RheScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC52YWwoZHQuZm9ybWF0KHRoaXMub3B0aW9ucy5mb3JtYXQpKS5jaGFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgICBoaWdobGlnaHQgY29tYm9zIGlmIGRhdGUgaXMgaW52YWxpZFxuICAgICAgICAqL1xuICAgICAgICBoaWdobGlnaHQ6IGZ1bmN0aW9uKGR0KSB7XG4gICAgICAgICAgICBpZighZHQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmVycm9yQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kd2lkZ2V0LmFkZENsYXNzKHRoaXMub3B0aW9ucy5lcnJvckNsYXNzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL3N0b3JlIG9yaWdpbmFsIGJvcmRlciBjb2xvclxuICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5ib3JkZXJDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ib3JkZXJDb2xvciA9IHRoaXMuJHdpZGdldC5maW5kKCdzZWxlY3QnKS5jc3MoJ2JvcmRlci1jb2xvcicpOyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLiR3aWRnZXQuZmluZCgnc2VsZWN0JykuY3NzKCdib3JkZXItY29sb3InLCAncmVkJyk7XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmVycm9yQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kd2lkZ2V0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5lcnJvckNsYXNzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiR3aWRnZXQuZmluZCgnc2VsZWN0JykuY3NzKCdib3JkZXItY29sb3InLCB0aGlzLmJvcmRlckNvbG9yKTtcbiAgICAgICAgICAgICAgICB9ICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGxlYWRaZXJvOiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICByZXR1cm4gdiA8PSA5ID8gJzAnICsgdiA6IHY7IFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiR3aWRnZXQucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZURhdGEoJ2NvbWJvZGF0ZScpLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy90b2RvOiBjbGVhciBtZXRob2QgICAgICAgIFxuICAgIH07XG5cbiAgICAkLmZuLmNvbWJvZGF0ZSA9IGZ1bmN0aW9uICggb3B0aW9uICkge1xuICAgICAgICB2YXIgZCwgYXJncyA9IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIGFyZ3Muc2hpZnQoKTtcblxuICAgICAgICAvL2dldFZhbHVlIHJldHVybnMgZGF0ZSBhcyBzdHJpbmcgLyBvYmplY3QgKG5vdCBqUXVlcnkgb2JqZWN0KVxuICAgICAgICBpZihvcHRpb24gPT09ICdnZXRWYWx1ZScgJiYgdGhpcy5sZW5ndGggJiYgKGQgPSB0aGlzLmVxKDApLmRhdGEoJ2NvbWJvZGF0ZScpKSkge1xuICAgICAgICAgIHJldHVybiBkLmdldFZhbHVlLmFwcGx5KGQsIGFyZ3MpO1xuICAgICAgICB9ICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGRhdGEgPSAkdGhpcy5kYXRhKCdjb21ib2RhdGUnKSxcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbjtcbiAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NvbWJvZGF0ZScsIChkYXRhID0gbmV3IENvbWJvZGF0ZSh0aGlzLCBvcHRpb25zKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgJiYgdHlwZW9mIGRhdGFbb3B0aW9uXSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9OyAgXG4gICAgXG4gICAgJC5mbi5jb21ib2RhdGUuZGVmYXVsdHMgPSB7XG4gICAgICAgICAvL2luIHRoaXMgZm9ybWF0IHZhbHVlIHN0b3JlZCBpbiBvcmlnaW5hbCBpbnB1dFxuICAgICAgICBmb3JtYXQ6ICdERC1NTS1ZWVlZIEhIOm1tJywgICAgICBcbiAgICAgICAgLy9pbiB0aGlzIGZvcm1hdCBpdGVtcyBpbiBkcm9wZG93bnMgYXJlIGRpc3BsYXllZFxuICAgICAgICB0ZW1wbGF0ZTogJ0QgLyBNTU0gLyBZWVlZICAgSCA6IG1tJyxcbiAgICAgICAgLy9pbml0aWFsIHZhbHVlLCBjYW4gYmUgYG5ldyBEYXRlKClgICAgIFxuICAgICAgICB2YWx1ZTogbnVsbCwgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBtaW5ZZWFyOiAxOTcwLFxuICAgICAgICBtYXhZZWFyOiAyMDE1LFxuICAgICAgICB5ZWFyRGVzY2VuZGluZzogdHJ1ZSxcbiAgICAgICAgbWludXRlU3RlcDogNSxcbiAgICAgICAgc2Vjb25kU3RlcDogMSxcbiAgICAgICAgZmlyc3RJdGVtOiAnZW1wdHknLCAvLyduYW1lJywgJ2VtcHR5JywgJ25vbmUnXG4gICAgICAgIGVycm9yQ2xhc3M6IG51bGwsXG4gICAgICAgIHJvdW5kVGltZTogdHJ1ZSwgLy8gd2hldGhlciB0byByb3VuZCBtaW51dGVzIGFuZCBzZWNvbmRzIGlmIHN0ZXAgPiAxXG4gICAgICAgIHNtYXJ0RGF5czogZmFsc2UgLy8gd2hldGhlciBkYXlzIGluIGNvbWJvIGRlcGVuZCBvbiBzZWxlY3RlZCBtb250aDogMzEsIDMwLCAyOFxuICAgIH07XG5cbn0od2luZG93LmpRdWVyeSkpO1xuLyoqXG5Db21ib2RhdGUgaW5wdXQgLSBkcm9wZG93biBkYXRlIGFuZCB0aW1lIHBpY2tlci4gICAgXG5CYXNlZCBvbiBbY29tYm9kYXRlXShodHRwOi8vdml0YWxldHMuZ2l0aHViLmNvbS9jb21ib2RhdGUpIHBsdWdpbiAoaW5jbHVkZWQpLiBUbyB1c2UgaXQgeW91IHNob3VsZCBtYW51YWxseSBpbmNsdWRlIFttb21lbnRqc10oaHR0cDovL21vbWVudGpzLmNvbSkuXG5cbiAgICA8c2NyaXB0IHNyYz1cImpzL21vbWVudC5taW4uanNcIj48L3NjcmlwdD5cbiAgIFxuQWxsb3dzIHRvIGlucHV0OlxuXG4qIG9ubHkgZGF0ZVxuKiBvbmx5IHRpbWUgXG4qIGJvdGggZGF0ZSBhbmQgdGltZSAgXG5cblBsZWFzZSBub3RlLCB0aGF0IGZvcm1hdCBpcyB0YWtlbiBmcm9tIG1vbWVudGpzIGFuZCAqKm5vdCBjb21wYXRpYmxlKiogd2l0aCBib290c3RyYXAtZGF0ZXBpY2tlciAvIGpxdWVyeSBVSSBkYXRlcGlja2VyLiAgXG5JbnRlcm5hbGx5IHZhbHVlIHN0b3JlZCBhcyBgbW9tZW50anNgIG9iamVjdC4gXG5cbkBjbGFzcyBjb21ib2RhdGVcbkBleHRlbmRzIGFic3RyYWN0aW5wdXRcbkBmaW5hbFxuQHNpbmNlIDEuNC4wXG5AZXhhbXBsZVxuPGEgaHJlZj1cIiNcIiBpZD1cImRvYlwiIGRhdGEtdHlwZT1cImNvbWJvZGF0ZVwiIGRhdGEtcGs9XCIxXCIgZGF0YS11cmw9XCIvcG9zdFwiIGRhdGEtdmFsdWU9XCIxOTg0LTA1LTE1XCIgZGF0YS10aXRsZT1cIlNlbGVjdCBkYXRlXCI+PC9hPlxuPHNjcmlwdD5cbiQoZnVuY3Rpb24oKXtcbiAgICAkKCcjZG9iJykuZWRpdGFibGUoe1xuICAgICAgICBmb3JtYXQ6ICdZWVlZLU1NLUREJywgICAgXG4gICAgICAgIHZpZXdmb3JtYXQ6ICdERC5NTS5ZWVlZJywgICAgXG4gICAgICAgIHRlbXBsYXRlOiAnRCAvIE1NTU0gLyBZWVlZJywgICAgXG4gICAgICAgIGNvbWJvZGF0ZToge1xuICAgICAgICAgICAgICAgIG1pblllYXI6IDIwMDAsXG4gICAgICAgICAgICAgICAgbWF4WWVhcjogMjAxNSxcbiAgICAgICAgICAgICAgICBtaW51dGVTdGVwOiAxXG4gICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG48L3NjcmlwdD5cbioqL1xuXG4vKmdsb2JhbCBtb21lbnQqL1xuXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ2NvbWJvZGF0ZScsIG9wdGlvbnMsIENvbnN0cnVjdG9yLmRlZmF1bHRzKTtcbiAgICAgICAgXG4gICAgICAgIC8vYnkgZGVmYXVsdCB2aWV3Zm9ybWF0IGVxdWFscyB0byBmb3JtYXRcbiAgICAgICAgaWYoIXRoaXMub3B0aW9ucy52aWV3Zm9ybWF0KSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCA9IHRoaXMub3B0aW9ucy5mb3JtYXQ7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy90cnkgcGFyc2UgY29tYm9kYXRlIGNvbmZpZyBkZWZpbmVkIGFzIGpzb24gc3RyaW5nIGluIGRhdGEtY29tYm9kYXRlXG4gICAgICAgIG9wdGlvbnMuY29tYm9kYXRlID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbihvcHRpb25zLmNvbWJvZGF0ZSwgdHJ1ZSk7XG5cbiAgICAgICAgLy9vdmVycmlkaW5nIGNvbWJvZGF0ZSBjb25maWcgKGFzIGJ5IGRlZmF1bHQgalF1ZXJ5IGV4dGVuZCgpIGlzIG5vdCByZWN1cnNpdmUpXG4gICAgICAgIHRoaXMub3B0aW9ucy5jb21ib2RhdGUgPSAkLmV4dGVuZCh7fSwgQ29uc3RydWN0b3IuZGVmYXVsdHMuY29tYm9kYXRlLCBvcHRpb25zLmNvbWJvZGF0ZSwge1xuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLm9wdGlvbnMuZm9ybWF0LFxuICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMub3B0aW9ucy50ZW1wbGF0ZVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoQ29uc3RydWN0b3IsICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0KTsgICAgXG4gICAgXG4gICAgJC5leHRlbmQoQ29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQuY29tYm9kYXRlKHRoaXMub3B0aW9ucy5jb21ib2RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCQuZm4uZWRpdGFibGVmb3JtLmVuZ2luZSA9PT0gJ2JzMycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5zaWJsaW5ncygpLmZpbmQoJ3NlbGVjdCcpLmFkZENsYXNzKCdmb3JtLWNvbnRyb2wnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmlucHV0Y2xhc3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5zaWJsaW5ncygpLmZpbmQoJ3NlbGVjdCcpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5pbnB1dGNsYXNzKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vXCJjbGVhclwiIGxpbmtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuY2xlYXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRjbGVhciA9ICQoJzxhIGhyZWY9XCIjXCI+PC9hPicpLmh0bWwodGhpcy5vcHRpb25zLmNsZWFyKS5jbGljaygkLnByb3h5KGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy4kdHBsLnBhcmVudCgpLmFwcGVuZCgkKCc8ZGl2IGNsYXNzPVwiZWRpdGFibGUtY2xlYXJcIj4nKS5hcHBlbmQodGhpcy4kY2xlYXIpKTsgIFxuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICovICAgICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICB2YWx1ZTJodG1sOiBmdW5jdGlvbih2YWx1ZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHRleHQgPSB2YWx1ZSA/IHZhbHVlLmZvcm1hdCh0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCkgOiAnJztcbiAgICAgICAgICAgIC8vJChlbGVtZW50KS50ZXh0KHRleHQpO1xuICAgICAgICAgICAgQ29uc3RydWN0b3Iuc3VwZXJjbGFzcy52YWx1ZTJodG1sLmNhbGwodGhpcywgdGV4dCwgZWxlbWVudCk7ICBcbiAgICAgICAgfSxcblxuICAgICAgICBodG1sMnZhbHVlOiBmdW5jdGlvbihodG1sKSB7XG4gICAgICAgICAgICByZXR1cm4gaHRtbCA/IG1vbWVudChodG1sLCB0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCkgOiBudWxsO1xuICAgICAgICB9LCAgIFxuICAgICAgICBcbiAgICAgICAgdmFsdWUyc3RyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gdmFsdWUuZm9ybWF0KHRoaXMub3B0aW9ucy5mb3JtYXQpIDogJyc7XG4gICAgICAgfSwgXG4gICAgICAgXG4gICAgICAgc3RyMnZhbHVlOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgcmV0dXJuIHN0ciA/IG1vbWVudChzdHIsIHRoaXMub3B0aW9ucy5mb3JtYXQpIDogbnVsbDtcbiAgICAgICB9LCBcbiAgICAgICBcbiAgICAgICB2YWx1ZTJzdWJtaXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlMnN0cih2YWx1ZSk7XG4gICAgICAgfSwgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgdmFsdWUyaW5wdXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHRoaXMuJGlucHV0LmNvbWJvZGF0ZSgnc2V0VmFsdWUnLCB2YWx1ZSk7XG4gICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgaW5wdXQydmFsdWU6IGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgICAgcmV0dXJuIHRoaXMuJGlucHV0LmNvbWJvZGF0ZSgnZ2V0VmFsdWUnLCBudWxsKTtcbiAgICAgICB9LCAgICAgICBcbiAgICAgICBcbiAgICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHRoaXMuJGlucHV0LnNpYmxpbmdzKCcuY29tYm9kYXRlJykuZmluZCgnc2VsZWN0JykuZXEoMCkuZm9jdXMoKTtcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIC8qXG4gICAgICAgY2xlYXI6ICBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLiRpbnB1dC5kYXRhKCdkYXRlcGlja2VyJykuZGF0ZSA9IG51bGw7XG4gICAgICAgICAgdGhpcy4kaW5wdXQuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICB9LFxuICAgICAgICovXG4gICAgICAgXG4gICAgICAgYXV0b3N1Ym1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIFxuICAgICAgIH1cblxuICAgIH0pO1xuICAgIFxuICAgIENvbnN0cnVjdG9yLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICBAZGVmYXVsdCA8aW5wdXQgdHlwZT1cInRleHRcIj5cbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHRwbDonPGlucHV0IHR5cGU9XCJ0ZXh0XCI+JyxcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSBpbnB1dGNsYXNzIFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBpbnB1dGNsYXNzOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgRm9ybWF0IHVzZWQgZm9yIHNlbmRpbmcgdmFsdWUgdG8gc2VydmVyLiBBbHNvIGFwcGxpZWQgd2hlbiBjb252ZXJ0aW5nIGRhdGUgZnJvbSA8Y29kZT5kYXRhLXZhbHVlPC9jb2RlPiBhdHRyaWJ1dGUuPGJyPlxuICAgICAgICBTZWUgbGlzdCBvZiB0b2tlbnMgaW4gW21vbWVudGpzIGRvY3NdKGh0dHA6Ly9tb21lbnRqcy5jb20vZG9jcy8jL3BhcnNpbmcvc3RyaW5nLWZvcm1hdCkgIFxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IGZvcm1hdCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IFlZWVktTU0tRERcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGZvcm1hdDonWVlZWS1NTS1ERCcsXG4gICAgICAgIC8qKlxuICAgICAgICBGb3JtYXQgdXNlZCBmb3IgZGlzcGxheWluZyBkYXRlLiBBbHNvIGFwcGxpZWQgd2hlbiBjb252ZXJ0aW5nIGRhdGUgZnJvbSBlbGVtZW50J3MgdGV4dCBvbiBpbml0LiAgIFxuICAgICAgICBJZiBub3Qgc3BlY2lmaWVkIGVxdWFscyB0byBgZm9ybWF0YC5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSB2aWV3Zm9ybWF0IFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIHZpZXdmb3JtYXQ6IG51bGwsICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFRlbXBsYXRlIHVzZWQgZm9yIGRpc3BsYXlpbmcgZHJvcGRvd25zLlxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IHRlbXBsYXRlIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgRCAvIE1NTSAvIFlZWVlcbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICB0ZW1wbGF0ZTogJ0QgLyBNTU0gLyBZWVlZJywgIFxuICAgICAgICAvKipcbiAgICAgICAgQ29uZmlndXJhdGlvbiBvZiBjb21ib2RhdGUuXG4gICAgICAgIEZ1bGwgbGlzdCBvZiBvcHRpb25zOiBodHRwOi8vdml0YWxldHMuZ2l0aHViLmNvbS9jb21ib2RhdGUvI2RvY3NcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBjb21ib2RhdGUgXG4gICAgICAgIEB0eXBlIG9iamVjdFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICBjb21ib2RhdGU6IG51bGxcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIChub3QgaW1wbGVtZW50ZWQgeWV0KVxuICAgICAgICBUZXh0IHNob3duIGFzIGNsZWFyIGRhdGUgYnV0dG9uLiBcbiAgICAgICAgSWYgPGNvZGU+ZmFsc2U8L2NvZGU+IGNsZWFyIGJ1dHRvbiB3aWxsIG5vdCBiZSByZW5kZXJlZC5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBjbGVhciBcbiAgICAgICAgQHR5cGUgYm9vbGVhbnxzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJ3ggY2xlYXInICAgICAgICAgXG4gICAgICAgICovXG4gICAgICAgIC8vY2xlYXI6ICcmdGltZXM7IGNsZWFyJ1xuICAgIH0pOyAgIFxuXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLmNvbWJvZGF0ZSA9IENvbnN0cnVjdG9yO1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLypcbkVkaXRhYmxlZm9ybSBiYXNlZCBvbiBUd2l0dGVyIEJvb3RzdHJhcCAzXG4qL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgLy9zdG9yZSBwYXJlbnQgbWV0aG9kc1xuICAgIHZhciBwSW5pdElucHV0ID0gJC5mbi5lZGl0YWJsZWZvcm0uQ29uc3RydWN0b3IucHJvdG90eXBlLmluaXRJbnB1dDtcbiAgICBcbiAgICAkLmV4dGVuZCgkLmZuLmVkaXRhYmxlZm9ybS5Db25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgaW5pdFRlbXBsYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGZvcm0gPSAkKCQuZm4uZWRpdGFibGVmb3JtLnRlbXBsYXRlKTsgXG4gICAgICAgICAgICB0aGlzLiRmb3JtLmZpbmQoJy5jb250cm9sLWdyb3VwJykuYWRkQ2xhc3MoJ2Zvcm0tZ3JvdXAnKTtcbiAgICAgICAgICAgIHRoaXMuJGZvcm0uZmluZCgnLmVkaXRhYmxlLWVycm9yLWJsb2NrJykuYWRkQ2xhc3MoJ2hlbHAtYmxvY2snKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdElucHV0OiBmdW5jdGlvbigpIHsgIFxuICAgICAgICAgICAgcEluaXRJbnB1dC5hcHBseSh0aGlzKTtcblxuICAgICAgICAgICAgLy9mb3IgYnMzIHNldCBkZWZhdWx0IGNsYXNzIGBpbnB1dC1zbWAgdG8gc3RhbmRhcmQgaW5wdXRzXG4gICAgICAgICAgICB2YXIgZW1wdHlJbnB1dENsYXNzID0gdGhpcy5pbnB1dC5vcHRpb25zLmlucHV0Y2xhc3MgPT09IG51bGwgfHwgdGhpcy5pbnB1dC5vcHRpb25zLmlucHV0Y2xhc3MgPT09IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRDbGFzcyA9ICdpbnB1dC1zbSc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vYnMzIGFkZCBgZm9ybS1jb250cm9sYCBjbGFzcyB0byBzdGFuZGFyZCBpbnB1dHNcbiAgICAgICAgICAgIHZhciBzdGR0eXBlcyA9ICd0ZXh0LHNlbGVjdCx0ZXh0YXJlYSxwYXNzd29yZCxlbWFpbCx1cmwsdGVsLG51bWJlcixyYW5nZSx0aW1lLHR5cGVhaGVhZGpzJy5zcGxpdCgnLCcpOyBcbiAgICAgICAgICAgIGlmKH4kLmluQXJyYXkodGhpcy5pbnB1dC50eXBlLCBzdGR0eXBlcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0LiRpbnB1dC5hZGRDbGFzcygnZm9ybS1jb250cm9sJyk7XG4gICAgICAgICAgICAgICAgaWYoZW1wdHlJbnB1dENsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQub3B0aW9ucy5pbnB1dGNsYXNzID0gZGVmYXVsdENsYXNzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0LiRpbnB1dC5hZGRDbGFzcyhkZWZhdWx0Q2xhc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gICAgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAgICAgLy9hcHBseSBiczMgc2l6ZSBjbGFzcyBhbHNvIHRvIGJ1dHRvbnMgKHRvIGZpdCBzaXplIG9mIGNvbnRyb2wpXG4gICAgICAgICAgICB2YXIgJGJ0biA9IHRoaXMuJGZvcm0uZmluZCgnLmVkaXRhYmxlLWJ1dHRvbnMnKTtcbiAgICAgICAgICAgIHZhciBjbGFzc2VzID0gZW1wdHlJbnB1dENsYXNzID8gW2RlZmF1bHRDbGFzc10gOiB0aGlzLmlucHV0Lm9wdGlvbnMuaW5wdXRjbGFzcy5zcGxpdCgnICcpO1xuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8Y2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIC8vIGBidG4tc21gIGlzIGRlZmF1bHQgbm93XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBpZihjbGFzc2VzW2ldLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dC1zbScpIHsgXG4gICAgICAgICAgICAgICAgICAgICRidG4uZmluZCgnYnV0dG9uJykuYWRkQ2xhc3MoJ2J0bi1zbScpOyAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYoY2xhc3Nlc1tpXS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQtbGcnKSB7XG4gICAgICAgICAgICAgICAgICAgICRidG4uZmluZCgnYnV0dG9uJykucmVtb3ZlQ2xhc3MoJ2J0bi1zbScpLmFkZENsYXNzKCdidG4tbGcnKTsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7ICAgIFxuICAgIFxuICAgIC8vYnV0dG9uc1xuICAgICQuZm4uZWRpdGFibGVmb3JtLmJ1dHRvbnMgPSBcbiAgICAgICc8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBidG4tc20gZWRpdGFibGUtc3VibWl0XCI+JytcbiAgICAgICAgJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1va1wiPjwvaT4nK1xuICAgICAgJzwvYnV0dG9uPicrXG4gICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIGVkaXRhYmxlLWNhbmNlbFwiPicrXG4gICAgICAgICc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlXCI+PC9pPicrXG4gICAgICAnPC9idXR0b24+JzsgICAgICAgICBcbiAgICBcbiAgICAvL2Vycm9yIGNsYXNzZXNcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckdyb3VwQ2xhc3MgPSAnaGFzLWVycm9yJztcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckJsb2NrQ2xhc3MgPSBudWxsOyAgXG4gICAgLy9lbmdpbmVcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5lbmdpbmUgPSAnYnMzJzsgIFxufSh3aW5kb3cualF1ZXJ5KSk7XG4vKipcbiogRWRpdGFibGUgUG9wb3ZlcjMgKGZvciBCb290c3RyYXAgMykgXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiByZXF1aXJlcyBib290c3RyYXAtcG9wb3Zlci5qc1xuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLy9leHRlbmQgbWV0aG9kc1xuICAgICQuZXh0ZW5kKCQuZm4uZWRpdGFibGVDb250YWluZXIuUG9wdXAucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnRhaW5lck5hbWU6ICdwb3BvdmVyJyxcbiAgICAgICAgY29udGFpbmVyRGF0YU5hbWU6ICdicy5wb3BvdmVyJyxcbiAgICAgICAgaW5uZXJDc3M6ICcucG9wb3Zlci1jb250ZW50JyxcbiAgICAgICAgZGVmYXVsdHM6ICQuZm4ucG9wb3Zlci5Db25zdHJ1Y3Rvci5ERUZBVUxUUyxcblxuICAgICAgICBpbml0Q29udGFpbmVyOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgJC5leHRlbmQodGhpcy5jb250YWluZXJPcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcjogJ21hbnVhbCcsXG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcgJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy5kZWZhdWx0cy50ZW1wbGF0ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vYXMgdGVtcGxhdGUgcHJvcGVydHkgaXMgdXNlZCBpbiBpbnB1dHMsIGhpZGUgaXQgZnJvbSBwb3BvdmVyXG4gICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgIGlmKHRoaXMuJGVsZW1lbnQuZGF0YSgndGVtcGxhdGUnKSkge1xuICAgICAgICAgICAgICAgdCA9IHRoaXMuJGVsZW1lbnQuZGF0YSgndGVtcGxhdGUnKTtcbiAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlRGF0YSgndGVtcGxhdGUnKTsgIFxuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5jYWxsKHRoaXMuY29udGFpbmVyT3B0aW9ucyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHQpIHtcbiAgICAgICAgICAgICAgIC8vcmVzdG9yZSBkYXRhKCd0ZW1wbGF0ZScpXG4gICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LmRhdGEoJ3RlbXBsYXRlJywgdCk7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBcbiAgICAgICAgXG4gICAgICAgIC8qIHNob3cgKi9cbiAgICAgICAgaW5uZXJTaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGwoJ3Nob3cnKTsgICAgICAgICAgICAgICAgXG4gICAgICAgIH0sICBcbiAgICAgICAgXG4gICAgICAgIC8qIGhpZGUgKi9cbiAgICAgICAgaW5uZXJIaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGwoJ2hpZGUnKTsgICAgICAgXG4gICAgICAgIH0sIFxuICAgICAgICBcbiAgICAgICAgLyogZGVzdHJveSAqL1xuICAgICAgICBpbm5lckRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5jYWxsKCdkZXN0cm95Jyk7XG4gICAgICAgIH0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgc2V0Q29udGFpbmVyT3B0aW9uOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lcigpLm9wdGlvbnNba2V5XSA9IHZhbHVlOyBcbiAgICAgICAgfSwgICAgICAgICAgICAgICBcblxuICAgICAgICAvKipcbiAgICAgICAgKiBtb3ZlIHBvcG92ZXIgdG8gbmV3IHBvc2l0aW9uLiBUaGlzIGZ1bmN0aW9uIG1haW5seSBjb3BpZWQgZnJvbSBib290c3RyYXAtcG9wb3Zlci5cbiAgICAgICAgKi9cbiAgICAgICAgLypqc2hpbnQgbGF4Y29tbWE6IHRydWUsIGVxZXFlcTogZmFsc2UqL1xuICAgICAgICBzZXRQb3NpdGlvbjogZnVuY3Rpb24gKCkgeyBcblxuICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLyogICAgXG4gICAgICAgICAgICAgICAgdmFyICR0aXAgPSB0aGlzLnRpcCgpXG4gICAgICAgICAgICAgICAgLCBpbnNpZGVcbiAgICAgICAgICAgICAgICAsIHBvc1xuICAgICAgICAgICAgICAgICwgYWN0dWFsV2lkdGhcbiAgICAgICAgICAgICAgICAsIGFjdHVhbEhlaWdodFxuICAgICAgICAgICAgICAgICwgcGxhY2VtZW50XG4gICAgICAgICAgICAgICAgLCB0cFxuICAgICAgICAgICAgICAgICwgdHB0XG4gICAgICAgICAgICAgICAgLCB0cGJcbiAgICAgICAgICAgICAgICAsIHRwbFxuICAgICAgICAgICAgICAgICwgdHByO1xuXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQgPT09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudDtcblxuICAgICAgICAgICAgICAgIGluc2lkZSA9IC9pbi8udGVzdChwbGFjZW1lbnQpO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgJHRpcFxuICAgICAgICAgICAgICAvLyAgLmRldGFjaCgpXG4gICAgICAgICAgICAgIC8vdml0YWxldHM6IHJlbW92ZSBhbnkgcGxhY2VtZW50IGNsYXNzIGJlY2F1c2Ugb3RoZXJ3aXNlIHRoZXkgZG9udCBpbmZsdWVuY2Ugb24gcmUtcG9zaXRpb25pbmcgb2YgdmlzaWJsZSBwb3BvdmVyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd0b3AgcmlnaHQgYm90dG9tIGxlZnQnKVxuICAgICAgICAgICAgICAgIC5jc3MoeyB0b3A6IDAsIGxlZnQ6IDAsIGRpc3BsYXk6ICdibG9jaycgfSk7XG4gICAgICAgICAgICAgIC8vICAuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLmdldFBvc2l0aW9uKGluc2lkZSk7XG5cbiAgICAgICAgICAgICAgICBhY3R1YWxXaWR0aCA9ICR0aXBbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgYWN0dWFsSGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBpbnNpZGUgPyBwbGFjZW1lbnQuc3BsaXQoJyAnKVsxXSA6IHBsYWNlbWVudDtcblxuICAgICAgICAgICAgICAgIHRwYiA9IHt0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0LCBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCAvIDIgLSBhY3R1YWxXaWR0aCAvIDJ9O1xuICAgICAgICAgICAgICAgIHRwdCA9IHt0b3A6IHBvcy50b3AgLSBhY3R1YWxIZWlnaHQsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIC8gMiAtIGFjdHVhbFdpZHRoIC8gMn07XG4gICAgICAgICAgICAgICAgdHBsID0ge3RvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwgbGVmdDogcG9zLmxlZnQgLSBhY3R1YWxXaWR0aH07XG4gICAgICAgICAgICAgICAgdHByID0ge3RvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGh9O1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChwbGFjZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodHBiLnRvcCArIGFjdHVhbEhlaWdodCkgPiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpICsgJCh3aW5kb3cpLmhlaWdodCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cHQudG9wID4gJCh3aW5kb3cpLnNjcm9sbFRvcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICd0b3AnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHRwci5sZWZ0ICsgYWN0dWFsV2lkdGgpIDwgKCQod2luZG93KS5zY3JvbGxMZWZ0KCkgKyAkKHdpbmRvdykud2lkdGgoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRwbC5sZWZ0ID4gJCh3aW5kb3cpLnNjcm9sbExlZnQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cHQudG9wIDwgJCh3aW5kb3cpLnNjcm9sbFRvcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0cGIudG9wICsgYWN0dWFsSGVpZ2h0KSA8ICgkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKHdpbmRvdykuaGVpZ2h0KCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdib3R0b20nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHRwci5sZWZ0ICsgYWN0dWFsV2lkdGgpIDwgKCQod2luZG93KS5zY3JvbGxMZWZ0KCkgKyAkKHdpbmRvdykud2lkdGgoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRwbC5sZWZ0ID4gJCh3aW5kb3cpLnNjcm9sbExlZnQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHBsLmxlZnQgPCAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0cHIubGVmdCArIGFjdHVhbFdpZHRoKSA8ICgkKHdpbmRvdykuc2Nyb2xsTGVmdCgpICsgJCh3aW5kb3cpLndpZHRoKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cHQudG9wID4gJCh3aW5kb3cpLnNjcm9sbFRvcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICd0b3AnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHB0LnRvcCA+ICQod2luZG93KS5zY3JvbGxUb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAnYm90dG9tJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHRwci5sZWZ0ICsgYWN0dWFsV2lkdGgpID4gKCQod2luZG93KS5zY3JvbGxMZWZ0KCkgKyAkKHdpbmRvdykud2lkdGgoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHBsLmxlZnQgPiAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRwdC50b3AgPiAkKHdpbmRvdykuc2Nyb2xsVG9wKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ3RvcCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cHQudG9wID4gJCh3aW5kb3cpLnNjcm9sbFRvcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdib3R0b20nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN3aXRjaCAocGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0cCA9IHRwYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHAgPSB0cHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0cCA9IHRwbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0cCA9IHRwcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICR0aXBcbiAgICAgICAgICAgICAgICAub2Zmc2V0KHRwKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhwbGFjZW1lbnQpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdpbicpO1xuICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgIFxuICAgICAgICAgICAgdmFyICR0aXAgPSB0aGlzLnRpcCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudC5jYWxsKHRoaXMsICR0aXBbMF0sIHRoaXMuJGVsZW1lbnRbMF0pIDpcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucGxhY2VtZW50OyAgICAgICAgICAgIFxuXG4gICAgICAgICAgICB2YXIgYXV0b1Rva2VuID0gL1xccz9hdXRvP1xccz8vaTtcbiAgICAgICAgICAgIHZhciBhdXRvUGxhY2UgPSBhdXRvVG9rZW4udGVzdChwbGFjZW1lbnQpO1xuICAgICAgICAgICAgaWYgKGF1dG9QbGFjZSkge1xuICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IHBsYWNlbWVudC5yZXBsYWNlKGF1dG9Ub2tlbiwgJycpIHx8ICd0b3AnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBwb3MgPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICB2YXIgYWN0dWFsV2lkdGggPSAkdGlwWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAoYXV0b1BsYWNlKSB7XG4gICAgICAgICAgICAgICAgdmFyICRwYXJlbnQgPSB0aGlzLiRlbGVtZW50LnBhcmVudCgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9yZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgICAgICAgICAgICB2YXIgZG9jU2Nyb2xsICAgID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50V2lkdGggID0gdGhpcy5vcHRpb25zLmNvbnRhaW5lciA9PSAnYm9keScgPyB3aW5kb3cuaW5uZXJXaWR0aCAgOiAkcGFyZW50Lm91dGVyV2lkdGgoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50SGVpZ2h0ID0gdGhpcy5vcHRpb25zLmNvbnRhaW5lciA9PSAnYm9keScgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiAkcGFyZW50Lm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudExlZnQgICA9IHRoaXMub3B0aW9ucy5jb250YWluZXIgPT0gJ2JvZHknID8gMCA6ICRwYXJlbnQub2Zmc2V0KCkubGVmdDtcblxuICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IHBsYWNlbWVudCA9PSAnYm90dG9tJyAmJiBwb3MudG9wICAgKyBwb3MuaGVpZ2h0ICArIGFjdHVhbEhlaWdodCAtIGRvY1Njcm9sbCA+IHBhcmVudEhlaWdodCAgPyAndG9wJyAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICd0b3AnICAgICYmIHBvcy50b3AgICAtIGRvY1Njcm9sbCAgIC0gYWN0dWFsSGVpZ2h0IDwgMCAgICAgICAgICAgICAgICAgICAgICAgICA/ICdib3R0b20nIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3JpZ2h0JyAgJiYgcG9zLnJpZ2h0ICsgYWN0dWFsV2lkdGggPiBwYXJlbnRXaWR0aCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2xlZnQnICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAnbGVmdCcgICAmJiBwb3MubGVmdCAgLSBhY3R1YWxXaWR0aCA8IHBhcmVudExlZnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmlnaHQnICA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50O1xuXG4gICAgICAgICAgICAgICAgJHRpcFxuICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKG9yZ1BsYWNlbWVudClcbiAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhwbGFjZW1lbnQpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIHZhciBjYWxjdWxhdGVkT2Zmc2V0ID0gdGhpcy5nZXRDYWxjdWxhdGVkT2Zmc2V0KHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KTtcblxuICAgICAgICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChjYWxjdWxhdGVkT2Zmc2V0LCBwbGFjZW1lbnQpOyAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KS5jYWxsKHRoaXMuY29udGFpbmVyKCkpO1xuICAgICAgICAgIC8qanNoaW50IGxheGNvbW1hOiBmYWxzZSwgZXFlcWVxOiB0cnVlKi8gIFxuICAgICAgICB9ICAgICAgICAgICAgXG4gICAgfSk7XG5cbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIGJvb3RzdHJhcC1kYXRlcGlja2VyLmpzXG4gKiBodHRwOi8vd3d3LmV5ZWNvbi5yby9ib290c3RyYXAtZGF0ZXBpY2tlclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMiBTdGVmYW4gUGV0cmVcbiAqIEltcHJvdmVtZW50cyBieSBBbmRyZXcgUm93bHNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4oZnVuY3Rpb24oICQgKSB7XG5cblx0ZnVuY3Rpb24gVVRDRGF0ZSgpe1xuXHRcdHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShEYXRlLCBhcmd1bWVudHMpKTtcblx0fVxuXHRmdW5jdGlvbiBVVENUb2RheSgpe1xuXHRcdHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XG5cdFx0cmV0dXJuIFVUQ0RhdGUodG9kYXkuZ2V0VVRDRnVsbFllYXIoKSwgdG9kYXkuZ2V0VVRDTW9udGgoKSwgdG9kYXkuZ2V0VVRDRGF0ZSgpKTtcblx0fVxuXG5cdC8vIFBpY2tlciBvYmplY3RcblxuXHR2YXIgRGF0ZXBpY2tlciA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cblx0XHR0aGlzLl9wcm9jZXNzX29wdGlvbnMob3B0aW9ucyk7XG5cblx0XHR0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuXHRcdHRoaXMuaXNJbmxpbmUgPSBmYWxzZTtcblx0XHR0aGlzLmlzSW5wdXQgPSB0aGlzLmVsZW1lbnQuaXMoJ2lucHV0Jyk7XG5cdFx0dGhpcy5jb21wb25lbnQgPSB0aGlzLmVsZW1lbnQuaXMoJy5kYXRlJykgPyB0aGlzLmVsZW1lbnQuZmluZCgnLmFkZC1vbiwgLmJ0bicpIDogZmFsc2U7XG5cdFx0dGhpcy5oYXNJbnB1dCA9IHRoaXMuY29tcG9uZW50ICYmIHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpLmxlbmd0aDtcblx0XHRpZih0aGlzLmNvbXBvbmVudCAmJiB0aGlzLmNvbXBvbmVudC5sZW5ndGggPT09IDApXG5cdFx0XHR0aGlzLmNvbXBvbmVudCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5waWNrZXIgPSAkKERQR2xvYmFsLnRlbXBsYXRlKTtcblx0XHR0aGlzLl9idWlsZEV2ZW50cygpO1xuXHRcdHRoaXMuX2F0dGFjaEV2ZW50cygpO1xuXG5cdFx0aWYodGhpcy5pc0lubGluZSkge1xuXHRcdFx0dGhpcy5waWNrZXIuYWRkQ2xhc3MoJ2RhdGVwaWNrZXItaW5saW5lJykuYXBwZW5kVG8odGhpcy5lbGVtZW50KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5waWNrZXIuYWRkQ2xhc3MoJ2RhdGVwaWNrZXItZHJvcGRvd24gZHJvcGRvd24tbWVudScpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLm8ucnRsKXtcblx0XHRcdHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRlcGlja2VyLXJ0bCcpO1xuXHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLnByZXYgaSwgLm5leHQgaScpXG5cdFx0XHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ2ljb24tYXJyb3ctbGVmdCBpY29uLWFycm93LXJpZ2h0Jyk7XG5cdFx0fVxuXG5cblx0XHR0aGlzLnZpZXdNb2RlID0gdGhpcy5vLnN0YXJ0VmlldztcblxuXHRcdGlmICh0aGlzLm8uY2FsZW5kYXJXZWVrcylcblx0XHRcdHRoaXMucGlja2VyLmZpbmQoJ3Rmb290IHRoLnRvZGF5Jylcblx0XHRcdFx0XHRcdC5hdHRyKCdjb2xzcGFuJywgZnVuY3Rpb24oaSwgdmFsKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KHZhbCkgKyAxO1xuXHRcdFx0XHRcdFx0fSk7XG5cblx0XHR0aGlzLl9hbGxvd191cGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuc2V0U3RhcnREYXRlKHRoaXMuby5zdGFydERhdGUpO1xuXHRcdHRoaXMuc2V0RW5kRGF0ZSh0aGlzLm8uZW5kRGF0ZSk7XG5cdFx0dGhpcy5zZXREYXlzT2ZXZWVrRGlzYWJsZWQodGhpcy5vLmRheXNPZldlZWtEaXNhYmxlZCk7XG5cblx0XHR0aGlzLmZpbGxEb3coKTtcblx0XHR0aGlzLmZpbGxNb250aHMoKTtcblxuXHRcdHRoaXMuX2FsbG93X3VwZGF0ZSA9IHRydWU7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdHRoaXMuc2hvd01vZGUoKTtcblxuXHRcdGlmKHRoaXMuaXNJbmxpbmUpIHtcblx0XHRcdHRoaXMuc2hvdygpO1xuXHRcdH1cblx0fTtcblxuXHREYXRlcGlja2VyLnByb3RvdHlwZSA9IHtcblx0XHRjb25zdHJ1Y3RvcjogRGF0ZXBpY2tlcixcblxuXHRcdF9wcm9jZXNzX29wdGlvbnM6IGZ1bmN0aW9uKG9wdHMpe1xuXHRcdFx0Ly8gU3RvcmUgcmF3IG9wdGlvbnMgZm9yIHJlZmVyZW5jZVxuXHRcdFx0dGhpcy5fbyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vLCBvcHRzKTtcblx0XHRcdC8vIFByb2Nlc3NlZCBvcHRpb25zXG5cdFx0XHR2YXIgbyA9IHRoaXMubyA9ICQuZXh0ZW5kKHt9LCB0aGlzLl9vKTtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgXCJkZS1ERVwiIHN0eWxlIGRhdGUgaXMgYXZhaWxhYmxlLCBpZiBub3QgbGFuZ3VhZ2Ugc2hvdWxkXG5cdFx0XHQvLyBmYWxsYmFjayB0byAyIGxldHRlciBjb2RlIGVnIFwiZGVcIlxuXHRcdFx0dmFyIGxhbmcgPSBvLmxhbmd1YWdlO1xuXHRcdFx0aWYgKCFkYXRlc1tsYW5nXSkge1xuXHRcdFx0XHRsYW5nID0gbGFuZy5zcGxpdCgnLScpWzBdO1xuXHRcdFx0XHRpZiAoIWRhdGVzW2xhbmddKVxuXHRcdFx0XHRcdGxhbmcgPSBkZWZhdWx0cy5sYW5ndWFnZTtcblx0XHRcdH1cblx0XHRcdG8ubGFuZ3VhZ2UgPSBsYW5nO1xuXG5cdFx0XHRzd2l0Y2goby5zdGFydFZpZXcpe1xuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdGNhc2UgJ2RlY2FkZSc6XG5cdFx0XHRcdFx0by5zdGFydFZpZXcgPSAyO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdGNhc2UgJ3llYXInOlxuXHRcdFx0XHRcdG8uc3RhcnRWaWV3ID0gMTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRvLnN0YXJ0VmlldyA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdHN3aXRjaCAoby5taW5WaWV3TW9kZSkge1xuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdGNhc2UgJ21vbnRocyc6XG5cdFx0XHRcdFx0by5taW5WaWV3TW9kZSA9IDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0Y2FzZSAneWVhcnMnOlxuXHRcdFx0XHRcdG8ubWluVmlld01vZGUgPSAyO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdG8ubWluVmlld01vZGUgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHRvLnN0YXJ0VmlldyA9IE1hdGgubWF4KG8uc3RhcnRWaWV3LCBvLm1pblZpZXdNb2RlKTtcblxuXHRcdFx0by53ZWVrU3RhcnQgJT0gNztcblx0XHRcdG8ud2Vla0VuZCA9ICgoby53ZWVrU3RhcnQgKyA2KSAlIDcpO1xuXG5cdFx0XHR2YXIgZm9ybWF0ID0gRFBHbG9iYWwucGFyc2VGb3JtYXQoby5mb3JtYXQpXG5cdFx0XHRpZiAoby5zdGFydERhdGUgIT09IC1JbmZpbml0eSkge1xuXHRcdFx0XHRvLnN0YXJ0RGF0ZSA9IERQR2xvYmFsLnBhcnNlRGF0ZShvLnN0YXJ0RGF0ZSwgZm9ybWF0LCBvLmxhbmd1YWdlKTtcblx0XHRcdH1cblx0XHRcdGlmIChvLmVuZERhdGUgIT09IEluZmluaXR5KSB7XG5cdFx0XHRcdG8uZW5kRGF0ZSA9IERQR2xvYmFsLnBhcnNlRGF0ZShvLmVuZERhdGUsIGZvcm1hdCwgby5sYW5ndWFnZSk7XG5cdFx0XHR9XG5cblx0XHRcdG8uZGF5c09mV2Vla0Rpc2FibGVkID0gby5kYXlzT2ZXZWVrRGlzYWJsZWR8fFtdO1xuXHRcdFx0aWYgKCEkLmlzQXJyYXkoby5kYXlzT2ZXZWVrRGlzYWJsZWQpKVxuXHRcdFx0XHRvLmRheXNPZldlZWtEaXNhYmxlZCA9IG8uZGF5c09mV2Vla0Rpc2FibGVkLnNwbGl0KC9bLFxcc10qLyk7XG5cdFx0XHRvLmRheXNPZldlZWtEaXNhYmxlZCA9ICQubWFwKG8uZGF5c09mV2Vla0Rpc2FibGVkLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoZCwgMTApO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRfZXZlbnRzOiBbXSxcblx0XHRfc2Vjb25kYXJ5RXZlbnRzOiBbXSxcblx0XHRfYXBwbHlFdmVudHM6IGZ1bmN0aW9uKGV2cyl7XG5cdFx0XHRmb3IgKHZhciBpPTAsIGVsLCBldjsgaTxldnMubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRlbCA9IGV2c1tpXVswXTtcblx0XHRcdFx0ZXYgPSBldnNbaV1bMV07XG5cdFx0XHRcdGVsLm9uKGV2KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF91bmFwcGx5RXZlbnRzOiBmdW5jdGlvbihldnMpe1xuXHRcdFx0Zm9yICh2YXIgaT0wLCBlbCwgZXY7IGk8ZXZzLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0ZWwgPSBldnNbaV1bMF07XG5cdFx0XHRcdGV2ID0gZXZzW2ldWzFdO1xuXHRcdFx0XHRlbC5vZmYoZXYpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2J1aWxkRXZlbnRzOiBmdW5jdGlvbigpe1xuXHRcdFx0aWYgKHRoaXMuaXNJbnB1dCkgeyAvLyBzaW5nbGUgaW5wdXRcblx0XHRcdFx0dGhpcy5fZXZlbnRzID0gW1xuXHRcdFx0XHRcdFt0aGlzLmVsZW1lbnQsIHtcblx0XHRcdFx0XHRcdGZvY3VzOiAkLnByb3h5KHRoaXMuc2hvdywgdGhpcyksXG5cdFx0XHRcdFx0XHRrZXl1cDogJC5wcm94eSh0aGlzLnVwZGF0ZSwgdGhpcyksXG5cdFx0XHRcdFx0XHRrZXlkb3duOiAkLnByb3h5KHRoaXMua2V5ZG93biwgdGhpcylcblx0XHRcdFx0XHR9XVxuXHRcdFx0XHRdO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAodGhpcy5jb21wb25lbnQgJiYgdGhpcy5oYXNJbnB1dCl7IC8vIGNvbXBvbmVudDogaW5wdXQgKyBidXR0b25cblx0XHRcdFx0dGhpcy5fZXZlbnRzID0gW1xuXHRcdFx0XHRcdC8vIEZvciBjb21wb25lbnRzIHRoYXQgYXJlIG5vdCByZWFkb25seSwgYWxsb3cga2V5Ym9hcmQgbmF2XG5cdFx0XHRcdFx0W3RoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpLCB7XG5cdFx0XHRcdFx0XHRmb2N1czogJC5wcm94eSh0aGlzLnNob3csIHRoaXMpLFxuXHRcdFx0XHRcdFx0a2V5dXA6ICQucHJveHkodGhpcy51cGRhdGUsIHRoaXMpLFxuXHRcdFx0XHRcdFx0a2V5ZG93bjogJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpXG5cdFx0XHRcdFx0fV0sXG5cdFx0XHRcdFx0W3RoaXMuY29tcG9uZW50LCB7XG5cdFx0XHRcdFx0XHRjbGljazogJC5wcm94eSh0aGlzLnNob3csIHRoaXMpXG5cdFx0XHRcdFx0fV1cblx0XHRcdFx0XTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKHRoaXMuZWxlbWVudC5pcygnZGl2JykpIHsgIC8vIGlubGluZSBkYXRlcGlja2VyXG5cdFx0XHRcdHRoaXMuaXNJbmxpbmUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHRoaXMuX2V2ZW50cyA9IFtcblx0XHRcdFx0XHRbdGhpcy5lbGVtZW50LCB7XG5cdFx0XHRcdFx0XHRjbGljazogJC5wcm94eSh0aGlzLnNob3csIHRoaXMpXG5cdFx0XHRcdFx0fV1cblx0XHRcdFx0XTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fc2Vjb25kYXJ5RXZlbnRzID0gW1xuXHRcdFx0XHRbdGhpcy5waWNrZXIsIHtcblx0XHRcdFx0XHRjbGljazogJC5wcm94eSh0aGlzLmNsaWNrLCB0aGlzKVxuXHRcdFx0XHR9XSxcblx0XHRcdFx0WyQod2luZG93KSwge1xuXHRcdFx0XHRcdHJlc2l6ZTogJC5wcm94eSh0aGlzLnBsYWNlLCB0aGlzKVxuXHRcdFx0XHR9XSxcblx0XHRcdFx0WyQoZG9jdW1lbnQpLCB7XG5cdFx0XHRcdFx0bW91c2Vkb3duOiAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdFx0XHQvLyBDbGlja2VkIG91dHNpZGUgdGhlIGRhdGVwaWNrZXIsIGhpZGUgaXRcblx0XHRcdFx0XHRcdGlmICghKFxuXHRcdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuaXMoZS50YXJnZXQpIHx8XG5cdFx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudC5maW5kKGUudGFyZ2V0KS5zaXplKCkgfHxcblx0XHRcdFx0XHRcdFx0dGhpcy5waWNrZXIuaXMoZS50YXJnZXQpIHx8XG5cdFx0XHRcdFx0XHRcdHRoaXMucGlja2VyLmZpbmQoZS50YXJnZXQpLnNpemUoKVxuXHRcdFx0XHRcdFx0KSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLmhpZGUoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCB0aGlzKVxuXHRcdFx0XHR9XVxuXHRcdFx0XTtcblx0XHR9LFxuXHRcdF9hdHRhY2hFdmVudHM6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLl9kZXRhY2hFdmVudHMoKTtcblx0XHRcdHRoaXMuX2FwcGx5RXZlbnRzKHRoaXMuX2V2ZW50cyk7XG5cdFx0fSxcblx0XHRfZGV0YWNoRXZlbnRzOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5fdW5hcHBseUV2ZW50cyh0aGlzLl9ldmVudHMpO1xuXHRcdH0sXG5cdFx0X2F0dGFjaFNlY29uZGFyeUV2ZW50czogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuX2RldGFjaFNlY29uZGFyeUV2ZW50cygpO1xuXHRcdFx0dGhpcy5fYXBwbHlFdmVudHModGhpcy5fc2Vjb25kYXJ5RXZlbnRzKTtcblx0XHR9LFxuXHRcdF9kZXRhY2hTZWNvbmRhcnlFdmVudHM6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLl91bmFwcGx5RXZlbnRzKHRoaXMuX3NlY29uZGFyeUV2ZW50cyk7XG5cdFx0fSxcblx0XHRfdHJpZ2dlcjogZnVuY3Rpb24oZXZlbnQsIGFsdGRhdGUpe1xuXHRcdFx0dmFyIGRhdGUgPSBhbHRkYXRlIHx8IHRoaXMuZGF0ZSxcblx0XHRcdFx0bG9jYWxfZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpICsgKGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSo2MDAwMCkpO1xuXG5cdFx0XHR0aGlzLmVsZW1lbnQudHJpZ2dlcih7XG5cdFx0XHRcdHR5cGU6IGV2ZW50LFxuXHRcdFx0XHRkYXRlOiBsb2NhbF9kYXRlLFxuXHRcdFx0XHRmb3JtYXQ6ICQucHJveHkoZnVuY3Rpb24oYWx0Zm9ybWF0KXtcblx0XHRcdFx0XHR2YXIgZm9ybWF0ID0gYWx0Zm9ybWF0IHx8IHRoaXMuby5mb3JtYXQ7XG5cdFx0XHRcdFx0cmV0dXJuIERQR2xvYmFsLmZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0LCB0aGlzLm8ubGFuZ3VhZ2UpO1xuXHRcdFx0XHR9LCB0aGlzKVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdHNob3c6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmICghdGhpcy5pc0lubGluZSlcblx0XHRcdFx0dGhpcy5waWNrZXIuYXBwZW5kVG8oJ2JvZHknKTtcblx0XHRcdHRoaXMucGlja2VyLnNob3coKTtcblx0XHRcdHRoaXMuaGVpZ2h0ID0gdGhpcy5jb21wb25lbnQgPyB0aGlzLmNvbXBvbmVudC5vdXRlckhlaWdodCgpIDogdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCk7XG5cdFx0XHR0aGlzLnBsYWNlKCk7XG5cdFx0XHR0aGlzLl9hdHRhY2hTZWNvbmRhcnlFdmVudHMoKTtcblx0XHRcdGlmIChlKSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3RyaWdnZXIoJ3Nob3cnKTtcblx0XHR9LFxuXG5cdFx0aGlkZTogZnVuY3Rpb24oZSl7XG5cdFx0XHRpZih0aGlzLmlzSW5saW5lKSByZXR1cm47XG5cdFx0XHRpZiAoIXRoaXMucGlja2VyLmlzKCc6dmlzaWJsZScpKSByZXR1cm47XG5cdFx0XHR0aGlzLnBpY2tlci5oaWRlKCkuZGV0YWNoKCk7XG5cdFx0XHR0aGlzLl9kZXRhY2hTZWNvbmRhcnlFdmVudHMoKTtcblx0XHRcdHRoaXMudmlld01vZGUgPSB0aGlzLm8uc3RhcnRWaWV3O1xuXHRcdFx0dGhpcy5zaG93TW9kZSgpO1xuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdHRoaXMuby5mb3JjZVBhcnNlICYmXG5cdFx0XHRcdChcblx0XHRcdFx0XHR0aGlzLmlzSW5wdXQgJiYgdGhpcy5lbGVtZW50LnZhbCgpIHx8XG5cdFx0XHRcdFx0dGhpcy5oYXNJbnB1dCAmJiB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKS52YWwoKVxuXHRcdFx0XHQpXG5cdFx0XHQpXG5cdFx0XHRcdHRoaXMuc2V0VmFsdWUoKTtcblx0XHRcdHRoaXMuX3RyaWdnZXIoJ2hpZGUnKTtcblx0XHR9LFxuXG5cdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdFx0dGhpcy5fZGV0YWNoRXZlbnRzKCk7XG5cdFx0XHR0aGlzLl9kZXRhY2hTZWNvbmRhcnlFdmVudHMoKTtcblx0XHRcdHRoaXMucGlja2VyLnJlbW92ZSgpO1xuXHRcdFx0ZGVsZXRlIHRoaXMuZWxlbWVudC5kYXRhKCkuZGF0ZXBpY2tlcjtcblx0XHRcdGlmICghdGhpcy5pc0lucHV0KSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmVsZW1lbnQuZGF0YSgpLmRhdGU7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGdldERhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGQgPSB0aGlzLmdldFVUQ0RhdGUoKTtcblx0XHRcdHJldHVybiBuZXcgRGF0ZShkLmdldFRpbWUoKSArIChkLmdldFRpbWV6b25lT2Zmc2V0KCkqNjAwMDApKTtcblx0XHR9LFxuXG5cdFx0Z2V0VVRDRGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kYXRlO1xuXHRcdH0sXG5cblx0XHRzZXREYXRlOiBmdW5jdGlvbihkKSB7XG5cdFx0XHR0aGlzLnNldFVUQ0RhdGUobmV3IERhdGUoZC5nZXRUaW1lKCkgLSAoZC5nZXRUaW1lem9uZU9mZnNldCgpKjYwMDAwKSkpO1xuXHRcdH0sXG5cblx0XHRzZXRVVENEYXRlOiBmdW5jdGlvbihkKSB7XG5cdFx0XHR0aGlzLmRhdGUgPSBkO1xuXHRcdFx0dGhpcy5zZXRWYWx1ZSgpO1xuXHRcdH0sXG5cblx0XHRzZXRWYWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZm9ybWF0dGVkID0gdGhpcy5nZXRGb3JtYXR0ZWREYXRlKCk7XG5cdFx0XHRpZiAoIXRoaXMuaXNJbnB1dCkge1xuXHRcdFx0XHRpZiAodGhpcy5jb21wb25lbnQpe1xuXHRcdFx0XHRcdHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpLnZhbChmb3JtYXR0ZWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQudmFsKGZvcm1hdHRlZCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGdldEZvcm1hdHRlZERhdGU6IGZ1bmN0aW9uKGZvcm1hdCkge1xuXHRcdFx0aWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRmb3JtYXQgPSB0aGlzLm8uZm9ybWF0O1xuXHRcdFx0cmV0dXJuIERQR2xvYmFsLmZvcm1hdERhdGUodGhpcy5kYXRlLCBmb3JtYXQsIHRoaXMuby5sYW5ndWFnZSk7XG5cdFx0fSxcblxuXHRcdHNldFN0YXJ0RGF0ZTogZnVuY3Rpb24oc3RhcnREYXRlKXtcblx0XHRcdHRoaXMuX3Byb2Nlc3Nfb3B0aW9ucyh7c3RhcnREYXRlOiBzdGFydERhdGV9KTtcblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHR0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xuXHRcdH0sXG5cblx0XHRzZXRFbmREYXRlOiBmdW5jdGlvbihlbmREYXRlKXtcblx0XHRcdHRoaXMuX3Byb2Nlc3Nfb3B0aW9ucyh7ZW5kRGF0ZTogZW5kRGF0ZX0pO1xuXHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdHRoaXMudXBkYXRlTmF2QXJyb3dzKCk7XG5cdFx0fSxcblxuXHRcdHNldERheXNPZldlZWtEaXNhYmxlZDogZnVuY3Rpb24oZGF5c09mV2Vla0Rpc2FibGVkKXtcblx0XHRcdHRoaXMuX3Byb2Nlc3Nfb3B0aW9ucyh7ZGF5c09mV2Vla0Rpc2FibGVkOiBkYXlzT2ZXZWVrRGlzYWJsZWR9KTtcblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHR0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xuXHRcdH0sXG5cblx0XHRwbGFjZTogZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdGlmKHRoaXMuaXNJbmxpbmUpIHJldHVybjtcblx0XHRcdHZhciB6SW5kZXggPSBwYXJzZUludCh0aGlzLmVsZW1lbnQucGFyZW50cygpLmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuICQodGhpcykuY3NzKCd6LWluZGV4JykgIT0gJ2F1dG8nO1xuXHRcdFx0XHRcdFx0fSkuZmlyc3QoKS5jc3MoJ3otaW5kZXgnKSkrMTA7XG5cdFx0XHR2YXIgb2Zmc2V0ID0gdGhpcy5jb21wb25lbnQgPyB0aGlzLmNvbXBvbmVudC5wYXJlbnQoKS5vZmZzZXQoKSA6IHRoaXMuZWxlbWVudC5vZmZzZXQoKTtcblx0XHRcdHZhciBoZWlnaHQgPSB0aGlzLmNvbXBvbmVudCA/IHRoaXMuY29tcG9uZW50Lm91dGVySGVpZ2h0KHRydWUpIDogdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KHRydWUpO1xuXHRcdFx0dGhpcy5waWNrZXIuY3NzKHtcblx0XHRcdFx0dG9wOiBvZmZzZXQudG9wICsgaGVpZ2h0LFxuXHRcdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCxcblx0XHRcdFx0ekluZGV4OiB6SW5kZXhcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRfYWxsb3dfdXBkYXRlOiB0cnVlLFxuXHRcdHVwZGF0ZTogZnVuY3Rpb24oKXtcblx0XHRcdGlmICghdGhpcy5fYWxsb3dfdXBkYXRlKSByZXR1cm47XG5cblx0XHRcdHZhciBkYXRlLCBmcm9tQXJncyA9IGZhbHNlO1xuXHRcdFx0aWYoYXJndW1lbnRzICYmIGFyZ3VtZW50cy5sZW5ndGggJiYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdzdHJpbmcnIHx8IGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIERhdGUpKSB7XG5cdFx0XHRcdGRhdGUgPSBhcmd1bWVudHNbMF07XG5cdFx0XHRcdGZyb21BcmdzID0gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGUgPSB0aGlzLmlzSW5wdXQgPyB0aGlzLmVsZW1lbnQudmFsKCkgOiB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZScpIHx8IHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpLnZhbCgpO1xuXHRcdFx0XHRkZWxldGUgdGhpcy5lbGVtZW50LmRhdGEoKS5kYXRlO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRhdGUgPSBEUEdsb2JhbC5wYXJzZURhdGUoZGF0ZSwgdGhpcy5vLmZvcm1hdCwgdGhpcy5vLmxhbmd1YWdlKTtcblxuXHRcdFx0aWYoZnJvbUFyZ3MpIHRoaXMuc2V0VmFsdWUoKTtcblxuXHRcdFx0aWYgKHRoaXMuZGF0ZSA8IHRoaXMuby5zdGFydERhdGUpIHtcblx0XHRcdFx0dGhpcy52aWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuby5zdGFydERhdGUpO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmRhdGUgPiB0aGlzLm8uZW5kRGF0ZSkge1xuXHRcdFx0XHR0aGlzLnZpZXdEYXRlID0gbmV3IERhdGUodGhpcy5vLmVuZERhdGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy52aWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuZGF0ZSk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmZpbGwoKTtcblx0XHR9LFxuXG5cdFx0ZmlsbERvdzogZnVuY3Rpb24oKXtcblx0XHRcdHZhciBkb3dDbnQgPSB0aGlzLm8ud2Vla1N0YXJ0LFxuXHRcdFx0aHRtbCA9ICc8dHI+Jztcblx0XHRcdGlmKHRoaXMuby5jYWxlbmRhcldlZWtzKXtcblx0XHRcdFx0dmFyIGNlbGwgPSAnPHRoIGNsYXNzPVwiY3dcIj4mbmJzcDs8L3RoPic7XG5cdFx0XHRcdGh0bWwgKz0gY2VsbDtcblx0XHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItZGF5cyB0aGVhZCB0cjpmaXJzdC1jaGlsZCcpLnByZXBlbmQoY2VsbCk7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAoZG93Q250IDwgdGhpcy5vLndlZWtTdGFydCArIDcpIHtcblx0XHRcdFx0aHRtbCArPSAnPHRoIGNsYXNzPVwiZG93XCI+JytkYXRlc1t0aGlzLm8ubGFuZ3VhZ2VdLmRheXNNaW5bKGRvd0NudCsrKSU3XSsnPC90aD4nO1xuXHRcdFx0fVxuXHRcdFx0aHRtbCArPSAnPC90cj4nO1xuXHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItZGF5cyB0aGVhZCcpLmFwcGVuZChodG1sKTtcblx0XHR9LFxuXG5cdFx0ZmlsbE1vbnRoczogZnVuY3Rpb24oKXtcblx0XHRcdHZhciBodG1sID0gJycsXG5cdFx0XHRpID0gMDtcblx0XHRcdHdoaWxlIChpIDwgMTIpIHtcblx0XHRcdFx0aHRtbCArPSAnPHNwYW4gY2xhc3M9XCJtb250aFwiPicrZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS5tb250aHNTaG9ydFtpKytdKyc8L3NwYW4+Jztcblx0XHRcdH1cblx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5kYXRlcGlja2VyLW1vbnRocyB0ZCcpLmh0bWwoaHRtbCk7XG5cdFx0fSxcblxuXHRcdHNldFJhbmdlOiBmdW5jdGlvbihyYW5nZSl7XG5cdFx0XHRpZiAoIXJhbmdlIHx8ICFyYW5nZS5sZW5ndGgpXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLnJhbmdlO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHR0aGlzLnJhbmdlID0gJC5tYXAocmFuZ2UsIGZ1bmN0aW9uKGQpeyByZXR1cm4gZC52YWx1ZU9mKCk7IH0pO1xuXHRcdFx0dGhpcy5maWxsKCk7XG5cdFx0fSxcblxuXHRcdGdldENsYXNzTmFtZXM6IGZ1bmN0aW9uKGRhdGUpe1xuXHRcdFx0dmFyIGNscyA9IFtdLFxuXHRcdFx0XHR5ZWFyID0gdGhpcy52aWV3RGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuXHRcdFx0XHRtb250aCA9IHRoaXMudmlld0RhdGUuZ2V0VVRDTW9udGgoKSxcblx0XHRcdFx0Y3VycmVudERhdGUgPSB0aGlzLmRhdGUudmFsdWVPZigpLFxuXHRcdFx0XHR0b2RheSA9IG5ldyBEYXRlKCk7XG5cdFx0XHRpZiAoZGF0ZS5nZXRVVENGdWxsWWVhcigpIDwgeWVhciB8fCAoZGF0ZS5nZXRVVENGdWxsWWVhcigpID09IHllYXIgJiYgZGF0ZS5nZXRVVENNb250aCgpIDwgbW9udGgpKSB7XG5cdFx0XHRcdGNscy5wdXNoKCdvbGQnKTtcblx0XHRcdH0gZWxzZSBpZiAoZGF0ZS5nZXRVVENGdWxsWWVhcigpID4geWVhciB8fCAoZGF0ZS5nZXRVVENGdWxsWWVhcigpID09IHllYXIgJiYgZGF0ZS5nZXRVVENNb250aCgpID4gbW9udGgpKSB7XG5cdFx0XHRcdGNscy5wdXNoKCduZXcnKTtcblx0XHRcdH1cblx0XHRcdC8vIENvbXBhcmUgaW50ZXJuYWwgVVRDIGRhdGUgd2l0aCBsb2NhbCB0b2RheSwgbm90IFVUQyB0b2RheVxuXHRcdFx0aWYgKHRoaXMuby50b2RheUhpZ2hsaWdodCAmJlxuXHRcdFx0XHRkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPT0gdG9kYXkuZ2V0RnVsbFllYXIoKSAmJlxuXHRcdFx0XHRkYXRlLmdldFVUQ01vbnRoKCkgPT0gdG9kYXkuZ2V0TW9udGgoKSAmJlxuXHRcdFx0XHRkYXRlLmdldFVUQ0RhdGUoKSA9PSB0b2RheS5nZXREYXRlKCkpIHtcblx0XHRcdFx0Y2xzLnB1c2goJ3RvZGF5Jyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY3VycmVudERhdGUgJiYgZGF0ZS52YWx1ZU9mKCkgPT0gY3VycmVudERhdGUpIHtcblx0XHRcdFx0Y2xzLnB1c2goJ2FjdGl2ZScpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRhdGUudmFsdWVPZigpIDwgdGhpcy5vLnN0YXJ0RGF0ZSB8fCBkYXRlLnZhbHVlT2YoKSA+IHRoaXMuby5lbmREYXRlIHx8XG5cdFx0XHRcdCQuaW5BcnJheShkYXRlLmdldFVUQ0RheSgpLCB0aGlzLm8uZGF5c09mV2Vla0Rpc2FibGVkKSAhPT0gLTEpIHtcblx0XHRcdFx0Y2xzLnB1c2goJ2Rpc2FibGVkJyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5yYW5nZSl7XG5cdFx0XHRcdGlmIChkYXRlID4gdGhpcy5yYW5nZVswXSAmJiBkYXRlIDwgdGhpcy5yYW5nZVt0aGlzLnJhbmdlLmxlbmd0aC0xXSl7XG5cdFx0XHRcdFx0Y2xzLnB1c2goJ3JhbmdlJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCQuaW5BcnJheShkYXRlLnZhbHVlT2YoKSwgdGhpcy5yYW5nZSkgIT0gLTEpe1xuXHRcdFx0XHRcdGNscy5wdXNoKCdzZWxlY3RlZCcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY2xzO1xuXHRcdH0sXG5cblx0XHRmaWxsOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkID0gbmV3IERhdGUodGhpcy52aWV3RGF0ZSksXG5cdFx0XHRcdHllYXIgPSBkLmdldFVUQ0Z1bGxZZWFyKCksXG5cdFx0XHRcdG1vbnRoID0gZC5nZXRVVENNb250aCgpLFxuXHRcdFx0XHRzdGFydFllYXIgPSB0aGlzLm8uc3RhcnREYXRlICE9PSAtSW5maW5pdHkgPyB0aGlzLm8uc3RhcnREYXRlLmdldFVUQ0Z1bGxZZWFyKCkgOiAtSW5maW5pdHksXG5cdFx0XHRcdHN0YXJ0TW9udGggPSB0aGlzLm8uc3RhcnREYXRlICE9PSAtSW5maW5pdHkgPyB0aGlzLm8uc3RhcnREYXRlLmdldFVUQ01vbnRoKCkgOiAtSW5maW5pdHksXG5cdFx0XHRcdGVuZFllYXIgPSB0aGlzLm8uZW5kRGF0ZSAhPT0gSW5maW5pdHkgPyB0aGlzLm8uZW5kRGF0ZS5nZXRVVENGdWxsWWVhcigpIDogSW5maW5pdHksXG5cdFx0XHRcdGVuZE1vbnRoID0gdGhpcy5vLmVuZERhdGUgIT09IEluZmluaXR5ID8gdGhpcy5vLmVuZERhdGUuZ2V0VVRDTW9udGgoKSA6IEluZmluaXR5LFxuXHRcdFx0XHRjdXJyZW50RGF0ZSA9IHRoaXMuZGF0ZSAmJiB0aGlzLmRhdGUudmFsdWVPZigpLFxuXHRcdFx0XHR0b29sdGlwO1xuXHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItZGF5cyB0aGVhZCB0aC5kYXRlcGlja2VyLXN3aXRjaCcpXG5cdFx0XHRcdFx0XHQudGV4dChkYXRlc1t0aGlzLm8ubGFuZ3VhZ2VdLm1vbnRoc1ttb250aF0rJyAnK3llYXIpO1xuXHRcdFx0dGhpcy5waWNrZXIuZmluZCgndGZvb3QgdGgudG9kYXknKVxuXHRcdFx0XHRcdFx0LnRleHQoZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS50b2RheSlcblx0XHRcdFx0XHRcdC50b2dnbGUodGhpcy5vLnRvZGF5QnRuICE9PSBmYWxzZSk7XG5cdFx0XHR0aGlzLnBpY2tlci5maW5kKCd0Zm9vdCB0aC5jbGVhcicpXG5cdFx0XHRcdFx0XHQudGV4dChkYXRlc1t0aGlzLm8ubGFuZ3VhZ2VdLmNsZWFyKVxuXHRcdFx0XHRcdFx0LnRvZ2dsZSh0aGlzLm8uY2xlYXJCdG4gIT09IGZhbHNlKTtcblx0XHRcdHRoaXMudXBkYXRlTmF2QXJyb3dzKCk7XG5cdFx0XHR0aGlzLmZpbGxNb250aHMoKTtcblx0XHRcdHZhciBwcmV2TW9udGggPSBVVENEYXRlKHllYXIsIG1vbnRoLTEsIDI4LDAsMCwwLDApLFxuXHRcdFx0XHRkYXkgPSBEUEdsb2JhbC5nZXREYXlzSW5Nb250aChwcmV2TW9udGguZ2V0VVRDRnVsbFllYXIoKSwgcHJldk1vbnRoLmdldFVUQ01vbnRoKCkpO1xuXHRcdFx0cHJldk1vbnRoLnNldFVUQ0RhdGUoZGF5KTtcblx0XHRcdHByZXZNb250aC5zZXRVVENEYXRlKGRheSAtIChwcmV2TW9udGguZ2V0VVRDRGF5KCkgLSB0aGlzLm8ud2Vla1N0YXJ0ICsgNyklNyk7XG5cdFx0XHR2YXIgbmV4dE1vbnRoID0gbmV3IERhdGUocHJldk1vbnRoKTtcblx0XHRcdG5leHRNb250aC5zZXRVVENEYXRlKG5leHRNb250aC5nZXRVVENEYXRlKCkgKyA0Mik7XG5cdFx0XHRuZXh0TW9udGggPSBuZXh0TW9udGgudmFsdWVPZigpO1xuXHRcdFx0dmFyIGh0bWwgPSBbXTtcblx0XHRcdHZhciBjbHNOYW1lO1xuXHRcdFx0d2hpbGUocHJldk1vbnRoLnZhbHVlT2YoKSA8IG5leHRNb250aCkge1xuXHRcdFx0XHRpZiAocHJldk1vbnRoLmdldFVUQ0RheSgpID09IHRoaXMuby53ZWVrU3RhcnQpIHtcblx0XHRcdFx0XHRodG1sLnB1c2goJzx0cj4nKTtcblx0XHRcdFx0XHRpZih0aGlzLm8uY2FsZW5kYXJXZWVrcyl7XG5cdFx0XHRcdFx0XHQvLyBJU08gODYwMTogRmlyc3Qgd2VlayBjb250YWlucyBmaXJzdCB0aHVyc2RheS5cblx0XHRcdFx0XHRcdC8vIElTTyBhbHNvIHN0YXRlcyB3ZWVrIHN0YXJ0cyBvbiBNb25kYXksIGJ1dCB3ZSBjYW4gYmUgbW9yZSBhYnN0cmFjdCBoZXJlLlxuXHRcdFx0XHRcdFx0dmFyXG5cdFx0XHRcdFx0XHRcdC8vIFN0YXJ0IG9mIGN1cnJlbnQgd2VlazogYmFzZWQgb24gd2Vla3N0YXJ0L2N1cnJlbnQgZGF0ZVxuXHRcdFx0XHRcdFx0XHR3cyA9IG5ldyBEYXRlKCtwcmV2TW9udGggKyAodGhpcy5vLndlZWtTdGFydCAtIHByZXZNb250aC5nZXRVVENEYXkoKSAtIDcpICUgNyAqIDg2NGU1KSxcblx0XHRcdFx0XHRcdFx0Ly8gVGh1cnNkYXkgb2YgdGhpcyB3ZWVrXG5cdFx0XHRcdFx0XHRcdHRoID0gbmV3IERhdGUoK3dzICsgKDcgKyA0IC0gd3MuZ2V0VVRDRGF5KCkpICUgNyAqIDg2NGU1KSxcblx0XHRcdFx0XHRcdFx0Ly8gRmlyc3QgVGh1cnNkYXkgb2YgeWVhciwgeWVhciBmcm9tIHRodXJzZGF5XG5cdFx0XHRcdFx0XHRcdHl0aCA9IG5ldyBEYXRlKCsoeXRoID0gVVRDRGF0ZSh0aC5nZXRVVENGdWxsWWVhcigpLCAwLCAxKSkgKyAoNyArIDQgLSB5dGguZ2V0VVRDRGF5KCkpJTcqODY0ZTUpLFxuXHRcdFx0XHRcdFx0XHQvLyBDYWxlbmRhciB3ZWVrOiBtcyBiZXR3ZWVuIHRodXJzZGF5cywgZGl2IG1zIHBlciBkYXksIGRpdiA3IGRheXNcblx0XHRcdFx0XHRcdFx0Y2FsV2VlayA9ICAodGggLSB5dGgpIC8gODY0ZTUgLyA3ICsgMTtcblx0XHRcdFx0XHRcdGh0bWwucHVzaCgnPHRkIGNsYXNzPVwiY3dcIj4nKyBjYWxXZWVrICsnPC90ZD4nKTtcblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRjbHNOYW1lID0gdGhpcy5nZXRDbGFzc05hbWVzKHByZXZNb250aCk7XG5cdFx0XHRcdGNsc05hbWUucHVzaCgnZGF5Jyk7XG5cblx0XHRcdFx0dmFyIGJlZm9yZSA9IHRoaXMuby5iZWZvcmVTaG93RGF5KHByZXZNb250aCk7XG5cdFx0XHRcdGlmIChiZWZvcmUgPT09IHVuZGVmaW5lZClcblx0XHRcdFx0XHRiZWZvcmUgPSB7fTtcblx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mKGJlZm9yZSkgPT09ICdib29sZWFuJylcblx0XHRcdFx0XHRiZWZvcmUgPSB7ZW5hYmxlZDogYmVmb3JlfTtcblx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mKGJlZm9yZSkgPT09ICdzdHJpbmcnKVxuXHRcdFx0XHRcdGJlZm9yZSA9IHtjbGFzc2VzOiBiZWZvcmV9O1xuXHRcdFx0XHRpZiAoYmVmb3JlLmVuYWJsZWQgPT09IGZhbHNlKVxuXHRcdFx0XHRcdGNsc05hbWUucHVzaCgnZGlzYWJsZWQnKTtcblx0XHRcdFx0aWYgKGJlZm9yZS5jbGFzc2VzKVxuXHRcdFx0XHRcdGNsc05hbWUgPSBjbHNOYW1lLmNvbmNhdChiZWZvcmUuY2xhc3Nlcy5zcGxpdCgvXFxzKy8pKTtcblx0XHRcdFx0aWYgKGJlZm9yZS50b29sdGlwKVxuXHRcdFx0XHRcdHRvb2x0aXAgPSBiZWZvcmUudG9vbHRpcDtcblxuXHRcdFx0XHRjbHNOYW1lID0gJC51bmlxdWUoY2xzTmFtZSk7XG5cdFx0XHRcdGh0bWwucHVzaCgnPHRkIGNsYXNzPVwiJytjbHNOYW1lLmpvaW4oJyAnKSsnXCInICsgKHRvb2x0aXAgPyAnIHRpdGxlPVwiJyt0b29sdGlwKydcIicgOiAnJykgKyAnPicrcHJldk1vbnRoLmdldFVUQ0RhdGUoKSArICc8L3RkPicpO1xuXHRcdFx0XHRpZiAocHJldk1vbnRoLmdldFVUQ0RheSgpID09IHRoaXMuby53ZWVrRW5kKSB7XG5cdFx0XHRcdFx0aHRtbC5wdXNoKCc8L3RyPicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHByZXZNb250aC5zZXRVVENEYXRlKHByZXZNb250aC5nZXRVVENEYXRlKCkrMSk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXBpY2tlci1kYXlzIHRib2R5JykuZW1wdHkoKS5hcHBlbmQoaHRtbC5qb2luKCcnKSk7XG5cdFx0XHR2YXIgY3VycmVudFllYXIgPSB0aGlzLmRhdGUgJiYgdGhpcy5kYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG5cblx0XHRcdHZhciBtb250aHMgPSB0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXBpY2tlci1tb250aHMnKVxuXHRcdFx0XHRcdFx0LmZpbmQoJ3RoOmVxKDEpJylcblx0XHRcdFx0XHRcdFx0LnRleHQoeWVhcilcblx0XHRcdFx0XHRcdFx0LmVuZCgpXG5cdFx0XHRcdFx0XHQuZmluZCgnc3BhbicpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblx0XHRcdGlmIChjdXJyZW50WWVhciAmJiBjdXJyZW50WWVhciA9PSB5ZWFyKSB7XG5cdFx0XHRcdG1vbnRocy5lcSh0aGlzLmRhdGUuZ2V0VVRDTW9udGgoKSkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHllYXIgPCBzdGFydFllYXIgfHwgeWVhciA+IGVuZFllYXIpIHtcblx0XHRcdFx0bW9udGhzLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHllYXIgPT0gc3RhcnRZZWFyKSB7XG5cdFx0XHRcdG1vbnRocy5zbGljZSgwLCBzdGFydE1vbnRoKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblx0XHRcdH1cblx0XHRcdGlmICh5ZWFyID09IGVuZFllYXIpIHtcblx0XHRcdFx0bW9udGhzLnNsaWNlKGVuZE1vbnRoKzEpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXHRcdFx0fVxuXG5cdFx0XHRodG1sID0gJyc7XG5cdFx0XHR5ZWFyID0gcGFyc2VJbnQoeWVhci8xMCwgMTApICogMTA7XG5cdFx0XHR2YXIgeWVhckNvbnQgPSB0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXBpY2tlci15ZWFycycpXG5cdFx0XHRcdFx0XHRcdFx0LmZpbmQoJ3RoOmVxKDEpJylcblx0XHRcdFx0XHRcdFx0XHRcdC50ZXh0KHllYXIgKyAnLScgKyAoeWVhciArIDkpKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmVuZCgpXG5cdFx0XHRcdFx0XHRcdFx0LmZpbmQoJ3RkJyk7XG5cdFx0XHR5ZWFyIC09IDE7XG5cdFx0XHRmb3IgKHZhciBpID0gLTE7IGkgPCAxMTsgaSsrKSB7XG5cdFx0XHRcdGh0bWwgKz0gJzxzcGFuIGNsYXNzPVwieWVhcicrKGkgPT0gLTEgPyAnIG9sZCcgOiBpID09IDEwID8gJyBuZXcnIDogJycpKyhjdXJyZW50WWVhciA9PSB5ZWFyID8gJyBhY3RpdmUnIDogJycpKyh5ZWFyIDwgc3RhcnRZZWFyIHx8IHllYXIgPiBlbmRZZWFyID8gJyBkaXNhYmxlZCcgOiAnJykrJ1wiPicreWVhcisnPC9zcGFuPic7XG5cdFx0XHRcdHllYXIgKz0gMTtcblx0XHRcdH1cblx0XHRcdHllYXJDb250Lmh0bWwoaHRtbCk7XG5cdFx0fSxcblxuXHRcdHVwZGF0ZU5hdkFycm93czogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIXRoaXMuX2FsbG93X3VwZGF0ZSkgcmV0dXJuO1xuXG5cdFx0XHR2YXIgZCA9IG5ldyBEYXRlKHRoaXMudmlld0RhdGUpLFxuXHRcdFx0XHR5ZWFyID0gZC5nZXRVVENGdWxsWWVhcigpLFxuXHRcdFx0XHRtb250aCA9IGQuZ2V0VVRDTW9udGgoKTtcblx0XHRcdHN3aXRjaCAodGhpcy52aWV3TW9kZSkge1xuXHRcdFx0XHRjYXNlIDA6XG5cdFx0XHRcdFx0aWYgKHRoaXMuby5zdGFydERhdGUgIT09IC1JbmZpbml0eSAmJiB5ZWFyIDw9IHRoaXMuby5zdGFydERhdGUuZ2V0VVRDRnVsbFllYXIoKSAmJiBtb250aCA8PSB0aGlzLm8uc3RhcnREYXRlLmdldFVUQ01vbnRoKCkpIHtcblx0XHRcdFx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5wcmV2JykuY3NzKHt2aXNpYmlsaXR5OiAnaGlkZGVuJ30pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBpY2tlci5maW5kKCcucHJldicpLmNzcyh7dmlzaWJpbGl0eTogJ3Zpc2libGUnfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0aGlzLm8uZW5kRGF0ZSAhPT0gSW5maW5pdHkgJiYgeWVhciA+PSB0aGlzLm8uZW5kRGF0ZS5nZXRVVENGdWxsWWVhcigpICYmIG1vbnRoID49IHRoaXMuby5lbmREYXRlLmdldFVUQ01vbnRoKCkpIHtcblx0XHRcdFx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5uZXh0JykuY3NzKHt2aXNpYmlsaXR5OiAnaGlkZGVuJ30pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBpY2tlci5maW5kKCcubmV4dCcpLmNzcyh7dmlzaWJpbGl0eTogJ3Zpc2libGUnfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRpZiAodGhpcy5vLnN0YXJ0RGF0ZSAhPT0gLUluZmluaXR5ICYmIHllYXIgPD0gdGhpcy5vLnN0YXJ0RGF0ZS5nZXRVVENGdWxsWWVhcigpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBpY2tlci5maW5kKCcucHJldicpLmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbid9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLnByZXYnKS5jc3Moe3Zpc2liaWxpdHk6ICd2aXNpYmxlJ30pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5vLmVuZERhdGUgIT09IEluZmluaXR5ICYmIHllYXIgPj0gdGhpcy5vLmVuZERhdGUuZ2V0VVRDRnVsbFllYXIoKSkge1xuXHRcdFx0XHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLm5leHQnKS5jc3Moe3Zpc2liaWxpdHk6ICdoaWRkZW4nfSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5uZXh0JykuY3NzKHt2aXNpYmlsaXR5OiAndmlzaWJsZSd9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGNsaWNrOiBmdW5jdGlvbihlKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR2YXIgdGFyZ2V0ID0gJChlLnRhcmdldCkuY2xvc2VzdCgnc3BhbiwgdGQsIHRoJyk7XG5cdFx0XHRpZiAodGFyZ2V0Lmxlbmd0aCA9PSAxKSB7XG5cdFx0XHRcdHN3aXRjaCh0YXJnZXRbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkge1xuXHRcdFx0XHRcdGNhc2UgJ3RoJzpcblx0XHRcdFx0XHRcdHN3aXRjaCh0YXJnZXRbMF0uY2xhc3NOYW1lKSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2RhdGVwaWNrZXItc3dpdGNoJzpcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnNob3dNb2RlKDEpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICdwcmV2Jzpcblx0XHRcdFx0XHRcdFx0Y2FzZSAnbmV4dCc6XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGRpciA9IERQR2xvYmFsLm1vZGVzW3RoaXMudmlld01vZGVdLm5hdlN0ZXAgKiAodGFyZ2V0WzBdLmNsYXNzTmFtZSA9PSAncHJldicgPyAtMSA6IDEpO1xuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCh0aGlzLnZpZXdNb2RlKXtcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgMDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy52aWV3RGF0ZSA9IHRoaXMubW92ZU1vbnRoKHRoaXMudmlld0RhdGUsIGRpcik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLnZpZXdEYXRlID0gdGhpcy5tb3ZlWWVhcih0aGlzLnZpZXdEYXRlLCBkaXIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5maWxsKCk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ3RvZGF5Jzpcblx0XHRcdFx0XHRcdFx0XHR2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0ZSA9IFVUQ0RhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCAwLCAwLCAwKTtcblxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc2hvd01vZGUoLTIpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciB3aGljaCA9IHRoaXMuby50b2RheUJ0biA9PSAnbGlua2VkJyA/IG51bGwgOiAndmlldyc7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fc2V0RGF0ZShkYXRlLCB3aGljaCk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2NsZWFyJzpcblx0XHRcdFx0XHRcdFx0XHR2YXIgZWxlbWVudDtcblx0XHRcdFx0XHRcdFx0XHRpZiAodGhpcy5pc0lucHV0KVxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcblx0XHRcdFx0XHRcdFx0XHRlbHNlIGlmICh0aGlzLmNvbXBvbmVudClcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoZWxlbWVudClcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW1lbnQudmFsKFwiXCIpLmNoYW5nZSgpO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3RyaWdnZXIoJ2NoYW5nZURhdGUnKTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0aGlzLm8uYXV0b2Nsb3NlKVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdzcGFuJzpcblx0XHRcdFx0XHRcdGlmICghdGFyZ2V0LmlzKCcuZGlzYWJsZWQnKSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnZpZXdEYXRlLnNldFVUQ0RhdGUoMSk7XG5cdFx0XHRcdFx0XHRcdGlmICh0YXJnZXQuaXMoJy5tb250aCcpKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGRheSA9IDE7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIG1vbnRoID0gdGFyZ2V0LnBhcmVudCgpLmZpbmQoJ3NwYW4nKS5pbmRleCh0YXJnZXQpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciB5ZWFyID0gdGhpcy52aWV3RGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMudmlld0RhdGUuc2V0VVRDTW9udGgobW9udGgpO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3RyaWdnZXIoJ2NoYW5nZU1vbnRoJywgdGhpcy52aWV3RGF0ZSk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuby5taW5WaWV3TW9kZSA9PT0gMSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5fc2V0RGF0ZShVVENEYXRlKHllYXIsIG1vbnRoLCBkYXksMCwwLDAsMCkpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgeWVhciA9IHBhcnNlSW50KHRhcmdldC50ZXh0KCksIDEwKXx8MDtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZGF5ID0gMTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgbW9udGggPSAwO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMudmlld0RhdGUuc2V0VVRDRnVsbFllYXIoeWVhcik7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fdHJpZ2dlcignY2hhbmdlWWVhcicsIHRoaXMudmlld0RhdGUpO1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0aGlzLm8ubWluVmlld01vZGUgPT09IDIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX3NldERhdGUoVVRDRGF0ZSh5ZWFyLCBtb250aCwgZGF5LDAsMCwwLDApKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dGhpcy5zaG93TW9kZSgtMSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZmlsbCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndGQnOlxuXHRcdFx0XHRcdFx0aWYgKHRhcmdldC5pcygnLmRheScpICYmICF0YXJnZXQuaXMoJy5kaXNhYmxlZCcpKXtcblx0XHRcdFx0XHRcdFx0dmFyIGRheSA9IHBhcnNlSW50KHRhcmdldC50ZXh0KCksIDEwKXx8MTtcblx0XHRcdFx0XHRcdFx0dmFyIHllYXIgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ0Z1bGxZZWFyKCksXG5cdFx0XHRcdFx0XHRcdFx0bW9udGggPSB0aGlzLnZpZXdEYXRlLmdldFVUQ01vbnRoKCk7XG5cdFx0XHRcdFx0XHRcdGlmICh0YXJnZXQuaXMoJy5vbGQnKSkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChtb250aCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bW9udGggPSAxMTtcblx0XHRcdFx0XHRcdFx0XHRcdHllYXIgLT0gMTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bW9udGggLT0gMTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodGFyZ2V0LmlzKCcubmV3JykpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAobW9udGggPT0gMTEpIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1vbnRoID0gMDtcblx0XHRcdFx0XHRcdFx0XHRcdHllYXIgKz0gMTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bW9udGggKz0gMTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dGhpcy5fc2V0RGF0ZShVVENEYXRlKHllYXIsIG1vbnRoLCBkYXksMCwwLDAsMCkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X3NldERhdGU6IGZ1bmN0aW9uKGRhdGUsIHdoaWNoKXtcblx0XHRcdGlmICghd2hpY2ggfHwgd2hpY2ggPT0gJ2RhdGUnKVxuXHRcdFx0XHR0aGlzLmRhdGUgPSBuZXcgRGF0ZShkYXRlKTtcblx0XHRcdGlmICghd2hpY2ggfHwgd2hpY2ggID09ICd2aWV3Jylcblx0XHRcdFx0dGhpcy52aWV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuXHRcdFx0dGhpcy5maWxsKCk7XG5cdFx0XHR0aGlzLnNldFZhbHVlKCk7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCdjaGFuZ2VEYXRlJyk7XG5cdFx0XHR2YXIgZWxlbWVudDtcblx0XHRcdGlmICh0aGlzLmlzSW5wdXQpIHtcblx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnQpe1xuXHRcdFx0XHRlbGVtZW50ID0gdGhpcy5lbGVtZW50LmZpbmQoJ2lucHV0Jyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZWxlbWVudCkge1xuXHRcdFx0XHRlbGVtZW50LmNoYW5nZSgpO1xuXHRcdFx0XHRpZiAodGhpcy5vLmF1dG9jbG9zZSAmJiAoIXdoaWNoIHx8IHdoaWNoID09ICdkYXRlJykpIHtcblx0XHRcdFx0XHR0aGlzLmhpZGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRtb3ZlTW9udGg6IGZ1bmN0aW9uKGRhdGUsIGRpcil7XG5cdFx0XHRpZiAoIWRpcikgcmV0dXJuIGRhdGU7XG5cdFx0XHR2YXIgbmV3X2RhdGUgPSBuZXcgRGF0ZShkYXRlLnZhbHVlT2YoKSksXG5cdFx0XHRcdGRheSA9IG5ld19kYXRlLmdldFVUQ0RhdGUoKSxcblx0XHRcdFx0bW9udGggPSBuZXdfZGF0ZS5nZXRVVENNb250aCgpLFxuXHRcdFx0XHRtYWcgPSBNYXRoLmFicyhkaXIpLFxuXHRcdFx0XHRuZXdfbW9udGgsIHRlc3Q7XG5cdFx0XHRkaXIgPSBkaXIgPiAwID8gMSA6IC0xO1xuXHRcdFx0aWYgKG1hZyA9PSAxKXtcblx0XHRcdFx0dGVzdCA9IGRpciA9PSAtMVxuXHRcdFx0XHRcdC8vIElmIGdvaW5nIGJhY2sgb25lIG1vbnRoLCBtYWtlIHN1cmUgbW9udGggaXMgbm90IGN1cnJlbnQgbW9udGhcblx0XHRcdFx0XHQvLyAoZWcsIE1hciAzMSAtPiBGZWIgMzEgPT0gRmViIDI4LCBub3QgTWFyIDAyKVxuXHRcdFx0XHRcdD8gZnVuY3Rpb24oKXsgcmV0dXJuIG5ld19kYXRlLmdldFVUQ01vbnRoKCkgPT0gbW9udGg7IH1cblx0XHRcdFx0XHQvLyBJZiBnb2luZyBmb3J3YXJkIG9uZSBtb250aCwgbWFrZSBzdXJlIG1vbnRoIGlzIGFzIGV4cGVjdGVkXG5cdFx0XHRcdFx0Ly8gKGVnLCBKYW4gMzEgLT4gRmViIDMxID09IEZlYiAyOCwgbm90IE1hciAwMilcblx0XHRcdFx0XHQ6IGZ1bmN0aW9uKCl7IHJldHVybiBuZXdfZGF0ZS5nZXRVVENNb250aCgpICE9IG5ld19tb250aDsgfTtcblx0XHRcdFx0bmV3X21vbnRoID0gbW9udGggKyBkaXI7XG5cdFx0XHRcdG5ld19kYXRlLnNldFVUQ01vbnRoKG5ld19tb250aCk7XG5cdFx0XHRcdC8vIERlYyAtPiBKYW4gKDEyKSBvciBKYW4gLT4gRGVjICgtMSkgLS0gbGltaXQgZXhwZWN0ZWQgZGF0ZSB0byAwLTExXG5cdFx0XHRcdGlmIChuZXdfbW9udGggPCAwIHx8IG5ld19tb250aCA+IDExKVxuXHRcdFx0XHRcdG5ld19tb250aCA9IChuZXdfbW9udGggKyAxMikgJSAxMjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEZvciBtYWduaXR1ZGVzID4xLCBtb3ZlIG9uZSBtb250aCBhdCBhIHRpbWUuLi5cblx0XHRcdFx0Zm9yICh2YXIgaT0wOyBpPG1hZzsgaSsrKVxuXHRcdFx0XHRcdC8vIC4uLndoaWNoIG1pZ2h0IGRlY3JlYXNlIHRoZSBkYXkgKGVnLCBKYW4gMzEgdG8gRmViIDI4LCBldGMpLi4uXG5cdFx0XHRcdFx0bmV3X2RhdGUgPSB0aGlzLm1vdmVNb250aChuZXdfZGF0ZSwgZGlyKTtcblx0XHRcdFx0Ly8gLi4udGhlbiByZXNldCB0aGUgZGF5LCBrZWVwaW5nIGl0IGluIHRoZSBuZXcgbW9udGhcblx0XHRcdFx0bmV3X21vbnRoID0gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKTtcblx0XHRcdFx0bmV3X2RhdGUuc2V0VVRDRGF0ZShkYXkpO1xuXHRcdFx0XHR0ZXN0ID0gZnVuY3Rpb24oKXsgcmV0dXJuIG5ld19tb250aCAhPSBuZXdfZGF0ZS5nZXRVVENNb250aCgpOyB9O1xuXHRcdFx0fVxuXHRcdFx0Ly8gQ29tbW9uIGRhdGUtcmVzZXR0aW5nIGxvb3AgLS0gaWYgZGF0ZSBpcyBiZXlvbmQgZW5kIG9mIG1vbnRoLCBtYWtlIGl0XG5cdFx0XHQvLyBlbmQgb2YgbW9udGhcblx0XHRcdHdoaWxlICh0ZXN0KCkpe1xuXHRcdFx0XHRuZXdfZGF0ZS5zZXRVVENEYXRlKC0tZGF5KTtcblx0XHRcdFx0bmV3X2RhdGUuc2V0VVRDTW9udGgobmV3X21vbnRoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBuZXdfZGF0ZTtcblx0XHR9LFxuXG5cdFx0bW92ZVllYXI6IGZ1bmN0aW9uKGRhdGUsIGRpcil7XG5cdFx0XHRyZXR1cm4gdGhpcy5tb3ZlTW9udGgoZGF0ZSwgZGlyKjEyKTtcblx0XHR9LFxuXG5cdFx0ZGF0ZVdpdGhpblJhbmdlOiBmdW5jdGlvbihkYXRlKXtcblx0XHRcdHJldHVybiBkYXRlID49IHRoaXMuby5zdGFydERhdGUgJiYgZGF0ZSA8PSB0aGlzLm8uZW5kRGF0ZTtcblx0XHR9LFxuXG5cdFx0a2V5ZG93bjogZnVuY3Rpb24oZSl7XG5cdFx0XHRpZiAodGhpcy5waWNrZXIuaXMoJzpub3QoOnZpc2libGUpJykpe1xuXHRcdFx0XHRpZiAoZS5rZXlDb2RlID09IDI3KSAvLyBhbGxvdyBlc2NhcGUgdG8gaGlkZSBhbmQgcmUtc2hvdyBwaWNrZXJcblx0XHRcdFx0XHR0aGlzLnNob3coKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGRhdGVDaGFuZ2VkID0gZmFsc2UsXG5cdFx0XHRcdGRpciwgZGF5LCBtb250aCxcblx0XHRcdFx0bmV3RGF0ZSwgbmV3Vmlld0RhdGU7XG5cdFx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdFx0Y2FzZSAyNzogLy8gZXNjYXBlXG5cdFx0XHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDM3OiAvLyBsZWZ0XG5cdFx0XHRcdGNhc2UgMzk6IC8vIHJpZ2h0XG5cdFx0XHRcdFx0aWYgKCF0aGlzLm8ua2V5Ym9hcmROYXZpZ2F0aW9uKSBicmVhaztcblx0XHRcdFx0XHRkaXIgPSBlLmtleUNvZGUgPT0gMzcgPyAtMSA6IDE7XG5cdFx0XHRcdFx0aWYgKGUuY3RybEtleSl7XG5cdFx0XHRcdFx0XHRuZXdEYXRlID0gdGhpcy5tb3ZlWWVhcih0aGlzLmRhdGUsIGRpcik7XG5cdFx0XHRcdFx0XHRuZXdWaWV3RGF0ZSA9IHRoaXMubW92ZVllYXIodGhpcy52aWV3RGF0ZSwgZGlyKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGUuc2hpZnRLZXkpe1xuXHRcdFx0XHRcdFx0bmV3RGF0ZSA9IHRoaXMubW92ZU1vbnRoKHRoaXMuZGF0ZSwgZGlyKTtcblx0XHRcdFx0XHRcdG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlTW9udGgodGhpcy52aWV3RGF0ZSwgZGlyKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bmV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuZGF0ZSk7XG5cdFx0XHRcdFx0XHRuZXdEYXRlLnNldFVUQ0RhdGUodGhpcy5kYXRlLmdldFVUQ0RhdGUoKSArIGRpcik7XG5cdFx0XHRcdFx0XHRuZXdWaWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMudmlld0RhdGUpO1xuXHRcdFx0XHRcdFx0bmV3Vmlld0RhdGUuc2V0VVRDRGF0ZSh0aGlzLnZpZXdEYXRlLmdldFVUQ0RhdGUoKSArIGRpcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0aGlzLmRhdGVXaXRoaW5SYW5nZShuZXdEYXRlKSl7XG5cdFx0XHRcdFx0XHR0aGlzLmRhdGUgPSBuZXdEYXRlO1xuXHRcdFx0XHRcdFx0dGhpcy52aWV3RGF0ZSA9IG5ld1ZpZXdEYXRlO1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRWYWx1ZSgpO1xuXHRcdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdGRhdGVDaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMzg6IC8vIHVwXG5cdFx0XHRcdGNhc2UgNDA6IC8vIGRvd25cblx0XHRcdFx0XHRpZiAoIXRoaXMuby5rZXlib2FyZE5hdmlnYXRpb24pIGJyZWFrO1xuXHRcdFx0XHRcdGRpciA9IGUua2V5Q29kZSA9PSAzOCA/IC0xIDogMTtcblx0XHRcdFx0XHRpZiAoZS5jdHJsS2V5KXtcblx0XHRcdFx0XHRcdG5ld0RhdGUgPSB0aGlzLm1vdmVZZWFyKHRoaXMuZGF0ZSwgZGlyKTtcblx0XHRcdFx0XHRcdG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlWWVhcih0aGlzLnZpZXdEYXRlLCBkaXIpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZS5zaGlmdEtleSl7XG5cdFx0XHRcdFx0XHRuZXdEYXRlID0gdGhpcy5tb3ZlTW9udGgodGhpcy5kYXRlLCBkaXIpO1xuXHRcdFx0XHRcdFx0bmV3Vmlld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLnZpZXdEYXRlLCBkaXIpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRuZXdEYXRlID0gbmV3IERhdGUodGhpcy5kYXRlKTtcblx0XHRcdFx0XHRcdG5ld0RhdGUuc2V0VVRDRGF0ZSh0aGlzLmRhdGUuZ2V0VVRDRGF0ZSgpICsgZGlyICogNyk7XG5cdFx0XHRcdFx0XHRuZXdWaWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMudmlld0RhdGUpO1xuXHRcdFx0XHRcdFx0bmV3Vmlld0RhdGUuc2V0VVRDRGF0ZSh0aGlzLnZpZXdEYXRlLmdldFVUQ0RhdGUoKSArIGRpciAqIDcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5kYXRlV2l0aGluUmFuZ2UobmV3RGF0ZSkpe1xuXHRcdFx0XHRcdFx0dGhpcy5kYXRlID0gbmV3RGF0ZTtcblx0XHRcdFx0XHRcdHRoaXMudmlld0RhdGUgPSBuZXdWaWV3RGF0ZTtcblx0XHRcdFx0XHRcdHRoaXMuc2V0VmFsdWUoKTtcblx0XHRcdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRkYXRlQ2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDEzOiAvLyBlbnRlclxuXHRcdFx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSA5OiAvLyB0YWJcblx0XHRcdFx0XHR0aGlzLmhpZGUoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmIChkYXRlQ2hhbmdlZCl7XG5cdFx0XHRcdHRoaXMuX3RyaWdnZXIoJ2NoYW5nZURhdGUnKTtcblx0XHRcdFx0dmFyIGVsZW1lbnQ7XG5cdFx0XHRcdGlmICh0aGlzLmlzSW5wdXQpIHtcblx0XHRcdFx0XHRlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuY29tcG9uZW50KXtcblx0XHRcdFx0XHRlbGVtZW50ID0gdGhpcy5lbGVtZW50LmZpbmQoJ2lucHV0Jyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGVsZW1lbnQpIHtcblx0XHRcdFx0XHRlbGVtZW50LmNoYW5nZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNob3dNb2RlOiBmdW5jdGlvbihkaXIpIHtcblx0XHRcdGlmIChkaXIpIHtcblx0XHRcdFx0dGhpcy52aWV3TW9kZSA9IE1hdGgubWF4KHRoaXMuby5taW5WaWV3TW9kZSwgTWF0aC5taW4oMiwgdGhpcy52aWV3TW9kZSArIGRpcikpO1xuXHRcdFx0fVxuXHRcdFx0Lypcblx0XHRcdFx0dml0YWxldHM6IGZpeGluZyBidWcgb2YgdmVyeSBzcGVjaWFsIGNvbmRpdGlvbnM6XG5cdFx0XHRcdGpxdWVyeSAxLjcuMSArIHdlYmtpdCArIHNob3cgaW5saW5lIGRhdGVwaWNrZXIgaW4gYm9vdHN0cmFwIHBvcG92ZXIuXG5cdFx0XHRcdE1ldGhvZCBzaG93KCkgZG9lcyBub3Qgc2V0IGRpc3BsYXkgY3NzIGNvcnJlY3RseSBhbmQgZGF0ZXBpY2tlciBpcyBub3Qgc2hvd24uXG5cdFx0XHRcdENoYW5nZWQgdG8gLmNzcygnZGlzcGxheScsICdibG9jaycpIHNvbHZlIHRoZSBwcm9ibGVtLlxuXHRcdFx0XHRTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZpdGFsZXRzL3gtZWRpdGFibGUvaXNzdWVzLzM3XG5cblx0XHRcdFx0SW4ganF1ZXJ5IDEuNy4yKyBldmVyeXRoaW5nIHdvcmtzIGZpbmUuXG5cdFx0XHQqL1xuXHRcdFx0Ly90aGlzLnBpY2tlci5maW5kKCc+ZGl2JykuaGlkZSgpLmZpbHRlcignLmRhdGVwaWNrZXItJytEUEdsb2JhbC5tb2Rlc1t0aGlzLnZpZXdNb2RlXS5jbHNOYW1lKS5zaG93KCk7XG5cdFx0XHR0aGlzLnBpY2tlci5maW5kKCc+ZGl2JykuaGlkZSgpLmZpbHRlcignLmRhdGVwaWNrZXItJytEUEdsb2JhbC5tb2Rlc1t0aGlzLnZpZXdNb2RlXS5jbHNOYW1lKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcblx0XHRcdHRoaXMudXBkYXRlTmF2QXJyb3dzKCk7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBEYXRlUmFuZ2VQaWNrZXIgPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKXtcblx0XHR0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuXHRcdHRoaXMuaW5wdXRzID0gJC5tYXAob3B0aW9ucy5pbnB1dHMsIGZ1bmN0aW9uKGkpeyByZXR1cm4gaS5qcXVlcnkgPyBpWzBdIDogaTsgfSk7XG5cdFx0ZGVsZXRlIG9wdGlvbnMuaW5wdXRzO1xuXG5cdFx0JCh0aGlzLmlucHV0cylcblx0XHRcdC5kYXRlcGlja2VyKG9wdGlvbnMpXG5cdFx0XHQuYmluZCgnY2hhbmdlRGF0ZScsICQucHJveHkodGhpcy5kYXRlVXBkYXRlZCwgdGhpcykpO1xuXG5cdFx0dGhpcy5waWNrZXJzID0gJC5tYXAodGhpcy5pbnB1dHMsIGZ1bmN0aW9uKGkpeyByZXR1cm4gJChpKS5kYXRhKCdkYXRlcGlja2VyJyk7IH0pO1xuXHRcdHRoaXMudXBkYXRlRGF0ZXMoKTtcblx0fTtcblx0RGF0ZVJhbmdlUGlja2VyLnByb3RvdHlwZSA9IHtcblx0XHR1cGRhdGVEYXRlczogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuZGF0ZXMgPSAkLm1hcCh0aGlzLnBpY2tlcnMsIGZ1bmN0aW9uKGkpeyByZXR1cm4gaS5kYXRlOyB9KTtcblx0XHRcdHRoaXMudXBkYXRlUmFuZ2VzKCk7XG5cdFx0fSxcblx0XHR1cGRhdGVSYW5nZXM6IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgcmFuZ2UgPSAkLm1hcCh0aGlzLmRhdGVzLCBmdW5jdGlvbihkKXsgcmV0dXJuIGQudmFsdWVPZigpOyB9KTtcblx0XHRcdCQuZWFjaCh0aGlzLnBpY2tlcnMsIGZ1bmN0aW9uKGksIHApe1xuXHRcdFx0XHRwLnNldFJhbmdlKHJhbmdlKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0ZGF0ZVVwZGF0ZWQ6IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIGRwID0gJChlLnRhcmdldCkuZGF0YSgnZGF0ZXBpY2tlcicpLFxuXHRcdFx0XHRuZXdfZGF0ZSA9IGRwLmdldFVUQ0RhdGUoKSxcblx0XHRcdFx0aSA9ICQuaW5BcnJheShlLnRhcmdldCwgdGhpcy5pbnB1dHMpLFxuXHRcdFx0XHRsID0gdGhpcy5pbnB1dHMubGVuZ3RoO1xuXHRcdFx0aWYgKGkgPT0gLTEpIHJldHVybjtcblxuXHRcdFx0aWYgKG5ld19kYXRlIDwgdGhpcy5kYXRlc1tpXSl7XG5cdFx0XHRcdC8vIERhdGUgYmVpbmcgbW92ZWQgZWFybGllci9sZWZ0XG5cdFx0XHRcdHdoaWxlIChpPj0wICYmIG5ld19kYXRlIDwgdGhpcy5kYXRlc1tpXSl7XG5cdFx0XHRcdFx0dGhpcy5waWNrZXJzW2ktLV0uc2V0VVRDRGF0ZShuZXdfZGF0ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKG5ld19kYXRlID4gdGhpcy5kYXRlc1tpXSl7XG5cdFx0XHRcdC8vIERhdGUgYmVpbmcgbW92ZWQgbGF0ZXIvcmlnaHRcblx0XHRcdFx0d2hpbGUgKGk8bCAmJiBuZXdfZGF0ZSA+IHRoaXMuZGF0ZXNbaV0pe1xuXHRcdFx0XHRcdHRoaXMucGlja2Vyc1tpKytdLnNldFVUQ0RhdGUobmV3X2RhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnVwZGF0ZURhdGVzKCk7XG5cdFx0fSxcblx0XHRyZW1vdmU6IGZ1bmN0aW9uKCl7XG5cdFx0XHQkLm1hcCh0aGlzLnBpY2tlcnMsIGZ1bmN0aW9uKHApeyBwLnJlbW92ZSgpOyB9KTtcblx0XHRcdGRlbGV0ZSB0aGlzLmVsZW1lbnQuZGF0YSgpLmRhdGVwaWNrZXI7XG5cdFx0fVxuXHR9O1xuXG5cdGZ1bmN0aW9uIG9wdHNfZnJvbV9lbChlbCwgcHJlZml4KXtcblx0XHQvLyBEZXJpdmUgb3B0aW9ucyBmcm9tIGVsZW1lbnQgZGF0YS1hdHRyc1xuXHRcdHZhciBkYXRhID0gJChlbCkuZGF0YSgpLFxuXHRcdFx0b3V0ID0ge30sIGlua2V5LFxuXHRcdFx0cmVwbGFjZSA9IG5ldyBSZWdFeHAoJ14nICsgcHJlZml4LnRvTG93ZXJDYXNlKCkgKyAnKFtBLVpdKScpLFxuXHRcdFx0cHJlZml4ID0gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXgudG9Mb3dlckNhc2UoKSk7XG5cdFx0Zm9yICh2YXIga2V5IGluIGRhdGEpXG5cdFx0XHRpZiAocHJlZml4LnRlc3Qoa2V5KSl7XG5cdFx0XHRcdGlua2V5ID0ga2V5LnJlcGxhY2UocmVwbGFjZSwgZnVuY3Rpb24oXyxhKXsgcmV0dXJuIGEudG9Mb3dlckNhc2UoKTsgfSk7XG5cdFx0XHRcdG91dFtpbmtleV0gPSBkYXRhW2tleV07XG5cdFx0XHR9XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdGZ1bmN0aW9uIG9wdHNfZnJvbV9sb2NhbGUobGFuZyl7XG5cdFx0Ly8gRGVyaXZlIG9wdGlvbnMgZnJvbSBsb2NhbGUgcGx1Z2luc1xuXHRcdHZhciBvdXQgPSB7fTtcblx0XHQvLyBDaGVjayBpZiBcImRlLURFXCIgc3R5bGUgZGF0ZSBpcyBhdmFpbGFibGUsIGlmIG5vdCBsYW5ndWFnZSBzaG91bGRcblx0XHQvLyBmYWxsYmFjayB0byAyIGxldHRlciBjb2RlIGVnIFwiZGVcIlxuXHRcdGlmICghZGF0ZXNbbGFuZ10pIHtcblx0XHRcdGxhbmcgPSBsYW5nLnNwbGl0KCctJylbMF1cblx0XHRcdGlmICghZGF0ZXNbbGFuZ10pXG5cdFx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyIGQgPSBkYXRlc1tsYW5nXTtcblx0XHQkLmVhY2gobG9jYWxlX29wdHMsIGZ1bmN0aW9uKGksayl7XG5cdFx0XHRpZiAoayBpbiBkKVxuXHRcdFx0XHRvdXRba10gPSBkW2tdO1xuXHRcdH0pO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHR2YXIgb2xkID0gJC5mbi5kYXRlcGlja2VyO1xuXHR2YXIgZGF0ZXBpY2tlciA9ICQuZm4uZGF0ZXBpY2tlciA9IGZ1bmN0aW9uICggb3B0aW9uICkge1xuXHRcdHZhciBhcmdzID0gQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcblx0XHRhcmdzLnNoaWZ0KCk7XG5cdFx0dmFyIGludGVybmFsX3JldHVybixcblx0XHRcdHRoaXNfcmV0dXJuO1xuXHRcdHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgJHRoaXMgPSAkKHRoaXMpLFxuXHRcdFx0XHRkYXRhID0gJHRoaXMuZGF0YSgnZGF0ZXBpY2tlcicpLFxuXHRcdFx0XHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb247XG5cdFx0XHRpZiAoIWRhdGEpIHtcblx0XHRcdFx0dmFyIGVsb3B0cyA9IG9wdHNfZnJvbV9lbCh0aGlzLCAnZGF0ZScpLFxuXHRcdFx0XHRcdC8vIFByZWxpbWluYXJ5IG90aW9uc1xuXHRcdFx0XHRcdHhvcHRzID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBlbG9wdHMsIG9wdGlvbnMpLFxuXHRcdFx0XHRcdGxvY29wdHMgPSBvcHRzX2Zyb21fbG9jYWxlKHhvcHRzLmxhbmd1YWdlKSxcblx0XHRcdFx0XHQvLyBPcHRpb25zIHByaW9yaXR5OiBqcyBhcmdzLCBkYXRhLWF0dHJzLCBsb2NhbGVzLCBkZWZhdWx0c1xuXHRcdFx0XHRcdG9wdHMgPSAkLmV4dGVuZCh7fSwgZGVmYXVsdHMsIGxvY29wdHMsIGVsb3B0cywgb3B0aW9ucyk7XG5cdFx0XHRcdGlmICgkdGhpcy5pcygnLmlucHV0LWRhdGVyYW5nZScpIHx8IG9wdHMuaW5wdXRzKXtcblx0XHRcdFx0XHR2YXIgcm9wdHMgPSB7XG5cdFx0XHRcdFx0XHRpbnB1dHM6IG9wdHMuaW5wdXRzIHx8ICR0aGlzLmZpbmQoJ2lucHV0JykudG9BcnJheSgpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHQkdGhpcy5kYXRhKCdkYXRlcGlja2VyJywgKGRhdGEgPSBuZXcgRGF0ZVJhbmdlUGlja2VyKHRoaXMsICQuZXh0ZW5kKG9wdHMsIHJvcHRzKSkpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNle1xuXHRcdFx0XHRcdCR0aGlzLmRhdGEoJ2RhdGVwaWNrZXInLCAoZGF0YSA9IG5ldyBEYXRlcGlja2VyKHRoaXMsIG9wdHMpKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnICYmIHR5cGVvZiBkYXRhW29wdGlvbl0gPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRpbnRlcm5hbF9yZXR1cm4gPSBkYXRhW29wdGlvbl0uYXBwbHkoZGF0YSwgYXJncyk7XG5cdFx0XHRcdGlmIChpbnRlcm5hbF9yZXR1cm4gIT09IHVuZGVmaW5lZClcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0aWYgKGludGVybmFsX3JldHVybiAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0cmV0dXJuIGludGVybmFsX3JldHVybjtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHR2YXIgZGVmYXVsdHMgPSAkLmZuLmRhdGVwaWNrZXIuZGVmYXVsdHMgPSB7XG5cdFx0YXV0b2Nsb3NlOiBmYWxzZSxcblx0XHRiZWZvcmVTaG93RGF5OiAkLm5vb3AsXG5cdFx0Y2FsZW5kYXJXZWVrczogZmFsc2UsXG5cdFx0Y2xlYXJCdG46IGZhbHNlLFxuXHRcdGRheXNPZldlZWtEaXNhYmxlZDogW10sXG5cdFx0ZW5kRGF0ZTogSW5maW5pdHksXG5cdFx0Zm9yY2VQYXJzZTogdHJ1ZSxcblx0XHRmb3JtYXQ6ICdtbS9kZC95eXl5Jyxcblx0XHRrZXlib2FyZE5hdmlnYXRpb246IHRydWUsXG5cdFx0bGFuZ3VhZ2U6ICdlbicsXG5cdFx0bWluVmlld01vZGU6IDAsXG5cdFx0cnRsOiBmYWxzZSxcblx0XHRzdGFydERhdGU6IC1JbmZpbml0eSxcblx0XHRzdGFydFZpZXc6IDAsXG5cdFx0dG9kYXlCdG46IGZhbHNlLFxuXHRcdHRvZGF5SGlnaGxpZ2h0OiBmYWxzZSxcblx0XHR3ZWVrU3RhcnQ6IDBcblx0fTtcblx0dmFyIGxvY2FsZV9vcHRzID0gJC5mbi5kYXRlcGlja2VyLmxvY2FsZV9vcHRzID0gW1xuXHRcdCdmb3JtYXQnLFxuXHRcdCdydGwnLFxuXHRcdCd3ZWVrU3RhcnQnXG5cdF07XG5cdCQuZm4uZGF0ZXBpY2tlci5Db25zdHJ1Y3RvciA9IERhdGVwaWNrZXI7XG5cdHZhciBkYXRlcyA9ICQuZm4uZGF0ZXBpY2tlci5kYXRlcyA9IHtcblx0XHRlbjoge1xuXHRcdFx0ZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIiwgXCJTdW5kYXlcIl0sXG5cdFx0XHRkYXlzU2hvcnQ6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiLCBcIlN1blwiXSxcblx0XHRcdGRheXNNaW46IFtcIlN1XCIsIFwiTW9cIiwgXCJUdVwiLCBcIldlXCIsIFwiVGhcIiwgXCJGclwiLCBcIlNhXCIsIFwiU3VcIl0sXG5cdFx0XHRtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuXHRcdFx0bW9udGhzU2hvcnQ6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXSxcblx0XHRcdHRvZGF5OiBcIlRvZGF5XCIsXG5cdFx0XHRjbGVhcjogXCJDbGVhclwiXG5cdFx0fVxuXHR9O1xuXG5cdHZhciBEUEdsb2JhbCA9IHtcblx0XHRtb2RlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRjbHNOYW1lOiAnZGF5cycsXG5cdFx0XHRcdG5hdkZuYzogJ01vbnRoJyxcblx0XHRcdFx0bmF2U3RlcDogMVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2xzTmFtZTogJ21vbnRocycsXG5cdFx0XHRcdG5hdkZuYzogJ0Z1bGxZZWFyJyxcblx0XHRcdFx0bmF2U3RlcDogMVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2xzTmFtZTogJ3llYXJzJyxcblx0XHRcdFx0bmF2Rm5jOiAnRnVsbFllYXInLFxuXHRcdFx0XHRuYXZTdGVwOiAxMFxuXHRcdH1dLFxuXHRcdGlzTGVhcFllYXI6IGZ1bmN0aW9uICh5ZWFyKSB7XG5cdFx0XHRyZXR1cm4gKCgoeWVhciAlIDQgPT09IDApICYmICh5ZWFyICUgMTAwICE9PSAwKSkgfHwgKHllYXIgJSA0MDAgPT09IDApKTtcblx0XHR9LFxuXHRcdGdldERheXNJbk1vbnRoOiBmdW5jdGlvbiAoeWVhciwgbW9udGgpIHtcblx0XHRcdHJldHVybiBbMzEsIChEUEdsb2JhbC5pc0xlYXBZZWFyKHllYXIpID8gMjkgOiAyOCksIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXVttb250aF07XG5cdFx0fSxcblx0XHR2YWxpZFBhcnRzOiAvZGQ/fEREP3xtbT98TU0/fHl5KD86eXkpPy9nLFxuXHRcdG5vbnB1bmN0dWF0aW9uOiAvW14gLVxcLzotQFxcW1xcdTM0MDAtXFx1OWZmZi1gey1+XFx0XFxuXFxyXSsvZyxcblx0XHRwYXJzZUZvcm1hdDogZnVuY3Rpb24oZm9ybWF0KXtcblx0XHRcdC8vIElFIHRyZWF0cyBcXDAgYXMgYSBzdHJpbmcgZW5kIGluIGlucHV0cyAodHJ1bmNhdGluZyB0aGUgdmFsdWUpLFxuXHRcdFx0Ly8gc28gaXQncyBhIGJhZCBmb3JtYXQgZGVsaW1pdGVyLCBhbnl3YXlcblx0XHRcdHZhciBzZXBhcmF0b3JzID0gZm9ybWF0LnJlcGxhY2UodGhpcy52YWxpZFBhcnRzLCAnXFwwJykuc3BsaXQoJ1xcMCcpLFxuXHRcdFx0XHRwYXJ0cyA9IGZvcm1hdC5tYXRjaCh0aGlzLnZhbGlkUGFydHMpO1xuXHRcdFx0aWYgKCFzZXBhcmF0b3JzIHx8ICFzZXBhcmF0b3JzLmxlbmd0aCB8fCAhcGFydHMgfHwgcGFydHMubGVuZ3RoID09PSAwKXtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBkYXRlIGZvcm1hdC5cIik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4ge3NlcGFyYXRvcnM6IHNlcGFyYXRvcnMsIHBhcnRzOiBwYXJ0c307XG5cdFx0fSxcblx0XHRwYXJzZURhdGU6IGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCwgbGFuZ3VhZ2UpIHtcblx0XHRcdGlmIChkYXRlIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIGRhdGU7XG5cdFx0XHRpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ3N0cmluZycpXG5cdFx0XHRcdGZvcm1hdCA9IERQR2xvYmFsLnBhcnNlRm9ybWF0KGZvcm1hdCk7XG5cdFx0XHRpZiAoL15bXFwtK11cXGQrW2Rtd3ldKFtcXHMsXStbXFwtK11cXGQrW2Rtd3ldKSokLy50ZXN0KGRhdGUpKSB7XG5cdFx0XHRcdHZhciBwYXJ0X3JlID0gLyhbXFwtK11cXGQrKShbZG13eV0pLyxcblx0XHRcdFx0XHRwYXJ0cyA9IGRhdGUubWF0Y2goLyhbXFwtK11cXGQrKShbZG13eV0pL2cpLFxuXHRcdFx0XHRcdHBhcnQsIGRpcjtcblx0XHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdGZvciAodmFyIGk9MDsgaTxwYXJ0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHBhcnQgPSBwYXJ0X3JlLmV4ZWMocGFydHNbaV0pO1xuXHRcdFx0XHRcdGRpciA9IHBhcnNlSW50KHBhcnRbMV0pO1xuXHRcdFx0XHRcdHN3aXRjaChwYXJ0WzJdKXtcblx0XHRcdFx0XHRcdGNhc2UgJ2QnOlxuXHRcdFx0XHRcdFx0XHRkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ20nOlxuXHRcdFx0XHRcdFx0XHRkYXRlID0gRGF0ZXBpY2tlci5wcm90b3R5cGUubW92ZU1vbnRoLmNhbGwoRGF0ZXBpY2tlci5wcm90b3R5cGUsIGRhdGUsIGRpcik7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAndyc6XG5cdFx0XHRcdFx0XHRcdGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpciAqIDcpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ3knOlxuXHRcdFx0XHRcdFx0XHRkYXRlID0gRGF0ZXBpY2tlci5wcm90b3R5cGUubW92ZVllYXIuY2FsbChEYXRlcGlja2VyLnByb3RvdHlwZSwgZGF0ZSwgZGlyKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBVVENEYXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSwgZGF0ZS5nZXRVVENNb250aCgpLCBkYXRlLmdldFVUQ0RhdGUoKSwgMCwgMCwgMCk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcGFydHMgPSBkYXRlICYmIGRhdGUubWF0Y2godGhpcy5ub25wdW5jdHVhdGlvbikgfHwgW10sXG5cdFx0XHRcdGRhdGUgPSBuZXcgRGF0ZSgpLFxuXHRcdFx0XHRwYXJzZWQgPSB7fSxcblx0XHRcdFx0c2V0dGVyc19vcmRlciA9IFsneXl5eScsICd5eScsICdNJywgJ01NJywgJ20nLCAnbW0nLCAnZCcsICdkZCddLFxuXHRcdFx0XHRzZXR0ZXJzX21hcCA9IHtcblx0XHRcdFx0XHR5eXl5OiBmdW5jdGlvbihkLHYpeyByZXR1cm4gZC5zZXRVVENGdWxsWWVhcih2KTsgfSxcblx0XHRcdFx0XHR5eTogZnVuY3Rpb24oZCx2KXsgcmV0dXJuIGQuc2V0VVRDRnVsbFllYXIoMjAwMCt2KTsgfSxcblx0XHRcdFx0XHRtOiBmdW5jdGlvbihkLHYpe1xuXHRcdFx0XHRcdFx0diAtPSAxO1xuXHRcdFx0XHRcdFx0d2hpbGUgKHY8MCkgdiArPSAxMjtcblx0XHRcdFx0XHRcdHYgJT0gMTI7XG5cdFx0XHRcdFx0XHRkLnNldFVUQ01vbnRoKHYpO1xuXHRcdFx0XHRcdFx0d2hpbGUgKGQuZ2V0VVRDTW9udGgoKSAhPSB2KVxuXHRcdFx0XHRcdFx0XHRkLnNldFVUQ0RhdGUoZC5nZXRVVENEYXRlKCktMSk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZDtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGQ6IGZ1bmN0aW9uKGQsdil7IHJldHVybiBkLnNldFVUQ0RhdGUodik7IH1cblx0XHRcdFx0fSxcblx0XHRcdFx0dmFsLCBmaWx0ZXJlZCwgcGFydDtcblx0XHRcdHNldHRlcnNfbWFwWydNJ10gPSBzZXR0ZXJzX21hcFsnTU0nXSA9IHNldHRlcnNfbWFwWydtbSddID0gc2V0dGVyc19tYXBbJ20nXTtcblx0XHRcdHNldHRlcnNfbWFwWydkZCddID0gc2V0dGVyc19tYXBbJ2QnXTtcblx0XHRcdGRhdGUgPSBVVENEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgMCwgMCwgMCk7XG5cdFx0XHR2YXIgZnBhcnRzID0gZm9ybWF0LnBhcnRzLnNsaWNlKCk7XG5cdFx0XHQvLyBSZW1vdmUgbm9vcCBwYXJ0c1xuXHRcdFx0aWYgKHBhcnRzLmxlbmd0aCAhPSBmcGFydHMubGVuZ3RoKSB7XG5cdFx0XHRcdGZwYXJ0cyA9ICQoZnBhcnRzKS5maWx0ZXIoZnVuY3Rpb24oaSxwKXtcblx0XHRcdFx0XHRyZXR1cm4gJC5pbkFycmF5KHAsIHNldHRlcnNfb3JkZXIpICE9PSAtMTtcblx0XHRcdFx0fSkudG9BcnJheSgpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gUHJvY2VzcyByZW1haW5kZXJcblx0XHRcdGlmIChwYXJ0cy5sZW5ndGggPT0gZnBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHRmb3IgKHZhciBpPTAsIGNudCA9IGZwYXJ0cy5sZW5ndGg7IGkgPCBjbnQ7IGkrKykge1xuXHRcdFx0XHRcdHZhbCA9IHBhcnNlSW50KHBhcnRzW2ldLCAxMCk7XG5cdFx0XHRcdFx0cGFydCA9IGZwYXJ0c1tpXTtcblx0XHRcdFx0XHRpZiAoaXNOYU4odmFsKSkge1xuXHRcdFx0XHRcdFx0c3dpdGNoKHBhcnQpIHtcblx0XHRcdFx0XHRcdFx0Y2FzZSAnTU0nOlxuXHRcdFx0XHRcdFx0XHRcdGZpbHRlcmVkID0gJChkYXRlc1tsYW5ndWFnZV0ubW9udGhzKS5maWx0ZXIoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBtID0gdGhpcy5zbGljZSgwLCBwYXJ0c1tpXS5sZW5ndGgpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwID0gcGFydHNbaV0uc2xpY2UoMCwgbS5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG0gPT0gcDtcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHR2YWwgPSAkLmluQXJyYXkoZmlsdGVyZWRbMF0sIGRhdGVzW2xhbmd1YWdlXS5tb250aHMpICsgMTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0Y2FzZSAnTSc6XG5cdFx0XHRcdFx0XHRcdFx0ZmlsdGVyZWQgPSAkKGRhdGVzW2xhbmd1YWdlXS5tb250aHNTaG9ydCkuZmlsdGVyKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgbSA9IHRoaXMuc2xpY2UoMCwgcGFydHNbaV0ubGVuZ3RoKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0cCA9IHBhcnRzW2ldLnNsaWNlKDAsIG0ubGVuZ3RoKTtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBtID09IHA7XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFsID0gJC5pbkFycmF5KGZpbHRlcmVkWzBdLCBkYXRlc1tsYW5ndWFnZV0ubW9udGhzU2hvcnQpICsgMTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cGFyc2VkW3BhcnRdID0gdmFsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAodmFyIGk9MCwgczsgaTxzZXR0ZXJzX29yZGVyLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0XHRzID0gc2V0dGVyc19vcmRlcltpXTtcblx0XHRcdFx0XHRpZiAocyBpbiBwYXJzZWQgJiYgIWlzTmFOKHBhcnNlZFtzXSkpXG5cdFx0XHRcdFx0XHRzZXR0ZXJzX21hcFtzXShkYXRlLCBwYXJzZWRbc10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZGF0ZTtcblx0XHR9LFxuXHRcdGZvcm1hdERhdGU6IGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCwgbGFuZ3VhZ2Upe1xuXHRcdFx0aWYgKHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnKVxuXHRcdFx0XHRmb3JtYXQgPSBEUEdsb2JhbC5wYXJzZUZvcm1hdChmb3JtYXQpO1xuXHRcdFx0dmFyIHZhbCA9IHtcblx0XHRcdFx0ZDogZGF0ZS5nZXRVVENEYXRlKCksXG5cdFx0XHRcdEQ6IGRhdGVzW2xhbmd1YWdlXS5kYXlzU2hvcnRbZGF0ZS5nZXRVVENEYXkoKV0sXG5cdFx0XHRcdEREOiBkYXRlc1tsYW5ndWFnZV0uZGF5c1tkYXRlLmdldFVUQ0RheSgpXSxcblx0XHRcdFx0bTogZGF0ZS5nZXRVVENNb250aCgpICsgMSxcblx0XHRcdFx0TTogZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRoc1Nob3J0W2RhdGUuZ2V0VVRDTW9udGgoKV0sXG5cdFx0XHRcdE1NOiBkYXRlc1tsYW5ndWFnZV0ubW9udGhzW2RhdGUuZ2V0VVRDTW9udGgoKV0sXG5cdFx0XHRcdHl5OiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXG5cdFx0XHRcdHl5eXk6IGRhdGUuZ2V0VVRDRnVsbFllYXIoKVxuXHRcdFx0fTtcblx0XHRcdHZhbC5kZCA9ICh2YWwuZCA8IDEwID8gJzAnIDogJycpICsgdmFsLmQ7XG5cdFx0XHR2YWwubW0gPSAodmFsLm0gPCAxMCA/ICcwJyA6ICcnKSArIHZhbC5tO1xuXHRcdFx0dmFyIGRhdGUgPSBbXSxcblx0XHRcdFx0c2VwcyA9ICQuZXh0ZW5kKFtdLCBmb3JtYXQuc2VwYXJhdG9ycyk7XG5cdFx0XHRmb3IgKHZhciBpPTAsIGNudCA9IGZvcm1hdC5wYXJ0cy5sZW5ndGg7IGkgPD0gY250OyBpKyspIHtcblx0XHRcdFx0aWYgKHNlcHMubGVuZ3RoKVxuXHRcdFx0XHRcdGRhdGUucHVzaChzZXBzLnNoaWZ0KCkpO1xuXHRcdFx0XHRkYXRlLnB1c2godmFsW2Zvcm1hdC5wYXJ0c1tpXV0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRhdGUuam9pbignJyk7XG5cdFx0fSxcblx0XHRoZWFkVGVtcGxhdGU6ICc8dGhlYWQ+Jytcblx0XHRcdFx0XHRcdFx0Jzx0cj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8dGggY2xhc3M9XCJwcmV2XCI+PGkgY2xhc3M9XCJpY29uLWFycm93LWxlZnRcIi8+PC90aD4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8dGggY29sc3Bhbj1cIjVcIiBjbGFzcz1cImRhdGVwaWNrZXItc3dpdGNoXCI+PC90aD4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8dGggY2xhc3M9XCJuZXh0XCI+PGkgY2xhc3M9XCJpY29uLWFycm93LXJpZ2h0XCIvPjwvdGg+Jytcblx0XHRcdFx0XHRcdFx0JzwvdHI+Jytcblx0XHRcdFx0XHRcdCc8L3RoZWFkPicsXG5cdFx0Y29udFRlbXBsYXRlOiAnPHRib2R5Pjx0cj48dGQgY29sc3Bhbj1cIjdcIj48L3RkPjwvdHI+PC90Ym9keT4nLFxuXHRcdGZvb3RUZW1wbGF0ZTogJzx0Zm9vdD48dHI+PHRoIGNvbHNwYW49XCI3XCIgY2xhc3M9XCJ0b2RheVwiPjwvdGg+PC90cj48dHI+PHRoIGNvbHNwYW49XCI3XCIgY2xhc3M9XCJjbGVhclwiPjwvdGg+PC90cj48L3Rmb290Pidcblx0fTtcblx0RFBHbG9iYWwudGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXJcIj4nK1xuXHRcdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItZGF5c1wiPicrXG5cdFx0XHRcdFx0XHRcdFx0Jzx0YWJsZSBjbGFzcz1cIiB0YWJsZS1jb25kZW5zZWRcIj4nK1xuXHRcdFx0XHRcdFx0XHRcdFx0RFBHbG9iYWwuaGVhZFRlbXBsYXRlK1xuXHRcdFx0XHRcdFx0XHRcdFx0Jzx0Ym9keT48L3Rib2R5PicrXG5cdFx0XHRcdFx0XHRcdFx0XHREUEdsb2JhbC5mb290VGVtcGxhdGUrXG5cdFx0XHRcdFx0XHRcdFx0JzwvdGFibGU+Jytcblx0XHRcdFx0XHRcdFx0JzwvZGl2PicrXG5cdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci1tb250aHNcIj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8dGFibGUgY2xhc3M9XCJ0YWJsZS1jb25kZW5zZWRcIj4nK1xuXHRcdFx0XHRcdFx0XHRcdFx0RFBHbG9iYWwuaGVhZFRlbXBsYXRlK1xuXHRcdFx0XHRcdFx0XHRcdFx0RFBHbG9iYWwuY29udFRlbXBsYXRlK1xuXHRcdFx0XHRcdFx0XHRcdFx0RFBHbG9iYWwuZm9vdFRlbXBsYXRlK1xuXHRcdFx0XHRcdFx0XHRcdCc8L3RhYmxlPicrXG5cdFx0XHRcdFx0XHRcdCc8L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXIteWVhcnNcIj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8dGFibGUgY2xhc3M9XCJ0YWJsZS1jb25kZW5zZWRcIj4nK1xuXHRcdFx0XHRcdFx0XHRcdFx0RFBHbG9iYWwuaGVhZFRlbXBsYXRlK1xuXHRcdFx0XHRcdFx0XHRcdFx0RFBHbG9iYWwuY29udFRlbXBsYXRlK1xuXHRcdFx0XHRcdFx0XHRcdFx0RFBHbG9iYWwuZm9vdFRlbXBsYXRlK1xuXHRcdFx0XHRcdFx0XHRcdCc8L3RhYmxlPicrXG5cdFx0XHRcdFx0XHRcdCc8L2Rpdj4nK1xuXHRcdFx0XHRcdFx0JzwvZGl2Pic7XG5cblx0JC5mbi5kYXRlcGlja2VyLkRQR2xvYmFsID0gRFBHbG9iYWw7XG5cblxuXHQvKiBEQVRFUElDS0VSIE5PIENPTkZMSUNUXG5cdCogPT09PT09PT09PT09PT09PT09PSAqL1xuXG5cdCQuZm4uZGF0ZXBpY2tlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKXtcblx0XHQkLmZuLmRhdGVwaWNrZXIgPSBvbGQ7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblxuXHQvKiBEQVRFUElDS0VSIERBVEEtQVBJXG5cdCogPT09PT09PT09PT09PT09PT09ICovXG5cblx0JChkb2N1bWVudCkub24oXG5cdFx0J2ZvY3VzLmRhdGVwaWNrZXIuZGF0YS1hcGkgY2xpY2suZGF0ZXBpY2tlci5kYXRhLWFwaScsXG5cdFx0J1tkYXRhLXByb3ZpZGU9XCJkYXRlcGlja2VyXCJdJyxcblx0XHRmdW5jdGlvbihlKXtcblx0XHRcdHZhciAkdGhpcyA9ICQodGhpcyk7XG5cdFx0XHRpZiAoJHRoaXMuZGF0YSgnZGF0ZXBpY2tlcicpKSByZXR1cm47XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHQvLyBjb21wb25lbnQgY2xpY2sgcmVxdWlyZXMgdXMgdG8gZXhwbGljaXRseSBzaG93IGl0XG5cdFx0XHRkYXRlcGlja2VyLmNhbGwoJHRoaXMsICdzaG93Jyk7XG5cdFx0fVxuXHQpO1xuXHQkKGZ1bmN0aW9uKCl7XG5cdFx0Ly8kKCdbZGF0YS1wcm92aWRlPVwiZGF0ZXBpY2tlci1pbmxpbmVcIl0nKS5kYXRlcGlja2VyKCk7XG4gICAgICAgIC8vdml0OiBjaGFuZ2VkIHRvIHN1cHBvcnQgbm9Db25mbGljdCgpXG4gICAgICAgIGRhdGVwaWNrZXIuY2FsbCgkKCdbZGF0YS1wcm92aWRlPVwiZGF0ZXBpY2tlci1pbmxpbmVcIl0nKSk7XG5cdH0pO1xuXG59KCB3aW5kb3cualF1ZXJ5ICkpO1xuXG4vKipcbkJvb3RzdHJhcC1kYXRlcGlja2VyLiAgXG5EZXNjcmlwdGlvbiBhbmQgZXhhbXBsZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGVybmljb2RlL2Jvb3RzdHJhcC1kYXRlcGlja2VyLiAgXG5Gb3IgKippMThuKiogeW91IHNob3VsZCBpbmNsdWRlIGpzIGZpbGUgZnJvbSBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vZXRlcm5pY29kZS9ib290c3RyYXAtZGF0ZXBpY2tlci90cmVlL21hc3Rlci9qcy9sb2NhbGVzXG5hbmQgc2V0IGBsYW5ndWFnZWAgb3B0aW9uLiAgXG5TaW5jZSAxLjQuMCBkYXRlIGhhcyBkaWZmZXJlbnQgYXBwZWFyYW5jZSBpbiAqKnBvcHVwKiogYW5kICoqaW5saW5lKiogbW9kZXMuIFxuXG5AY2xhc3MgZGF0ZVxuQGV4dGVuZHMgYWJzdHJhY3RpbnB1dFxuQGZpbmFsXG5AZXhhbXBsZVxuPGEgaHJlZj1cIiNcIiBpZD1cImRvYlwiIGRhdGEtdHlwZT1cImRhdGVcIiBkYXRhLXBrPVwiMVwiIGRhdGEtdXJsPVwiL3Bvc3RcIiBkYXRhLXRpdGxlPVwiU2VsZWN0IGRhdGVcIj4xNS8wNS8xOTg0PC9hPlxuPHNjcmlwdD5cbiQoZnVuY3Rpb24oKXtcbiAgICAkKCcjZG9iJykuZWRpdGFibGUoe1xuICAgICAgICBmb3JtYXQ6ICd5eXl5LW1tLWRkJywgICAgXG4gICAgICAgIHZpZXdmb3JtYXQ6ICdkZC9tbS95eXl5JywgICAgXG4gICAgICAgIGRhdGVwaWNrZXI6IHtcbiAgICAgICAgICAgICAgICB3ZWVrU3RhcnQ6IDFcbiAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59KTtcbjwvc2NyaXB0PlxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcbiAgICAvL3N0b3JlIGJvb3RzdHJhcC1kYXRlcGlja2VyIGFzIGJkYXRlaWNrZXIgdG8gZXhjbHVkZSBjb25mbGljdCB3aXRoIGpRdWVyeSBVSSBvbmVcbiAgICAkLmZuLmJkYXRlcGlja2VyID0gJC5mbi5kYXRlcGlja2VyLm5vQ29uZmxpY3QoKTtcbiAgICBpZighJC5mbi5kYXRlcGlja2VyKSB7IC8vaWYgdGhlcmUgd2VyZSBubyBvdGhlciBkYXRlcGlja2Vycywga2VlcCBhbHNvIG9yaWdpbmFsIG5hbWVcbiAgICAgICAgJC5mbi5kYXRlcGlja2VyID0gJC5mbi5iZGF0ZXBpY2tlcjsgICAgXG4gICAgfSAgICBcbiAgICBcbiAgICB2YXIgRGF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgnZGF0ZScsIG9wdGlvbnMsIERhdGUuZGVmYXVsdHMpO1xuICAgICAgICB0aGlzLmluaXRQaWNrZXIob3B0aW9ucywgRGF0ZS5kZWZhdWx0cyk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KERhdGUsICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0KTsgICAgXG4gICAgXG4gICAgJC5leHRlbmQoRGF0ZS5wcm90b3R5cGUsIHtcbiAgICAgICAgaW5pdFBpY2tlcjogZnVuY3Rpb24ob3B0aW9ucywgZGVmYXVsdHMpIHtcbiAgICAgICAgICAgIC8vJ2Zvcm1hdCcgaXMgc2V0IGRpcmVjdGx5IGZyb20gc2V0dGluZ3Mgb3IgZGF0YS0qIGF0dHJpYnV0ZXNcblxuICAgICAgICAgICAgLy9ieSBkZWZhdWx0IHZpZXdmb3JtYXQgZXF1YWxzIHRvIGZvcm1hdFxuICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy52aWV3Zm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnZpZXdmb3JtYXQgPSB0aGlzLm9wdGlvbnMuZm9ybWF0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3RyeSBwYXJzZSBkYXRlcGlja2VyIGNvbmZpZyBkZWZpbmVkIGFzIGpzb24gc3RyaW5nIGluIGRhdGEtZGF0ZXBpY2tlclxuICAgICAgICAgICAgb3B0aW9ucy5kYXRlcGlja2VyID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbihvcHRpb25zLmRhdGVwaWNrZXIsIHRydWUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL292ZXJyaWRpbmcgZGF0ZXBpY2tlciBjb25maWcgKGFzIGJ5IGRlZmF1bHQgalF1ZXJ5IGV4dGVuZCgpIGlzIG5vdCByZWN1cnNpdmUpXG4gICAgICAgICAgICAvL3NpbmNlIDEuNCBkYXRlcGlja2VyIGludGVybmFsbHkgdXNlcyB2aWV3Zm9ybWF0IGluc3RlYWQgb2YgZm9ybWF0LiBGb3JtYXQgaXMgZm9yIHN1Ym1pdCBvbmx5XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGF0ZXBpY2tlciA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cy5kYXRlcGlja2VyLCBvcHRpb25zLmRhdGVwaWNrZXIsIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IHRoaXMub3B0aW9ucy52aWV3Zm9ybWF0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9sYW5ndWFnZVxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRhdGVwaWNrZXIubGFuZ3VhZ2UgPSB0aGlzLm9wdGlvbnMuZGF0ZXBpY2tlci5sYW5ndWFnZSB8fCAnZW4nOyBcblxuICAgICAgICAgICAgLy9zdG9yZSBEUGdsb2JhbFxuICAgICAgICAgICAgdGhpcy5kcGcgPSAkLmZuLmJkYXRlcGlja2VyLkRQR2xvYmFsOyBcblxuICAgICAgICAgICAgLy9zdG9yZSBwYXJzZWQgZm9ybWF0c1xuICAgICAgICAgICAgdGhpcy5wYXJzZWRGb3JtYXQgPSB0aGlzLmRwZy5wYXJzZUZvcm1hdCh0aGlzLm9wdGlvbnMuZm9ybWF0KTtcbiAgICAgICAgICAgIHRoaXMucGFyc2VkVmlld0Zvcm1hdCA9IHRoaXMuZHBnLnBhcnNlRm9ybWF0KHRoaXMub3B0aW9ucy52aWV3Zm9ybWF0KTsgICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQuYmRhdGVwaWNrZXIodGhpcy5vcHRpb25zLmRhdGVwaWNrZXIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL1wiY2xlYXJcIiBsaW5rXG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuY2xlYXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRjbGVhciA9ICQoJzxhIGhyZWY9XCIjXCI+PC9hPicpLmh0bWwodGhpcy5vcHRpb25zLmNsZWFyKS5jbGljaygkLnByb3h5KGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy4kdHBsLnBhcmVudCgpLmFwcGVuZCgkKCc8ZGl2IGNsYXNzPVwiZWRpdGFibGUtY2xlYXJcIj4nKS5hcHBlbmQodGhpcy4kY2xlYXIpKTsgIFxuICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHZhbHVlMmh0bWw6IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgICAgICAgIHZhciB0ZXh0ID0gdmFsdWUgPyB0aGlzLmRwZy5mb3JtYXREYXRlKHZhbHVlLCB0aGlzLnBhcnNlZFZpZXdGb3JtYXQsIHRoaXMub3B0aW9ucy5kYXRlcGlja2VyLmxhbmd1YWdlKSA6ICcnO1xuICAgICAgICAgICBEYXRlLnN1cGVyY2xhc3MudmFsdWUyaHRtbC5jYWxsKHRoaXMsIHRleHQsIGVsZW1lbnQpOyBcbiAgICAgICAgfSxcblxuICAgICAgICBodG1sMnZhbHVlOiBmdW5jdGlvbihodG1sKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZURhdGUoaHRtbCwgdGhpcy5wYXJzZWRWaWV3Rm9ybWF0KTtcbiAgICAgICAgfSwgICBcblxuICAgICAgICB2YWx1ZTJzdHI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPyB0aGlzLmRwZy5mb3JtYXREYXRlKHZhbHVlLCB0aGlzLnBhcnNlZEZvcm1hdCwgdGhpcy5vcHRpb25zLmRhdGVwaWNrZXIubGFuZ3VhZ2UpIDogJyc7XG4gICAgICAgIH0sIFxuXG4gICAgICAgIHN0cjJ2YWx1ZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZURhdGUoc3RyLCB0aGlzLnBhcnNlZEZvcm1hdCk7XG4gICAgICAgIH0sIFxuXG4gICAgICAgIHZhbHVlMnN1Ym1pdDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlMnN0cih2YWx1ZSk7XG4gICAgICAgIH0sICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICB2YWx1ZTJpbnB1dDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmJkYXRlcGlja2VyKCd1cGRhdGUnLCB2YWx1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5wdXQydmFsdWU6IGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRpbnB1dC5kYXRhKCdkYXRlcGlja2VyJykuZGF0ZTtcbiAgICAgICAgfSwgICAgICAgXG5cbiAgICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsZWFyOiAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5kYXRhKCdkYXRlcGlja2VyJykuZGF0ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy5zaG93YnV0dG9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LmNsb3Nlc3QoJ2Zvcm0nKS5zdWJtaXQoKTsgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXV0b3N1Ym1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5vbignbW91c2V1cCcsICcuZGF5JywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgaWYoJChlLmN1cnJlbnRUYXJnZXQpLmlzKCcub2xkJykgfHwgJChlLmN1cnJlbnRUYXJnZXQpLmlzKCcubmV3JykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgJGZvcm0gPSAkKHRoaXMpLmNsb3Nlc3QoJ2Zvcm0nKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkZm9ybS5zdWJtaXQoKTtcbiAgICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgIC8vY2hhbmdlZGF0ZSBpcyBub3Qgc3VpdGFibGUgYXMgaXQgdHJpZ2dlcmVkIHdoZW4gc2hvd2luZyBkYXRlcGlja2VyLiBzZWUgIzE0OVxuICAgICAgICAgICAvKlxuICAgICAgICAgICB0aGlzLiRpbnB1dC5vbignY2hhbmdlRGF0ZScsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgdmFyICRmb3JtID0gJCh0aGlzKS5jbG9zZXN0KCdmb3JtJyk7XG4gICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICRmb3JtLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgICovXG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICAvKlxuICAgICAgICBGb3IgaW5jb3JyZWN0IGRhdGUgYm9vdHN0cmFwLWRhdGVwaWNrZXIgcmV0dXJucyBjdXJyZW50IGRhdGUgdGhhdCBpcyBub3Qgc3VpdGFibGVcbiAgICAgICAgZm9yIGRhdGVmaWVsZC5cbiAgICAgICAgVGhpcyBmdW5jdGlvbiByZXR1cm5zIG51bGwgZm9yIGluY29ycmVjdCBkYXRlLiAgXG4gICAgICAgKi9cbiAgICAgICBwYXJzZURhdGU6IGZ1bmN0aW9uKHN0ciwgZm9ybWF0KSB7XG4gICAgICAgICAgIHZhciBkYXRlID0gbnVsbCwgZm9ybWF0dGVkQmFjaztcbiAgICAgICAgICAgaWYoc3RyKSB7XG4gICAgICAgICAgICAgICBkYXRlID0gdGhpcy5kcGcucGFyc2VEYXRlKHN0ciwgZm9ybWF0LCB0aGlzLm9wdGlvbnMuZGF0ZXBpY2tlci5sYW5ndWFnZSk7XG4gICAgICAgICAgICAgICBpZih0eXBlb2Ygc3RyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZEJhY2sgPSB0aGlzLmRwZy5mb3JtYXREYXRlKGRhdGUsIGZvcm1hdCwgdGhpcy5vcHRpb25zLmRhdGVwaWNrZXIubGFuZ3VhZ2UpO1xuICAgICAgICAgICAgICAgICAgIGlmKHN0ciAhPT0gZm9ybWF0dGVkQmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICBEYXRlLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICBAZGVmYXVsdCA8ZGl2PjwvZGl2PlxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgdHBsOic8ZGl2IGNsYXNzPVwiZWRpdGFibGUtZGF0ZSB3ZWxsXCI+PC9kaXY+JyxcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSBpbnB1dGNsYXNzIFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICBpbnB1dGNsYXNzOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgRm9ybWF0IHVzZWQgZm9yIHNlbmRpbmcgdmFsdWUgdG8gc2VydmVyLiBBbHNvIGFwcGxpZWQgd2hlbiBjb252ZXJ0aW5nIGRhdGUgZnJvbSA8Y29kZT5kYXRhLXZhbHVlPC9jb2RlPiBhdHRyaWJ1dGUuPGJyPlxuICAgICAgICBQb3NzaWJsZSB0b2tlbnMgYXJlOiA8Y29kZT5kLCBkZCwgbSwgbW0sIHl5LCB5eXl5PC9jb2RlPiAgXG5cbiAgICAgICAgQHByb3BlcnR5IGZvcm1hdCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IHl5eXktbW0tZGRcbiAgICAgICAgKiovXG4gICAgICAgIGZvcm1hdDoneXl5eS1tbS1kZCcsXG4gICAgICAgIC8qKlxuICAgICAgICBGb3JtYXQgdXNlZCBmb3IgZGlzcGxheWluZyBkYXRlLiBBbHNvIGFwcGxpZWQgd2hlbiBjb252ZXJ0aW5nIGRhdGUgZnJvbSBlbGVtZW50J3MgdGV4dCBvbiBpbml0LiAgIFxuICAgICAgICBJZiBub3Qgc3BlY2lmaWVkIGVxdWFscyB0byA8Y29kZT5mb3JtYXQ8L2NvZGU+XG5cbiAgICAgICAgQHByb3BlcnR5IHZpZXdmb3JtYXQgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICB2aWV3Zm9ybWF0OiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgQ29uZmlndXJhdGlvbiBvZiBkYXRlcGlja2VyLlxuICAgICAgICBGdWxsIGxpc3Qgb2Ygb3B0aW9uczogaHR0cDovL2Jvb3RzdHJhcC1kYXRlcGlja2VyLnJlYWR0aGVkb2NzLm9yZy9lbi9sYXRlc3Qvb3B0aW9ucy5odG1sXG5cbiAgICAgICAgQHByb3BlcnR5IGRhdGVwaWNrZXIgXG4gICAgICAgIEB0eXBlIG9iamVjdFxuICAgICAgICBAZGVmYXVsdCB7XG4gICAgICAgICAgICB3ZWVrU3RhcnQ6IDAsXG4gICAgICAgICAgICBzdGFydFZpZXc6IDAsXG4gICAgICAgICAgICBtaW5WaWV3TW9kZTogMCxcbiAgICAgICAgICAgIGF1dG9jbG9zZTogZmFsc2VcbiAgICAgICAgfVxuICAgICAgICAqKi9cbiAgICAgICAgZGF0ZXBpY2tlcjp7XG4gICAgICAgICAgICB3ZWVrU3RhcnQ6IDAsXG4gICAgICAgICAgICBzdGFydFZpZXc6IDAsXG4gICAgICAgICAgICBtaW5WaWV3TW9kZTogMCxcbiAgICAgICAgICAgIGF1dG9jbG9zZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgIFRleHQgc2hvd24gYXMgY2xlYXIgZGF0ZSBidXR0b24uIFxuICAgICAgICBJZiA8Y29kZT5mYWxzZTwvY29kZT4gY2xlYXIgYnV0dG9uIHdpbGwgbm90IGJlIHJlbmRlcmVkLlxuXG4gICAgICAgIEBwcm9wZXJ0eSBjbGVhciBcbiAgICAgICAgQHR5cGUgYm9vbGVhbnxzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJ3ggY2xlYXInXG4gICAgICAgICoqL1xuICAgICAgICBjbGVhcjogJyZ0aW1lczsgY2xlYXInXG4gICAgfSk7XG5cbiAgICAkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZSA9IERhdGU7XG5cbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKipcbkJvb3RzdHJhcCBkYXRlZmllbGQgaW5wdXQgLSBtb2RpZmljYXRpb24gZm9yIGlubGluZSBtb2RlLlxuU2hvd3Mgbm9ybWFsIDxpbnB1dCB0eXBlPVwidGV4dFwiPiBhbmQgYmluZHMgcG9wdXAgZGF0ZXBpY2tlci4gIFxuQXV0b21hdGljYWxseSBzaG93biBpbiBpbmxpbmUgbW9kZS5cblxuQGNsYXNzIGRhdGVmaWVsZFxuQGV4dGVuZHMgZGF0ZVxuXG5Ac2luY2UgMS40LjBcbioqL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIERhdGVGaWVsZCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgnZGF0ZWZpZWxkJywgb3B0aW9ucywgRGF0ZUZpZWxkLmRlZmF1bHRzKTtcbiAgICAgICAgdGhpcy5pbml0UGlja2VyKG9wdGlvbnMsIERhdGVGaWVsZC5kZWZhdWx0cyk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KERhdGVGaWVsZCwgJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGUpOyAgICBcbiAgICBcbiAgICAkLmV4dGVuZChEYXRlRmllbGQucHJvdG90eXBlLCB7XG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQgPSB0aGlzLiR0cGwuZmluZCgnaW5wdXQnKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cigncGxhY2Vob2xkZXInKTtcbiAgICBcbiAgICAgICAgICAgIC8vYm9vdHN0cmFwLWRhdGVwaWNrZXIgaXMgc2V0IGBiZGF0ZWlja2VyYCB0byBleGNsdWRlIGNvbmZsaWN0IHdpdGggalF1ZXJ5IFVJIG9uZS4gKGluIGRhdGUuanMpICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJHRwbC5iZGF0ZXBpY2tlcih0aGlzLm9wdGlvbnMuZGF0ZXBpY2tlcik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vbmVlZCB0byBkaXNhYmxlIG9yaWdpbmFsIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5vZmYoJ2ZvY3VzIGtleWRvd24nKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy91cGRhdGUgdmFsdWUgb2YgZGF0ZXBpY2tlclxuICAgICAgICAgICAgdGhpcy4kaW5wdXQua2V5dXAoJC5wcm94eShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgdGhpcy4kdHBsLnJlbW92ZURhdGEoJ2RhdGUnKTtcbiAgICAgICAgICAgICAgIHRoaXMuJHRwbC5iZGF0ZXBpY2tlcigndXBkYXRlJyk7XG4gICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfSwgICBcbiAgICAgICAgXG4gICAgICAgdmFsdWUyaW5wdXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHRoaXMuJGlucHV0LnZhbCh2YWx1ZSA/IHRoaXMuZHBnLmZvcm1hdERhdGUodmFsdWUsIHRoaXMucGFyc2VkVmlld0Zvcm1hdCwgdGhpcy5vcHRpb25zLmRhdGVwaWNrZXIubGFuZ3VhZ2UpIDogJycpO1xuICAgICAgICAgICB0aGlzLiR0cGwuYmRhdGVwaWNrZXIoJ3VwZGF0ZScpO1xuICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgIGlucHV0MnZhbHVlOiBmdW5jdGlvbigpIHsgXG4gICAgICAgICAgIHJldHVybiB0aGlzLmh0bWwydmFsdWUodGhpcy4kaW5wdXQudmFsKCkpO1xuICAgICAgIH0sICAgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAkLmZuLmVkaXRhYmxldHlwZXMudGV4dC5wcm90b3R5cGUuYWN0aXZhdGUuY2FsbCh0aGlzKTtcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIGF1dG9zdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgLy9yZXNldCBhdXRvc3VibWl0IHRvIGVtcHR5ICBcbiAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgRGF0ZUZpZWxkLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5kYXRlLmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgdHBsOic8ZGl2IGNsYXNzPVwiaW5wdXQtYXBwZW5kIGRhdGVcIj48aW5wdXQgdHlwZT1cInRleHRcIi8+PHNwYW4gY2xhc3M9XCJhZGQtb25cIj48aSBjbGFzcz1cImljb24tdGhcIj48L2k+PC9zcGFuPjwvZGl2PicsXG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgaW5wdXRjbGFzcyBcbiAgICAgICAgQGRlZmF1bHQgJ2lucHV0LXNtYWxsJ1xuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgaW5wdXRjbGFzczogJ2lucHV0LXNtYWxsJyxcbiAgICAgICAgXG4gICAgICAgIC8qIGRhdGVwaWNrZXIgY29uZmlnICovXG4gICAgICAgIGRhdGVwaWNrZXI6IHtcbiAgICAgICAgICAgIHdlZWtTdGFydDogMCxcbiAgICAgICAgICAgIHN0YXJ0VmlldzogMCxcbiAgICAgICAgICAgIG1pblZpZXdNb2RlOiAwLFxuICAgICAgICAgICAgYXV0b2Nsb3NlOiB0cnVlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZWZpZWxkID0gRGF0ZUZpZWxkO1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcbi8qKlxuQm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLiAgXG5CYXNlZCBvbiBbc21hbG90IGJvb3RzdHJhcC1kYXRldGltZXBpY2tlciBwbHVnaW5dKGh0dHBzOi8vZ2l0aHViLmNvbS9zbWFsb3QvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyKS4gXG5CZWZvcmUgdXNhZ2UgeW91IHNob3VsZCBtYW51YWxseSBpbmNsdWRlIGRlcGVuZGVudCBqcyBhbmQgY3NzOlxuXG4gICAgPGxpbmsgaHJlZj1cImNzcy9kYXRldGltZXBpY2tlci5jc3NcIiByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCI+PC9saW5rPiBcbiAgICA8c2NyaXB0IHNyYz1cImpzL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci5qc1wiPjwvc2NyaXB0PlxuXG5Gb3IgKippMThuKiogeW91IHNob3VsZCBpbmNsdWRlIGpzIGZpbGUgZnJvbSBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vc21hbG90L2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci90cmVlL21hc3Rlci9qcy9sb2NhbGVzXG5hbmQgc2V0IGBsYW5ndWFnZWAgb3B0aW9uLiAgXG5cbkBjbGFzcyBkYXRldGltZVxuQGV4dGVuZHMgYWJzdHJhY3RpbnB1dFxuQGZpbmFsXG5Ac2luY2UgMS40LjRcbkBleGFtcGxlXG48YSBocmVmPVwiI1wiIGlkPVwibGFzdF9zZWVuXCIgZGF0YS10eXBlPVwiZGF0ZXRpbWVcIiBkYXRhLXBrPVwiMVwiIGRhdGEtdXJsPVwiL3Bvc3RcIiB0aXRsZT1cIlNlbGVjdCBkYXRlICYgdGltZVwiPjE1LzAzLzIwMTMgMTI6NDU8L2E+XG48c2NyaXB0PlxuJChmdW5jdGlvbigpe1xuICAgICQoJyNsYXN0X3NlZW4nKS5lZGl0YWJsZSh7XG4gICAgICAgIGZvcm1hdDogJ3l5eXktbW0tZGQgaGg6aWknLCAgICBcbiAgICAgICAgdmlld2Zvcm1hdDogJ2RkL21tL3l5eXkgaGg6aWknLCAgICBcbiAgICAgICAgZGF0ZXRpbWVwaWNrZXI6IHtcbiAgICAgICAgICAgICAgICB3ZWVrU3RhcnQ6IDFcbiAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59KTtcbjwvc2NyaXB0PlxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBEYXRlVGltZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgnZGF0ZXRpbWUnLCBvcHRpb25zLCBEYXRlVGltZS5kZWZhdWx0cyk7XG4gICAgICAgIHRoaXMuaW5pdFBpY2tlcihvcHRpb25zLCBEYXRlVGltZS5kZWZhdWx0cyk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KERhdGVUaW1lLCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dCk7XG5cbiAgICAkLmV4dGVuZChEYXRlVGltZS5wcm90b3R5cGUsIHtcbiAgICAgICAgaW5pdFBpY2tlcjogZnVuY3Rpb24ob3B0aW9ucywgZGVmYXVsdHMpIHtcbiAgICAgICAgICAgIC8vJ2Zvcm1hdCcgaXMgc2V0IGRpcmVjdGx5IGZyb20gc2V0dGluZ3Mgb3IgZGF0YS0qIGF0dHJpYnV0ZXNcblxuICAgICAgICAgICAgLy9ieSBkZWZhdWx0IHZpZXdmb3JtYXQgZXF1YWxzIHRvIGZvcm1hdFxuICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy52aWV3Zm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnZpZXdmb3JtYXQgPSB0aGlzLm9wdGlvbnMuZm9ybWF0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3RyeSBwYXJzZSBkYXRldGltZXBpY2tlciBjb25maWcgZGVmaW5lZCBhcyBqc29uIHN0cmluZyBpbiBkYXRhLWRhdGV0aW1lcGlja2VyXG4gICAgICAgICAgICBvcHRpb25zLmRhdGV0aW1lcGlja2VyID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbihvcHRpb25zLmRhdGV0aW1lcGlja2VyLCB0cnVlKTtcblxuICAgICAgICAgICAgLy9vdmVycmlkaW5nIGRhdGV0aW1lcGlja2VyIGNvbmZpZyAoYXMgYnkgZGVmYXVsdCBqUXVlcnkgZXh0ZW5kKCkgaXMgbm90IHJlY3Vyc2l2ZSlcbiAgICAgICAgICAgIC8vc2luY2UgMS40IGRhdGV0aW1lcGlja2VyIGludGVybmFsbHkgdXNlcyB2aWV3Zm9ybWF0IGluc3RlYWQgb2YgZm9ybWF0LiBGb3JtYXQgaXMgZm9yIHN1Ym1pdCBvbmx5XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGF0ZXRpbWVwaWNrZXIgPSAkLmV4dGVuZCh7fSwgZGVmYXVsdHMuZGF0ZXRpbWVwaWNrZXIsIG9wdGlvbnMuZGF0ZXRpbWVwaWNrZXIsIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IHRoaXMub3B0aW9ucy52aWV3Zm9ybWF0XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy9sYW5ndWFnZVxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRhdGV0aW1lcGlja2VyLmxhbmd1YWdlID0gdGhpcy5vcHRpb25zLmRhdGV0aW1lcGlja2VyLmxhbmd1YWdlIHx8ICdlbic7IFxuXG4gICAgICAgICAgICAvL3N0b3JlIERQZ2xvYmFsXG4gICAgICAgICAgICB0aGlzLmRwZyA9ICQuZm4uZGF0ZXRpbWVwaWNrZXIuRFBHbG9iYWw7IFxuXG4gICAgICAgICAgICAvL3N0b3JlIHBhcnNlZCBmb3JtYXRzXG4gICAgICAgICAgICB0aGlzLnBhcnNlZEZvcm1hdCA9IHRoaXMuZHBnLnBhcnNlRm9ybWF0KHRoaXMub3B0aW9ucy5mb3JtYXQsIHRoaXMub3B0aW9ucy5mb3JtYXRUeXBlKTtcbiAgICAgICAgICAgIHRoaXMucGFyc2VkVmlld0Zvcm1hdCA9IHRoaXMuZHBnLnBhcnNlRm9ybWF0KHRoaXMub3B0aW9ucy52aWV3Zm9ybWF0LCB0aGlzLm9wdGlvbnMuZm9ybWF0VHlwZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5kYXRldGltZXBpY2tlcih0aGlzLm9wdGlvbnMuZGF0ZXRpbWVwaWNrZXIpO1xuXG4gICAgICAgICAgICAvL2FkanVzdCBjb250YWluZXIgcG9zaXRpb24gd2hlbiB2aWV3TW9kZSBjaGFuZ2VzXG4gICAgICAgICAgICAvL3NlZSBodHRwczovL2dpdGh1Yi5jb20vc21hbG90L2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci9wdWxsLzgwXG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5vbignY2hhbmdlTW9kZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZiA9ICQodGhpcykuY2xvc2VzdCgnZm9ybScpLnBhcmVudCgpO1xuICAgICAgICAgICAgICAgIC8vdGltZW91dCBoZXJlLCBvdGhlcndpc2UgY29udGFpbmVyIGNoYW5nZXMgcG9zaXRpb24gYmVmb3JlIGZvcm0gaGFzIG5ldyBzaXplXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBmLnRyaWdnZXJIYW5kbGVyKCdyZXNpemUnKTtcbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvL1wiY2xlYXJcIiBsaW5rXG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuY2xlYXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRjbGVhciA9ICQoJzxhIGhyZWY9XCIjXCI+PC9hPicpLmh0bWwodGhpcy5vcHRpb25zLmNsZWFyKS5jbGljaygkLnByb3h5KGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiR0cGwucGFyZW50KCkuYXBwZW5kKCQoJzxkaXYgY2xhc3M9XCJlZGl0YWJsZS1jbGVhclwiPicpLmFwcGVuZCh0aGlzLiRjbGVhcikpOyAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmFsdWUyaHRtbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vZm9ybWF0RGF0ZSB3b3JrcyB3aXRoIFVUQ0RhdGUhXG4gICAgICAgICAgICB2YXIgdGV4dCA9IHZhbHVlID8gdGhpcy5kcGcuZm9ybWF0RGF0ZSh0aGlzLnRvVVRDKHZhbHVlKSwgdGhpcy5wYXJzZWRWaWV3Rm9ybWF0LCB0aGlzLm9wdGlvbnMuZGF0ZXRpbWVwaWNrZXIubGFuZ3VhZ2UsIHRoaXMub3B0aW9ucy5mb3JtYXRUeXBlKSA6ICcnO1xuICAgICAgICAgICAgaWYoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIERhdGVUaW1lLnN1cGVyY2xhc3MudmFsdWUyaHRtbC5jYWxsKHRoaXMsIHRleHQsIGVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBodG1sMnZhbHVlOiBmdW5jdGlvbihodG1sKSB7XG4gICAgICAgICAgICAvL3BhcnNlRGF0ZSByZXR1cm4gdXRjIGRhdGUhXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnBhcnNlRGF0ZShodG1sLCB0aGlzLnBhcnNlZFZpZXdGb3JtYXQpOyBcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA/IHRoaXMuZnJvbVVUQyh2YWx1ZSkgOiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIHZhbHVlMnN0cjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIC8vZm9ybWF0RGF0ZSB3b3JrcyB3aXRoIFVUQ0RhdGUhXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPyB0aGlzLmRwZy5mb3JtYXREYXRlKHRoaXMudG9VVEModmFsdWUpLCB0aGlzLnBhcnNlZEZvcm1hdCwgdGhpcy5vcHRpb25zLmRhdGV0aW1lcGlja2VyLmxhbmd1YWdlLCB0aGlzLm9wdGlvbnMuZm9ybWF0VHlwZSkgOiAnJztcbiAgICAgICB9LFxuXG4gICAgICAgc3RyMnZhbHVlOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgLy9wYXJzZURhdGUgcmV0dXJuIHV0YyBkYXRlIVxuICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnBhcnNlRGF0ZShzdHIsIHRoaXMucGFyc2VkRm9ybWF0KTtcbiAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gdGhpcy5mcm9tVVRDKHZhbHVlKSA6IG51bGw7XG4gICAgICAgfSxcblxuICAgICAgIHZhbHVlMnN1Ym1pdDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUyc3RyKHZhbHVlKTtcbiAgICAgICB9LFxuXG4gICAgICAgdmFsdWUyaW5wdXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIGlmKHZhbHVlKSB7XG4gICAgICAgICAgICAgdGhpcy4kaW5wdXQuZGF0YSgnZGF0ZXRpbWVwaWNrZXInKS5zZXREYXRlKHZhbHVlKTtcbiAgICAgICAgICAgfVxuICAgICAgIH0sXG5cbiAgICAgICBpbnB1dDJ2YWx1ZTogZnVuY3Rpb24oKSB7IFxuICAgICAgICAgICAvL2RhdGUgbWF5IGJlIGNsZWFyZWQsIGluIHRoYXQgY2FzZSBnZXREYXRlKCkgdHJpZ2dlcnMgZXJyb3JcbiAgICAgICAgICAgdmFyIGR0ID0gdGhpcy4kaW5wdXQuZGF0YSgnZGF0ZXRpbWVwaWNrZXInKTtcbiAgICAgICAgICAgcmV0dXJuIGR0LmRhdGUgPyBkdC5nZXREYXRlKCkgOiBudWxsO1xuICAgICAgIH0sXG5cbiAgICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgfSxcblxuICAgICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLiRpbnB1dC5kYXRhKCdkYXRldGltZXBpY2tlcicpLmRhdGUgPSBudWxsO1xuICAgICAgICAgIHRoaXMuJGlucHV0LmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy5zaG93YnV0dG9ucykge1xuICAgICAgICAgICAgIHRoaXMuJGlucHV0LmNsb3Nlc3QoJ2Zvcm0nKS5zdWJtaXQoKTsgXG4gICAgICAgICAgfSAgICAgICAgICBcbiAgICAgICB9LFxuXG4gICAgICAgYXV0b3N1Ym1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHRoaXMuJGlucHV0Lm9uKCdtb3VzZXVwJywgJy5taW51dGUnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgIHZhciAkZm9ybSA9ICQodGhpcykuY2xvc2VzdCgnZm9ybScpO1xuICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAkZm9ybS5zdWJtaXQoKTtcbiAgICAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgICAgIH0pO1xuICAgICAgIH0sXG5cbiAgICAgICAvL2NvbnZlcnQgZGF0ZSBmcm9tIGxvY2FsIHRvIHV0Y1xuICAgICAgIHRvVVRDOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgcmV0dXJuIHZhbHVlID8gbmV3IERhdGUodmFsdWUudmFsdWVPZigpIC0gdmFsdWUuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwMDAwKSA6IHZhbHVlOyAgXG4gICAgICAgfSxcblxuICAgICAgIC8vY29udmVydCBkYXRlIGZyb20gdXRjIHRvIGxvY2FsXG4gICAgICAgZnJvbVVUQzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgIHJldHVybiB2YWx1ZSA/IG5ldyBEYXRlKHZhbHVlLnZhbHVlT2YoKSArIHZhbHVlLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MDAwMCkgOiB2YWx1ZTsgIFxuICAgICAgIH0sXG5cbiAgICAgICAvKlxuICAgICAgICBGb3IgaW5jb3JyZWN0IGRhdGUgYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyIHJldHVybnMgY3VycmVudCBkYXRlIHRoYXQgaXMgbm90IHN1aXRhYmxlXG4gICAgICAgIGZvciBkYXRldGltZWZpZWxkLlxuICAgICAgICBUaGlzIGZ1bmN0aW9uIHJldHVybnMgbnVsbCBmb3IgaW5jb3JyZWN0IGRhdGUuICBcbiAgICAgICAqL1xuICAgICAgIHBhcnNlRGF0ZTogZnVuY3Rpb24oc3RyLCBmb3JtYXQpIHtcbiAgICAgICAgICAgdmFyIGRhdGUgPSBudWxsLCBmb3JtYXR0ZWRCYWNrO1xuICAgICAgICAgICBpZihzdHIpIHtcbiAgICAgICAgICAgICAgIGRhdGUgPSB0aGlzLmRwZy5wYXJzZURhdGUoc3RyLCBmb3JtYXQsIHRoaXMub3B0aW9ucy5kYXRldGltZXBpY2tlci5sYW5ndWFnZSwgdGhpcy5vcHRpb25zLmZvcm1hdFR5cGUpO1xuICAgICAgICAgICAgICAgaWYodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRCYWNrID0gdGhpcy5kcGcuZm9ybWF0RGF0ZShkYXRlLCBmb3JtYXQsIHRoaXMub3B0aW9ucy5kYXRldGltZXBpY2tlci5sYW5ndWFnZSwgdGhpcy5vcHRpb25zLmZvcm1hdFR5cGUpO1xuICAgICAgICAgICAgICAgICAgIGlmKHN0ciAhPT0gZm9ybWF0dGVkQmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgRGF0ZVRpbWUuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQuZGVmYXVsdHMsIHtcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSB0cGwgXG4gICAgICAgIEBkZWZhdWx0IDxkaXY+PC9kaXY+XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB0cGw6JzxkaXYgY2xhc3M9XCJlZGl0YWJsZS1kYXRlIHdlbGxcIj48L2Rpdj4nLFxuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IGlucHV0Y2xhc3MgXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovXG4gICAgICAgIGlucHV0Y2xhc3M6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBGb3JtYXQgdXNlZCBmb3Igc2VuZGluZyB2YWx1ZSB0byBzZXJ2ZXIuIEFsc28gYXBwbGllZCB3aGVuIGNvbnZlcnRpbmcgZGF0ZSBmcm9tIDxjb2RlPmRhdGEtdmFsdWU8L2NvZGU+IGF0dHJpYnV0ZS48YnI+XG4gICAgICAgIFBvc3NpYmxlIHRva2VucyBhcmU6IDxjb2RlPmQsIGRkLCBtLCBtbSwgeXksIHl5eXksIGgsIGk8L2NvZGU+ICBcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBmb3JtYXQgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCB5eXl5LW1tLWRkIGhoOmlpXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBmb3JtYXQ6J3l5eXktbW0tZGQgaGg6aWknLFxuICAgICAgICBmb3JtYXRUeXBlOidzdGFuZGFyZCcsXG4gICAgICAgIC8qKlxuICAgICAgICBGb3JtYXQgdXNlZCBmb3IgZGlzcGxheWluZyBkYXRlLiBBbHNvIGFwcGxpZWQgd2hlbiBjb252ZXJ0aW5nIGRhdGUgZnJvbSBlbGVtZW50J3MgdGV4dCBvbiBpbml0LiAgIFxuICAgICAgICBJZiBub3Qgc3BlY2lmaWVkIGVxdWFscyB0byA8Y29kZT5mb3JtYXQ8L2NvZGU+XG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgdmlld2Zvcm1hdCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovXG4gICAgICAgIHZpZXdmb3JtYXQ6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBDb25maWd1cmF0aW9uIG9mIGRhdGV0aW1lcGlja2VyLlxuICAgICAgICBGdWxsIGxpc3Qgb2Ygb3B0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL3NtYWxvdC9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXJcblxuICAgICAgICBAcHJvcGVydHkgZGF0ZXRpbWVwaWNrZXIgXG4gICAgICAgIEB0eXBlIG9iamVjdFxuICAgICAgICBAZGVmYXVsdCB7IH1cbiAgICAgICAgKiovXG4gICAgICAgIGRhdGV0aW1lcGlja2VyOntcbiAgICAgICAgICAgIHRvZGF5SGlnaGxpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9jbG9zZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgIFRleHQgc2hvd24gYXMgY2xlYXIgZGF0ZSBidXR0b24uIFxuICAgICAgICBJZiA8Y29kZT5mYWxzZTwvY29kZT4gY2xlYXIgYnV0dG9uIHdpbGwgbm90IGJlIHJlbmRlcmVkLlxuXG4gICAgICAgIEBwcm9wZXJ0eSBjbGVhciBcbiAgICAgICAgQHR5cGUgYm9vbGVhbnxzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJ3ggY2xlYXInXG4gICAgICAgICoqL1xuICAgICAgICBjbGVhcjogJyZ0aW1lczsgY2xlYXInXG4gICAgfSk7XG5cbiAgICAkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZXRpbWUgPSBEYXRlVGltZTtcblxufSh3aW5kb3cualF1ZXJ5KSk7XG4vKipcbkJvb3RzdHJhcCBkYXRldGltZWZpZWxkIGlucHV0IC0gZGF0ZXRpbWUgaW5wdXQgZm9yIGlubGluZSBtb2RlLlxuU2hvd3Mgbm9ybWFsIDxpbnB1dCB0eXBlPVwidGV4dFwiPiBhbmQgYmluZHMgcG9wdXAgZGF0ZXRpbWVwaWNrZXIuICBcbkF1dG9tYXRpY2FsbHkgc2hvd24gaW4gaW5saW5lIG1vZGUuXG5cbkBjbGFzcyBkYXRldGltZWZpZWxkXG5AZXh0ZW5kcyBkYXRldGltZVxuXG4qKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFxuICAgIHZhciBEYXRlVGltZUZpZWxkID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCdkYXRldGltZWZpZWxkJywgb3B0aW9ucywgRGF0ZVRpbWVGaWVsZC5kZWZhdWx0cyk7XG4gICAgICAgIHRoaXMuaW5pdFBpY2tlcihvcHRpb25zLCBEYXRlVGltZUZpZWxkLmRlZmF1bHRzKTtcbiAgICB9O1xuXG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoRGF0ZVRpbWVGaWVsZCwgJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGV0aW1lKTtcbiAgICBcbiAgICAkLmV4dGVuZChEYXRlVGltZUZpZWxkLnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0ID0gdGhpcy4kdHBsLmZpbmQoJ2lucHV0Jyk7XG4gICAgICAgICAgICB0aGlzLnNldENsYXNzKCk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3BsYWNlaG9sZGVyJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJHRwbC5kYXRldGltZXBpY2tlcih0aGlzLm9wdGlvbnMuZGF0ZXRpbWVwaWNrZXIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL25lZWQgdG8gZGlzYWJsZSBvcmlnaW5hbCBldmVudCBoYW5kbGVyc1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQub2ZmKCdmb2N1cyBrZXlkb3duJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdXBkYXRlIHZhbHVlIG9mIGRhdGVwaWNrZXJcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmtleXVwKCQucHJveHkoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgIHRoaXMuJHRwbC5yZW1vdmVEYXRhKCdkYXRlJyk7XG4gICAgICAgICAgICAgICB0aGlzLiR0cGwuZGF0ZXRpbWVwaWNrZXIoJ3VwZGF0ZScpO1xuICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICAgICAgXG4gICAgICAgIH0sICAgXG4gICAgICBcbiAgICAgICB2YWx1ZTJpbnB1dDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgdGhpcy4kaW5wdXQudmFsKHRoaXMudmFsdWUyaHRtbCh2YWx1ZSkpO1xuICAgICAgICAgICB0aGlzLiR0cGwuZGF0ZXRpbWVwaWNrZXIoJ3VwZGF0ZScpO1xuICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgIGlucHV0MnZhbHVlOiBmdW5jdGlvbigpIHsgXG4gICAgICAgICAgIHJldHVybiB0aGlzLmh0bWwydmFsdWUodGhpcy4kaW5wdXQudmFsKCkpO1xuICAgICAgIH0sICAgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAkLmZuLmVkaXRhYmxldHlwZXMudGV4dC5wcm90b3R5cGUuYWN0aXZhdGUuY2FsbCh0aGlzKTtcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIGF1dG9zdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgLy9yZXNldCBhdXRvc3VibWl0IHRvIGVtcHR5ICBcbiAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgRGF0ZVRpbWVGaWVsZC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZXRpbWUuZGVmYXVsdHMsIHtcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSB0cGwgXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB0cGw6JzxkaXYgY2xhc3M9XCJpbnB1dC1hcHBlbmQgZGF0ZVwiPjxpbnB1dCB0eXBlPVwidGV4dFwiLz48c3BhbiBjbGFzcz1cImFkZC1vblwiPjxpIGNsYXNzPVwiaWNvbi10aFwiPjwvaT48L3NwYW4+PC9kaXY+JyxcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSBpbnB1dGNsYXNzIFxuICAgICAgICBAZGVmYXVsdCAnaW5wdXQtbWVkaXVtJ1xuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgaW5wdXRjbGFzczogJ2lucHV0LW1lZGl1bScsXG4gICAgICAgIFxuICAgICAgICAvKiBkYXRldGltZXBpY2tlciBjb25maWcgKi9cbiAgICAgICAgZGF0ZXRpbWVwaWNrZXI6e1xuICAgICAgICAgICAgdG9kYXlIaWdobGlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgYXV0b2Nsb3NlOiB0cnVlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZXRpbWVmaWVsZCA9IERhdGVUaW1lRmllbGQ7XG5cbn0od2luZG93LmpRdWVyeSkpO1xuLyoqXG4gKiBAYXV0aG9yIHpoaXhpbiB3ZW4gPHdlbnpoaXhpbjIwMTBAZ21haWwuY29tPlxuICogdmVyc2lvbjogMS4xMS4xXG4gKiBodHRwczovL2dpdGh1Yi5jb20vd2VuemhpeGluL2Jvb3RzdHJhcC10YWJsZS9cbiAqL1xuXG4oZnVuY3Rpb24gKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBUT09MUyBERUZJTklUSU9OXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgdmFyIGNhY2hlZFdpZHRoID0gbnVsbDtcblxuICAgIC8vIGl0IG9ubHkgZG9lcyAnJXMnLCBhbmQgcmV0dXJuICcnIHdoZW4gYXJndW1lbnRzIGFyZSB1bmRlZmluZWRcbiAgICB2YXIgc3ByaW50ZiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBmbGFnID0gdHJ1ZSxcbiAgICAgICAgICAgIGkgPSAxO1xuXG4gICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJnID0gYXJnc1tpKytdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmbGFnID8gc3RyIDogJyc7XG4gICAgfTtcblxuICAgIHZhciBnZXRQcm9wZXJ0eUZyb21PdGhlciA9IGZ1bmN0aW9uIChsaXN0LCBmcm9tLCB0bywgdmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICAkLmVhY2gobGlzdCwgZnVuY3Rpb24gKGksIGl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChpdGVtW2Zyb21dID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW1bdG9dO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdmFyIGdldEZpZWxkSW5kZXggPSBmdW5jdGlvbiAoY29sdW1ucywgZmllbGQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG5cbiAgICAgICAgJC5lYWNoKGNvbHVtbnMsIGZ1bmN0aW9uIChpLCBjb2x1bW4pIHtcbiAgICAgICAgICAgIGlmIChjb2x1bW4uZmllbGQgPT09IGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICAvLyBodHRwOi8vanNmaWRkbGUubmV0L3dlbnlpLzQ3bno3ZXo5LzMvXG4gICAgdmFyIHNldEZpZWxkSW5kZXggPSBmdW5jdGlvbiAoY29sdW1ucykge1xuICAgICAgICB2YXIgaSwgaiwgayxcbiAgICAgICAgICAgIHRvdGFsQ29sID0gMCxcbiAgICAgICAgICAgIGZsYWcgPSBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29sdW1uc1swXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG90YWxDb2wgKz0gY29sdW1uc1swXVtpXS5jb2xzcGFuIHx8IDE7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29sdW1ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZmxhZ1tpXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHRvdGFsQ29sOyBqKyspIHtcbiAgICAgICAgICAgICAgICBmbGFnW2ldW2pdID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29sdW1ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNvbHVtbnNbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IGNvbHVtbnNbaV1bal0sXG4gICAgICAgICAgICAgICAgICAgIHJvd3NwYW4gPSByLnJvd3NwYW4gfHwgMSxcbiAgICAgICAgICAgICAgICAgICAgY29sc3BhbiA9IHIuY29sc3BhbiB8fCAxLFxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9ICQuaW5BcnJheShmYWxzZSwgZmxhZ1tpXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29sc3BhbiA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByLmZpZWxkSW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBmaWVsZCBpcyB1bmRlZmluZWQsIHVzZSBpbmRleCBpbnN0ZWFkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygci5maWVsZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuZmllbGQgPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCByb3dzcGFuOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZmxhZ1tpICsga11baW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGNvbHNwYW47IGsrKykge1xuICAgICAgICAgICAgICAgICAgICBmbGFnW2ldW2luZGV4ICsga10gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgZ2V0U2Nyb2xsQmFyV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYWNoZWRXaWR0aCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGlubmVyID0gJCgnPHAvPicpLmFkZENsYXNzKCdmaXhlZC10YWJsZS1zY3JvbGwtaW5uZXInKSxcbiAgICAgICAgICAgICAgICBvdXRlciA9ICQoJzxkaXYvPicpLmFkZENsYXNzKCdmaXhlZC10YWJsZS1zY3JvbGwtb3V0ZXInKSxcbiAgICAgICAgICAgICAgICB3MSwgdzI7XG5cbiAgICAgICAgICAgIG91dGVyLmFwcGVuZChpbm5lcik7XG4gICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKG91dGVyKTtcblxuICAgICAgICAgICAgdzEgPSBpbm5lclswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIG91dGVyLmNzcygnb3ZlcmZsb3cnLCAnc2Nyb2xsJyk7XG4gICAgICAgICAgICB3MiA9IGlubmVyWzBdLm9mZnNldFdpZHRoO1xuXG4gICAgICAgICAgICBpZiAodzEgPT09IHcyKSB7XG4gICAgICAgICAgICAgICAgdzIgPSBvdXRlclswXS5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3V0ZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICBjYWNoZWRXaWR0aCA9IHcxIC0gdzI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlZFdpZHRoO1xuICAgIH07XG5cbiAgICB2YXIgY2FsY3VsYXRlT2JqZWN0VmFsdWUgPSBmdW5jdGlvbiAoc2VsZiwgbmFtZSwgYXJncywgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gbmFtZTtcblxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyBzdXBwb3J0IG9iai5mdW5jMS5mdW5jMlxuICAgICAgICAgICAgdmFyIG5hbWVzID0gbmFtZS5zcGxpdCgnLicpO1xuXG4gICAgICAgICAgICBpZiAobmFtZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGZ1bmMgPSB3aW5kb3c7XG4gICAgICAgICAgICAgICAgJC5lYWNoKG5hbWVzLCBmdW5jdGlvbiAoaSwgZikge1xuICAgICAgICAgICAgICAgICAgICBmdW5jID0gZnVuY1tmXTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZnVuYyA9IHdpbmRvd1tuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHNlbGYsIGFyZ3MgfHwgW10pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZnVuYyAmJiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgc3ByaW50Zi5hcHBseSh0aGlzLCBbbmFtZV0uY29uY2F0KGFyZ3MpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNwcmludGYuYXBwbHkodGhpcywgW25hbWVdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9O1xuXG4gICAgdmFyIGNvbXBhcmVPYmplY3RzID0gZnVuY3Rpb24gKG9iamVjdEEsIG9iamVjdEIsIGNvbXBhcmVMZW5ndGgpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGFycmF5cyBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAgICB2YXIgb2JqZWN0QVByb3BlcnRpZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3RBKSxcbiAgICAgICAgICAgIG9iamVjdEJQcm9wZXJ0aWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqZWN0QiksXG4gICAgICAgICAgICBwcm9wTmFtZSA9ICcnO1xuXG4gICAgICAgIGlmIChjb21wYXJlTGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBJZiBudW1iZXIgb2YgcHJvcGVydGllcyBpcyBkaWZmZXJlbnQsIG9iamVjdHMgYXJlIG5vdCBlcXVpdmFsZW50XG4gICAgICAgICAgICBpZiAob2JqZWN0QVByb3BlcnRpZXMubGVuZ3RoICE9PSBvYmplY3RCUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdEFQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwcm9wTmFtZSA9IG9iamVjdEFQcm9wZXJ0aWVzW2ldO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcHJvcGVydHkgaXMgbm90IGluIHRoZSBvYmplY3QgQiBwcm9wZXJ0aWVzLCBjb250aW51ZSB3aXRoIHRoZSBuZXh0IHByb3BlcnR5XG4gICAgICAgICAgICBpZiAoJC5pbkFycmF5KHByb3BOYW1lLCBvYmplY3RCUHJvcGVydGllcykgPiAtMSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHZhbHVlcyBvZiBzYW1lIHByb3BlcnR5IGFyZSBub3QgZXF1YWwsIG9iamVjdHMgYXJlIG5vdCBlcXVpdmFsZW50XG4gICAgICAgICAgICAgICAgaWYgKG9iamVjdEFbcHJvcE5hbWVdICE9PSBvYmplY3RCW3Byb3BOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgd2UgbWFkZSBpdCB0aGlzIGZhciwgb2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICB2YXIgZXNjYXBlSFRNTCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0XG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCAnJiMwMzk7JylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvYC9nLCAnJiN4NjA7Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfTtcblxuICAgIHZhciBnZXRSZWFsRGF0YUF0dHIgPSBmdW5jdGlvbiAoZGF0YUF0dHIpIHtcbiAgICAgICAgZm9yICh2YXIgYXR0ciBpbiBkYXRhQXR0cikge1xuICAgICAgICAgICAgdmFyIGF1eEF0dHIgPSBhdHRyLnNwbGl0KC8oPz1bQS1aXSkvKS5qb2luKCctJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChhdXhBdHRyICE9PSBhdHRyKSB7XG4gICAgICAgICAgICAgICAgZGF0YUF0dHJbYXV4QXR0cl0gPSBkYXRhQXR0clthdHRyXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YUF0dHJbYXR0cl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YUF0dHI7XG4gICAgfTtcblxuICAgIHZhciBnZXRJdGVtRmllbGQgPSBmdW5jdGlvbiAoaXRlbSwgZmllbGQsIGVzY2FwZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZmllbGQgIT09ICdzdHJpbmcnIHx8IGl0ZW0uaGFzT3duUHJvcGVydHkoZmllbGQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXNjYXBlID8gZXNjYXBlSFRNTChpdGVtW2ZpZWxkXSkgOiBpdGVtW2ZpZWxkXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJvcHMgPSBmaWVsZC5zcGxpdCgnLicpO1xuICAgICAgICBmb3IgKHZhciBwIGluIHByb3BzKSB7XG4gICAgICAgICAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICYmIHZhbHVlW3Byb3BzW3BdXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXNjYXBlID8gZXNjYXBlSFRNTCh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgdmFyIGlzSUVCcm93c2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gISEobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiTVNJRSBcIikgPiAwIHx8ICEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC4qcnZcXDoxMVxcLi8pKTtcbiAgICB9O1xuXG4gICAgdmFyIG9iamVjdEtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2tleXNcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cykge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgaGFzRG9udEVudW1CdWcgPSAhKHsgdG9TdHJpbmc6IG51bGwgfSkucHJvcGVydHlJc0VudW1lcmFibGUoJ3RvU3RyaW5nJyksXG4gICAgICAgICAgICAgICAgICAgIGRvbnRFbnVtcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICd0b1N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAndG9Mb2NhbGVTdHJpbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlT2YnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2hhc093blByb3BlcnR5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdpc1Byb3RvdHlwZU9mJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uc3RydWN0b3InXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGRvbnRFbnVtc0xlbmd0aCA9IGRvbnRFbnVtcy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyAmJiAodHlwZW9mIG9iaiAhPT0gJ2Z1bmN0aW9uJyB8fCBvYmogPT09IG51bGwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gbm9uLW9iamVjdCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdLCBwcm9wLCBpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwcm9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNEb250RW51bUJ1Zykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRvbnRFbnVtc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBkb250RW51bXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRvbnRFbnVtc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0oKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gQk9PVFNUUkFQIFRBQkxFIENMQVNTIERFRklOSVRJT05cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICB2YXIgQm9vdHN0cmFwVGFibGUgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy4kZWwgPSAkKGVsKTtcbiAgICAgICAgdGhpcy4kZWxfID0gdGhpcy4kZWwuY2xvbmUoKTtcbiAgICAgICAgdGhpcy50aW1lb3V0SWRfID0gMDtcbiAgICAgICAgdGhpcy50aW1lb3V0Rm9vdGVyXyA9IDA7XG5cbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLkRFRkFVTFRTID0ge1xuICAgICAgICBjbGFzc2VzOiAndGFibGUgdGFibGUtaG92ZXInLFxuICAgICAgICBzb3J0Q2xhc3M6IHVuZGVmaW5lZCxcbiAgICAgICAgbG9jYWxlOiB1bmRlZmluZWQsXG4gICAgICAgIGhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICB1bmRlZmluZWRUZXh0OiAnLScsXG4gICAgICAgIHNvcnROYW1lOiB1bmRlZmluZWQsXG4gICAgICAgIHNvcnRPcmRlcjogJ2FzYycsXG4gICAgICAgIHNvcnRTdGFibGU6IGZhbHNlLFxuICAgICAgICBzdHJpcGVkOiBmYWxzZSxcbiAgICAgICAgY29sdW1uczogW1tdXSxcbiAgICAgICAgZGF0YTogW10sXG4gICAgICAgIHRvdGFsRmllbGQ6ICd0b3RhbCcsXG4gICAgICAgIGRhdGFGaWVsZDogJ3Jvd3MnLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICB1cmw6IHVuZGVmaW5lZCxcbiAgICAgICAgYWpheDogdW5kZWZpbmVkLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgYWpheE9wdGlvbnM6IHt9LFxuICAgICAgICBxdWVyeVBhcmFtczogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICAgICAgfSxcbiAgICAgICAgcXVlcnlQYXJhbXNUeXBlOiAnbGltaXQnLCAvLyB1bmRlZmluZWRcbiAgICAgICAgcmVzcG9uc2VIYW5kbGVyOiBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9LFxuICAgICAgICBwYWdpbmF0aW9uOiBmYWxzZSxcbiAgICAgICAgb25seUluZm9QYWdpbmF0aW9uOiBmYWxzZSxcbiAgICAgICAgcGFnaW5hdGlvbkxvb3A6IHRydWUsXG4gICAgICAgIHNpZGVQYWdpbmF0aW9uOiAnY2xpZW50JywgLy8gY2xpZW50IG9yIHNlcnZlclxuICAgICAgICB0b3RhbFJvd3M6IDAsIC8vIHNlcnZlciBzaWRlIG5lZWQgdG8gc2V0XG4gICAgICAgIHBhZ2VOdW1iZXI6IDEsXG4gICAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgICAgcGFnZUxpc3Q6IFsxMCwgMjUsIDUwLCAxMDBdLFxuICAgICAgICBwYWdpbmF0aW9uSEFsaWduOiAncmlnaHQnLCAvL3JpZ2h0LCBsZWZ0XG4gICAgICAgIHBhZ2luYXRpb25WQWxpZ246ICdib3R0b20nLCAvL2JvdHRvbSwgdG9wLCBib3RoXG4gICAgICAgIHBhZ2luYXRpb25EZXRhaWxIQWxpZ246ICdsZWZ0JywgLy9yaWdodCwgbGVmdFxuICAgICAgICBwYWdpbmF0aW9uUHJlVGV4dDogJyZsc2FxdW87JyxcbiAgICAgICAgcGFnaW5hdGlvbk5leHRUZXh0OiAnJnJzYXF1bzsnLFxuICAgICAgICBzZWFyY2g6IGZhbHNlLFxuICAgICAgICBzZWFyY2hPbkVudGVyS2V5OiBmYWxzZSxcbiAgICAgICAgc3RyaWN0U2VhcmNoOiBmYWxzZSxcbiAgICAgICAgc2VhcmNoQWxpZ246ICdyaWdodCcsXG4gICAgICAgIHNlbGVjdEl0ZW1OYW1lOiAnYnRTZWxlY3RJdGVtJyxcbiAgICAgICAgc2hvd0hlYWRlcjogdHJ1ZSxcbiAgICAgICAgc2hvd0Zvb3RlcjogZmFsc2UsXG4gICAgICAgIHNob3dDb2x1bW5zOiBmYWxzZSxcbiAgICAgICAgc2hvd1BhZ2luYXRpb25Td2l0Y2g6IGZhbHNlLFxuICAgICAgICBzaG93UmVmcmVzaDogZmFsc2UsXG4gICAgICAgIHNob3dUb2dnbGU6IGZhbHNlLFxuICAgICAgICBidXR0b25zQWxpZ246ICdyaWdodCcsXG4gICAgICAgIHNtYXJ0RGlzcGxheTogdHJ1ZSxcbiAgICAgICAgZXNjYXBlOiBmYWxzZSxcbiAgICAgICAgbWluaW11bUNvdW50Q29sdW1uczogMSxcbiAgICAgICAgaWRGaWVsZDogdW5kZWZpbmVkLFxuICAgICAgICB1bmlxdWVJZDogdW5kZWZpbmVkLFxuICAgICAgICBjYXJkVmlldzogZmFsc2UsXG4gICAgICAgIGRldGFpbFZpZXc6IGZhbHNlLFxuICAgICAgICBkZXRhaWxGb3JtYXR0ZXI6IGZ1bmN0aW9uIChpbmRleCwgcm93KSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0sXG4gICAgICAgIHRyaW1PblNlYXJjaDogdHJ1ZSxcbiAgICAgICAgY2xpY2tUb1NlbGVjdDogZmFsc2UsXG4gICAgICAgIHNpbmdsZVNlbGVjdDogZmFsc2UsXG4gICAgICAgIHRvb2xiYXI6IHVuZGVmaW5lZCxcbiAgICAgICAgdG9vbGJhckFsaWduOiAnbGVmdCcsXG4gICAgICAgIGNoZWNrYm94SGVhZGVyOiB0cnVlLFxuICAgICAgICBzb3J0YWJsZTogdHJ1ZSxcbiAgICAgICAgc2lsZW50U29ydDogdHJ1ZSxcbiAgICAgICAgbWFpbnRhaW5TZWxlY3RlZDogZmFsc2UsXG4gICAgICAgIHNlYXJjaFRpbWVPdXQ6IDUwMCxcbiAgICAgICAgc2VhcmNoVGV4dDogJycsXG4gICAgICAgIGljb25TaXplOiB1bmRlZmluZWQsXG4gICAgICAgIGJ1dHRvbnNDbGFzczogJ2RlZmF1bHQnLFxuICAgICAgICBpY29uc1ByZWZpeDogJ2dseXBoaWNvbicsIC8vIGdseXBoaWNvbiBvZiBmYSAoZm9udCBhd2Vzb21lKVxuICAgICAgICBpY29uczoge1xuICAgICAgICAgICAgcGFnaW5hdGlvblN3aXRjaERvd246ICdnbHlwaGljb24tY29sbGFwc2UtZG93biBpY29uLWNoZXZyb24tZG93bicsXG4gICAgICAgICAgICBwYWdpbmF0aW9uU3dpdGNoVXA6ICdnbHlwaGljb24tY29sbGFwc2UtdXAgaWNvbi1jaGV2cm9uLXVwJyxcbiAgICAgICAgICAgIHJlZnJlc2g6ICdnbHlwaGljb24tcmVmcmVzaCBpY29uLXJlZnJlc2gnLFxuICAgICAgICAgICAgdG9nZ2xlOiAnZ2x5cGhpY29uLWxpc3QtYWx0IGljb24tbGlzdC1hbHQnLFxuICAgICAgICAgICAgY29sdW1uczogJ2dseXBoaWNvbi10aCBpY29uLXRoJyxcbiAgICAgICAgICAgIGRldGFpbE9wZW46ICdnbHlwaGljb24tcGx1cyBpY29uLXBsdXMnLFxuICAgICAgICAgICAgZGV0YWlsQ2xvc2U6ICdnbHlwaGljb24tbWludXMgaWNvbi1taW51cydcbiAgICAgICAgfSxcblxuICAgICAgICBjdXN0b21TZWFyY2g6ICQubm9vcCxcblxuICAgICAgICBjdXN0b21Tb3J0OiAkLm5vb3AsXG5cbiAgICAgICAgcm93U3R5bGU6IGZ1bmN0aW9uIChyb3csIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0sXG5cbiAgICAgICAgcm93QXR0cmlidXRlczogZnVuY3Rpb24gKHJvdywgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfSxcblxuICAgICAgICBmb290ZXJTdHlsZTogZnVuY3Rpb24gKHJvdywgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfSxcblxuICAgICAgICBvbkFsbDogZnVuY3Rpb24gKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgb25DbGlja0NlbGw6IGZ1bmN0aW9uIChmaWVsZCwgdmFsdWUsIHJvdywgJGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgb25EYmxDbGlja0NlbGw6IGZ1bmN0aW9uIChmaWVsZCwgdmFsdWUsIHJvdywgJGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgb25DbGlja1JvdzogZnVuY3Rpb24gKGl0ZW0sICRlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRGJsQ2xpY2tSb3c6IGZ1bmN0aW9uIChpdGVtLCAkZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvblNvcnQ6IGZ1bmN0aW9uIChuYW1lLCBvcmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvbkNoZWNrOiBmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIG9uVW5jaGVjazogZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvbkNoZWNrQWxsOiBmdW5jdGlvbiAocm93cykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvblVuY2hlY2tBbGw6IGZ1bmN0aW9uIChyb3dzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2hlY2tTb21lOiBmdW5jdGlvbiAocm93cykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvblVuY2hlY2tTb21lOiBmdW5jdGlvbiAocm93cykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvbkxvYWRTdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvbkxvYWRFcnJvcjogZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvbkNvbHVtblN3aXRjaDogZnVuY3Rpb24gKGZpZWxkLCBjaGVja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUGFnZUNoYW5nZTogZnVuY3Rpb24gKG51bWJlciwgc2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvblNlYXJjaDogZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Ub2dnbGU6IGZ1bmN0aW9uIChjYXJkVmlldykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvblByZUJvZHk6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUG9zdEJvZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Qb3N0SGVhZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRXhwYW5kUm93OiBmdW5jdGlvbiAoaW5kZXgsIHJvdywgJGRldGFpbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvbkNvbGxhcHNlUm93OiBmdW5jdGlvbiAoaW5kZXgsIHJvdykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvblJlZnJlc2hPcHRpb25zOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvblJlZnJlc2g6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUmVzZXRWaWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUuTE9DQUxFUyA9IHt9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUuTE9DQUxFU1snZW4tVVMnXSA9IEJvb3RzdHJhcFRhYmxlLkxPQ0FMRVMuZW4gPSB7XG4gICAgICAgIGZvcm1hdExvYWRpbmdNZXNzYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0xvYWRpbmcsIHBsZWFzZSB3YWl0Li4uJztcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0UmVjb3Jkc1BlclBhZ2U6IGZ1bmN0aW9uIChwYWdlTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ByaW50ZignJXMgcm93cyBwZXIgcGFnZScsIHBhZ2VOdW1iZXIpO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtYXRTaG93aW5nUm93czogZnVuY3Rpb24gKHBhZ2VGcm9tLCBwYWdlVG8sIHRvdGFsUm93cykge1xuICAgICAgICAgICAgcmV0dXJuIHNwcmludGYoJ1Nob3dpbmcgJXMgdG8gJXMgb2YgJXMgcm93cycsIHBhZ2VGcm9tLCBwYWdlVG8sIHRvdGFsUm93cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdERldGFpbFBhZ2luYXRpb246IGZ1bmN0aW9uICh0b3RhbFJvd3MpIHtcbiAgICAgICAgICAgIHJldHVybiBzcHJpbnRmKCdTaG93aW5nICVzIHJvd3MnLCB0b3RhbFJvd3MpO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtYXRTZWFyY2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnU2VhcmNoJztcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0Tm9NYXRjaGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ05vIG1hdGNoaW5nIHJlY29yZHMgZm91bmQnO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtYXRQYWdpbmF0aW9uU3dpdGNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0hpZGUvU2hvdyBwYWdpbmF0aW9uJztcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0UmVmcmVzaDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdSZWZyZXNoJztcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0VG9nZ2xlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1RvZ2dsZSc7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdENvbHVtbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnQ29sdW1ucyc7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdEFsbFJvd3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnQWxsJztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkLmV4dGVuZChCb290c3RyYXBUYWJsZS5ERUZBVUxUUywgQm9vdHN0cmFwVGFibGUuTE9DQUxFU1snZW4tVVMnXSk7XG5cbiAgICBCb290c3RyYXBUYWJsZS5DT0xVTU5fREVGQVVMVFMgPSB7XG4gICAgICAgIHJhZGlvOiBmYWxzZSxcbiAgICAgICAgY2hlY2tib3g6IGZhbHNlLFxuICAgICAgICBjaGVja2JveEVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGZpZWxkOiB1bmRlZmluZWQsXG4gICAgICAgIHRpdGxlOiB1bmRlZmluZWQsXG4gICAgICAgIHRpdGxlVG9vbHRpcDogdW5kZWZpbmVkLFxuICAgICAgICAnY2xhc3MnOiB1bmRlZmluZWQsXG4gICAgICAgIGFsaWduOiB1bmRlZmluZWQsIC8vIGxlZnQsIHJpZ2h0LCBjZW50ZXJcbiAgICAgICAgaGFsaWduOiB1bmRlZmluZWQsIC8vIGxlZnQsIHJpZ2h0LCBjZW50ZXJcbiAgICAgICAgZmFsaWduOiB1bmRlZmluZWQsIC8vIGxlZnQsIHJpZ2h0LCBjZW50ZXJcbiAgICAgICAgdmFsaWduOiB1bmRlZmluZWQsIC8vIHRvcCwgbWlkZGxlLCBib3R0b21cbiAgICAgICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgc29ydGFibGU6IGZhbHNlLFxuICAgICAgICBvcmRlcjogJ2FzYycsIC8vIGFzYywgZGVzY1xuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICBzd2l0Y2hhYmxlOiB0cnVlLFxuICAgICAgICBjbGlja1RvU2VsZWN0OiB0cnVlLFxuICAgICAgICBmb3JtYXR0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9vdGVyRm9ybWF0dGVyOiB1bmRlZmluZWQsXG4gICAgICAgIGV2ZW50czogdW5kZWZpbmVkLFxuICAgICAgICBzb3J0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgc29ydE5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgY2VsbFN0eWxlOiB1bmRlZmluZWQsXG4gICAgICAgIHNlYXJjaGFibGU6IHRydWUsXG4gICAgICAgIHNlYXJjaEZvcm1hdHRlcjogdHJ1ZSxcbiAgICAgICAgY2FyZFZpc2libGU6IHRydWUsXG4gICAgICAgIGVzY2FwZSA6IGZhbHNlXG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLkVWRU5UUyA9IHtcbiAgICAgICAgJ2FsbC5icy50YWJsZSc6ICdvbkFsbCcsXG4gICAgICAgICdjbGljay1jZWxsLmJzLnRhYmxlJzogJ29uQ2xpY2tDZWxsJyxcbiAgICAgICAgJ2RibC1jbGljay1jZWxsLmJzLnRhYmxlJzogJ29uRGJsQ2xpY2tDZWxsJyxcbiAgICAgICAgJ2NsaWNrLXJvdy5icy50YWJsZSc6ICdvbkNsaWNrUm93JyxcbiAgICAgICAgJ2RibC1jbGljay1yb3cuYnMudGFibGUnOiAnb25EYmxDbGlja1JvdycsXG4gICAgICAgICdzb3J0LmJzLnRhYmxlJzogJ29uU29ydCcsXG4gICAgICAgICdjaGVjay5icy50YWJsZSc6ICdvbkNoZWNrJyxcbiAgICAgICAgJ3VuY2hlY2suYnMudGFibGUnOiAnb25VbmNoZWNrJyxcbiAgICAgICAgJ2NoZWNrLWFsbC5icy50YWJsZSc6ICdvbkNoZWNrQWxsJyxcbiAgICAgICAgJ3VuY2hlY2stYWxsLmJzLnRhYmxlJzogJ29uVW5jaGVja0FsbCcsXG4gICAgICAgICdjaGVjay1zb21lLmJzLnRhYmxlJzogJ29uQ2hlY2tTb21lJyxcbiAgICAgICAgJ3VuY2hlY2stc29tZS5icy50YWJsZSc6ICdvblVuY2hlY2tTb21lJyxcbiAgICAgICAgJ2xvYWQtc3VjY2Vzcy5icy50YWJsZSc6ICdvbkxvYWRTdWNjZXNzJyxcbiAgICAgICAgJ2xvYWQtZXJyb3IuYnMudGFibGUnOiAnb25Mb2FkRXJyb3InLFxuICAgICAgICAnY29sdW1uLXN3aXRjaC5icy50YWJsZSc6ICdvbkNvbHVtblN3aXRjaCcsXG4gICAgICAgICdwYWdlLWNoYW5nZS5icy50YWJsZSc6ICdvblBhZ2VDaGFuZ2UnLFxuICAgICAgICAnc2VhcmNoLmJzLnRhYmxlJzogJ29uU2VhcmNoJyxcbiAgICAgICAgJ3RvZ2dsZS5icy50YWJsZSc6ICdvblRvZ2dsZScsXG4gICAgICAgICdwcmUtYm9keS5icy50YWJsZSc6ICdvblByZUJvZHknLFxuICAgICAgICAncG9zdC1ib2R5LmJzLnRhYmxlJzogJ29uUG9zdEJvZHknLFxuICAgICAgICAncG9zdC1oZWFkZXIuYnMudGFibGUnOiAnb25Qb3N0SGVhZGVyJyxcbiAgICAgICAgJ2V4cGFuZC1yb3cuYnMudGFibGUnOiAnb25FeHBhbmRSb3cnLFxuICAgICAgICAnY29sbGFwc2Utcm93LmJzLnRhYmxlJzogJ29uQ29sbGFwc2VSb3cnLFxuICAgICAgICAncmVmcmVzaC1vcHRpb25zLmJzLnRhYmxlJzogJ29uUmVmcmVzaE9wdGlvbnMnLFxuICAgICAgICAncmVzZXQtdmlldy5icy50YWJsZSc6ICdvblJlc2V0VmlldycsXG4gICAgICAgICdyZWZyZXNoLmJzLnRhYmxlJzogJ29uUmVmcmVzaCdcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5pdExvY2FsZSgpO1xuICAgICAgICB0aGlzLmluaXRDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5pbml0VGFibGUoKTtcbiAgICAgICAgdGhpcy5pbml0SGVhZGVyKCk7XG4gICAgICAgIHRoaXMuaW5pdERhdGEoKTtcbiAgICAgICAgdGhpcy5pbml0SGlkZGVuUm93cygpO1xuICAgICAgICB0aGlzLmluaXRGb290ZXIoKTtcbiAgICAgICAgdGhpcy5pbml0VG9vbGJhcigpO1xuICAgICAgICB0aGlzLmluaXRQYWdpbmF0aW9uKCk7XG4gICAgICAgIHRoaXMuaW5pdEJvZHkoKTtcbiAgICAgICAgdGhpcy5pbml0U2VhcmNoVGV4dCgpO1xuICAgICAgICB0aGlzLmluaXRTZXJ2ZXIoKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRMb2NhbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9jYWxlKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSB0aGlzLm9wdGlvbnMubG9jYWxlLnNwbGl0KC8tfF8vKTtcbiAgICAgICAgICAgIHBhcnRzWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAocGFydHNbMV0pIHBhcnRzWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAoJC5mbi5ib290c3RyYXBUYWJsZS5sb2NhbGVzW3RoaXMub3B0aW9ucy5sb2NhbGVdKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9jYWxlIGFzIHJlcXVlc3RlZFxuICAgICAgICAgICAgICAgICQuZXh0ZW5kKHRoaXMub3B0aW9ucywgJC5mbi5ib290c3RyYXBUYWJsZS5sb2NhbGVzW3RoaXMub3B0aW9ucy5sb2NhbGVdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJC5mbi5ib290c3RyYXBUYWJsZS5sb2NhbGVzW3BhcnRzLmpvaW4oJy0nKV0pIHtcbiAgICAgICAgICAgICAgICAvLyBsb2NhbGUgd2l0aCBzZXAgc2V0IHRvIC0gKGluIGNhc2Ugb3JpZ2luYWwgd2FzIHNwZWNpZmllZCB3aXRoIF8pXG4gICAgICAgICAgICAgICAgJC5leHRlbmQodGhpcy5vcHRpb25zLCAkLmZuLmJvb3RzdHJhcFRhYmxlLmxvY2FsZXNbcGFydHMuam9pbignLScpXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCQuZm4uYm9vdHN0cmFwVGFibGUubG9jYWxlc1twYXJ0c1swXV0pIHtcbiAgICAgICAgICAgICAgICAvLyBzaG9ydCBsb2NhbGUgbGFuZ3VhZ2UgY29kZSAoaS5lLiAnZW4nKVxuICAgICAgICAgICAgICAgICQuZXh0ZW5kKHRoaXMub3B0aW9ucywgJC5mbi5ib290c3RyYXBUYWJsZS5sb2NhbGVzW3BhcnRzWzBdXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRDb250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lciA9ICQoW1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJib290c3RyYXAtdGFibGVcIj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmaXhlZC10YWJsZS10b29sYmFyXCI+PC9kaXY+JyxcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wYWdpbmF0aW9uVkFsaWduID09PSAndG9wJyB8fCB0aGlzLm9wdGlvbnMucGFnaW5hdGlvblZBbGlnbiA9PT0gJ2JvdGgnID9cbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZpeGVkLXRhYmxlLXBhZ2luYXRpb25cIiBzdHlsZT1cImNsZWFyOiBib3RoO1wiPjwvZGl2PicgOlxuICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmaXhlZC10YWJsZS1jb250YWluZXJcIj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmaXhlZC10YWJsZS1oZWFkZXJcIj48dGFibGU+PC90YWJsZT48L2Rpdj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmaXhlZC10YWJsZS1ib2R5XCI+JyxcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZml4ZWQtdGFibGUtbG9hZGluZ1wiPicsXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZm9ybWF0TG9hZGluZ01lc3NhZ2UoKSxcbiAgICAgICAgICAgICc8L2Rpdj4nLFxuICAgICAgICAgICAgJzwvZGl2PicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZpeGVkLXRhYmxlLWZvb3RlclwiPjx0YWJsZT48dHI+PC90cj48L3RhYmxlPjwvZGl2PicsXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMucGFnaW5hdGlvblZBbGlnbiA9PT0gJ2JvdHRvbScgfHwgdGhpcy5vcHRpb25zLnBhZ2luYXRpb25WQWxpZ24gPT09ICdib3RoJyA/XG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmaXhlZC10YWJsZS1wYWdpbmF0aW9uXCI+PC9kaXY+JyA6XG4gICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAnPC9kaXY+JyxcbiAgICAgICAgICAgICc8L2Rpdj4nXG4gICAgICAgIF0uam9pbignJykpO1xuXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5pbnNlcnRBZnRlcih0aGlzLiRlbCk7XG4gICAgICAgIHRoaXMuJHRhYmxlQ29udGFpbmVyID0gdGhpcy4kY29udGFpbmVyLmZpbmQoJy5maXhlZC10YWJsZS1jb250YWluZXInKTtcbiAgICAgICAgdGhpcy4kdGFibGVIZWFkZXIgPSB0aGlzLiRjb250YWluZXIuZmluZCgnLmZpeGVkLXRhYmxlLWhlYWRlcicpO1xuICAgICAgICB0aGlzLiR0YWJsZUJvZHkgPSB0aGlzLiRjb250YWluZXIuZmluZCgnLmZpeGVkLXRhYmxlLWJvZHknKTtcbiAgICAgICAgdGhpcy4kdGFibGVMb2FkaW5nID0gdGhpcy4kY29udGFpbmVyLmZpbmQoJy5maXhlZC10YWJsZS1sb2FkaW5nJyk7XG4gICAgICAgIHRoaXMuJHRhYmxlRm9vdGVyID0gdGhpcy4kY29udGFpbmVyLmZpbmQoJy5maXhlZC10YWJsZS1mb290ZXInKTtcbiAgICAgICAgdGhpcy4kdG9vbGJhciA9IHRoaXMuJGNvbnRhaW5lci5maW5kKCcuZml4ZWQtdGFibGUtdG9vbGJhcicpO1xuICAgICAgICB0aGlzLiRwYWdpbmF0aW9uID0gdGhpcy4kY29udGFpbmVyLmZpbmQoJy5maXhlZC10YWJsZS1wYWdpbmF0aW9uJyk7XG5cbiAgICAgICAgdGhpcy4kdGFibGVCb2R5LmFwcGVuZCh0aGlzLiRlbCk7XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5hZnRlcignPGRpdiBjbGFzcz1cImNsZWFyZml4XCI+PC9kaXY+Jyk7XG5cbiAgICAgICAgdGhpcy4kZWwuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmNsYXNzZXMpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnN0cmlwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsLmFkZENsYXNzKCd0YWJsZS1zdHJpcGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCQuaW5BcnJheSgndGFibGUtbm8tYm9yZGVyZWQnLCB0aGlzLm9wdGlvbnMuY2xhc3Nlcy5zcGxpdCgnICcpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuJHRhYmxlQ29udGFpbmVyLmFkZENsYXNzKCd0YWJsZS1uby1ib3JkZXJlZCcpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0VGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgIGNvbHVtbnMgPSBbXSxcbiAgICAgICAgICAgIGRhdGEgPSBbXTtcblxuICAgICAgICB0aGlzLiRoZWFkZXIgPSB0aGlzLiRlbC5maW5kKCc+dGhlYWQnKTtcbiAgICAgICAgaWYgKCF0aGlzLiRoZWFkZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLiRoZWFkZXIgPSAkKCc8dGhlYWQ+PC90aGVhZD4nKS5hcHBlbmRUbyh0aGlzLiRlbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4kaGVhZGVyLmZpbmQoJ3RyJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29sdW1uID0gW107XG5cbiAgICAgICAgICAgICQodGhpcykuZmluZCgndGgnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBGaXggIzIwMTQgLSBnZXRGaWVsZEluZGV4IGFuZCBlbHNld2hlcmUgYXNzdW1lIHRoaXMgaXMgc3RyaW5nLCBjYXVzZXMgaXNzdWVzIGlmIG5vdFxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgJCh0aGlzKS5kYXRhKCdmaWVsZCcpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ2ZpZWxkJywgJCh0aGlzKS5kYXRhKCdmaWVsZCcpICsgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb2x1bW4ucHVzaCgkLmV4dGVuZCh7fSwge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJCh0aGlzKS5odG1sKCksXG4gICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICQodGhpcykuYXR0cignY2xhc3MnKSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVUb29sdGlwOiAkKHRoaXMpLmF0dHIoJ3RpdGxlJyksXG4gICAgICAgICAgICAgICAgICAgIHJvd3NwYW46ICQodGhpcykuYXR0cigncm93c3BhbicpID8gKyQodGhpcykuYXR0cigncm93c3BhbicpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAkKHRoaXMpLmF0dHIoJ2NvbHNwYW4nKSA/ICskKHRoaXMpLmF0dHIoJ2NvbHNwYW4nKSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0sICQodGhpcykuZGF0YSgpKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW4pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCEkLmlzQXJyYXkodGhpcy5vcHRpb25zLmNvbHVtbnNbMF0pKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuY29sdW1ucyA9IFt0aGlzLm9wdGlvbnMuY29sdW1uc107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zLmNvbHVtbnMgPSAkLmV4dGVuZCh0cnVlLCBbXSwgY29sdW1ucywgdGhpcy5vcHRpb25zLmNvbHVtbnMpO1xuICAgICAgICB0aGlzLmNvbHVtbnMgPSBbXTtcblxuICAgICAgICBzZXRGaWVsZEluZGV4KHRoaXMub3B0aW9ucy5jb2x1bW5zKTtcbiAgICAgICAgJC5lYWNoKHRoaXMub3B0aW9ucy5jb2x1bW5zLCBmdW5jdGlvbiAoaSwgY29sdW1ucykge1xuICAgICAgICAgICAgJC5lYWNoKGNvbHVtbnMsIGZ1bmN0aW9uIChqLCBjb2x1bW4pIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSAkLmV4dGVuZCh7fSwgQm9vdHN0cmFwVGFibGUuQ09MVU1OX0RFRkFVTFRTLCBjb2x1bW4pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2x1bW4uZmllbGRJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5zW2NvbHVtbi5maWVsZEluZGV4XSA9IGNvbHVtbjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuY29sdW1uc1tpXVtqXSA9IGNvbHVtbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBpZiBvcHRpb25zLmRhdGEgaXMgc2V0dGluZywgZG8gbm90IHByb2Nlc3MgdGJvZHkgZGF0YVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbSA9IFtdO1xuICAgICAgICB0aGlzLiRlbC5maW5kKCc+dGJvZHk+dHInKS5lYWNoKGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICB2YXIgcm93ID0ge307XG5cbiAgICAgICAgICAgIC8vIHNhdmUgdHIncyBpZCwgY2xhc3MgYW5kIGRhdGEtKiBhdHRyaWJ1dGVzXG4gICAgICAgICAgICByb3cuX2lkID0gJCh0aGlzKS5hdHRyKCdpZCcpO1xuICAgICAgICAgICAgcm93Ll9jbGFzcyA9ICQodGhpcykuYXR0cignY2xhc3MnKTtcbiAgICAgICAgICAgIHJvdy5fZGF0YSA9IGdldFJlYWxEYXRhQXR0cigkKHRoaXMpLmRhdGEoKSk7XG5cbiAgICAgICAgICAgICQodGhpcykuZmluZCgnPnRkJykuZWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGNzcGFuID0gKyR0aGlzLmF0dHIoJ2NvbHNwYW4nKSB8fCAxLFxuICAgICAgICAgICAgICAgICAgICByc3BhbiA9ICskdGhpcy5hdHRyKCdyb3dzcGFuJykgfHwgMSxcbiAgICAgICAgICAgICAgICAgICAgdHgsIHR5O1xuXG4gICAgICAgICAgICAgICAgZm9yICg7IG1beV0gJiYgbVt5XVt4XTsgeCsrKTsgLy9za2lwIGFscmVhZHkgb2NjdXBpZWQgY2VsbHMgaW4gY3VycmVudCByb3dcblxuICAgICAgICAgICAgICAgIGZvciAodHggPSB4OyB0eCA8IHggKyBjc3BhbjsgdHgrKykgeyAvL21hcmsgbWF0cml4IGVsZW1lbnRzIG9jY3VwaWVkIGJ5IGN1cnJlbnQgY2VsbCB3aXRoIHRydWVcbiAgICAgICAgICAgICAgICAgICAgZm9yICh0eSA9IHk7IHR5IDwgeSArIHJzcGFuOyB0eSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1bdHldKSB7IC8vZmlsbCBtaXNzaW5nIHJvd3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtW3R5XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbVt0eV1bdHhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBmaWVsZCA9IHRoYXQuY29sdW1uc1t4XS5maWVsZDtcblxuICAgICAgICAgICAgICAgIHJvd1tmaWVsZF0gPSAkKHRoaXMpLmh0bWwoKTtcbiAgICAgICAgICAgICAgICAvLyBzYXZlIHRkJ3MgaWQsIGNsYXNzIGFuZCBkYXRhLSogYXR0cmlidXRlc1xuICAgICAgICAgICAgICAgIHJvd1snXycgKyBmaWVsZCArICdfaWQnXSA9ICQodGhpcykuYXR0cignaWQnKTtcbiAgICAgICAgICAgICAgICByb3dbJ18nICsgZmllbGQgKyAnX2NsYXNzJ10gPSAkKHRoaXMpLmF0dHIoJ2NsYXNzJyk7XG4gICAgICAgICAgICAgICAgcm93WydfJyArIGZpZWxkICsgJ19yb3dzcGFuJ10gPSAkKHRoaXMpLmF0dHIoJ3Jvd3NwYW4nKTtcbiAgICAgICAgICAgICAgICByb3dbJ18nICsgZmllbGQgKyAnX2NvbHNwYW4nXSA9ICQodGhpcykuYXR0cignY29sc3BhbicpO1xuICAgICAgICAgICAgICAgIHJvd1snXycgKyBmaWVsZCArICdfdGl0bGUnXSA9ICQodGhpcykuYXR0cigndGl0bGUnKTtcbiAgICAgICAgICAgICAgICByb3dbJ18nICsgZmllbGQgKyAnX2RhdGEnXSA9IGdldFJlYWxEYXRhQXR0cigkKHRoaXMpLmRhdGEoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRhdGEucHVzaChyb3cpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmRhdGEgPSBkYXRhO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGgpIHRoaXMuZnJvbUh0bWwgPSB0cnVlO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdEhlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgdmlzaWJsZUNvbHVtbnMgPSB7fSxcbiAgICAgICAgICAgIGh0bWwgPSBbXTtcblxuICAgICAgICB0aGlzLmhlYWRlciA9IHtcbiAgICAgICAgICAgIGZpZWxkczogW10sXG4gICAgICAgICAgICBzdHlsZXM6IFtdLFxuICAgICAgICAgICAgY2xhc3NlczogW10sXG4gICAgICAgICAgICBmb3JtYXR0ZXJzOiBbXSxcbiAgICAgICAgICAgIGV2ZW50czogW10sXG4gICAgICAgICAgICBzb3J0ZXJzOiBbXSxcbiAgICAgICAgICAgIHNvcnROYW1lczogW10sXG4gICAgICAgICAgICBjZWxsU3R5bGVzOiBbXSxcbiAgICAgICAgICAgIHNlYXJjaGFibGVzOiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgICQuZWFjaCh0aGlzLm9wdGlvbnMuY29sdW1ucywgZnVuY3Rpb24gKGksIGNvbHVtbnMpIHtcbiAgICAgICAgICAgIGh0bWwucHVzaCgnPHRyPicpO1xuXG4gICAgICAgICAgICBpZiAoaSA9PT0gMCAmJiAhdGhhdC5vcHRpb25zLmNhcmRWaWV3ICYmIHRoYXQub3B0aW9ucy5kZXRhaWxWaWV3KSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKHNwcmludGYoJzx0aCBjbGFzcz1cImRldGFpbFwiIHJvd3NwYW49XCIlc1wiPjxkaXYgY2xhc3M9XCJmaHQtY2VsbFwiPjwvZGl2PjwvdGg+JyxcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLmNvbHVtbnMubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQuZWFjaChjb2x1bW5zLCBmdW5jdGlvbiAoaiwgY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSAnJyxcbiAgICAgICAgICAgICAgICAgICAgaGFsaWduID0gJycsIC8vIGhlYWRlciBhbGlnbiBzdHlsZVxuICAgICAgICAgICAgICAgICAgICBhbGlnbiA9ICcnLCAvLyBib2R5IGFsaWduIHN0eWxlXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0gJycsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzXyA9IHNwcmludGYoJyBjbGFzcz1cIiVzXCInLCBjb2x1bW5bJ2NsYXNzJ10pLFxuICAgICAgICAgICAgICAgICAgICBvcmRlciA9IHRoYXQub3B0aW9ucy5zb3J0T3JkZXIgfHwgY29sdW1uLm9yZGVyLFxuICAgICAgICAgICAgICAgICAgICB1bml0V2lkdGggPSAncHgnLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGNvbHVtbi53aWR0aDtcblxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW4ud2lkdGggIT09IHVuZGVmaW5lZCAmJiAoIXRoYXQub3B0aW9ucy5jYXJkVmlldykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2x1bW4ud2lkdGggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uLndpZHRoLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0V2lkdGggPSAnJSc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi53aWR0aCAmJiB0eXBlb2YgY29sdW1uLndpZHRoID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGNvbHVtbi53aWR0aC5yZXBsYWNlKCclJywgJycpLnJlcGxhY2UoJ3B4JywgJycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGhhbGlnbiA9IHNwcmludGYoJ3RleHQtYWxpZ246ICVzOyAnLCBjb2x1bW4uaGFsaWduID8gY29sdW1uLmhhbGlnbiA6IGNvbHVtbi5hbGlnbik7XG4gICAgICAgICAgICAgICAgYWxpZ24gPSBzcHJpbnRmKCd0ZXh0LWFsaWduOiAlczsgJywgY29sdW1uLmFsaWduKTtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IHNwcmludGYoJ3ZlcnRpY2FsLWFsaWduOiAlczsgJywgY29sdW1uLnZhbGlnbik7XG4gICAgICAgICAgICAgICAgc3R5bGUgKz0gc3ByaW50Zignd2lkdGg6ICVzOyAnLCAoY29sdW1uLmNoZWNrYm94IHx8IGNvbHVtbi5yYWRpbykgJiYgIXdpZHRoID9cbiAgICAgICAgICAgICAgICAgICAgJzM2cHgnIDogKHdpZHRoID8gd2lkdGggKyB1bml0V2lkdGggOiB1bmRlZmluZWQpKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29sdW1uLmZpZWxkSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaGVhZGVyLmZpZWxkc1tjb2x1bW4uZmllbGRJbmRleF0gPSBjb2x1bW4uZmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaGVhZGVyLnN0eWxlc1tjb2x1bW4uZmllbGRJbmRleF0gPSBhbGlnbiArIHN0eWxlO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmhlYWRlci5jbGFzc2VzW2NvbHVtbi5maWVsZEluZGV4XSA9IGNsYXNzXztcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5oZWFkZXIuZm9ybWF0dGVyc1tjb2x1bW4uZmllbGRJbmRleF0gPSBjb2x1bW4uZm9ybWF0dGVyO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmhlYWRlci5ldmVudHNbY29sdW1uLmZpZWxkSW5kZXhdID0gY29sdW1uLmV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5oZWFkZXIuc29ydGVyc1tjb2x1bW4uZmllbGRJbmRleF0gPSBjb2x1bW4uc29ydGVyO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmhlYWRlci5zb3J0TmFtZXNbY29sdW1uLmZpZWxkSW5kZXhdID0gY29sdW1uLnNvcnROYW1lO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmhlYWRlci5jZWxsU3R5bGVzW2NvbHVtbi5maWVsZEluZGV4XSA9IGNvbHVtbi5jZWxsU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaGVhZGVyLnNlYXJjaGFibGVzW2NvbHVtbi5maWVsZEluZGV4XSA9IGNvbHVtbi5zZWFyY2hhYmxlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29sdW1uLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMuY2FyZFZpZXcgJiYgKCFjb2x1bW4uY2FyZFZpc2libGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlQ29sdW1uc1tjb2x1bW4uZmllbGRdID0gY29sdW1uO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPHRoJyArIHNwcmludGYoJyB0aXRsZT1cIiVzXCInLCBjb2x1bW4udGl0bGVUb29sdGlwKSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmNoZWNrYm94IHx8IGNvbHVtbi5yYWRpbyA/XG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpbnRmKCcgY2xhc3M9XCJicy1jaGVja2JveCAlc1wiJywgY29sdW1uWydjbGFzcyddIHx8ICcnKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc18sXG4gICAgICAgICAgICAgICAgICAgIHNwcmludGYoJyBzdHlsZT1cIiVzXCInLCBoYWxpZ24gKyBzdHlsZSksXG4gICAgICAgICAgICAgICAgICAgIHNwcmludGYoJyByb3dzcGFuPVwiJXNcIicsIGNvbHVtbi5yb3dzcGFuKSxcbiAgICAgICAgICAgICAgICAgICAgc3ByaW50ZignIGNvbHNwYW49XCIlc1wiJywgY29sdW1uLmNvbHNwYW4pLFxuICAgICAgICAgICAgICAgICAgICBzcHJpbnRmKCcgZGF0YS1maWVsZD1cIiVzXCInLCBjb2x1bW4uZmllbGQpLFxuICAgICAgICAgICAgICAgICAgICAnPicpO1xuXG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKHNwcmludGYoJzxkaXYgY2xhc3M9XCJ0aC1pbm5lciAlc1wiPicsIHRoYXQub3B0aW9ucy5zb3J0YWJsZSAmJiBjb2x1bW4uc29ydGFibGUgP1xuICAgICAgICAgICAgICAgICAgICAnc29ydGFibGUgYm90aCcgOiAnJykpO1xuXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRoYXQub3B0aW9ucy5lc2NhcGUgPyBlc2NhcGVIVE1MKGNvbHVtbi50aXRsZSkgOiBjb2x1bW4udGl0bGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmNoZWNrYm94KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhhdC5vcHRpb25zLnNpbmdsZVNlbGVjdCAmJiB0aGF0Lm9wdGlvbnMuY2hlY2tib3hIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSAnPGlucHV0IG5hbWU9XCJidFNlbGVjdEFsbFwiIHR5cGU9XCJjaGVja2JveFwiIC8+JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGF0LmhlYWRlci5zdGF0ZUZpZWxkID0gY29sdW1uLmZpZWxkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLnJhZGlvKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5oZWFkZXIuc3RhdGVGaWVsZCA9IGNvbHVtbi5maWVsZDtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLnNpbmdsZVNlbGVjdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKHRleHQpO1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8ZGl2IGNsYXNzPVwiZmh0LWNlbGxcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goJzwvZGl2PicpO1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPC90aD4nKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaHRtbC5wdXNoKCc8L3RyPicpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiRoZWFkZXIuaHRtbChodG1sLmpvaW4oJycpKTtcbiAgICAgICAgdGhpcy4kaGVhZGVyLmZpbmQoJ3RoW2RhdGEtZmllbGRdJykuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgJCh0aGlzKS5kYXRhKHZpc2libGVDb2x1bW5zWyQodGhpcykuZGF0YSgnZmllbGQnKV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLm9mZignY2xpY2snLCAnLnRoLWlubmVyJykub24oJ2NsaWNrJywgJy50aC1pbm5lcicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMuZGV0YWlsVmlldykge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmJvb3RzdHJhcC10YWJsZScpWzBdICE9PSB0aGF0LiRjb250YWluZXJbMF0pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoYXQub3B0aW9ucy5zb3J0YWJsZSAmJiB0YXJnZXQucGFyZW50KCkuZGF0YSgpLnNvcnRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5vblNvcnQoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiRoZWFkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLm9mZigna2V5cHJlc3MnKS5vbigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMuc29ydGFibGUgJiYgJCh0aGlzKS5kYXRhKCkuc29ydGFibGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2g7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT0gMTMpIHsgLy9FbnRlciBrZXljb2RlXG4gICAgICAgICAgICAgICAgICAgIHRoYXQub25Tb3J0KGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5ib290c3RyYXAtdGFibGUnKTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0hlYWRlciB8fCB0aGlzLm9wdGlvbnMuY2FyZFZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMuJGhlYWRlci5oaWRlKCk7XG4gICAgICAgICAgICB0aGlzLiR0YWJsZUhlYWRlci5oaWRlKCk7XG4gICAgICAgICAgICB0aGlzLiR0YWJsZUxvYWRpbmcuY3NzKCd0b3AnLCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJGhlYWRlci5zaG93KCk7XG4gICAgICAgICAgICB0aGlzLiR0YWJsZUhlYWRlci5zaG93KCk7XG4gICAgICAgICAgICB0aGlzLiR0YWJsZUxvYWRpbmcuY3NzKCd0b3AnLCB0aGlzLiRoZWFkZXIub3V0ZXJIZWlnaHQoKSArIDEpO1xuICAgICAgICAgICAgLy8gQXNzaWduIHRoZSBjb3JyZWN0IHNvcnRhYmxlIGFycm93XG4gICAgICAgICAgICB0aGlzLmdldENhcmV0KCk7XG4gICAgICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5ib290c3RyYXAtdGFibGUnLCAkLnByb3h5KHRoaXMucmVzZXRXaWR0aCwgdGhpcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kc2VsZWN0QWxsID0gdGhpcy4kaGVhZGVyLmZpbmQoJ1tuYW1lPVwiYnRTZWxlY3RBbGxcIl0nKTtcbiAgICAgICAgdGhpcy4kc2VsZWN0QWxsLm9mZignY2xpY2snKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoZWNrZWQgPSAkKHRoaXMpLnByb3AoJ2NoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICB0aGF0W2NoZWNrZWQgPyAnY2hlY2tBbGwnIDogJ3VuY2hlY2tBbGwnXSgpO1xuICAgICAgICAgICAgICAgIHRoYXQudXBkYXRlU2VsZWN0ZWQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdEZvb3RlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0Zvb3RlciB8fCB0aGlzLm9wdGlvbnMuY2FyZFZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMuJHRhYmxlRm9vdGVyLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJHRhYmxlRm9vdGVyLnNob3coKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqIEBwYXJhbSB0eXBlOiBhcHBlbmQgLyBwcmVwZW5kXG4gICAgICovXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXREYXRhID0gZnVuY3Rpb24gKGRhdGEsIHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdhcHBlbmQnKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmRhdGEuY29uY2F0KGRhdGEpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdwcmVwZW5kJykge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gW10uY29uY2F0KGRhdGEpLmNvbmNhdCh0aGlzLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YSB8fCB0aGlzLm9wdGlvbnMuZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpeCAjODM5IFJlY29yZHMgZGVsZXRlZCB3aGVuIGFkZGluZyBuZXcgcm93IG9uIGZpbHRlcmVkIHRhYmxlXG4gICAgICAgIGlmICh0eXBlID09PSAnYXBwZW5kJykge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRhdGEgPSB0aGlzLm9wdGlvbnMuZGF0YS5jb25jYXQoZGF0YSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3ByZXBlbmQnKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGF0YSA9IFtdLmNvbmNhdChkYXRhKS5jb25jYXQodGhpcy5vcHRpb25zLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpZGVQYWdpbmF0aW9uID09PSAnc2VydmVyJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdFNvcnQoKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRTb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICBuYW1lID0gdGhpcy5vcHRpb25zLnNvcnROYW1lLFxuICAgICAgICAgICAgb3JkZXIgPSB0aGlzLm9wdGlvbnMuc29ydE9yZGVyID09PSAnZGVzYycgPyAtMSA6IDEsXG4gICAgICAgICAgICBpbmRleCA9ICQuaW5BcnJheSh0aGlzLm9wdGlvbnMuc29ydE5hbWUsIHRoaXMuaGVhZGVyLmZpZWxkcyksXG4gICAgICAgICAgICB0aW1lb3V0SWQgPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY3VzdG9tU29ydCAhPT0gJC5ub29wKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuY3VzdG9tU29ydC5hcHBseSh0aGlzLCBbdGhpcy5vcHRpb25zLnNvcnROYW1lLCB0aGlzLm9wdGlvbnMuc29ydE9yZGVyXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNvcnRTdGFibGUpIHtcbiAgICAgICAgICAgICAgICAkLmVhY2godGhpcy5kYXRhLCBmdW5jdGlvbiAoaSwgcm93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcm93Lmhhc093blByb3BlcnR5KCdfcG9zaXRpb24nKSkgcm93Ll9wb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZGF0YS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoYXQuaGVhZGVyLnNvcnROYW1lc1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IHRoYXQuaGVhZGVyLnNvcnROYW1lc1tpbmRleF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhYSA9IGdldEl0ZW1GaWVsZChhLCBuYW1lLCB0aGF0Lm9wdGlvbnMuZXNjYXBlKSxcbiAgICAgICAgICAgICAgICAgICAgYmIgPSBnZXRJdGVtRmllbGQoYiwgbmFtZSwgdGhhdC5vcHRpb25zLmVzY2FwZSksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY2FsY3VsYXRlT2JqZWN0VmFsdWUodGhhdC5oZWFkZXIsIHRoYXQuaGVhZGVyLnNvcnRlcnNbaW5kZXhdLCBbYWEsIGJiXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JkZXIgKiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBGaXggIzE2MTogdW5kZWZpbmVkIG9yIG51bGwgc3RyaW5nIHNvcnQgYnVnLlxuICAgICAgICAgICAgICAgIGlmIChhYSA9PT0gdW5kZWZpbmVkIHx8IGFhID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGFhID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChiYiA9PT0gdW5kZWZpbmVkIHx8IGJiID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGJiID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoYXQub3B0aW9ucy5zb3J0U3RhYmxlICYmIGFhID09PSBiYikge1xuICAgICAgICAgICAgICAgICAgICBhYSA9IGEuX3Bvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICBiYiA9IGIuX3Bvc2l0aW9uO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElGIGJvdGggdmFsdWVzIGFyZSBudW1lcmljLCBkbyBhIG51bWVyaWMgY29tcGFyaXNvblxuICAgICAgICAgICAgICAgIGlmICgkLmlzTnVtZXJpYyhhYSkgJiYgJC5pc051bWVyaWMoYmIpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgbnVtZXJpY2FsIHZhbHVlcyBmb3JtIHN0cmluZyB0byBmbG9hdC5cbiAgICAgICAgICAgICAgICAgICAgYWEgPSBwYXJzZUZsb2F0KGFhKTtcbiAgICAgICAgICAgICAgICAgICAgYmIgPSBwYXJzZUZsb2F0KGJiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFhIDwgYmIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmRlciAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmRlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoYWEgPT09IGJiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIHZhbHVlIGlzIG5vdCBhIHN0cmluZywgY29udmVydCB0byBzdHJpbmdcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFhICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBhYSA9IGFhLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGFhLmxvY2FsZUNvbXBhcmUoYmIpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JkZXIgKiAtMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gb3JkZXI7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zb3J0Q2xhc3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LiRlbC5yZW1vdmVDbGFzcyh0aGF0Lm9wdGlvbnMuc29ydENsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhhdC4kaGVhZGVyLmZpbmQoc3ByaW50ZignW2RhdGEtZmllbGQ9XCIlc1wiXScsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuc29ydE5hbWUpLmluZGV4KCkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC4kZWwuZmluZChzcHJpbnRmKCd0ciB0ZDpudGgtY2hpbGQoJXMpJywgaW5kZXgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKHRoYXQub3B0aW9ucy5zb3J0Q2xhc3MpO1xuICAgICAgICAgICAgICAgIH0sIDI1MCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLm9uU29ydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgJHRoaXMgPSBldmVudC50eXBlID09PSBcImtleXByZXNzXCIgPyAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpIDogJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnQoKSxcbiAgICAgICAgICAgICR0aGlzXyA9IHRoaXMuJGhlYWRlci5maW5kKCd0aCcpLmVxKCR0aGlzLmluZGV4KCkpO1xuXG4gICAgICAgIHRoaXMuJGhlYWRlci5hZGQodGhpcy4kaGVhZGVyXykuZmluZCgnc3Bhbi5vcmRlcicpLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc29ydE5hbWUgPT09ICR0aGlzLmRhdGEoJ2ZpZWxkJykpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zb3J0T3JkZXIgPSB0aGlzLm9wdGlvbnMuc29ydE9yZGVyID09PSAnYXNjJyA/ICdkZXNjJyA6ICdhc2MnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNvcnROYW1lID0gJHRoaXMuZGF0YSgnZmllbGQnKTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zb3J0T3JkZXIgPSAkdGhpcy5kYXRhKCdvcmRlcicpID09PSAnYXNjJyA/ICdkZXNjJyA6ICdhc2MnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJpZ2dlcignc29ydCcsIHRoaXMub3B0aW9ucy5zb3J0TmFtZSwgdGhpcy5vcHRpb25zLnNvcnRPcmRlcik7XG5cbiAgICAgICAgJHRoaXMuYWRkKCR0aGlzXykuZGF0YSgnb3JkZXInLCB0aGlzLm9wdGlvbnMuc29ydE9yZGVyKTtcblxuICAgICAgICAvLyBBc3NpZ24gdGhlIGNvcnJlY3Qgc29ydGFibGUgYXJyb3dcbiAgICAgICAgdGhpcy5nZXRDYXJldCgpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lkZVBhZ2luYXRpb24gPT09ICdzZXJ2ZXInKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRTZXJ2ZXIodGhpcy5vcHRpb25zLnNpbGVudFNvcnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbml0U29ydCgpO1xuICAgICAgICB0aGlzLmluaXRCb2R5KCk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0VG9vbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgaHRtbCA9IFtdLFxuICAgICAgICAgICAgdGltZW91dElkID0gMCxcbiAgICAgICAgICAgICRrZWVwT3BlbixcbiAgICAgICAgICAgICRzZWFyY2gsXG4gICAgICAgICAgICBzd2l0Y2hhYmxlQ291bnQgPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLiR0b29sYmFyLmZpbmQoJy5icy1iYXJzJykuY2hpbGRyZW4oKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICQoJ2JvZHknKS5hcHBlbmQoJCh0aGlzLm9wdGlvbnMudG9vbGJhcikpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJHRvb2xiYXIuaHRtbCgnJyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMudG9vbGJhciA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRoaXMub3B0aW9ucy50b29sYmFyID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgJChzcHJpbnRmKCc8ZGl2IGNsYXNzPVwiYnMtYmFycyBwdWxsLSVzXCI+PC9kaXY+JywgdGhpcy5vcHRpb25zLnRvb2xiYXJBbGlnbikpXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKHRoaXMuJHRvb2xiYXIpXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgkKHRoaXMub3B0aW9ucy50b29sYmFyKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93Q29sdW1ucywgc2hvd1RvZ2dsZSwgc2hvd1JlZnJlc2hcbiAgICAgICAgaHRtbCA9IFtzcHJpbnRmKCc8ZGl2IGNsYXNzPVwiY29sdW1ucyBjb2x1bW5zLSVzIGJ0bi1ncm91cCBwdWxsLSVzXCI+JyxcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5idXR0b25zQWxpZ24sIHRoaXMub3B0aW9ucy5idXR0b25zQWxpZ24pXTtcblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5pY29ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5pY29ucyA9IGNhbGN1bGF0ZU9iamVjdFZhbHVlKG51bGwsIHRoaXMub3B0aW9ucy5pY29ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dQYWdpbmF0aW9uU3dpdGNoKSB7XG4gICAgICAgICAgICBodG1sLnB1c2goc3ByaW50ZignPGJ1dHRvbiBjbGFzcz1cImJ0bicgK1xuICAgICAgICAgICAgICAgICAgICBzcHJpbnRmKCcgYnRuLSVzJywgdGhpcy5vcHRpb25zLmJ1dHRvbnNDbGFzcykgK1xuICAgICAgICAgICAgICAgICAgICBzcHJpbnRmKCcgYnRuLSVzJywgdGhpcy5vcHRpb25zLmljb25TaXplKSArXG4gICAgICAgICAgICAgICAgICAgICdcIiB0eXBlPVwiYnV0dG9uXCIgbmFtZT1cInBhZ2luYXRpb25Td2l0Y2hcIiBhcmlhLWxhYmVsPVwicGFnaW5hdGlvbiBTd2l0Y2hcIiB0aXRsZT1cIiVzXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmZvcm1hdFBhZ2luYXRpb25Td2l0Y2goKSksXG4gICAgICAgICAgICAgICAgc3ByaW50ZignPGkgY2xhc3M9XCIlcyAlc1wiPjwvaT4nLCB0aGlzLm9wdGlvbnMuaWNvbnNQcmVmaXgsIHRoaXMub3B0aW9ucy5pY29ucy5wYWdpbmF0aW9uU3dpdGNoRG93biksXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93UmVmcmVzaCkge1xuICAgICAgICAgICAgaHRtbC5wdXNoKHNwcmludGYoJzxidXR0b24gY2xhc3M9XCJidG4nICtcbiAgICAgICAgICAgICAgICAgICAgc3ByaW50ZignIGJ0bi0lcycsIHRoaXMub3B0aW9ucy5idXR0b25zQ2xhc3MpICtcbiAgICAgICAgICAgICAgICAgICAgc3ByaW50ZignIGJ0bi0lcycsIHRoaXMub3B0aW9ucy5pY29uU2l6ZSkgK1xuICAgICAgICAgICAgICAgICAgICAnXCIgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJyZWZyZXNoXCIgYXJpYS1sYWJlbD1cInJlZnJlc2hcIiB0aXRsZT1cIiVzXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmZvcm1hdFJlZnJlc2goKSksXG4gICAgICAgICAgICAgICAgc3ByaW50ZignPGkgY2xhc3M9XCIlcyAlc1wiPjwvaT4nLCB0aGlzLm9wdGlvbnMuaWNvbnNQcmVmaXgsIHRoaXMub3B0aW9ucy5pY29ucy5yZWZyZXNoKSxcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dUb2dnbGUpIHtcbiAgICAgICAgICAgIGh0bWwucHVzaChzcHJpbnRmKCc8YnV0dG9uIGNsYXNzPVwiYnRuJyArXG4gICAgICAgICAgICAgICAgICAgIHNwcmludGYoJyBidG4tJXMnLCB0aGlzLm9wdGlvbnMuYnV0dG9uc0NsYXNzKSArXG4gICAgICAgICAgICAgICAgICAgIHNwcmludGYoJyBidG4tJXMnLCB0aGlzLm9wdGlvbnMuaWNvblNpemUpICtcbiAgICAgICAgICAgICAgICAgICAgJ1wiIHR5cGU9XCJidXR0b25cIiBuYW1lPVwidG9nZ2xlXCIgYXJpYS1sYWJlbD1cInRvZ2dsZVwiIHRpdGxlPVwiJXNcIj4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZm9ybWF0VG9nZ2xlKCkpLFxuICAgICAgICAgICAgICAgIHNwcmludGYoJzxpIGNsYXNzPVwiJXMgJXNcIj48L2k+JywgdGhpcy5vcHRpb25zLmljb25zUHJlZml4LCB0aGlzLm9wdGlvbnMuaWNvbnMudG9nZ2xlKSxcbiAgICAgICAgICAgICAgICAnPC9idXR0b24+Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dDb2x1bW5zKSB7XG4gICAgICAgICAgICBodG1sLnB1c2goc3ByaW50ZignPGRpdiBjbGFzcz1cImtlZXAtb3BlbiBidG4tZ3JvdXBcIiB0aXRsZT1cIiVzXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmZvcm1hdENvbHVtbnMoKSksXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGFyaWEtbGFiZWw9XCJjb2x1bW5zXCIgY2xhc3M9XCJidG4nICtcbiAgICAgICAgICAgICAgICBzcHJpbnRmKCcgYnRuLSVzJywgdGhpcy5vcHRpb25zLmJ1dHRvbnNDbGFzcykgK1xuICAgICAgICAgICAgICAgIHNwcmludGYoJyBidG4tJXMnLCB0aGlzLm9wdGlvbnMuaWNvblNpemUpICtcbiAgICAgICAgICAgICAgICAnIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIj4nLFxuICAgICAgICAgICAgICAgIHNwcmludGYoJzxpIGNsYXNzPVwiJXMgJXNcIj48L2k+JywgdGhpcy5vcHRpb25zLmljb25zUHJlZml4LCB0aGlzLm9wdGlvbnMuaWNvbnMuY29sdW1ucyksXG4gICAgICAgICAgICAgICAgJyA8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgJzwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgJzx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiByb2xlPVwibWVudVwiPicpO1xuXG4gICAgICAgICAgICAkLmVhY2godGhpcy5jb2x1bW5zLCBmdW5jdGlvbiAoaSwgY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5yYWRpbyB8fCBjb2x1bW4uY2hlY2tib3gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMuY2FyZFZpZXcgJiYgIWNvbHVtbi5jYXJkVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNoZWNrZWQgPSBjb2x1bW4udmlzaWJsZSA/ICcgY2hlY2tlZD1cImNoZWNrZWRcIicgOiAnJztcblxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW4uc3dpdGNoYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2goc3ByaW50ZignPGxpIHJvbGU9XCJtZW51aXRlbVwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgZGF0YS1maWVsZD1cIiVzXCIgdmFsdWU9XCIlc1wiJXM+ICVzPC9sYWJlbD4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2xpPicsIGNvbHVtbi5maWVsZCwgaSwgY2hlY2tlZCwgY29sdW1uLnRpdGxlKSk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaGFibGVDb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaHRtbC5wdXNoKCc8L3VsPicsXG4gICAgICAgICAgICAgICAgJzwvZGl2PicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaHRtbC5wdXNoKCc8L2Rpdj4nKTtcblxuICAgICAgICAvLyBGaXggIzE4ODogdGhpcy5zaG93VG9vbGJhciBpcyBmb3IgZXh0ZW5zaW9uc1xuICAgICAgICBpZiAodGhpcy5zaG93VG9vbGJhciB8fCBodG1sLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIHRoaXMuJHRvb2xiYXIuYXBwZW5kKGh0bWwuam9pbignJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93UGFnaW5hdGlvblN3aXRjaCkge1xuICAgICAgICAgICAgdGhpcy4kdG9vbGJhci5maW5kKCdidXR0b25bbmFtZT1cInBhZ2luYXRpb25Td2l0Y2hcIl0nKVxuICAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgJC5wcm94eSh0aGlzLnRvZ2dsZVBhZ2luYXRpb24sIHRoaXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd1JlZnJlc2gpIHtcbiAgICAgICAgICAgIHRoaXMuJHRvb2xiYXIuZmluZCgnYnV0dG9uW25hbWU9XCJyZWZyZXNoXCJdJylcbiAgICAgICAgICAgICAgICAub2ZmKCdjbGljaycpLm9uKCdjbGljaycsICQucHJveHkodGhpcy5yZWZyZXNoLCB0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dUb2dnbGUpIHtcbiAgICAgICAgICAgIHRoaXMuJHRvb2xiYXIuZmluZCgnYnV0dG9uW25hbWU9XCJ0b2dnbGVcIl0nKVxuICAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnRvZ2dsZVZpZXcoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0NvbHVtbnMpIHtcbiAgICAgICAgICAgICRrZWVwT3BlbiA9IHRoaXMuJHRvb2xiYXIuZmluZCgnLmtlZXAtb3BlbicpO1xuXG4gICAgICAgICAgICBpZiAoc3dpdGNoYWJsZUNvdW50IDw9IHRoaXMub3B0aW9ucy5taW5pbXVtQ291bnRDb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgJGtlZXBPcGVuLmZpbmQoJ2lucHV0JykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJGtlZXBPcGVuLmZpbmQoJ2xpJykub2ZmKCdjbGljaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAka2VlcE9wZW4uZmluZCgnaW5wdXQnKS5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICB0aGF0LnRvZ2dsZUNvbHVtbigkKHRoaXMpLnZhbCgpLCAkdGhpcy5wcm9wKCdjaGVja2VkJyksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGF0LnRyaWdnZXIoJ2NvbHVtbi1zd2l0Y2gnLCAkKHRoaXMpLmRhdGEoJ2ZpZWxkJyksICR0aGlzLnByb3AoJ2NoZWNrZWQnKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2VhcmNoKSB7XG4gICAgICAgICAgICBodG1sID0gW107XG4gICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJwdWxsLScgKyB0aGlzLm9wdGlvbnMuc2VhcmNoQWxpZ24gKyAnIHNlYXJjaFwiPicsXG4gICAgICAgICAgICAgICAgc3ByaW50ZignPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sJyArXG4gICAgICAgICAgICAgICAgICAgIHNwcmludGYoJyBpbnB1dC0lcycsIHRoaXMub3B0aW9ucy5pY29uU2l6ZSkgK1xuICAgICAgICAgICAgICAgICAgICAnXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIiVzXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmZvcm1hdFNlYXJjaCgpKSxcbiAgICAgICAgICAgICAgICAnPC9kaXY+Jyk7XG5cbiAgICAgICAgICAgIHRoaXMuJHRvb2xiYXIuYXBwZW5kKGh0bWwuam9pbignJykpO1xuICAgICAgICAgICAgJHNlYXJjaCA9IHRoaXMuJHRvb2xiYXIuZmluZCgnLnNlYXJjaCBpbnB1dCcpO1xuICAgICAgICAgICAgJHNlYXJjaC5vZmYoJ2tleXVwIGRyb3AgYmx1cicpLm9uKCdrZXl1cCBkcm9wIGJsdXInLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLnNlYXJjaE9uRW50ZXJLZXkgJiYgZXZlbnQua2V5Q29kZSAhPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoZXZlbnQua2V5Q29kZSwgWzM3LCAzOCwgMzksIDQwXSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7IC8vIGRvZXNuJ3QgbWF0dGVyIGlmIGl0J3MgMFxuICAgICAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Lm9uU2VhcmNoKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9LCB0aGF0Lm9wdGlvbnMuc2VhcmNoVGltZU91dCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGlzSUVCcm93c2VyKCkpIHtcbiAgICAgICAgICAgICAgICAkc2VhcmNoLm9mZignbW91c2V1cCcpLm9uKCdtb3VzZXVwJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpOyAvLyBkb2Vzbid0IG1hdHRlciBpZiBpdCdzIDBcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9uU2VhcmNoKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhhdC5vcHRpb25zLnNlYXJjaFRpbWVPdXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5vblNlYXJjaCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgdGV4dCA9ICQudHJpbSgkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnZhbCgpKTtcblxuICAgICAgICAvLyB0cmltIHNlYXJjaCBpbnB1dFxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRyaW1PblNlYXJjaCAmJiAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnZhbCgpICE9PSB0ZXh0KSB7XG4gICAgICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnZhbCh0ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0ZXh0ID09PSB0aGlzLnNlYXJjaFRleHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlYXJjaFRleHQgPSB0ZXh0O1xuICAgICAgICB0aGlzLm9wdGlvbnMuc2VhcmNoVGV4dCA9IHRleHQ7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIgPSAxO1xuICAgICAgICB0aGlzLmluaXRTZWFyY2goKTtcbiAgICAgICAgdGhpcy51cGRhdGVQYWdpbmF0aW9uKCk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignc2VhcmNoJywgdGV4dCk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0U2VhcmNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaWRlUGFnaW5hdGlvbiAhPT0gJ3NlcnZlcicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY3VzdG9tU2VhcmNoICE9PSAkLm5vb3ApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuY3VzdG9tU2VhcmNoLmFwcGx5KHRoaXMsIFt0aGlzLnNlYXJjaFRleHRdKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzID0gdGhpcy5zZWFyY2hUZXh0ICYmICh0aGlzLm9wdGlvbnMuZXNjYXBlID9cbiAgICAgICAgICAgICAgICBlc2NhcGVIVE1MKHRoaXMuc2VhcmNoVGV4dCkgOiB0aGlzLnNlYXJjaFRleHQpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB2YXIgZiA9ICQuaXNFbXB0eU9iamVjdCh0aGlzLmZpbHRlckNvbHVtbnMpID8gbnVsbCA6IHRoaXMuZmlsdGVyQ29sdW1ucztcblxuICAgICAgICAgICAgLy8gQ2hlY2sgZmlsdGVyXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBmID8gJC5ncmVwKHRoaXMub3B0aW9ucy5kYXRhLCBmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBmKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkLmlzQXJyYXkoZltrZXldKSAmJiAkLmluQXJyYXkoaXRlbVtrZXldLCBmW2tleV0pID09PSAtMSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICEkLmlzQXJyYXkoZltrZXldKSAmJiBpdGVtW2tleV0gIT09IGZba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSkgOiB0aGlzLm9wdGlvbnMuZGF0YTtcblxuICAgICAgICAgICAgdGhpcy5kYXRhID0gcyA/ICQuZ3JlcCh0aGlzLmRhdGEsIGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGF0LmhlYWRlci5maWVsZHMubGVuZ3RoOyBqKyspIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoYXQuaGVhZGVyLnNlYXJjaGFibGVzW2pdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSAkLmlzTnVtZXJpYyh0aGF0LmhlYWRlci5maWVsZHNbal0pID8gcGFyc2VJbnQodGhhdC5oZWFkZXIuZmllbGRzW2pdLCAxMCkgOiB0aGF0LmhlYWRlci5maWVsZHNbal07XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW4gPSB0aGF0LmNvbHVtbnNbZ2V0RmllbGRJbmRleCh0aGF0LmNvbHVtbnMsIGtleSldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGl0ZW07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcHMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BfaW5kZXggPSAwOyBwcm9wX2luZGV4IDwgcHJvcHMubGVuZ3RoOyBwcm9wX2luZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlW3Byb3BzW3Byb3BfaW5kZXhdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRml4ICMxNDI6IHJlc3BlY3Qgc2VhcmNoRm9yYW10dGVyIGJvb2xlYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW4gJiYgY29sdW1uLnNlYXJjaEZvcm1hdHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY2FsY3VsYXRlT2JqZWN0VmFsdWUoY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmhlYWRlci5mb3JtYXR0ZXJzW2pdLCBbdmFsdWUsIGl0ZW0sIGldLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGl0ZW1ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMuc3RyaWN0U2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh2YWx1ZSArICcnKS50b0xvd2VyQ2FzZSgpID09PSBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh2YWx1ZSArICcnKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YocykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KSA6IHRoaXMuZGF0YTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdFBhZ2luYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnBhZ2luYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuJHBhZ2luYXRpb24uaGlkZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kcGFnaW5hdGlvbi5zaG93KCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICBodG1sID0gW10sXG4gICAgICAgICAgICAkYWxsU2VsZWN0ZWQgPSBmYWxzZSxcbiAgICAgICAgICAgIGksIGZyb20sIHRvLFxuICAgICAgICAgICAgJHBhZ2VMaXN0LFxuICAgICAgICAgICAgJGZpcnN0LCAkcHJlLFxuICAgICAgICAgICAgJG5leHQsICRsYXN0LFxuICAgICAgICAgICAgJG51bWJlcixcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLmdldERhdGEoKSxcbiAgICAgICAgICAgIHBhZ2VMaXN0ID0gdGhpcy5vcHRpb25zLnBhZ2VMaXN0O1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lkZVBhZ2luYXRpb24gIT09ICdzZXJ2ZXInKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudG90YWxSb3dzID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvdGFsUGFnZXMgPSAwO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRvdGFsUm93cykge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYWdlU2l6ZSA9PT0gdGhpcy5vcHRpb25zLmZvcm1hdEFsbFJvd3MoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wYWdlU2l6ZSA9IHRoaXMub3B0aW9ucy50b3RhbFJvd3M7XG4gICAgICAgICAgICAgICAgJGFsbFNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnBhZ2VTaXplID09PSB0aGlzLm9wdGlvbnMudG90YWxSb3dzKSB7XG4gICAgICAgICAgICAgICAgLy8gRml4ICM2NjcgVGFibGUgd2l0aCBwYWdpbmF0aW9uLFxuICAgICAgICAgICAgICAgIC8vIG11bHRpcGxlIHBhZ2VzIGFuZCBhIHNlYXJjaCB0aGF0IG1hdGNoZXMgdG8gb25lIHBhZ2UgdGhyb3dzIGV4Y2VwdGlvblxuICAgICAgICAgICAgICAgIHZhciBwYWdlTHN0ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5wYWdlTGlzdCA9PT0gJ3N0cmluZycgP1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucGFnZUxpc3QucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvIC9nLCAnJykudG9Mb3dlckNhc2UoKS5zcGxpdCgnLCcpIDogdGhpcy5vcHRpb25zLnBhZ2VMaXN0O1xuICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkodGhpcy5vcHRpb25zLmZvcm1hdEFsbFJvd3MoKS50b0xvd2VyQ2FzZSgpLCBwYWdlTHN0KSAgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAkYWxsU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50b3RhbFBhZ2VzID0gfn4oKHRoaXMub3B0aW9ucy50b3RhbFJvd3MgLSAxKSAvIHRoaXMub3B0aW9ucy5wYWdlU2l6ZSkgKyAxO1xuXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudG90YWxQYWdlcyA9IHRoaXMudG90YWxQYWdlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50b3RhbFBhZ2VzID4gMCAmJiB0aGlzLm9wdGlvbnMucGFnZU51bWJlciA+IHRoaXMudG90YWxQYWdlcykge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIgPSB0aGlzLnRvdGFsUGFnZXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBhZ2VGcm9tID0gKHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyIC0gMSkgKiB0aGlzLm9wdGlvbnMucGFnZVNpemUgKyAxO1xuICAgICAgICB0aGlzLnBhZ2VUbyA9IHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyICogdGhpcy5vcHRpb25zLnBhZ2VTaXplO1xuICAgICAgICBpZiAodGhpcy5wYWdlVG8gPiB0aGlzLm9wdGlvbnMudG90YWxSb3dzKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2VUbyA9IHRoaXMub3B0aW9ucy50b3RhbFJvd3M7XG4gICAgICAgIH1cblxuICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInB1bGwtJyArIHRoaXMub3B0aW9ucy5wYWdpbmF0aW9uRGV0YWlsSEFsaWduICsgJyBwYWdpbmF0aW9uLWRldGFpbFwiPicsXG4gICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwYWdpbmF0aW9uLWluZm9cIj4nLFxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLm9ubHlJbmZvUGFnaW5hdGlvbiA/IHRoaXMub3B0aW9ucy5mb3JtYXREZXRhaWxQYWdpbmF0aW9uKHRoaXMub3B0aW9ucy50b3RhbFJvd3MpIDpcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5mb3JtYXRTaG93aW5nUm93cyh0aGlzLnBhZ2VGcm9tLCB0aGlzLnBhZ2VUbywgdGhpcy5vcHRpb25zLnRvdGFsUm93cyksXG4gICAgICAgICAgICAnPC9zcGFuPicpO1xuXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLm9ubHlJbmZvUGFnaW5hdGlvbikge1xuICAgICAgICAgICAgaHRtbC5wdXNoKCc8c3BhbiBjbGFzcz1cInBhZ2UtbGlzdFwiPicpO1xuXG4gICAgICAgICAgICB2YXIgcGFnZU51bWJlciA9IFtcbiAgICAgICAgICAgICAgICAgICAgc3ByaW50ZignPHNwYW4gY2xhc3M9XCJidG4tZ3JvdXAgJXNcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2luYXRpb25WQWxpZ24gPT09ICd0b3AnIHx8IHRoaXMub3B0aW9ucy5wYWdpbmF0aW9uVkFsaWduID09PSAnYm90aCcgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkcm9wZG93bicgOiAnZHJvcHVwJyksXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0bicgK1xuICAgICAgICAgICAgICAgICAgICBzcHJpbnRmKCcgYnRuLSVzJywgdGhpcy5vcHRpb25zLmJ1dHRvbnNDbGFzcykgK1xuICAgICAgICAgICAgICAgICAgICBzcHJpbnRmKCcgYnRuLSVzJywgdGhpcy5vcHRpb25zLmljb25TaXplKSArXG4gICAgICAgICAgICAgICAgICAgICcgZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiPicsXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBhZ2Utc2l6ZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICRhbGxTZWxlY3RlZCA/IHRoaXMub3B0aW9ucy5mb3JtYXRBbGxSb3dzKCkgOiB0aGlzLm9wdGlvbnMucGFnZVNpemUsXG4gICAgICAgICAgICAgICAgICAgICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJyA8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiIHJvbGU9XCJtZW51XCI+J1xuICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnBhZ2VMaXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gdGhpcy5vcHRpb25zLnBhZ2VMaXN0LnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvIC9nLCAnJykuc3BsaXQoJywnKTtcblxuICAgICAgICAgICAgICAgIHBhZ2VMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgJC5lYWNoKGxpc3QsIGZ1bmN0aW9uIChpLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBwYWdlTGlzdC5wdXNoKHZhbHVlLnRvVXBwZXJDYXNlKCkgPT09IHRoYXQub3B0aW9ucy5mb3JtYXRBbGxSb3dzKCkudG9VcHBlckNhc2UoKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuZm9ybWF0QWxsUm93cygpIDogK3ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJC5lYWNoKHBhZ2VMaXN0LCBmdW5jdGlvbiAoaSwgcGFnZSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhhdC5vcHRpb25zLnNtYXJ0RGlzcGxheSB8fCBpID09PSAwIHx8IHBhZ2VMaXN0W2kgLSAxXSA8IHRoYXQub3B0aW9ucy50b3RhbFJvd3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRhbGxTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gcGFnZSA9PT0gdGhhdC5vcHRpb25zLmZvcm1hdEFsbFJvd3MoKSA/ICcgY2xhc3M9XCJhY3RpdmVcIicgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IHBhZ2UgPT09IHRoYXQub3B0aW9ucy5wYWdlU2l6ZSA/ICcgY2xhc3M9XCJhY3RpdmVcIicgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYWdlTnVtYmVyLnB1c2goc3ByaW50ZignPGxpIHJvbGU9XCJtZW51aXRlbVwiJXM+PGEgaHJlZj1cIiNcIj4lczwvYT48L2xpPicsIGFjdGl2ZSwgcGFnZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGFnZU51bWJlci5wdXNoKCc8L3VsPjwvc3Bhbj4nKTtcblxuICAgICAgICAgICAgaHRtbC5wdXNoKHRoaXMub3B0aW9ucy5mb3JtYXRSZWNvcmRzUGVyUGFnZShwYWdlTnVtYmVyLmpvaW4oJycpKSk7XG4gICAgICAgICAgICBodG1sLnB1c2goJzwvc3Bhbj4nKTtcblxuICAgICAgICAgICAgaHRtbC5wdXNoKCc8L2Rpdj4nLFxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicHVsbC0nICsgdGhpcy5vcHRpb25zLnBhZ2luYXRpb25IQWxpZ24gKyAnIHBhZ2luYXRpb25cIj4nLFxuICAgICAgICAgICAgICAgICc8dWwgY2xhc3M9XCJwYWdpbmF0aW9uJyArIHNwcmludGYoJyBwYWdpbmF0aW9uLSVzJywgdGhpcy5vcHRpb25zLmljb25TaXplKSArICdcIj4nLFxuICAgICAgICAgICAgICAgICc8bGkgY2xhc3M9XCJwYWdlLXByZVwiPjxhIGhyZWY9XCIjXCI+JyArIHRoaXMub3B0aW9ucy5wYWdpbmF0aW9uUHJlVGV4dCArICc8L2E+PC9saT4nKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMudG90YWxQYWdlcyA8IDUpIHtcbiAgICAgICAgICAgICAgICBmcm9tID0gMTtcbiAgICAgICAgICAgICAgICB0byA9IHRoaXMudG90YWxQYWdlcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9IHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyIC0gMjtcbiAgICAgICAgICAgICAgICB0byA9IGZyb20gKyA0O1xuICAgICAgICAgICAgICAgIGlmIChmcm9tIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICBmcm9tID0gMTtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSA1O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodG8gPiB0aGlzLnRvdGFsUGFnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSB0aGlzLnRvdGFsUGFnZXM7XG4gICAgICAgICAgICAgICAgICAgIGZyb20gPSB0byAtIDQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy50b3RhbFBhZ2VzID49IDYpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIgPj0gMykge1xuICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2goJzxsaSBjbGFzcz1cInBhZ2UtZmlyc3QnICsgKDEgPT09IHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyID8gJyBhY3RpdmUnIDogJycpICsgJ1wiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNcIj4nLCAxLCAnPC9hPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9saT4nKTtcblxuICAgICAgICAgICAgICAgICAgICBmcm9tKys7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyID49IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyID09IDQgfHwgdGhpcy50b3RhbFBhZ2VzID09IDYgfHwgdGhpcy50b3RhbFBhZ2VzID09IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20tLTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPGxpIGNsYXNzPVwicGFnZS1maXJzdC1zZXBhcmF0b3IgZGlzYWJsZWRcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YSBocmVmPVwiI1wiPi4uLjwvYT4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2xpPicpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdG8tLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnRvdGFsUGFnZXMgPj0gNykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGFnZU51bWJlciA+PSAodGhpcy50b3RhbFBhZ2VzIC0gMikpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbS0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMudG90YWxQYWdlcyA9PSA2KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyID49ICh0aGlzLnRvdGFsUGFnZXMgLSAyKSkge1xuICAgICAgICAgICAgICAgICAgICB0bysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50b3RhbFBhZ2VzID49IDcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50b3RhbFBhZ2VzID09IDcgfHwgdGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIgPj0gKHRoaXMudG90YWxQYWdlcyAtIDMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGkgPSBmcm9tOyBpIDw9IHRvOyBpKyspIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goJzxsaSBjbGFzcz1cInBhZ2UtbnVtYmVyJyArIChpID09PSB0aGlzLm9wdGlvbnMucGFnZU51bWJlciA/ICcgYWN0aXZlJyA6ICcnKSArICdcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNcIj4nLCBpLCAnPC9hPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2xpPicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy50b3RhbFBhZ2VzID49IDgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIgPD0gKHRoaXMudG90YWxQYWdlcyAtIDQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPGxpIGNsYXNzPVwicGFnZS1sYXN0LXNlcGFyYXRvciBkaXNhYmxlZFwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNcIj4uLi48L2E+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2xpPicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMudG90YWxQYWdlcyA+PSA2KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyIDw9ICh0aGlzLnRvdGFsUGFnZXMgLSAzKSkge1xuICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2goJzxsaSBjbGFzcz1cInBhZ2UtbGFzdCcgKyAodGhpcy50b3RhbFBhZ2VzID09PSB0aGlzLm9wdGlvbnMucGFnZU51bWJlciA/ICcgYWN0aXZlJyA6ICcnKSArICdcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxhIGhyZWY9XCIjXCI+JywgdGhpcy50b3RhbFBhZ2VzLCAnPC9hPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9saT4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAnPGxpIGNsYXNzPVwicGFnZS1uZXh0XCI+PGEgaHJlZj1cIiNcIj4nICsgdGhpcy5vcHRpb25zLnBhZ2luYXRpb25OZXh0VGV4dCArICc8L2E+PC9saT4nLFxuICAgICAgICAgICAgICAgICc8L3VsPicsXG4gICAgICAgICAgICAgICAgJzwvZGl2PicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJHBhZ2luYXRpb24uaHRtbChodG1sLmpvaW4oJycpKTtcblxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5vbmx5SW5mb1BhZ2luYXRpb24pIHtcbiAgICAgICAgICAgICRwYWdlTGlzdCA9IHRoaXMuJHBhZ2luYXRpb24uZmluZCgnLnBhZ2UtbGlzdCBhJyk7XG4gICAgICAgICAgICAkZmlyc3QgPSB0aGlzLiRwYWdpbmF0aW9uLmZpbmQoJy5wYWdlLWZpcnN0Jyk7XG4gICAgICAgICAgICAkcHJlID0gdGhpcy4kcGFnaW5hdGlvbi5maW5kKCcucGFnZS1wcmUnKTtcbiAgICAgICAgICAgICRuZXh0ID0gdGhpcy4kcGFnaW5hdGlvbi5maW5kKCcucGFnZS1uZXh0Jyk7XG4gICAgICAgICAgICAkbGFzdCA9IHRoaXMuJHBhZ2luYXRpb24uZmluZCgnLnBhZ2UtbGFzdCcpO1xuICAgICAgICAgICAgJG51bWJlciA9IHRoaXMuJHBhZ2luYXRpb24uZmluZCgnLnBhZ2UtbnVtYmVyJyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc21hcnREaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudG90YWxQYWdlcyA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHBhZ2luYXRpb24uZmluZCgnZGl2LnBhZ2luYXRpb24nKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYWdlTGlzdC5sZW5ndGggPCAyIHx8IHRoaXMub3B0aW9ucy50b3RhbFJvd3MgPD0gcGFnZUxpc3RbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcGFnaW5hdGlvbi5maW5kKCdzcGFuLnBhZ2UtbGlzdCcpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB3aGVuIGRhdGEgaXMgZW1wdHksIGhpZGUgdGhlIHBhZ2luYXRpb25cbiAgICAgICAgICAgICAgICB0aGlzLiRwYWdpbmF0aW9uW3RoaXMuZ2V0RGF0YSgpLmxlbmd0aCA/ICdzaG93JyA6ICdoaWRlJ10oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucGFnaW5hdGlvbkxvb3ApIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgJHByZS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyID09PSB0aGlzLnRvdGFsUGFnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgJG5leHQuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJGFsbFNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2VTaXplID0gdGhpcy5vcHRpb25zLmZvcm1hdEFsbFJvd3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRwYWdlTGlzdC5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgJC5wcm94eSh0aGlzLm9uUGFnZUxpc3RDaGFuZ2UsIHRoaXMpKTtcbiAgICAgICAgICAgICRmaXJzdC5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgJC5wcm94eSh0aGlzLm9uUGFnZUZpcnN0LCB0aGlzKSk7XG4gICAgICAgICAgICAkcHJlLm9mZignY2xpY2snKS5vbignY2xpY2snLCAkLnByb3h5KHRoaXMub25QYWdlUHJlLCB0aGlzKSk7XG4gICAgICAgICAgICAkbmV4dC5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgJC5wcm94eSh0aGlzLm9uUGFnZU5leHQsIHRoaXMpKTtcbiAgICAgICAgICAgICRsYXN0Lm9mZignY2xpY2snKS5vbignY2xpY2snLCAkLnByb3h5KHRoaXMub25QYWdlTGFzdCwgdGhpcykpO1xuICAgICAgICAgICAgJG51bWJlci5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgJC5wcm94eSh0aGlzLm9uUGFnZU51bWJlciwgdGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS51cGRhdGVQYWdpbmF0aW9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEZpeCAjMTcxOiBJRSBkaXNhYmxlZCBidXR0b24gY2FuIGJlIGNsaWNrZWQgYnVnLlxuICAgICAgICBpZiAoZXZlbnQgJiYgJChldmVudC5jdXJyZW50VGFyZ2V0KS5oYXNDbGFzcygnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubWFpbnRhaW5TZWxlY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5yZXNldFJvd3MoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5pdFBhZ2luYXRpb24oKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaWRlUGFnaW5hdGlvbiA9PT0gJ3NlcnZlcicpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdFNlcnZlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbml0Qm9keSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdwYWdlLWNoYW5nZScsIHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyLCB0aGlzLm9wdGlvbnMucGFnZVNpemUpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUub25QYWdlTGlzdENoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgJHRoaXMgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuXG4gICAgICAgICR0aGlzLnBhcmVudCgpLmFkZENsYXNzKCdhY3RpdmUnKS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2VTaXplID0gJHRoaXMudGV4dCgpLnRvVXBwZXJDYXNlKCkgPT09IHRoaXMub3B0aW9ucy5mb3JtYXRBbGxSb3dzKCkudG9VcHBlckNhc2UoKSA/XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZm9ybWF0QWxsUm93cygpIDogKyR0aGlzLnRleHQoKTtcbiAgICAgICAgdGhpcy4kdG9vbGJhci5maW5kKCcucGFnZS1zaXplJykudGV4dCh0aGlzLm9wdGlvbnMucGFnZVNpemUpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvbihldmVudCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLm9uUGFnZUZpcnN0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyID0gMTtcbiAgICAgICAgdGhpcy51cGRhdGVQYWdpbmF0aW9uKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUub25QYWdlUHJlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICgodGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIgLSAxKSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIgPSB0aGlzLm9wdGlvbnMudG90YWxQYWdlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyLS07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVQYWdpbmF0aW9uKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUub25QYWdlTmV4dCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoKHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyICsgMSkgPiB0aGlzLm9wdGlvbnMudG90YWxQYWdlcykge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIrKztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb24oZXZlbnQpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5vblBhZ2VMYXN0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyID0gdGhpcy50b3RhbFBhZ2VzO1xuICAgICAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb24oZXZlbnQpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5vblBhZ2VOdW1iZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyID09PSArJChldmVudC5jdXJyZW50VGFyZ2V0KS50ZXh0KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnMucGFnZU51bWJlciA9ICskKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnRleHQoKTtcbiAgICAgICAgdGhpcy51cGRhdGVQYWdpbmF0aW9uKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdFJvdyA9IGZ1bmN0aW9uKGl0ZW0sIGksIGRhdGEsIHBhcmVudERvbSkge1xuICAgICAgICB2YXIgdGhhdD10aGlzLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgaHRtbCA9IFtdLFxuICAgICAgICAgICAgc3R5bGUgPSB7fSxcbiAgICAgICAgICAgIGNzc2VzID0gW10sXG4gICAgICAgICAgICBkYXRhXyA9ICcnLFxuICAgICAgICAgICAgYXR0cmlidXRlcyA9IHt9LFxuICAgICAgICAgICAgaHRtbEF0dHJpYnV0ZXMgPSBbXTtcblxuICAgICAgICBpZiAoJC5pbkFycmF5KGl0ZW0sIHRoaXMuaGlkZGVuUm93cykgPiAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGUgPSBjYWxjdWxhdGVPYmplY3RWYWx1ZSh0aGlzLm9wdGlvbnMsIHRoaXMub3B0aW9ucy5yb3dTdHlsZSwgW2l0ZW0sIGldLCBzdHlsZSk7XG5cbiAgICAgICAgaWYgKHN0eWxlICYmIHN0eWxlLmNzcykge1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gc3R5bGUuY3NzKSB7XG4gICAgICAgICAgICAgICAgY3NzZXMucHVzaChrZXkgKyAnOiAnICsgc3R5bGUuY3NzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYXR0cmlidXRlcyA9IGNhbGN1bGF0ZU9iamVjdFZhbHVlKHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5yb3dBdHRyaWJ1dGVzLCBbaXRlbSwgaV0sIGF0dHJpYnV0ZXMpO1xuXG4gICAgICAgIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgaHRtbEF0dHJpYnV0ZXMucHVzaChzcHJpbnRmKCclcz1cIiVzXCInLCBrZXksIGVzY2FwZUhUTUwoYXR0cmlidXRlc1trZXldKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZW0uX2RhdGEgJiYgISQuaXNFbXB0eU9iamVjdChpdGVtLl9kYXRhKSkge1xuICAgICAgICAgICAgJC5lYWNoKGl0ZW0uX2RhdGEsIGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgZGF0YS1pbmRleFxuICAgICAgICAgICAgICAgIGlmIChrID09PSAnaW5kZXgnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YV8gKz0gc3ByaW50ZignIGRhdGEtJXM9XCIlc1wiJywgaywgdik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGh0bWwucHVzaCgnPHRyJyxcbiAgICAgICAgICAgIHNwcmludGYoJyAlcycsIGh0bWxBdHRyaWJ1dGVzLmpvaW4oJyAnKSksXG4gICAgICAgICAgICBzcHJpbnRmKCcgaWQ9XCIlc1wiJywgJC5pc0FycmF5KGl0ZW0pID8gdW5kZWZpbmVkIDogaXRlbS5faWQpLFxuICAgICAgICAgICAgc3ByaW50ZignIGNsYXNzPVwiJXNcIicsIHN0eWxlLmNsYXNzZXMgfHwgKCQuaXNBcnJheShpdGVtKSA/IHVuZGVmaW5lZCA6IGl0ZW0uX2NsYXNzKSksXG4gICAgICAgICAgICBzcHJpbnRmKCcgZGF0YS1pbmRleD1cIiVzXCInLCBpKSxcbiAgICAgICAgICAgIHNwcmludGYoJyBkYXRhLXVuaXF1ZWlkPVwiJXNcIicsIGl0ZW1bdGhpcy5vcHRpb25zLnVuaXF1ZUlkXSksXG4gICAgICAgICAgICBzcHJpbnRmKCclcycsIGRhdGFfKSxcbiAgICAgICAgICAgICc+J1xuICAgICAgICApO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2FyZFZpZXcpIHtcbiAgICAgICAgICAgIGh0bWwucHVzaChzcHJpbnRmKCc8dGQgY29sc3Bhbj1cIiVzXCI+PGRpdiBjbGFzcz1cImNhcmQtdmlld3NcIj4nLCB0aGlzLmhlYWRlci5maWVsZHMubGVuZ3RoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5jYXJkVmlldyAmJiB0aGlzLm9wdGlvbnMuZGV0YWlsVmlldykge1xuICAgICAgICAgICAgaHRtbC5wdXNoKCc8dGQ+JyxcbiAgICAgICAgICAgICAgICAnPGEgY2xhc3M9XCJkZXRhaWwtaWNvblwiIGhyZWY9XCIjXCI+JyxcbiAgICAgICAgICAgICAgICBzcHJpbnRmKCc8aSBjbGFzcz1cIiVzICVzXCI+PC9pPicsIHRoaXMub3B0aW9ucy5pY29uc1ByZWZpeCwgdGhpcy5vcHRpb25zLmljb25zLmRldGFpbE9wZW4pLFxuICAgICAgICAgICAgICAgICc8L2E+JyxcbiAgICAgICAgICAgICAgICAnPC90ZD4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQuZWFjaCh0aGlzLmhlYWRlci5maWVsZHMsIGZ1bmN0aW9uKGosIGZpZWxkKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9ICcnLFxuICAgICAgICAgICAgICAgIHZhbHVlXyA9IGdldEl0ZW1GaWVsZChpdGVtLCBmaWVsZCwgdGhhdC5vcHRpb25zLmVzY2FwZSksXG4gICAgICAgICAgICAgICAgdmFsdWUgPSAnJyxcbiAgICAgICAgICAgICAgICB0eXBlID0gJycsXG4gICAgICAgICAgICAgICAgY2VsbFN0eWxlID0ge30sXG4gICAgICAgICAgICAgICAgaWRfID0gJycsXG4gICAgICAgICAgICAgICAgY2xhc3NfID0gdGhhdC5oZWFkZXIuY2xhc3Nlc1tqXSxcbiAgICAgICAgICAgICAgICBkYXRhXyA9ICcnLFxuICAgICAgICAgICAgICAgIHJvd3NwYW5fID0gJycsXG4gICAgICAgICAgICAgICAgY29sc3Bhbl8gPSAnJyxcbiAgICAgICAgICAgICAgICB0aXRsZV8gPSAnJyxcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSB0aGF0LmNvbHVtbnNbal07XG5cbiAgICAgICAgICAgIGlmICh0aGF0LmZyb21IdG1sICYmIHR5cGVvZiB2YWx1ZV8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWNvbHVtbi52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLmNhcmRWaWV3ICYmICghY29sdW1uLmNhcmRWaXNpYmxlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbHVtbi5lc2NhcGUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZV8gPSBlc2NhcGVIVE1MKHZhbHVlXyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0eWxlID0gc3ByaW50Zignc3R5bGU9XCIlc1wiJywgY3NzZXMuY29uY2F0KHRoYXQuaGVhZGVyLnN0eWxlc1tqXSkuam9pbignOyAnKSk7XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSB0ZCdzIGlkIGFuZCBjbGFzc1xuICAgICAgICAgICAgaWYgKGl0ZW1bJ18nICsgZmllbGQgKyAnX2lkJ10pIHtcbiAgICAgICAgICAgICAgICBpZF8gPSBzcHJpbnRmKCcgaWQ9XCIlc1wiJywgaXRlbVsnXycgKyBmaWVsZCArICdfaWQnXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlbVsnXycgKyBmaWVsZCArICdfY2xhc3MnXSkge1xuICAgICAgICAgICAgICAgIGNsYXNzXyA9IHNwcmludGYoJyBjbGFzcz1cIiVzXCInLCBpdGVtWydfJyArIGZpZWxkICsgJ19jbGFzcyddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtWydfJyArIGZpZWxkICsgJ19yb3dzcGFuJ10pIHtcbiAgICAgICAgICAgICAgICByb3dzcGFuXyA9IHNwcmludGYoJyByb3dzcGFuPVwiJXNcIicsIGl0ZW1bJ18nICsgZmllbGQgKyAnX3Jvd3NwYW4nXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlbVsnXycgKyBmaWVsZCArICdfY29sc3BhbiddKSB7XG4gICAgICAgICAgICAgICAgY29sc3Bhbl8gPSBzcHJpbnRmKCcgY29sc3Bhbj1cIiVzXCInLCBpdGVtWydfJyArIGZpZWxkICsgJ19jb2xzcGFuJ10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW1bJ18nICsgZmllbGQgKyAnX3RpdGxlJ10pIHtcbiAgICAgICAgICAgICAgICB0aXRsZV8gPSBzcHJpbnRmKCcgdGl0bGU9XCIlc1wiJywgaXRlbVsnXycgKyBmaWVsZCArICdfdGl0bGUnXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjZWxsU3R5bGUgPSBjYWxjdWxhdGVPYmplY3RWYWx1ZSh0aGF0LmhlYWRlcixcbiAgICAgICAgICAgICAgICB0aGF0LmhlYWRlci5jZWxsU3R5bGVzW2pdLCBbdmFsdWVfLCBpdGVtLCBpLCBmaWVsZF0sIGNlbGxTdHlsZSk7XG4gICAgICAgICAgICBpZiAoY2VsbFN0eWxlLmNsYXNzZXMpIHtcbiAgICAgICAgICAgICAgICBjbGFzc18gPSBzcHJpbnRmKCcgY2xhc3M9XCIlc1wiJywgY2VsbFN0eWxlLmNsYXNzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNlbGxTdHlsZS5jc3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3NzZXNfID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGNlbGxTdHlsZS5jc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzZXNfLnB1c2goa2V5ICsgJzogJyArIGNlbGxTdHlsZS5jc3Nba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0eWxlID0gc3ByaW50Zignc3R5bGU9XCIlc1wiJywgY3NzZXNfLmNvbmNhdCh0aGF0LmhlYWRlci5zdHlsZXNbal0pLmpvaW4oJzsgJykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IGNhbGN1bGF0ZU9iamVjdFZhbHVlKGNvbHVtbixcbiAgICAgICAgICAgICAgICB0aGF0LmhlYWRlci5mb3JtYXR0ZXJzW2pdLCBbdmFsdWVfLCBpdGVtLCBpXSwgdmFsdWVfKTtcblxuICAgICAgICAgICAgaWYgKGl0ZW1bJ18nICsgZmllbGQgKyAnX2RhdGEnXSAmJiAhJC5pc0VtcHR5T2JqZWN0KGl0ZW1bJ18nICsgZmllbGQgKyAnX2RhdGEnXSkpIHtcbiAgICAgICAgICAgICAgICAkLmVhY2goaXRlbVsnXycgKyBmaWVsZCArICdfZGF0YSddLCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBkYXRhLWluZGV4XG4gICAgICAgICAgICAgICAgICAgIGlmIChrID09PSAnaW5kZXgnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGF0YV8gKz0gc3ByaW50ZignIGRhdGEtJXM9XCIlc1wiJywgaywgdik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW4uY2hlY2tib3ggfHwgY29sdW1uLnJhZGlvKSB7XG4gICAgICAgICAgICAgICAgdHlwZSA9IGNvbHVtbi5jaGVja2JveCA/ICdjaGVja2JveCcgOiB0eXBlO1xuICAgICAgICAgICAgICAgIHR5cGUgPSBjb2x1bW4ucmFkaW8gPyAncmFkaW8nIDogdHlwZTtcblxuICAgICAgICAgICAgICAgIHRleHQgPSBbc3ByaW50Zih0aGF0Lm9wdGlvbnMuY2FyZFZpZXcgP1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJjYXJkLXZpZXcgJXNcIj4nIDogJzx0ZCBjbGFzcz1cImJzLWNoZWNrYm94ICVzXCI+JywgY29sdW1uWydjbGFzcyddIHx8ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCcgK1xuICAgICAgICAgICAgICAgICAgICBzcHJpbnRmKCcgZGF0YS1pbmRleD1cIiVzXCInLCBpKSArXG4gICAgICAgICAgICAgICAgICAgIHNwcmludGYoJyBuYW1lPVwiJXNcIicsIHRoYXQub3B0aW9ucy5zZWxlY3RJdGVtTmFtZSkgK1xuICAgICAgICAgICAgICAgICAgICBzcHJpbnRmKCcgdHlwZT1cIiVzXCInLCB0eXBlKSArXG4gICAgICAgICAgICAgICAgICAgIHNwcmludGYoJyB2YWx1ZT1cIiVzXCInLCBpdGVtW3RoYXQub3B0aW9ucy5pZEZpZWxkXSkgK1xuICAgICAgICAgICAgICAgICAgICBzcHJpbnRmKCcgY2hlY2tlZD1cIiVzXCInLCB2YWx1ZSA9PT0gdHJ1ZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHZhbHVlXyB8fCB2YWx1ZSAmJiB2YWx1ZS5jaGVja2VkKSA/ICdjaGVja2VkJyA6IHVuZGVmaW5lZCkgK1xuICAgICAgICAgICAgICAgICAgICBzcHJpbnRmKCcgZGlzYWJsZWQ9XCIlc1wiJywgIWNvbHVtbi5jaGVja2JveEVuYWJsZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICh2YWx1ZSAmJiB2YWx1ZS5kaXNhYmxlZCkgPyAnZGlzYWJsZWQnIDogdW5kZWZpbmVkKSArXG4gICAgICAgICAgICAgICAgICAgICcgLz4nLFxuICAgICAgICAgICAgICAgICAgICB0aGF0LmhlYWRlci5mb3JtYXR0ZXJzW2pdICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuY2FyZFZpZXcgPyAnPC9kaXY+JyA6ICc8L3RkPidcbiAgICAgICAgICAgICAgICBdLmpvaW4oJycpO1xuXG4gICAgICAgICAgICAgICAgaXRlbVt0aGF0LmhlYWRlci5zdGF0ZUZpZWxkXSA9IHZhbHVlID09PSB0cnVlIHx8ICh2YWx1ZSAmJiB2YWx1ZS5jaGVja2VkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHZhbHVlID09PSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLnVuZGVmaW5lZFRleHQgOiB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIHRleHQgPSB0aGF0Lm9wdGlvbnMuY2FyZFZpZXcgPyBbJzxkaXYgY2xhc3M9XCJjYXJkLXZpZXdcIj4nLFxuICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuc2hvd0hlYWRlciA/IHNwcmludGYoJzxzcGFuIGNsYXNzPVwidGl0bGVcIiAlcz4lczwvc3Bhbj4nLCBzdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFByb3BlcnR5RnJvbU90aGVyKHRoYXQuY29sdW1ucywgJ2ZpZWxkJywgJ3RpdGxlJywgZmllbGQpKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBzcHJpbnRmKCc8c3BhbiBjbGFzcz1cInZhbHVlXCI+JXM8L3NwYW4+JywgdmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+J1xuICAgICAgICAgICAgICAgIF0uam9pbignJykgOiBbc3ByaW50ZignPHRkJXMgJXMgJXMgJXMgJXMgJXMgJXM+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkXywgY2xhc3NfLCBzdHlsZSwgZGF0YV8sIHJvd3NwYW5fLCBjb2xzcGFuXywgdGl0bGVfKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICc8L3RkPidcbiAgICAgICAgICAgICAgICBdLmpvaW4oJycpO1xuXG4gICAgICAgICAgICAgICAgLy8gSGlkZSBlbXB0eSBkYXRhIG9uIENhcmQgdmlldyB3aGVuIHNtYXJ0RGlzcGxheSBpcyBzZXQgdG8gdHJ1ZS5cbiAgICAgICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLmNhcmRWaWV3ICYmIHRoYXQub3B0aW9ucy5zbWFydERpc3BsYXkgJiYgdmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNob3VsZCBzZXQgYSBwbGFjZWhvbGRlciBmb3IgZXZlbnQgYmluZGluZyBjb3JyZWN0IGZpZWxkSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgdGV4dCA9ICc8ZGl2IGNsYXNzPVwiY2FyZC12aWV3XCI+PC9kaXY+JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGh0bWwucHVzaCh0ZXh0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jYXJkVmlldykge1xuICAgICAgICAgICAgaHRtbC5wdXNoKCc8L2Rpdj48L3RkPicpO1xuICAgICAgICB9XG4gICAgICAgIGh0bWwucHVzaCgnPC90cj4nKTtcblxuICAgICAgICByZXR1cm4gaHRtbC5qb2luKCcgJyk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0Qm9keSA9IGZ1bmN0aW9uIChmaXhlZFNjcm9sbCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICBodG1sID0gW10sXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5nZXREYXRhKCk7XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdwcmUtYm9keScsIGRhdGEpO1xuXG4gICAgICAgIHRoaXMuJGJvZHkgPSB0aGlzLiRlbC5maW5kKCc+dGJvZHknKTtcbiAgICAgICAgaWYgKCF0aGlzLiRib2R5Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy4kYm9keSA9ICQoJzx0Ym9keT48L3Rib2R5PicpLmFwcGVuZFRvKHRoaXMuJGVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vRml4ICMzODkgQm9vdHN0cmFwLXRhYmxlLWZsYXRKU09OIGlzIG5vdCB3b3JraW5nXG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucGFnaW5hdGlvbiB8fCB0aGlzLm9wdGlvbnMuc2lkZVBhZ2luYXRpb24gPT09ICdzZXJ2ZXInKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2VGcm9tID0gMTtcbiAgICAgICAgICAgIHRoaXMucGFnZVRvID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJGcmFnbWVudHMgPSAkKGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSk7XG4gICAgICAgIHZhciBoYXNUcjtcblxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5wYWdlRnJvbSAtIDE7IGkgPCB0aGlzLnBhZ2VUbzsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGRhdGFbaV07XG4gICAgICAgICAgICB2YXIgdHIgPSB0aGlzLmluaXRSb3coaXRlbSwgaSwgZGF0YSwgdHJGcmFnbWVudHMpO1xuICAgICAgICAgICAgaGFzVHIgPSBoYXNUciB8fCAhIXRyO1xuICAgICAgICAgICAgaWYgKHRyJiZ0ciE9PXRydWUpIHtcbiAgICAgICAgICAgICAgICB0ckZyYWdtZW50cy5hcHBlbmQodHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hvdyBubyByZWNvcmRzXG4gICAgICAgIGlmICghaGFzVHIpIHtcbiAgICAgICAgICAgIHRyRnJhZ21lbnRzLmFwcGVuZCgnPHRyIGNsYXNzPVwibm8tcmVjb3Jkcy1mb3VuZFwiPicgK1xuICAgICAgICAgICAgICAgIHNwcmludGYoJzx0ZCBjb2xzcGFuPVwiJXNcIj4lczwvdGQ+JyxcbiAgICAgICAgICAgICAgICB0aGlzLiRoZWFkZXIuZmluZCgndGgnKS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmZvcm1hdE5vTWF0Y2hlcygpKSArXG4gICAgICAgICAgICAgICAgJzwvdHI+Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLiRib2R5Lmh0bWwodHJGcmFnbWVudHMpO1xuXG4gICAgICAgIGlmICghZml4ZWRTY3JvbGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG8oMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGljayB0byBzZWxlY3QgYnkgY29sdW1uXG4gICAgICAgIHRoaXMuJGJvZHkuZmluZCgnPiB0cltkYXRhLWluZGV4XSA+IHRkJykub2ZmKCdjbGljayBkYmxjbGljaycpLm9uKCdjbGljayBkYmxjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgJHRkID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAkdHIgPSAkdGQucGFyZW50KCksXG4gICAgICAgICAgICAgICAgaXRlbSA9IHRoYXQuZGF0YVskdHIuZGF0YSgnaW5kZXgnKV0sXG4gICAgICAgICAgICAgICAgaW5kZXggPSAkdGRbMF0uY2VsbEluZGV4LFxuICAgICAgICAgICAgICAgIGZpZWxkcyA9IHRoYXQuZ2V0VmlzaWJsZUZpZWxkcygpLFxuICAgICAgICAgICAgICAgIGZpZWxkID0gZmllbGRzW3RoYXQub3B0aW9ucy5kZXRhaWxWaWV3ICYmICF0aGF0Lm9wdGlvbnMuY2FyZFZpZXcgPyBpbmRleCAtIDEgOiBpbmRleF0sXG4gICAgICAgICAgICAgICAgY29sdW1uID0gdGhhdC5jb2x1bW5zW2dldEZpZWxkSW5kZXgodGhhdC5jb2x1bW5zLCBmaWVsZCldLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0SXRlbUZpZWxkKGl0ZW0sIGZpZWxkLCB0aGF0Lm9wdGlvbnMuZXNjYXBlKTtcblxuICAgICAgICAgICAgaWYgKCR0ZC5maW5kKCcuZGV0YWlsLWljb24nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoYXQudHJpZ2dlcihlLnR5cGUgPT09ICdjbGljaycgPyAnY2xpY2stY2VsbCcgOiAnZGJsLWNsaWNrLWNlbGwnLCBmaWVsZCwgdmFsdWUsIGl0ZW0sICR0ZCk7XG4gICAgICAgICAgICB0aGF0LnRyaWdnZXIoZS50eXBlID09PSAnY2xpY2snID8gJ2NsaWNrLXJvdycgOiAnZGJsLWNsaWNrLXJvdycsIGl0ZW0sICR0ciwgZmllbGQpO1xuXG4gICAgICAgICAgICAvLyBpZiBjbGljayB0byBzZWxlY3QgLSB0aGVuIHRyaWdnZXIgdGhlIGNoZWNrYm94L3JhZGlvIGNsaWNrXG4gICAgICAgICAgICBpZiAoZS50eXBlID09PSAnY2xpY2snICYmIHRoYXQub3B0aW9ucy5jbGlja1RvU2VsZWN0ICYmIGNvbHVtbi5jbGlja1RvU2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyICRzZWxlY3RJdGVtID0gJHRyLmZpbmQoc3ByaW50ZignW25hbWU9XCIlc1wiXScsIHRoYXQub3B0aW9ucy5zZWxlY3RJdGVtTmFtZSkpO1xuICAgICAgICAgICAgICAgIGlmICgkc2VsZWN0SXRlbS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNlbGVjdEl0ZW1bMF0uY2xpY2soKTsgLy8gIzE0NDogLnRyaWdnZXIoJ2NsaWNrJykgYnVnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiRib2R5LmZpbmQoJz4gdHJbZGF0YS1pbmRleF0gPiB0ZCA+IC5kZXRhaWwtaWNvbicpLm9mZignY2xpY2snKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICR0ciA9ICR0aGlzLnBhcmVudCgpLnBhcmVudCgpLFxuICAgICAgICAgICAgICAgIGluZGV4ID0gJHRyLmRhdGEoJ2luZGV4JyksXG4gICAgICAgICAgICAgICAgcm93ID0gZGF0YVtpbmRleF07IC8vIEZpeCAjOTgwIERldGFpbCB2aWV3LCB3aGVuIHNlYXJjaGluZywgcmV0dXJucyB3cm9uZyByb3dcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIGFuZCB1cGRhdGVcbiAgICAgICAgICAgIGlmICgkdHIubmV4dCgpLmlzKCd0ci5kZXRhaWwtdmlldycpKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMuZmluZCgnaScpLmF0dHIoJ2NsYXNzJywgc3ByaW50ZignJXMgJXMnLCB0aGF0Lm9wdGlvbnMuaWNvbnNQcmVmaXgsIHRoYXQub3B0aW9ucy5pY29ucy5kZXRhaWxPcGVuKSk7XG4gICAgICAgICAgICAgICAgdGhhdC50cmlnZ2VyKCdjb2xsYXBzZS1yb3cnLCBpbmRleCwgcm93KTtcbiAgICAgICAgICAgICAgICAkdHIubmV4dCgpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5maW5kKCdpJykuYXR0cignY2xhc3MnLCBzcHJpbnRmKCclcyAlcycsIHRoYXQub3B0aW9ucy5pY29uc1ByZWZpeCwgdGhhdC5vcHRpb25zLmljb25zLmRldGFpbENsb3NlKSk7XG4gICAgICAgICAgICAgICAgJHRyLmFmdGVyKHNwcmludGYoJzx0ciBjbGFzcz1cImRldGFpbC12aWV3XCI+PHRkIGNvbHNwYW49XCIlc1wiPjwvdGQ+PC90cj4nLCAkdHIuZmluZCgndGQnKS5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkdHIubmV4dCgpLmZpbmQoJ3RkJyk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBjYWxjdWxhdGVPYmplY3RWYWx1ZSh0aGF0Lm9wdGlvbnMsIHRoYXQub3B0aW9ucy5kZXRhaWxGb3JtYXR0ZXIsIFtpbmRleCwgcm93LCAkZWxlbWVudF0sICcnKTtcbiAgICAgICAgICAgICAgICBpZigkZWxlbWVudC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQuYXBwZW5kKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGF0LnRyaWdnZXIoJ2V4cGFuZC1yb3cnLCBpbmRleCwgcm93LCAkZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGF0LnJlc2V0VmlldygpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiRzZWxlY3RJdGVtID0gdGhpcy4kYm9keS5maW5kKHNwcmludGYoJ1tuYW1lPVwiJXNcIl0nLCB0aGlzLm9wdGlvbnMuc2VsZWN0SXRlbU5hbWUpKTtcbiAgICAgICAgdGhpcy4kc2VsZWN0SXRlbS5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICBjaGVja2VkID0gJHRoaXMucHJvcCgnY2hlY2tlZCcpLFxuICAgICAgICAgICAgICAgIHJvdyA9IHRoYXQuZGF0YVskdGhpcy5kYXRhKCdpbmRleCcpXTtcblxuICAgICAgICAgICAgaWYgKHRoYXQub3B0aW9ucy5tYWludGFpblNlbGVjdGVkICYmICQodGhpcykuaXMoJzpyYWRpbycpKSB7XG4gICAgICAgICAgICAgICAgJC5lYWNoKHRoYXQub3B0aW9ucy5kYXRhLCBmdW5jdGlvbiAoaSwgcm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHJvd1t0aGF0LmhlYWRlci5zdGF0ZUZpZWxkXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByb3dbdGhhdC5oZWFkZXIuc3RhdGVGaWVsZF0gPSBjaGVja2VkO1xuXG4gICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLnNpbmdsZVNlbGVjdCkge1xuICAgICAgICAgICAgICAgIHRoYXQuJHNlbGVjdEl0ZW0ubm90KHRoaXMpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmRhdGFbJCh0aGlzKS5kYXRhKCdpbmRleCcpXVt0aGF0LmhlYWRlci5zdGF0ZUZpZWxkXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoYXQuJHNlbGVjdEl0ZW0uZmlsdGVyKCc6Y2hlY2tlZCcpLm5vdCh0aGlzKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGF0LnVwZGF0ZVNlbGVjdGVkKCk7XG4gICAgICAgICAgICB0aGF0LnRyaWdnZXIoY2hlY2tlZCA/ICdjaGVjaycgOiAndW5jaGVjaycsIHJvdywgJHRoaXMpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkLmVhY2godGhpcy5oZWFkZXIuZXZlbnRzLCBmdW5jdGlvbiAoaSwgZXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50cykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGZpeCBidWcsIGlmIGV2ZW50cyBpcyBkZWZpbmVkIHdpdGggbmFtZXNwYWNlXG4gICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBldmVudHMgPSBjYWxjdWxhdGVPYmplY3RWYWx1ZShudWxsLCBldmVudHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZmllbGQgPSB0aGF0LmhlYWRlci5maWVsZHNbaV0sXG4gICAgICAgICAgICAgICAgZmllbGRJbmRleCA9ICQuaW5BcnJheShmaWVsZCwgdGhhdC5nZXRWaXNpYmxlRmllbGRzKCkpO1xuXG4gICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLmRldGFpbFZpZXcgJiYgIXRoYXQub3B0aW9ucy5jYXJkVmlldykge1xuICAgICAgICAgICAgICAgIGZpZWxkSW5kZXggKz0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGV2ZW50cykge1xuICAgICAgICAgICAgICAgIHRoYXQuJGJvZHkuZmluZCgnPnRyOm5vdCgubm8tcmVjb3Jkcy1mb3VuZCknKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICR0ciA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAkdGQgPSAkdHIuZmluZCh0aGF0Lm9wdGlvbnMuY2FyZFZpZXcgPyAnLmNhcmQtdmlldycgOiAndGQnKS5lcShmaWVsZEluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0ga2V5LmluZGV4T2YoJyAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBrZXkuc3Vic3RyaW5nKDAsIGluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsID0ga2V5LnN1YnN0cmluZyhpbmRleCArIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuYyA9IGV2ZW50c1trZXldO1xuXG4gICAgICAgICAgICAgICAgICAgICR0ZC5maW5kKGVsKS5vZmYobmFtZSkub24obmFtZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICR0ci5kYXRhKCdpbmRleCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9IHRoYXQuZGF0YVtpbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByb3dbZmllbGRdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KHRoaXMsIFtlLCB2YWx1ZSwgcm93LCBpbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZCgpO1xuICAgICAgICB0aGlzLnJlc2V0VmlldygpO1xuXG4gICAgICAgIHRoaXMudHJpZ2dlcigncG9zdC1ib2R5JywgZGF0YSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0U2VydmVyID0gZnVuY3Rpb24gKHNpbGVudCwgcXVlcnksIHVybCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICBkYXRhID0ge30sXG4gICAgICAgICAgICBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgc2VhcmNoVGV4dDogdGhpcy5zZWFyY2hUZXh0LFxuICAgICAgICAgICAgICAgIHNvcnROYW1lOiB0aGlzLm9wdGlvbnMuc29ydE5hbWUsXG4gICAgICAgICAgICAgICAgc29ydE9yZGVyOiB0aGlzLm9wdGlvbnMuc29ydE9yZGVyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdDtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhZ2luYXRpb24pIHtcbiAgICAgICAgICAgIHBhcmFtcy5wYWdlU2l6ZSA9IHRoaXMub3B0aW9ucy5wYWdlU2l6ZSA9PT0gdGhpcy5vcHRpb25zLmZvcm1hdEFsbFJvd3MoKSA/XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnRvdGFsUm93cyA6IHRoaXMub3B0aW9ucy5wYWdlU2l6ZTtcbiAgICAgICAgICAgIHBhcmFtcy5wYWdlTnVtYmVyID0gdGhpcy5vcHRpb25zLnBhZ2VOdW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISh1cmwgfHwgdGhpcy5vcHRpb25zLnVybCkgJiYgIXRoaXMub3B0aW9ucy5hamF4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnF1ZXJ5UGFyYW1zVHlwZSA9PT0gJ2xpbWl0Jykge1xuICAgICAgICAgICAgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHNlYXJjaDogcGFyYW1zLnNlYXJjaFRleHQsXG4gICAgICAgICAgICAgICAgc29ydDogcGFyYW1zLnNvcnROYW1lLFxuICAgICAgICAgICAgICAgIG9yZGVyOiBwYXJhbXMuc29ydE9yZGVyXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhZ2luYXRpb24pIHtcbiAgICAgICAgICAgICAgICBwYXJhbXMub2Zmc2V0ID0gdGhpcy5vcHRpb25zLnBhZ2VTaXplID09PSB0aGlzLm9wdGlvbnMuZm9ybWF0QWxsUm93cygpID9cbiAgICAgICAgICAgICAgICAgICAgMCA6IHRoaXMub3B0aW9ucy5wYWdlU2l6ZSAqICh0aGlzLm9wdGlvbnMucGFnZU51bWJlciAtIDEpO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5saW1pdCA9IHRoaXMub3B0aW9ucy5wYWdlU2l6ZSA9PT0gdGhpcy5vcHRpb25zLmZvcm1hdEFsbFJvd3MoKSA/XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy50b3RhbFJvd3MgOiB0aGlzLm9wdGlvbnMucGFnZVNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISgkLmlzRW1wdHlPYmplY3QodGhpcy5maWx0ZXJDb2x1bW5zUGFydGlhbCkpKSB7XG4gICAgICAgICAgICBwYXJhbXMuZmlsdGVyID0gSlNPTi5zdHJpbmdpZnkodGhpcy5maWx0ZXJDb2x1bW5zUGFydGlhbCwgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhID0gY2FsY3VsYXRlT2JqZWN0VmFsdWUodGhpcy5vcHRpb25zLCB0aGlzLm9wdGlvbnMucXVlcnlQYXJhbXMsIFtwYXJhbXNdLCBkYXRhKTtcblxuICAgICAgICAkLmV4dGVuZChkYXRhLCBxdWVyeSB8fCB7fSk7XG5cbiAgICAgICAgLy8gZmFsc2UgdG8gc3RvcCByZXF1ZXN0XG4gICAgICAgIGlmIChkYXRhID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzaWxlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuJHRhYmxlTG9hZGluZy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWVzdCA9ICQuZXh0ZW5kKHt9LCBjYWxjdWxhdGVPYmplY3RWYWx1ZShudWxsLCB0aGlzLm9wdGlvbnMuYWpheE9wdGlvbnMpLCB7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLm9wdGlvbnMubWV0aG9kLFxuICAgICAgICAgICAgdXJsOiAgdXJsIHx8IHRoaXMub3B0aW9ucy51cmwsXG4gICAgICAgICAgICBkYXRhOiB0aGlzLm9wdGlvbnMuY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9qc29uJyAmJiB0aGlzLm9wdGlvbnMubWV0aG9kID09PSAncG9zdCcgP1xuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGRhdGEpIDogZGF0YSxcbiAgICAgICAgICAgIGNhY2hlOiB0aGlzLm9wdGlvbnMuY2FjaGUsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogdGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlLFxuICAgICAgICAgICAgZGF0YVR5cGU6IHRoaXMub3B0aW9ucy5kYXRhVHlwZSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBjYWxjdWxhdGVPYmplY3RWYWx1ZSh0aGF0Lm9wdGlvbnMsIHRoYXQub3B0aW9ucy5yZXNwb25zZUhhbmRsZXIsIFtyZXNdLCByZXMpO1xuXG4gICAgICAgICAgICAgICAgdGhhdC5sb2FkKHJlcyk7XG4gICAgICAgICAgICAgICAgdGhhdC50cmlnZ2VyKCdsb2FkLXN1Y2Nlc3MnLCByZXMpO1xuICAgICAgICAgICAgICAgIGlmICghc2lsZW50KSB0aGF0LiR0YWJsZUxvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAgICAgdGhhdC50cmlnZ2VyKCdsb2FkLWVycm9yJywgcmVzLnN0YXR1cywgcmVzKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNpbGVudCkgdGhhdC4kdGFibGVMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hamF4KSB7XG4gICAgICAgICAgICBjYWxjdWxhdGVPYmplY3RWYWx1ZSh0aGlzLCB0aGlzLm9wdGlvbnMuYWpheCwgW3JlcXVlc3RdLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl94aHIgJiYgdGhpcy5feGhyLnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl94aHIuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3hociA9ICQuYWpheChyZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdFNlYXJjaFRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2VhcmNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNlYXJjaFRleHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgdmFyICRzZWFyY2ggPSB0aGlzLiR0b29sYmFyLmZpbmQoJy5zZWFyY2ggaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAkc2VhcmNoLnZhbCh0aGlzLm9wdGlvbnMuc2VhcmNoVGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vblNlYXJjaCh7Y3VycmVudFRhcmdldDogJHNlYXJjaH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5nZXRDYXJldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLiRoZWFkZXIuZmluZCgndGgnKSwgZnVuY3Rpb24gKGksIHRoKSB7XG4gICAgICAgICAgICAkKHRoKS5maW5kKCcuc29ydGFibGUnKS5yZW1vdmVDbGFzcygnZGVzYyBhc2MnKS5hZGRDbGFzcygkKHRoKS5kYXRhKCdmaWVsZCcpID09PSB0aGF0Lm9wdGlvbnMuc29ydE5hbWUgPyB0aGF0Lm9wdGlvbnMuc29ydE9yZGVyIDogJ2JvdGgnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS51cGRhdGVTZWxlY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNoZWNrQWxsID0gdGhpcy4kc2VsZWN0SXRlbS5maWx0ZXIoJzplbmFibGVkJykubGVuZ3RoICYmXG4gICAgICAgICAgICB0aGlzLiRzZWxlY3RJdGVtLmZpbHRlcignOmVuYWJsZWQnKS5sZW5ndGggPT09XG4gICAgICAgICAgICB0aGlzLiRzZWxlY3RJdGVtLmZpbHRlcignOmVuYWJsZWQnKS5maWx0ZXIoJzpjaGVja2VkJykubGVuZ3RoO1xuXG4gICAgICAgIHRoaXMuJHNlbGVjdEFsbC5hZGQodGhpcy4kc2VsZWN0QWxsXykucHJvcCgnY2hlY2tlZCcsIGNoZWNrQWxsKTtcblxuICAgICAgICB0aGlzLiRzZWxlY3RJdGVtLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCd0cicpWyQodGhpcykucHJvcCgnY2hlY2tlZCcpID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKCdzZWxlY3RlZCcpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnVwZGF0ZVJvd3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICB0aGlzLiRzZWxlY3RJdGVtLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhhdC5kYXRhWyQodGhpcykuZGF0YSgnaW5kZXgnKV1bdGhhdC5oZWFkZXIuc3RhdGVGaWVsZF0gPSAkKHRoaXMpLnByb3AoJ2NoZWNrZWQnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5yZXNldFJvd3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAkLmVhY2godGhpcy5kYXRhLCBmdW5jdGlvbiAoaSwgcm93KSB7XG4gICAgICAgICAgICB0aGF0LiRzZWxlY3RBbGwucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoYXQuJHNlbGVjdEl0ZW0ucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmICh0aGF0LmhlYWRlci5zdGF0ZUZpZWxkKSB7XG4gICAgICAgICAgICAgICAgcm93W3RoYXQuaGVhZGVyLnN0YXRlRmllbGRdID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmluaXRIaWRkZW5Sb3dzKCk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgICAgIG5hbWUgKz0gJy5icy50YWJsZSc7XG4gICAgICAgIHRoaXMub3B0aW9uc1tCb290c3RyYXBUYWJsZS5FVkVOVFNbbmFtZV1dLmFwcGx5KHRoaXMub3B0aW9ucywgYXJncyk7XG4gICAgICAgIHRoaXMuJGVsLnRyaWdnZXIoJC5FdmVudChuYW1lKSwgYXJncyk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLm9uQWxsKG5hbWUsIGFyZ3MpO1xuICAgICAgICB0aGlzLiRlbC50cmlnZ2VyKCQuRXZlbnQoJ2FsbC5icy50YWJsZScpLCBbbmFtZSwgYXJnc10pO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUucmVzZXRIZWFkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGZpeCAjNjE6IHRoZSBoaWRkZW4gdGFibGUgcmVzZXQgaGVhZGVyIGJ1Zy5cbiAgICAgICAgLy8gZml4IGJ1ZzogZ2V0ICRlbC5jc3MoJ3dpZHRoJykgZXJyb3Igc29tZXRpbWUgKGhlaWdodCA9IDUwMClcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkXyk7XG4gICAgICAgIHRoaXMudGltZW91dElkXyA9IHNldFRpbWVvdXQoJC5wcm94eSh0aGlzLmZpdEhlYWRlciwgdGhpcyksIHRoaXMuJGVsLmlzKCc6aGlkZGVuJykgPyAxMDAgOiAwKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmZpdEhlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgZml4ZWRCb2R5LFxuICAgICAgICAgICAgc2Nyb2xsV2lkdGgsXG4gICAgICAgICAgICBmb2N1c2VkLFxuICAgICAgICAgICAgZm9jdXNlZFRlbXA7XG5cbiAgICAgICAgaWYgKHRoYXQuJGVsLmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgICAgIHRoYXQudGltZW91dElkXyA9IHNldFRpbWVvdXQoJC5wcm94eSh0aGF0LmZpdEhlYWRlciwgdGhhdCksIDEwMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZml4ZWRCb2R5ID0gdGhpcy4kdGFibGVCb2R5LmdldCgwKTtcblxuICAgICAgICBzY3JvbGxXaWR0aCA9IGZpeGVkQm9keS5zY3JvbGxXaWR0aCA+IGZpeGVkQm9keS5jbGllbnRXaWR0aCAmJlxuICAgICAgICBmaXhlZEJvZHkuc2Nyb2xsSGVpZ2h0ID4gZml4ZWRCb2R5LmNsaWVudEhlaWdodCArIHRoaXMuJGhlYWRlci5vdXRlckhlaWdodCgpID9cbiAgICAgICAgICAgIGdldFNjcm9sbEJhcldpZHRoKCkgOiAwO1xuXG4gICAgICAgIHRoaXMuJGVsLmNzcygnbWFyZ2luLXRvcCcsIC10aGlzLiRoZWFkZXIub3V0ZXJIZWlnaHQoKSk7XG5cbiAgICAgICAgZm9jdXNlZCA9ICQoJzpmb2N1cycpO1xuICAgICAgICBpZiAoZm9jdXNlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgJHRoID0gZm9jdXNlZC5wYXJlbnRzKCd0aCcpO1xuICAgICAgICAgICAgaWYgKCR0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGFGaWVsZCA9ICR0aC5hdHRyKCdkYXRhLWZpZWxkJyk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFGaWVsZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkaGVhZGVyVGggPSB0aGlzLiRoZWFkZXIuZmluZChcIltkYXRhLWZpZWxkPSdcIiArIGRhdGFGaWVsZCArIFwiJ11cIik7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkaGVhZGVyVGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGhlYWRlclRoLmZpbmQoXCI6aW5wdXRcIikuYWRkQ2xhc3MoXCJmb2N1cy10ZW1wXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kaGVhZGVyXyA9IHRoaXMuJGhlYWRlci5jbG9uZSh0cnVlLCB0cnVlKTtcbiAgICAgICAgdGhpcy4kc2VsZWN0QWxsXyA9IHRoaXMuJGhlYWRlcl8uZmluZCgnW25hbWU9XCJidFNlbGVjdEFsbFwiXScpO1xuICAgICAgICB0aGlzLiR0YWJsZUhlYWRlci5jc3Moe1xuICAgICAgICAgICAgJ21hcmdpbi1yaWdodCc6IHNjcm9sbFdpZHRoXG4gICAgICAgIH0pLmZpbmQoJ3RhYmxlJykuY3NzKCd3aWR0aCcsIHRoaXMuJGVsLm91dGVyV2lkdGgoKSlcbiAgICAgICAgICAgIC5odG1sKCcnKS5hdHRyKCdjbGFzcycsIHRoaXMuJGVsLmF0dHIoJ2NsYXNzJykpXG4gICAgICAgICAgICAuYXBwZW5kKHRoaXMuJGhlYWRlcl8pO1xuXG5cbiAgICAgICAgZm9jdXNlZFRlbXAgPSAkKCcuZm9jdXMtdGVtcDp2aXNpYmxlOmVxKDApJyk7XG4gICAgICAgIGlmIChmb2N1c2VkVGVtcC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb2N1c2VkVGVtcC5mb2N1cygpO1xuICAgICAgICAgICAgdGhpcy4kaGVhZGVyLmZpbmQoJy5mb2N1cy10ZW1wJykucmVtb3ZlQ2xhc3MoJ2ZvY3VzLXRlbXAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpeCBidWc6ICQuZGF0YSgpIGlzIG5vdCB3b3JraW5nIGFzIGV4cGVjdGVkIGFmdGVyICQuYXBwZW5kKClcbiAgICAgICAgdGhpcy4kaGVhZGVyLmZpbmQoJ3RoW2RhdGEtZmllbGRdJykuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgdGhhdC4kaGVhZGVyXy5maW5kKHNwcmludGYoJ3RoW2RhdGEtZmllbGQ9XCIlc1wiXScsICQodGhpcykuZGF0YSgnZmllbGQnKSkpLmRhdGEoJCh0aGlzKS5kYXRhKCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgdmlzaWJsZUZpZWxkcyA9IHRoaXMuZ2V0VmlzaWJsZUZpZWxkcygpLFxuICAgICAgICAgICAgJHRocyA9IHRoaXMuJGhlYWRlcl8uZmluZCgndGgnKTtcblxuICAgICAgICB0aGlzLiRib2R5LmZpbmQoJz50cjpmaXJzdC1jaGlsZDpub3QoLm5vLXJlY29yZHMtZm91bmQpID4gKicpLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuXG4gICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLmRldGFpbFZpZXcgJiYgIXRoYXQub3B0aW9ucy5jYXJkVmlldykge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuJGhlYWRlcl8uZmluZCgndGguZGV0YWlsJykuZmluZCgnLmZodC1jZWxsJykud2lkdGgoJHRoaXMuaW5uZXJXaWR0aCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpIC0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyICR0aCA9IHRoYXQuJGhlYWRlcl8uZmluZChzcHJpbnRmKCd0aFtkYXRhLWZpZWxkPVwiJXNcIl0nLCB2aXNpYmxlRmllbGRzW2luZGV4XSkpO1xuICAgICAgICAgICAgaWYgKCR0aC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgJHRoID0gJCgkdGhzWyR0aGlzWzBdLmNlbGxJbmRleF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkdGguZmluZCgnLmZodC1jZWxsJykud2lkdGgoJHRoaXMuaW5uZXJXaWR0aCgpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGhvcml6b250YWwgc2Nyb2xsIGV2ZW50XG4gICAgICAgIC8vIFRPRE86IGl0J3MgcHJvYmFibHkgYmV0dGVyIGltcHJvdmluZyB0aGUgbGF5b3V0IHRoYW4gYmluZGluZyB0byBzY3JvbGwgZXZlbnRcbiAgICAgICAgdGhpcy4kdGFibGVCb2R5Lm9mZignc2Nyb2xsJykub24oJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuJHRhYmxlSGVhZGVyLnNjcm9sbExlZnQoJCh0aGlzKS5zY3JvbGxMZWZ0KCkpO1xuXG4gICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLnNob3dGb290ZXIgJiYgIXRoYXQub3B0aW9ucy5jYXJkVmlldykge1xuICAgICAgICAgICAgICAgIHRoYXQuJHRhYmxlRm9vdGVyLnNjcm9sbExlZnQoJCh0aGlzKS5zY3JvbGxMZWZ0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhhdC50cmlnZ2VyKCdwb3N0LWhlYWRlcicpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUucmVzZXRGb290ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgIGRhdGEgPSB0aGF0LmdldERhdGEoKSxcbiAgICAgICAgICAgIGh0bWwgPSBbXTtcblxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93Rm9vdGVyIHx8IHRoaXMub3B0aW9ucy5jYXJkVmlldykgeyAvL2RvIG5vdGhpbmdcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmNhcmRWaWV3ICYmIHRoaXMub3B0aW9ucy5kZXRhaWxWaWV3KSB7XG4gICAgICAgICAgICBodG1sLnB1c2goJzx0ZD48ZGl2IGNsYXNzPVwidGgtaW5uZXJcIj4mbmJzcDs8L2Rpdj48ZGl2IGNsYXNzPVwiZmh0LWNlbGxcIj48L2Rpdj48L3RkPicpO1xuICAgICAgICB9XG5cbiAgICAgICAgJC5lYWNoKHRoaXMuY29sdW1ucywgZnVuY3Rpb24gKGksIGNvbHVtbikge1xuICAgICAgICAgICAgdmFyIGtleSxcbiAgICAgICAgICAgICAgICBmYWxpZ24gPSAnJywgLy8gZm9vdGVyIGFsaWduIHN0eWxlXG4gICAgICAgICAgICAgICAgdmFsaWduID0gJycsXG4gICAgICAgICAgICAgICAgY3NzZXMgPSBbXSxcbiAgICAgICAgICAgICAgICBzdHlsZSA9IHt9LFxuICAgICAgICAgICAgICAgIGNsYXNzXyA9IHNwcmludGYoJyBjbGFzcz1cIiVzXCInLCBjb2x1bW5bJ2NsYXNzJ10pO1xuXG4gICAgICAgICAgICBpZiAoIWNvbHVtbi52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLmNhcmRWaWV3ICYmICghY29sdW1uLmNhcmRWaXNpYmxlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmFsaWduID0gc3ByaW50ZigndGV4dC1hbGlnbjogJXM7ICcsIGNvbHVtbi5mYWxpZ24gPyBjb2x1bW4uZmFsaWduIDogY29sdW1uLmFsaWduKTtcbiAgICAgICAgICAgIHZhbGlnbiA9IHNwcmludGYoJ3ZlcnRpY2FsLWFsaWduOiAlczsgJywgY29sdW1uLnZhbGlnbik7XG5cbiAgICAgICAgICAgIHN0eWxlID0gY2FsY3VsYXRlT2JqZWN0VmFsdWUobnVsbCwgdGhhdC5vcHRpb25zLmZvb3RlclN0eWxlKTtcblxuICAgICAgICAgICAgaWYgKHN0eWxlICYmIHN0eWxlLmNzcykge1xuICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIHN0eWxlLmNzcykge1xuICAgICAgICAgICAgICAgICAgICBjc3Nlcy5wdXNoKGtleSArICc6ICcgKyBzdHlsZS5jc3Nba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBodG1sLnB1c2goJzx0ZCcsIGNsYXNzXywgc3ByaW50ZignIHN0eWxlPVwiJXNcIicsIGZhbGlnbiArIHZhbGlnbiArIGNzc2VzLmNvbmNhdCgpLmpvaW4oJzsgJykpLCAnPicpO1xuICAgICAgICAgICAgaHRtbC5wdXNoKCc8ZGl2IGNsYXNzPVwidGgtaW5uZXJcIj4nKTtcblxuICAgICAgICAgICAgaHRtbC5wdXNoKGNhbGN1bGF0ZU9iamVjdFZhbHVlKGNvbHVtbiwgY29sdW1uLmZvb3RlckZvcm1hdHRlciwgW2RhdGFdLCAnJm5ic3A7JykgfHwgJyZuYnNwOycpO1xuXG4gICAgICAgICAgICBodG1sLnB1c2goJzwvZGl2PicpO1xuICAgICAgICAgICAgaHRtbC5wdXNoKCc8ZGl2IGNsYXNzPVwiZmh0LWNlbGxcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgIGh0bWwucHVzaCgnPC9kaXY+Jyk7XG4gICAgICAgICAgICBodG1sLnB1c2goJzwvdGQ+Jyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuJHRhYmxlRm9vdGVyLmZpbmQoJ3RyJykuaHRtbChodG1sLmpvaW4oJycpKTtcbiAgICAgICAgdGhpcy4kdGFibGVGb290ZXIuc2hvdygpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0Rm9vdGVyXyk7XG4gICAgICAgIHRoaXMudGltZW91dEZvb3Rlcl8gPSBzZXRUaW1lb3V0KCQucHJveHkodGhpcy5maXRGb290ZXIsIHRoaXMpLFxuICAgICAgICAgICAgdGhpcy4kZWwuaXMoJzpoaWRkZW4nKSA/IDEwMCA6IDApO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuZml0Rm9vdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAkZm9vdGVyVGQsXG4gICAgICAgICAgICBlbFdpZHRoLFxuICAgICAgICAgICAgc2Nyb2xsV2lkdGg7XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dEZvb3Rlcl8pO1xuICAgICAgICBpZiAodGhpcy4kZWwuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgICAgICAgdGhpcy50aW1lb3V0Rm9vdGVyXyA9IHNldFRpbWVvdXQoJC5wcm94eSh0aGlzLmZpdEZvb3RlciwgdGhpcyksIDEwMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBlbFdpZHRoID0gdGhpcy4kZWwuY3NzKCd3aWR0aCcpO1xuICAgICAgICBzY3JvbGxXaWR0aCA9IGVsV2lkdGggPiB0aGlzLiR0YWJsZUJvZHkud2lkdGgoKSA/IGdldFNjcm9sbEJhcldpZHRoKCkgOiAwO1xuXG4gICAgICAgIHRoaXMuJHRhYmxlRm9vdGVyLmNzcyh7XG4gICAgICAgICAgICAnbWFyZ2luLXJpZ2h0Jzogc2Nyb2xsV2lkdGhcbiAgICAgICAgfSkuZmluZCgndGFibGUnKS5jc3MoJ3dpZHRoJywgZWxXaWR0aClcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsIHRoaXMuJGVsLmF0dHIoJ2NsYXNzJykpO1xuXG4gICAgICAgICRmb290ZXJUZCA9IHRoaXMuJHRhYmxlRm9vdGVyLmZpbmQoJ3RkJyk7XG5cbiAgICAgICAgdGhpcy4kYm9keS5maW5kKCc+dHI6Zmlyc3QtY2hpbGQ6bm90KC5uby1yZWNvcmRzLWZvdW5kKSA+IConKS5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICAkZm9vdGVyVGQuZXEoaSkuZmluZCgnLmZodC1jZWxsJykud2lkdGgoJHRoaXMuaW5uZXJXaWR0aCgpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS50b2dnbGVDb2x1bW4gPSBmdW5jdGlvbiAoaW5kZXgsIGNoZWNrZWQsIG5lZWRVcGRhdGUpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29sdW1uc1tpbmRleF0udmlzaWJsZSA9IGNoZWNrZWQ7XG4gICAgICAgIHRoaXMuaW5pdEhlYWRlcigpO1xuICAgICAgICB0aGlzLmluaXRTZWFyY2goKTtcbiAgICAgICAgdGhpcy5pbml0UGFnaW5hdGlvbigpO1xuICAgICAgICB0aGlzLmluaXRCb2R5KCk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93Q29sdW1ucykge1xuICAgICAgICAgICAgdmFyICRpdGVtcyA9IHRoaXMuJHRvb2xiYXIuZmluZCgnLmtlZXAtb3BlbiBpbnB1dCcpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXG4gICAgICAgICAgICBpZiAobmVlZFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICRpdGVtcy5maWx0ZXIoc3ByaW50ZignW3ZhbHVlPVwiJXNcIl0nLCBpbmRleCkpLnByb3AoJ2NoZWNrZWQnLCBjaGVja2VkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCRpdGVtcy5maWx0ZXIoJzpjaGVja2VkJykubGVuZ3RoIDw9IHRoaXMub3B0aW9ucy5taW5pbXVtQ291bnRDb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgJGl0ZW1zLmZpbHRlcignOmNoZWNrZWQnKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5nZXRWaXNpYmxlRmllbGRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICB2aXNpYmxlRmllbGRzID0gW107XG5cbiAgICAgICAgJC5lYWNoKHRoaXMuaGVhZGVyLmZpZWxkcywgZnVuY3Rpb24gKGosIGZpZWxkKSB7XG4gICAgICAgICAgICB2YXIgY29sdW1uID0gdGhhdC5jb2x1bW5zW2dldEZpZWxkSW5kZXgodGhhdC5jb2x1bW5zLCBmaWVsZCldO1xuXG4gICAgICAgICAgICBpZiAoIWNvbHVtbi52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmlzaWJsZUZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2aXNpYmxlRmllbGRzO1xuICAgIH07XG5cbiAgICAvLyBQVUJMSUMgRlVOQ1RJT04gREVGSU5JVElPTlxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUucmVzZXRWaWV3ID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFkZGluZyA9IDA7XG5cbiAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuaGVpZ2h0ID0gcGFyYW1zLmhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuJHNlbGVjdEFsbC5wcm9wKCdjaGVja2VkJywgdGhpcy4kc2VsZWN0SXRlbS5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICB0aGlzLiRzZWxlY3RJdGVtLmxlbmd0aCA9PT0gdGhpcy4kc2VsZWN0SXRlbS5maWx0ZXIoJzpjaGVja2VkJykubGVuZ3RoKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhlaWdodCkge1xuICAgICAgICAgICAgdmFyIHRvb2xiYXJIZWlnaHQgPSB0aGlzLiR0b29sYmFyLm91dGVySGVpZ2h0KHRydWUpLFxuICAgICAgICAgICAgICAgIHBhZ2luYXRpb25IZWlnaHQgPSB0aGlzLiRwYWdpbmF0aW9uLm91dGVySGVpZ2h0KHRydWUpLFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMub3B0aW9ucy5oZWlnaHQgLSB0b29sYmFySGVpZ2h0IC0gcGFnaW5hdGlvbkhlaWdodDtcblxuICAgICAgICAgICAgdGhpcy4kdGFibGVDb250YWluZXIuY3NzKCdoZWlnaHQnLCBoZWlnaHQgKyAncHgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2FyZFZpZXcpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgZWxlbWVudCBjc3NcbiAgICAgICAgICAgIHRoaXMuJGVsLmNzcygnbWFyZ2luLXRvcCcsICcwJyk7XG4gICAgICAgICAgICB0aGlzLiR0YWJsZUNvbnRhaW5lci5jc3MoJ3BhZGRpbmctYm90dG9tJywgJzAnKTtcbiAgICAgICAgICAgIHRoaXMuJHRhYmxlRm9vdGVyLmhpZGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0hlYWRlciAmJiB0aGlzLm9wdGlvbnMuaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLiR0YWJsZUhlYWRlci5zaG93KCk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0SGVhZGVyKCk7XG4gICAgICAgICAgICBwYWRkaW5nICs9IHRoaXMuJGhlYWRlci5vdXRlckhlaWdodCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kdGFibGVIZWFkZXIuaGlkZSgpO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdwb3N0LWhlYWRlcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93Rm9vdGVyKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0Rm9vdGVyKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIHBhZGRpbmcgKz0gdGhpcy4kdGFibGVGb290ZXIub3V0ZXJIZWlnaHQoKSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBc3NpZ24gdGhlIGNvcnJlY3Qgc29ydGFibGUgYXJyb3dcbiAgICAgICAgdGhpcy5nZXRDYXJldCgpO1xuICAgICAgICB0aGlzLiR0YWJsZUNvbnRhaW5lci5jc3MoJ3BhZGRpbmctYm90dG9tJywgcGFkZGluZyArICdweCcpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3Jlc2V0LXZpZXcnKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmdldERhdGEgPSBmdW5jdGlvbiAodXNlQ3VycmVudFBhZ2UpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNlYXJjaFRleHQgfHwgISQuaXNFbXB0eU9iamVjdCh0aGlzLmZpbHRlckNvbHVtbnMpIHx8ICEkLmlzRW1wdHlPYmplY3QodGhpcy5maWx0ZXJDb2x1bW5zUGFydGlhbCkpID9cbiAgICAgICAgICAgICh1c2VDdXJyZW50UGFnZSA/IHRoaXMuZGF0YS5zbGljZSh0aGlzLnBhZ2VGcm9tIC0gMSwgdGhpcy5wYWdlVG8pIDogdGhpcy5kYXRhKSA6XG4gICAgICAgICAgICAodXNlQ3VycmVudFBhZ2UgPyB0aGlzLm9wdGlvbnMuZGF0YS5zbGljZSh0aGlzLnBhZ2VGcm9tIC0gMSwgdGhpcy5wYWdlVG8pIDogdGhpcy5vcHRpb25zLmRhdGEpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBmaXhlZFNjcm9sbCA9IGZhbHNlO1xuXG4gICAgICAgIC8vICM0MzE6IHN1cHBvcnQgcGFnaW5hdGlvblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpZGVQYWdpbmF0aW9uID09PSAnc2VydmVyJykge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnRvdGFsUm93cyA9IGRhdGFbdGhpcy5vcHRpb25zLnRvdGFsRmllbGRdO1xuICAgICAgICAgICAgZml4ZWRTY3JvbGwgPSBkYXRhLmZpeGVkU2Nyb2xsO1xuICAgICAgICAgICAgZGF0YSA9IGRhdGFbdGhpcy5vcHRpb25zLmRhdGFGaWVsZF07XG4gICAgICAgIH0gZWxzZSBpZiAoISQuaXNBcnJheShkYXRhKSkgeyAvLyBzdXBwb3J0IGZpeGVkU2Nyb2xsXG4gICAgICAgICAgICBmaXhlZFNjcm9sbCA9IGRhdGEuZml4ZWRTY3JvbGw7XG4gICAgICAgICAgICBkYXRhID0gZGF0YS5kYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbml0RGF0YShkYXRhKTtcbiAgICAgICAgdGhpcy5pbml0U2VhcmNoKCk7XG4gICAgICAgIHRoaXMuaW5pdFBhZ2luYXRpb24oKTtcbiAgICAgICAgdGhpcy5pbml0Qm9keShmaXhlZFNjcm9sbCk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0aGlzLmluaXREYXRhKGRhdGEsICdhcHBlbmQnKTtcbiAgICAgICAgdGhpcy5pbml0U2VhcmNoKCk7XG4gICAgICAgIHRoaXMuaW5pdFBhZ2luYXRpb24oKTtcbiAgICAgICAgdGhpcy5pbml0U29ydCgpO1xuICAgICAgICB0aGlzLmluaXRCb2R5KHRydWUpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRoaXMuaW5pdERhdGEoZGF0YSwgJ3ByZXBlbmQnKTtcbiAgICAgICAgdGhpcy5pbml0U2VhcmNoKCk7XG4gICAgICAgIHRoaXMuaW5pdFBhZ2luYXRpb24oKTtcbiAgICAgICAgdGhpcy5pbml0U29ydCgpO1xuICAgICAgICB0aGlzLmluaXRCb2R5KHRydWUpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5vcHRpb25zLmRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgaSwgcm93O1xuXG4gICAgICAgIGlmICghcGFyYW1zLmhhc093blByb3BlcnR5KCdmaWVsZCcpIHx8ICFwYXJhbXMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlcycpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgcm93ID0gdGhpcy5vcHRpb25zLmRhdGFbaV07XG5cbiAgICAgICAgICAgIGlmICghcm93Lmhhc093blByb3BlcnR5KHBhcmFtcy5maWVsZCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkLmluQXJyYXkocm93W3BhcmFtcy5maWVsZF0sIHBhcmFtcy52YWx1ZXMpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kYXRhLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpZGVQYWdpbmF0aW9uID09PSAnc2VydmVyJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMudG90YWxSb3dzIC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxlbiA9PT0gdGhpcy5vcHRpb25zLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluaXRTZWFyY2goKTtcbiAgICAgICAgdGhpcy5pbml0UGFnaW5hdGlvbigpO1xuICAgICAgICB0aGlzLmluaXRTb3J0KCk7XG4gICAgICAgIHRoaXMuaW5pdEJvZHkodHJ1ZSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5yZW1vdmVBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGF0YS5zcGxpY2UoMCwgdGhpcy5vcHRpb25zLmRhdGEubGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdFNlYXJjaCgpO1xuICAgICAgICAgICAgdGhpcy5pbml0UGFnaW5hdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5pbml0Qm9keSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuZ2V0Um93QnlVbmlxdWVJZCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgdW5pcXVlSWQgPSB0aGlzLm9wdGlvbnMudW5pcXVlSWQsXG4gICAgICAgICAgICBsZW4gPSB0aGlzLm9wdGlvbnMuZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICBkYXRhUm93ID0gbnVsbCxcbiAgICAgICAgICAgIGksIHJvdywgcm93VW5pcXVlSWQ7XG5cbiAgICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHJvdyA9IHRoaXMub3B0aW9ucy5kYXRhW2ldO1xuXG4gICAgICAgICAgICBpZiAocm93Lmhhc093blByb3BlcnR5KHVuaXF1ZUlkKSkgeyAvLyB1bmlxdWVJZCBpcyBhIGNvbHVtblxuICAgICAgICAgICAgICAgIHJvd1VuaXF1ZUlkID0gcm93W3VuaXF1ZUlkXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZihyb3cuX2RhdGEuaGFzT3duUHJvcGVydHkodW5pcXVlSWQpKSB7IC8vIHVuaXF1ZUlkIGlzIGEgcm93IGRhdGEgcHJvcGVydHlcbiAgICAgICAgICAgICAgICByb3dVbmlxdWVJZCA9IHJvdy5fZGF0YVt1bmlxdWVJZF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJvd1VuaXF1ZUlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlkID0gaWQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJvd1VuaXF1ZUlkID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGlmICgoTnVtYmVyKHJvd1VuaXF1ZUlkKSA9PT0gcm93VW5pcXVlSWQpICYmIChyb3dVbmlxdWVJZCAlIDEgPT09IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGlkID0gcGFyc2VJbnQoaWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHJvd1VuaXF1ZUlkID09PSBOdW1iZXIocm93VW5pcXVlSWQpKSAmJiAocm93VW5pcXVlSWQgIT09IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGlkID0gcGFyc2VGbG9hdChpZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocm93VW5pcXVlSWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgZGF0YVJvdyA9IHJvdztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhUm93O1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUucmVtb3ZlQnlVbmlxdWVJZCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5vcHRpb25zLmRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgcm93ID0gdGhpcy5nZXRSb3dCeVVuaXF1ZUlkKGlkKTtcblxuICAgICAgICBpZiAocm93KSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGF0YS5zcGxpY2UodGhpcy5vcHRpb25zLmRhdGEuaW5kZXhPZihyb3cpLCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZW4gPT09IHRoaXMub3B0aW9ucy5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbml0U2VhcmNoKCk7XG4gICAgICAgIHRoaXMuaW5pdFBhZ2luYXRpb24oKTtcbiAgICAgICAgdGhpcy5pbml0Qm9keSh0cnVlKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnVwZGF0ZUJ5VW5pcXVlSWQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIGFsbFBhcmFtcyA9ICQuaXNBcnJheShwYXJhbXMpID8gcGFyYW1zIDogWyBwYXJhbXMgXTtcblxuICAgICAgICAkLmVhY2goYWxsUGFyYW1zLCBmdW5jdGlvbihpLCBwYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciByb3dJZDtcblxuICAgICAgICAgICAgaWYgKCFwYXJhbXMuaGFzT3duUHJvcGVydHkoJ2lkJykgfHwgIXBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgncm93JykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJvd0lkID0gJC5pbkFycmF5KHRoYXQuZ2V0Um93QnlVbmlxdWVJZChwYXJhbXMuaWQpLCB0aGF0Lm9wdGlvbnMuZGF0YSk7XG5cbiAgICAgICAgICAgIGlmIChyb3dJZCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkLmV4dGVuZCh0aGF0Lm9wdGlvbnMuZGF0YVtyb3dJZF0sIHBhcmFtcy5yb3cpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluaXRTZWFyY2goKTtcbiAgICAgICAgdGhpcy5pbml0UGFnaW5hdGlvbigpO1xuICAgICAgICB0aGlzLmluaXRTb3J0KCk7XG4gICAgICAgIHRoaXMuaW5pdEJvZHkodHJ1ZSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbnNlcnRSb3cgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIGlmICghcGFyYW1zLmhhc093blByb3BlcnR5KCdpbmRleCcpIHx8ICFwYXJhbXMuaGFzT3duUHJvcGVydHkoJ3JvdycpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kYXRhLnNwbGljZShwYXJhbXMuaW5kZXgsIDAsIHBhcmFtcy5yb3cpO1xuICAgICAgICB0aGlzLmluaXRTZWFyY2goKTtcbiAgICAgICAgdGhpcy5pbml0UGFnaW5hdGlvbigpO1xuICAgICAgICB0aGlzLmluaXRTb3J0KCk7XG4gICAgICAgIHRoaXMuaW5pdEJvZHkodHJ1ZSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS51cGRhdGVSb3cgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIGFsbFBhcmFtcyA9ICQuaXNBcnJheShwYXJhbXMpID8gcGFyYW1zIDogWyBwYXJhbXMgXTtcblxuICAgICAgICAkLmVhY2goYWxsUGFyYW1zLCBmdW5jdGlvbihpLCBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmICghcGFyYW1zLmhhc093blByb3BlcnR5KCdpbmRleCcpIHx8ICFwYXJhbXMuaGFzT3duUHJvcGVydHkoJ3JvdycpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJC5leHRlbmQodGhhdC5vcHRpb25zLmRhdGFbcGFyYW1zLmluZGV4XSwgcGFyYW1zLnJvdyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaW5pdFNlYXJjaCgpO1xuICAgICAgICB0aGlzLmluaXRQYWdpbmF0aW9uKCk7XG4gICAgICAgIHRoaXMuaW5pdFNvcnQoKTtcbiAgICAgICAgdGhpcy5pbml0Qm9keSh0cnVlKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRIaWRkZW5Sb3dzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhpZGRlblJvd3MgPSBbXTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnNob3dSb3cgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlUm93KHBhcmFtcywgdHJ1ZSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5oaWRlUm93ID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB0aGlzLnRvZ2dsZVJvdyhwYXJhbXMsIGZhbHNlKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnRvZ2dsZVJvdyA9IGZ1bmN0aW9uIChwYXJhbXMsIHZpc2libGUpIHtcbiAgICAgICAgdmFyIHJvdywgaW5kZXg7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnaW5kZXgnKSkge1xuICAgICAgICAgICAgcm93ID0gdGhpcy5nZXREYXRhKClbcGFyYW1zLmluZGV4XTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoJ3VuaXF1ZUlkJykpIHtcbiAgICAgICAgICAgIHJvdyA9IHRoaXMuZ2V0Um93QnlVbmlxdWVJZChwYXJhbXMudW5pcXVlSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyb3cpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4ID0gJC5pbkFycmF5KHJvdywgdGhpcy5oaWRkZW5Sb3dzKTtcblxuICAgICAgICBpZiAoIXZpc2libGUgJiYgaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGRlblJvd3MucHVzaChyb3cpO1xuICAgICAgICB9IGVsc2UgaWYgKHZpc2libGUgJiYgaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5oaWRkZW5Sb3dzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0Qm9keSh0cnVlKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmdldEhpZGRlblJvd3MgPSBmdW5jdGlvbiAoc2hvdykge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5nZXREYXRhKCksXG4gICAgICAgICAgICByb3dzID0gW107XG5cbiAgICAgICAgJC5lYWNoKGRhdGEsIGZ1bmN0aW9uIChpLCByb3cpIHtcbiAgICAgICAgICAgIGlmICgkLmluQXJyYXkocm93LCB0aGF0LmhpZGRlblJvd3MpID4gLTEpIHtcbiAgICAgICAgICAgICAgICByb3dzLnB1c2gocm93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaGlkZGVuUm93cyA9IHJvd3M7XG4gICAgICAgIHJldHVybiByb3dzO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUubWVyZ2VDZWxscyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciByb3cgPSBvcHRpb25zLmluZGV4LFxuICAgICAgICAgICAgY29sID0gJC5pbkFycmF5KG9wdGlvbnMuZmllbGQsIHRoaXMuZ2V0VmlzaWJsZUZpZWxkcygpKSxcbiAgICAgICAgICAgIHJvd3NwYW4gPSBvcHRpb25zLnJvd3NwYW4gfHwgMSxcbiAgICAgICAgICAgIGNvbHNwYW4gPSBvcHRpb25zLmNvbHNwYW4gfHwgMSxcbiAgICAgICAgICAgIGksIGosXG4gICAgICAgICAgICAkdHIgPSB0aGlzLiRib2R5LmZpbmQoJz50cicpLFxuICAgICAgICAgICAgJHRkO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGV0YWlsVmlldyAmJiAhdGhpcy5vcHRpb25zLmNhcmRWaWV3KSB7XG4gICAgICAgICAgICBjb2wgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgICR0ZCA9ICR0ci5lcShyb3cpLmZpbmQoJz50ZCcpLmVxKGNvbCk7XG5cbiAgICAgICAgaWYgKHJvdyA8IDAgfHwgY29sIDwgMCB8fCByb3cgPj0gdGhpcy5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gcm93OyBpIDwgcm93ICsgcm93c3BhbjsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGogPSBjb2w7IGogPCBjb2wgKyBjb2xzcGFuOyBqKyspIHtcbiAgICAgICAgICAgICAgICAkdHIuZXEoaSkuZmluZCgnPnRkJykuZXEoaikuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJHRkLmF0dHIoJ3Jvd3NwYW4nLCByb3dzcGFuKS5hdHRyKCdjb2xzcGFuJywgY29sc3Bhbikuc2hvdygpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUudXBkYXRlQ2VsbCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMuaGFzT3duUHJvcGVydHkoJ2luZGV4JykgfHxcbiAgICAgICAgICAgICFwYXJhbXMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkJykgfHxcbiAgICAgICAgICAgICFwYXJhbXMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGFbcGFyYW1zLmluZGV4XVtwYXJhbXMuZmllbGRdID0gcGFyYW1zLnZhbHVlO1xuXG4gICAgICAgIGlmIChwYXJhbXMucmVpbml0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdFNvcnQoKTtcbiAgICAgICAgdGhpcy5pbml0Qm9keSh0cnVlKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnM7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5nZXRTZWxlY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuICQuZ3JlcCh0aGlzLm9wdGlvbnMuZGF0YSwgZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgLy8gZml4ICMyNDI0OiBmcm9tIGh0bWwgd2l0aCBjaGVja2JveFxuICAgICAgICAgICAgcmV0dXJuIHJvd1t0aGF0LmhlYWRlci5zdGF0ZUZpZWxkXSA9PT0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5nZXRBbGxTZWxlY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuICQuZ3JlcCh0aGlzLm9wdGlvbnMuZGF0YSwgZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgcmV0dXJuIHJvd1t0aGF0LmhlYWRlci5zdGF0ZUZpZWxkXTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5jaGVja0FsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jaGVja0FsbF8odHJ1ZSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS51bmNoZWNrQWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNoZWNrQWxsXyhmYWxzZSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5jaGVja0ludmVydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgcm93cyA9IHRoYXQuJHNlbGVjdEl0ZW0uZmlsdGVyKCc6ZW5hYmxlZCcpO1xuICAgICAgICB2YXIgY2hlY2tlZCA9IHJvd3MuZmlsdGVyKCc6Y2hlY2tlZCcpO1xuICAgICAgICByb3dzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHRoaXMpLnByb3AoJ2NoZWNrZWQnLCAhJCh0aGlzKS5wcm9wKCdjaGVja2VkJykpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhhdC51cGRhdGVSb3dzKCk7XG4gICAgICAgIHRoYXQudXBkYXRlU2VsZWN0ZWQoKTtcbiAgICAgICAgdGhhdC50cmlnZ2VyKCd1bmNoZWNrLXNvbWUnLCBjaGVja2VkKTtcbiAgICAgICAgY2hlY2tlZCA9IHRoYXQuZ2V0U2VsZWN0aW9ucygpO1xuICAgICAgICB0aGF0LnRyaWdnZXIoJ2NoZWNrLXNvbWUnLCBjaGVja2VkKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmNoZWNrQWxsXyA9IGZ1bmN0aW9uIChjaGVja2VkKSB7XG4gICAgICAgIHZhciByb3dzO1xuICAgICAgICBpZiAoIWNoZWNrZWQpIHtcbiAgICAgICAgICAgIHJvd3MgPSB0aGlzLmdldFNlbGVjdGlvbnMoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRzZWxlY3RBbGwuYWRkKHRoaXMuJHNlbGVjdEFsbF8pLnByb3AoJ2NoZWNrZWQnLCBjaGVja2VkKTtcbiAgICAgICAgdGhpcy4kc2VsZWN0SXRlbS5maWx0ZXIoJzplbmFibGVkJykucHJvcCgnY2hlY2tlZCcsIGNoZWNrZWQpO1xuICAgICAgICB0aGlzLnVwZGF0ZVJvd3MoKTtcbiAgICAgICAgaWYgKGNoZWNrZWQpIHtcbiAgICAgICAgICAgIHJvd3MgPSB0aGlzLmdldFNlbGVjdGlvbnMoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyaWdnZXIoY2hlY2tlZCA/ICdjaGVjay1hbGwnIDogJ3VuY2hlY2stYWxsJywgcm93cyk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB0aGlzLmNoZWNrXyh0cnVlLCBpbmRleCk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS51bmNoZWNrID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHRoaXMuY2hlY2tfKGZhbHNlLCBpbmRleCk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5jaGVja18gPSBmdW5jdGlvbiAoY2hlY2tlZCwgaW5kZXgpIHtcbiAgICAgICAgdmFyICRlbCA9IHRoaXMuJHNlbGVjdEl0ZW0uZmlsdGVyKHNwcmludGYoJ1tkYXRhLWluZGV4PVwiJXNcIl0nLCBpbmRleCkpLnByb3AoJ2NoZWNrZWQnLCBjaGVja2VkKTtcbiAgICAgICAgdGhpcy5kYXRhW2luZGV4XVt0aGlzLmhlYWRlci5zdGF0ZUZpZWxkXSA9IGNoZWNrZWQ7XG4gICAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWQoKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKGNoZWNrZWQgPyAnY2hlY2snIDogJ3VuY2hlY2snLCB0aGlzLmRhdGFbaW5kZXhdLCAkZWwpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuY2hlY2tCeSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdGhpcy5jaGVja0J5Xyh0cnVlLCBvYmopO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUudW5jaGVja0J5ID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB0aGlzLmNoZWNrQnlfKGZhbHNlLCBvYmopO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuY2hlY2tCeV8gPSBmdW5jdGlvbiAoY2hlY2tlZCwgb2JqKSB7XG4gICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KCdmaWVsZCcpIHx8ICFvYmouaGFzT3duUHJvcGVydHkoJ3ZhbHVlcycpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICByb3dzID0gW107XG4gICAgICAgICQuZWFjaCh0aGlzLm9wdGlvbnMuZGF0YSwgZnVuY3Rpb24gKGluZGV4LCByb3cpIHtcbiAgICAgICAgICAgIGlmICghcm93Lmhhc093blByb3BlcnR5KG9iai5maWVsZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJC5pbkFycmF5KHJvd1tvYmouZmllbGRdLCBvYmoudmFsdWVzKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGVsID0gdGhhdC4kc2VsZWN0SXRlbS5maWx0ZXIoJzplbmFibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihzcHJpbnRmKCdbZGF0YS1pbmRleD1cIiVzXCJdJywgaW5kZXgpKS5wcm9wKCdjaGVja2VkJywgY2hlY2tlZCk7XG4gICAgICAgICAgICAgICAgcm93W3RoYXQuaGVhZGVyLnN0YXRlRmllbGRdID0gY2hlY2tlZDtcbiAgICAgICAgICAgICAgICByb3dzLnB1c2gocm93KTtcbiAgICAgICAgICAgICAgICB0aGF0LnRyaWdnZXIoY2hlY2tlZCA/ICdjaGVjaycgOiAndW5jaGVjaycsIHJvdywgJGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWQoKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKGNoZWNrZWQgPyAnY2hlY2stc29tZScgOiAndW5jaGVjay1zb21lJywgcm93cyk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLiRlbC5pbnNlcnRCZWZvcmUodGhpcy4kY29udGFpbmVyKTtcbiAgICAgICAgJCh0aGlzLm9wdGlvbnMudG9vbGJhcikuaW5zZXJ0QmVmb3JlKHRoaXMuJGVsKTtcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLm5leHQoKS5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLiRlbC5odG1sKHRoaXMuJGVsXy5odG1sKCkpXG4gICAgICAgICAgICAuY3NzKCdtYXJnaW4tdG9wJywgJzAnKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgdGhpcy4kZWxfLmF0dHIoJ2NsYXNzJykgfHwgJycpOyAvLyByZXNldCB0aGUgY2xhc3NcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnNob3dMb2FkaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLiR0YWJsZUxvYWRpbmcuc2hvdygpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaGlkZUxvYWRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuJHRhYmxlTG9hZGluZy5oaWRlKCk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS50b2dnbGVQYWdpbmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMucGFnaW5hdGlvbiA9ICF0aGlzLm9wdGlvbnMucGFnaW5hdGlvbjtcbiAgICAgICAgdmFyIGJ1dHRvbiA9IHRoaXMuJHRvb2xiYXIuZmluZCgnYnV0dG9uW25hbWU9XCJwYWdpbmF0aW9uU3dpdGNoXCJdIGknKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYWdpbmF0aW9uKSB7XG4gICAgICAgICAgICBidXR0b24uYXR0cihcImNsYXNzXCIsIHRoaXMub3B0aW9ucy5pY29uc1ByZWZpeCArIFwiIFwiICsgdGhpcy5vcHRpb25zLmljb25zLnBhZ2luYXRpb25Td2l0Y2hEb3duKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hdHRyKFwiY2xhc3NcIiwgdGhpcy5vcHRpb25zLmljb25zUHJlZml4ICsgXCIgXCIgKyB0aGlzLm9wdGlvbnMuaWNvbnMucGFnaW5hdGlvblN3aXRjaFVwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLnVybCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnVybCA9IHBhcmFtcy51cmw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMucGFnZU51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIgPSBwYXJhbXMucGFnZU51bWJlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5wYWdlU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2VTaXplID0gcGFyYW1zLnBhZ2VTaXplO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdFNlcnZlcihwYXJhbXMgJiYgcGFyYW1zLnNpbGVudCxcbiAgICAgICAgICAgIHBhcmFtcyAmJiBwYXJhbXMucXVlcnksIHBhcmFtcyAmJiBwYXJhbXMudXJsKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZWZyZXNoJywgcGFyYW1zKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnJlc2V0V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0hlYWRlciAmJiB0aGlzLm9wdGlvbnMuaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLmZpdEhlYWRlcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0Zvb3Rlcikge1xuICAgICAgICAgICAgdGhpcy5maXRGb290ZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuc2hvd0NvbHVtbiA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICB0aGlzLnRvZ2dsZUNvbHVtbihnZXRGaWVsZEluZGV4KHRoaXMuY29sdW1ucywgZmllbGQpLCB0cnVlLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmhpZGVDb2x1bW4gPSBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgdGhpcy50b2dnbGVDb2x1bW4oZ2V0RmllbGRJbmRleCh0aGlzLmNvbHVtbnMsIGZpZWxkKSwgZmFsc2UsIHRydWUpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuZ2V0SGlkZGVuQ29sdW1ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICQuZ3JlcCh0aGlzLmNvbHVtbnMsIGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICAgIHJldHVybiAhY29sdW1uLnZpc2libGU7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuZ2V0VmlzaWJsZUNvbHVtbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkLmdyZXAodGhpcy5jb2x1bW5zLCBmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sdW1uLnZpc2libGU7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUudG9nZ2xlQWxsQ29sdW1ucyA9IGZ1bmN0aW9uICh2aXNpYmxlKSB7XG4gICAgICAgICQuZWFjaCh0aGlzLmNvbHVtbnMsIGZ1bmN0aW9uIChpLCBjb2x1bW4pIHtcbiAgICAgICAgICAgIHRoaXMuY29sdW1uc1tpXS52aXNpYmxlID0gdmlzaWJsZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pbml0SGVhZGVyKCk7XG4gICAgICAgIHRoaXMuaW5pdFNlYXJjaCgpO1xuICAgICAgICB0aGlzLmluaXRQYWdpbmF0aW9uKCk7XG4gICAgICAgIHRoaXMuaW5pdEJvZHkoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93Q29sdW1ucykge1xuICAgICAgICAgICAgdmFyICRpdGVtcyA9IHRoaXMuJHRvb2xiYXIuZmluZCgnLmtlZXAtb3BlbiBpbnB1dCcpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXG4gICAgICAgICAgICBpZiAoJGl0ZW1zLmZpbHRlcignOmNoZWNrZWQnKS5sZW5ndGggPD0gdGhpcy5vcHRpb25zLm1pbmltdW1Db3VudENvbHVtbnMpIHtcbiAgICAgICAgICAgICAgICAkaXRlbXMuZmlsdGVyKCc6Y2hlY2tlZCcpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnNob3dBbGxDb2x1bW5zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRvZ2dsZUFsbENvbHVtbnModHJ1ZSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5oaWRlQWxsQ29sdW1ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50b2dnbGVBbGxDb2x1bW5zKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmZpbHRlckJ5ID0gZnVuY3Rpb24gKGNvbHVtbnMpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJDb2x1bW5zID0gJC5pc0VtcHR5T2JqZWN0KGNvbHVtbnMpID8ge30gOiBjb2x1bW5zO1xuICAgICAgICB0aGlzLm9wdGlvbnMucGFnZU51bWJlciA9IDE7XG4gICAgICAgIHRoaXMuaW5pdFNlYXJjaCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnNjcm9sbFRvID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSAnYm90dG9tJyA/IHRoaXMuJHRhYmxlQm9keVswXS5zY3JvbGxIZWlnaHQgOiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLiR0YWJsZUJvZHkuc2Nyb2xsVG9wKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHRhYmxlQm9keS5zY3JvbGxUb3AoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuZ2V0U2Nyb2xsUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjcm9sbFRvKCk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5zZWxlY3RQYWdlID0gZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgaWYgKHBhZ2UgPiAwICYmIHBhZ2UgPD0gdGhpcy5vcHRpb25zLnRvdGFsUGFnZXMpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyID0gcGFnZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvbigpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5wcmV2UGFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyID4gMSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2VOdW1iZXItLTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvbigpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5uZXh0UGFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyIDwgdGhpcy5vcHRpb25zLnRvdGFsUGFnZXMpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyKys7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUudG9nZ2xlVmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmNhcmRWaWV3ID0gIXRoaXMub3B0aW9ucy5jYXJkVmlldztcbiAgICAgICAgdGhpcy5pbml0SGVhZGVyKCk7XG4gICAgICAgIC8vIEZpeGVkIHJlbW92ZSB0b29sYmFyIHdoZW4gY2xpY2sgY2FyZFZpZXcgYnV0dG9uLlxuICAgICAgICAvL3RoYXQuaW5pdFRvb2xiYXIoKTtcbiAgICAgICAgdGhpcy5pbml0Qm9keSgpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3RvZ2dsZScsIHRoaXMub3B0aW9ucy5jYXJkVmlldyk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5yZWZyZXNoT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIC8vSWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQgdGhlbiBhdm9pZCB0aGUgY2FsbCBvZiBkZXN0cm95IC8gaW5pdCBtZXRob2RzXG4gICAgICAgIGlmIChjb21wYXJlT2JqZWN0cyh0aGlzLm9wdGlvbnMsIG9wdGlvbnMsIHRydWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQodGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZWZyZXNoLW9wdGlvbnMnLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5yZXNldFNlYXJjaCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIHZhciAkc2VhcmNoID0gdGhpcy4kdG9vbGJhci5maW5kKCcuc2VhcmNoIGlucHV0Jyk7XG4gICAgICAgICRzZWFyY2gudmFsKHRleHQgfHwgJycpO1xuICAgICAgICB0aGlzLm9uU2VhcmNoKHtjdXJyZW50VGFyZ2V0OiAkc2VhcmNofSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5leHBhbmRSb3dfID0gZnVuY3Rpb24gKGV4cGFuZCwgaW5kZXgpIHtcbiAgICAgICAgdmFyICR0ciA9IHRoaXMuJGJvZHkuZmluZChzcHJpbnRmKCc+IHRyW2RhdGEtaW5kZXg9XCIlc1wiXScsIGluZGV4KSk7XG4gICAgICAgIGlmICgkdHIubmV4dCgpLmlzKCd0ci5kZXRhaWwtdmlldycpID09PSAoZXhwYW5kID8gZmFsc2UgOiB0cnVlKSkge1xuICAgICAgICAgICAgJHRyLmZpbmQoJz4gdGQgPiAuZGV0YWlsLWljb24nKS5jbGljaygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5leHBhbmRSb3cgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5leHBhbmRSb3dfKHRydWUsIGluZGV4KTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmNvbGxhcHNlUm93ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHRoaXMuZXhwYW5kUm93XyhmYWxzZSwgaW5kZXgpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuZXhwYW5kQWxsUm93cyA9IGZ1bmN0aW9uIChpc1N1YlRhYmxlKSB7XG4gICAgICAgIGlmIChpc1N1YlRhYmxlKSB7XG4gICAgICAgICAgICB2YXIgJHRyID0gdGhpcy4kYm9keS5maW5kKHNwcmludGYoJz4gdHJbZGF0YS1pbmRleD1cIiVzXCJdJywgMCkpLFxuICAgICAgICAgICAgICAgIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGRldGFpbEljb24gPSBudWxsLFxuICAgICAgICAgICAgICAgIGV4ZWN1dGVJbnRlcnZhbCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlkSW50ZXJ2YWwgPSAtMTtcblxuICAgICAgICAgICAgaWYgKCEkdHIubmV4dCgpLmlzKCd0ci5kZXRhaWwtdmlldycpKSB7XG4gICAgICAgICAgICAgICAgJHRyLmZpbmQoJz4gdGQgPiAuZGV0YWlsLWljb24nKS5jbGljaygpO1xuICAgICAgICAgICAgICAgIGV4ZWN1dGVJbnRlcnZhbCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCEkdHIubmV4dCgpLm5leHQoKS5pcygndHIuZGV0YWlsLXZpZXcnKSkge1xuICAgICAgICAgICAgICAgICR0ci5uZXh0KCkuZmluZChcIi5kZXRhaWwtaWNvblwiKS5jbGljaygpO1xuICAgICAgICAgICAgICAgIGV4ZWN1dGVJbnRlcnZhbCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChleGVjdXRlSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZEludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsSWNvbiA9IHRoYXQuJGJvZHkuZmluZChcInRyLmRldGFpbC12aWV3XCIpLmxhc3QoKS5maW5kKFwiLmRldGFpbC1pY29uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRldGFpbEljb24ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbEljb24uY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpZEludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpZEludGVydmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdHJzID0gdGhpcy4kYm9keS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV4cGFuZFJvd18odHJ1ZSwgJCh0cnNbaV0pLmRhdGEoXCJpbmRleFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmNvbGxhcHNlQWxsUm93cyA9IGZ1bmN0aW9uIChpc1N1YlRhYmxlKSB7XG4gICAgICAgIGlmIChpc1N1YlRhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmV4cGFuZFJvd18oZmFsc2UsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRycyA9IHRoaXMuJGJvZHkuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5leHBhbmRSb3dfKGZhbHNlLCAkKHRyc1tpXSkuZGF0YShcImluZGV4XCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUudXBkYXRlRm9ybWF0VGV4dCA9IGZ1bmN0aW9uIChuYW1lLCB0ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNbc3ByaW50ZignZm9ybWF0JXMnLCBuYW1lKV0pIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbc3ByaW50ZignZm9ybWF0JXMnLCBuYW1lKV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zW3NwcmludGYoJ2Zvcm1hdCVzJywgbmFtZSldID0gdGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluaXRUb29sYmFyKCk7XG4gICAgICAgIHRoaXMuaW5pdFBhZ2luYXRpb24oKTtcbiAgICAgICAgdGhpcy5pbml0Qm9keSgpO1xuICAgIH07XG5cbiAgICAvLyBCT09UU1RSQVAgVEFCTEUgUExVR0lOIERFRklOSVRJT05cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgdmFyIGFsbG93ZWRNZXRob2RzID0gW1xuICAgICAgICAnZ2V0T3B0aW9ucycsXG4gICAgICAgICdnZXRTZWxlY3Rpb25zJywgJ2dldEFsbFNlbGVjdGlvbnMnLCAnZ2V0RGF0YScsXG4gICAgICAgICdsb2FkJywgJ2FwcGVuZCcsICdwcmVwZW5kJywgJ3JlbW92ZScsICdyZW1vdmVBbGwnLFxuICAgICAgICAnaW5zZXJ0Um93JywgJ3VwZGF0ZVJvdycsICd1cGRhdGVDZWxsJywgJ3VwZGF0ZUJ5VW5pcXVlSWQnLCAncmVtb3ZlQnlVbmlxdWVJZCcsXG4gICAgICAgICdnZXRSb3dCeVVuaXF1ZUlkJywgJ3Nob3dSb3cnLCAnaGlkZVJvdycsICdnZXRIaWRkZW5Sb3dzJyxcbiAgICAgICAgJ21lcmdlQ2VsbHMnLFxuICAgICAgICAnY2hlY2tBbGwnLCAndW5jaGVja0FsbCcsICdjaGVja0ludmVydCcsXG4gICAgICAgICdjaGVjaycsICd1bmNoZWNrJyxcbiAgICAgICAgJ2NoZWNrQnknLCAndW5jaGVja0J5JyxcbiAgICAgICAgJ3JlZnJlc2gnLFxuICAgICAgICAncmVzZXRWaWV3JyxcbiAgICAgICAgJ3Jlc2V0V2lkdGgnLFxuICAgICAgICAnZGVzdHJveScsXG4gICAgICAgICdzaG93TG9hZGluZycsICdoaWRlTG9hZGluZycsXG4gICAgICAgICdzaG93Q29sdW1uJywgJ2hpZGVDb2x1bW4nLCAnZ2V0SGlkZGVuQ29sdW1ucycsICdnZXRWaXNpYmxlQ29sdW1ucycsXG4gICAgICAgICdzaG93QWxsQ29sdW1ucycsICdoaWRlQWxsQ29sdW1ucycsXG4gICAgICAgICdmaWx0ZXJCeScsXG4gICAgICAgICdzY3JvbGxUbycsXG4gICAgICAgICdnZXRTY3JvbGxQb3NpdGlvbicsXG4gICAgICAgICdzZWxlY3RQYWdlJywgJ3ByZXZQYWdlJywgJ25leHRQYWdlJyxcbiAgICAgICAgJ3RvZ2dsZVBhZ2luYXRpb24nLFxuICAgICAgICAndG9nZ2xlVmlldycsXG4gICAgICAgICdyZWZyZXNoT3B0aW9ucycsXG4gICAgICAgICdyZXNldFNlYXJjaCcsXG4gICAgICAgICdleHBhbmRSb3cnLCAnY29sbGFwc2VSb3cnLCAnZXhwYW5kQWxsUm93cycsICdjb2xsYXBzZUFsbFJvd3MnLFxuICAgICAgICAndXBkYXRlRm9ybWF0VGV4dCdcbiAgICBdO1xuXG4gICAgJC5mbi5ib290c3RyYXBUYWJsZSA9IGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgdmFyIHZhbHVlLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgZGF0YSA9ICR0aGlzLmRhdGEoJ2Jvb3RzdHJhcC50YWJsZScpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQm9vdHN0cmFwVGFibGUuREVGQVVMVFMsICR0aGlzLmRhdGEoKSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbiA9PT0gJ29iamVjdCcgJiYgb3B0aW9uKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQuaW5BcnJheShvcHRpb24sIGFsbG93ZWRNZXRob2RzKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBtZXRob2Q6IFwiICsgb3B0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIGFyZ3MpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbiA9PT0gJ2Rlc3Ryb3knKSB7XG4gICAgICAgICAgICAgICAgICAgICR0aGlzLnJlbW92ZURhdGEoJ2Jvb3RzdHJhcC50YWJsZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnYm9vdHN0cmFwLnRhYmxlJywgKGRhdGEgPSBuZXcgQm9vdHN0cmFwVGFibGUodGhpcywgb3B0aW9ucykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzIDogdmFsdWU7XG4gICAgfTtcblxuICAgICQuZm4uYm9vdHN0cmFwVGFibGUuQ29uc3RydWN0b3IgPSBCb290c3RyYXBUYWJsZTtcbiAgICAkLmZuLmJvb3RzdHJhcFRhYmxlLmRlZmF1bHRzID0gQm9vdHN0cmFwVGFibGUuREVGQVVMVFM7XG4gICAgJC5mbi5ib290c3RyYXBUYWJsZS5jb2x1bW5EZWZhdWx0cyA9IEJvb3RzdHJhcFRhYmxlLkNPTFVNTl9ERUZBVUxUUztcbiAgICAkLmZuLmJvb3RzdHJhcFRhYmxlLmxvY2FsZXMgPSBCb290c3RyYXBUYWJsZS5MT0NBTEVTO1xuICAgICQuZm4uYm9vdHN0cmFwVGFibGUubWV0aG9kcyA9IGFsbG93ZWRNZXRob2RzO1xuICAgICQuZm4uYm9vdHN0cmFwVGFibGUudXRpbHMgPSB7XG4gICAgICAgIHNwcmludGY6IHNwcmludGYsXG4gICAgICAgIGdldEZpZWxkSW5kZXg6IGdldEZpZWxkSW5kZXgsXG4gICAgICAgIGNvbXBhcmVPYmplY3RzOiBjb21wYXJlT2JqZWN0cyxcbiAgICAgICAgY2FsY3VsYXRlT2JqZWN0VmFsdWU6IGNhbGN1bGF0ZU9iamVjdFZhbHVlLFxuICAgICAgICBnZXRJdGVtRmllbGQ6IGdldEl0ZW1GaWVsZCxcbiAgICAgICAgb2JqZWN0S2V5czogb2JqZWN0S2V5cyxcbiAgICAgICAgaXNJRUJyb3dzZXI6IGlzSUVCcm93c2VyXG4gICAgfTtcblxuICAgIC8vIEJPT1RTVFJBUCBUQUJMRSBJTklUXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgICQoZnVuY3Rpb24gKCkge1xuICAgICAgICAkKCdbZGF0YS10b2dnbGU9XCJ0YWJsZVwiXScpLmJvb3RzdHJhcFRhYmxlKCk7XG4gICAgfSk7XG59KShqUXVlcnkpO1xuXG4vKipcbiAqIEBhdXRob3I6IERlbm5pcyBIZXJuw6FuZGV6XG4gKiBAd2ViU2l0ZTogaHR0cDovL2RqaHZzY2YuZ2l0aHViLmlvL0Jsb2dcbiAqIEB2ZXJzaW9uOiB2MS4wLjBcbiAqL1xuXG4hZnVuY3Rpb24gKCQpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBkaWFjcml0aWNzTWFwID0ge307XG4gICAgdmFyIGRlZmF1bHRBY2NlbnRzRGlhY3JpdGljcyA9IFtcbiAgICAgICAgeydiYXNlJzonQScsICdsZXR0ZXJzJzonXFx1MDA0MVxcdTI0QjZcXHVGRjIxXFx1MDBDMFxcdTAwQzFcXHUwMEMyXFx1MUVBNlxcdTFFQTRcXHUxRUFBXFx1MUVBOFxcdTAwQzNcXHUwMTAwXFx1MDEwMlxcdTFFQjBcXHUxRUFFXFx1MUVCNFxcdTFFQjJcXHUwMjI2XFx1MDFFMFxcdTAwQzRcXHUwMURFXFx1MUVBMlxcdTAwQzVcXHUwMUZBXFx1MDFDRFxcdTAyMDBcXHUwMjAyXFx1MUVBMFxcdTFFQUNcXHUxRUI2XFx1MUUwMFxcdTAxMDRcXHUwMjNBXFx1MkM2Rid9LFxuICAgICAgICB7J2Jhc2UnOidBQScsJ2xldHRlcnMnOidcXHVBNzMyJ30sXG4gICAgICAgIHsnYmFzZSc6J0FFJywnbGV0dGVycyc6J1xcdTAwQzZcXHUwMUZDXFx1MDFFMid9LFxuICAgICAgICB7J2Jhc2UnOidBTycsJ2xldHRlcnMnOidcXHVBNzM0J30sXG4gICAgICAgIHsnYmFzZSc6J0FVJywnbGV0dGVycyc6J1xcdUE3MzYnfSxcbiAgICAgICAgeydiYXNlJzonQVYnLCdsZXR0ZXJzJzonXFx1QTczOFxcdUE3M0EnfSxcbiAgICAgICAgeydiYXNlJzonQVknLCdsZXR0ZXJzJzonXFx1QTczQyd9LFxuICAgICAgICB7J2Jhc2UnOidCJywgJ2xldHRlcnMnOidcXHUwMDQyXFx1MjRCN1xcdUZGMjJcXHUxRTAyXFx1MUUwNFxcdTFFMDZcXHUwMjQzXFx1MDE4MlxcdTAxODEnfSxcbiAgICAgICAgeydiYXNlJzonQycsICdsZXR0ZXJzJzonXFx1MDA0M1xcdTI0QjhcXHVGRjIzXFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAwQzdcXHUxRTA4XFx1MDE4N1xcdTAyM0JcXHVBNzNFJ30sXG4gICAgICAgIHsnYmFzZSc6J0QnLCAnbGV0dGVycyc6J1xcdTAwNDRcXHUyNEI5XFx1RkYyNFxcdTFFMEFcXHUwMTBFXFx1MUUwQ1xcdTFFMTBcXHUxRTEyXFx1MUUwRVxcdTAxMTBcXHUwMThCXFx1MDE4QVxcdTAxODlcXHVBNzc5J30sXG4gICAgICAgIHsnYmFzZSc6J0RaJywnbGV0dGVycyc6J1xcdTAxRjFcXHUwMUM0J30sXG4gICAgICAgIHsnYmFzZSc6J0R6JywnbGV0dGVycyc6J1xcdTAxRjJcXHUwMUM1J30sXG4gICAgICAgIHsnYmFzZSc6J0UnLCAnbGV0dGVycyc6J1xcdTAwNDVcXHUyNEJBXFx1RkYyNVxcdTAwQzhcXHUwMEM5XFx1MDBDQVxcdTFFQzBcXHUxRUJFXFx1MUVDNFxcdTFFQzJcXHUxRUJDXFx1MDExMlxcdTFFMTRcXHUxRTE2XFx1MDExNFxcdTAxMTZcXHUwMENCXFx1MUVCQVxcdTAxMUFcXHUwMjA0XFx1MDIwNlxcdTFFQjhcXHUxRUM2XFx1MDIyOFxcdTFFMUNcXHUwMTE4XFx1MUUxOFxcdTFFMUFcXHUwMTkwXFx1MDE4RSd9LFxuICAgICAgICB7J2Jhc2UnOidGJywgJ2xldHRlcnMnOidcXHUwMDQ2XFx1MjRCQlxcdUZGMjZcXHUxRTFFXFx1MDE5MVxcdUE3N0InfSxcbiAgICAgICAgeydiYXNlJzonRycsICdsZXR0ZXJzJzonXFx1MDA0N1xcdTI0QkNcXHVGRjI3XFx1MDFGNFxcdTAxMUNcXHUxRTIwXFx1MDExRVxcdTAxMjBcXHUwMUU2XFx1MDEyMlxcdTAxRTRcXHUwMTkzXFx1QTdBMFxcdUE3N0RcXHVBNzdFJ30sXG4gICAgICAgIHsnYmFzZSc6J0gnLCAnbGV0dGVycyc6J1xcdTAwNDhcXHUyNEJEXFx1RkYyOFxcdTAxMjRcXHUxRTIyXFx1MUUyNlxcdTAyMUVcXHUxRTI0XFx1MUUyOFxcdTFFMkFcXHUwMTI2XFx1MkM2N1xcdTJDNzVcXHVBNzhEJ30sXG4gICAgICAgIHsnYmFzZSc6J0knLCAnbGV0dGVycyc6J1xcdTAwNDlcXHUyNEJFXFx1RkYyOVxcdTAwQ0NcXHUwMENEXFx1MDBDRVxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMzBcXHUwMENGXFx1MUUyRVxcdTFFQzhcXHUwMUNGXFx1MDIwOFxcdTAyMEFcXHUxRUNBXFx1MDEyRVxcdTFFMkNcXHUwMTk3J30sXG4gICAgICAgIHsnYmFzZSc6J0onLCAnbGV0dGVycyc6J1xcdTAwNEFcXHUyNEJGXFx1RkYyQVxcdTAxMzRcXHUwMjQ4J30sXG4gICAgICAgIHsnYmFzZSc6J0snLCAnbGV0dGVycyc6J1xcdTAwNEJcXHUyNEMwXFx1RkYyQlxcdTFFMzBcXHUwMUU4XFx1MUUzMlxcdTAxMzZcXHUxRTM0XFx1MDE5OFxcdTJDNjlcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBN0EyJ30sXG4gICAgICAgIHsnYmFzZSc6J0wnLCAnbGV0dGVycyc6J1xcdTAwNENcXHUyNEMxXFx1RkYyQ1xcdTAxM0ZcXHUwMTM5XFx1MDEzRFxcdTFFMzZcXHUxRTM4XFx1MDEzQlxcdTFFM0NcXHUxRTNBXFx1MDE0MVxcdTAyM0RcXHUyQzYyXFx1MkM2MFxcdUE3NDhcXHVBNzQ2XFx1QTc4MCd9LFxuICAgICAgICB7J2Jhc2UnOidMSicsJ2xldHRlcnMnOidcXHUwMUM3J30sXG4gICAgICAgIHsnYmFzZSc6J0xqJywnbGV0dGVycyc6J1xcdTAxQzgnfSxcbiAgICAgICAgeydiYXNlJzonTScsICdsZXR0ZXJzJzonXFx1MDA0RFxcdTI0QzJcXHVGRjJEXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MkM2RVxcdTAxOUMnfSxcbiAgICAgICAgeydiYXNlJzonTicsICdsZXR0ZXJzJzonXFx1MDA0RVxcdTI0QzNcXHVGRjJFXFx1MDFGOFxcdTAxNDNcXHUwMEQxXFx1MUU0NFxcdTAxNDdcXHUxRTQ2XFx1MDE0NVxcdTFFNEFcXHUxRTQ4XFx1MDIyMFxcdTAxOURcXHVBNzkwXFx1QTdBNCd9LFxuICAgICAgICB7J2Jhc2UnOidOSicsJ2xldHRlcnMnOidcXHUwMUNBJ30sXG4gICAgICAgIHsnYmFzZSc6J05qJywnbGV0dGVycyc6J1xcdTAxQ0InfSxcbiAgICAgICAgeydiYXNlJzonTycsICdsZXR0ZXJzJzonXFx1MDA0RlxcdTI0QzRcXHVGRjJGXFx1MDBEMlxcdTAwRDNcXHUwMEQ0XFx1MUVEMlxcdTFFRDBcXHUxRUQ2XFx1MUVENFxcdTAwRDVcXHUxRTRDXFx1MDIyQ1xcdTFFNEVcXHUwMTRDXFx1MUU1MFxcdTFFNTJcXHUwMTRFXFx1MDIyRVxcdTAyMzBcXHUwMEQ2XFx1MDIyQVxcdTFFQ0VcXHUwMTUwXFx1MDFEMVxcdTAyMENcXHUwMjBFXFx1MDFBMFxcdTFFRENcXHUxRURBXFx1MUVFMFxcdTFFREVcXHUxRUUyXFx1MUVDQ1xcdTFFRDhcXHUwMUVBXFx1MDFFQ1xcdTAwRDhcXHUwMUZFXFx1MDE4NlxcdTAxOUZcXHVBNzRBXFx1QTc0Qyd9LFxuICAgICAgICB7J2Jhc2UnOidPSScsJ2xldHRlcnMnOidcXHUwMUEyJ30sXG4gICAgICAgIHsnYmFzZSc6J09PJywnbGV0dGVycyc6J1xcdUE3NEUnfSxcbiAgICAgICAgeydiYXNlJzonT1UnLCdsZXR0ZXJzJzonXFx1MDIyMid9LFxuICAgICAgICB7J2Jhc2UnOidPRScsJ2xldHRlcnMnOidcXHUwMDhDXFx1MDE1Mid9LFxuICAgICAgICB7J2Jhc2UnOidvZScsJ2xldHRlcnMnOidcXHUwMDlDXFx1MDE1Myd9LFxuICAgICAgICB7J2Jhc2UnOidQJywgJ2xldHRlcnMnOidcXHUwMDUwXFx1MjRDNVxcdUZGMzBcXHUxRTU0XFx1MUU1NlxcdTAxQTRcXHUyQzYzXFx1QTc1MFxcdUE3NTJcXHVBNzU0J30sXG4gICAgICAgIHsnYmFzZSc6J1EnLCAnbGV0dGVycyc6J1xcdTAwNTFcXHUyNEM2XFx1RkYzMVxcdUE3NTZcXHVBNzU4XFx1MDI0QSd9LFxuICAgICAgICB7J2Jhc2UnOidSJywgJ2xldHRlcnMnOidcXHUwMDUyXFx1MjRDN1xcdUZGMzJcXHUwMTU0XFx1MUU1OFxcdTAxNThcXHUwMjEwXFx1MDIxMlxcdTFFNUFcXHUxRTVDXFx1MDE1NlxcdTFFNUVcXHUwMjRDXFx1MkM2NFxcdUE3NUFcXHVBN0E2XFx1QTc4Mid9LFxuICAgICAgICB7J2Jhc2UnOidTJywgJ2xldHRlcnMnOidcXHUwMDUzXFx1MjRDOFxcdUZGMzNcXHUxRTlFXFx1MDE1QVxcdTFFNjRcXHUwMTVDXFx1MUU2MFxcdTAxNjBcXHUxRTY2XFx1MUU2MlxcdTFFNjhcXHUwMjE4XFx1MDE1RVxcdTJDN0VcXHVBN0E4XFx1QTc4NCd9LFxuICAgICAgICB7J2Jhc2UnOidUJywgJ2xldHRlcnMnOidcXHUwMDU0XFx1MjRDOVxcdUZGMzRcXHUxRTZBXFx1MDE2NFxcdTFFNkNcXHUwMjFBXFx1MDE2MlxcdTFFNzBcXHUxRTZFXFx1MDE2NlxcdTAxQUNcXHUwMUFFXFx1MDIzRVxcdUE3ODYnfSxcbiAgICAgICAgeydiYXNlJzonVFonLCdsZXR0ZXJzJzonXFx1QTcyOCd9LFxuICAgICAgICB7J2Jhc2UnOidVJywgJ2xldHRlcnMnOidcXHUwMDU1XFx1MjRDQVxcdUZGMzVcXHUwMEQ5XFx1MDBEQVxcdTAwREJcXHUwMTY4XFx1MUU3OFxcdTAxNkFcXHUxRTdBXFx1MDE2Q1xcdTAwRENcXHUwMURCXFx1MDFEN1xcdTAxRDVcXHUwMUQ5XFx1MUVFNlxcdTAxNkVcXHUwMTcwXFx1MDFEM1xcdTAyMTRcXHUwMjE2XFx1MDFBRlxcdTFFRUFcXHUxRUU4XFx1MUVFRVxcdTFFRUNcXHUxRUYwXFx1MUVFNFxcdTFFNzJcXHUwMTcyXFx1MUU3NlxcdTFFNzRcXHUwMjQ0J30sXG4gICAgICAgIHsnYmFzZSc6J1YnLCAnbGV0dGVycyc6J1xcdTAwNTZcXHUyNENCXFx1RkYzNlxcdTFFN0NcXHUxRTdFXFx1MDFCMlxcdUE3NUVcXHUwMjQ1J30sXG4gICAgICAgIHsnYmFzZSc6J1ZZJywnbGV0dGVycyc6J1xcdUE3NjAnfSxcbiAgICAgICAgeydiYXNlJzonVycsICdsZXR0ZXJzJzonXFx1MDA1N1xcdTI0Q0NcXHVGRjM3XFx1MUU4MFxcdTFFODJcXHUwMTc0XFx1MUU4NlxcdTFFODRcXHUxRTg4XFx1MkM3Mid9LFxuICAgICAgICB7J2Jhc2UnOidYJywgJ2xldHRlcnMnOidcXHUwMDU4XFx1MjRDRFxcdUZGMzhcXHUxRThBXFx1MUU4Qyd9LFxuICAgICAgICB7J2Jhc2UnOidZJywgJ2xldHRlcnMnOidcXHUwMDU5XFx1MjRDRVxcdUZGMzlcXHUxRUYyXFx1MDBERFxcdTAxNzZcXHUxRUY4XFx1MDIzMlxcdTFFOEVcXHUwMTc4XFx1MUVGNlxcdTFFRjRcXHUwMUIzXFx1MDI0RVxcdTFFRkUnfSxcbiAgICAgICAgeydiYXNlJzonWicsICdsZXR0ZXJzJzonXFx1MDA1QVxcdTI0Q0ZcXHVGRjNBXFx1MDE3OVxcdTFFOTBcXHUwMTdCXFx1MDE3RFxcdTFFOTJcXHUxRTk0XFx1MDFCNVxcdTAyMjRcXHUyQzdGXFx1MkM2QlxcdUE3NjInfSxcbiAgICAgICAgeydiYXNlJzonYScsICdsZXR0ZXJzJzonXFx1MDA2MVxcdTI0RDBcXHVGRjQxXFx1MUU5QVxcdTAwRTBcXHUwMEUxXFx1MDBFMlxcdTFFQTdcXHUxRUE1XFx1MUVBQlxcdTFFQTlcXHUwMEUzXFx1MDEwMVxcdTAxMDNcXHUxRUIxXFx1MUVBRlxcdTFFQjVcXHUxRUIzXFx1MDIyN1xcdTAxRTFcXHUwMEU0XFx1MDFERlxcdTFFQTNcXHUwMEU1XFx1MDFGQlxcdTAxQ0VcXHUwMjAxXFx1MDIwM1xcdTFFQTFcXHUxRUFEXFx1MUVCN1xcdTFFMDFcXHUwMTA1XFx1MkM2NVxcdTAyNTAnfSxcbiAgICAgICAgeydiYXNlJzonYWEnLCdsZXR0ZXJzJzonXFx1QTczMyd9LFxuICAgICAgICB7J2Jhc2UnOidhZScsJ2xldHRlcnMnOidcXHUwMEU2XFx1MDFGRFxcdTAxRTMnfSxcbiAgICAgICAgeydiYXNlJzonYW8nLCdsZXR0ZXJzJzonXFx1QTczNSd9LFxuICAgICAgICB7J2Jhc2UnOidhdScsJ2xldHRlcnMnOidcXHVBNzM3J30sXG4gICAgICAgIHsnYmFzZSc6J2F2JywnbGV0dGVycyc6J1xcdUE3MzlcXHVBNzNCJ30sXG4gICAgICAgIHsnYmFzZSc6J2F5JywnbGV0dGVycyc6J1xcdUE3M0QnfSxcbiAgICAgICAgeydiYXNlJzonYicsICdsZXR0ZXJzJzonXFx1MDA2MlxcdTI0RDFcXHVGRjQyXFx1MUUwM1xcdTFFMDVcXHUxRTA3XFx1MDE4MFxcdTAxODNcXHUwMjUzJ30sXG4gICAgICAgIHsnYmFzZSc6J2MnLCAnbGV0dGVycyc6J1xcdTAwNjNcXHUyNEQyXFx1RkY0M1xcdTAxMDdcXHUwMTA5XFx1MDEwQlxcdTAxMERcXHUwMEU3XFx1MUUwOVxcdTAxODhcXHUwMjNDXFx1QTczRlxcdTIxODQnfSxcbiAgICAgICAgeydiYXNlJzonZCcsICdsZXR0ZXJzJzonXFx1MDA2NFxcdTI0RDNcXHVGRjQ0XFx1MUUwQlxcdTAxMEZcXHUxRTBEXFx1MUUxMVxcdTFFMTNcXHUxRTBGXFx1MDExMVxcdTAxOENcXHUwMjU2XFx1MDI1N1xcdUE3N0EnfSxcbiAgICAgICAgeydiYXNlJzonZHonLCdsZXR0ZXJzJzonXFx1MDFGM1xcdTAxQzYnfSxcbiAgICAgICAgeydiYXNlJzonZScsICdsZXR0ZXJzJzonXFx1MDA2NVxcdTI0RDRcXHVGRjQ1XFx1MDBFOFxcdTAwRTlcXHUwMEVBXFx1MUVDMVxcdTFFQkZcXHUxRUM1XFx1MUVDM1xcdTFFQkRcXHUwMTEzXFx1MUUxNVxcdTFFMTdcXHUwMTE1XFx1MDExN1xcdTAwRUJcXHUxRUJCXFx1MDExQlxcdTAyMDVcXHUwMjA3XFx1MUVCOVxcdTFFQzdcXHUwMjI5XFx1MUUxRFxcdTAxMTlcXHUxRTE5XFx1MUUxQlxcdTAyNDdcXHUwMjVCXFx1MDFERCd9LFxuICAgICAgICB7J2Jhc2UnOidmJywgJ2xldHRlcnMnOidcXHUwMDY2XFx1MjRENVxcdUZGNDZcXHUxRTFGXFx1MDE5MlxcdUE3N0MnfSxcbiAgICAgICAgeydiYXNlJzonZycsICdsZXR0ZXJzJzonXFx1MDA2N1xcdTI0RDZcXHVGRjQ3XFx1MDFGNVxcdTAxMURcXHUxRTIxXFx1MDExRlxcdTAxMjFcXHUwMUU3XFx1MDEyM1xcdTAxRTVcXHUwMjYwXFx1QTdBMVxcdTFENzlcXHVBNzdGJ30sXG4gICAgICAgIHsnYmFzZSc6J2gnLCAnbGV0dGVycyc6J1xcdTAwNjhcXHUyNEQ3XFx1RkY0OFxcdTAxMjVcXHUxRTIzXFx1MUUyN1xcdTAyMUZcXHUxRTI1XFx1MUUyOVxcdTFFMkJcXHUxRTk2XFx1MDEyN1xcdTJDNjhcXHUyQzc2XFx1MDI2NSd9LFxuICAgICAgICB7J2Jhc2UnOidodicsJ2xldHRlcnMnOidcXHUwMTk1J30sXG4gICAgICAgIHsnYmFzZSc6J2knLCAnbGV0dGVycyc6J1xcdTAwNjlcXHUyNEQ4XFx1RkY0OVxcdTAwRUNcXHUwMEVEXFx1MDBFRVxcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAwRUZcXHUxRTJGXFx1MUVDOVxcdTAxRDBcXHUwMjA5XFx1MDIwQlxcdTFFQ0JcXHUwMTJGXFx1MUUyRFxcdTAyNjhcXHUwMTMxJ30sXG4gICAgICAgIHsnYmFzZSc6J2onLCAnbGV0dGVycyc6J1xcdTAwNkFcXHUyNEQ5XFx1RkY0QVxcdTAxMzVcXHUwMUYwXFx1MDI0OSd9LFxuICAgICAgICB7J2Jhc2UnOidrJywgJ2xldHRlcnMnOidcXHUwMDZCXFx1MjREQVxcdUZGNEJcXHUxRTMxXFx1MDFFOVxcdTFFMzNcXHUwMTM3XFx1MUUzNVxcdTAxOTlcXHUyQzZBXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTdBMyd9LFxuICAgICAgICB7J2Jhc2UnOidsJywgJ2xldHRlcnMnOidcXHUwMDZDXFx1MjREQlxcdUZGNENcXHUwMTQwXFx1MDEzQVxcdTAxM0VcXHUxRTM3XFx1MUUzOVxcdTAxM0NcXHUxRTNEXFx1MUUzQlxcdTAxN0ZcXHUwMTQyXFx1MDE5QVxcdTAyNkJcXHUyQzYxXFx1QTc0OVxcdUE3ODFcXHVBNzQ3J30sXG4gICAgICAgIHsnYmFzZSc6J2xqJywnbGV0dGVycyc6J1xcdTAxQzknfSxcbiAgICAgICAgeydiYXNlJzonbScsICdsZXR0ZXJzJzonXFx1MDA2RFxcdTI0RENcXHVGRjREXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MDI3MVxcdTAyNkYnfSxcbiAgICAgICAgeydiYXNlJzonbicsICdsZXR0ZXJzJzonXFx1MDA2RVxcdTI0RERcXHVGRjRFXFx1MDFGOVxcdTAxNDRcXHUwMEYxXFx1MUU0NVxcdTAxNDhcXHUxRTQ3XFx1MDE0NlxcdTFFNEJcXHUxRTQ5XFx1MDE5RVxcdTAyNzJcXHUwMTQ5XFx1QTc5MVxcdUE3QTUnfSxcbiAgICAgICAgeydiYXNlJzonbmonLCdsZXR0ZXJzJzonXFx1MDFDQyd9LFxuICAgICAgICB7J2Jhc2UnOidvJywgJ2xldHRlcnMnOidcXHUwMDZGXFx1MjRERVxcdUZGNEZcXHUwMEYyXFx1MDBGM1xcdTAwRjRcXHUxRUQzXFx1MUVEMVxcdTFFRDdcXHUxRUQ1XFx1MDBGNVxcdTFFNERcXHUwMjJEXFx1MUU0RlxcdTAxNERcXHUxRTUxXFx1MUU1M1xcdTAxNEZcXHUwMjJGXFx1MDIzMVxcdTAwRjZcXHUwMjJCXFx1MUVDRlxcdTAxNTFcXHUwMUQyXFx1MDIwRFxcdTAyMEZcXHUwMUExXFx1MUVERFxcdTFFREJcXHUxRUUxXFx1MUVERlxcdTFFRTNcXHUxRUNEXFx1MUVEOVxcdTAxRUJcXHUwMUVEXFx1MDBGOFxcdTAxRkZcXHUwMjU0XFx1QTc0QlxcdUE3NERcXHUwMjc1J30sXG4gICAgICAgIHsnYmFzZSc6J29pJywnbGV0dGVycyc6J1xcdTAxQTMnfSxcbiAgICAgICAgeydiYXNlJzonb3UnLCdsZXR0ZXJzJzonXFx1MDIyMyd9LFxuICAgICAgICB7J2Jhc2UnOidvbycsJ2xldHRlcnMnOidcXHVBNzRGJ30sXG4gICAgICAgIHsnYmFzZSc6J3AnLCdsZXR0ZXJzJzonXFx1MDA3MFxcdTI0REZcXHVGRjUwXFx1MUU1NVxcdTFFNTdcXHUwMUE1XFx1MUQ3RFxcdUE3NTFcXHVBNzUzXFx1QTc1NSd9LFxuICAgICAgICB7J2Jhc2UnOidxJywnbGV0dGVycyc6J1xcdTAwNzFcXHUyNEUwXFx1RkY1MVxcdTAyNEJcXHVBNzU3XFx1QTc1OSd9LFxuICAgICAgICB7J2Jhc2UnOidyJywnbGV0dGVycyc6J1xcdTAwNzJcXHUyNEUxXFx1RkY1MlxcdTAxNTVcXHUxRTU5XFx1MDE1OVxcdTAyMTFcXHUwMjEzXFx1MUU1QlxcdTFFNURcXHUwMTU3XFx1MUU1RlxcdTAyNERcXHUwMjdEXFx1QTc1QlxcdUE3QTdcXHVBNzgzJ30sXG4gICAgICAgIHsnYmFzZSc6J3MnLCdsZXR0ZXJzJzonXFx1MDA3M1xcdTI0RTJcXHVGRjUzXFx1MDBERlxcdTAxNUJcXHUxRTY1XFx1MDE1RFxcdTFFNjFcXHUwMTYxXFx1MUU2N1xcdTFFNjNcXHUxRTY5XFx1MDIxOVxcdTAxNUZcXHUwMjNGXFx1QTdBOVxcdUE3ODVcXHUxRTlCJ30sXG4gICAgICAgIHsnYmFzZSc6J3QnLCdsZXR0ZXJzJzonXFx1MDA3NFxcdTI0RTNcXHVGRjU0XFx1MUU2QlxcdTFFOTdcXHUwMTY1XFx1MUU2RFxcdTAyMUJcXHUwMTYzXFx1MUU3MVxcdTFFNkZcXHUwMTY3XFx1MDFBRFxcdTAyODhcXHUyQzY2XFx1QTc4Nyd9LFxuICAgICAgICB7J2Jhc2UnOid0eicsJ2xldHRlcnMnOidcXHVBNzI5J30sXG4gICAgICAgIHsnYmFzZSc6J3UnLCdsZXR0ZXJzJzogJ1xcdTAwNzVcXHUyNEU0XFx1RkY1NVxcdTAwRjlcXHUwMEZBXFx1MDBGQlxcdTAxNjlcXHUxRTc5XFx1MDE2QlxcdTFFN0JcXHUwMTZEXFx1MDBGQ1xcdTAxRENcXHUwMUQ4XFx1MDFENlxcdTAxREFcXHUxRUU3XFx1MDE2RlxcdTAxNzFcXHUwMUQ0XFx1MDIxNVxcdTAyMTdcXHUwMUIwXFx1MUVFQlxcdTFFRTlcXHUxRUVGXFx1MUVFRFxcdTFFRjFcXHUxRUU1XFx1MUU3M1xcdTAxNzNcXHUxRTc3XFx1MUU3NVxcdTAyODknfSxcbiAgICAgICAgeydiYXNlJzondicsJ2xldHRlcnMnOidcXHUwMDc2XFx1MjRFNVxcdUZGNTZcXHUxRTdEXFx1MUU3RlxcdTAyOEJcXHVBNzVGXFx1MDI4Qyd9LFxuICAgICAgICB7J2Jhc2UnOid2eScsJ2xldHRlcnMnOidcXHVBNzYxJ30sXG4gICAgICAgIHsnYmFzZSc6J3cnLCdsZXR0ZXJzJzonXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzMnfSxcbiAgICAgICAgeydiYXNlJzoneCcsJ2xldHRlcnMnOidcXHUwMDc4XFx1MjRFN1xcdUZGNThcXHUxRThCXFx1MUU4RCd9LFxuICAgICAgICB7J2Jhc2UnOid5JywnbGV0dGVycyc6J1xcdTAwNzlcXHUyNEU4XFx1RkY1OVxcdTFFRjNcXHUwMEZEXFx1MDE3N1xcdTFFRjlcXHUwMjMzXFx1MUU4RlxcdTAwRkZcXHUxRUY3XFx1MUU5OVxcdTFFRjVcXHUwMUI0XFx1MDI0RlxcdTFFRkYnfSxcbiAgICAgICAgeydiYXNlJzoneicsJ2xldHRlcnMnOidcXHUwMDdBXFx1MjRFOVxcdUZGNUFcXHUwMTdBXFx1MUU5MVxcdTAxN0NcXHUwMTdFXFx1MUU5M1xcdTFFOTVcXHUwMUI2XFx1MDIyNVxcdTAyNDBcXHUyQzZDXFx1QTc2Myd9XG4gICAgXTtcblxuICAgIHZhciBpbml0TmV1dHJhbGlzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGk9MDsgaSA8IGRlZmF1bHRBY2NlbnRzRGlhY3JpdGljcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgbGV0dGVycyA9IGRlZmF1bHRBY2NlbnRzRGlhY3JpdGljc1tpXS5sZXR0ZXJzO1xuICAgICAgICAgICAgZm9yICh2YXIgaj0wOyBqIDwgbGV0dGVycy5sZW5ndGggOyBqKyspe1xuICAgICAgICAgICAgICAgIGRpYWNyaXRpY3NNYXBbbGV0dGVyc1tqXV0gPSBkZWZhdWx0QWNjZW50c0RpYWNyaXRpY3NbaV0uYmFzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVtb3ZlRGlhY3JpdGljcyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXlxcdTAwMDAtXFx1MDA3RV0vZywgZnVuY3Rpb24oYSl7XG4gICAgICAgICAgICByZXR1cm4gZGlhY3JpdGljc01hcFthXSB8fCBhO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJC5leHRlbmQoJC5mbi5ib290c3RyYXBUYWJsZS5kZWZhdWx0cywge1xuICAgICAgICBzZWFyY2hBY2NlbnROZXV0cmFsaXNlOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgdmFyIEJvb3RzdHJhcFRhYmxlID0gJC5mbi5ib290c3RyYXBUYWJsZS5Db25zdHJ1Y3RvcixcbiAgICAgICAgX2luaXQgPSBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdCxcbiAgICAgICAgX2luaXRTZWFyY2ggPSBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdFNlYXJjaDtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNlYXJjaEFjY2VudE5ldXRyYWxpc2UpIHtcbiAgICAgICAgICAgIGluaXROZXV0cmFsaXNlcigpO1xuICAgICAgICB9XG4gICAgICAgIF9pbml0LmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRTZWFyY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpZGVQYWdpbmF0aW9uICE9PSAnc2VydmVyJykge1xuICAgICAgICAgICAgdmFyIHMgPSB0aGlzLnNlYXJjaFRleHQgJiYgdGhpcy5zZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB2YXIgZiA9ICQuaXNFbXB0eU9iamVjdCh0aGlzLmZpbHRlckNvbHVtbnMpID8gbnVsbCA6IHRoaXMuZmlsdGVyQ29sdW1ucztcblxuICAgICAgICAgICAgLy8gQ2hlY2sgZmlsdGVyXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBmID8gJC5ncmVwKHRoaXMub3B0aW9ucy5kYXRhLCBmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBmKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtW2tleV0gIT09IGZba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSkgOiB0aGlzLm9wdGlvbnMuZGF0YTtcblxuICAgICAgICAgICAgdGhpcy5kYXRhID0gcyA/ICQuZ3JlcCh0aGlzLmRhdGEsIGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gJC5pc051bWVyaWMoa2V5KSA/IHBhcnNlSW50KGtleSwgMTApIDoga2V5O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVtW2tleV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW4gPSB0aGF0LmNvbHVtbnNbJC5mbi5ib290c3RyYXBUYWJsZS51dGlscy5nZXRGaWVsZEluZGV4KHRoYXQuY29sdW1ucywga2V5KV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBqID0gJC5pbkFycmF5KGtleSwgdGhhdC5oZWFkZXIuZmllbGRzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uICYmIGNvbHVtbi5zZWFyY2hGb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJC5mbi5ib290c3RyYXBUYWJsZS51dGlscy5jYWxjdWxhdGVPYmplY3RWYWx1ZShjb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5oZWFkZXIuZm9ybWF0dGVyc1tqXSwgW3ZhbHVlLCBpdGVtLCBpXSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJC5pbkFycmF5KGtleSwgdGhhdC5oZWFkZXIuZmllbGRzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSAmJiB0aGF0LmhlYWRlci5zZWFyY2hhYmxlc1tpbmRleF0gJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMuc2VhcmNoQWNjZW50TmV1dHJhbGlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVtb3ZlRGlhY3JpdGljcyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHJlbW92ZURpYWNyaXRpY3Mocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLnN0cmljdFNlYXJjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodmFsdWUgKyAnJykudG9Mb3dlckNhc2UoKSA9PT0gcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodmFsdWUgKyAnJykudG9Mb3dlckNhc2UoKS5pbmRleE9mKHMpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSkgOiB0aGlzLmRhdGE7XG4gICAgICAgIH1cbiAgICB9O1xuXG59KGpRdWVyeSk7XG5cbi8qKlxuICogQGF1dGhvcjogRGVubmlzIEhlcm7DoW5kZXpcbiAqIEB3ZWJTaXRlOiBodHRwOi8vZGpodnNjZi5naXRodWIuaW8vQmxvZ1xuICogQHZlcnNpb246IHYxLjIuMlxuICpcbiAqIEB1cGRhdGUgemhpeGluIHdlbiA8d2VuemhpeGluMjAxMEBnbWFpbC5jb20+XG4gKi9cblxuKGZ1bmN0aW9uICgkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGNvb2tpZUlkcyA9IHtcbiAgICAgICAgc29ydE9yZGVyOiAnYnMudGFibGUuc29ydE9yZGVyJyxcbiAgICAgICAgc29ydE5hbWU6ICdicy50YWJsZS5zb3J0TmFtZScsXG4gICAgICAgIHBhZ2VOdW1iZXI6ICdicy50YWJsZS5wYWdlTnVtYmVyJyxcbiAgICAgICAgcGFnZUxpc3Q6ICdicy50YWJsZS5wYWdlTGlzdCcsXG4gICAgICAgIGNvbHVtbnM6ICdicy50YWJsZS5jb2x1bW5zJyxcbiAgICAgICAgc2VhcmNoVGV4dDogJ2JzLnRhYmxlLnNlYXJjaFRleHQnLFxuICAgICAgICBmaWx0ZXJDb250cm9sOiAnYnMudGFibGUuZmlsdGVyQ29udHJvbCdcbiAgICB9O1xuXG4gICAgdmFyIGdldEN1cnJlbnRIZWFkZXIgPSBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgICB2YXIgaGVhZGVyID0gdGhhdC4kaGVhZGVyO1xuICAgICAgICBpZiAodGhhdC5vcHRpb25zLmhlaWdodCkge1xuICAgICAgICAgICAgaGVhZGVyID0gdGhhdC4kdGFibGVIZWFkZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGVhZGVyO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0Q3VycmVudFNlYXJjaENvbnRyb2xzID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgICAgICAgdmFyIHNlYXJjaENvbnRyb2xzID0gJ3NlbGVjdCwgaW5wdXQnO1xuICAgICAgICBpZiAodGhhdC5vcHRpb25zLmhlaWdodCkge1xuICAgICAgICAgICAgc2VhcmNoQ29udHJvbHMgPSAndGFibGUgc2VsZWN0LCB0YWJsZSBpbnB1dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VhcmNoQ29udHJvbHM7XG4gICAgfTtcblxuICAgIHZhciBjb29raWVFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gISEobmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQpO1xuICAgIH07XG5cbiAgICB2YXIgaW5BcnJheUNvb2tpZXNFbmFibGVkID0gZnVuY3Rpb24gKGNvb2tpZU5hbWUsIGNvb2tpZXNFbmFibGVkKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29va2llc0VuYWJsZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjb29raWVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IGNvb2tpZXNFbmFibGVkW2ldLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIHZhciBzZXRDb29raWUgPSBmdW5jdGlvbiAodGhhdCwgY29va2llTmFtZSwgY29va2llVmFsdWUpIHtcbiAgICAgICAgaWYgKCghdGhhdC5vcHRpb25zLmNvb2tpZSkgfHwgKCFjb29raWVFbmFibGVkKCkpIHx8ICh0aGF0Lm9wdGlvbnMuY29va2llSWRUYWJsZSA9PT0gJycpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5BcnJheUNvb2tpZXNFbmFibGVkKGNvb2tpZU5hbWUsIHRoYXQub3B0aW9ucy5jb29raWVzRW5hYmxlZCkgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb29raWVOYW1lID0gdGhhdC5vcHRpb25zLmNvb2tpZUlkVGFibGUgKyAnLicgKyBjb29raWVOYW1lO1xuXG4gICAgICAgIHN3aXRjaCh0aGF0Lm9wdGlvbnMuY29va2llU3RvcmFnZSkge1xuICAgICAgICAgICAgY2FzZSAnY29va2llU3RvcmFnZSc6XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgY29va2llTmFtZSwgJz0nLCBjb29raWVWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICc7IGV4cGlyZXM9JyArIHRoYXQub3B0aW9ucy5jb29raWVFeHBpcmUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuY29va2llUGF0aCA/ICc7IHBhdGg9JyArIHRoYXQub3B0aW9ucy5jb29raWVQYXRoIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuY29va2llRG9tYWluID8gJzsgZG9tYWluPScgKyB0aGF0Lm9wdGlvbnMuY29va2llRG9tYWluIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuY29va2llU2VjdXJlID8gJzsgc2VjdXJlJyA6ICcnXG4gICAgICAgICAgICAgICAgICAgIF0uam9pbignJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2xvY2FsU3RvcmFnZSc6XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oY29va2llTmFtZSwgY29va2llVmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZXNzaW9uU3RvcmFnZSc6XG4gICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShjb29raWVOYW1lLCBjb29raWVWYWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHZhciBnZXRDb29raWUgPSBmdW5jdGlvbiAodGhhdCwgdGFibGVOYW1lLCBjb29raWVOYW1lKSB7XG4gICAgICAgIGlmICghY29va2llTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5BcnJheUNvb2tpZXNFbmFibGVkKGNvb2tpZU5hbWUsIHRoYXQub3B0aW9ucy5jb29raWVzRW5hYmxlZCkgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvb2tpZU5hbWUgPSB0YWJsZU5hbWUgKyAnLicgKyBjb29raWVOYW1lO1xuXG4gICAgICAgIHN3aXRjaCh0aGF0Lm9wdGlvbnMuY29va2llU3RvcmFnZSkge1xuICAgICAgICAgICAgY2FzZSAnY29va2llU3RvcmFnZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5jb29raWUucmVwbGFjZShuZXcgUmVnRXhwKCcoPzooPzpefC4qOylcXFxccyonICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvb2tpZU5hbWUpLnJlcGxhY2UoL1tcXC1cXC5cXCtcXCpdL2csICdcXFxcJCYnKSArICdcXFxccypcXFxcPVxcXFxzKihbXjtdKikuKiQpfF4uKiQnKSwgJyQxJykpIHx8IG51bGw7XG4gICAgICAgICAgICBjYXNlICdsb2NhbFN0b3JhZ2UnOlxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShjb29raWVOYW1lKTtcbiAgICAgICAgICAgIGNhc2UgJ3Nlc3Npb25TdG9yYWdlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShjb29raWVOYW1lKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGRlbGV0ZUNvb2tpZSA9IGZ1bmN0aW9uICh0aGF0LCB0YWJsZU5hbWUsIGNvb2tpZU5hbWUpIHtcbiAgICAgICAgY29va2llTmFtZSA9IHRhYmxlTmFtZSArICcuJyArIGNvb2tpZU5hbWU7XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2godGhhdC5vcHRpb25zLmNvb2tpZVN0b3JhZ2UpIHtcbiAgICAgICAgICAgIGNhc2UgJ2Nvb2tpZVN0b3JhZ2UnOlxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChjb29raWVOYW1lKSwgJz0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzsgZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuY29va2llUGF0aCA/ICc7IHBhdGg9JyArIHRoYXQub3B0aW9ucy5jb29raWVQYXRoIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuY29va2llRG9tYWluID8gJzsgZG9tYWluPScgKyB0aGF0Lm9wdGlvbnMuY29va2llRG9tYWluIDogJycsXG4gICAgICAgICAgICAgICAgICAgIF0uam9pbignJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsb2NhbFN0b3JhZ2UnOlxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGNvb2tpZU5hbWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZXNzaW9uU3RvcmFnZSc6XG4gICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShjb29raWVOYW1lKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHZhciBjYWxjdWxhdGVFeHBpcmF0aW9uID0gZnVuY3Rpb24oY29va2llRXhwaXJlKSB7XG4gICAgICAgIHZhciB0aW1lID0gY29va2llRXhwaXJlLnJlcGxhY2UoL1swLTldKi8sICcnKTsgLy9zLG1pLGgsZCxtLHlcbiAgICAgICAgY29va2llRXhwaXJlID0gY29va2llRXhwaXJlLnJlcGxhY2UoL1tBLVphLXpdezEsMn19LywgJycpOyAvL251bWJlclxuXG4gICAgICAgIHN3aXRjaCAodGltZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICBjb29raWVFeHBpcmUgPSArY29va2llRXhwaXJlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWknOlxuICAgICAgICAgICAgICAgIGNvb2tpZUV4cGlyZSA9IGNvb2tpZUV4cGlyZSAqIDYwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgY29va2llRXhwaXJlID0gY29va2llRXhwaXJlICogNjAgKiA2MDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNvb2tpZUV4cGlyZSA9IGNvb2tpZUV4cGlyZSAqIDI0ICogNjAgKiA2MDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIGNvb2tpZUV4cGlyZSA9IGNvb2tpZUV4cGlyZSAqIDMwICogMjQgKiA2MCAqIDYwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgY29va2llRXhwaXJlID0gY29va2llRXhwaXJlICogMzY1ICogMjQgKiA2MCAqIDYwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb29raWVFeHBpcmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29va2llRXhwaXJlID09PSB1bmRlZmluZWQgPyAnJyA6ICc7IG1heC1hZ2U9JyArIGNvb2tpZUV4cGlyZTtcbiAgICB9O1xuXG4gICAgdmFyIGluaXRDb29raWVGaWx0ZXJzID0gZnVuY3Rpb24gKGJvb3RzdHJhcFRhYmxlKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHBhcnNlZENvb2tpZUZpbHRlcnMgPSBKU09OLnBhcnNlKGdldENvb2tpZShib290c3RyYXBUYWJsZSwgYm9vdHN0cmFwVGFibGUub3B0aW9ucy5jb29raWVJZFRhYmxlLCBjb29raWVJZHMuZmlsdGVyQ29udHJvbCkpO1xuXG4gICAgICAgICAgICBpZiAoIWJvb3RzdHJhcFRhYmxlLm9wdGlvbnMuZmlsdGVyQ29udHJvbFZhbHVlc0xvYWRlZCAmJiBwYXJzZWRDb29raWVGaWx0ZXJzKSB7XG4gICAgICAgICAgICAgICAgYm9vdHN0cmFwVGFibGUub3B0aW9ucy5maWx0ZXJDb250cm9sVmFsdWVzTG9hZGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHZhciBjYWNoZWRGaWx0ZXJzID0ge30sXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlciA9IGdldEN1cnJlbnRIZWFkZXIoYm9vdHN0cmFwVGFibGUpLFxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hDb250cm9scyA9IGdldEN1cnJlbnRTZWFyY2hDb250cm9scyhib290c3RyYXBUYWJsZSksXG5cbiAgICAgICAgICAgICAgICAgICAgYXBwbHlDb29raWVGaWx0ZXJzID0gZnVuY3Rpb24gKGVsZW1lbnQsIGZpbHRlcmVkQ29va2llcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChmaWx0ZXJlZENvb2tpZXMpLmVhY2goZnVuY3Rpb24gKGksIGNvb2tpZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkudmFsKGNvb2tpZS50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZWRGaWx0ZXJzW2Nvb2tpZS5maWVsZF0gPSBjb29raWUudGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaGVhZGVyLmZpbmQoc2VhcmNoQ29udHJvbHMpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSAkKHRoaXMpLmNsb3Nlc3QoJ1tkYXRhLWZpZWxkXScpLmRhdGEoJ2ZpZWxkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZENvb2tpZXMgPSAkLmdyZXAocGFyc2VkQ29va2llRmlsdGVycywgZnVuY3Rpb24gKGNvb2tpZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb29raWUuZmllbGQgPT09IGZpZWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYXBwbHlDb29raWVGaWx0ZXJzKHRoaXMsIGZpbHRlcmVkQ29va2llcyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBib290c3RyYXBUYWJsZS5pbml0Q29sdW1uU2VhcmNoKGNhY2hlZEZpbHRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAyNTApO1xuICAgIH07XG5cbiAgICAkLmV4dGVuZCgkLmZuLmJvb3RzdHJhcFRhYmxlLmRlZmF1bHRzLCB7XG4gICAgICAgIGNvb2tpZTogZmFsc2UsXG4gICAgICAgIGNvb2tpZUV4cGlyZTogJzJoJyxcbiAgICAgICAgY29va2llUGF0aDogbnVsbCxcbiAgICAgICAgY29va2llRG9tYWluOiBudWxsLFxuICAgICAgICBjb29raWVTZWN1cmU6IG51bGwsXG4gICAgICAgIGNvb2tpZUlkVGFibGU6ICcnLFxuICAgICAgICBjb29raWVzRW5hYmxlZDogW1xuICAgICAgICAgICAgJ2JzLnRhYmxlLnNvcnRPcmRlcicsICdicy50YWJsZS5zb3J0TmFtZScsXG4gICAgICAgICAgICAnYnMudGFibGUucGFnZU51bWJlcicsICdicy50YWJsZS5wYWdlTGlzdCcsXG4gICAgICAgICAgICAnYnMudGFibGUuY29sdW1ucycsICdicy50YWJsZS5zZWFyY2hUZXh0JyxcbiAgICAgICAgICAgICdicy50YWJsZS5maWx0ZXJDb250cm9sJ1xuICAgICAgICBdLFxuICAgICAgICBjb29raWVTdG9yYWdlOiAnY29va2llU3RvcmFnZScsIC8vbG9jYWxTdG9yYWdlLCBzZXNzaW9uU3RvcmFnZVxuICAgICAgICAvL2ludGVybmFsIHZhcmlhYmxlXG4gICAgICAgIGZpbHRlckNvbnRyb2xzOiBbXSxcbiAgICAgICAgZmlsdGVyQ29udHJvbFZhbHVlc0xvYWRlZDogZmFsc2VcbiAgICB9KTtcblxuICAgICQuZm4uYm9vdHN0cmFwVGFibGUubWV0aG9kcy5wdXNoKCdnZXRDb29raWVzJyk7XG4gICAgJC5mbi5ib290c3RyYXBUYWJsZS5tZXRob2RzLnB1c2goJ2RlbGV0ZUNvb2tpZScpO1xuXG4gICAgJC5leHRlbmQoJC5mbi5ib290c3RyYXBUYWJsZS51dGlscywge1xuICAgICAgICBzZXRDb29raWU6IHNldENvb2tpZSxcbiAgICAgICAgZ2V0Q29va2llOiBnZXRDb29raWVcbiAgICB9KTtcblxuICAgIHZhciBCb290c3RyYXBUYWJsZSA9ICQuZm4uYm9vdHN0cmFwVGFibGUuQ29uc3RydWN0b3IsXG4gICAgICAgIF9pbml0ID0gQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXQsXG4gICAgICAgIF9pbml0VGFibGUgPSBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdFRhYmxlLFxuICAgICAgICBfaW5pdFNlcnZlciA9IEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0U2VydmVyLFxuICAgICAgICBfb25Tb3J0ID0gQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLm9uU29ydCxcbiAgICAgICAgX29uUGFnZU51bWJlciA9IEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5vblBhZ2VOdW1iZXIsXG4gICAgICAgIF9vblBhZ2VMaXN0Q2hhbmdlID0gQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLm9uUGFnZUxpc3RDaGFuZ2UsXG4gICAgICAgIF9vblBhZ2VGaXJzdCA9IEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5vblBhZ2VGaXJzdCxcbiAgICAgICAgX29uUGFnZVByZSA9IEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5vblBhZ2VQcmUsXG4gICAgICAgIF9vblBhZ2VOZXh0ID0gQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLm9uUGFnZU5leHQsXG4gICAgICAgIF9vblBhZ2VMYXN0ID0gQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLm9uUGFnZUxhc3QsXG4gICAgICAgIF90b2dnbGVDb2x1bW4gPSBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUudG9nZ2xlQ29sdW1uLFxuICAgICAgICBfc2VsZWN0UGFnZSA9IEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5zZWxlY3RQYWdlLFxuICAgICAgICBfb25TZWFyY2ggPSBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUub25TZWFyY2g7XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRpbWVvdXRJZCA9IDA7XG4gICAgICAgIHRoaXMub3B0aW9ucy5maWx0ZXJDb250cm9scyA9IFtdO1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsdGVyQ29udHJvbFZhbHVlc0xvYWRlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5jb29raWVzRW5hYmxlZCA9IHR5cGVvZiB0aGlzLm9wdGlvbnMuY29va2llc0VuYWJsZWQgPT09ICdzdHJpbmcnID9cbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jb29raWVzRW5hYmxlZC5yZXBsYWNlKCdbJywgJycpLnJlcGxhY2UoJ10nLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvIC9nLCAnJykudG9Mb3dlckNhc2UoKS5zcGxpdCgnLCcpIDpcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuY29va2llc0VuYWJsZWQ7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maWx0ZXJDb250cm9sKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLiRlbC5vbignY29sdW1uLXNlYXJjaC5icy50YWJsZScsIGZ1bmN0aW9uIChlLCBmaWVsZCwgdGV4dCkge1xuICAgICAgICAgICAgICAgIHZhciBpc05ld0ZpZWxkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhhdC5vcHRpb25zLmZpbHRlckNvbnRyb2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMuZmlsdGVyQ29udHJvbHNbaV0uZmllbGQgPT09IGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuZmlsdGVyQ29udHJvbHNbaV0udGV4dCA9IHRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc05ld0ZpZWxkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNOZXdGaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuZmlsdGVyQ29udHJvbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNldENvb2tpZSh0aGF0LCBjb29raWVJZHMuZmlsdGVyQ29udHJvbCwgSlNPTi5zdHJpbmdpZnkodGhhdC5vcHRpb25zLmZpbHRlckNvbnRyb2xzKSk7XG4gICAgICAgICAgICB9KS5vbigncG9zdC1ib2R5LmJzLnRhYmxlJywgaW5pdENvb2tpZUZpbHRlcnModGhhdCkpO1xuICAgICAgICB9XG4gICAgICAgIF9pbml0LmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRTZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBib290c3RyYXBUYWJsZSA9IHRoaXMsXG4gICAgICAgICAgICBzZWxlY3RzV2l0aG91dERlZmF1bHRzID0gW10sXG5cbiAgICAgICAgICAgIGNvbHVtbkhhc1NlbGVjdENvbnRyb2wgPSBmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbi5maWx0ZXJDb250cm9sICYmIGNvbHVtbi5maWx0ZXJDb250cm9sID09PSAnc2VsZWN0JztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNvbHVtbkhhc0RlZmF1bHRTZWxlY3RWYWx1ZXMgPSBmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbi5maWx0ZXJEYXRhICYmIGNvbHVtbi5maWx0ZXJEYXRhICE9PSAnY29sdW1uJztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNvb2tpZXNQcmVzZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvb2tpZSA9IEpTT04ucGFyc2UoZ2V0Q29va2llKGJvb3RzdHJhcFRhYmxlLCBib290c3RyYXBUYWJsZS5vcHRpb25zLmNvb2tpZUlkVGFibGUsIGNvb2tpZUlkcy5maWx0ZXJDb250cm9sKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvb3RzdHJhcFRhYmxlLm9wdGlvbnMuY29va2llICYmIGNvb2tpZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgc2VsZWN0c1dpdGhvdXREZWZhdWx0cyA9ICQuZ3JlcChib290c3RyYXBUYWJsZS5jb2x1bW5zLCBmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5IYXNTZWxlY3RDb250cm9sKGNvbHVtbikgJiYgIWNvbHVtbkhhc0RlZmF1bHRTZWxlY3RWYWx1ZXMoY29sdW1uKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVzZXQgdmFyaWFibGUgdG8gb3JpZ2luYWwgaW5pdFNlcnZlciBmdW5jdGlvbiwgc28gdGhhdCBmdXR1cmUgY2FsbHMgdG8gaW5pdFNlcnZlclxuICAgICAgICAvLyB1c2UgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGZyb20gdGhpcyBwb2ludCBvbi5cbiAgICAgICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRTZXJ2ZXIgPSBfaW5pdFNlcnZlcjtcblxuICAgICAgICAvLyBlYXJseSByZXR1cm4gaWYgd2UgZG9uJ3QgbmVlZCB0byBwb3B1bGF0ZSBhbnkgc2VsZWN0IHZhbHVlcyB3aXRoIGNvb2tpZSB2YWx1ZXNcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maWx0ZXJDb250cm9sICYmIGNvb2tpZXNQcmVzZW50KCkgJiYgc2VsZWN0c1dpdGhvdXREZWZhdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbGwgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRTZXJ2ZXJcbiAgICAgICAgX2luaXRTZXJ2ZXIuYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykpO1xuICAgIH07XG5cblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0VGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9pbml0VGFibGUuYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykpO1xuICAgICAgICB0aGlzLmluaXRDb29raWUoKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRDb29raWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmNvb2tpZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCh0aGlzLm9wdGlvbnMuY29va2llSWRUYWJsZSA9PT0gJycpIHx8ICh0aGlzLm9wdGlvbnMuY29va2llRXhwaXJlID09PSAnJykgfHwgKCFjb29raWVFbmFibGVkKCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb25maWd1cmF0aW9uIGVycm9yLiBQbGVhc2UgcmV2aWV3IHRoZSBjb29raWVJZFRhYmxlLCBjb29raWVFeHBpcmUgcHJvcGVydGllcywgaWYgdGhvc2UgcHJvcGVydGllcyBhcmUgb2ssIHRoZW4gdGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIGNvb2tpZXNcIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc29ydE9yZGVyQ29va2llID0gZ2V0Q29va2llKHRoaXMsIHRoaXMub3B0aW9ucy5jb29raWVJZFRhYmxlLCBjb29raWVJZHMuc29ydE9yZGVyKSxcbiAgICAgICAgICAgIHNvcnRPcmRlck5hbWVDb29raWUgPSBnZXRDb29raWUodGhpcywgdGhpcy5vcHRpb25zLmNvb2tpZUlkVGFibGUsIGNvb2tpZUlkcy5zb3J0TmFtZSksXG4gICAgICAgICAgICBwYWdlTnVtYmVyQ29va2llID0gZ2V0Q29va2llKHRoaXMsIHRoaXMub3B0aW9ucy5jb29raWVJZFRhYmxlLCBjb29raWVJZHMucGFnZU51bWJlciksXG4gICAgICAgICAgICBwYWdlTGlzdENvb2tpZSA9IGdldENvb2tpZSh0aGlzLCB0aGlzLm9wdGlvbnMuY29va2llSWRUYWJsZSwgY29va2llSWRzLnBhZ2VMaXN0KSxcbiAgICAgICAgICAgIGNvbHVtbnNDb29raWUgPSBKU09OLnBhcnNlKGdldENvb2tpZSh0aGlzLCB0aGlzLm9wdGlvbnMuY29va2llSWRUYWJsZSwgY29va2llSWRzLmNvbHVtbnMpKSxcbiAgICAgICAgICAgIHNlYXJjaFRleHRDb29raWUgPSBnZXRDb29raWUodGhpcywgdGhpcy5vcHRpb25zLmNvb2tpZUlkVGFibGUsIGNvb2tpZUlkcy5zZWFyY2hUZXh0KTtcblxuICAgICAgICAvL3NvcnRPcmRlclxuICAgICAgICB0aGlzLm9wdGlvbnMuc29ydE9yZGVyID0gc29ydE9yZGVyQ29va2llID8gc29ydE9yZGVyQ29va2llIDogdGhpcy5vcHRpb25zLnNvcnRPcmRlcjtcbiAgICAgICAgLy9zb3J0TmFtZVxuICAgICAgICB0aGlzLm9wdGlvbnMuc29ydE5hbWUgPSBzb3J0T3JkZXJOYW1lQ29va2llID8gc29ydE9yZGVyTmFtZUNvb2tpZSA6IHRoaXMub3B0aW9ucy5zb3J0TmFtZTtcbiAgICAgICAgLy9wYWdlTnVtYmVyXG4gICAgICAgIHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyID0gcGFnZU51bWJlckNvb2tpZSA/ICtwYWdlTnVtYmVyQ29va2llIDogdGhpcy5vcHRpb25zLnBhZ2VOdW1iZXI7XG4gICAgICAgIC8vcGFnZVNpemVcbiAgICAgICAgdGhpcy5vcHRpb25zLnBhZ2VTaXplID0gcGFnZUxpc3RDb29raWUgPyBwYWdlTGlzdENvb2tpZSA9PT0gdGhpcy5vcHRpb25zLmZvcm1hdEFsbFJvd3MoKSA/IHBhZ2VMaXN0Q29va2llIDogK3BhZ2VMaXN0Q29va2llIDogdGhpcy5vcHRpb25zLnBhZ2VTaXplO1xuICAgICAgICAvL3NlYXJjaFRleHRcbiAgICAgICAgdGhpcy5vcHRpb25zLnNlYXJjaFRleHQgPSBzZWFyY2hUZXh0Q29va2llID8gc2VhcmNoVGV4dENvb2tpZSA6ICcnO1xuXG4gICAgICAgIGlmIChjb2x1bW5zQ29va2llKSB7XG4gICAgICAgICAgICAkLmVhY2godGhpcy5jb2x1bW5zLCBmdW5jdGlvbiAoaSwgY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uLnZpc2libGUgPSAkLmluQXJyYXkoY29sdW1uLmZpZWxkLCBjb2x1bW5zQ29va2llKSAhPT0gLTE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUub25Tb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfb25Tb3J0LmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcbiAgICAgICAgc2V0Q29va2llKHRoaXMsIGNvb2tpZUlkcy5zb3J0T3JkZXIsIHRoaXMub3B0aW9ucy5zb3J0T3JkZXIpO1xuICAgICAgICBzZXRDb29raWUodGhpcywgY29va2llSWRzLnNvcnROYW1lLCB0aGlzLm9wdGlvbnMuc29ydE5hbWUpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUub25QYWdlTnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfb25QYWdlTnVtYmVyLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcbiAgICAgICAgc2V0Q29va2llKHRoaXMsIGNvb2tpZUlkcy5wYWdlTnVtYmVyLCB0aGlzLm9wdGlvbnMucGFnZU51bWJlcik7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5vblBhZ2VMaXN0Q2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfb25QYWdlTGlzdENoYW5nZS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKSk7XG4gICAgICAgIHNldENvb2tpZSh0aGlzLCBjb29raWVJZHMucGFnZUxpc3QsIHRoaXMub3B0aW9ucy5wYWdlU2l6ZSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5vblBhZ2VGaXJzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX29uUGFnZUZpcnN0LmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcbiAgICAgICAgc2V0Q29va2llKHRoaXMsIGNvb2tpZUlkcy5wYWdlTnVtYmVyLCB0aGlzLm9wdGlvbnMucGFnZU51bWJlcik7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5vblBhZ2VQcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9vblBhZ2VQcmUuYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykpO1xuICAgICAgICBzZXRDb29raWUodGhpcywgY29va2llSWRzLnBhZ2VOdW1iZXIsIHRoaXMub3B0aW9ucy5wYWdlTnVtYmVyKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLm9uUGFnZU5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9vblBhZ2VOZXh0LmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcbiAgICAgICAgc2V0Q29va2llKHRoaXMsIGNvb2tpZUlkcy5wYWdlTnVtYmVyLCB0aGlzLm9wdGlvbnMucGFnZU51bWJlcik7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5vblBhZ2VMYXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfb25QYWdlTGFzdC5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKSk7XG4gICAgICAgIHNldENvb2tpZSh0aGlzLCBjb29raWVJZHMucGFnZU51bWJlciwgdGhpcy5vcHRpb25zLnBhZ2VOdW1iZXIpO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUudG9nZ2xlQ29sdW1uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdG9nZ2xlQ29sdW1uLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcblxuICAgICAgICB2YXIgdmlzaWJsZUNvbHVtbnMgPSBbXTtcblxuICAgICAgICAkLmVhY2godGhpcy5jb2x1bW5zLCBmdW5jdGlvbiAoaSwgY29sdW1uKSB7XG4gICAgICAgICAgICBpZiAoY29sdW1uLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICB2aXNpYmxlQ29sdW1ucy5wdXNoKGNvbHVtbi5maWVsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNldENvb2tpZSh0aGlzLCBjb29raWVJZHMuY29sdW1ucywgSlNPTi5zdHJpbmdpZnkodmlzaWJsZUNvbHVtbnMpKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnNlbGVjdFBhZ2UgPSBmdW5jdGlvbiAocGFnZSkge1xuICAgICAgICBfc2VsZWN0UGFnZS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKSk7XG4gICAgICAgIHNldENvb2tpZSh0aGlzLCBjb29raWVJZHMucGFnZU51bWJlciwgcGFnZSk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5vblNlYXJjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpO1xuICAgICAgICBfb25TZWFyY2guYXBwbHkodGhpcywgdGFyZ2V0KTtcblxuICAgICAgICBpZiAoJCh0YXJnZXRbMF0uY3VycmVudFRhcmdldCkucGFyZW50KCkuaGFzQ2xhc3MoJ3NlYXJjaCcpKSB7XG4gICAgICAgICAgc2V0Q29va2llKHRoaXMsIGNvb2tpZUlkcy5zZWFyY2hUZXh0LCB0aGlzLnNlYXJjaFRleHQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5nZXRDb29raWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYm9vdHN0cmFwVGFibGUgPSB0aGlzO1xuICAgICAgICB2YXIgY29va2llcyA9IHt9O1xuICAgICAgICAkLmVhY2goY29va2llSWRzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBjb29raWVzW2tleV0gPSBnZXRDb29raWUoYm9vdHN0cmFwVGFibGUsIGJvb3RzdHJhcFRhYmxlLm9wdGlvbnMuY29va2llSWRUYWJsZSwgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2NvbHVtbnMnKSB7XG4gICAgICAgICAgICAgICAgY29va2llc1trZXldID0gSlNPTi5wYXJzZShjb29raWVzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvb2tpZXM7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5kZWxldGVDb29raWUgPSBmdW5jdGlvbiAoY29va2llTmFtZSkge1xuICAgICAgICBpZiAoKGNvb2tpZU5hbWUgPT09ICcnKSB8fCAoIWNvb2tpZUVuYWJsZWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZUNvb2tpZSh0aGlzLCB0aGlzLm9wdGlvbnMuY29va2llSWRUYWJsZSwgY29va2llSWRzW2Nvb2tpZU5hbWVdKTtcbiAgICB9O1xufSkoalF1ZXJ5KTtcblxuLyoqXG4gKiBAYXV0aG9yIEhvbWVyIEdsYXNjb2NrIDxIb3BHbGFzY29ja0BnbWFpbC5jb20+XG4gKiBAdmVyc2lvbjogdjEuMC4wXG4gKi9cblxuICFmdW5jdGlvbiAoJCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIGNhbGN1bGF0ZU9iamVjdFZhbHVlID0gJC5mbi5ib290c3RyYXBUYWJsZS51dGlscy5jYWxjdWxhdGVPYmplY3RWYWx1ZSxcbiAgICAgICAgc3ByaW50ZiA9ICQuZm4uYm9vdHN0cmFwVGFibGUudXRpbHMuc3ByaW50ZjtcblxuICAgIHZhciBjb3B5dGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIHZhciB0ZXh0RmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgICAgICAkKHRleHRGaWVsZCkuaHRtbCh0ZXh0KTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZXh0RmllbGQpO1xuICAgICAgICB0ZXh0RmllbGQuc2VsZWN0KCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiT29wcywgdW5hYmxlIHRvIGNvcHlcIik7XG4gICAgICAgIH1cbiAgICAgICAgJCh0ZXh0RmllbGQpLnJlbW92ZSgpO1xuICAgIH07XG5cbiAgICAkLmV4dGVuZCgkLmZuLmJvb3RzdHJhcFRhYmxlLmRlZmF1bHRzLCB7XG4gICAgICAgIGNvcHlCdG46IGZhbHNlLFxuICAgICAgICBjb3B5V0hpZGRlbkJ0bjogZmFsc2UsXG4gICAgICAgIGNvcHlEZWxlbWV0ZXI6IFwiLCBcIlxuICAgIH0pO1xuXG4gICAgJC5mbi5ib290c3RyYXBUYWJsZS5tZXRob2RzLnB1c2goJ2NvcHlDb2x1bW5zVG9DbGlwYm9hcmQnLCAnY29weUNvbHVtbnNUb0NsaXBib2FyZFdpdGhIaWRkZW4nKTtcblxuICAgIHZhciBCb290c3RyYXBUYWJsZSA9ICQuZm4uYm9vdHN0cmFwVGFibGUuQ29uc3RydWN0b3IsXG4gICAgICAgIF9pbml0VG9vbGJhciA9IEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0VG9vbGJhcjtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0VG9vbGJhciA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBfaW5pdFRvb2xiYXIuYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykpO1xuXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICRidG5Hcm91cCA9IHRoaXMuJHRvb2xiYXIuZmluZCgnPi5idG4tZ3JvdXAnKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrVG9TZWxlY3QgfHwgdGhpcy5vcHRpb25zLnNpbmdsZVNlbGVjdCkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvcHlCdG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgY29weWJ0biA9IFwiPGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi1kZWZhdWx0JyBpZD0nY29weUJ0bic+PHNwYW4gY2xhc3M9J2dseXBoaWNvbiBnbHlwaGljb24tY29weSBpY29uLXBlbmNpbCc+PC9zcGFuPjwvYnV0dG9uPlwiO1xuICAgICAgICAgICAgICAgICRidG5Hcm91cC5hcHBlbmQoY29weWJ0bik7XG4gICAgICAgICAgICAgICAgJGJ0bkdyb3VwLmZpbmQoJyNjb3B5QnRuJykuY2xpY2soZnVuY3Rpb24gKCkgeyB0aGF0LmNvcHlDb2x1bW5zVG9DbGlwYm9hcmQoKTsgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29weVdIaWRkZW5CdG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgY29weWhpZGRlbmJ0biA9IFwiPGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi1kZWZhdWx0JyBpZD0nY29weVdIaWRkZW5CdG4nPjxzcGFuIGNsYXNzPSdiYWRnZSc+PHNwYW4gY2xhc3M9J2dseXBoaWNvbiBnbHlwaGljb24tY29weSBpY29uLXBlbmNpbCc+PC9zcGFuPjwvc3Bhbj48L2J1dHRvbj5cIjtcbiAgICAgICAgICAgICAgICAkYnRuR3JvdXAuYXBwZW5kKGNvcHloaWRkZW5idG4pO1xuICAgICAgICAgICAgICAgICRidG5Hcm91cC5maW5kKCcjY29weVdIaWRkZW5CdG4nKS5jbGljayhmdW5jdGlvbiAoKSB7IHRoYXQuY29weUNvbHVtbnNUb0NsaXBib2FyZFdpdGhIaWRkZW4oKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmNvcHlDb2x1bW5zVG9DbGlwYm9hcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgIHJldCA9IFwiXCIsXG4gICAgICAgICAgICBkZWxpbWV0ID0gdGhpcy5vcHRpb25zLmNvcHlEZWxlbWV0ZXI7XG5cbiAgICAgICAgJC5lYWNoKHRoYXQuZ2V0U2VsZWN0aW9ucygpLCBmdW5jdGlvbiAoaW5kZXgsIHJvdykge1xuICAgICAgICAgICAgJC5lYWNoKHRoYXQub3B0aW9ucy5jb2x1bW5zWzBdLCBmdW5jdGlvbiAoaW5keSwgY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5maWVsZCAhPT0gXCJzdGF0ZVwiICYmIGNvbHVtbi5maWVsZCAhPT0gXCJSb3dOdW1iZXJcIiAmJiBjb2x1bW4udmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93W2NvbHVtbi5maWVsZF0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldCArPSBjYWxjdWxhdGVPYmplY3RWYWx1ZShjb2x1bW4sIHRoYXQuaGVhZGVyLmZvcm1hdHRlcnNbaW5keV0sIFtyb3dbY29sdW1uLmZpZWxkXSwgcm93LCBpbmRleF0sIHJvd1tjb2x1bW4uZmllbGRdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXQgKz0gZGVsaW1ldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0ICs9IFwiXFxyXFxuXCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvcHl0ZXh0KHJldCk7XG4gICAgfTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5jb3B5Q29sdW1uc1RvQ2xpcGJvYXJkV2l0aEhpZGRlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgcmV0ID0gXCJcIixcbiAgICAgICAgICAgIGRlbGltZXQgPSB0aGlzLm9wdGlvbnMuY29weURlbGVtZXRlcjtcblxuICAgICAgICAkLmVhY2godGhhdC5nZXRTZWxlY3Rpb25zKCksIGZ1bmN0aW9uIChpbmRleCwgcm93KSB7XG4gICAgICAgICAgICAkLmVhY2godGhhdC5vcHRpb25zLmNvbHVtbnNbMF0sIGZ1bmN0aW9uIChpbmR5LCBjb2x1bW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmZpZWxkICE9IFwic3RhdGVcIiAmJiBjb2x1bW4uZmllbGQgIT09IFwiUm93TnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvd1tjb2x1bW4uZmllbGRdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXQgKz0gY2FsY3VsYXRlT2JqZWN0VmFsdWUoY29sdW1uLCB0aGF0LmhlYWRlci5mb3JtYXR0ZXJzW2luZHldLCBbcm93W2NvbHVtbi5maWVsZF0sIHJvdywgaW5kZXhdLCByb3dbY29sdW1uLmZpZWxkXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0ICs9IGRlbGltZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldCArPSBcIlxcclxcblwiO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb3B5dGV4dChyZXQpO1xuICAgIH07XG59KGpRdWVyeSk7XG4vKipcbiAqIEBhdXRob3IgemhpeGluIHdlbiA8d2VuemhpeGluMjAxMEBnbWFpbC5jb20+XG4gKiBleHRlbnNpb25zOiBodHRwczovL2dpdGh1Yi5jb20vdml0YWxldHMveC1lZGl0YWJsZVxuICovXG5cbihmdW5jdGlvbigkKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAkLmV4dGVuZCgkLmZuLmJvb3RzdHJhcFRhYmxlLmRlZmF1bHRzLCB7XG4gICAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgICBvbkVkaXRhYmxlSW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRWRpdGFibGVTYXZlOiBmdW5jdGlvbihmaWVsZCwgcm93LCBvbGRWYWx1ZSwgJGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRWRpdGFibGVTaG93bjogZnVuY3Rpb24oZmllbGQsIHJvdywgJGVsLCBlZGl0YWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBvbkVkaXRhYmxlSGlkZGVuOiBmdW5jdGlvbihmaWVsZCwgcm93LCAkZWwsIHJlYXNvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkLmV4dGVuZCgkLmZuLmJvb3RzdHJhcFRhYmxlLkNvbnN0cnVjdG9yLkVWRU5UUywge1xuICAgICAgICAnZWRpdGFibGUtaW5pdC5icy50YWJsZSc6ICdvbkVkaXRhYmxlSW5pdCcsXG4gICAgICAgICdlZGl0YWJsZS1zYXZlLmJzLnRhYmxlJzogJ29uRWRpdGFibGVTYXZlJyxcbiAgICAgICAgJ2VkaXRhYmxlLXNob3duLmJzLnRhYmxlJzogJ29uRWRpdGFibGVTaG93bicsXG4gICAgICAgICdlZGl0YWJsZS1oaWRkZW4uYnMudGFibGUnOiAnb25FZGl0YWJsZUhpZGRlbidcbiAgICB9KTtcblxuICAgIHZhciBCb290c3RyYXBUYWJsZSA9ICQuZm4uYm9vdHN0cmFwVGFibGUuQ29uc3RydWN0b3IsXG4gICAgICAgIF9pbml0VGFibGUgPSBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdFRhYmxlLFxuICAgICAgICBfaW5pdEJvZHkgPSBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdEJvZHk7XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdFRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgX2luaXRUYWJsZS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZWRpdGFibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICQuZWFjaCh0aGlzLmNvbHVtbnMsIGZ1bmN0aW9uKGksIGNvbHVtbikge1xuICAgICAgICAgICAgaWYgKCFjb2x1bW4uZWRpdGFibGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBlZGl0YWJsZU9wdGlvbnMgPSB7fSxcbiAgICAgICAgICAgICAgICBlZGl0YWJsZURhdGFNYXJrdXAgPSBbXSxcbiAgICAgICAgICAgICAgICBlZGl0YWJsZURhdGFQcmVmaXggPSAnZWRpdGFibGUtJztcblxuICAgICAgICAgICAgdmFyIHByb2Nlc3NEYXRhT3B0aW9ucyA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIGNhbWVsIGNhc2Ugd2l0aCBkYXNoZXMuXG4gICAgICAgICAgICAgICAgdmFyIGRhc2hLZXkgPSBrZXkucmVwbGFjZSgvKFtBLVpdKS9nLCBmdW5jdGlvbigkMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCIgKyAkMS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChkYXNoS2V5LnNsaWNlKDAsIGVkaXRhYmxlRGF0YVByZWZpeC5sZW5ndGgpID09IGVkaXRhYmxlRGF0YVByZWZpeCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YUtleSA9IGRhc2hLZXkucmVwbGFjZShlZGl0YWJsZURhdGFQcmVmaXgsICdkYXRhLScpO1xuICAgICAgICAgICAgICAgICAgICBlZGl0YWJsZU9wdGlvbnNbZGF0YUtleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkLmVhY2godGhhdC5vcHRpb25zLCBwcm9jZXNzRGF0YU9wdGlvbnMpO1xuXG4gICAgICAgICAgICBjb2x1bW4uZm9ybWF0dGVyID0gY29sdW1uLmZvcm1hdHRlciB8fCBmdW5jdGlvbih2YWx1ZSwgcm93LCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb2x1bW4uX2Zvcm1hdHRlciA9IGNvbHVtbi5fZm9ybWF0dGVyID8gY29sdW1uLl9mb3JtYXR0ZXIgOiBjb2x1bW4uZm9ybWF0dGVyO1xuICAgICAgICAgICAgY29sdW1uLmZvcm1hdHRlciA9IGZ1bmN0aW9uKHZhbHVlLCByb3csIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNvbHVtbi5fZm9ybWF0dGVyID8gY29sdW1uLl9mb3JtYXR0ZXIodmFsdWUsIHJvdywgaW5kZXgpIDogdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAkLmVhY2goY29sdW1uLCBwcm9jZXNzRGF0YU9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgJC5lYWNoKGVkaXRhYmxlT3B0aW9ucywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBlZGl0YWJsZURhdGFNYXJrdXAucHVzaCgnICcgKyBrZXkgKyAnPVwiJyArIHZhbHVlICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgX2RvbnRfZWRpdF9mb3JtYXR0ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmVkaXRhYmxlLmhhc093blByb3BlcnR5KCdub2VkaXRGb3JtYXR0ZXInKSkge1xuICAgICAgICAgICAgICAgICAgICBfZG9udF9lZGl0X2Zvcm1hdHRlciA9IGNvbHVtbi5lZGl0YWJsZS5ub2VkaXRGb3JtYXR0ZXIodmFsdWUsIHJvdywgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfZG9udF9lZGl0X2Zvcm1hdHRlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsnPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICcgZGF0YS1uYW1lPVwiJyArIGNvbHVtbi5maWVsZCArICdcIicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnIGRhdGEtcGs9XCInICsgcm93W3RoYXQub3B0aW9ucy5pZEZpZWxkXSArICdcIicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnIGRhdGEtdmFsdWU9XCInICsgcmVzdWx0ICsgJ1wiJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlRGF0YU1hcmt1cC5qb2luKCcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICc+JyArICc8L2E+J1xuICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZG9udF9lZGl0X2Zvcm1hdHRlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdEJvZHkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICBfaW5pdEJvZHkuYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykpO1xuXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmVkaXRhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkLmVhY2godGhpcy5jb2x1bW5zLCBmdW5jdGlvbihpLCBjb2x1bW4pIHtcbiAgICAgICAgICAgIGlmICghY29sdW1uLmVkaXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGF0LiRib2R5LmZpbmQoJ2FbZGF0YS1uYW1lPVwiJyArIGNvbHVtbi5maWVsZCArICdcIl0nKS5lZGl0YWJsZShjb2x1bW4uZWRpdGFibGUpXG4gICAgICAgICAgICAgICAgLm9mZignc2F2ZScpLm9uKCdzYXZlJywgZnVuY3Rpb24oZSwgcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gdGhhdC5nZXREYXRhKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9ICQodGhpcykucGFyZW50cygndHJbZGF0YS1pbmRleF0nKS5kYXRhKCdpbmRleCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gZGF0YVtpbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IHJvd1tjb2x1bW4uZmllbGRdO1xuXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuZGF0YSgndmFsdWUnLCBwYXJhbXMuc3VibWl0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByb3dbY29sdW1uLmZpZWxkXSA9IHBhcmFtcy5zdWJtaXRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC50cmlnZ2VyKCdlZGl0YWJsZS1zYXZlJywgY29sdW1uLmZpZWxkLCByb3csIG9sZFZhbHVlLCAkKHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5yZXNldEZvb3RlcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhhdC4kYm9keS5maW5kKCdhW2RhdGEtbmFtZT1cIicgKyBjb2x1bW4uZmllbGQgKyAnXCJdJykuZWRpdGFibGUoY29sdW1uLmVkaXRhYmxlKVxuICAgICAgICAgICAgICAgIC5vZmYoJ3Nob3duJykub24oJ3Nob3duJywgZnVuY3Rpb24oZSwgZWRpdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGF0LmdldERhdGEoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gJCh0aGlzKS5wYXJlbnRzKCd0cltkYXRhLWluZGV4XScpLmRhdGEoJ2luZGV4JyksXG4gICAgICAgICAgICAgICAgICAgICAgICByb3cgPSBkYXRhW2luZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICB0aGF0LnRyaWdnZXIoJ2VkaXRhYmxlLXNob3duJywgY29sdW1uLmZpZWxkLCByb3csICQodGhpcyksIGVkaXRhYmxlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoYXQuJGJvZHkuZmluZCgnYVtkYXRhLW5hbWU9XCInICsgY29sdW1uLmZpZWxkICsgJ1wiXScpLmVkaXRhYmxlKGNvbHVtbi5lZGl0YWJsZSlcbiAgICAgICAgICAgICAgICAub2ZmKCdoaWRkZW4nKS5vbignaGlkZGVuJywgZnVuY3Rpb24oZSwgcmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gdGhhdC5nZXREYXRhKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9ICQodGhpcykucGFyZW50cygndHJbZGF0YS1pbmRleF0nKS5kYXRhKCdpbmRleCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gZGF0YVtpbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgdGhhdC50cmlnZ2VyKCdlZGl0YWJsZS1oaWRkZW4nLCBjb2x1bW4uZmllbGQsIHJvdywgJCh0aGlzKSwgcmVhc29uKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignZWRpdGFibGUtaW5pdCcpO1xuICAgIH07XG5cbn0pKGpRdWVyeSk7XG5cbi8qKlxuICogQGF1dGhvciB6aGl4aW4gd2VuIDx3ZW56aGl4aW4yMDEwQGdtYWlsLmNvbT5cbiAqIGV4dGVuc2lvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9rYXlhbHNocmkvdGFibGVFeHBvcnQuanF1ZXJ5LnBsdWdpblxuICovXG5cbihmdW5jdGlvbiAoJCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgc3ByaW50ZiA9ICQuZm4uYm9vdHN0cmFwVGFibGUudXRpbHMuc3ByaW50ZjtcblxuICAgIHZhciBUWVBFX05BTUUgPSB7XG4gICAgICAgIGpzb246ICdKU09OJyxcbiAgICAgICAgeG1sOiAnWE1MJyxcbiAgICAgICAgcG5nOiAnUE5HJyxcbiAgICAgICAgY3N2OiAnQ1NWJyxcbiAgICAgICAgdHh0OiAnVFhUJyxcbiAgICAgICAgc3FsOiAnU1FMJyxcbiAgICAgICAgZG9jOiAnTVMtV29yZCcsXG4gICAgICAgIGV4Y2VsOiAnTVMtRXhjZWwnLFxuICAgICAgICB4bHN4OiAnTVMtRXhjZWwgKE9wZW5YTUwpJyxcbiAgICAgICAgcG93ZXJwb2ludDogJ01TLVBvd2VycG9pbnQnLFxuICAgICAgICBwZGY6ICdQREYnXG4gICAgfTtcblxuICAgICQuZXh0ZW5kKCQuZm4uYm9vdHN0cmFwVGFibGUuZGVmYXVsdHMsIHtcbiAgICAgICAgc2hvd0V4cG9ydDogZmFsc2UsXG4gICAgICAgIGV4cG9ydERhdGFUeXBlOiAnYmFzaWMnLCAvLyBiYXNpYywgYWxsLCBzZWxlY3RlZFxuICAgICAgICAvLyAnanNvbicsICd4bWwnLCAncG5nJywgJ2NzdicsICd0eHQnLCAnc3FsJywgJ2RvYycsICdleGNlbCcsICdwb3dlcnBvaW50JywgJ3BkZidcbiAgICAgICAgZXhwb3J0VHlwZXM6IFsnanNvbicsICd4bWwnLCAnY3N2JywgJ3R4dCcsICdzcWwnLCAnZXhjZWwnXSxcbiAgICAgICAgZXhwb3J0T3B0aW9uczoge31cbiAgICB9KTtcblxuICAgICQuZXh0ZW5kKCQuZm4uYm9vdHN0cmFwVGFibGUuZGVmYXVsdHMuaWNvbnMsIHtcbiAgICAgICAgZXhwb3J0OiAnZ2x5cGhpY29uLWV4cG9ydCBpY29uLXNoYXJlJ1xuICAgIH0pO1xuXG4gICAgJC5leHRlbmQoJC5mbi5ib290c3RyYXBUYWJsZS5sb2NhbGVzLCB7XG4gICAgICAgIGZvcm1hdEV4cG9ydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdFeHBvcnQgZGF0YSc7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAkLmV4dGVuZCgkLmZuLmJvb3RzdHJhcFRhYmxlLmRlZmF1bHRzLCAkLmZuLmJvb3RzdHJhcFRhYmxlLmxvY2FsZXMpO1xuXG4gICAgdmFyIEJvb3RzdHJhcFRhYmxlID0gJC5mbi5ib290c3RyYXBUYWJsZS5Db25zdHJ1Y3RvcixcbiAgICAgICAgX2luaXRUb29sYmFyID0gQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRUb29sYmFyO1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRUb29sYmFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNob3dUb29sYmFyID0gdGhpcy5vcHRpb25zLnNob3dFeHBvcnQ7XG5cbiAgICAgICAgX2luaXRUb29sYmFyLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dFeHBvcnQpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAkYnRuR3JvdXAgPSB0aGlzLiR0b29sYmFyLmZpbmQoJz4uYnRuLWdyb3VwJyksXG4gICAgICAgICAgICAgICAgJGV4cG9ydCA9ICRidG5Hcm91cC5maW5kKCdkaXYuZXhwb3J0Jyk7XG5cbiAgICAgICAgICAgIGlmICghJGV4cG9ydC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkZXhwb3J0ID0gJChbXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZXhwb3J0IGJ0bi1ncm91cFwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiBjbGFzcz1cImJ0bicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcmludGYoJyBidG4tJXMnLCB0aGlzLm9wdGlvbnMuYnV0dG9uc0NsYXNzKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ByaW50ZignIGJ0bi0lcycsIHRoaXMub3B0aW9ucy5pY29uU2l6ZSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgZHJvcGRvd24tdG9nZ2xlXCIgYXJpYS1sYWJlbD1cImV4cG9ydCB0eXBlXCIgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlPVwiJyArIHRoaXMub3B0aW9ucy5mb3JtYXRFeHBvcnQoKSArICdcIiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIHR5cGU9XCJidXR0b25cIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcmludGYoJzxpIGNsYXNzPVwiJXMgJXNcIj48L2k+ICcsIHRoaXMub3B0aW9ucy5pY29uc1ByZWZpeCwgdGhpcy5vcHRpb25zLmljb25zLmV4cG9ydCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiY2FyZXRcIj48L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiByb2xlPVwibWVudVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC91bD4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+J10uam9pbignJykpLmFwcGVuZFRvKCRidG5Hcm91cCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgJG1lbnUgPSAkZXhwb3J0LmZpbmQoJy5kcm9wZG93bi1tZW51JyksXG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydFR5cGVzID0gdGhpcy5vcHRpb25zLmV4cG9ydFR5cGVzO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuZXhwb3J0VHlwZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlcyA9IHRoaXMub3B0aW9ucy5leHBvcnRUeXBlcy5zbGljZSgxLCAtMSkucmVwbGFjZSgvIC9nLCAnJykuc3BsaXQoJywnKTtcblxuICAgICAgICAgICAgICAgICAgICBleHBvcnRUeXBlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2godHlwZXMsIGZ1bmN0aW9uIChpLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0VHlwZXMucHVzaCh2YWx1ZS5zbGljZSgxLCAtMSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJC5lYWNoKGV4cG9ydFR5cGVzLCBmdW5jdGlvbiAoaSwgdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoVFlQRV9OQU1FLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbWVudS5hcHBlbmQoWyc8bGkgcm9sZT1cIm1lbnVpdGVtXCIgZGF0YS10eXBlPVwiJyArIHR5cGUgKyAnXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVFlQRV9OQU1FW3R5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9hPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvbGk+J10uam9pbignJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkbWVudS5maW5kKCdsaScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSAkKHRoaXMpLmRhdGEoJ3R5cGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvRXhwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuJGVsLnRhYmxlRXhwb3J0KCQuZXh0ZW5kKHt9LCB0aGF0Lm9wdGlvbnMuZXhwb3J0T3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc2NhcGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLmV4cG9ydERhdGFUeXBlID09PSAnYWxsJyAmJiB0aGF0Lm9wdGlvbnMucGFnaW5hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC4kZWwub25lKHRoYXQub3B0aW9ucy5zaWRlUGFnaW5hdGlvbiA9PT0gJ3NlcnZlcicgPyAncG9zdC1ib2R5LmJzLnRhYmxlJyA6ICdwYWdlLWNoYW5nZS5icy50YWJsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb0V4cG9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudG9nZ2xlUGFnaW5hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnRvZ2dsZVBhZ2luYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGF0Lm9wdGlvbnMuZXhwb3J0RGF0YVR5cGUgPT09ICdzZWxlY3RlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gdGhhdC5nZXREYXRhKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWREYXRhID0gdGhhdC5nZXRBbGxTZWxlY3Rpb25zKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFF1aWNrIGZpeCAjMjIyMFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQub3B0aW9ucy5zaWRlUGFnaW5hdGlvbiA9PT0gJ3NlcnZlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0ge3RvdGFsOiB0aGF0Lm9wdGlvbnMudG90YWxSb3dzfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3RoYXQub3B0aW9ucy5kYXRhRmllbGRdID0gdGhhdC5nZXREYXRhKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZERhdGEgPSB7dG90YWw6IHRoYXQub3B0aW9ucy50b3RhbFJvd3N9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRGF0YVt0aGF0Lm9wdGlvbnMuZGF0YUZpZWxkXSA9IHRoYXQuZ2V0QWxsU2VsZWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmxvYWQoc2VsZWN0ZWREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvRXhwb3J0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmxvYWQoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb0V4cG9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufSkoalF1ZXJ5KTtcblxuLyoqXG4gKiBAYXV0aG9yOiBEZW5uaXMgSGVybsOhbmRlelxuICogQHdlYlNpdGU6IGh0dHA6Ly9kamh2c2NmLmdpdGh1Yi5pby9CbG9nXG4gKiBAdmVyc2lvbjogdjEuMy4wXG4gKi9cblxuKGZ1bmN0aW9uICgkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGZsYXQgPSBmdW5jdGlvbiAoZWxlbWVudCwgdGhhdCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICAgICAgZnVuY3Rpb24gcmVjdXJzZShjdXIsIHByb3ApIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QoY3VyKSAhPT0gY3VyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W3Byb3BdID0gY3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkLmlzQXJyYXkoY3VyKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY3VyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICByZWN1cnNlKGN1cltpXSwgcHJvcCA/IHByb3AgKyB0aGF0Lm9wdGlvbnMuZmxhdFNlcGFyYXRvciArIGkgOiBcIlwiICsgaSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtwcm9wXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBjdXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZWN1cnNlKGN1cltwXSwgcHJvcCA/IHByb3AgKyB0aGF0Lm9wdGlvbnMuZmxhdFNlcGFyYXRvciArIHAgOiBwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzRW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Byb3BdID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVjdXJzZShlbGVtZW50LCBcIlwiKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdmFyIGZsYXRIZWxwZXIgPSBmdW5jdGlvbiAoZGF0YSwgdGhhdCkge1xuICAgICAgICB2YXIgZmxhdEFycmF5ID0gW107XG5cbiAgICAgICAgJC5lYWNoKCEkLmlzQXJyYXkoZGF0YSkgPyBbZGF0YV0gOiBkYXRhLCBmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICAgICAgZmxhdEFycmF5LnB1c2goZmxhdChlbGVtZW50LCB0aGF0KSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmxhdEFycmF5O1xuICAgIH07XG5cbiAgICAkLmV4dGVuZCgkLmZuLmJvb3RzdHJhcFRhYmxlLmRlZmF1bHRzLCB7XG4gICAgICAgIGZsYXQ6IGZhbHNlLFxuICAgICAgICBmbGF0U2VwYXJhdG9yOiAnLidcbiAgICB9KTtcblxuICAgIHZhciBCb290c3RyYXBUYWJsZSA9ICQuZm4uYm9vdHN0cmFwVGFibGUuQ29uc3RydWN0b3IsXG4gICAgICAgIF9pbml0RGF0YSA9IEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0RGF0YTtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0RGF0YSA9IGZ1bmN0aW9uIChkYXRhLCB0eXBlKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmxhdCkge1xuICAgICAgICAgICAgZGF0YSA9IGZsYXRIZWxwZXIoZGF0YSA/IGRhdGEgOiB0aGlzLm9wdGlvbnMuZGF0YSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgX2luaXREYXRhLmFwcGx5KHRoaXMsIFtkYXRhLCB0eXBlXSk7XG4gICAgfTtcbn0pKGpRdWVyeSk7XG5cbi8qKlxuICogQGF1dGhvcjogRGVubmlzIEhlcm7DoW5kZXpcbiAqIEB3ZWJTaXRlOiBodHRwOi8vZGpodnNjZi5naXRodWIuaW8vQmxvZ1xuICogQHZlcnNpb246IHYxLjAuMFxuICovXG5cbiFmdW5jdGlvbiAoJCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgJC5leHRlbmQoJC5mbi5ib290c3RyYXBUYWJsZS5kZWZhdWx0cywge1xuICAgICAgICBtdWx0aXBsZVNlYXJjaDogZmFsc2UsXG5cdCAgICBkZWxpbWV0ZXI6IFwiIFwiXG4gICAgfSk7XG5cbiAgICB2YXIgQm9vdHN0cmFwVGFibGUgPSAkLmZuLmJvb3RzdHJhcFRhYmxlLkNvbnN0cnVjdG9yLFxuICAgICAgICBfaW5pdFNlYXJjaCA9IEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0U2VhcmNoO1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRTZWFyY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubXVsdGlwbGVTZWFyY2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaFRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdHJBcnJheSA9IHRoaXMuc2VhcmNoVGV4dC5zcGxpdCh0aGlzLm9wdGlvbnMuZGVsaW1ldGVyKSxcbiAgICAgICAgICAgICAgICB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBmID0gJC5pc0VtcHR5T2JqZWN0KHRoaXMuZmlsdGVyQ29sdW1ucykgPyBudWxsIDogdGhpcy5maWx0ZXJDb2x1bW5zLFxuICAgICAgICAgICAgICAgIGRhdGFGaWx0ZXJlZCA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoc3RyQXJyYXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgX2luaXRTZWFyY2guYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ckFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSBzdHJBcnJheVtpXS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFGaWx0ZXJlZCA9IHN0ciA/ICQuZ3JlcChkYXRhRmlsdGVyZWQubGVuZ3RoID09PSAwID8gdGhpcy5vcHRpb25zLmRhdGEgOiBkYXRhRmlsdGVyZWQsIGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9ICQuaXNOdW1lcmljKGtleSkgPyBwYXJzZUludChrZXksIDEwKSA6IGtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVtW2tleV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbiA9IHRoYXQuY29sdW1uc1skLmZuLmJvb3RzdHJhcFRhYmxlLnV0aWxzLmdldEZpZWxkSW5kZXgodGhhdC5jb2x1bW5zLCBrZXkpXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiA9ICQuaW5BcnJheShrZXksIHRoYXQuaGVhZGVyLmZpZWxkcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXggIzE0Mjogc2VhcmNoIHVzZSBmb3JtYXRlZCBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbiAmJiBjb2x1bW4uc2VhcmNoRm9ybWF0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJC5mbi5ib290c3RyYXBUYWJsZS51dGlscy5jYWxjdWxhdGVPYmplY3RWYWx1ZShjb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmhlYWRlci5mb3JtYXR0ZXJzW2pdLCBbdmFsdWUsIGl0ZW0sIGldLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJC5pbkFycmF5KGtleSwgdGhhdC5oZWFkZXIuZmllbGRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xICYmIHRoYXQuaGVhZGVyLnNlYXJjaGFibGVzW2luZGV4XSAmJiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLnN0cmljdFNlYXJjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh2YWx1ZSArICcnKS50b0xvd2VyQ2FzZSgpID09PSBzdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodmFsdWUgKyAnJykudG9Mb3dlckNhc2UoKS5pbmRleE9mKHN0cikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0pIDogdGhpcy5kYXRhO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGFGaWx0ZXJlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9pbml0U2VhcmNoLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbn0oalF1ZXJ5KTtcblxuLyoqXG4gKiBAYXV0aG9yIE5hZGltIEJhc2FsYW1haCA8ZGltYnNsbWhAZ21haWwuY29tPlxuICogQHZlcnNpb246IHYxLjEuMFxuICogaHR0cHM6Ly9naXRodWIuY29tL2RpbWJzbG1oL2Jvb3RzdHJhcC10YWJsZS90cmVlL21hc3Rlci9zcmMvZXh0ZW5zaW9ucy9tdWx0aXBsZS1zb3J0L2Jvb3RzdHJhcC10YWJsZS1tdWx0aXBsZS1zb3J0LmpzXG4gKiBNb2RpZmljYXRpb246IEVyd2Fubk5ldm91IDxodHRwczovL2dpdGh1Yi5jb20vRXJ3YW5uTmV2b3U+XG4gKi9cblxuKGZ1bmN0aW9uKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaXNTaW5nbGVTb3J0ID0gZmFsc2U7XG5cbiAgICB2YXIgc2hvd1NvcnRNb2RhbCA9IGZ1bmN0aW9uKHRoYXQpIHtcbiAgICAgICAgdmFyIF9zZWxlY3RvciA9IHRoYXQuJHNvcnRNb2RhbC5zZWxlY3RvcixcbiAgICAgICAgICAgIF9pZCA9IF9zZWxlY3Rvci5zdWJzdHIoMSk7XG5cbiAgICAgICAgaWYgKCEkKF9pZCkuaGFzQ2xhc3MoXCJtb2RhbFwiKSkge1xuICAgICAgICAgICAgdmFyIHNNb2RhbCA9ICcgIDxkaXYgY2xhc3M9XCJtb2RhbCBmYWRlXCIgaWQ9XCInICsgX2lkICsgJ1wiIHRhYmluZGV4PVwiLTFcIiByb2xlPVwiZGlhbG9nXCIgYXJpYS1sYWJlbGxlZGJ5PVwiJyArIF9pZCArICdMYWJlbFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2dcIj4nO1xuICAgICAgICAgICAgc01vZGFsICs9ICcgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj4nO1xuICAgICAgICAgICAgc01vZGFsICs9ICcgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj4nO1xuICAgICAgICAgICAgc01vZGFsICs9ICcgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNsb3NlXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj48c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cIm1vZGFsLXRpdGxlXCIgaWQ9XCInICsgX2lkICsgJ0xhYmVsXCI+JyArIHRoYXQub3B0aW9ucy5mb3JtYXRNdWx0aXBsZVNvcnQoKSArICc8L2g0Pic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgIHNNb2RhbCArPSAnICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJib290c3RyYXAtdGFibGVcIj4nO1xuICAgICAgICAgICAgc01vZGFsICs9ICcgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZpeGVkLXRhYmxlLXRvb2xiYXJcIj4nO1xuICAgICAgICAgICAgc01vZGFsICs9ICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiYXJzXCI+JztcbiAgICAgICAgICAgIHNNb2RhbCArPSAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInRvb2xiYXJcIj4nO1xuICAgICAgICAgICAgc01vZGFsICs9ICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cImFkZFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiPjxpIGNsYXNzPVwiJyArIHRoYXQub3B0aW9ucy5pY29uc1ByZWZpeCArICcgJyArIHRoYXQub3B0aW9ucy5pY29ucy5wbHVzICsgJ1wiPjwvaT4gJyArIHRoYXQub3B0aW9ucy5mb3JtYXRBZGRMZXZlbCgpICsgJzwvYnV0dG9uPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwiZGVsZXRlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgZGlzYWJsZWQ+PGkgY2xhc3M9XCInICsgdGhhdC5vcHRpb25zLmljb25zUHJlZml4ICsgJyAnICsgdGhhdC5vcHRpb25zLmljb25zLm1pbnVzICsgJ1wiPjwvaT4gJyArIHRoYXQub3B0aW9ucy5mb3JtYXREZWxldGVMZXZlbCgpICsgJzwvYnV0dG9uPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgIHNNb2RhbCArPSAnICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZml4ZWQtdGFibGUtY29udGFpbmVyXCI+JztcbiAgICAgICAgICAgIHNNb2RhbCArPSAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgaWQ9XCJtdWx0aS1zb3J0XCIgY2xhc3M9XCJ0YWJsZVwiPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4nO1xuICAgICAgICAgICAgc01vZGFsICs9ICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjwvdGg+JztcbiAgICAgICAgICAgIHNNb2RhbCArPSAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+PGRpdiBjbGFzcz1cInRoLWlubmVyXCI+JyArIHRoYXQub3B0aW9ucy5mb3JtYXRDb2x1bW4oKSArICc8L2Rpdj48L3RoPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjxkaXYgY2xhc3M9XCJ0aC1pbm5lclwiPicgKyB0aGF0Lm9wdGlvbnMuZm9ybWF0T3JkZXIoKSArICc8L2Rpdj48L3RoPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+JztcbiAgICAgICAgICAgIHNNb2RhbCArPSAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PjwvdGJvZHk+JztcbiAgICAgICAgICAgIHNNb2RhbCArPSAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xuICAgICAgICAgICAgc01vZGFsICs9ICcgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xuICAgICAgICAgICAgc01vZGFsICs9ICcgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIj4nICsgdGhhdC5vcHRpb25zLmZvcm1hdENhbmNlbCgpICsgJzwvYnV0dG9uPic7XG4gICAgICAgICAgICBzTW9kYWwgKz0gJyAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+JyArIHRoYXQub3B0aW9ucy5mb3JtYXRTb3J0KCkgKyAnPC9idXR0b24+JztcbiAgICAgICAgICAgIHNNb2RhbCArPSAnICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xuICAgICAgICAgICAgc01vZGFsICs9ICcgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgIHNNb2RhbCArPSAnICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgIHNNb2RhbCArPSAnICAgICA8L2Rpdj4nO1xuXG4gICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKCQoc01vZGFsKSk7XG5cbiAgICAgICAgICAgIHRoYXQuJHNvcnRNb2RhbCA9ICQoX3NlbGVjdG9yKTtcbiAgICAgICAgICAgIHZhciAkcm93cyA9IHRoYXQuJHNvcnRNb2RhbC5maW5kKCd0Ym9keSA+IHRyJyk7XG5cbiAgICAgICAgICAgIHRoYXQuJHNvcnRNb2RhbC5vZmYoJ2NsaWNrJywgJyNhZGQnKS5vbignY2xpY2snLCAnI2FkZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0b3RhbCA9IHRoYXQuJHNvcnRNb2RhbC5maW5kKCcubXVsdGktc29ydC1uYW1lOmZpcnN0IG9wdGlvbicpLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHRoYXQuJHNvcnRNb2RhbC5maW5kKCd0Ym9keSB0cicpLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50IDwgdG90YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCsrO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmFkZExldmVsKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0QnV0dG9uU3RhdGVzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoYXQuJHNvcnRNb2RhbC5vZmYoJ2NsaWNrJywgJyNkZWxldGUnKS5vbignY2xpY2snLCAnI2RlbGV0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0b3RhbCA9IHRoYXQuJHNvcnRNb2RhbC5maW5kKCcubXVsdGktc29ydC1uYW1lOmZpcnN0IG9wdGlvbicpLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHRoYXQuJHNvcnRNb2RhbC5maW5kKCd0Ym9keSB0cicpLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ID4gMSAmJiBjdXJyZW50IDw9IHRvdGFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQtLTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC4kc29ydE1vZGFsLmZpbmQoJ3Rib2R5IHRyOmxhc3QnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zZXRCdXR0b25TdGF0ZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhhdC4kc29ydE1vZGFsLm9mZignY2xpY2snLCAnLmJ0bi1wcmltYXJ5Jykub24oJ2NsaWNrJywgJy5idG4tcHJpbWFyeScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciAkcm93cyA9IHRoYXQuJHNvcnRNb2RhbC5maW5kKCd0Ym9keSA+IHRyJyksXG4gICAgICAgICAgICAgICAgICAgICRhbGVydCA9IHRoYXQuJHNvcnRNb2RhbC5maW5kKCdkaXYuYWxlcnQnKSxcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcblxuXG4gICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLnNvcnRQcmlvcml0eSA9ICQubWFwKCRyb3dzLCBmdW5jdGlvbihyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRyb3cgPSAkKHJvdyksXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gJHJvdy5maW5kKCcubXVsdGktc29ydC1uYW1lJykudmFsKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlciA9ICRyb3cuZmluZCgnLm11bHRpLXNvcnQtb3JkZXInKS52YWwoKTtcblxuICAgICAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChuYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc29ydE5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0T3JkZXI6IG9yZGVyXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc29ydGVkX2ZpZWxkcyA9IGZpZWxkcy5zb3J0KCk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRlZF9maWVsZHNbaSArIDFdID09IHNvcnRlZF9maWVsZHNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChzb3J0ZWRfZmllbGRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRhbGVydC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRhbGVydCA9ICc8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCIgcm9sZT1cImFsZXJ0XCI+PHN0cm9uZz4nICsgdGhhdC5vcHRpb25zLmZvcm1hdER1cGxpY2F0ZUFsZXJ0VGl0bGUoKSArICc8L3N0cm9uZz4gJyArIHRoYXQub3B0aW9ucy5mb3JtYXREdXBsaWNhdGVBbGVydERlc2NyaXB0aW9uKCkgKyAnPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJGFsZXJ0KS5pbnNlcnRCZWZvcmUodGhhdC4kc29ydE1vZGFsLmZpbmQoJy5iYXJzJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRhbGVydC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJGFsZXJ0KS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuJHNvcnRNb2RhbC5tb2RhbCgnaGlkZScpO1xuICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuc29ydE5hbWUgPSAnJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLnNpZGVQYWdpbmF0aW9uID09PSAnc2VydmVyJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMucXVlcnlQYXJhbXMgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMubXVsdGlTb3J0ID0gdGhhdC5vcHRpb25zLnNvcnRQcmlvcml0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5pbml0U2VydmVyKHRoYXQub3B0aW9ucy5zaWxlbnRTb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoYXQub25NdWx0aXBsZVNvcnQoKTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLnNvcnRQcmlvcml0eSA9PT0gbnVsbCB8fCB0aGF0Lm9wdGlvbnMuc29ydFByaW9yaXR5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMuc29ydE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLnNvcnRQcmlvcml0eSA9IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0TmFtZTogdGhhdC5vcHRpb25zLnNvcnROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgc29ydE9yZGVyOiB0aGF0Lm9wdGlvbnMuc29ydE9yZGVyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoYXQub3B0aW9ucy5zb3J0UHJpb3JpdHkgIT09IG51bGwgJiYgdGhhdC5vcHRpb25zLnNvcnRQcmlvcml0eS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRyb3dzLmxlbmd0aCA8IHRoYXQub3B0aW9ucy5zb3J0UHJpb3JpdHkubGVuZ3RoICYmIHR5cGVvZiB0aGF0Lm9wdGlvbnMuc29ydFByaW9yaXR5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoYXQub3B0aW9ucy5zb3J0UHJpb3JpdHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuYWRkTGV2ZWwoaSwgdGhhdC5vcHRpb25zLnNvcnRQcmlvcml0eVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoYXQuYWRkTGV2ZWwoMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoYXQuc2V0QnV0dG9uU3RhdGVzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5leHRlbmQoJC5mbi5ib290c3RyYXBUYWJsZS5kZWZhdWx0cywge1xuICAgICAgICBzaG93TXVsdGlTb3J0OiBmYWxzZSxcbiAgICAgICAgc29ydFByaW9yaXR5OiBudWxsLFxuICAgICAgICBvbk11bHRpcGxlU29ydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQuZXh0ZW5kKCQuZm4uYm9vdHN0cmFwVGFibGUuZGVmYXVsdHMuaWNvbnMsIHtcbiAgICAgICAgc29ydDogJ2dseXBoaWNvbi1zb3J0JyxcbiAgICAgICAgcGx1czogJ2dseXBoaWNvbi1wbHVzJyxcbiAgICAgICAgbWludXM6ICdnbHlwaGljb24tbWludXMnXG4gICAgfSk7XG5cbiAgICAkLmV4dGVuZCgkLmZuLmJvb3RzdHJhcFRhYmxlLkNvbnN0cnVjdG9yLkVWRU5UUywge1xuICAgICAgICAnbXVsdGlwbGUtc29ydC5icy50YWJsZSc6ICdvbk11bHRpcGxlU29ydCdcbiAgICB9KTtcblxuICAgICQuZXh0ZW5kKCQuZm4uYm9vdHN0cmFwVGFibGUubG9jYWxlcywge1xuICAgICAgICBmb3JtYXRNdWx0aXBsZVNvcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdNdWx0aXBsZSBTb3J0JztcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0QWRkTGV2ZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdBZGQgTGV2ZWwnO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtYXREZWxldGVMZXZlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0RlbGV0ZSBMZXZlbCc7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdENvbHVtbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0NvbHVtbic7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdE9yZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnT3JkZXInO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtYXRTb3J0Qnk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdTb3J0IGJ5JztcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0VGhlbkJ5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnVGhlbiBieSc7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdFNvcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdTb3J0JztcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0Q2FuY2VsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnQ2FuY2VsJztcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0RHVwbGljYXRlQWxlcnRUaXRsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0R1cGxpY2F0ZShzKSBkZXRlY3RlZCEnO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtYXREdXBsaWNhdGVBbGVydERlc2NyaXB0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnUGxlYXNlIHJlbW92ZSBvciBjaGFuZ2UgYW55IGR1cGxpY2F0ZSBjb2x1bW4uJztcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0U29ydE9yZGVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFzYzogJ0FzY2VuZGluZycsXG4gICAgICAgICAgICAgICAgZGVzYzogJ0Rlc2NlbmRpbmcnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkLmV4dGVuZCgkLmZuLmJvb3RzdHJhcFRhYmxlLmRlZmF1bHRzLCAkLmZuLmJvb3RzdHJhcFRhYmxlLmxvY2FsZXMpO1xuXG4gICAgdmFyIEJvb3RzdHJhcFRhYmxlID0gJC5mbi5ib290c3RyYXBUYWJsZS5Db25zdHJ1Y3RvcixcbiAgICAgICAgX2luaXRUb29sYmFyID0gQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRUb29sYmFyO1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXRUb29sYmFyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2hvd1Rvb2xiYXIgPSB0cnVlO1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICBzb3J0TW9kYWxJZCA9ICcjc29ydE1vZGFsXycgKyB0aGlzLiRlbC5hdHRyKCdpZCcpO1xuICAgICAgICB0aGlzLiRzb3J0TW9kYWwgPSAkKHNvcnRNb2RhbElkKTtcblxuICAgICAgICBfaW5pdFRvb2xiYXIuYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd011bHRpU29ydCkge1xuICAgICAgICAgICAgdmFyICRidG5Hcm91cCA9IHRoaXMuJHRvb2xiYXIuZmluZCgnPi5idG4tZ3JvdXAnKS5maXJzdCgpLFxuICAgICAgICAgICAgICAgICRtdWx0aVNvcnRCdG4gPSB0aGlzLiR0b29sYmFyLmZpbmQoJ2Rpdi5tdWx0aS1zb3J0Jyk7XG5cbiAgICAgICAgICAgIGlmICghJG11bHRpU29ydEJ0bi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkbXVsdGlTb3J0QnRuID0gJyAgPGJ1dHRvbiBjbGFzcz1cIm11bHRpLXNvcnQgYnRuIGJ0bi1kZWZhdWx0JyArICh0aGlzLm9wdGlvbnMuaWNvblNpemUgPT09IHVuZGVmaW5lZCA/ICcnIDogJyBidG4tJyArIHRoaXMub3B0aW9ucy5pY29uU2l6ZSkgKyAnXCIgdHlwZT1cImJ1dHRvblwiIGRhdGEtdG9nZ2xlPVwibW9kYWxcIiBkYXRhLXRhcmdldD1cIicgKyBzb3J0TW9kYWxJZCArICdcIiB0aXRsZT1cIicgKyB0aGlzLm9wdGlvbnMuZm9ybWF0TXVsdGlwbGVTb3J0KCkgKyAnXCI+JztcbiAgICAgICAgICAgICAgICAkbXVsdGlTb3J0QnRuICs9ICcgICAgIDxpIGNsYXNzPVwiJyArIHRoaXMub3B0aW9ucy5pY29uc1ByZWZpeCArICcgJyArIHRoaXMub3B0aW9ucy5pY29ucy5zb3J0ICsgJ1wiPjwvaT4nO1xuICAgICAgICAgICAgICAgICRtdWx0aVNvcnRCdG4gKz0gJzwvYnV0dG9uPic7XG5cbiAgICAgICAgICAgICAgICAkYnRuR3JvdXAuYXBwZW5kKCRtdWx0aVNvcnRCdG4pO1xuXG4gICAgICAgICAgICAgICAgc2hvd1NvcnRNb2RhbCh0aGF0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ3NvcnQuYnMudGFibGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpc1NpbmdsZVNvcnQgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuJGVsLm9uKCdtdWx0aXBsZS1zb3J0LmJzLnRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaXNTaW5nbGVTb3J0ID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy4kZWwub24oJ2xvYWQtc3VjY2Vzcy5icy50YWJsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICghaXNTaW5nbGVTb3J0ICYmIHRoYXQub3B0aW9ucy5zb3J0UHJpb3JpdHkgIT09IG51bGwgJiYgdHlwZW9mIHRoYXQub3B0aW9ucy5zb3J0UHJpb3JpdHkgPT09ICdvYmplY3QnICYmIHRoYXQub3B0aW9ucy5zaWRlUGFnaW5hdGlvbiAhPT0gJ3NlcnZlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5vbk11bHRpcGxlU29ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLiRlbC5vbignY29sdW1uLXN3aXRjaC5icy50YWJsZScsIGZ1bmN0aW9uKGZpZWxkLCBjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGF0Lm9wdGlvbnMuc29ydFByaW9yaXR5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMuc29ydFByaW9yaXR5W2ldLnNvcnROYW1lID09PSBjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuc29ydFByaW9yaXR5LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoYXQuYXNzaWduU29ydGFibGVBcnJvd3MoKTtcbiAgICAgICAgICAgICAgICB0aGF0LiRzb3J0TW9kYWwucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgc2hvd1NvcnRNb2RhbCh0aGF0KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLiRlbC5vbigncmVzZXQtdmlldy5icy50YWJsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICghaXNTaW5nbGVTb3J0ICYmIHRoYXQub3B0aW9ucy5zb3J0UHJpb3JpdHkgIT09IG51bGwgJiYgdHlwZW9mIHRoYXQub3B0aW9ucy5zb3J0UHJpb3JpdHkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuYXNzaWduU29ydGFibGVBcnJvd3MoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUub25NdWx0aXBsZVNvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgIHZhciBjbXAgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgICAgICByZXR1cm4geCA+IHkgPyAxIDogeCA8IHkgPyAtMSA6IDA7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGFycmF5Q21wID0gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgdmFyIGFycjEgPSBbXSxcbiAgICAgICAgICAgICAgICBhcnIyID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhhdC5vcHRpb25zLnNvcnRQcmlvcml0eS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBvcmRlciA9IHRoYXQub3B0aW9ucy5zb3J0UHJpb3JpdHlbaV0uc29ydE9yZGVyID09PSAnZGVzYycgPyAtMSA6IDEsXG4gICAgICAgICAgICAgICAgICAgIGFhID0gYVt0aGF0Lm9wdGlvbnMuc29ydFByaW9yaXR5W2ldLnNvcnROYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgYmIgPSBiW3RoYXQub3B0aW9ucy5zb3J0UHJpb3JpdHlbaV0uc29ydE5hbWVdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFhID09PSB1bmRlZmluZWQgfHwgYWEgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYWEgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJiID09PSB1bmRlZmluZWQgfHwgYmIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYmIgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCQuaXNOdW1lcmljKGFhKSAmJiAkLmlzTnVtZXJpYyhiYikpIHtcbiAgICAgICAgICAgICAgICAgICAgYWEgPSBwYXJzZUZsb2F0KGFhKTtcbiAgICAgICAgICAgICAgICAgICAgYmIgPSBwYXJzZUZsb2F0KGJiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhYSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgYWEgPSBhYS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFycjEucHVzaChcbiAgICAgICAgICAgICAgICAgICAgb3JkZXIgKiBjbXAoYWEsIGJiKSk7XG4gICAgICAgICAgICAgICAgYXJyMi5wdXNoKFxuICAgICAgICAgICAgICAgICAgICBvcmRlciAqIGNtcChiYiwgYWEpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNtcChhcnIxLCBhcnIyKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmRhdGEuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlDbXAoYSwgYik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaW5pdEJvZHkoKTtcbiAgICAgICAgdGhpcy5hc3NpZ25Tb3J0YWJsZUFycm93cygpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ211bHRpcGxlLXNvcnQnKTtcbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmFkZExldmVsID0gZnVuY3Rpb24oaW5kZXgsIHNvcnRQcmlvcml0eSkge1xuICAgICAgICB2YXIgdGV4dCA9IGluZGV4ID09PSAwID8gdGhpcy5vcHRpb25zLmZvcm1hdFNvcnRCeSgpIDogdGhpcy5vcHRpb25zLmZvcm1hdFRoZW5CeSgpO1xuXG4gICAgICAgIHRoaXMuJHNvcnRNb2RhbC5maW5kKCd0Ym9keScpXG4gICAgICAgICAgICAuYXBwZW5kKCQoJzx0cj4nKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicpLnRleHQodGV4dCkpXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8dGQ+JykuYXBwZW5kKCQoJzxzZWxlY3QgY2xhc3M9XCJmb3JtLWNvbnRyb2wgbXVsdGktc29ydC1uYW1lXCI+JykpKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPHRkPicpLmFwcGVuZCgkKCc8c2VsZWN0IGNsYXNzPVwiZm9ybS1jb250cm9sIG11bHRpLXNvcnQtb3JkZXJcIj4nKSkpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIHZhciAkbXVsdGlTb3J0TmFtZSA9IHRoaXMuJHNvcnRNb2RhbC5maW5kKCcubXVsdGktc29ydC1uYW1lJykubGFzdCgpLFxuICAgICAgICAgICAgJG11bHRpU29ydE9yZGVyID0gdGhpcy4kc29ydE1vZGFsLmZpbmQoJy5tdWx0aS1zb3J0LW9yZGVyJykubGFzdCgpO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLmNvbHVtbnMsIGZ1bmN0aW9uKGksIGNvbHVtbikge1xuICAgICAgICAgICAgaWYgKGNvbHVtbi5zb3J0YWJsZSA9PT0gZmFsc2UgfHwgY29sdW1uLnZpc2libGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkbXVsdGlTb3J0TmFtZS5hcHBlbmQoJzxvcHRpb24gdmFsdWU9XCInICsgY29sdW1uLmZpZWxkICsgJ1wiPicgKyBjb2x1bW4udGl0bGUgKyAnPC9vcHRpb24+Jyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQuZWFjaCh0aGlzLm9wdGlvbnMuZm9ybWF0U29ydE9yZGVycygpLCBmdW5jdGlvbih2YWx1ZSwgb3JkZXIpIHtcbiAgICAgICAgICAgICRtdWx0aVNvcnRPcmRlci5hcHBlbmQoJzxvcHRpb24gdmFsdWU9XCInICsgdmFsdWUgKyAnXCI+JyArIG9yZGVyICsgJzwvb3B0aW9uPicpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoc29ydFByaW9yaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICRtdWx0aVNvcnROYW1lLmZpbmQoJ29wdGlvblt2YWx1ZT1cIicgKyBzb3J0UHJpb3JpdHkuc29ydE5hbWUgKyAnXCJdJykuYXR0cihcInNlbGVjdGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgJG11bHRpU29ydE9yZGVyLmZpbmQoJ29wdGlvblt2YWx1ZT1cIicgKyBzb3J0UHJpb3JpdHkuc29ydE9yZGVyICsgJ1wiXScpLmF0dHIoXCJzZWxlY3RlZFwiLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuYXNzaWduU29ydGFibGVBcnJvd3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgaGVhZGVycyA9IHRoYXQuJGhlYWRlci5maW5kKCd0aCcpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCB0aGF0Lm9wdGlvbnMuc29ydFByaW9yaXR5Lmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQoaGVhZGVyc1tpXSkuZGF0YSgnZmllbGQnKSA9PT0gdGhhdC5vcHRpb25zLnNvcnRQcmlvcml0eVtjXS5zb3J0TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAkKGhlYWRlcnNbaV0pLmZpbmQoJy5zb3J0YWJsZScpLnJlbW92ZUNsYXNzKCdkZXNjIGFzYycpLmFkZENsYXNzKHRoYXQub3B0aW9ucy5zb3J0UHJpb3JpdHlbY10uc29ydE9yZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnNldEJ1dHRvblN0YXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLiRzb3J0TW9kYWwuZmluZCgnLm11bHRpLXNvcnQtbmFtZTpmaXJzdCBvcHRpb24nKS5sZW5ndGgsXG4gICAgICAgICAgICBjdXJyZW50ID0gdGhpcy4kc29ydE1vZGFsLmZpbmQoJ3Rib2R5IHRyJykubGVuZ3RoO1xuXG4gICAgICAgIGlmIChjdXJyZW50ID09IHRvdGFsKSB7XG4gICAgICAgICAgICB0aGlzLiRzb3J0TW9kYWwuZmluZCgnI2FkZCcpLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPiAxKSB7XG4gICAgICAgICAgICB0aGlzLiRzb3J0TW9kYWwuZmluZCgnI2RlbGV0ZScpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPCB0b3RhbCkge1xuICAgICAgICAgICAgdGhpcy4kc29ydE1vZGFsLmZpbmQoJyNhZGQnKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuJHNvcnRNb2RhbC5maW5kKCcjZGVsZXRlJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgIH07XG59KShqUXVlcnkpO1xuXG4vKipcbiAqIEBhdXRob3I6IEJyaWFuIEh1aXNtYW5cbiAqIEB3ZWJTaXRlOiBodHRwOi8vd3d3LmdyZXl3eXZlcm4uY29tXG4gKiBAdmVyc2lvbjogdjEuMC4wXG4gKiBKUyBmdW5jdGlvbnMgdG8gYWxsb3cgbmF0dXJhbCBzb3J0aW5nIG9uIGJvb3RzdHJhcC10YWJsZSBjb2x1bW5zXG4gKiBhZGQgZGF0YS1zb3J0ZXI9XCJhbHBoYW51bVwiIG9yIGRhdGEtc29ydGVyPVwibnVtZXJpY09ubHlcIiB0byBhbnkgdGhcbiAqXG4gKiBAdXBkYXRlIERlbm5pcyBIZXJuw6FuZGV6IDxodHRwOi8vZGpodnNjZi5naXRodWIuaW8vQmxvZz5cbiAqIEB1cGRhdGUgRHVhbmUgTWF5XG4gKi9cblxuZnVuY3Rpb24gYWxwaGFudW0oYSwgYikge1xuICBmdW5jdGlvbiBjaHVua2lmeSh0KSB7XG4gICAgdmFyIHR6ID0gW10sXG4gICAgICAgIHggPSAwLFxuICAgICAgICB5ID0gLTEsXG4gICAgICAgIG4gPSAwLFxuICAgICAgICBpLFxuICAgICAgICBqO1xuXG4gICAgd2hpbGUgKGkgPSAoaiA9IHQuY2hhckF0KHgrKykpLmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgIHZhciBtID0gKGkgPT09IDQ2IHx8IChpID49IDQ4ICYmIGkgPD0gNTcpKTtcbiAgICAgIGlmIChtICE9PSBuKSB7XG4gICAgICAgIHR6WysreV0gPSBcIlwiO1xuICAgICAgICBuID0gbTtcbiAgICAgIH1cbiAgICAgIHR6W3ldICs9IGo7XG4gICAgfVxuICAgIHJldHVybiB0ejtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0cmluZ2Z5KHYpIHtcbiAgICBpZiAodHlwZW9mKHYpID09PSBcIm51bWJlclwiKSB7XG4gICAgICB2ID0gXCJcIiArIHY7XG4gICAgfVxuICAgIGlmICghdikge1xuICAgICAgdiA9IFwiXCI7XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgdmFyIGFhID0gY2h1bmtpZnkoc3RyaW5nZnkoYSkpO1xuICB2YXIgYmIgPSBjaHVua2lmeShzdHJpbmdmeShiKSk7XG5cbiAgZm9yICh4ID0gMDsgYWFbeF0gJiYgYmJbeF07IHgrKykge1xuICAgIGlmIChhYVt4XSAhPT0gYmJbeF0pIHtcbiAgICAgIHZhciBjID0gTnVtYmVyKGFhW3hdKSxcbiAgICAgICAgICBkID0gTnVtYmVyKGJiW3hdKTtcblxuICAgICAgaWYgKGMgPT0gYWFbeF0gJiYgZCA9PSBiYlt4XSkge1xuICAgICAgICByZXR1cm4gYyAtIGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAoYWFbeF0gPiBiYlt4XSkgPyAxIDogLTE7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhYS5sZW5ndGggLSBiYi5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIG51bWVyaWNPbmx5KGEsIGIpIHtcbiAgICBmdW5jdGlvbiBzdHJpcE5vbk51bWJlcihzKSB7XG4gICAgICAgIHMgPSBzLnJlcGxhY2UobmV3IFJlZ0V4cCgvW14wLTldL2cpLCBcIlwiKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHMsIDEwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaXBOb25OdW1iZXIoYSkgLSBzdHJpcE5vbk51bWJlcihiKTtcbn1cbi8qKlxuICogQGF1dGhvcjogSmV3d2F5XG4gKiBAdmVyc2lvbjogdjEuMC4wXG4gKi9cblxuIWZ1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBnZXRDdXJyZW50SGVhZGVyKHRoYXQpIHtcbiAgICB2YXIgaGVhZGVyID0gdGhhdC4kaGVhZGVyO1xuICAgIGlmICh0aGF0Lm9wdGlvbnMuaGVpZ2h0KSB7XG4gICAgICBoZWFkZXIgPSB0aGF0LiR0YWJsZUhlYWRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gaGVhZGVyO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RmlsdGVyRmllbGRzKHRoYXQpIHtcbiAgICByZXR1cm4gZ2V0Q3VycmVudEhlYWRlcih0aGF0KS5maW5kKCdbZGF0YS1maWx0ZXItZmllbGRdJyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRGaWx0ZXJWYWx1ZXModGhhdCkge1xuICAgIHZhciAkZmlsdGVyRWxtcyA9IGdldEZpbHRlckZpZWxkcyh0aGF0KTtcbiAgICBpZiAoISQuaXNFbXB0eU9iamVjdCh0aGF0LmZpbHRlckNvbHVtbnNQYXJ0aWFsKSkge1xuICAgICAgJGZpbHRlckVsbXMuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZSkge1xuICAgICAgICB2YXIgJGVsZSA9ICQoZWxlKSxcbiAgICAgICAgICAgIGZpZWxkID0gJGVsZS5hdHRyKCdkYXRhLWZpbHRlci1maWVsZCcpLFxuICAgICAgICAgICAgdmFsdWUgPSB0aGF0LmZpbHRlckNvbHVtbnNQYXJ0aWFsW2ZpZWxkXTtcblxuICAgICAgICBpZiAoJGVsZS5pcyhcInNlbGVjdFwiKSkge1xuICAgICAgICAgICRlbGUudmFsKHZhbHVlKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAkZWxlLnZhbCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZpbHRlcih0aGF0LCBoZWFkZXIpIHtcbiAgICB2YXIgZW5hYmxlRmlsdGVyID0gZmFsc2UsXG4gICAgICAgIGlzVmlzaWJsZSxcbiAgICAgICAgaHRtbCxcbiAgICAgICAgdGltZW91dElkID0gMDtcblxuICAgICQuZWFjaCh0aGF0LmNvbHVtbnMsIGZ1bmN0aW9uIChpLCBjb2x1bW4pIHtcbiAgICAgIGlzVmlzaWJsZSA9ICdoaWRkZW4nO1xuICAgICAgaHRtbCA9IFtdO1xuXG4gICAgICBpZiAoIWNvbHVtbi52aXNpYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb2x1bW4uZmlsdGVyKSB7XG4gICAgICAgIGh0bWwucHVzaCgnPGRpdiBjbGFzcz1cIm5vLWZpbHRlclwiPjwvZGl2PicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGZpbHRlckNsYXNzID0gY29sdW1uLmZpbHRlci5jbGFzcyA/ICcgJyArIGNvbHVtbi5maWx0ZXIuY2xhc3MgOiAnJztcbiAgICAgICAgaHRtbC5wdXNoKCc8ZGl2IHN0eWxlPVwibWFyZ2luOiAwcHggMnB4IDJweCAycHg7XCIgY2xhc3M9XCJmaWx0ZXInICsgZmlsdGVyQ2xhc3MgKyAnXCI+Jyk7XG5cbiAgICAgICAgaWYgKGNvbHVtbi5zZWFyY2hhYmxlKSB7XG4gICAgICAgICAgZW5hYmxlRmlsdGVyID0gdHJ1ZTtcbiAgICAgICAgICBpc1Zpc2libGUgPSAndmlzaWJsZSdcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoY29sdW1uLmZpbHRlci50eXBlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICBjYXNlICdpbnB1dCcgOlxuICAgICAgICAgICAgaHRtbC5wdXNoKCc8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLWZpbHRlci1maWVsZD1cIicgKyBjb2x1bW4uZmllbGQgKyAnXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTsgdmlzaWJpbGl0eTonICsgaXNWaXNpYmxlICsgJ1wiPicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgICAgIGh0bWwucHVzaCgnPHNlbGVjdCBkYXRhLWZpbHRlci1maWVsZD1cIicgKyBjb2x1bW4uZmllbGQgKyAnXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTsgdmlzaWJpbGl0eTonICsgaXNWaXNpYmxlICsgJ1wiPjwvc2VsZWN0PicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJC5lYWNoKGhlYWRlci5jaGlsZHJlbigpLmNoaWxkcmVuKCksIGZ1bmN0aW9uIChpLCB0cikge1xuICAgICAgICB0ciA9ICQodHIpO1xuICAgICAgICBpZiAodHIuZGF0YSgnZmllbGQnKSA9PT0gY29sdW1uLmZpZWxkKSB7XG4gICAgICAgICAgdHIuZmluZCgnLmZodC1jZWxsJykuYXBwZW5kKGh0bWwuam9pbignJykpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpZiAoZW5hYmxlRmlsdGVyKSB7XG4gICAgICB2YXIgJGlucHV0cyA9IGhlYWRlci5maW5kKCdpbnB1dCcpLFxuICAgICAgICAgICRzZWxlY3RzID0gaGVhZGVyLmZpbmQoJ3NlbGVjdCcpO1xuXG5cbiAgICAgIGlmICgkaW5wdXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJGlucHV0cy5vZmYoJ2tleXVwJykub24oJ2tleXVwJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0Lm9uQ29sdW1uU2VhcmNoKGV2ZW50KTtcbiAgICAgICAgICB9LCB0aGF0Lm9wdGlvbnMuc2VhcmNoVGltZU91dCk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgJGlucHV0cy5vZmYoJ21vdXNldXAnKS5vbignbW91c2V1cCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICBvbGRWYWx1ZSA9ICRpbnB1dC52YWwoKTtcblxuICAgICAgICAgIGlmIChvbGRWYWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gJGlucHV0LnZhbCgpO1xuXG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoYXQub25Db2x1bW5TZWFyY2goZXZlbnQpO1xuICAgICAgICAgICAgICB9LCB0aGF0Lm9wdGlvbnMuc2VhcmNoVGltZU91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgMSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoJHNlbGVjdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAkc2VsZWN0cy5vbignc2VsZWN0MjpzZWxlY3QnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICB0aGF0Lm9uQ29sdW1uU2VhcmNoKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlci5maW5kKCcuZmlsdGVyJykuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRTZWxlY3QyKHRoYXQpIHtcbiAgICB2YXIgJGhlYWRlciA9IGdldEN1cnJlbnRIZWFkZXIodGhhdCk7XG5cbiAgICAkLmVhY2godGhhdC5jb2x1bW5zLCBmdW5jdGlvbiAoaWR4LCBjb2x1bW4pIHtcbiAgICAgIGlmIChjb2x1bW4uZmlsdGVyICYmIGNvbHVtbi5maWx0ZXIudHlwZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgdmFyICRzZWxlY3RFbGUgPSAkaGVhZGVyLmZpbmQoJ3NlbGVjdFtkYXRhLWZpbHRlci1maWVsZD0nICsgY29sdW1uLmZpZWxkICsgJ10nKTtcblxuICAgICAgICBpZiAoJHNlbGVjdEVsZS5sZW5ndGggPiAwICYmICEkc2VsZWN0RWxlLmRhdGEoKS5zZWxlY3QyKSB7XG4gICAgICAgICAgY29sdW1uLmZpbHRlci5kYXRhLnVuc2hpZnQoXCJcIik7XG5cbiAgICAgICAgICB2YXIgc2VsZWN0Mk9wdHMgPSB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJcIixcbiAgICAgICAgICAgIGFsbG93Q2xlYXI6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiBjb2x1bW4uZmlsdGVyLmRhdGEsXG4gICAgICAgICAgICBkcm9wZG93blBhcmVudDogdGhhdC4kZWwuY2xvc2VzdChcIi5ib290c3RyYXAtdGFibGVcIilcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgJHNlbGVjdEVsZS5zZWxlY3QyKHNlbGVjdDJPcHRzKTtcbiAgICAgICAgICAkc2VsZWN0RWxlLm9uKFwic2VsZWN0Mjp1bnNlbGVjdGluZ1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAkc2VsZWN0RWxlLnZhbChudWxsKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgIHRoYXQuc2VhcmNoVGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoYXQub25Db2x1bW5TZWFyY2goZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAkLmV4dGVuZCgkLmZuLmJvb3RzdHJhcFRhYmxlLmRlZmF1bHRzLCB7XG4gICAgZmlsdGVyOiBmYWxzZSxcbiAgICBmaWx0ZXJWYWx1ZXM6IHt9XG4gIH0pO1xuXG4gICQuZXh0ZW5kKCQuZm4uYm9vdHN0cmFwVGFibGUuQ09MVU1OX0RFRkFVTFRTLCB7XG4gICAgZmlsdGVyOiB1bmRlZmluZWRcbiAgfSk7XG5cbiAgdmFyIEJvb3RzdHJhcFRhYmxlID0gJC5mbi5ib290c3RyYXBUYWJsZS5Db25zdHJ1Y3RvcixcbiAgICAgIF9pbml0ID0gQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLmluaXQsXG4gICAgICBfaW5pdEhlYWRlciA9IEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0SGVhZGVyLFxuICAgICAgX2luaXRTZWFyY2ggPSBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdFNlYXJjaDtcblxuICBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvL01ha2Ugc3VyZSB0aGF0IHRoZSBmaWx0ZXJjb250cm9sIG9wdGlvbiBpcyBzZXRcbiAgICBpZiAodGhpcy5vcHRpb25zLmZpbHRlcikge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICBpZiAoISQuaXNFbXB0eU9iamVjdCh0aGF0Lm9wdGlvbnMuZmlsdGVyVmFsdWVzKSkge1xuICAgICAgICB0aGF0LmZpbHRlckNvbHVtbnNQYXJ0aWFsID0gdGhhdC5vcHRpb25zLmZpbHRlclZhbHVlcztcbiAgICAgICAgdGhhdC5vcHRpb25zLmZpbHRlclZhbHVlcyA9IHt9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLiRlbC5vbigncmVzZXQtdmlldy5icy50YWJsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9DcmVhdGUgY29udHJvbHMgb24gJHRhYmxlSGVhZGVyIGlmIHRoZSBoZWlnaHQgaXMgc2V0XG4gICAgICAgIGlmICghdGhhdC5vcHRpb25zLmhlaWdodCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vQXZvaWQgcmVjcmVhdGUgdGhlIGNvbnRyb2xzXG4gICAgICAgIGlmICh0aGF0LiR0YWJsZUhlYWRlci5maW5kKCdzZWxlY3QnKS5sZW5ndGggPiAwIHx8IHRoYXQuJHRhYmxlSGVhZGVyLmZpbmQoJ2lucHV0JykubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNyZWF0ZUZpbHRlcih0aGF0LCB0aGF0LiR0YWJsZUhlYWRlcik7XG4gICAgICB9KS5vbigncG9zdC1oZWFkZXIuYnMudGFibGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aW1lb3V0SWQgPSAwO1xuXG4gICAgICAgIGluaXRTZWxlY3QyKHRoYXQpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2V0RmlsdGVyVmFsdWVzKHRoYXQpO1xuICAgICAgICB9LCB0aGF0Lm9wdGlvbnMuc2VhcmNoVGltZU91dCAtIDEwMDApO1xuICAgICAgfSkub24oJ2NvbHVtbi1zd2l0Y2guYnMudGFibGUnLCBmdW5jdGlvbiAoZmllbGQsIGNoZWNrZWQpIHtcbiAgICAgICAgc2V0RmlsdGVyVmFsdWVzKHRoYXQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2luaXQuYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0SGVhZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIF9pbml0SGVhZGVyLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmZpbHRlcikge1xuICAgICAgY3JlYXRlRmlsdGVyKHRoaXMsIHRoaXMuJGhlYWRlcik7XG4gICAgfVxuICB9O1xuXG4gIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0U2VhcmNoID0gZnVuY3Rpb24gKCkge1xuICAgIF9pbml0U2VhcmNoLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcblxuICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgZmlsdGVyVmFsdWVzID0gdGhhdC5maWx0ZXJDb2x1bW5zUGFydGlhbDtcblxuICAgIC8vIEZpbHRlciBmb3IgY2xpZW50XG4gICAgaWYgKHRoYXQub3B0aW9ucy5zaWRlUGFnaW5hdGlvbiA9PT0gJ2NsaWVudCcpIHtcbiAgICAgIHRoaXMuZGF0YSA9ICQuZ3JlcCh0aGlzLmRhdGEsIGZ1bmN0aW9uIChyb3csIGlkeCkge1xuICAgICAgICBmb3IgKHZhciBmaWVsZCBpbiBmaWx0ZXJWYWx1ZXMpIHtcbiAgICAgICAgICB2YXIgY29sdW1uID0gdGhhdC5jb2x1bW5zWyQuZm4uYm9vdHN0cmFwVGFibGUudXRpbHMuZ2V0RmllbGRJbmRleCh0aGF0LmNvbHVtbnMsIGZpZWxkKV0sXG4gICAgICAgICAgICAgIGZpbHRlclZhbHVlID0gZmlsdGVyVmFsdWVzW2ZpZWxkXS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICByb3dWYWx1ZSA9IHJvd1tmaWVsZF07XG5cbiAgICAgICAgICByb3dWYWx1ZSA9ICQuZm4uYm9vdHN0cmFwVGFibGUudXRpbHMuY2FsY3VsYXRlT2JqZWN0VmFsdWUoXG4gICAgICAgICAgICAgIHRoYXQuaGVhZGVyLFxuICAgICAgICAgICAgICB0aGF0LmhlYWRlci5mb3JtYXR0ZXJzWyQuaW5BcnJheShmaWVsZCwgdGhhdC5oZWFkZXIuZmllbGRzKV0sXG4gICAgICAgICAgICAgIFtyb3dWYWx1ZSwgcm93LCBpZHhdLCByb3dWYWx1ZSk7XG5cbiAgICAgICAgICBpZiAoY29sdW1uLmZpbHRlclN0cmljdFNlYXJjaCkge1xuICAgICAgICAgICAgaWYgKCEoJC5pbkFycmF5KGZpZWxkLCB0aGF0LmhlYWRlci5maWVsZHMpICE9PSAtMSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2Ygcm93VmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiByb3dWYWx1ZSA9PT0gJ251bWJlcicpICYmXG4gICAgICAgICAgICAgICAgcm93VmFsdWUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpID09PSBmaWx0ZXJWYWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCEoJC5pbkFycmF5KGZpZWxkLCB0aGF0LmhlYWRlci5maWVsZHMpICE9PSAtMSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2Ygcm93VmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiByb3dWYWx1ZSA9PT0gJ251bWJlcicpICYmXG4gICAgICAgICAgICAgICAgKHJvd1ZhbHVlICsgJycpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXJWYWx1ZSkgIT09IC0xKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLm9uQ29sdW1uU2VhcmNoID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGZpZWxkID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5hdHRyKCdkYXRhLWZpbHRlci1maWVsZCcpLFxuICAgICAgICB2YWx1ZSA9ICQudHJpbSgkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnZhbCgpKTtcblxuICAgIGlmICgkLmlzRW1wdHlPYmplY3QodGhpcy5maWx0ZXJDb2x1bW5zUGFydGlhbCkpIHtcbiAgICAgIHRoaXMuZmlsdGVyQ29sdW1uc1BhcnRpYWwgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuZmlsdGVyQ29sdW1uc1BhcnRpYWxbZmllbGRdID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmZpbHRlckNvbHVtbnNQYXJ0aWFsW2ZpZWxkXTtcbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMucGFnZU51bWJlciA9IDE7XG4gICAgdGhpcy5vblNlYXJjaChldmVudCk7XG4gIH07XG5cbiAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnNldEZpbHRlckRhdGEgPSBmdW5jdGlvbiAoZmllbGQsIGRhdGEpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICRoZWFkZXIgPSBnZXRDdXJyZW50SGVhZGVyKHRoYXQpLFxuICAgICAgICAkc2VsZWN0RWxlID0gJGhlYWRlci5maW5kKCdzZWxlY3RbZGF0YS1maWx0ZXItZmllbGQ9XFxcIicgKyBmaWVsZCArICdcXFwiXScpO1xuXG4gICAgZGF0YS51bnNoaWZ0KFwiXCIpO1xuICAgICRzZWxlY3RFbGUuZW1wdHkoKTtcbiAgICAkc2VsZWN0RWxlLnNlbGVjdDIoe1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIHBsYWNlaG9sZGVyOiBcIlwiLFxuICAgICAgYWxsb3dDbGVhcjogdHJ1ZSxcbiAgICAgIGRyb3Bkb3duUGFyZW50OiB0aGF0LiRlbC5jbG9zZXN0KFwiLmJvb3RzdHJhcC10YWJsZVwiKVxuICAgIH0pO1xuXG4gICAgJC5lYWNoKHRoaXMuY29sdW1ucywgZnVuY3Rpb24gKGlkeCwgY29sdW1uKSB7XG4gICAgICBpZiAoY29sdW1uLmZpZWxkID09PSBmaWVsZCkge1xuICAgICAgICBjb2x1bW4uZmlsdGVyLmRhdGEgPSBkYXRhO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgQm9vdHN0cmFwVGFibGUucHJvdG90eXBlLnNldEZpbHRlclZhbHVlcyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICB0aGlzLmZpbHRlckNvbHVtbnNQYXJ0aWFsID0gdmFsdWVzO1xuICB9O1xuXG4gICQuZm4uYm9vdHN0cmFwVGFibGUubWV0aG9kcy5wdXNoKCdzZXRGaWx0ZXJEYXRhJyk7XG4gICQuZm4uYm9vdHN0cmFwVGFibGUubWV0aG9kcy5wdXNoKCdzZXRGaWx0ZXJWYWx1ZXMnKTtcblxufShqUXVlcnkpO1xuLyoqXG4gKiBAYXV0aG9yIHZpbmNlbnQgbG9oIDx2aW5jZW50Lm1sQGdtYWlsLmNvbT5cbiAqIEB2ZXJzaW9uOiB2MS4wLjBcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS92aW56bG9oL2Jvb3RzdHJhcC10YWJsZS9cbiAqIFN0aWNreSBoZWFkZXIgZm9yIGJvb3RzdHJhcC10YWJsZVxuICovXG5cbihmdW5jdGlvbiAoJCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBzcHJpbnRmID0gJC5mbi5ib290c3RyYXBUYWJsZS51dGlscy5zcHJpbnRmO1xuICAgICQuZXh0ZW5kKCQuZm4uYm9vdHN0cmFwVGFibGUuZGVmYXVsdHMsIHtcbiAgICAgICAgc3RpY2t5SGVhZGVyOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgdmFyIEJvb3RzdHJhcFRhYmxlID0gJC5mbi5ib290c3RyYXBUYWJsZS5Db25zdHJ1Y3RvcixcbiAgICAgICAgX2luaXRIZWFkZXIgPSBCb290c3RyYXBUYWJsZS5wcm90b3R5cGUuaW5pdEhlYWRlcjtcblxuICAgIEJvb3RzdHJhcFRhYmxlLnByb3RvdHlwZS5pbml0SGVhZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIF9pbml0SGVhZGVyLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpKTtcblxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zdGlja3lIZWFkZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YWJsZSA9IHRoaXMuJHRhYmxlQm9keS5maW5kKCd0YWJsZScpLFxuICAgICAgICAgICAgdGFibGVfaWQgPSB0YWJsZS5hdHRyKCdpZCcpLFxuICAgICAgICAgICAgaGVhZGVyX2lkID0gdGFibGUuYXR0cignaWQnKSArICctc3RpY2t5LWhlYWRlcicsXG4gICAgICAgICAgICBzdGlja3lfaGVhZGVyX2NvbnRhaW5lcl9pZCA9IGhlYWRlcl9pZCArJy1zdGlja3ktaGVhZGVyLWNvbnRhaW5lcicsXG4gICAgICAgICAgICBhbmNob3JfYmVnaW5faWQgPSBoZWFkZXJfaWQgKydfc3RpY2t5X2FuY2hvcl9iZWdpbicsXG4gICAgICAgICAgICBhbmNob3JfZW5kX2lkID0gaGVhZGVyX2lkICsnX3N0aWNreV9hbmNob3JfZW5kJztcbiAgICAgICAgLy8gYWRkIGJlZ2luIGFuZCBlbmQgYW5jaG9ycyB0byB0cmFjayB0YWJsZSBwb3NpdGlvblxuXG4gICAgICAgIHRhYmxlLmJlZm9yZShzcHJpbnRmKCc8ZGl2IGlkPVwiJXNcIiBjbGFzcz1cImhpZGRlblwiPjwvZGl2PicsIHN0aWNreV9oZWFkZXJfY29udGFpbmVyX2lkKSk7XG4gICAgICAgIHRhYmxlLmJlZm9yZShzcHJpbnRmKCc8ZGl2IGlkPVwiJXNcIj48L2Rpdj4nLCBhbmNob3JfYmVnaW5faWQpKTtcbiAgICAgICAgdGFibGUuYWZ0ZXIoc3ByaW50ZignPGRpdiBpZD1cIiVzXCI+PC9kaXY+JywgYW5jaG9yX2VuZF9pZCkpO1xuXG4gICAgICAgIHRhYmxlLmZpbmQoJ3RoZWFkJykuYXR0cignaWQnLCBoZWFkZXJfaWQpO1xuXG4gICAgICAgIC8vIGNsb25lIGhlYWRlciBqdXN0IG9uY2UsIHRvIGJlIHVzZWQgYXMgc3RpY2t5IGhlYWRlclxuICAgICAgICAvLyBkZWVwIGNsb25lIGhlYWRlci4gdXNpbmcgc291cmNlIGhlYWRlciBhZmZlY3RzIHRib2R5PnRkIHdpZHRoXG4gICAgICAgIHRoaXMuJHN0aWNreUhlYWRlciA9ICQoJCgnIycraGVhZGVyX2lkKS5jbG9uZSh0cnVlLCB0cnVlKSk7XG4gICAgICAgIC8vIGF2b2lkIGlkIGNvbmZsaWN0XG4gICAgICAgIHRoaXMuJHN0aWNreUhlYWRlci5yZW1vdmVBdHRyKCdpZCcpO1xuXG4gICAgICAgIC8vIHJlbmRlciBzdGlja3kgb24gd2luZG93IHNjcm9sbCBvciByZXNpemVcbiAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuJyt0YWJsZV9pZCwgdGFibGUsIHJlbmRlcl9zdGlja3lfaGVhZGVyKTtcbiAgICAgICAgJCh3aW5kb3cpLm9uKCdzY3JvbGwuJyt0YWJsZV9pZCwgdGFibGUsIHJlbmRlcl9zdGlja3lfaGVhZGVyKTtcbiAgICAgICAgLy8gcmVuZGVyIHN0aWNreSB3aGVuIHRhYmxlIHNjcm9sbCBsZWZ0LXJpZ2h0XG4gICAgICAgIHRhYmxlLmNsb3Nlc3QoJy5maXhlZC10YWJsZS1jb250YWluZXInKS5maW5kKCcuZml4ZWQtdGFibGUtYm9keScpLm9uKCdzY3JvbGwuJyt0YWJsZV9pZCwgdGFibGUsIG1hdGNoX3Bvc2l0aW9uX3gpO1xuXG4gICAgICAgIHRoaXMuJGVsLm9uKCdhbGwuYnMudGFibGUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdGhhdC4kc3RpY2t5SGVhZGVyID0gJCgkKCcjJytoZWFkZXJfaWQpLmNsb25lKHRydWUsIHRydWUpKTtcbiAgICAgICAgICAgIHRoYXQuJHN0aWNreUhlYWRlci5yZW1vdmVBdHRyKCdpZCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiByZW5kZXJfc3RpY2t5X2hlYWRlcihldmVudCkge1xuICAgICAgICAgICAgdmFyIHRhYmxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHZhciB0YWJsZV9oZWFkZXJfaWQgPSB0YWJsZS5maW5kKCd0aGVhZCcpLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncmVuZGVyX3N0aWNreV9oZWFkZXIgZm9yID4gJyt0YWJsZV9oZWFkZXJfaWQpO1xuICAgICAgICAgICAgaWYgKHRhYmxlLmxlbmd0aCA8IDEgfHwgJCgnIycrdGFibGVfaWQpLmxlbmd0aCA8IDEpe1xuICAgICAgICAgICAgICAgIC8vIHR1cm4gb2ZmIHdpbmRvdyBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuJyt0YWJsZV9pZCk7XG4gICAgICAgICAgICAgICAgJCh3aW5kb3cpLm9mZignc2Nyb2xsLicrdGFibGVfaWQpO1xuICAgICAgICAgICAgICAgIHRhYmxlLmNsb3Nlc3QoJy5maXhlZC10YWJsZS1jb250YWluZXInKS5maW5kKCcuZml4ZWQtdGFibGUtYm9keScpLm9mZignc2Nyb2xsLicrdGFibGVfaWQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGdldCBoZWFkZXIgaGVpZ2h0XG4gICAgICAgICAgICB2YXIgaGVhZGVyX2hlaWdodCA9ICcwJztcbiAgICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMuc3RpY2t5SGVhZGVyT2Zmc2V0WSkgaGVhZGVyX2hlaWdodCA9IHRoYXQub3B0aW9ucy5zdGlja3lIZWFkZXJPZmZzZXRZLnJlcGxhY2UoJ3B4JywnJyk7XG4gICAgICAgICAgICAvLyB3aW5kb3cgc2Nyb2xsIHRvcFxuICAgICAgICAgICAgdmFyIHQgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XG4gICAgICAgICAgICAvLyB0b3AgYW5jaG9yIHNjcm9sbCBwb3NpdGlvbiwgbWludXMgaGVhZGVyIGhlaWdodFxuICAgICAgICAgICAgdmFyIGUgPSAkKFwiI1wiK2FuY2hvcl9iZWdpbl9pZCkub2Zmc2V0KCkudG9wIC0gaGVhZGVyX2hlaWdodDtcbiAgICAgICAgICAgIC8vIGJvdHRvbSBhbmNob3Igc2Nyb2xsIHBvc2l0aW9uLCBtaW51cyBoZWFkZXIgaGVpZ2h0LCBtaW51cyBzdGlja3kgaGVpZ2h0XG4gICAgICAgICAgICB2YXIgZV9lbmQgPSAkKFwiI1wiK2FuY2hvcl9lbmRfaWQpLm9mZnNldCgpLnRvcCAtIGhlYWRlcl9oZWlnaHQgLSAkKCcjJyt0YWJsZV9oZWFkZXJfaWQpLmNzcygnaGVpZ2h0JykucmVwbGFjZSgncHgnLCcnKTtcbiAgICAgICAgICAgIC8vIHNob3cgc3RpY2t5IHdoZW4gdG9wIGFuY2hvciB0b3VjaGVzIGhlYWRlciwgYW5kIHdoZW4gYm90dG9tIGFuY2hvciBub3QgZXhjZWVkZWRcbiAgICAgICAgICAgIGlmICh0ID4gZSAmJiB0IDw9IGVfZW5kKSB7XG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlIGNsb25lIGFuZCBzb3VyY2UgY29sdW1uIHdpZHRocyBhcmUgdGhlIHNhbWVcbiAgICAgICAgICAgICAgICAkLmVhY2goIHRoYXQuJHN0aWNreUhlYWRlci5maW5kKCd0cicpLmVxKDApLmZpbmQoJ3RoJyksIGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAkKGl0ZW0pLmNzcygnbWluLXdpZHRoJywgJCgnIycrdGFibGVfaGVhZGVyX2lkKycgdHInKS5lcSgwKS5maW5kKCd0aCcpLmVxKGluZGV4KS5jc3MoJ3dpZHRoJykpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIG1hdGNoIGJvb3RzdHJhcCB0YWJsZSBzdHlsZVxuICAgICAgICAgICAgICAgICQoXCIjXCIrc3RpY2t5X2hlYWRlcl9jb250YWluZXJfaWQpLnJlbW92ZUNsYXNzKCdoaWRkZW4nKS5hZGRDbGFzcyhcImZpeC1zdGlja3kgZml4ZWQtdGFibGUtY29udGFpbmVyXCIpIDtcbiAgICAgICAgICAgICAgICAvLyBzdGljayBpdCBpbiBwb3NpdGlvblxuICAgICAgICAgICAgICAgICQoXCIjXCIrc3RpY2t5X2hlYWRlcl9jb250YWluZXJfaWQpLmNzcygndG9wJywgaGVhZGVyX2hlaWdodCArICdweCcpO1xuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBzY3JvbGxhYmxlIGNvbnRhaW5lciBmb3IgaGVhZGVyXG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbGFibGVfZGl2ID0gJCgnPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7b3ZlcmZsb3cteDpoaWRkZW47XCIgLz4nKTtcbiAgICAgICAgICAgICAgICAvLyBhcHBlbmQgY2xvbmVkIGhlYWRlciB0byBkb21cbiAgICAgICAgICAgICAgICAkKFwiI1wiK3N0aWNreV9oZWFkZXJfY29udGFpbmVyX2lkKS5odG1sKHNjcm9sbGFibGVfZGl2LmFwcGVuZCh0aGF0LiRzdGlja3lIZWFkZXIpKTtcbiAgICAgICAgICAgICAgICAvLyBtYXRjaCBjbG9uZSBhbmQgc291cmNlIGhlYWRlciBwb3NpdGlvbnMgd2hlbiBsZWZ0LXJpZ2h0IHNjcm9sbFxuICAgICAgICAgICAgICAgIG1hdGNoX3Bvc2l0aW9uX3goZXZlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBoaWRlIHN0aWNreVxuICAgICAgICAgICAgICAgICQoXCIjXCIrc3RpY2t5X2hlYWRlcl9jb250YWluZXJfaWQpLnJlbW92ZUNsYXNzKFwiZml4LXN0aWNreVwiKS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYXRjaF9wb3NpdGlvbl94KGV2ZW50KXtcbiAgICAgICAgICAgIHZhciB0YWJsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICB2YXIgdGFibGVfaGVhZGVyX2lkID0gdGFibGUuZmluZCgndGhlYWQnKS5hdHRyKCdpZCcpO1xuICAgICAgICAgICAgLy8gbWF0Y2ggY2xvbmUgYW5kIHNvdXJjZSBoZWFkZXIgcG9zaXRpb25zIHdoZW4gbGVmdC1yaWdodCBzY3JvbGxcbiAgICAgICAgICAgICQoXCIjXCIrc3RpY2t5X2hlYWRlcl9jb250YWluZXJfaWQpLmNzcyhcbiAgICAgICAgICAgICAgICAnd2lkdGgnLCArdGFibGUuY2xvc2VzdCgnLmZpeGVkLXRhYmxlLWJvZHknKS5jc3MoJ3dpZHRoJykucmVwbGFjZSgncHgnLCAnJykgKyAxXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgJChcIiNcIitzdGlja3lfaGVhZGVyX2NvbnRhaW5lcl9pZCtcIiB0aGVhZFwiKS5wYXJlbnQoKS5zY3JvbGxMZWZ0KE1hdGguYWJzKCQoJyMnK3RhYmxlX2hlYWRlcl9pZCkucG9zaXRpb24oKS5sZWZ0KSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG59KShqUXVlcnkpO1xuXG4vLyBBbGVydCBmdW5jdGlvbnNcblxuLy8gU2V0IHRoZSBwYWdlIGxldmVsIGZsYXNoXG5mdW5jdGlvbiBzZXRQYWdlQWxlcnQoc3RhdHVzLCBtZXNzYWdlLCB0aW1lb3V0KSB7XG4gICAgdmFyIG1zZyA9IHdpbmRvdy50cmFuc2xhdGlvbnNbbWVzc2FnZV0gPyB3aW5kb3cudHJhbnNsYXRpb25zW21lc3NhZ2VdIDogbWVzc2FnZTtcbiAgICBzdGF0dXMgPSBzdGF0dXMgPT09ICdlcnJvcicgPyAnZGFuZ2VyJyA6IHN0YXR1cztcbiAgICAkKCcjYWxlcnRzJykuaHRtbChcbiAgICAgICAgJCgnPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRpc21pc3NhYmxlIGFsZXJ0LWZhZGVvdXQgZmFkZSBpbiBhbGVydC0nICsgc3RhdHVzICsgJ1wiIHJvbGU9XCJhbGVydFwiPidcbiAgICAgICAgICAgICsgJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJjbG9zZVwiIGRhdGEtZGlzbWlzcz1cImFsZXJ0XCIgYXJpYS1sYWJlbD1cImNsb3NlXCI+JnRpbWVzOzwvYT4nICsgbXNnICsgJzwvZGl2PicpXG4gICAgKTtcbiAgICBpZiAodGltZW91dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQoXCIuYWxlcnQtZmFkZW91dFwiKS5mYWRlVG8oMTAwMCwgMCkuc2xpZGVVcCgxMDAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICB9XG59XG5cbi8vIENsZWFyIHRoZSBwYWdlIGxldmVsIGZsYXNoXG5mdW5jdGlvbiBjbGVhclBhZ2VBbGVydCgpIHtcbiAgICAkKCcjYWxlcnRzJykuaHRtbCgnJyk7XG59XG5cbnZhciBGb3JtTWFwcGVyID0gKGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBtYXBEYXRhVG9DaGVja2JveEZpZWxkID0gZnVuY3Rpb24gbWFwRGF0YVRvQ2hlY2tib3hGaWVsZChkYXRhLCBmaWVsZCkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gZmllbGQudmFsdWUpIHtcbiAgICAgICAgICAgIGZpZWxkLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YSA9IGZpZWxkLmRlZmF1bHRDaGVja2VkID8gZmllbGQuZGVmYXVsdENoZWNrZWQgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbWFwRGF0YVRvRGF0ZUZpZWxkID0gZnVuY3Rpb24gbWFwRGF0YVRvRGF0ZUZpZWxkKGRhdGEsIGZpZWxkKSB7XG4gICAgICAgIGlmICgkLnR5cGUoZGF0YSkgPT09ICd1bmRlZmluZWQnIHx8IGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGRhdGEgPSBmaWVsZC5kZWZhdWx0VmFsdWUgPyBmaWVsZC5kZWZhdWx0VmFsdWUgOiAnJztcbiAgICAgICAgfVxuICAgICAgICBmaWVsZC52YWx1ZSA9IG5ldyBEYXRlKGRhdGEpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgICB9O1xuXG4gICAgdmFyIG1hcERhdGFUb1JhZGlvRmllbGQgPSBmdW5jdGlvbiBtYXBEYXRhVG9SYWRpb0ZpZWxkKGRhdGEsIGZpZWxkKSB7XG4gICAgICAgIG1hcERhdGFUb0NoZWNrYm94RmllbGQoZGF0YSwgZmllbGQpO1xuICAgIH07XG5cbiAgICB2YXIgbWFwRGF0YVRvU2VsZWN0TXVsdGlwbGVGaWVsZCA9IGZ1bmN0aW9uIG1hcERhdGFUb1NlbGVjdE11bHRpcGxlRmllbGQoZGF0YSwgZmllbGQpIHtcbiAgICAgICAgaWYgKCQudHlwZShkYXRhKSA9PT0gJ3VuZGVmaW5lZCcgfHwgZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZGF0YSA9IGZpZWxkLmRlZmF1bHRWYWx1ZSA/IGZpZWxkLmRlZmF1bHRWYWx1ZSA6ICcnO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSAkLmlzQXJyYXkoZGF0YSkgPyBkYXRhIDogW2RhdGFdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZpZWxkLm9wdGlvbnNbaV0uc2VsZWN0ZWQgfD0gZGF0YS5pbmRleE9mKGZpZWxkLm9wdGlvbnNbaV0udmFsdWUpID4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgJChmaWVsZCkudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgfTtcblxuICAgIHZhciBtYXBEYXRhVG9TZWxlY3RGaWVsZCA9IGZ1bmN0aW9uIG1hcERhdGFUb1NlbGVjdEZpZWxkKGRhdGEsIGZpZWxkKSB7XG4gICAgICAgIGlmICgkLnR5cGUoZGF0YSkgPT09ICd1bmRlZmluZWQnIHx8IGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGRhdGEgPSAnY29yZS5wbGFjZWhvbGRlcic7XG4gICAgICAgIH1cbiAgICAgICAgZmllbGQudmFsdWUgPSBkYXRhLnRvU3RyaW5nKCkgfHwgZGF0YTtcbiAgICAgICAgJChmaWVsZCkudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgfTtcblxuICAgIHZhciBtYXBEYXRhVG9TdGF0aWNGaWVsZCA9IGZ1bmN0aW9uIG1hcERhdGFUb1N0YXRpY0ZpZWxkKGRhdGEsIGZpZWxkKSB7XG4gICAgICAgIGlmICgkLnR5cGUoZGF0YSkgPT09ICd1bmRlZmluZWQnIHx8IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gJycpIHtcbiAgICAgICAgICAgIGRhdGEgPSAnY29yZS5wbGFjZWhvbGRlcic7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHdpbmRvdy50cmFuc2xhdGlvbnNbZGF0YV0gPyB3aW5kb3cudHJhbnNsYXRpb25zW2RhdGFdIDogZGF0YTtcbiAgICAgICAgJCgnIycgKyBmaWVsZCkuaHRtbChkYXRhKTtcbiAgICB9O1xuXG4gICAgdmFyIG1hcERhdGFUb1RleHRGaWVsZCA9IGZ1bmN0aW9uIG1hcERhdGFUb1RleHRGaWVsZChkYXRhLCBmaWVsZCkge1xuICAgICAgICBpZiAoJC50eXBlKGRhdGEpID09PSAndW5kZWZpbmVkJyB8fCBkYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICBmaWVsZC52YWx1ZSA9ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmllbGQudmFsdWUgPSBkYXRhO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBtYXBEYXRhVG9GaWVsZCA9IGZ1bmN0aW9uIG1hcERhdGFUb0ZpZWxkKGRhdGEsIGZpZWxkKSB7XG5cbiAgICAgICAgaWYgKCFmaWVsZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHR5cGUgPSBmaWVsZC50eXBlIHx8IGZpZWxkWzBdLnR5cGU7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgICAgICAgICAgbWFwRGF0YVRvUmFkaW9GaWVsZChkYXRhLCBmaWVsZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgICAgICAgICAgbWFwRGF0YVRvQ2hlY2tib3hGaWVsZChkYXRhLCBmaWVsZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWxlY3QtbXVsdGlwbGUnOlxuICAgICAgICAgICAgICAgIG1hcERhdGFUb1NlbGVjdE11bHRpcGxlRmllbGQoZGF0YSwgZmllbGQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgICAgIGNhc2UgJ3NlbGVjdC1vbmUnOlxuICAgICAgICAgICAgICAgIG1hcERhdGFUb1NlbGVjdEZpZWxkKGRhdGEsIGZpZWxkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIG1hcERhdGFUb0RhdGVGaWVsZChkYXRhLCBmaWVsZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIG1hcERhdGFUb1RleHRGaWVsZChkYXRhLCBmaWVsZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHZhciBtYXBEYXRhVG9Gb3JtID0gZnVuY3Rpb24gbWFwRGF0YVRvRm9ybShkYXRhLCBmb3JtKSB7XG5cbiAgICAgICAgZm9yICh2YXIgaWQgaW4gZGF0YSkge1xuXG4gICAgICAgICAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGFbaWRdLnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoJC50eXBlKHZhbHVlKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIG1hcERhdGFUb0Zvcm0odmFsdWUsIGZvcm0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhW2lkXS5uYW1lID09PSAnc3RhdGljJykge1xuICAgICAgICAgICAgICAgIG1hcERhdGFUb1N0YXRpY0ZpZWxkKHZhbHVlLCBpZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBmaWVsZCA9IGZvcm0uZWxlbWVudHMubmFtZWRJdGVtKGlkKTtcbiAgICAgICAgICAgICAgICBtYXBEYXRhVG9GaWVsZCh2YWx1ZSwgZmllbGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFwRGF0YVRvQ2hlY2tib3hGaWVsZDogbWFwRGF0YVRvQ2hlY2tib3hGaWVsZCxcbiAgICAgICAgbWFwRGF0YVRvRGF0ZUZpZWxkOiBtYXBEYXRhVG9EYXRlRmllbGQsXG4gICAgICAgIG1hcERhdGFUb1JhZGlvRmllbGQ6IG1hcERhdGFUb1JhZGlvRmllbGQsXG4gICAgICAgIG1hcERhdGFUb1NlbGVjdEZpZWxkOiBtYXBEYXRhVG9TZWxlY3RGaWVsZCxcbiAgICAgICAgbWFwRGF0YVRvU2VsZWN0TXVsdGlwbGVGaWVsZDogbWFwRGF0YVRvU2VsZWN0TXVsdGlwbGVGaWVsZCxcbiAgICAgICAgbWFwRGF0YVRvVGV4dEZpZWxkOiBtYXBEYXRhVG9UZXh0RmllbGQsXG4gICAgICAgIG1hcERhdGFUb0ZpZWxkOiBtYXBEYXRhVG9GaWVsZCxcbiAgICAgICAgbWFwRGF0YVRvRm9ybTogbWFwRGF0YVRvRm9ybSxcbiAgICB9O1xuXG59KSgpO1xuXG4vLyBVbmRvIGZha2UgcmVhZG9ubHkgbW9kZVxuJCgnZm9ybScpLnN1Ym1pdChmdW5jdGlvbiAoKSB7XG4gICAgJCgnLnJlYWRvbmx5LXNlbGVjdCcpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICQoJy5yZWFkb25seS1yZXF1aXJlZCcpLnByb3AoJ3JlcXVpcmVkJywgdHJ1ZSk7XG59KTtcblxuLy8gU3VtbWVybm90ZSBFZGl0b3JcbnZhciBOb3RlU2F2ZUJ1dHRvbiA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIHVpID0gJC5zdW1tZXJub3RlLnVpO1xuXG4gICAgLy8gY3JlYXRlIGJ1dHRvblxuICAgIHZhciBidXR0b24gPSB1aS5idXR0b24oe1xuICAgICAgICBjb250ZW50czogJzxpIGNsYXNzPVwiZmEgZmEtY2hpbGRcIi8+U2F2ZScsXG4gICAgICAgIHRvb2x0aXA6ICdzYXZlJyxcbiAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQucG9zdCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIGNvbnRleHQuaW52b2tlKCdjb2RlJykpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYnV0dG9uLnJlbmRlcigpOyAvLyByZXR1cm4gYnV0dG9uIGFzIGpxdWVyeSBvYmplY3Rcbn07XG5cbiQoJyNwYWdlZWRpdCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcbiAgICAgICAgJCgnLmlubGluZWVkaXQnKS5zdW1tZXJub3RlKCdkZXN0cm95Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgJCgnLmlubGluZWVkaXQnKS5zdW1tZXJub3RlKHtcbiAgICAgICAgICAgIGxhbmc6IGxhbmcsXG4gICAgICAgICAgICBmb2N1czogdHJ1ZSxcbiAgICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgICAgICBzYXZlOiBOb3RlU2F2ZUJ1dHRvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sYmFyOiBbXG4gICAgICAgICAgICAgICAgWydzdHlsZScsIFsnc3R5bGUnXV0sXG4gICAgICAgICAgICAgICAgWydmb250JywgWydmb250bmFtZScsICdmb250c2l6ZSddXSxcbiAgICAgICAgICAgICAgICBbJ3RleHRzdHlsZScsIFsnYm9sZCcsICdpdGFsaWMnLCAndW5kZXJsaW5lJywgJ3N0cmlrZXRocm91Z2gnLCAnc3VwZXJzY3JpcHQnLCAnc3Vic2NyaXB0JywgJ2NsZWFyJ11dLFxuICAgICAgICAgICAgICAgIFsnY29sb3InLCBbJ2NvbG9yJ11dLFxuICAgICAgICAgICAgICAgIFsncGFyYScsIFsndWwnLCAnb2wnLCAncGFyYWdyYXBoJywgJ2hlaWdodCddXSxcbiAgICAgICAgICAgICAgICBbJ2luc2VydCcsIFsncGljdHVyZScsICdsaW5rJywgJ3ZpZGVvJ11dLFxuICAgICAgICAgICAgICAgIFsndGFibGUnLCBbJ3RhYmxlJ11dLFxuICAgICAgICAgICAgICAgIFsnaHInLCBbJ2hyJ11dLFxuICAgICAgICAgICAgICAgIFsndmlldycsIFsnZnVsbHNjcmVlbicsICdjb2RldmlldyddXSxcbiAgICAgICAgICAgICAgICBbJ2VkaXQnLCBbJ3VuZG8nLCAncmVkbyddXSxcbiAgICAgICAgICAgICAgICBbJ2hlbHAnLCBbJ2hlbHAnXV0sXG4gICAgICAgICAgICAgICAgWydzYXZlJywgWydzYXZlJ11dLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbi8vIFB1cmUgSmF2YVNjcmlwdCBjb2RlIGZvciByb3V0aW5nXG5cbnZhciBSb3V0ZXIgPSAoZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIGJhc2UgPSAnJztcbiAgICB2YXIgcm91dGVzID0gW107XG5cbiAgICB2YXIgZ2VuZXJhdGVQYXRoID0gZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG5hbWUsIHBhcmFtZXRlcnMpIHtcbiAgICAgICAgcGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgPT09IHVuZGVmaW5lZCA/IFtdIDogcGFyYW1ldGVycztcbiAgICAgICAgdGhpcy5iYXNlID0gdGhpcy5iYXNlID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXMuYmFzZTtcbiAgICAgICAgdmFyIHJvdXRlID0gdGhpcy5yb3V0ZXNbbmFtZV07XG4gICAgICAgIGlmIChyb3V0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1cmwgPSB0aGlzLmJhc2UgKyByb3V0ZS5wYXRoO1xuXG4gICAgICAgIGZvciAodmFyIGlkIGluIHBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCd7JyArIGlkICsgJ30nLCBwYXJhbWV0ZXJzW2lkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH07XG5cbiAgICB2YXIgc2V0QmFzZVBhdGggPSBmdW5jdGlvbiBzZXRCYXNlUGF0aChwYXRoKSB7XG4gICAgICAgIHRoaXMuYmFzZSA9IHBhdGg7XG4gICAgfTtcblxuICAgIHZhciBzZXRSb3V0ZXMgPSBmdW5jdGlvbiBhZGRSb3V0ZXMocm91dGVzKSB7XG4gICAgICAgIHRoaXMucm91dGVzID0gcm91dGVzO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZW5lcmF0ZVBhdGg6IGdlbmVyYXRlUGF0aCxcbiAgICAgICAgc2V0QmFzZVBhdGg6IHNldEJhc2VQYXRoLFxuICAgICAgICBzZXRSb3V0ZXM6IHNldFJvdXRlcyxcbiAgICB9O1xuXG59KSgpO1xuXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICB2YXIgdGltZW91dDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMsXG4gICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgICBpZiAoY2FsbE5vdykge1xuICAgICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICBtb21lbnQubG9jYWxlKGxhbmcpO1xuICAgICQuZXh0ZW5kKCQuZm4uYm9vdHN0cmFwVGFibGUuZGVmYXVsdHMsICQuZm4uYm9vdHN0cmFwVGFibGUubG9jYWxlc1tsYW5nXSk7XG59KTtcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgIC8vIFNldCBnbG9iYWwgZGVmYXVsdHMgZm9yIGFsbCBTZWxlY3QyIHdpZGdldHNcbiAgICAkLmZuLnNlbGVjdDIuZGVmYXVsdHMuc2V0KFwibGFuZ3VhZ2VcIiwgbGFuZyk7XG4gICAgJC5mbi5zZWxlY3QyLmRlZmF1bHRzLnNldChcIm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoXCIsIDExKTtcbiAgICAkLmZuLnNlbGVjdDIuZGVmYXVsdHMuc2V0KFwid2lkdGhcIiwgJ3Jlc29sdmUnKTtcbiAgICAvLyBSZXBsYWNlIGFsbCBzZWxlY3QgdGFncyB3aXRoIFNlbGVjdDJcbiAgICAkKFwic2VsZWN0XCIpLnNlbGVjdDIoKTtcbiAgICAvLyBIQUNLIFRvIGZpeCBTZWxlY3QyIG5vdCBiZWluZyByZXNwb25zaXZlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWxlY3QyL3NlbGVjdDIvaXNzdWVzLzMyNzggYW5kIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQxNDI5MTc2XG4gICAgJChcIi5zZWxlY3QyLnNlbGVjdDItY29udGFpbmVyXCIpLmNzcyhcIndpZHRoXCIsIFwiMTAwJVwiKTtcblxuICAgIC8vIFJlcGxhY2UgYWxsIGRhdGUvdGltZSB0YWdzIHdpdGggYSBwaWNrZXJcbiAgICAkKCcuZGF0ZXRpbWVwaWNrZXItaW5wdXQnKS5kYXRldGltZXBpY2tlcih7XG4gICAgICAgIGxvY2FsZTogbGFuZyxcbiAgICAgICAgc2hvd0NsZWFyOiB0cnVlLFxuICAgICAgICBzaG93Q2xvc2U6IHRydWUsXG4gICAgICAgIHNob3dUb2RheUJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgYWxsb3dJbnB1dFRvZ2dsZTogdHJ1ZSxcbiAgICB9KTtcblxuICAgIC8vIEZJWE1FIEhpZGUgQm9vdHN0cmFwIFRhYmxlIGxvYWRpbmcgYW5pbWF0aW9uIGFzIGlzIGEgYml0IGJyb2tlblxuICAgIC8vJCgnLnRhYmxlLWJvb3RzdHJhcC10YWJsZScpLmJvb3RzdHJhcFRhYmxlKCdoaWRlTG9hZGluZycpO1xuXG4gICAgLy8gQm9vdHN0cmFwIHRhYmxlIHNlZW1zIHRvIGJlIGlnbm9yaW5nIHRoZSBpY29ucyBhdHRyaWJ1dGUgc28gaGFjayBpdCBoZXJlIGZvciBub3dcbiAgICAvLyQoJy5idG4tZ3JvdXBbdGl0bGU9XCJDb2x1bW5zXCJdJykuZmluZCgnaS5nbHlwaGljb24tdGgnKS5yZW1vdmVDbGFzcygnZ2x5cGhpY29uLXRoJykuYWRkQ2xhc3MoJ2dseXBoaWNvbi10aC1saXN0Jyk7XG5cblxuICAgIC8vIEZha2UgcmVhZG9ubHkgbW9kZSBvbiBzZWxlY3Qgd2lkZ2V0c1xuICAgICQoJy5yZWFkb25seS1yZXF1aXJlZCcpLnByb3AoJ3JlcXVpcmVkJywgZmFsc2UpO1xuICAgICQoJy5yZWFkb25seS1zZWxlY3QnKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xufSk7XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAkKFwiLmFkZC1tb2R1bGUtc2VsZWN0b3JcIikub24oXCJjbGlja1wiLGZ1bmN0aW9uKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKHtcImRhdGFcIjokKHRoaXMpLmF0dHIoXCJkYXRhLW1vZHVsZVwiKX0pO1xuICAgICAgICAkKFwiLnJlY29yZC1hZGQtZm9ybVwiKS5oaWRlKClcbiAgICAgICAgJChcIi5yZWNvcmQtYWRkLWZvcm1cIikuZmlsdGVyKFwiLlwiKyQodGhpcykuYXR0cihcImRhdGEtbW9kdWxlXCIpKS5zaG93KCk7XG4gICAgfSk7XG4gICAgXG59KTsiXX0=
