(function(e,t){"use strict";if(typeof module==="object"&&typeof module.exports==="object"){module.exports=e.document?t(e,true):function(e){if(!e.document){throw new Error("jQuery requires a window with a document")}return t(e)}}else{t(e)}})(typeof window!=="undefined"?window:this,function(e,t){"use strict";var i=[];var n=e.document;var r=Object.getPrototypeOf;var s=i.slice;var a=i.concat;var o=i.push;var l=i.indexOf;var u={};var f=u.toString;var c=u.hasOwnProperty;var d=c.toString;var h=d.call(Object);var p={};var m=function e(t){return typeof t==="function"&&typeof t.nodeType!=="number"};var g=function e(t){return t!=null&&t===t.window};var v={type:true,src:true,noModule:true};function y(e,t,i){t=t||n;var r,s=t.createElement("script");s.text=e;if(i){for(r in v){if(i[r]){s[r]=i[r]}}}t.head.appendChild(s).parentNode.removeChild(s)}function b(e){if(e==null){return e+""}return typeof e==="object"||typeof e==="function"?u[f.call(e)]||"object":typeof e}var w="3.3.1",x=function(e,t){return new x.fn.init(e,t)},C=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.fn=x.prototype={jquery:w,constructor:x,length:0,toArray:function(){return s.call(this)},get:function(e){if(e==null){return s.call(this)}return e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);t.prevObject=this;return t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,function(t,i){return e.call(t,i,t)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(i>=0&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:o,sort:i.sort,splice:i.splice};x.extend=x.fn.extend=function(){var e,t,i,n,r,s,a=arguments[0]||{},o=1,l=arguments.length,u=false;if(typeof a==="boolean"){u=a;a=arguments[o]||{};o++}if(typeof a!=="object"&&!m(a)){a={}}if(o===l){a=this;o--}for(;o<l;o++){if((e=arguments[o])!=null){for(t in e){i=a[t];n=e[t];if(a===n){continue}if(u&&n&&(x.isPlainObject(n)||(r=Array.isArray(n)))){if(r){r=false;s=i&&Array.isArray(i)?i:[]}else{s=i&&x.isPlainObject(i)?i:{}}a[t]=x.extend(u,s,n)}else if(n!==undefined){a[t]=n}}}}return a};x.extend({expando:"jQuery"+(w+Math.random()).replace(/\D/g,""),isReady:true,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;if(!e||f.call(e)!=="[object Object]"){return false}t=r(e);if(!t){return true}i=c.call(t,"constructor")&&t.constructor;return typeof i==="function"&&d.call(i)===h},isEmptyObject:function(e){var t;for(t in e){return false}return true},globalEval:function(e){y(e)},each:function(e,t){var i,n=0;if(T(e)){i=e.length;for(;n<i;n++){if(t.call(e[n],n,e[n])===false){break}}}else{for(n in e){if(t.call(e[n],n,e[n])===false){break}}}return e},trim:function(e){return e==null?"":(e+"").replace(C,"")},makeArray:function(e,t){var i=t||[];if(e!=null){if(T(Object(e))){x.merge(i,typeof e==="string"?[e]:e)}else{o.call(i,e)}}return i},inArray:function(e,t,i){return t==null?-1:l.call(t,e,i)},merge:function(e,t){var i=+t.length,n=0,r=e.length;for(;n<i;n++){e[r++]=t[n]}e.length=r;return e},grep:function(e,t,i){var n,r=[],s=0,a=e.length,o=!i;for(;s<a;s++){n=!t(e[s],s);if(n!==o){r.push(e[s])}}return r},map:function(e,t,i){var n,r,s=0,o=[];if(T(e)){n=e.length;for(;s<n;s++){r=t(e[s],s,i);if(r!=null){o.push(r)}}}else{for(s in e){r=t(e[s],s,i);if(r!=null){o.push(r)}}}return a.apply([],o)},guid:1,support:p});if(typeof Symbol==="function"){x.fn[Symbol.iterator]=i[Symbol.iterator]}x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){u["[object "+t+"]"]=t.toLowerCase()});function T(e){var t=!!e&&"length"in e&&e.length,i=b(e);if(m(e)||g(e)){return false}return i==="array"||t===0||typeof t==="number"&&t>0&&t-1 in e}var _=function(e){var t,i,n,r,s,a,o,l,u,f,c,d,h,p,m,g,v,y,b,w="sizzle"+1*new Date,x=e.document,C=0,T=0,_=ae(),k=ae(),D=ae(),S=function(e,t){if(e===t){c=true}return 0},$={}.hasOwnProperty,A=[],E=A.pop,M=A.push,P=A.push,O=A.slice,I=function(e,t){var i=0,n=e.length;for(;i<n;i++){if(e[i]===t){return i}}return-1},F="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",j="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",U="\\["+N+"*("+j+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+N+"*\\]",L=":("+j+")(?:\\(("+"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|"+"((?:\\\\.|[^\\\\()[\\]]|"+U+")*)|"+".*"+")\\)|)",R=new RegExp(N+"+","g"),H=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),z=new RegExp("^"+N+"*,"+N+"*"),Y=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),V=new RegExp("="+N+"*([^\\]'\"]*?)"+N+"*\\]","g"),B=new RegExp(L),W=new RegExp("^"+j+"$"),q={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+U),PSEUDO:new RegExp("^"+L),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+F+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},Z=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+N+"?|("+N+")|.)","ig"),ee=function(e,t,i){var n="0x"+t-65536;return n!==n||i?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,n&1023|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){if(t){if(e==="\0"){return"ï¿½"}return e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" "}return"\\"+e},ne=function(){d()},re=ye(function(e){return e.disabled===true&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{P.apply(A=O.call(x.childNodes),x.childNodes);A[x.childNodes.length].nodeType}catch(e){P={apply:A.length?function(e,t){M.apply(e,O.call(t))}:function(e,t){var i=e.length,n=0;while(e[i++]=t[n++]){}e.length=i-1}}}function se(e,t,n,r){var s,o,u,f,c,p,v,y=t&&t.ownerDocument,C=t?t.nodeType:9;n=n||[];if(typeof e!=="string"||!e||C!==1&&C!==9&&C!==11){return n}if(!r){if((t?t.ownerDocument||t:x)!==h){d(t)}t=t||h;if(m){if(C!==11&&(c=X.exec(e))){if(s=c[1]){if(C===9){if(u=t.getElementById(s)){if(u.id===s){n.push(u);return n}}else{return n}}else{if(y&&(u=y.getElementById(s))&&b(t,u)&&u.id===s){n.push(u);return n}}}else if(c[2]){P.apply(n,t.getElementsByTagName(e));return n}else if((s=c[3])&&i.getElementsByClassName&&t.getElementsByClassName){P.apply(n,t.getElementsByClassName(s));return n}}if(i.qsa&&!D[e+" "]&&(!g||!g.test(e))){if(C!==1){y=t;v=e}else if(t.nodeName.toLowerCase()!=="object"){if(f=t.getAttribute("id")){f=f.replace(te,ie)}else{t.setAttribute("id",f=w)}p=a(e);o=p.length;while(o--){p[o]="#"+f+" "+ve(p[o])}v=p.join(",");y=K.test(e)&&me(t.parentNode)||t}if(v){try{P.apply(n,y.querySelectorAll(v));return n}catch(e){}finally{if(f===w){t.removeAttribute("id")}}}}}}return l(e.replace(H,"$1"),t,n,r)}function ae(){var e=[];function t(i,r){if(e.push(i+" ")>n.cacheLength){delete t[e.shift()]}return t[i+" "]=r}return t}function oe(e){e[w]=true;return e}function le(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return false}finally{if(t.parentNode){t.parentNode.removeChild(t)}t=null}}function ue(e,t){var i=e.split("|"),r=i.length;while(r--){n.attrHandle[i[r]]=t}}function fe(e,t){var i=t&&e,n=i&&e.nodeType===1&&t.nodeType===1&&e.sourceIndex-t.sourceIndex;if(n){return n}if(i){while(i=i.nextSibling){if(i===t){return-1}}}return e?1:-1}function ce(e){return function(t){var i=t.nodeName.toLowerCase();return i==="input"&&t.type===e}}function de(e){return function(t){var i=t.nodeName.toLowerCase();return(i==="input"||i==="button")&&t.type===e}}function he(e){return function(t){if("form"in t){if(t.parentNode&&t.disabled===false){if("label"in t){if("label"in t.parentNode){return t.parentNode.disabled===e}else{return t.disabled===e}}return t.isDisabled===e||t.isDisabled!==!e&&re(t)===e}return t.disabled===e}else if("label"in t){return t.disabled===e}return false}}function pe(e){return oe(function(t){t=+t;return oe(function(i,n){var r,s=e([],i.length,t),a=s.length;while(a--){if(i[r=s[a]]){i[r]=!(n[r]=i[r])}}})})}function me(e){return e&&typeof e.getElementsByTagName!=="undefined"&&e}i=se.support={};s=se.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?t.nodeName!=="HTML":false};d=se.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:x;if(a===h||a.nodeType!==9||!a.documentElement){return h}h=a;p=h.documentElement;m=!s(h);if(x!==h&&(r=h.defaultView)&&r.top!==r){if(r.addEventListener){r.addEventListener("unload",ne,false)}else if(r.attachEvent){r.attachEvent("onunload",ne)}}i.attributes=le(function(e){e.className="i";return!e.getAttribute("className")});i.getElementsByTagName=le(function(e){e.appendChild(h.createComment(""));return!e.getElementsByTagName("*").length});i.getElementsByClassName=Q.test(h.getElementsByClassName);i.getById=le(function(e){p.appendChild(e).id=w;return!h.getElementsByName||!h.getElementsByName(w).length});if(i.getById){n.filter["ID"]=function(e){var t=e.replace(J,ee);return function(e){return e.getAttribute("id")===t}};n.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&m){var i=t.getElementById(e);return i?[i]:[]}}}else{n.filter["ID"]=function(e){var t=e.replace(J,ee);return function(e){var i=typeof e.getAttributeNode!=="undefined"&&e.getAttributeNode("id");return i&&i.value===t}};n.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&m){var i,n,r,s=t.getElementById(e);if(s){i=s.getAttributeNode("id");if(i&&i.value===e){return[s]}r=t.getElementsByName(e);n=0;while(s=r[n++]){i=s.getAttributeNode("id");if(i&&i.value===e){return[s]}}}return[]}}}n.find["TAG"]=i.getElementsByTagName?function(e,t){if(typeof t.getElementsByTagName!=="undefined"){return t.getElementsByTagName(e)}else if(i.qsa){return t.querySelectorAll(e)}}:function(e,t){var i,n=[],r=0,s=t.getElementsByTagName(e);if(e==="*"){while(i=s[r++]){if(i.nodeType===1){n.push(i)}}return n}return s};n.find["CLASS"]=i.getElementsByClassName&&function(e,t){if(typeof t.getElementsByClassName!=="undefined"&&m){return t.getElementsByClassName(e)}};v=[];g=[];if(i.qsa=Q.test(h.querySelectorAll)){le(function(e){p.appendChild(e).innerHTML="<a id='"+w+"'></a>"+"<select id='"+w+"-\r\\' msallowcapture=''>"+"<option selected=''></option></select>";if(e.querySelectorAll("[msallowcapture^='']").length){g.push("[*^$]="+N+"*(?:''|\"\")")}if(!e.querySelectorAll("[selected]").length){g.push("\\["+N+"*(?:value|"+F+")")}if(!e.querySelectorAll("[id~="+w+"-]").length){g.push("~=")}if(!e.querySelectorAll(":checked").length){g.push(":checked")}if(!e.querySelectorAll("a#"+w+"+*").length){g.push(".#.+[+~]")}});le(function(e){e.innerHTML="<a href='' disabled='disabled'></a>"+"<select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden");e.appendChild(t).setAttribute("name","D");if(e.querySelectorAll("[name=d]").length){g.push("name"+N+"*[*^$|!~]?=")}if(e.querySelectorAll(":enabled").length!==2){g.push(":enabled",":disabled")}p.appendChild(e).disabled=true;if(e.querySelectorAll(":disabled").length!==2){g.push(":enabled",":disabled")}e.querySelectorAll("*,:x");g.push(",.*:")})}if(i.matchesSelector=Q.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector)){le(function(e){i.disconnectedMatch=y.call(e,"*");y.call(e,"[s!='']:x");v.push("!=",L)})}g=g.length&&new RegExp(g.join("|"));v=v.length&&new RegExp(v.join("|"));t=Q.test(p.compareDocumentPosition);b=t||Q.test(p.contains)?function(e,t){var i=e.nodeType===9?e.documentElement:e,n=t&&t.parentNode;return e===n||!!(n&&n.nodeType===1&&(i.contains?i.contains(n):e.compareDocumentPosition&&e.compareDocumentPosition(n)&16))}:function(e,t){if(t){while(t=t.parentNode){if(t===e){return true}}}return false};S=t?function(e,t){if(e===t){c=true;return 0}var n=!e.compareDocumentPosition-!t.compareDocumentPosition;if(n){return n}n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1;if(n&1||!i.sortDetached&&t.compareDocumentPosition(e)===n){if(e===h||e.ownerDocument===x&&b(x,e)){return-1}if(t===h||t.ownerDocument===x&&b(x,t)){return 1}return f?I(f,e)-I(f,t):0}return n&4?-1:1}:function(e,t){if(e===t){c=true;return 0}var i,n=0,r=e.parentNode,s=t.parentNode,a=[e],o=[t];if(!r||!s){return e===h?-1:t===h?1:r?-1:s?1:f?I(f,e)-I(f,t):0}else if(r===s){return fe(e,t)}i=e;while(i=i.parentNode){a.unshift(i)}i=t;while(i=i.parentNode){o.unshift(i)}while(a[n]===o[n]){n++}return n?fe(a[n],o[n]):a[n]===x?-1:o[n]===x?1:0};return h};se.matches=function(e,t){return se(e,null,null,t)};se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h){d(e)}t=t.replace(V,"='$1']");if(i.matchesSelector&&m&&!D[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t))){try{var n=y.call(e,t);if(n||i.disconnectedMatch||e.document&&e.document.nodeType!==11){return n}}catch(e){}}return se(t,h,null,[e]).length>0};se.contains=function(e,t){if((e.ownerDocument||e)!==h){d(e)}return b(e,t)};se.attr=function(e,t){if((e.ownerDocument||e)!==h){d(e)}var r=n.attrHandle[t.toLowerCase()],s=r&&$.call(n.attrHandle,t.toLowerCase())?r(e,t,!m):undefined;return s!==undefined?s:i.attributes||!m?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null};se.escape=function(e){return(e+"").replace(te,ie)};se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)};se.uniqueSort=function(e){var t,n=[],r=0,s=0;c=!i.detectDuplicates;f=!i.sortStable&&e.slice(0);e.sort(S);if(c){while(t=e[s++]){if(t===e[s]){r=n.push(s)}}while(r--){e.splice(n[r],1)}}f=null;return e};r=se.getText=function(e){var t,i="",n=0,s=e.nodeType;if(!s){while(t=e[n++]){i+=r(t)}}else if(s===1||s===9||s===11){if(typeof e.textContent==="string"){return e.textContent}else{for(e=e.firstChild;e;e=e.nextSibling){i+=r(e)}}}else if(s===3||s===4){return e.nodeValue}return i};n=se.selectors={cacheLength:50,createPseudo:oe,match:q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){e[1]=e[1].replace(J,ee);e[3]=(e[3]||e[4]||e[5]||"").replace(J,ee);if(e[2]==="~="){e[3]=" "+e[3]+" "}return e.slice(0,4)},CHILD:function(e){e[1]=e[1].toLowerCase();if(e[1].slice(0,3)==="nth"){if(!e[3]){se.error(e[0])}e[4]=+(e[4]?e[5]+(e[6]||1):2*(e[3]==="even"||e[3]==="odd"));e[5]=+(e[7]+e[8]||e[3]==="odd")}else if(e[3]){se.error(e[0])}return e},PSEUDO:function(e){var t,i=!e[6]&&e[2];if(q["CHILD"].test(e[0])){return null}if(e[3]){e[2]=e[4]||e[5]||""}else if(i&&B.test(i)&&(t=a(i,true))&&(t=i.indexOf(")",i.length-t)-i.length)){e[0]=e[0].slice(0,t);e[2]=i.slice(0,t)}return e.slice(0,3)}},filter:{TAG:function(e){var t=e.replace(J,ee).toLowerCase();return e==="*"?function(){return true}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+N+")"+e+"("+N+"|$)"))&&_(e,function(e){return t.test(typeof e.className==="string"&&e.className||typeof e.getAttribute!=="undefined"&&e.getAttribute("class")||"")})},ATTR:function(e,t,i){return function(n){var r=se.attr(n,e);if(r==null){return t==="!="}if(!t){return true}r+="";return t==="="?r===i:t==="!="?r!==i:t==="^="?i&&r.indexOf(i)===0:t==="*="?i&&r.indexOf(i)>-1:t==="$="?i&&r.slice(-i.length)===i:t==="~="?(" "+r.replace(R," ")+" ").indexOf(i)>-1:t==="|="?r===i||r.slice(0,i.length+1)===i+"-":false}},CHILD:function(e,t,i,n,r){var s=e.slice(0,3)!=="nth",a=e.slice(-4)!=="last",o=t==="of-type";return n===1&&r===0?function(e){return!!e.parentNode}:function(t,i,l){var u,f,c,d,h,p,m=s!==a?"nextSibling":"previousSibling",g=t.parentNode,v=o&&t.nodeName.toLowerCase(),y=!l&&!o,b=false;if(g){if(s){while(m){d=t;while(d=d[m]){if(o?d.nodeName.toLowerCase()===v:d.nodeType===1){return false}}p=m=e==="only"&&!p&&"nextSibling"}return true}p=[a?g.firstChild:g.lastChild];if(a&&y){d=g;c=d[w]||(d[w]={});f=c[d.uniqueID]||(c[d.uniqueID]={});u=f[e]||[];h=u[0]===C&&u[1];b=h&&u[2];d=h&&g.childNodes[h];while(d=++h&&d&&d[m]||(b=h=0)||p.pop()){if(d.nodeType===1&&++b&&d===t){f[e]=[C,h,b];break}}}else{if(y){d=t;c=d[w]||(d[w]={});f=c[d.uniqueID]||(c[d.uniqueID]={});u=f[e]||[];h=u[0]===C&&u[1];b=h}if(b===false){while(d=++h&&d&&d[m]||(b=h=0)||p.pop()){if((o?d.nodeName.toLowerCase()===v:d.nodeType===1)&&++b){if(y){c=d[w]||(d[w]={});f=c[d.uniqueID]||(c[d.uniqueID]={});f[e]=[C,b]}if(d===t){break}}}}}b-=r;return b===n||b%n===0&&b/n>=0}}},PSEUDO:function(e,t){var i,r=n.pseudos[e]||n.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);if(r[w]){return r(t)}if(r.length>1){i=[e,e,"",t];return n.setFilters.hasOwnProperty(e.toLowerCase())?oe(function(e,i){var n,s=r(e,t),a=s.length;while(a--){n=I(e,s[a]);e[n]=!(i[n]=s[a])}}):function(e){return r(e,0,i)}}return r}},pseudos:{not:oe(function(e){var t=[],i=[],n=o(e.replace(H,"$1"));return n[w]?oe(function(e,t,i,r){var s,a=n(e,null,r,[]),o=e.length;while(o--){if(s=a[o]){e[o]=!(t[o]=s)}}}):function(e,r,s){t[0]=e;n(t,null,s,i);t[0]=null;return!i.pop()}}),has:oe(function(e){return function(t){return se(e,t).length>0}}),contains:oe(function(e){e=e.replace(J,ee);return function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:oe(function(e){if(!W.test(e||"")){se.error("unsupported lang: "+e)}e=e.replace(J,ee).toLowerCase();return function(t){var i;do{if(i=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang")){i=i.toLowerCase();return i===e||i.indexOf(e+"-")===0}}while((t=t.parentNode)&&t.nodeType===1);return false}}),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(false),disabled:he(true),checked:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&!!e.checked||t==="option"&&!!e.selected},selected:function(e){if(e.parentNode){e.parentNode.selectedIndex}return e.selected===true},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling){if(e.nodeType<6){return false}}return true},parent:function(e){return!n.pseudos["empty"](e)},header:function(e){return G.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&e.type==="button"||t==="button"},text:function(e){var t;return e.nodeName.toLowerCase()==="input"&&e.type==="text"&&((t=e.getAttribute("type"))==null||t.toLowerCase()==="text")},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,i){return[i<0?i+t:i]}),even:pe(function(e,t){var i=0;for(;i<t;i+=2){e.push(i)}return e}),odd:pe(function(e,t){var i=1;for(;i<t;i+=2){e.push(i)}return e}),lt:pe(function(e,t,i){var n=i<0?i+t:i;for(;--n>=0;){e.push(n)}return e}),gt:pe(function(e,t,i){var n=i<0?i+t:i;for(;++n<t;){e.push(n)}return e})}};n.pseudos["nth"]=n.pseudos["eq"];for(t in{radio:true,checkbox:true,file:true,password:true,image:true}){n.pseudos[t]=ce(t)}for(t in{submit:true,reset:true}){n.pseudos[t]=de(t)}function ge(){}ge.prototype=n.filters=n.pseudos;n.setFilters=new ge;a=se.tokenize=function(e,t){var i,r,s,a,o,l,u,f=k[e+" "];if(f){return t?0:f.slice(0)}o=e;l=[];u=n.preFilter;while(o){if(!i||(r=z.exec(o))){if(r){o=o.slice(r[0].length)||o}l.push(s=[])}i=false;if(r=Y.exec(o)){i=r.shift();s.push({value:i,type:r[0].replace(H," ")});o=o.slice(i.length)}for(a in n.filter){if((r=q[a].exec(o))&&(!u[a]||(r=u[a](r)))){i=r.shift();s.push({value:i,type:a,matches:r});o=o.slice(i.length)}}if(!i){break}}return t?o.length:o?se.error(e):k(e,l).slice(0)};function ve(e){var t=0,i=e.length,n="";for(;t<i;t++){n+=e[t].value}return n}function ye(e,t,i){var n=t.dir,r=t.next,s=r||n,a=i&&s==="parentNode",o=T++;return t.first?function(t,i,r){while(t=t[n]){if(t.nodeType===1||a){return e(t,i,r)}}return false}:function(t,i,l){var u,f,c,d=[C,o];if(l){while(t=t[n]){if(t.nodeType===1||a){if(e(t,i,l)){return true}}}}else{while(t=t[n]){if(t.nodeType===1||a){c=t[w]||(t[w]={});f=c[t.uniqueID]||(c[t.uniqueID]={});if(r&&r===t.nodeName.toLowerCase()){t=t[n]||t}else if((u=f[s])&&u[0]===C&&u[1]===o){return d[2]=u[2]}else{f[s]=d;if(d[2]=e(t,i,l)){return true}}}}}return false}}function be(e){return e.length>1?function(t,i,n){var r=e.length;while(r--){if(!e[r](t,i,n)){return false}}return true}:e[0]}function we(e,t,i){var n=0,r=t.length;for(;n<r;n++){se(e,t[n],i)}return i}function xe(e,t,i,n,r){var s,a=[],o=0,l=e.length,u=t!=null;for(;o<l;o++){if(s=e[o]){if(!i||i(s,n,r)){a.push(s);if(u){t.push(o)}}}}return a}function Ce(e,t,i,n,r,s){if(n&&!n[w]){n=Ce(n)}if(r&&!r[w]){r=Ce(r,s)}return oe(function(s,a,o,l){var u,f,c,d=[],h=[],p=a.length,m=s||we(t||"*",o.nodeType?[o]:o,[]),g=e&&(s||!t)?xe(m,d,e,o,l):m,v=i?r||(s?e:p||n)?[]:a:g;if(i){i(g,v,o,l)}if(n){u=xe(v,h);n(u,[],o,l);f=u.length;while(f--){if(c=u[f]){v[h[f]]=!(g[h[f]]=c)}}}if(s){if(r||e){if(r){u=[];f=v.length;while(f--){if(c=v[f]){u.push(g[f]=c)}}r(null,v=[],u,l)}f=v.length;while(f--){if((c=v[f])&&(u=r?I(s,c):d[f])>-1){s[u]=!(a[u]=c)}}}}else{v=xe(v===a?v.splice(p,v.length):v);if(r){r(null,a,v,l)}else{P.apply(a,v)}}})}function Te(e){var t,i,r,s=e.length,a=n.relative[e[0].type],o=a||n.relative[" "],l=a?1:0,f=ye(function(e){return e===t},o,true),c=ye(function(e){return I(t,e)>-1},o,true),d=[function(e,i,n){var r=!a&&(n||i!==u)||((t=i).nodeType?f(e,i,n):c(e,i,n));t=null;return r}];for(;l<s;l++){if(i=n.relative[e[l].type]){d=[ye(be(d),i)]}else{i=n.filter[e[l].type].apply(null,e[l].matches);if(i[w]){r=++l;for(;r<s;r++){if(n.relative[e[r].type]){break}}return Ce(l>1&&be(d),l>1&&ve(e.slice(0,l-1).concat({value:e[l-2].type===" "?"*":""})).replace(H,"$1"),i,l<r&&Te(e.slice(l,r)),r<s&&Te(e=e.slice(r)),r<s&&ve(e))}d.push(i)}}return be(d)}function _e(e,t){var i=t.length>0,r=e.length>0,s=function(s,a,o,l,f){var c,p,g,v=0,y="0",b=s&&[],w=[],x=u,T=s||r&&n.find["TAG"]("*",f),_=C+=x==null?1:Math.random()||.1,k=T.length;if(f){u=a===h||a||f}for(;y!==k&&(c=T[y])!=null;y++){if(r&&c){p=0;if(!a&&c.ownerDocument!==h){d(c);o=!m}while(g=e[p++]){if(g(c,a||h,o)){l.push(c);break}}if(f){C=_}}if(i){if(c=!g&&c){v--}if(s){b.push(c)}}}v+=y;if(i&&y!==v){p=0;while(g=t[p++]){g(b,w,a,o)}if(s){if(v>0){while(y--){if(!(b[y]||w[y])){w[y]=E.call(l)}}}w=xe(w)}P.apply(l,w);if(f&&!s&&w.length>0&&v+t.length>1){se.uniqueSort(l)}}if(f){C=_;u=x}return b};return i?oe(s):s}o=se.compile=function(e,t){var i,n=[],r=[],s=D[e+" "];if(!s){if(!t){t=a(e)}i=t.length;while(i--){s=Te(t[i]);if(s[w]){n.push(s)}else{r.push(s)}}s=D(e,_e(r,n));s.selector=e}return s};l=se.select=function(e,t,i,r){var s,l,u,f,c,d=typeof e==="function"&&e,h=!r&&a(e=d.selector||e);i=i||[];if(h.length===1){l=h[0]=h[0].slice(0);if(l.length>2&&(u=l[0]).type==="ID"&&t.nodeType===9&&m&&n.relative[l[1].type]){t=(n.find["ID"](u.matches[0].replace(J,ee),t)||[])[0];if(!t){return i}else if(d){t=t.parentNode}e=e.slice(l.shift().value.length)}s=q["needsContext"].test(e)?0:l.length;while(s--){u=l[s];if(n.relative[f=u.type]){break}if(c=n.find[f]){if(r=c(u.matches[0].replace(J,ee),K.test(l[0].type)&&me(t.parentNode)||t)){l.splice(s,1);e=r.length&&ve(l);if(!e){P.apply(i,r);return i}break}}}}(d||o(e,h))(r,t,!m,i,!t||K.test(e)&&me(t.parentNode)||t);return i};i.sortStable=w.split("").sort(S).join("")===w;i.detectDuplicates=!!c;d();i.sortDetached=le(function(e){return e.compareDocumentPosition(h.createElement("fieldset"))&1});if(!le(function(e){e.innerHTML="<a href='#'></a>";return e.firstChild.getAttribute("href")==="#"})){ue("type|href|height|width",function(e,t,i){if(!i){return e.getAttribute(t,t.toLowerCase()==="type"?1:2)}})}if(!i.attributes||!le(function(e){e.innerHTML="<input/>";e.firstChild.setAttribute("value","");return e.firstChild.getAttribute("value")===""})){ue("value",function(e,t,i){if(!i&&e.nodeName.toLowerCase()==="input"){return e.defaultValue}})}if(!le(function(e){return e.getAttribute("disabled")==null})){ue(F,function(e,t,i){var n;if(!i){return e[t]===true?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}})}return se}(e);x.find=_;x.expr=_.selectors;x.expr[":"]=x.expr.pseudos;x.uniqueSort=x.unique=_.uniqueSort;x.text=_.getText;x.isXMLDoc=_.isXML;x.contains=_.contains;x.escapeSelector=_.escape;var k=function(e,t,i){var n=[],r=i!==undefined;while((e=e[t])&&e.nodeType!==9){if(e.nodeType===1){if(r&&x(e).is(i)){break}n.push(e)}}return n};var D=function(e,t){var i=[];for(;e;e=e.nextSibling){if(e.nodeType===1&&e!==t){i.push(e)}}return i};var S=x.expr.match.needsContext;function $(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function E(e,t,i){if(m(t)){return x.grep(e,function(e,n){return!!t.call(e,n,e)!==i})}if(t.nodeType){return x.grep(e,function(e){return e===t!==i})}if(typeof t!=="string"){return x.grep(e,function(e){return l.call(t,e)>-1!==i})}return x.filter(t,e,i)}x.filter=function(e,t,i){var n=t[0];if(i){e=":not("+e+")"}if(t.length===1&&n.nodeType===1){return x.find.matchesSelector(n,e)?[n]:[]}return x.find.matches(e,x.grep(t,function(e){return e.nodeType===1}))};x.fn.extend({find:function(e){var t,i,n=this.length,r=this;if(typeof e!=="string"){return this.pushStack(x(e).filter(function(){for(t=0;t<n;t++){if(x.contains(r[t],this)){return true}}}))}i=this.pushStack([]);for(t=0;t<n;t++){x.find(e,r[t],i)}return n>1?x.uniqueSort(i):i},filter:function(e){return this.pushStack(E(this,e||[],false))},not:function(e){return this.pushStack(E(this,e||[],true))},is:function(e){return!!E(this,typeof e==="string"&&S.test(e)?x(e):e||[],false).length}});var M,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,O=x.fn.init=function(e,t,i){var r,s;if(!e){return this}i=i||M;if(typeof e==="string"){if(e[0]==="<"&&e[e.length-1]===">"&&e.length>=3){r=[null,e,null]}else{r=P.exec(e)}if(r&&(r[1]||!t)){if(r[1]){t=t instanceof x?t[0]:t;x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:n,true));if(A.test(r[1])&&x.isPlainObject(t)){for(r in t){if(m(this[r])){this[r](t[r])}else{this.attr(r,t[r])}}}return this}else{s=n.getElementById(r[2]);if(s){this[0]=s;this.length=1}return this}}else if(!t||t.jquery){return(t||i).find(e)}else{return this.constructor(t).find(e)}}else if(e.nodeType){this[0]=e;this.length=1;return this}else if(m(e)){return i.ready!==undefined?i.ready(e):e(x)}return x.makeArray(e,this)};O.prototype=x.fn;M=x(n);var I=/^(?:parents|prev(?:Until|All))/,F={children:true,contents:true,next:true,prev:true};x.fn.extend({has:function(e){var t=x(e,this),i=t.length;return this.filter(function(){var e=0;for(;e<i;e++){if(x.contains(this,t[e])){return true}}})},closest:function(e,t){var i,n=0,r=this.length,s=[],a=typeof e!=="string"&&x(e);if(!S.test(e)){for(;n<r;n++){for(i=this[n];i&&i!==t;i=i.parentNode){if(i.nodeType<11&&(a?a.index(i)>-1:i.nodeType===1&&x.find.matchesSelector(i,e))){s.push(i);break}}}}return this.pushStack(s.length>1?x.uniqueSort(s):s)},index:function(e){if(!e){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1}if(typeof e==="string"){return l.call(x(e),this[0])}return l.call(this,e.jquery?e[0]:e)},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(e==null?this.prevObject:this.prevObject.filter(e))}});function N(e,t){while((e=e[t])&&e.nodeType!==1){}return e}x.each({parent:function(e){var t=e.parentNode;return t&&t.nodeType!==11?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,i){return k(e,"parentNode",i)},next:function(e){return N(e,"nextSibling")},prev:function(e){return N(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,i){return k(e,"nextSibling",i)},prevUntil:function(e,t,i){return k(e,"previousSibling",i)},siblings:function(e){return D((e.parentNode||{}).firstChild,e)},children:function(e){return D(e.firstChild)},contents:function(e){if($(e,"iframe")){return e.contentDocument}if($(e,"template")){e=e.content||e}return x.merge([],e.childNodes)}},function(e,t){x.fn[e]=function(i,n){var r=x.map(this,t,i);if(e.slice(-5)!=="Until"){n=i}if(n&&typeof n==="string"){r=x.filter(n,r)}if(this.length>1){if(!F[e]){x.uniqueSort(r)}if(I.test(e)){r.reverse()}}return this.pushStack(r)}});var j=/[^\x20\t\r\n\f]+/g;function U(e){var t={};x.each(e.match(j)||[],function(e,i){t[i]=true});return t}x.Callbacks=function(e){e=typeof e==="string"?U(e):x.extend({},e);var t,i,n,r,s=[],a=[],o=-1,l=function(){r=r||e.once;n=t=true;for(;a.length;o=-1){i=a.shift();while(++o<s.length){if(s[o].apply(i[0],i[1])===false&&e.stopOnFalse){o=s.length;i=false}}}if(!e.memory){i=false}t=false;if(r){if(i){s=[]}else{s=""}}},u={add:function(){if(s){if(i&&!t){o=s.length-1;a.push(i)}(function t(i){x.each(i,function(i,n){if(m(n)){if(!e.unique||!u.has(n)){s.push(n)}}else if(n&&n.length&&b(n)!=="string"){t(n)}})})(arguments);if(i&&!t){l()}}return this},remove:function(){x.each(arguments,function(e,t){var i;while((i=x.inArray(t,s,i))>-1){s.splice(i,1);if(i<=o){o--}}});return this},has:function(e){return e?x.inArray(e,s)>-1:s.length>0},empty:function(){if(s){s=[]}return this},disable:function(){r=a=[];s=i="";return this},disabled:function(){return!s},lock:function(){r=a=[];if(!i&&!t){s=i=""}return this},locked:function(){return!!r},fireWith:function(e,i){if(!r){i=i||[];i=[e,i.slice?i.slice():i];a.push(i);if(!t){l()}}return this},fire:function(){u.fireWith(this,arguments);return this},fired:function(){return!!n}};return u};function L(e){return e}function R(e){throw e}function H(e,t,i,n){var r;try{if(e&&m(r=e.promise)){r.call(e).done(t).fail(i)}else if(e&&m(r=e.then)){r.call(e,t,i)}else{t.apply(undefined,[e].slice(n))}}catch(e){i.apply(undefined,[e])}}x.extend({Deferred:function(t){var i=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){s.done(arguments).fail(arguments);return this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return x.Deferred(function(t){x.each(i,function(i,n){var r=m(e[n[4]])&&e[n[4]];s[n[1]](function(){var e=r&&r.apply(this,arguments);if(e&&m(e.promise)){e.promise().progress(t.notify).done(t.resolve).fail(t.reject)}else{t[n[0]+"With"](this,r?[e]:arguments)}})});e=null}).promise()},then:function(t,n,r){var s=0;function a(t,i,n,r){return function(){var o=this,l=arguments,u=function(){var e,u;if(t<s){return}e=n.apply(o,l);if(e===i.promise()){throw new TypeError("Thenable self-resolution")}u=e&&(typeof e==="object"||typeof e==="function")&&e.then;if(m(u)){if(r){u.call(e,a(s,i,L,r),a(s,i,R,r))}else{s++;u.call(e,a(s,i,L,r),a(s,i,R,r),a(s,i,L,i.notifyWith))}}else{if(n!==L){o=undefined;l=[e]}(r||i.resolveWith)(o,l)}},f=r?u:function(){try{u()}catch(e){if(x.Deferred.exceptionHook){x.Deferred.exceptionHook(e,f.stackTrace)}if(t+1>=s){if(n!==R){o=undefined;l=[e]}i.rejectWith(o,l)}}};if(t){f()}else{if(x.Deferred.getStackHook){f.stackTrace=x.Deferred.getStackHook()}e.setTimeout(f)}}}return x.Deferred(function(e){i[0][3].add(a(0,e,m(r)?r:L,e.notifyWith));i[1][3].add(a(0,e,m(t)?t:L));i[2][3].add(a(0,e,m(n)?n:R))}).promise()},promise:function(e){return e!=null?x.extend(e,r):r}},s={};x.each(i,function(e,t){var a=t[2],o=t[5];r[t[1]]=a.add;if(o){a.add(function(){n=o},i[3-e][2].disable,i[3-e][3].disable,i[0][2].lock,i[0][3].lock)}a.add(t[3].fire);s[t[0]]=function(){s[t[0]+"With"](this===s?undefined:this,arguments);return this};s[t[0]+"With"]=a.fireWith});r.promise(s);if(t){t.call(s,s)}return s},when:function(e){var t=arguments.length,i=t,n=Array(i),r=s.call(arguments),a=x.Deferred(),o=function(e){return function(i){n[e]=this;r[e]=arguments.length>1?s.call(arguments):i;if(!--t){a.resolveWith(n,r)}}};if(t<=1){H(e,a.done(o(i)).resolve,a.reject,!t);if(a.state()==="pending"||m(r[i]&&r[i].then)){return a.then()}}while(i--){H(r[i],o(i),a.reject)}return a.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(t,i){if(e.console&&e.console.warn&&t&&z.test(t.name)){e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,i)}};x.readyException=function(t){e.setTimeout(function(){throw t})};var Y=x.Deferred();x.fn.ready=function(e){Y.then(e).catch(function(e){x.readyException(e)});return this};x.extend({isReady:false,readyWait:1,ready:function(e){if(e===true?--x.readyWait:x.isReady){return}x.isReady=true;if(e!==true&&--x.readyWait>0){return}Y.resolveWith(n,[x])}});x.ready.then=Y.then;function V(){n.removeEventListener("DOMContentLoaded",V);e.removeEventListener("load",V);x.ready()}if(n.readyState==="complete"||n.readyState!=="loading"&&!n.documentElement.doScroll){e.setTimeout(x.ready)}else{n.addEventListener("DOMContentLoaded",V);e.addEventListener("load",V)}var B=function(e,t,i,n,r,s,a){var o=0,l=e.length,u=i==null;if(b(i)==="object"){r=true;for(o in i){B(e,t,o,i[o],true,s,a)}}else if(n!==undefined){r=true;if(!m(n)){a=true}if(u){if(a){t.call(e,n);t=null}else{u=t;t=function(e,t,i){return u.call(x(e),i)}}}if(t){for(;o<l;o++){t(e[o],i,a?n:n.call(e[o],o,t(e[o],i)))}}}if(r){return e}if(u){return t.call(e)}return l?t(e[0],i):s};var W=/^-ms-/,q=/-([a-z])/g;function Z(e,t){return t.toUpperCase()}function G(e){return e.replace(W,"ms-").replace(q,Z)}var Q=function(e){return e.nodeType===1||e.nodeType===9||!+e.nodeType};function X(){this.expando=x.expando+X.uid++}X.uid=1;X.prototype={cache:function(e){var t=e[this.expando];if(!t){t={};if(Q(e)){if(e.nodeType){e[this.expando]=t}else{Object.defineProperty(e,this.expando,{value:t,configurable:true})}}}return t},set:function(e,t,i){var n,r=this.cache(e);if(typeof t==="string"){r[G(t)]=i}else{for(n in t){r[G(n)]=t[n]}}return r},get:function(e,t){return t===undefined?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,i){if(t===undefined||t&&typeof t==="string"&&i===undefined){return this.get(e,t)}this.set(e,t,i);return i!==undefined?i:t},remove:function(e,t){var i,n=e[this.expando];if(n===undefined){return}if(t!==undefined){if(Array.isArray(t)){t=t.map(G)}else{t=G(t);t=t in n?[t]:t.match(j)||[]}i=t.length;while(i--){delete n[t[i]]}}if(t===undefined||x.isEmptyObject(n)){if(e.nodeType){e[this.expando]=undefined}else{delete e[this.expando]}}},hasData:function(e){var t=e[this.expando];return t!==undefined&&!x.isEmptyObject(t)}};var K=new X;var J=new X;var ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ie(e){if(e==="true"){return true}if(e==="false"){return false}if(e==="null"){return null}if(e===+e+""){return+e}if(ee.test(e)){return JSON.parse(e)}return e}function ne(e,t,i){var n;if(i===undefined&&e.nodeType===1){n="data-"+t.replace(te,"-$&").toLowerCase();i=e.getAttribute(n);if(typeof i==="string"){try{i=ie(i)}catch(e){}J.set(e,t,i)}else{i=undefined}}return i}x.extend({hasData:function(e){return J.hasData(e)||K.hasData(e)},data:function(e,t,i){return J.access(e,t,i)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,i){return K.access(e,t,i)},_removeData:function(e,t){K.remove(e,t)}});x.fn.extend({data:function(e,t){var i,n,r,s=this[0],a=s&&s.attributes;if(e===undefined){if(this.length){r=J.get(s);if(s.nodeType===1&&!K.get(s,"hasDataAttrs")){i=a.length;while(i--){if(a[i]){n=a[i].name;if(n.indexOf("data-")===0){n=G(n.slice(5));ne(s,n,r[n])}}}K.set(s,"hasDataAttrs",true)}}return r}if(typeof e==="object"){return this.each(function(){J.set(this,e)})}return B(this,function(t){var i;if(s&&t===undefined){i=J.get(s,e);if(i!==undefined){return i}i=ne(s,e);if(i!==undefined){return i}return}this.each(function(){J.set(this,e,t)})},null,t,arguments.length>1,null,true)},removeData:function(e){return this.each(function(){J.remove(this,e)})}});x.extend({queue:function(e,t,i){var n;if(e){t=(t||"fx")+"queue";n=K.get(e,t);if(i){if(!n||Array.isArray(i)){n=K.access(e,t,x.makeArray(i))}else{n.push(i)}}return n||[]}},dequeue:function(e,t){t=t||"fx";var i=x.queue(e,t),n=i.length,r=i.shift(),s=x._queueHooks(e,t),a=function(){x.dequeue(e,t)};if(r==="inprogress"){r=i.shift();n--}if(r){if(t==="fx"){i.unshift("inprogress")}delete s.stop;r.call(e,a,s)}if(!n&&s){s.empty.fire()}},_queueHooks:function(e,t){var i=t+"queueHooks";return K.get(e,i)||K.access(e,i,{empty:x.Callbacks("once memory").add(function(){K.remove(e,[t+"queue",i])})})}});x.fn.extend({queue:function(e,t){var i=2;if(typeof e!=="string"){t=e;e="fx";i--}if(arguments.length<i){return x.queue(this[0],e)}return t===undefined?this:this.each(function(){var i=x.queue(this,e,t);x._queueHooks(this,e);if(e==="fx"&&i[0]!=="inprogress"){x.dequeue(this,e)}})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,r=x.Deferred(),s=this,a=this.length,o=function(){if(!--n){r.resolveWith(s,[s])}};if(typeof e!=="string"){t=e;e=undefined}e=e||"fx";while(a--){i=K.get(s[a],e+"queueHooks");if(i&&i.empty){n++;i.empty.add(o)}}o();return r.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var se=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i");var ae=["Top","Right","Bottom","Left"];var oe=function(e,t){e=t||e;return e.style.display==="none"||e.style.display===""&&x.contains(e.ownerDocument,e)&&x.css(e,"display")==="none"};var le=function(e,t,i,n){var r,s,a={};for(s in t){a[s]=e.style[s];e.style[s]=t[s]}r=i.apply(e,n||[]);for(s in t){e.style[s]=a[s]}return r};function ue(e,t,i,n){var r,s,a=20,o=n?function(){return n.cur()}:function(){return x.css(e,t,"")},l=o(),u=i&&i[3]||(x.cssNumber[t]?"":"px"),f=(x.cssNumber[t]||u!=="px"&&+l)&&se.exec(x.css(e,t));if(f&&f[3]!==u){l=l/2;u=u||f[3];f=+l||1;while(a--){x.style(e,t,f+u);if((1-s)*(1-(s=o()/l||.5))<=0){a=0}f=f/s}f=f*2;x.style(e,t,f+u);i=i||[]}if(i){f=+f||+l||0;r=i[1]?f+(i[1]+1)*i[2]:+i[2];if(n){n.unit=u;n.start=f;n.end=r}}return r}var fe={};function ce(e){var t,i=e.ownerDocument,n=e.nodeName,r=fe[n];if(r){return r}t=i.body.appendChild(i.createElement(n));r=x.css(t,"display");t.parentNode.removeChild(t);if(r==="none"){r="block"}fe[n]=r;return r}function de(e,t){var i,n,r=[],s=0,a=e.length;for(;s<a;s++){n=e[s];if(!n.style){continue}i=n.style.display;if(t){if(i==="none"){r[s]=K.get(n,"display")||null;if(!r[s]){n.style.display=""}}if(n.style.display===""&&oe(n)){r[s]=ce(n)}}else{if(i!=="none"){r[s]="none";K.set(n,"display",i)}}}for(s=0;s<a;s++){if(r[s]!=null){e[s].style.display=r[s]}}return e}x.fn.extend({show:function(){return de(this,true)},hide:function(){return de(this)},toggle:function(e){if(typeof e==="boolean"){return e?this.show():this.hide()}return this.each(function(){if(oe(this)){x(this).show()}else{x(this).hide()}})}});var he=/^(?:checkbox|radio)$/i;var pe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i;var me=/^$|^module$|\/(?:java|ecma)script/i;var ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ge.optgroup=ge.option;ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead;ge.th=ge.td;function ve(e,t){var i;if(typeof e.getElementsByTagName!=="undefined"){i=e.getElementsByTagName(t||"*")}else if(typeof e.querySelectorAll!=="undefined"){i=e.querySelectorAll(t||"*")}else{i=[]}if(t===undefined||t&&$(e,t)){return x.merge([e],i)}return i}function ye(e,t){var i=0,n=e.length;for(;i<n;i++){K.set(e[i],"globalEval",!t||K.get(t[i],"globalEval"))}}var be=/<|&#?\w+;/;function we(e,t,i,n,r){var s,a,o,l,u,f,c=t.createDocumentFragment(),d=[],h=0,p=e.length;for(;h<p;h++){s=e[h];if(s||s===0){if(b(s)==="object"){x.merge(d,s.nodeType?[s]:s)}else if(!be.test(s)){d.push(t.createTextNode(s))}else{a=a||c.appendChild(t.createElement("div"));o=(pe.exec(s)||["",""])[1].toLowerCase();l=ge[o]||ge._default;a.innerHTML=l[1]+x.htmlPrefilter(s)+l[2];f=l[0];while(f--){a=a.lastChild}x.merge(d,a.childNodes);a=c.firstChild;a.textContent=""}}}c.textContent="";h=0;while(s=d[h++]){if(n&&x.inArray(s,n)>-1){if(r){r.push(s)}continue}u=x.contains(s.ownerDocument,s);a=ve(c.appendChild(s),"script");if(u){ye(a)}if(i){f=0;while(s=a[f++]){if(me.test(s.type||"")){i.push(s)}}}}return c}(function(){var e=n.createDocumentFragment(),t=e.appendChild(n.createElement("div")),i=n.createElement("input");i.setAttribute("type","radio");i.setAttribute("checked","checked");i.setAttribute("name","t");t.appendChild(i);p.checkClone=t.cloneNode(true).cloneNode(true).lastChild.checked;t.innerHTML="<textarea>x</textarea>";p.noCloneChecked=!!t.cloneNode(true).lastChild.defaultValue})();var xe=n.documentElement;var Ce=/^key/,Te=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,_e=/^([^.]*)(?:\.(.+)|)/;function ke(){return true}function De(){return false}function Se(){try{return n.activeElement}catch(e){}}function $e(e,t,i,n,r,s){var a,o;if(typeof t==="object"){if(typeof i!=="string"){n=n||i;i=undefined}for(o in t){$e(e,o,i,n,t[o],s)}return e}if(n==null&&r==null){r=i;n=i=undefined}else if(r==null){if(typeof i==="string"){r=n;n=undefined}else{r=n;n=i;i=undefined}}if(r===false){r=De}else if(!r){return e}if(s===1){a=r;r=function(e){x().off(e);return a.apply(this,arguments)};r.guid=a.guid||(a.guid=x.guid++)}return e.each(function(){x.event.add(this,t,r,n,i)})}x.event={global:{},add:function(e,t,i,n,r){var s,a,o,l,u,f,c,d,h,p,m,g=K.get(e);if(!g){return}if(i.handler){s=i;i=s.handler;r=s.selector}if(r){x.find.matchesSelector(xe,r)}if(!i.guid){i.guid=x.guid++}if(!(l=g.events)){l=g.events={}}if(!(a=g.handle)){a=g.handle=function(t){return typeof x!=="undefined"&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):undefined}}t=(t||"").match(j)||[""];u=t.length;while(u--){o=_e.exec(t[u])||[];h=m=o[1];p=(o[2]||"").split(".").sort();if(!h){continue}c=x.event.special[h]||{};h=(r?c.delegateType:c.bindType)||h;c=x.event.special[h]||{};f=x.extend({type:h,origType:m,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&x.expr.match.needsContext.test(r),namespace:p.join(".")},s);if(!(d=l[h])){d=l[h]=[];d.delegateCount=0;if(!c.setup||c.setup.call(e,n,p,a)===false){if(e.addEventListener){e.addEventListener(h,a)}}}if(c.add){c.add.call(e,f);if(!f.handler.guid){f.handler.guid=i.guid}}if(r){d.splice(d.delegateCount++,0,f)}else{d.push(f)}x.event.global[h]=true}},remove:function(e,t,i,n,r){var s,a,o,l,u,f,c,d,h,p,m,g=K.hasData(e)&&K.get(e);if(!g||!(l=g.events)){return}t=(t||"").match(j)||[""];u=t.length;while(u--){o=_e.exec(t[u])||[];h=m=o[1];p=(o[2]||"").split(".").sort();if(!h){for(h in l){x.event.remove(e,h+t[u],i,n,true)}continue}c=x.event.special[h]||{};h=(n?c.delegateType:c.bindType)||h;d=l[h]||[];o=o[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)");a=s=d.length;while(s--){f=d[s];if((r||m===f.origType)&&(!i||i.guid===f.guid)&&(!o||o.test(f.namespace))&&(!n||n===f.selector||n==="**"&&f.selector)){d.splice(s,1);if(f.selector){d.delegateCount--}if(c.remove){c.remove.call(e,f)}}}if(a&&!d.length){if(!c.teardown||c.teardown.call(e,p,g.handle)===false){x.removeEvent(e,h,g.handle)}delete l[h]}}if(x.isEmptyObject(l)){K.remove(e,"handle events")}},dispatch:function(e){var t=x.event.fix(e);var i,n,r,s,a,o,l=new Array(arguments.length),u=(K.get(this,"events")||{})[t.type]||[],f=x.event.special[t.type]||{};l[0]=t;for(i=1;i<arguments.length;i++){l[i]=arguments[i]}t.delegateTarget=this;if(f.preDispatch&&f.preDispatch.call(this,t)===false){return}o=x.event.handlers.call(this,t,u);i=0;while((s=o[i++])&&!t.isPropagationStopped()){t.currentTarget=s.elem;n=0;while((a=s.handlers[n++])&&!t.isImmediatePropagationStopped()){if(!t.rnamespace||t.rnamespace.test(a.namespace)){t.handleObj=a;t.data=a.data;r=((x.event.special[a.origType]||{}).handle||a.handler).apply(s.elem,l);if(r!==undefined){if((t.result=r)===false){t.preventDefault();t.stopPropagation()}}}}}if(f.postDispatch){f.postDispatch.call(this,t)}return t.result},handlers:function(e,t){var i,n,r,s,a,o=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!(e.type==="click"&&e.button>=1)){for(;u!==this;u=u.parentNode||this){if(u.nodeType===1&&!(e.type==="click"&&u.disabled===true)){s=[];a={};for(i=0;i<l;i++){n=t[i];r=n.selector+" ";if(a[r]===undefined){a[r]=n.needsContext?x(r,this).index(u)>-1:x.find(r,this,null,[u]).length}if(a[r]){s.push(n)}}if(s.length){o.push({elem:u,handlers:s})}}}}u=this;if(l<t.length){o.push({elem:u,handlers:t.slice(l)})}return o},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:true,configurable:true,get:m(t)?function(){if(this.originalEvent){return t(this.originalEvent)}}:function(){if(this.originalEvent){return this.originalEvent[e]}},set:function(t){Object.defineProperty(this,e,{enumerable:true,configurable:true,writable:true,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:true},focus:{trigger:function(){if(this!==Se()&&this.focus){this.focus();return false}},delegateType:"focusin"},blur:{trigger:function(){if(this===Se()&&this.blur){this.blur();return false}},delegateType:"focusout"},click:{trigger:function(){if(this.type==="checkbox"&&this.click&&$(this,"input")){this.click();return false}},_default:function(e){return $(e.target,"a")}},beforeunload:{postDispatch:function(e){if(e.result!==undefined&&e.originalEvent){e.originalEvent.returnValue=e.result}}}}};x.removeEvent=function(e,t,i){if(e.removeEventListener){e.removeEventListener(t,i)}};x.Event=function(e,t){if(!(this instanceof x.Event)){return new x.Event(e,t)}if(e&&e.type){this.originalEvent=e;this.type=e.type;this.isDefaultPrevented=e.defaultPrevented||e.defaultPrevented===undefined&&e.returnValue===false?ke:De;this.target=e.target&&e.target.nodeType===3?e.target.parentNode:e.target;this.currentTarget=e.currentTarget;this.relatedTarget=e.relatedTarget}else{this.type=e}if(t){x.extend(this,t)}this.timeStamp=e&&e.timeStamp||Date.now();this[x.expando]=true};x.Event.prototype={constructor:x.Event,isDefaultPrevented:De,isPropagationStopped:De,isImmediatePropagationStopped:De,isSimulated:false,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke;if(e&&!this.isSimulated){e.preventDefault()}},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke;if(e&&!this.isSimulated){e.stopPropagation()}},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke;if(e&&!this.isSimulated){e.stopImmediatePropagation()}this.stopPropagation()}};x.each({altKey:true,bubbles:true,cancelable:true,changedTouches:true,ctrlKey:true,detail:true,eventPhase:true,metaKey:true,pageX:true,pageY:true,shiftKey:true,view:true,char:true,charCode:true,key:true,keyCode:true,button:true,buttons:true,clientX:true,clientY:true,offsetX:true,offsetY:true,pointerId:true,pointerType:true,screenX:true,screenY:true,targetTouches:true,toElement:true,touches:true,which:function(e){var t=e.button;if(e.which==null&&Ce.test(e.type)){return e.charCode!=null?e.charCode:e.keyCode}if(!e.which&&t!==undefined&&Te.test(e.type)){if(t&1){return 1}if(t&2){return 3}if(t&4){return 2}return 0}return e.which}},x.event.addProp);x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i,n=this,r=e.relatedTarget,s=e.handleObj;if(!r||r!==n&&!x.contains(n,r)){e.type=s.origType;i=s.handler.apply(this,arguments);e.type=t}return i}}});x.fn.extend({on:function(e,t,i,n){return $e(this,e,t,i,n)},one:function(e,t,i,n){return $e(this,e,t,i,n,1)},off:function(e,t,i){var n,r;if(e&&e.preventDefault&&e.handleObj){n=e.handleObj;x(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler);return this}if(typeof e==="object"){for(r in e){this.off(r,t,e[r])}return this}if(t===false||typeof t==="function"){i=t;t=undefined}if(i===false){i=De}return this.each(function(){x.event.remove(this,e,i,t)})}});var Ae=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ee=/<script|<style|<link/i,Me=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){if($(e,"table")&&$(t.nodeType!==11?t:t.firstChild,"tr")){return x(e).children("tbody")[0]||e}return e}function Ie(e){e.type=(e.getAttribute("type")!==null)+"/"+e.type;return e}function Fe(e){if((e.type||"").slice(0,5)==="true/"){e.type=e.type.slice(5)}else{e.removeAttribute("type")}return e}function Ne(e,t){var i,n,r,s,a,o,l,u;if(t.nodeType!==1){return}if(K.hasData(e)){s=K.access(e);a=K.set(t,s);u=s.events;if(u){delete a.handle;a.events={};for(r in u){for(i=0,n=u[r].length;i<n;i++){x.event.add(t,r,u[r][i])}}}}if(J.hasData(e)){o=J.access(e);l=x.extend({},o);J.set(t,l)}}function je(e,t){var i=t.nodeName.toLowerCase();if(i==="input"&&he.test(e.type)){t.checked=e.checked}else if(i==="input"||i==="textarea"){t.defaultValue=e.defaultValue}}function Ue(e,t,i,n){t=a.apply([],t);var r,s,o,l,u,f,c=0,d=e.length,h=d-1,g=t[0],v=m(g);if(v||d>1&&typeof g==="string"&&!p.checkClone&&Me.test(g)){return e.each(function(r){var s=e.eq(r);if(v){t[0]=g.call(this,r,s.html())}Ue(s,t,i,n)})}if(d){r=we(t,e[0].ownerDocument,false,e,n);s=r.firstChild;if(r.childNodes.length===1){r=s}if(s||n){o=x.map(ve(r,"script"),Ie);l=o.length;for(;c<d;c++){u=r;if(c!==h){u=x.clone(u,true,true);if(l){x.merge(o,ve(u,"script"))}}i.call(e[c],u,c)}if(l){f=o[o.length-1].ownerDocument;x.map(o,Fe);for(c=0;c<l;c++){u=o[c];if(me.test(u.type||"")&&!K.access(u,"globalEval")&&x.contains(f,u)){if(u.src&&(u.type||"").toLowerCase()!=="module"){if(x._evalUrl){x._evalUrl(u.src)}}else{y(u.textContent.replace(Pe,""),f,u)}}}}}}return e}function Le(e,t,i){var n,r=t?x.filter(t,e):e,s=0;for(;(n=r[s])!=null;s++){if(!i&&n.nodeType===1){x.cleanData(ve(n))}if(n.parentNode){if(i&&x.contains(n.ownerDocument,n)){ye(ve(n,"script"))}n.parentNode.removeChild(n)}}return e}x.extend({htmlPrefilter:function(e){return e.replace(Ae,"<$1></$2>")},clone:function(e,t,i){var n,r,s,a,o=e.cloneNode(true),l=x.contains(e.ownerDocument,e);if(!p.noCloneChecked&&(e.nodeType===1||e.nodeType===11)&&!x.isXMLDoc(e)){a=ve(o);s=ve(e);for(n=0,r=s.length;n<r;n++){je(s[n],a[n])}}if(t){if(i){s=s||ve(e);a=a||ve(o);for(n=0,r=s.length;n<r;n++){Ne(s[n],a[n])}}else{Ne(e,o)}}a=ve(o,"script");if(a.length>0){ye(a,!l&&ve(e,"script"))}return o},cleanData:function(e){var t,i,n,r=x.event.special,s=0;for(;(i=e[s])!==undefined;s++){if(Q(i)){if(t=i[K.expando]){if(t.events){for(n in t.events){if(r[n]){x.event.remove(i,n)}else{x.removeEvent(i,n,t.handle)}}}i[K.expando]=undefined}if(i[J.expando]){i[J.expando]=undefined}}}}});x.fn.extend({detach:function(e){return Le(this,e,true)},remove:function(e){return Le(this,e)},text:function(e){return B(this,function(e){return e===undefined?x.text(this):this.empty().each(function(){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){this.textContent=e}})},null,e,arguments.length)},append:function(){return Ue(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Oe(this,e);t.appendChild(e)}})},prepend:function(){return Ue(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ue(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this)}})},after:function(){return Ue(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this.nextSibling)}})},empty:function(){var e,t=0;for(;(e=this[t])!=null;t++){if(e.nodeType===1){x.cleanData(ve(e,false));e.textContent=""}}return this},clone:function(e,t){e=e==null?false:e;t=t==null?e:t;return this.map(function(){return x.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},i=0,n=this.length;if(e===undefined&&t.nodeType===1){return t.innerHTML}if(typeof e==="string"&&!Ee.test(e)&&!ge[(pe.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;i<n;i++){t=this[i]||{};if(t.nodeType===1){x.cleanData(ve(t,false));t.innerHTML=e}}t=0}catch(e){}}if(t){this.empty().append(e)}},null,e,arguments.length)},replaceWith:function(){var e=[];return Ue(this,arguments,function(t){var i=this.parentNode;if(x.inArray(this,e)<0){x.cleanData(ve(this));if(i){i.replaceChild(t,this)}}},e)}});x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){x.fn[e]=function(e){var i,n=[],r=x(e),s=r.length-1,a=0;for(;a<=s;a++){i=a===s?this:this.clone(true);x(r[a])[t](i);o.apply(n,i.get())}return this.pushStack(n)}});var Re=new RegExp("^("+re+")(?!px)[a-z%]+$","i");var He=function(t){var i=t.ownerDocument.defaultView;if(!i||!i.opener){i=e}return i.getComputedStyle(t)};var ze=new RegExp(ae.join("|"),"i");(function(){function t(){if(!f){return}u.style.cssText="position:absolute;left:-11111px;width:60px;"+"margin-top:1px;padding:0;border:0";f.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;"+"margin:auto;border:1px;padding:1px;"+"width:60%;top:1%";xe.appendChild(u).appendChild(f);var t=e.getComputedStyle(f);r=t.top!=="1%";l=i(t.marginLeft)===12;f.style.right="60%";o=i(t.right)===36;s=i(t.width)===36;f.style.position="absolute";a=f.offsetWidth===36||"absolute";xe.removeChild(u);f=null}function i(e){return Math.round(parseFloat(e))}var r,s,a,o,l,u=n.createElement("div"),f=n.createElement("div");if(!f.style){return}f.style.backgroundClip="content-box";f.cloneNode(true).style.backgroundClip="";p.clearCloneStyle=f.style.backgroundClip==="content-box";x.extend(p,{boxSizingReliable:function(){t();return s},pixelBoxStyles:function(){t();return o},pixelPosition:function(){t();return r},reliableMarginLeft:function(){t();return l},scrollboxSize:function(){t();return a}})})();function Ye(e,t,i){var n,r,s,a,o=e.style;i=i||He(e);if(i){a=i.getPropertyValue(t)||i[t];if(a===""&&!x.contains(e.ownerDocument,e)){a=x.style(e,t)}if(!p.pixelBoxStyles()&&Re.test(a)&&ze.test(t)){n=o.width;r=o.minWidth;s=o.maxWidth;o.minWidth=o.maxWidth=o.width=a;a=i.width;o.width=n;o.minWidth=r;o.maxWidth=s}}return a!==undefined?a+"":a}function Ve(e,t){return{get:function(){if(e()){delete this.get;return}return(this.get=t).apply(this,arguments)}}}var Be=/^(none|table(?!-c[ea]).+)/,We=/^--/,qe={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Qe=n.createElement("div").style;function Xe(e){if(e in Qe){return e}var t=e[0].toUpperCase()+e.slice(1),i=Ge.length;while(i--){e=Ge[i]+t;if(e in Qe){return e}}}function Ke(e){var t=x.cssProps[e];if(!t){t=x.cssProps[e]=Xe(e)||e}return t}function Je(e,t,i){var n=se.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function et(e,t,i,n,r,s){var a=t==="width"?1:0,o=0,l=0;if(i===(n?"border":"content")){return 0}for(;a<4;a+=2){if(i==="margin"){l+=x.css(e,i+ae[a],true,r)}if(!n){l+=x.css(e,"padding"+ae[a],true,r);if(i!=="padding"){l+=x.css(e,"border"+ae[a]+"Width",true,r)}else{o+=x.css(e,"border"+ae[a]+"Width",true,r)}}else{if(i==="content"){l-=x.css(e,"padding"+ae[a],true,r)}if(i!=="margin"){l-=x.css(e,"border"+ae[a]+"Width",true,r)}}}if(!n&&s>=0){l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-l-o-.5))}return l}function tt(e,t,i){var n=He(e),r=Ye(e,t,n),s=x.css(e,"boxSizing",false,n)==="border-box",a=s;if(Re.test(r)){if(!i){return r}r="auto"}a=a&&(p.boxSizingReliable()||r===e.style[t]);if(r==="auto"||!parseFloat(r)&&x.css(e,"display",false,n)==="inline"){r=e["offset"+t[0].toUpperCase()+t.slice(1)];a=true}r=parseFloat(r)||0;return r+et(e,t,i||(s?"border":"content"),a,n,r)+"px"}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Ye(e,"opacity");return i===""?"1":i}}}},cssNumber:{animationIterationCount:true,columnCount:true,fillOpacity:true,flexGrow:true,flexShrink:true,fontWeight:true,lineHeight:true,opacity:true,order:true,orphans:true,widows:true,zIndex:true,zoom:true},cssProps:{},style:function(e,t,i,n){if(!e||e.nodeType===3||e.nodeType===8||!e.style){return}var r,s,a,o=G(t),l=We.test(t),u=e.style;if(!l){t=Ke(o)}a=x.cssHooks[t]||x.cssHooks[o];if(i!==undefined){s=typeof i;if(s==="string"&&(r=se.exec(i))&&r[1]){i=ue(e,t,r);s="number"}if(i==null||i!==i){return}if(s==="number"){i+=r&&r[3]||(x.cssNumber[o]?"":"px")}if(!p.clearCloneStyle&&i===""&&t.indexOf("background")===0){u[t]="inherit"}if(!a||!("set"in a)||(i=a.set(e,i,n))!==undefined){if(l){u.setProperty(t,i)}else{u[t]=i}}}else{if(a&&"get"in a&&(r=a.get(e,false,n))!==undefined){return r}return u[t]}},css:function(e,t,i,n){var r,s,a,o=G(t),l=We.test(t);if(!l){t=Ke(o)}a=x.cssHooks[t]||x.cssHooks[o];if(a&&"get"in a){r=a.get(e,true,i)}if(r===undefined){r=Ye(e,t,n)}if(r==="normal"&&t in Ze){r=Ze[t]}if(i===""||i){s=parseFloat(r);return i===true||isFinite(s)?s||0:r}return r}});x.each(["height","width"],function(e,t){x.cssHooks[t]={get:function(e,i,n){if(i){return Be.test(x.css(e,"display"))&&(!e.getClientRects().length||!e.getBoundingClientRect().width)?le(e,qe,function(){return tt(e,t,n)}):tt(e,t,n)}},set:function(e,i,n){var r,s=He(e),a=x.css(e,"boxSizing",false,s)==="border-box",o=n&&et(e,t,n,a,s);if(a&&p.scrollboxSize()===s.position){o-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-et(e,t,"border",false,s)-.5)}if(o&&(r=se.exec(i))&&(r[3]||"px")!=="px"){e.style[t]=i;i=x.css(e,t)}return Je(e,i,o)}}});x.cssHooks.marginLeft=Ve(p.reliableMarginLeft,function(e,t){if(t){return(parseFloat(Ye(e,"marginLeft"))||e.getBoundingClientRect().left-le(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}});x.each({margin:"",padding:"",border:"Width"},function(e,t){x.cssHooks[e+t]={expand:function(i){var n=0,r={},s=typeof i==="string"?i.split(" "):[i];for(;n<4;n++){r[e+ae[n]+t]=s[n]||s[n-2]||s[0]}return r}};if(e!=="margin"){x.cssHooks[e+t].set=Je}});x.fn.extend({css:function(e,t){return B(this,function(e,t,i){var n,r,s={},a=0;if(Array.isArray(t)){n=He(e);r=t.length;for(;a<r;a++){s[t[a]]=x.css(e,t[a],false,n)}return s}return i!==undefined?x.style(e,t,i):x.css(e,t)},e,t,arguments.length>1)}});function it(e,t,i,n,r){return new it.prototype.init(e,t,i,n,r)}x.Tween=it;it.prototype={constructor:it,init:function(e,t,i,n,r,s){this.elem=e;this.prop=i;this.easing=r||x.easing._default;this.options=t;this.start=this.now=this.cur();this.end=n;this.unit=s||(x.cssNumber[i]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,i=it.propHooks[this.prop];if(this.options.duration){this.pos=t=x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration)}else{this.pos=t=e}this.now=(this.end-this.start)*t+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this)}if(i&&i.set){i.set(this)}else{it.propHooks._default.set(this)}return this}};it.prototype.init.prototype=it.prototype;it.propHooks={_default:{get:function(e){var t;if(e.elem.nodeType!==1||e.elem[e.prop]!=null&&e.elem.style[e.prop]==null){return e.elem[e.prop]}t=x.css(e.elem,e.prop,"");return!t||t==="auto"?0:t},set:function(e){if(x.fx.step[e.prop]){x.fx.step[e.prop](e)}else if(e.elem.nodeType===1&&(e.elem.style[x.cssProps[e.prop]]!=null||x.cssHooks[e.prop])){x.style(e.elem,e.prop,e.now+e.unit)}else{e.elem[e.prop]=e.now}}}};it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){if(e.elem.nodeType&&e.elem.parentNode){e.elem[e.prop]=e.now}}};x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"};x.fx=it.prototype.init;x.fx.step={};var nt,rt,st=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function ot(){if(rt){if(n.hidden===false&&e.requestAnimationFrame){e.requestAnimationFrame(ot)}else{e.setTimeout(ot,x.fx.interval)}x.fx.tick()}}function lt(){e.setTimeout(function(){nt=undefined});return nt=Date.now()}function ut(e,t){var i,n=0,r={height:e};t=t?1:0;for(;n<4;n+=2-t){i=ae[n];r["margin"+i]=r["padding"+i]=e}if(t){r.opacity=r.width=e}return r}function ft(e,t,i){var n,r=(ht.tweeners[t]||[]).concat(ht.tweeners["*"]),s=0,a=r.length;for(;s<a;s++){if(n=r[s].call(i,t,e)){return n}}}function ct(e,t,i){var n,r,s,a,o,l,u,f,c="width"in t||"height"in t,d=this,h={},p=e.style,m=e.nodeType&&oe(e),g=K.get(e,"fxshow");if(!i.queue){a=x._queueHooks(e,"fx");if(a.unqueued==null){a.unqueued=0;o=a.empty.fire;a.empty.fire=function(){if(!a.unqueued){o()}}}a.unqueued++;d.always(function(){d.always(function(){a.unqueued--;if(!x.queue(e,"fx").length){a.empty.fire()}})})}for(n in t){r=t[n];if(st.test(r)){delete t[n];s=s||r==="toggle";if(r===(m?"hide":"show")){if(r==="show"&&g&&g[n]!==undefined){m=true}else{continue}}h[n]=g&&g[n]||x.style(e,n)}}l=!x.isEmptyObject(t);if(!l&&x.isEmptyObject(h)){return}if(c&&e.nodeType===1){i.overflow=[p.overflow,p.overflowX,p.overflowY];u=g&&g.display;if(u==null){u=K.get(e,"display")}f=x.css(e,"display");if(f==="none"){if(u){f=u}else{de([e],true);u=e.style.display||u;f=x.css(e,"display");de([e])}}if(f==="inline"||f==="inline-block"&&u!=null){if(x.css(e,"float")==="none"){if(!l){d.done(function(){p.display=u});if(u==null){f=p.display;u=f==="none"?"":f}}p.display="inline-block"}}}if(i.overflow){p.overflow="hidden";d.always(function(){p.overflow=i.overflow[0];p.overflowX=i.overflow[1];p.overflowY=i.overflow[2]})}l=false;for(n in h){if(!l){if(g){if("hidden"in g){m=g.hidden}}else{g=K.access(e,"fxshow",{display:u})}if(s){g.hidden=!m}if(m){de([e],true)}d.done(function(){if(!m){de([e])}K.remove(e,"fxshow");for(n in h){x.style(e,n,h[n])}})}l=ft(m?g[n]:0,n,d);if(!(n in g)){g[n]=l.start;if(m){l.end=l.start;l.start=0}}}}function dt(e,t){var i,n,r,s,a;for(i in e){n=G(i);r=t[n];s=e[i];if(Array.isArray(s)){r=s[1];s=e[i]=s[0]}if(i!==n){e[n]=s;delete e[i]}a=x.cssHooks[n];if(a&&"expand"in a){s=a.expand(s);delete e[n];for(i in s){if(!(i in e)){e[i]=s[i];t[i]=r}}}else{t[n]=r}}}function ht(e,t,i){var n,r,s=0,a=ht.prefilters.length,o=x.Deferred().always(function(){delete l.elem}),l=function(){if(r){return false}var t=nt||lt(),i=Math.max(0,u.startTime+u.duration-t),n=i/u.duration||0,s=1-n,a=0,l=u.tweens.length;for(;a<l;a++){u.tweens[a].run(s)}o.notifyWith(e,[u,s,i]);if(s<1&&l){return i}if(!l){o.notifyWith(e,[u,1,0])}o.resolveWith(e,[u]);return false},u=o.promise({elem:e,props:x.extend({},t),opts:x.extend(true,{specialEasing:{},easing:x.easing._default},i),originalProperties:t,originalOptions:i,startTime:nt||lt(),duration:i.duration,tweens:[],createTween:function(t,i){var n=x.Tween(e,u.opts,t,i,u.opts.specialEasing[t]||u.opts.easing);u.tweens.push(n);return n},stop:function(t){var i=0,n=t?u.tweens.length:0;if(r){return this}r=true;for(;i<n;i++){u.tweens[i].run(1)}if(t){o.notifyWith(e,[u,1,0]);o.resolveWith(e,[u,t])}else{o.rejectWith(e,[u,t])}return this}}),f=u.props;dt(f,u.opts.specialEasing);for(;s<a;s++){n=ht.prefilters[s].call(u,e,f,u.opts);if(n){if(m(n.stop)){x._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)}return n}}x.map(f,ft,u);if(m(u.opts.start)){u.opts.start.call(e,u)}u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always);x.fx.timer(x.extend(l,{elem:e,anim:u,queue:u.opts.queue}));return u}x.Animation=x.extend(ht,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);ue(i.elem,e,se.exec(t),i);return i}]},tweener:function(e,t){if(m(e)){t=e;e=["*"]}else{e=e.match(j)}var i,n=0,r=e.length;for(;n<r;n++){i=e[n];ht.tweeners[i]=ht.tweeners[i]||[];ht.tweeners[i].unshift(t)}},prefilters:[ct],prefilter:function(e,t){if(t){ht.prefilters.unshift(e)}else{ht.prefilters.push(e)}}});x.speed=function(e,t,i){var n=e&&typeof e==="object"?x.extend({},e):{complete:i||!i&&t||m(e)&&e,duration:e,easing:i&&t||t&&!m(t)&&t};if(x.fx.off){n.duration=0}else{if(typeof n.duration!=="number"){if(n.duration in x.fx.speeds){n.duration=x.fx.speeds[n.duration]}else{n.duration=x.fx.speeds._default}}}if(n.queue==null||n.queue===true){n.queue="fx"}n.old=n.complete;n.complete=function(){if(m(n.old)){n.old.call(this)}if(n.queue){x.dequeue(this,n.queue)}};return n};x.fn.extend({fadeTo:function(e,t,i,n){return this.filter(oe).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(e,t,i,n){var r=x.isEmptyObject(e),s=x.speed(t,i,n),a=function(){var t=ht(this,x.extend({},e),s);if(r||K.get(this,"finish")){t.stop(true)}};a.finish=a;return r||s.queue===false?this.each(a):this.queue(s.queue,a)},stop:function(e,t,i){var n=function(e){var t=e.stop;delete e.stop;t(i)};if(typeof e!=="string"){i=t;t=e;e=undefined}if(t&&e!==false){this.queue(e||"fx",[])}return this.each(function(){var t=true,r=e!=null&&e+"queueHooks",s=x.timers,a=K.get(this);if(r){if(a[r]&&a[r].stop){n(a[r])}}else{for(r in a){if(a[r]&&a[r].stop&&at.test(r)){n(a[r])}}}for(r=s.length;r--;){if(s[r].elem===this&&(e==null||s[r].queue===e)){s[r].anim.stop(i);t=false;s.splice(r,1)}}if(t||!i){x.dequeue(this,e)}})},finish:function(e){if(e!==false){e=e||"fx"}return this.each(function(){var t,i=K.get(this),n=i[e+"queue"],r=i[e+"queueHooks"],s=x.timers,a=n?n.length:0;i.finish=true;x.queue(this,e,[]);if(r&&r.stop){r.stop.call(this,true)}for(t=s.length;t--;){if(s[t].elem===this&&s[t].queue===e){s[t].anim.stop(true);s.splice(t,1)}}for(t=0;t<a;t++){if(n[t]&&n[t].finish){n[t].finish.call(this)}}delete i.finish})}});x.each(["toggle","show","hide"],function(e,t){var i=x.fn[t];x.fn[t]=function(e,n,r){return e==null||typeof e==="boolean"?i.apply(this,arguments):this.animate(ut(t,true),e,n,r)}});x.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){x.fn[e]=function(e,i,n){return this.animate(t,e,i,n)}});x.timers=[];x.fx.tick=function(){var e,t=0,i=x.timers;nt=Date.now();for(;t<i.length;t++){e=i[t];if(!e()&&i[t]===e){i.splice(t--,1)}}if(!i.length){x.fx.stop()}nt=undefined};x.fx.timer=function(e){x.timers.push(e);x.fx.start()};x.fx.interval=13;x.fx.start=function(){if(rt){return}rt=true;ot()};x.fx.stop=function(){rt=null};x.fx.speeds={slow:600,fast:200,_default:400};x.fn.delay=function(t,i){t=x.fx?x.fx.speeds[t]||t:t;i=i||"fx";return this.queue(i,function(i,n){var r=e.setTimeout(i,t);n.stop=function(){e.clearTimeout(r)}})};(function(){var e=n.createElement("input"),t=n.createElement("select"),i=t.appendChild(n.createElement("option"));e.type="checkbox";p.checkOn=e.value!=="";p.optSelected=i.selected;e=n.createElement("input");e.value="t";e.type="radio";p.radioValue=e.value==="t"})();var pt,mt=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return B(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})}});x.extend({attr:function(e,t,i){var n,r,s=e.nodeType;if(s===3||s===8||s===2){return}if(typeof e.getAttribute==="undefined"){return x.prop(e,t,i)}if(s!==1||!x.isXMLDoc(e)){r=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?pt:undefined)}if(i!==undefined){if(i===null){x.removeAttr(e,t);return}if(r&&"set"in r&&(n=r.set(e,i,t))!==undefined){return n}e.setAttribute(t,i+"");return i}if(r&&"get"in r&&(n=r.get(e,t))!==null){return n}n=x.find.attr(e,t);return n==null?undefined:n},attrHooks:{type:{set:function(e,t){if(!p.radioValue&&t==="radio"&&$(e,"input")){var i=e.value;e.setAttribute("type",t);if(i){e.value=i}return t}}}},removeAttr:function(e,t){var i,n=0,r=t&&t.match(j);if(r&&e.nodeType===1){while(i=r[n++]){e.removeAttribute(i)}}}});pt={set:function(e,t,i){if(t===false){x.removeAttr(e,i)}else{e.setAttribute(i,i)}return i}};x.each(x.expr.match.bool.source.match(/\w+/g),function(e,t){var i=mt[t]||x.find.attr;mt[t]=function(e,t,n){var r,s,a=t.toLowerCase();if(!n){s=mt[a];mt[a]=r;r=i(e,t,n)!=null?a:null;mt[a]=s}return r}});var gt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;x.fn.extend({prop:function(e,t){return B(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[x.propFix[e]||e]})}});x.extend({prop:function(e,t,i){var n,r,s=e.nodeType;if(s===3||s===8||s===2){return}if(s!==1||!x.isXMLDoc(e)){t=x.propFix[t]||t;r=x.propHooks[t]}if(i!==undefined){if(r&&"set"in r&&(n=r.set(e,i,t))!==undefined){return n}return e[t]=i}if(r&&"get"in r&&(n=r.get(e,t))!==null){return n}return e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");if(t){return parseInt(t,10)}if(gt.test(e.nodeName)||vt.test(e.nodeName)&&e.href){return 0}return-1}}},propFix:{for:"htmlFor",class:"className"}});if(!p.optSelected){x.propHooks.selected={get:function(e){var t=e.parentNode;if(t&&t.parentNode){t.parentNode.selectedIndex}return null},set:function(e){var t=e.parentNode;if(t){t.selectedIndex;if(t.parentNode){t.parentNode.selectedIndex}}}}}x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this});function yt(e){var t=e.match(j)||[];return t.join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function wt(e){if(Array.isArray(e)){return e}if(typeof e==="string"){return e.match(j)||[]}return[]}x.fn.extend({addClass:function(e){var t,i,n,r,s,a,o,l=0;if(m(e)){return this.each(function(t){x(this).addClass(e.call(this,t,bt(this)))})}t=wt(e);if(t.length){while(i=this[l++]){r=bt(i);n=i.nodeType===1&&" "+yt(r)+" ";if(n){a=0;while(s=t[a++]){if(n.indexOf(" "+s+" ")<0){n+=s+" "}}o=yt(n);if(r!==o){i.setAttribute("class",o)}}}}return this},removeClass:function(e){var t,i,n,r,s,a,o,l=0;if(m(e)){return this.each(function(t){x(this).removeClass(e.call(this,t,bt(this)))})}if(!arguments.length){return this.attr("class","")}t=wt(e);if(t.length){while(i=this[l++]){r=bt(i);n=i.nodeType===1&&" "+yt(r)+" ";if(n){a=0;while(s=t[a++]){while(n.indexOf(" "+s+" ")>-1){n=n.replace(" "+s+" "," ")}}o=yt(n);if(r!==o){i.setAttribute("class",o)}}}}return this},toggleClass:function(e,t){var i=typeof e,n=i==="string"||Array.isArray(e);if(typeof t==="boolean"&&n){return t?this.addClass(e):this.removeClass(e)}if(m(e)){return this.each(function(i){x(this).toggleClass(e.call(this,i,bt(this),t),t)})}return this.each(function(){var t,r,s,a;if(n){r=0;s=x(this);a=wt(e);while(t=a[r++]){if(s.hasClass(t)){s.removeClass(t)}else{s.addClass(t)}}}else if(e===undefined||i==="boolean"){t=bt(this);if(t){K.set(this,"__className__",t)}if(this.setAttribute){this.setAttribute("class",t||e===false?"":K.get(this,"__className__")||"")}}})},hasClass:function(e){var t,i,n=0;t=" "+e+" ";while(i=this[n++]){if(i.nodeType===1&&(" "+yt(bt(i))+" ").indexOf(t)>-1){return true}}return false}});var xt=/\r/g;x.fn.extend({val:function(e){var t,i,n,r=this[0];if(!arguments.length){if(r){t=x.valHooks[r.type]||x.valHooks[r.nodeName.toLowerCase()];if(t&&"get"in t&&(i=t.get(r,"value"))!==undefined){return i}i=r.value;if(typeof i==="string"){return i.replace(xt,"")}return i==null?"":i}return}n=m(e);return this.each(function(i){var r;if(this.nodeType!==1){return}if(n){r=e.call(this,i,x(this).val())}else{r=e}if(r==null){r=""}else if(typeof r==="number"){r+=""}else if(Array.isArray(r)){r=x.map(r,function(e){return e==null?"":e+""})}t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()];if(!t||!("set"in t)||t.set(this,r,"value")===undefined){this.value=r}})}});x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return t!=null?t:yt(x.text(e))}},select:{get:function(e){var t,i,n,r=e.options,s=e.selectedIndex,a=e.type==="select-one",o=a?null:[],l=a?s+1:r.length;if(s<0){n=l}else{n=a?s:0}for(;n<l;n++){i=r[n];if((i.selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!$(i.parentNode,"optgroup"))){t=x(i).val();if(a){return t}o.push(t)}}return o},set:function(e,t){var i,n,r=e.options,s=x.makeArray(t),a=r.length;while(a--){n=r[a];if(n.selected=x.inArray(x.valHooks.option.get(n),s)>-1){i=true}}if(!i){e.selectedIndex=-1}return s}}}});x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t)){return e.checked=x.inArray(x(e).val(),t)>-1}}};if(!p.checkOn){x.valHooks[this].get=function(e){return e.getAttribute("value")===null?"on":e.value}}});p.focusin="onfocusin"in e;var Ct=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(t,i,r,s){var a,o,l,u,f,d,h,p,v=[r||n],y=c.call(t,"type")?t.type:t,b=c.call(t,"namespace")?t.namespace.split("."):[];o=p=l=r=r||n;if(r.nodeType===3||r.nodeType===8){return}if(Ct.test(y+x.event.triggered)){return}if(y.indexOf(".")>-1){b=y.split(".");y=b.shift();b.sort()}f=y.indexOf(":")<0&&"on"+y;t=t[x.expando]?t:new x.Event(y,typeof t==="object"&&t);t.isTrigger=s?2:3;t.namespace=b.join(".");t.rnamespace=t.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;t.result=undefined;if(!t.target){t.target=r}i=i==null?[t]:x.makeArray(i,[t]);h=x.event.special[y]||{};if(!s&&h.trigger&&h.trigger.apply(r,i)===false){return}if(!s&&!h.noBubble&&!g(r)){u=h.delegateType||y;if(!Ct.test(u+y)){o=o.parentNode}for(;o;o=o.parentNode){v.push(o);l=o}if(l===(r.ownerDocument||n)){v.push(l.defaultView||l.parentWindow||e)}}a=0;while((o=v[a++])&&!t.isPropagationStopped()){p=o;t.type=a>1?u:h.bindType||y;d=(K.get(o,"events")||{})[t.type]&&K.get(o,"handle");if(d){d.apply(o,i)}d=f&&o[f];if(d&&d.apply&&Q(o)){t.result=d.apply(o,i);if(t.result===false){t.preventDefault()}}}t.type=y;if(!s&&!t.isDefaultPrevented()){if((!h._default||h._default.apply(v.pop(),i)===false)&&Q(r)){if(f&&m(r[y])&&!g(r)){l=r[f];if(l){r[f]=null}x.event.triggered=y;if(t.isPropagationStopped()){p.addEventListener(y,Tt)}r[y]();if(t.isPropagationStopped()){p.removeEventListener(y,Tt)}x.event.triggered=undefined;if(l){r[f]=l}}}}return t.result},simulate:function(e,t,i){var n=x.extend(new x.Event,i,{type:e,isSimulated:true});x.event.trigger(n,null,t)}});x.fn.extend({trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i){return x.event.trigger(e,t,i,true)}}});if(!p.focusin){x.each({focus:"focusin",blur:"focusout"},function(e,t){var i=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var n=this.ownerDocument||this,r=K.access(n,t);if(!r){n.addEventListener(e,i,true)}K.access(n,t,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=K.access(n,t)-1;if(!r){n.removeEventListener(e,i,true);K.remove(n,t)}else{K.access(n,t,r)}}}})}var _t=e.location;var kt=Date.now();var Dt=/\?/;x.parseXML=function(t){var i;if(!t||typeof t!=="string"){return null}try{i=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){i=undefined}if(!i||i.getElementsByTagName("parsererror").length){x.error("Invalid XML: "+t)}return i};var St=/\[\]$/,$t=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,Et=/^(?:input|select|textarea|keygen)/i;function Mt(e,t,i,n){var r;if(Array.isArray(t)){x.each(t,function(t,r){if(i||St.test(e)){n(e,r)}else{Mt(e+"["+(typeof r==="object"&&r!=null?t:"")+"]",r,i,n)}})}else if(!i&&b(t)==="object"){for(r in t){Mt(e+"["+r+"]",t[r],i,n)}}else{n(e,t)}}x.param=function(e,t){var i,n=[],r=function(e,t){var i=m(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(i==null?"":i)};if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e)){x.each(e,function(){r(this.name,this.value)})}else{for(i in e){Mt(i,e[i],t,r)}}return n.join("&")};x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&Et.test(this.nodeName)&&!At.test(e)&&(this.checked||!he.test(e))}).map(function(e,t){var i=x(this).val();if(i==null){return null}if(Array.isArray(i)){return x.map(i,function(e){return{name:t.name,value:e.replace($t,"\r\n")}})}return{name:t.name,value:i.replace($t,"\r\n")}}).get()}});var Pt=/%20/g,Ot=/#.*$/,It=/([?&])_=[^&]*/,Ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,Nt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,jt=/^(?:GET|HEAD)$/,Ut=/^\/\//,Lt={},Rt={},Ht="*/".concat("*"),zt=n.createElement("a");zt.href=_t.href;function Yt(e){return function(t,i){if(typeof t!=="string"){i=t;t="*"}var n,r=0,s=t.toLowerCase().match(j)||[];if(m(i)){while(n=s[r++]){if(n[0]==="+"){n=n.slice(1)||"*";(e[n]=e[n]||[]).unshift(i)}else{(e[n]=e[n]||[]).push(i)}}}}}function Vt(e,t,i,n){var r={},s=e===Rt;function a(o){var l;r[o]=true;x.each(e[o]||[],function(e,o){var u=o(t,i,n);if(typeof u==="string"&&!s&&!r[u]){t.dataTypes.unshift(u);a(u);return false}else if(s){return!(l=u)}});return l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Bt(e,t){var i,n,r=x.ajaxSettings.flatOptions||{};for(i in t){if(t[i]!==undefined){(r[i]?e:n||(n={}))[i]=t[i]}}if(n){x.extend(true,e,n)}return e}function Wt(e,t,i){var n,r,s,a,o=e.contents,l=e.dataTypes;while(l[0]==="*"){l.shift();if(n===undefined){n=e.mimeType||t.getResponseHeader("Content-Type")}}if(n){for(r in o){if(o[r]&&o[r].test(n)){l.unshift(r);break}}}if(l[0]in i){s=l[0]}else{for(r in i){if(!l[0]||e.converters[r+" "+l[0]]){s=r;break}if(!a){a=r}}s=s||a}if(s){if(s!==l[0]){l.unshift(s)}return i[s]}}function qt(e,t,i,n){var r,s,a,o,l,u={},f=e.dataTypes.slice();if(f[1]){for(a in e.converters){u[a.toLowerCase()]=e.converters[a]}}s=f.shift();while(s){if(e.responseFields[s]){i[e.responseFields[s]]=t}if(!l&&n&&e.dataFilter){t=e.dataFilter(t,e.dataType)}l=s;s=f.shift();if(s){if(s==="*"){s=l}else if(l!=="*"&&l!==s){a=u[l+" "+s]||u["* "+s];if(!a){for(r in u){o=r.split(" ");if(o[1]===s){a=u[l+" "+o[0]]||u["* "+o[0]];if(a){if(a===true){a=u[r]}else if(u[r]!==true){s=o[0];f.unshift(o[1])}break}}}}if(a!==true){if(a&&e.throws){t=a(t)}else{try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+s}}}}}}}return{state:"success",data:t}}x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_t.href,type:"GET",isLocal:Nt.test(_t.protocol),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":true,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:true,context:true}},ajaxSetup:function(e,t){return t?Bt(Bt(e,x.ajaxSettings),t):Bt(x.ajaxSettings,e)},ajaxPrefilter:Yt(Lt),ajaxTransport:Yt(Rt),ajax:function(t,i){if(typeof t==="object"){i=t;t=undefined}i=i||{};var r,s,a,o,l,u,f,c,d,h,p=x.ajaxSetup({},i),m=p.context||p,g=p.context&&(m.nodeType||m.jquery)?x(m):x.event,v=x.Deferred(),y=x.Callbacks("once memory"),b=p.statusCode||{},w={},C={},T="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(f){if(!o){o={};while(t=Ft.exec(a)){o[t[1].toLowerCase()]=t[2]}}t=o[e.toLowerCase()]}return t==null?null:t},getAllResponseHeaders:function(){return f?a:null},setRequestHeader:function(e,t){if(f==null){e=C[e.toLowerCase()]=C[e.toLowerCase()]||e;w[e]=t}return this},overrideMimeType:function(e){if(f==null){p.mimeType=e}return this},statusCode:function(e){var t;if(e){if(f){_.always(e[_.status])}else{for(t in e){b[t]=[b[t],e[t]]}}}return this},abort:function(e){var t=e||T;if(r){r.abort(t)}k(0,t);return this}};v.promise(_);p.url=((t||p.url||_t.href)+"").replace(Ut,_t.protocol+"//");p.type=i.method||i.type||p.method||p.type;p.dataTypes=(p.dataType||"*").toLowerCase().match(j)||[""];if(p.crossDomain==null){u=n.createElement("a");try{u.href=p.url;u.href=u.href;p.crossDomain=zt.protocol+"//"+zt.host!==u.protocol+"//"+u.host}catch(e){p.crossDomain=true}}if(p.data&&p.processData&&typeof p.data!=="string"){p.data=x.param(p.data,p.traditional)}Vt(Lt,p,i,_);if(f){return _}c=x.event&&p.global;if(c&&x.active++===0){x.event.trigger("ajaxStart")}p.type=p.type.toUpperCase();p.hasContent=!jt.test(p.type);s=p.url.replace(Ot,"");if(!p.hasContent){h=p.url.slice(s.length);if(p.data&&(p.processData||typeof p.data==="string")){s+=(Dt.test(s)?"&":"?")+p.data;delete p.data}if(p.cache===false){s=s.replace(It,"$1");h=(Dt.test(s)?"&":"?")+"_="+kt+++h}p.url=s+h}else if(p.data&&p.processData&&(p.contentType||"").indexOf("application/x-www-form-urlencoded")===0){p.data=p.data.replace(Pt,"+")}if(p.ifModified){if(x.lastModified[s]){_.setRequestHeader("If-Modified-Since",x.lastModified[s])}if(x.etag[s]){_.setRequestHeader("If-None-Match",x.etag[s])}}if(p.data&&p.hasContent&&p.contentType!==false||i.contentType){_.setRequestHeader("Content-Type",p.contentType)}_.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+(p.dataTypes[0]!=="*"?", "+Ht+"; q=0.01":""):p.accepts["*"]);for(d in p.headers){_.setRequestHeader(d,p.headers[d])}if(p.beforeSend&&(p.beforeSend.call(m,_,p)===false||f)){return _.abort()}T="abort";y.add(p.complete);_.done(p.success);_.fail(p.error);r=Vt(Rt,p,i,_);if(!r){k(-1,"No Transport")}else{_.readyState=1;if(c){g.trigger("ajaxSend",[_,p])}if(f){return _}if(p.async&&p.timeout>0){l=e.setTimeout(function(){_.abort("timeout")},p.timeout)}try{f=false;r.send(w,k)}catch(e){if(f){throw e}k(-1,e)}}function k(t,i,n,o){var u,d,h,w,C,T=i;if(f){return}f=true;if(l){e.clearTimeout(l)}r=undefined;a=o||"";_.readyState=t>0?4:0;u=t>=200&&t<300||t===304;if(n){w=Wt(p,_,n)}w=qt(p,w,_,u);if(u){if(p.ifModified){C=_.getResponseHeader("Last-Modified");if(C){x.lastModified[s]=C}C=_.getResponseHeader("etag");if(C){x.etag[s]=C}}if(t===204||p.type==="HEAD"){T="nocontent"}else if(t===304){T="notmodified"}else{T=w.state;d=w.data;h=w.error;u=!h}}else{h=T;if(t||!T){T="error";if(t<0){t=0}}}_.status=t;_.statusText=(i||T)+"";if(u){v.resolveWith(m,[d,T,_])}else{v.rejectWith(m,[_,T,h])}_.statusCode(b);b=undefined;if(c){g.trigger(u?"ajaxSuccess":"ajaxError",[_,p,u?d:h])}y.fireWith(m,[_,T]);if(c){g.trigger("ajaxComplete",[_,p]);if(!--x.active){x.event.trigger("ajaxStop")}}}return _},getJSON:function(e,t,i){return x.get(e,t,i,"json")},getScript:function(e,t){return x.get(e,undefined,t,"script")}});x.each(["get","post"],function(e,t){x[t]=function(e,i,n,r){if(m(i)){r=r||n;n=i;i=undefined}return x.ajax(x.extend({url:e,type:t,dataType:r,data:i,success:n},x.isPlainObject(e)&&e))}});x._evalUrl=function(e){return x.ajax({url:e,type:"GET",dataType:"script",cache:true,async:false,global:false,throws:true})};x.fn.extend({wrapAll:function(e){var t;if(this[0]){if(m(e)){e=e.call(this[0])}t=x(e,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){t.insertBefore(this[0])}t.map(function(){var e=this;while(e.firstElementChild){e=e.firstElementChild}return e}).append(this)}return this},wrapInner:function(e){if(m(e)){return this.each(function(t){x(this).wrapInner(e.call(this,t))})}return this.each(function(){var t=x(this),i=t.contents();if(i.length){i.wrapAll(e)}else{t.append(e)}})},wrap:function(e){var t=m(e);return this.each(function(i){x(this).wrapAll(t?e.call(this,i):e)})},unwrap:function(e){this.parent(e).not("body").each(function(){x(this).replaceWith(this.childNodes)});return this}});x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)};x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)};x.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Zt={0:200,1223:204},Gt=x.ajaxSettings.xhr();p.cors=!!Gt&&"withCredentials"in Gt;p.ajax=Gt=!!Gt;x.ajaxTransport(function(t){var i,n;if(p.cors||Gt&&!t.crossDomain){return{send:function(r,s){var a,o=t.xhr();o.open(t.type,t.url,t.async,t.username,t.password);if(t.xhrFields){for(a in t.xhrFields){o[a]=t.xhrFields[a]}}if(t.mimeType&&o.overrideMimeType){o.overrideMimeType(t.mimeType)}if(!t.crossDomain&&!r["X-Requested-With"]){r["X-Requested-With"]="XMLHttpRequest"}for(a in r){o.setRequestHeader(a,r[a])}i=function(e){return function(){if(i){i=n=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null;if(e==="abort"){o.abort()}else if(e==="error"){if(typeof o.status!=="number"){s(0,"error")}else{s(o.status,o.statusText)}}else{s(Zt[o.status]||o.status,o.statusText,(o.responseType||"text")!=="text"||typeof o.responseText!=="string"?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders())}}}};o.onload=i();n=o.onerror=o.ontimeout=i("error");if(o.onabort!==undefined){o.onabort=n}else{o.onreadystatechange=function(){if(o.readyState===4){e.setTimeout(function(){if(i){n()}})}}}i=i("abort");try{o.send(t.hasContent&&t.data||null)}catch(e){if(i){throw e}}},abort:function(){if(i){i()}}}}});x.ajaxPrefilter(function(e){if(e.crossDomain){e.contents.script=false}});x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, "+"application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){x.globalEval(e);return e}}});x.ajaxPrefilter("script",function(e){if(e.cache===undefined){e.cache=false}if(e.crossDomain){e.type="GET"}});x.ajaxTransport("script",function(e){if(e.crossDomain){var t,i;return{send:function(r,s){t=x("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",i=function(e){t.remove();i=null;if(e){s(e.type==="error"?404:200,e.type)}});n.head.appendChild(t[0])},abort:function(){if(i){i()}}}}});var Qt=[],Xt=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Qt.pop()||x.expando+"_"+kt++;this[e]=true;return e}});x.ajaxPrefilter("json jsonp",function(t,i,n){var r,s,a,o=t.jsonp!==false&&(Xt.test(t.url)?"url":typeof t.data==="string"&&(t.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&Xt.test(t.data)&&"data");if(o||t.dataTypes[0]==="jsonp"){r=t.jsonpCallback=m(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback;if(o){t[o]=t[o].replace(Xt,"$1"+r)}else if(t.jsonp!==false){t.url+=(Dt.test(t.url)?"&":"?")+t.jsonp+"="+r}t.converters["script json"]=function(){if(!a){x.error(r+" was not called")}return a[0]};t.dataTypes[0]="json";s=e[r];e[r]=function(){a=arguments};n.always(function(){if(s===undefined){x(e).removeProp(r)}else{e[r]=s}if(t[r]){t.jsonpCallback=i.jsonpCallback;Qt.push(r)}if(a&&m(s)){s(a[0])}a=s=undefined});return"script"}});p.createHTMLDocument=function(){var e=n.implementation.createHTMLDocument("").body;e.innerHTML="<form></form><form></form>";return e.childNodes.length===2}();x.parseHTML=function(e,t,i){if(typeof e!=="string"){return[]}if(typeof t==="boolean"){i=t;t=false}var r,s,a;if(!t){if(p.createHTMLDocument){t=n.implementation.createHTMLDocument("");r=t.createElement("base");r.href=n.location.href;t.head.appendChild(r)}else{t=n}}s=A.exec(e);a=!i&&[];if(s){return[t.createElement(s[1])]}s=we([e],t,a);if(a&&a.length){x(a).remove()}return x.merge([],s.childNodes)};x.fn.load=function(e,t,i){var n,r,s,a=this,o=e.indexOf(" ");if(o>-1){n=yt(e.slice(o));e=e.slice(0,o)}if(m(t)){i=t;t=undefined}else if(t&&typeof t==="object"){r="POST"}if(a.length>0){x.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){s=arguments;a.html(n?x("<div>").append(x.parseHTML(e)).find(n):e)}).always(i&&function(e,t){a.each(function(){i.apply(this,s||[e.responseText,t,e])})})}return this};x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){x.fn[t]=function(e){return this.on(t,e)}});x.expr.pseudos.animated=function(e){return x.grep(x.timers,function(t){return e===t.elem}).length};x.offset={setOffset:function(e,t,i){var n,r,s,a,o,l,u,f=x.css(e,"position"),c=x(e),d={};if(f==="static"){e.style.position="relative"}o=c.offset();s=x.css(e,"top");l=x.css(e,"left");u=(f==="absolute"||f==="fixed")&&(s+l).indexOf("auto")>-1;if(u){n=c.position();a=n.top;r=n.left}else{a=parseFloat(s)||0;r=parseFloat(l)||0}if(m(t)){t=t.call(e,i,x.extend({},o))}if(t.top!=null){d.top=t.top-o.top+a}if(t.left!=null){d.left=t.left-o.left+r}if("using"in t){t.using.call(e,d)}else{c.css(d)}}};x.fn.extend({offset:function(e){if(arguments.length){return e===undefined?this:this.each(function(t){x.offset.setOffset(this,e,t)})}var t,i,n=this[0];if(!n){return}if(!n.getClientRects().length){return{top:0,left:0}}t=n.getBoundingClientRect();i=n.ownerDocument.defaultView;return{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}},position:function(){if(!this[0]){return}var e,t,i,n=this[0],r={top:0,left:0};if(x.css(n,"position")==="fixed"){t=n.getBoundingClientRect()}else{t=this.offset();i=n.ownerDocument;e=n.offsetParent||i.documentElement;while(e&&(e===i.body||e===i.documentElement)&&x.css(e,"position")==="static"){e=e.parentNode}if(e&&e!==n&&e.nodeType===1){r=x(e).offset();r.top+=x.css(e,"borderTopWidth",true);r.left+=x.css(e,"borderLeftWidth",true)}}return{top:t.top-r.top-x.css(n,"marginTop",true),left:t.left-r.left-x.css(n,"marginLeft",true)}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&x.css(e,"position")==="static"){e=e.offsetParent}return e||xe})}});x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var i="pageYOffset"===t;x.fn[e]=function(n){return B(this,function(e,n,r){var s;if(g(e)){s=e}else if(e.nodeType===9){s=e.defaultView}if(r===undefined){return s?s[t]:e[n]}if(s){s.scrollTo(!i?r:s.pageXOffset,i?r:s.pageYOffset)}else{e[n]=r}},e,n,arguments.length)}});x.each(["top","left"],function(e,t){x.cssHooks[t]=Ve(p.pixelPosition,function(e,i){if(i){i=Ye(e,t);return Re.test(i)?x(e).position()[t]+"px":i}})});x.each({Height:"height",Width:"width"},function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},function(i,n){x.fn[n]=function(r,s){var a=arguments.length&&(i||typeof r!=="boolean"),o=i||(r===true||s===true?"margin":"border");return B(this,function(t,i,r){var s;if(g(t)){return n.indexOf("outer")===0?t["inner"+e]:t.document.documentElement["client"+e]}if(t.nodeType===9){s=t.documentElement;return Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])}return r===undefined?x.css(t,i,o):x.style(t,i,r,o)},t,a?r:undefined,a)}})});x.each(("blur focus focusin focusout resize scroll click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select submit keydown keypress keyup contextmenu").split(" "),function(e,t){x.fn[t]=function(e,i){return arguments.length>0?this.on(t,null,e,i):this.trigger(t)}});x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});x.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return arguments.length===1?this.off(e,"**"):this.off(t,e||"**",i)}});x.proxy=function(e,t){var i,n,r;if(typeof t==="string"){i=e[t];t=e;e=i}if(!m(e)){return undefined}n=s.call(arguments,2);r=function(){return e.apply(t||this,n.concat(s.call(arguments)))};r.guid=e.guid=e.guid||x.guid++;return r};x.holdReady=function(e){if(e){x.readyWait++}else{x.ready(true)}};x.isArray=Array.isArray;x.parseJSON=JSON.parse;x.nodeName=$;x.isFunction=m;x.isWindow=g;x.camelCase=G;x.type=b;x.now=Date.now;x.isNumeric=function(e){var t=x.type(e);return(t==="number"||t==="string")&&!isNaN(e-parseFloat(e))};if(typeof define==="function"&&define.amd){define("jquery",[],function(){return x})}var Kt=e.jQuery,Jt=e.$;x.noConflict=function(t){if(e.$===x){e.$=Jt}if(t&&e.jQuery===x){e.jQuery=Kt}return x};if(!t){e.jQuery=e.$=x}return x});(function(e){if(typeof define==="function"&&define.amd){define(["jquery"],e)}else if(typeof module==="object"&&module.exports){module.exports=function(t,i){if(typeof i==="undefined"){if(typeof window!=="undefined"){i=require("jquery")}else{i=require("jquery")(t)}}e(i);return i}}else{e(jQuery)}})(function(e){"use strict";var t=/\r?\n/g;var i={};i.fileapi=e('<input type="file">').get(0).files!==undefined;i.formdata=typeof window.FormData!=="undefined";var n=!!e.fn.prop;e.fn.attr2=function(){if(!n){return this.attr.apply(this,arguments)}var e=this.prop.apply(this,arguments);if(e&&e.jquery||typeof e==="string"){return e}return this.attr.apply(this,arguments)};e.fn.ajaxSubmit=function(t,r,s,o){if(!this.length){a("ajaxSubmit: skipping submit process - no element selected");return this}var l,u,f,c=this;if(typeof t==="function"){t={success:t}}else if(typeof t==="string"||t===false&&arguments.length>0){t={url:t,data:r,dataType:s};if(typeof o==="function"){t.success=o}}else if(typeof t==="undefined"){t={}}l=t.method||t.type||this.attr2("method");u=t.url||this.attr2("action");f=typeof u==="string"?e.trim(u):"";f=f||window.location.href||"";if(f){f=(f.match(/^([^#]+)/)||[])[1]}t=e.extend(true,{url:f,success:e.ajaxSettings.success,type:l||e.ajaxSettings.type,iframeSrc:/^https/i.test(window.location.href||"")?"javascript:false":"about:blank"},t);var d={};this.trigger("form-pre-serialize",[this,t,d]);if(d.veto){a("ajaxSubmit: submit vetoed via form-pre-serialize trigger");return this}if(t.beforeSerialize&&t.beforeSerialize(this,t)===false){a("ajaxSubmit: submit aborted via beforeSerialize callback");return this}var h=t.traditional;if(typeof h==="undefined"){h=e.ajaxSettings.traditional}var p=[];var m,g=this.formToArray(t.semantic,p,t.filtering);if(t.data){var v=e.isFunction(t.data)?t.data(g):t.data;t.extraData=v;m=e.param(v,h)}if(t.beforeSubmit&&t.beforeSubmit(g,this,t)===false){a("ajaxSubmit: submit aborted via beforeSubmit callback");return this}this.trigger("form-submit-validate",[g,this,t,d]);if(d.veto){a("ajaxSubmit: submit vetoed via form-submit-validate trigger");return this}var y=e.param(g,h);if(m){y=y?y+"&"+m:m}if(t.type.toUpperCase()==="GET"){t.url+=(t.url.indexOf("?")>=0?"&":"?")+y;t.data=null}else{t.data=y}var b=[];if(t.resetForm){b.push(function(){c.resetForm()})}if(t.clearForm){b.push(function(){c.clearForm(t.includeHidden)})}if(!t.dataType&&t.target){var w=t.success||function(){};b.push(function(i,n,r){var s=arguments,a=t.replaceTarget?"replaceWith":"html";e(t.target)[a](i).each(function(){w.apply(this,s)})})}else if(t.success){if(e.isArray(t.success)){e.merge(b,t.success)}else{b.push(t.success)}}t.success=function(e,i,n){var r=t.context||this;for(var s=0,a=b.length;s<a;s++){b[s].apply(r,[e,i,n||c,c])}};if(t.error){var x=t.error;t.error=function(e,i,n){var r=t.context||this;x.apply(r,[e,i,n,c])}}if(t.complete){var C=t.complete;t.complete=function(e,i){var n=t.context||this;C.apply(n,[e,i,c])}}var T=e("input[type=file]:enabled",this).filter(function(){return e(this).val()!==""});var _=T.length>0;var k="multipart/form-data";var D=c.attr("enctype")===k||c.attr("encoding")===k;var S=i.fileapi&&i.formdata;a("fileAPI :"+S);var $=(_||D)&&!S;var A;if(t.iframe!==false&&(t.iframe||$)){if(t.closeKeepAlive){e.get(t.closeKeepAlive,function(){A=O(g)})}else{A=O(g)}}else if((_||D)&&S){A=P(g)}else{A=e.ajax(t)}c.removeData("jqxhr").data("jqxhr",A);for(var E=0;E<p.length;E++){p[E]=null}this.trigger("form-submit-notify",[this,t]);return this;function M(i){var n=e.param(i,t.traditional).split("&");var r=n.length;var s=[];var a,o;for(a=0;a<r;a++){n[a]=n[a].replace(/\+/g," ");o=n[a].split("=");s.push([decodeURIComponent(o[0]),decodeURIComponent(o[1])])}return s}function P(i){var n=new FormData;for(var r=0;r<i.length;r++){n.append(i[r].name,i[r].value)}if(t.extraData){var s=M(t.extraData);for(r=0;r<s.length;r++){if(s[r]){n.append(s[r][0],s[r][1])}}}t.data=null;var a=e.extend(true,{},e.ajaxSettings,t,{contentType:false,processData:false,cache:false,type:l||"POST"});if(t.uploadProgress){a.xhr=function(){var i=e.ajaxSettings.xhr();if(i.upload){i.upload.addEventListener("progress",function(e){var i=0;var n=e.loaded||e.position;var r=e.total;if(e.lengthComputable){i=Math.ceil(n/r*100)}t.uploadProgress(e,n,r,i)},false)}return i}}a.data=null;var o=a.beforeSend;a.beforeSend=function(e,i){if(t.formData){i.data=t.formData}else{i.data=n}if(o){o.call(this,e,i)}};return e.ajax(a)}function O(i){var r=c[0],s,o,u,f,d,h,m,g,v,y,b,w;var x=e.Deferred();x.abort=function(e){g.abort(e)};if(i){for(o=0;o<p.length;o++){s=e(p[o]);if(n){s.prop("disabled",false)}else{s.removeAttr("disabled")}}}u=e.extend(true,{},e.ajaxSettings,t);u.context=u.context||u;d="jqFormIO"+(new Date).getTime();var C=r.ownerDocument;var T=c.closest("body");if(u.iframeTarget){h=e(u.iframeTarget,C);y=h.attr2("name");if(!y){h.attr2("name",d)}else{d=y}}else{h=e('<iframe name="'+d+'" src="'+u.iframeSrc+'" />',C);h.css({position:"absolute",top:"-1000px",left:"-1000px"})}m=h[0];g={aborted:0,responseText:null,responseXML:null,status:0,statusText:"n/a",getAllResponseHeaders:function(){},getResponseHeader:function(){},setRequestHeader:function(){},abort:function(t){var i=t==="timeout"?"timeout":"aborted";a("aborting upload... "+i);this.aborted=1;try{if(m.contentWindow.document.execCommand){m.contentWindow.document.execCommand("Stop")}}catch(e){}h.attr("src",u.iframeSrc);g.error=i;if(u.error){u.error.call(u.context,g,i,t)}if(f){e.event.trigger("ajaxError",[g,u,i])}if(u.complete){u.complete.call(u.context,g,i)}}};f=u.global;if(f&&e.active++===0){e.event.trigger("ajaxStart")}if(f){e.event.trigger("ajaxSend",[g,u])}if(u.beforeSend&&u.beforeSend.call(u.context,g,u)===false){if(u.global){e.active--}x.reject();return x}if(g.aborted){x.reject();return x}v=r.clk;if(v){y=v.name;if(y&&!v.disabled){u.extraData=u.extraData||{};u.extraData[y]=v.value;if(v.type==="image"){u.extraData[y+".x"]=r.clk_x;u.extraData[y+".y"]=r.clk_y}}}var _=1;var k=2;function D(e){var t=null;try{if(e.contentWindow){t=e.contentWindow.document}}catch(e){a("cannot get iframe.contentWindow document: "+e)}if(t){return t}try{t=e.contentDocument?e.contentDocument:e.document}catch(i){a("cannot get iframe.contentDocument: "+i);t=e.document}return t}var S=e("meta[name=csrf-token]").attr("content");var $=e("meta[name=csrf-param]").attr("content");if($&&S){u.extraData=u.extraData||{};u.extraData[$]=S}function A(){var t=c.attr2("target"),i=c.attr2("action"),n="multipart/form-data",s=c.attr("enctype")||c.attr("encoding")||n;r.setAttribute("target",d);if(!l||/post/i.test(l)){r.setAttribute("method","POST")}if(i!==u.url){r.setAttribute("action",u.url)}if(!u.skipEncodingOverride&&(!l||/post/i.test(l))){c.attr({encoding:"multipart/form-data",enctype:"multipart/form-data"})}if(u.timeout){w=setTimeout(function(){b=true;I(_)},u.timeout)}function o(){try{var e=D(m).readyState;a("state = "+e);if(e&&e.toLowerCase()==="uninitialized"){setTimeout(o,50)}}catch(e){a("Server abort: ",e," (",e.name,")");I(k);if(w){clearTimeout(w)}w=undefined}}var f=[];try{if(u.extraData){for(var p in u.extraData){if(u.extraData.hasOwnProperty(p)){if(e.isPlainObject(u.extraData[p])&&u.extraData[p].hasOwnProperty("name")&&u.extraData[p].hasOwnProperty("value")){f.push(e('<input type="hidden" name="'+u.extraData[p].name+'">',C).val(u.extraData[p].value).appendTo(r)[0])}else{f.push(e('<input type="hidden" name="'+p+'">',C).val(u.extraData[p]).appendTo(r)[0])}}}}if(!u.iframeTarget){h.appendTo(T)}if(m.attachEvent){m.attachEvent("onload",I)}else{m.addEventListener("load",I,false)}setTimeout(o,15);try{r.submit()}catch(e){var g=document.createElement("form").submit;g.apply(r)}}finally{r.setAttribute("action",i);r.setAttribute("enctype",s);if(t){r.setAttribute("target",t)}else{c.removeAttr("target")}e(f).remove()}}if(u.forceSync){A()}else{setTimeout(A,10)}var E,M,P=50,O;function I(t){if(g.aborted||O){return}M=D(m);if(!M){a("cannot access response document");t=k}if(t===_&&g){g.abort("timeout");x.reject(g,"timeout");return}else if(t===k&&g){g.abort("server abort");x.reject(g,"error","server abort");return}if(!M||M.location.href===u.iframeSrc){if(!b){return}}if(m.detachEvent){m.detachEvent("onload",I)}else{m.removeEventListener("load",I,false)}var i="success",n;try{if(b){throw"timeout"}var r=u.dataType==="xml"||M.XMLDocument||e.isXMLDoc(M);a("isXml="+r);if(!r&&window.opera&&(M.body===null||!M.body.innerHTML)){if(--P){a("requeing onLoad callback, DOM not available");setTimeout(I,250);return}}var s=M.body?M.body:M.documentElement;g.responseText=s?s.innerHTML:null;g.responseXML=M.XMLDocument?M.XMLDocument:M;if(r){u.dataType="xml"}g.getResponseHeader=function(e){var t={"content-type":u.dataType};return t[e.toLowerCase()]};if(s){g.status=Number(s.getAttribute("status"))||g.status;g.statusText=s.getAttribute("statusText")||g.statusText}var o=(u.dataType||"").toLowerCase();var l=/(json|script|text)/.test(o);if(l||u.textarea){var c=M.getElementsByTagName("textarea")[0];if(c){g.responseText=c.value;g.status=Number(c.getAttribute("status"))||g.status;g.statusText=c.getAttribute("statusText")||g.statusText}else if(l){var d=M.getElementsByTagName("pre")[0];var p=M.getElementsByTagName("body")[0];if(d){g.responseText=d.textContent?d.textContent:d.innerText}else if(p){g.responseText=p.textContent?p.textContent:p.innerText}}}else if(o==="xml"&&!g.responseXML&&g.responseText){g.responseXML=F(g.responseText)}try{E=j(g,o,u)}catch(e){i="parsererror";g.error=n=e||i}}catch(e){a("error caught: ",e);i="error";g.error=n=e||i}if(g.aborted){a("upload aborted");i=null}if(g.status){i=g.status>=200&&g.status<300||g.status===304?"success":"error"}if(i==="success"){if(u.success){u.success.call(u.context,E,"success",g)}x.resolve(g.responseText,"success",g);if(f){e.event.trigger("ajaxSuccess",[g,u])}}else if(i){if(typeof n==="undefined"){n=g.statusText}if(u.error){u.error.call(u.context,g,i,n)}x.reject(g,"error",n);if(f){e.event.trigger("ajaxError",[g,u,n])}}if(f){e.event.trigger("ajaxComplete",[g,u])}if(f&&!--e.active){e.event.trigger("ajaxStop")}if(u.complete){u.complete.call(u.context,g,i)}O=true;if(u.timeout){clearTimeout(w)}setTimeout(function(){if(!u.iframeTarget){h.remove()}else{h.attr("src",u.iframeSrc)}g.responseXML=null},100)}var F=e.parseXML||function(e,t){if(window.ActiveXObject){t=new ActiveXObject("Microsoft.XMLDOM");t.async="false";t.loadXML(e)}else{t=(new DOMParser).parseFromString(e,"text/xml")}return t&&t.documentElement&&t.documentElement.nodeName!=="parsererror"?t:null};var N=e.parseJSON||function(e){return window["eval"]("("+e+")")};var j=function(t,i,n){var r=t.getResponseHeader("content-type")||"",s=(i==="xml"||!i)&&r.indexOf("xml")>=0,a=s?t.responseXML:t.responseText;if(s&&a.documentElement.nodeName==="parsererror"){if(e.error){e.error("parsererror")}}if(n&&n.dataFilter){a=n.dataFilter(a,i)}if(typeof a==="string"){if((i==="json"||!i)&&r.indexOf("json")>=0){a=N(a)}else if((i==="script"||!i)&&r.indexOf("javascript")>=0){e.globalEval(a)}}return a};return x}};e.fn.ajaxForm=function(t,i,n,o){if(typeof t==="string"||t===false&&arguments.length>0){t={url:t,data:i,dataType:n};if(typeof o==="function"){t.success=o}}t=t||{};t.delegation=t.delegation&&e.isFunction(e.fn.on);if(!t.delegation&&this.length===0){var l={s:this.selector,c:this.context};if(!e.isReady&&l.s){a("DOM not ready, queuing ajaxForm");e(function(){e(l.s,l.c).ajaxForm(t)});return this}a("terminating; zero elements found by selector"+(e.isReady?"":" (DOM not ready)"));return this}if(t.delegation){e(document).off("submit.form-plugin",this.selector,r).off("click.form-plugin",this.selector,s).on("submit.form-plugin",this.selector,t,r).on("click.form-plugin",this.selector,t,s);return this}return this.ajaxFormUnbind().on("submit.form-plugin",t,r).on("click.form-plugin",t,s)};function r(t){var i=t.data;if(!t.isDefaultPrevented()){t.preventDefault();e(t.target).closest("form").ajaxSubmit(i)}}function s(t){var i=t.target;var n=e(i);if(!n.is("[type=submit],[type=image]")){var r=n.closest("[type=submit]");if(r.length===0){return}i=r[0]}var s=i.form;s.clk=i;if(i.type==="image"){if(typeof t.offsetX!=="undefined"){s.clk_x=t.offsetX;s.clk_y=t.offsetY}else if(typeof e.fn.offset==="function"){var a=n.offset();s.clk_x=t.pageX-a.left;s.clk_y=t.pageY-a.top}else{s.clk_x=t.pageX-i.offsetLeft;s.clk_y=t.pageY-i.offsetTop}}setTimeout(function(){s.clk=s.clk_x=s.clk_y=null},100)}e.fn.ajaxFormUnbind=function(){return this.off("submit.form-plugin click.form-plugin")};e.fn.formToArray=function(t,n,r){var s=[];if(this.length===0){return s}var a=this[0];var o=this.attr("id");var l=t||typeof a.elements==="undefined"?a.getElementsByTagName("*"):a.elements;var u;if(l){l=e.makeArray(l)}if(o&&(t||/(Edge|Trident)\//.test(navigator.userAgent))){u=e(':input[form="'+o+'"]').get();if(u.length){l=(l||[]).concat(u)}}if(!l||!l.length){return s}if(e.isFunction(r)){l=e.map(l,r)}var f,c,d,h,p,m,g;for(f=0,m=l.length;f<m;f++){p=l[f];d=p.name;if(!d||p.disabled){continue}if(t&&a.clk&&p.type==="image"){if(a.clk===p){s.push({name:d,value:e(p).val(),type:p.type});s.push({name:d+".x",value:a.clk_x},{name:d+".y",value:a.clk_y})}continue}h=e.fieldValue(p,true);if(h&&h.constructor===Array){if(n){n.push(p)}for(c=0,g=h.length;c<g;c++){s.push({name:d,value:h[c]})}}else if(i.fileapi&&p.type==="file"){if(n){n.push(p)}var v=p.files;if(v.length){for(c=0;c<v.length;c++){s.push({name:d,value:v[c],type:p.type})}}else{s.push({name:d,value:"",type:p.type})}}else if(h!==null&&typeof h!=="undefined"){if(n){n.push(p)}s.push({name:d,value:h,type:p.type,required:p.required})}}if(!t&&a.clk){var y=e(a.clk),b=y[0];d=b.name;if(d&&!b.disabled&&b.type==="image"){s.push({name:d,value:y.val()});s.push({name:d+".x",value:a.clk_x},{name:d+".y",value:a.clk_y})}}return s};e.fn.formSerialize=function(t){return e.param(this.formToArray(t))};e.fn.fieldSerialize=function(t){var i=[];this.each(function(){var n=this.name;if(!n){return}var r=e.fieldValue(this,t);if(r&&r.constructor===Array){for(var s=0,a=r.length;s<a;s++){i.push({name:n,value:r[s]})}}else if(r!==null&&typeof r!=="undefined"){i.push({name:this.name,value:r})}});return e.param(i)};e.fn.fieldValue=function(t){for(var i=[],n=0,r=this.length;n<r;n++){var s=this[n];var a=e.fieldValue(s,t);if(a===null||typeof a==="undefined"||a.constructor===Array&&!a.length){continue}if(a.constructor===Array){e.merge(i,a)}else{i.push(a)}}return i};e.fieldValue=function(i,n){var r=i.name,s=i.type,a=i.tagName.toLowerCase();if(typeof n==="undefined"){n=true}if(n&&(!r||i.disabled||s==="reset"||s==="button"||(s==="checkbox"||s==="radio")&&!i.checked||(s==="submit"||s==="image")&&i.form&&i.form.clk!==i||a==="select"&&i.selectedIndex===-1)){return null}if(a==="select"){var o=i.selectedIndex;if(o<0){return null}var l=[],u=i.options;var f=s==="select-one";var c=f?o+1:u.length;for(var d=f?o:0;d<c;d++){var h=u[d];if(h.selected&&!h.disabled){var p=h.value;if(!p){p=h.attributes&&h.attributes.value&&!h.attributes.value.specified?h.text:h.value}if(f){return p}l.push(p)}}return l}return e(i).val().replace(t,"\r\n")};e.fn.clearForm=function(t){return this.each(function(){e("input,select,textarea",this).clearFields(t)})};e.fn.clearFields=e.fn.clearInputs=function(t){var i=/^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each(function(){var n=this.type,r=this.tagName.toLowerCase();if(i.test(n)||r==="textarea"){this.value=""}else if(n==="checkbox"||n==="radio"){this.checked=false}else if(r==="select"){this.selectedIndex=-1}else if(n==="file"){if(/MSIE/.test(navigator.userAgent)){e(this).replaceWith(e(this).clone(true))}else{e(this).val("")}}else if(t){if(t===true&&/hidden/.test(n)||typeof t==="string"&&e(this).is(t)){this.value=""}}})};e.fn.resetForm=function(){return this.each(function(){var t=e(this);var i=this.tagName.toLowerCase();switch(i){case"input":this.checked=this.defaultChecked;case"textarea":this.value=this.defaultValue;return true;case"option":case"optgroup":var n=t.parents("select");if(n.length&&n[0].multiple){if(i==="option"){this.selected=this.defaultSelected}else{t.find("option").resetForm()}}else{n.resetForm()}return true;case"select":t.find("option").each(function(e){this.selected=this.defaultSelected;if(this.defaultSelected&&!t[0].multiple){t[0].selectedIndex=e;return false}});return true;case"label":var r=e(t.attr("for"));var s=t.find("input,select,textarea");if(r[0]){s.unshift(r[0])}s.resetForm();return true;case"form":if(typeof this.reset==="function"||typeof this.reset==="object"&&!this.reset.nodeType){this.reset()}return true;default:t.find("form,input,label,select,textarea").resetForm();return true}})};e.fn.enable=function(e){if(typeof e==="undefined"){e=true}return this.each(function(){this.disabled=!e})};e.fn.selected=function(t){if(typeof t==="undefined"){t=true}return this.each(function(){var i=this.type;if(i==="checkbox"||i==="radio"){this.checked=t}else if(this.tagName.toLowerCase()==="option"){var n=e(this).parent("select");if(t&&n[0]&&n[0].type==="select-one"){n.find("option").selected(false)}this.selected=t}})};e.fn.ajaxSubmit.debug=false;function a(){if(!e.fn.ajaxSubmit.debug){return}var t="[jquery.form] "+Array.prototype.join.call(arguments,"");if(window.console&&window.console.log){window.console.log(t)}else if(window.opera&&window.opera.postError){window.opera.postError(t)}}});(function(e,t){if(typeof define==="function"&&define.amd){define("Translator",t)}else if(typeof module==="object"&&module.exports){module.exports=t()}else{e.Translator=t()}})(this,function(){"use strict";var e={},t="en",i=[],n=new RegExp(/^\w+\: +(.+)$/),r=new RegExp(/^\s*((\{\s*(\-?\d+[\s*,\s*\-?\d+]*)\s*\})|([\[\]])\s*(-Inf|\-?\d+)\s*,\s*(\+?Inf|\-?\d+)\s*([\[\]]))\s?(.+?)$/),s=new RegExp(/^\s*(\{\s*(\-?\d+[\s*,\s*\-?\d+]*)\s*\})|([\[\]])\s*(-Inf|\-?\d+)\s*,\s*(\+?Inf|\-?\d+)\s*([\[\]])/);var a={locale:p(),fallback:t,placeHolderPrefix:"%",placeHolderSuffix:"%",defaultDomain:"messages",pluralSeparator:"|",add:function(t,n,r,s){var a=s||this.locale||this.fallback,o=r||this.defaultDomain;if(!e[a]){e[a]={}}if(!e[a][o]){e[a][o]={}}e[a][o][t]=n;if(false===h(i,o)){i.push(o)}return this},trans:function(e,t,i,n){var r=l(e,i,n,this.locale,this.fallback);return o(r,t||{})},transChoice:function(e,t,i,n,r){var s=l(e,n,r,this.locale,this.fallback);var a=parseInt(t,10);i=i||{};if(i.count===undefined){i.count=t}if(typeof s!=="undefined"&&!isNaN(a)){s=f(s,a,r||this.locale||this.fallback)}return o(s,i)},fromJSON:function(e){if(typeof e==="string"){e=JSON.parse(e)}if(e.locale){this.locale=e.locale}if(e.fallback){this.fallback=e.fallback}if(e.defaultDomain){this.defaultDomain=e.defaultDomain}if(e.translations){for(var t in e.translations){for(var i in e.translations[t]){for(var n in e.translations[t][i]){this.add(n,e.translations[t][i][n],i,t)}}}}return this},reset:function(){e={};i=[];this.locale=p()}};function o(e,t){var i,n=a.placeHolderPrefix,r=a.placeHolderSuffix;for(i in t){var s=new RegExp(n+i+r,"g");if(s.test(e)){e=e.replace(s,t[i])}}return e}function l(t,n,r,s,a){var o=r||s||a,l=n;var f=o.split("_")[0];if(!(o in e)){if(!(f in e)){if(!(a in e)){return t}o=a}else{o=f}}if(typeof l==="undefined"||null===l){for(var c=0;c<i.length;c++){if(u(o,i[c],t)||u(f,i[c],t)||u(a,i[c],t)){l=i[c];break}}}if(u(o,l,t)){return e[o][l][t]}var d,h,p,m;while(o.length>2){d=o.length;h=o.split(/[\s_]+/);p=h[h.length-1];m=p.length;if(1===h.length){break}o=o.substring(0,d-(m+1));if(u(o,l,t)){return e[o][l][t]}}if(u(a,l,t)){return e[a][l][t]}return t}function u(t,i,n){if(!(t in e)){return false}if(!(i in e[t])){return false}if(!(n in e[t][i])){return false}return true}function f(e,t,i){var o,l,u=[],f=[],h=e.split(a.pluralSeparator),p=[];for(o=0;o<h.length;o++){var m=h[o];if(r.test(m)){p=m.match(r);u[p[0]]=p[p.length-1]}else if(n.test(m)){p=m.match(n);f.push(p[1])}else{f.push(m)}}for(l in u){if(s.test(l)){p=l.match(s);if(p[1]){var g=p[2].split(","),v;for(v in g){if(t==g[v]){return u[l]}}}else{var y=c(p[4]);var b=c(p[5]);if(("["===p[3]?t>=y:t>y)&&("]"===p[6]?t<=b:t<b)){return u[l]}}}}return f[d(t,i)]||f[0]||undefined}function c(e){if("-Inf"===e){return Number.NEGATIVE_INFINITY}else if("+Inf"===e||"Inf"===e){return Number.POSITIVE_INFINITY}return parseInt(e,10)}function d(e,t){var i=t;if("pt_BR"===i){i="xbr"}if(i.length>3){i=i.split("_")[0]}switch(i){case"bo":case"dz":case"id":case"ja":case"jv":case"ka":case"km":case"kn":case"ko":case"ms":case"th":case"tr":case"vi":case"zh":return 0;case"af":case"az":case"bn":case"bg":case"ca":case"da":case"de":case"el":case"en":case"eo":case"es":case"et":case"eu":case"fa":case"fi":case"fo":case"fur":case"fy":case"gl":case"gu":case"ha":case"he":case"hu":case"is":case"it":case"ku":case"lb":case"ml":case"mn":case"mr":case"nah":case"nb":case"ne":case"nl":case"nn":case"no":case"om":case"or":case"pa":case"pap":case"ps":case"pt":case"so":case"sq":case"sv":case"sw":case"ta":case"te":case"tk":case"ur":case"zu":return e==1?0:1;case"am":case"bh":case"fil":case"fr":case"gun":case"hi":case"ln":case"mg":case"nso":case"xbr":case"ti":case"wa":return e===0||e==1?0:1;case"be":case"bs":case"hr":case"ru":case"sr":case"uk":return e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2;case"cs":case"sk":return e==1?0:e>=2&&e<=4?1:2;case"ga":return e==1?0:e==2?1:2;case"lt":return e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2;case"sl":return e%100==1?0:e%100==2?1:e%100==3||e%100==4?2:3;case"mk":return e%10==1?0:1;case"mt":return e==1?0:e===0||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3;case"lv":return e===0?0:e%10==1&&e%100!=11?1:2;case"pl":return e==1?0:e%10>=2&&e%10<=4&&(e%100<12||e%100>14)?1:2;case"cy":return e==1?0:e==2?1:e==8||e==11?2:3;case"ro":return e==1?0:e===0||e%100>0&&e%100<20?1:2;case"ar":return e===0?0:e==1?1:e==2?2:e>=3&&e<=10?3:e>=11&&e<=99?4:5;default:return 0}}function h(e,t){for(var i=0;i<e.length;i++){if(t===e[i]){return true}}return false}function p(){if(typeof document!=="undefined"){return document.documentElement.lang.replace("-","_")}else{return t}}return a});if(typeof jQuery==="undefined"){throw new Error("Bootstrap's JavaScript requires jQuery")}+function(e){"use strict";var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||t[0]==1&&t[1]==9&&t[2]<1||t[0]>3){throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}}(jQuery);+function(e){"use strict";function t(){var e=document.createElement("bootstrap");var t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in t){if(e.style[i]!==undefined){return{end:t[i]}}}return false}e.fn.emulateTransitionEnd=function(t){var i=false;var n=this;e(this).one("bsTransitionEnd",function(){i=true});var r=function(){if(!i)e(n).trigger(e.support.transition.end)};setTimeout(r,t);return this};e(function(){e.support.transition=t();if(!e.support.transition)return;e.event.special.bsTransitionEnd={bindType:e.support.transition.end,delegateType:e.support.transition.end,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}})}(jQuery);+function(e){"use strict";var t='[data-dismiss="alert"]';var i=function(i){e(i).on("click",t,this.close)};i.VERSION="3.3.7";i.TRANSITION_DURATION=150;i.prototype.close=function(t){var n=e(this);var r=n.attr("data-target");if(!r){r=n.attr("href");r=r&&r.replace(/.*(?=#[^\s]*$)/,"")}var s=e(r==="#"?[]:r);if(t)t.preventDefault();if(!s.length){s=n.closest(".alert")}s.trigger(t=e.Event("close.bs.alert"));if(t.isDefaultPrevented())return;s.removeClass("in");function a(){s.detach().trigger("closed.bs.alert").remove()}e.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",a).emulateTransitionEnd(i.TRANSITION_DURATION):a()};function n(t){return this.each(function(){var n=e(this);var r=n.data("bs.alert");if(!r)n.data("bs.alert",r=new i(this));if(typeof t=="string")r[t].call(n)})}var r=e.fn.alert;e.fn.alert=n;e.fn.alert.Constructor=i;e.fn.alert.noConflict=function(){e.fn.alert=r;return this};e(document).on("click.bs.alert.data-api",t,i.prototype.close)}(jQuery);+function(e){"use strict";var t=function(i,n){this.$element=e(i);this.options=e.extend({},t.DEFAULTS,n);this.isLoading=false};t.VERSION="3.3.7";t.DEFAULTS={loadingText:"loading..."};t.prototype.setState=function(t){var i="disabled";var n=this.$element;var r=n.is("input")?"val":"html";var s=n.data();t+="Text";if(s.resetText==null)n.data("resetText",n[r]());setTimeout(e.proxy(function(){n[r](s[t]==null?this.options[t]:s[t]);if(t=="loadingText"){this.isLoading=true;n.addClass(i).attr(i,i).prop(i,true)}else if(this.isLoading){this.isLoading=false;n.removeClass(i).removeAttr(i).prop(i,false)}},this),0)};t.prototype.toggle=function(){var e=true;var t=this.$element.closest('[data-toggle="buttons"]');if(t.length){var i=this.$element.find("input");if(i.prop("type")=="radio"){if(i.prop("checked"))e=false;t.find(".active").removeClass("active");this.$element.addClass("active")}else if(i.prop("type")=="checkbox"){if(i.prop("checked")!==this.$element.hasClass("active"))e=false;this.$element.toggleClass("active")}i.prop("checked",this.$element.hasClass("active"));if(e)i.trigger("change")}else{this.$element.attr("aria-pressed",!this.$element.hasClass("active"));this.$element.toggleClass("active")}};function i(i){return this.each(function(){var n=e(this);var r=n.data("bs.button");var s=typeof i=="object"&&i;if(!r)n.data("bs.button",r=new t(this,s));if(i=="toggle")r.toggle();else if(i)r.setState(i)})}var n=e.fn.button;e.fn.button=i;e.fn.button.Constructor=t;e.fn.button.noConflict=function(){e.fn.button=n;return this};e(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(t){var n=e(t.target).closest(".btn");i.call(n,"toggle");if(!e(t.target).is('input[type="radio"], input[type="checkbox"]')){t.preventDefault();if(n.is("input,button"))n.trigger("focus");else n.find("input:visible,button:visible").first().trigger("focus")}}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(t){e(t.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(t.type))})}(jQuery);+function(e){"use strict";var t=function(t,i){this.$element=e(t);this.$indicators=this.$element.find(".carousel-indicators");this.options=i;this.paused=null;this.sliding=null;this.interval=null;this.$active=null;this.$items=null;this.options.keyboard&&this.$element.on("keydown.bs.carousel",e.proxy(this.keydown,this));this.options.pause=="hover"&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",e.proxy(this.pause,this)).on("mouseleave.bs.carousel",e.proxy(this.cycle,this))};t.VERSION="3.3.7";t.TRANSITION_DURATION=600;t.DEFAULTS={interval:5e3,pause:"hover",wrap:true,keyboard:true};t.prototype.keydown=function(e){if(/input|textarea/i.test(e.target.tagName))return;switch(e.which){case 37:this.prev();break;case 39:this.next();break;default:return}e.preventDefault()};t.prototype.cycle=function(t){t||(this.paused=false);this.interval&&clearInterval(this.interval);this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval));return this};t.prototype.getItemIndex=function(e){this.$items=e.parent().children(".item");return this.$items.index(e||this.$active)};t.prototype.getItemForDirection=function(e,t){var i=this.getItemIndex(t);var n=e=="prev"&&i===0||e=="next"&&i==this.$items.length-1;if(n&&!this.options.wrap)return t;var r=e=="prev"?-1:1;var s=(i+r)%this.$items.length;return this.$items.eq(s)};t.prototype.to=function(e){var t=this;var i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(e>this.$items.length-1||e<0)return;if(this.sliding)return this.$element.one("slid.bs.carousel",function(){t.to(e)});if(i==e)return this.pause().cycle();return this.slide(e>i?"next":"prev",this.$items.eq(e))};t.prototype.pause=function(t){t||(this.paused=true);if(this.$element.find(".next, .prev").length&&e.support.transition){this.$element.trigger(e.support.transition.end);this.cycle(true)}this.interval=clearInterval(this.interval);return this};t.prototype.next=function(){if(this.sliding)return;return this.slide("next")};t.prototype.prev=function(){if(this.sliding)return;return this.slide("prev")};t.prototype.slide=function(i,n){var r=this.$element.find(".item.active");var s=n||this.getItemForDirection(i,r);var a=this.interval;var o=i=="next"?"left":"right";var l=this;if(s.hasClass("active"))return this.sliding=false;var u=s[0];var f=e.Event("slide.bs.carousel",{relatedTarget:u,direction:o});this.$element.trigger(f);if(f.isDefaultPrevented())return;this.sliding=true;a&&this.pause();if(this.$indicators.length){this.$indicators.find(".active").removeClass("active");var c=e(this.$indicators.children()[this.getItemIndex(s)]);c&&c.addClass("active")}var d=e.Event("slid.bs.carousel",{relatedTarget:u,direction:o});if(e.support.transition&&this.$element.hasClass("slide")){s.addClass(i);s[0].offsetWidth;r.addClass(o);s.addClass(o);r.one("bsTransitionEnd",function(){s.removeClass([i,o].join(" ")).addClass("active");r.removeClass(["active",o].join(" "));l.sliding=false;setTimeout(function(){l.$element.trigger(d)},0)}).emulateTransitionEnd(t.TRANSITION_DURATION)}else{r.removeClass("active");s.addClass("active");this.sliding=false;this.$element.trigger(d)}a&&this.cycle();return this};function i(i){return this.each(function(){var n=e(this);var r=n.data("bs.carousel");var s=e.extend({},t.DEFAULTS,n.data(),typeof i=="object"&&i);var a=typeof i=="string"?i:s.slide;if(!r)n.data("bs.carousel",r=new t(this,s));if(typeof i=="number")r.to(i);else if(a)r[a]();else if(s.interval)r.pause().cycle()})}var n=e.fn.carousel;e.fn.carousel=i;e.fn.carousel.Constructor=t;e.fn.carousel.noConflict=function(){e.fn.carousel=n;return this};var r=function(t){var n;var r=e(this);var s=e(r.attr("data-target")||(n=r.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,""));if(!s.hasClass("carousel"))return;var a=e.extend({},s.data(),r.data());var o=r.attr("data-slide-to");if(o)a.interval=false;i.call(s,a);if(o){s.data("bs.carousel").to(o)}t.preventDefault()};e(document).on("click.bs.carousel.data-api","[data-slide]",r).on("click.bs.carousel.data-api","[data-slide-to]",r);e(window).on("load",function(){e('[data-ride="carousel"]').each(function(){var t=e(this);i.call(t,t.data())})})}(jQuery);+function(e){"use strict";var t=function(i,n){this.$element=e(i);this.options=e.extend({},t.DEFAULTS,n);this.$trigger=e('[data-toggle="collapse"][href="#'+i.id+'"],'+'[data-toggle="collapse"][data-target="#'+i.id+'"]');this.transitioning=null;if(this.options.parent){this.$parent=this.getParent()}else{this.addAriaAndCollapsedClass(this.$element,this.$trigger)}if(this.options.toggle)this.toggle()};t.VERSION="3.3.7";t.TRANSITION_DURATION=350;t.DEFAULTS={toggle:true};t.prototype.dimension=function(){var e=this.$element.hasClass("width");return e?"width":"height"};t.prototype.show=function(){if(this.transitioning||this.$element.hasClass("in"))return;var i;var r=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(r&&r.length){i=r.data("bs.collapse");if(i&&i.transitioning)return}var s=e.Event("show.bs.collapse");this.$element.trigger(s);if(s.isDefaultPrevented())return;if(r&&r.length){n.call(r,"hide");i||r.data("bs.collapse",null)}var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",true);this.$trigger.removeClass("collapsed").attr("aria-expanded",true);this.transitioning=1;var o=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a]("");this.transitioning=0;this.$element.trigger("shown.bs.collapse")};if(!e.support.transition)return o.call(this);var l=e.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",e.proxy(o,this)).emulateTransitionEnd(t.TRANSITION_DURATION)[a](this.$element[0][l])};t.prototype.hide=function(){if(this.transitioning||!this.$element.hasClass("in"))return;var i=e.Event("hide.bs.collapse");this.$element.trigger(i);if(i.isDefaultPrevented())return;var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight;this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",false);this.$trigger.addClass("collapsed").attr("aria-expanded",false);this.transitioning=1;var r=function(){this.transitioning=0;this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!e.support.transition)return r.call(this);this.$element[n](0).one("bsTransitionEnd",e.proxy(r,this)).emulateTransitionEnd(t.TRANSITION_DURATION)};t.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};t.prototype.getParent=function(){return e(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(e.proxy(function(t,n){var r=e(n);this.addAriaAndCollapsedClass(i(r),r)},this)).end()};t.prototype.addAriaAndCollapsedClass=function(e,t){var i=e.hasClass("in");e.attr("aria-expanded",i);t.toggleClass("collapsed",!i).attr("aria-expanded",i)};function i(t){var i;var n=t.attr("data-target")||(i=t.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return e(n)}function n(i){return this.each(function(){var n=e(this);var r=n.data("bs.collapse");var s=e.extend({},t.DEFAULTS,n.data(),typeof i=="object"&&i);if(!r&&s.toggle&&/show|hide/.test(i))s.toggle=false;if(!r)n.data("bs.collapse",r=new t(this,s));if(typeof i=="string")r[i]()})}var r=e.fn.collapse;e.fn.collapse=n;e.fn.collapse.Constructor=t;e.fn.collapse.noConflict=function(){e.fn.collapse=r;return this};e(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var r=e(this);if(!r.attr("data-target"))t.preventDefault();var s=i(r);var a=s.data("bs.collapse");var o=a?"toggle":r.data();n.call(s,o)})}(jQuery);+function(e){"use strict";var t=".dropdown-backdrop";var i='[data-toggle="dropdown"]';var n=function(t){e(t).on("click.bs.dropdown",this.toggle)};n.VERSION="3.3.7";function r(t){var i=t.attr("data-target");if(!i){i=t.attr("href");i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,"")}var n=i&&e(i);return n&&n.length?n:t.parent()}function s(n){if(n&&n.which===3)return;e(t).remove();e(i).each(function(){var t=e(this);var i=r(t);var s={relatedTarget:this};if(!i.hasClass("open"))return;if(n&&n.type=="click"&&/input|textarea/i.test(n.target.tagName)&&e.contains(i[0],n.target))return;i.trigger(n=e.Event("hide.bs.dropdown",s));if(n.isDefaultPrevented())return;t.attr("aria-expanded","false");i.removeClass("open").trigger(e.Event("hidden.bs.dropdown",s))})}n.prototype.toggle=function(t){var i=e(this);if(i.is(".disabled, :disabled"))return;var n=r(i);var a=n.hasClass("open");s();if(!a){if("ontouchstart"in document.documentElement&&!n.closest(".navbar-nav").length){e(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(e(this)).on("click",s)}var o={relatedTarget:this};n.trigger(t=e.Event("show.bs.dropdown",o));if(t.isDefaultPrevented())return;i.trigger("focus").attr("aria-expanded","true");n.toggleClass("open").trigger(e.Event("shown.bs.dropdown",o))}return false};n.prototype.keydown=function(t){if(!/(38|40|27|32)/.test(t.which)||/input|textarea/i.test(t.target.tagName))return;var n=e(this);t.preventDefault();t.stopPropagation();if(n.is(".disabled, :disabled"))return;var s=r(n);var a=s.hasClass("open");if(!a&&t.which!=27||a&&t.which==27){if(t.which==27)s.find(i).trigger("focus");return n.trigger("click")}var o=" li:not(.disabled):visible a";var l=s.find(".dropdown-menu"+o);if(!l.length)return;var u=l.index(t.target);if(t.which==38&&u>0)u--;if(t.which==40&&u<l.length-1)u++;if(!~u)u=0;l.eq(u).trigger("focus")};function a(t){return this.each(function(){var i=e(this);var r=i.data("bs.dropdown");if(!r)i.data("bs.dropdown",r=new n(this));if(typeof t=="string")r[t].call(i)})}var o=e.fn.dropdown;e.fn.dropdown=a;e.fn.dropdown.Constructor=n;e.fn.dropdown.noConflict=function(){e.fn.dropdown=o;return this};e(document).on("click.bs.dropdown.data-api",s).on("click.bs.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.bs.dropdown.data-api",i,n.prototype.toggle).on("keydown.bs.dropdown.data-api",i,n.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",n.prototype.keydown)}(jQuery);+function(e){"use strict";var t=function(t,i){this.options=i;this.$body=e(document.body);this.$element=e(t);this.$dialog=this.$element.find(".modal-dialog");this.$backdrop=null;this.isShown=null;this.originalBodyPad=null;this.scrollbarWidth=0;this.ignoreBackdropClick=false;if(this.options.remote){this.$element.find(".modal-content").load(this.options.remote,e.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))}};t.VERSION="3.3.7";t.TRANSITION_DURATION=300;t.BACKDROP_TRANSITION_DURATION=150;t.DEFAULTS={backdrop:true,keyboard:true,show:true};t.prototype.toggle=function(e){return this.isShown?this.hide():this.show(e)};t.prototype.show=function(i){var n=this;var r=e.Event("show.bs.modal",{relatedTarget:i});this.$element.trigger(r);if(this.isShown||r.isDefaultPrevented())return;this.isShown=true;this.checkScrollbar();this.setScrollbar();this.$body.addClass("modal-open");this.escape();this.resize();this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',e.proxy(this.hide,this));this.$dialog.on("mousedown.dismiss.bs.modal",function(){n.$element.one("mouseup.dismiss.bs.modal",function(t){if(e(t.target).is(n.$element))n.ignoreBackdropClick=true})});this.backdrop(function(){var r=e.support.transition&&n.$element.hasClass("fade");if(!n.$element.parent().length){n.$element.appendTo(n.$body)}n.$element.show().scrollTop(0);n.adjustDialog();if(r){n.$element[0].offsetWidth}n.$element.addClass("in");n.enforceFocus();var s=e.Event("shown.bs.modal",{relatedTarget:i});r?n.$dialog.one("bsTransitionEnd",function(){n.$element.trigger("focus").trigger(s)}).emulateTransitionEnd(t.TRANSITION_DURATION):n.$element.trigger("focus").trigger(s)})};t.prototype.hide=function(i){if(i)i.preventDefault();i=e.Event("hide.bs.modal");this.$element.trigger(i);if(!this.isShown||i.isDefaultPrevented())return;this.isShown=false;this.escape();this.resize();e(document).off("focusin.bs.modal");this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal");this.$dialog.off("mousedown.dismiss.bs.modal");e.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",e.proxy(this.hideModal,this)).emulateTransitionEnd(t.TRANSITION_DURATION):this.hideModal()};t.prototype.enforceFocus=function(){e(document).off("focusin.bs.modal").on("focusin.bs.modal",e.proxy(function(e){if(document!==e.target&&this.$element[0]!==e.target&&!this.$element.has(e.target).length){this.$element.trigger("focus")}},this))};t.prototype.escape=function(){if(this.isShown&&this.options.keyboard){this.$element.on("keydown.dismiss.bs.modal",e.proxy(function(e){e.which==27&&this.hide()},this))}else if(!this.isShown){this.$element.off("keydown.dismiss.bs.modal")}};t.prototype.resize=function(){if(this.isShown){e(window).on("resize.bs.modal",e.proxy(this.handleUpdate,this))}else{e(window).off("resize.bs.modal")}};t.prototype.hideModal=function(){var e=this;this.$element.hide();this.backdrop(function(){e.$body.removeClass("modal-open");e.resetAdjustments();e.resetScrollbar();e.$element.trigger("hidden.bs.modal")})};t.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove();this.$backdrop=null};t.prototype.backdrop=function(i){var n=this;var r=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var s=e.support.transition&&r;this.$backdrop=e(document.createElement("div")).addClass("modal-backdrop "+r).appendTo(this.$body);this.$element.on("click.dismiss.bs.modal",e.proxy(function(e){if(this.ignoreBackdropClick){this.ignoreBackdropClick=false;return}if(e.target!==e.currentTarget)return;this.options.backdrop=="static"?this.$element[0].focus():this.hide()},this));if(s)this.$backdrop[0].offsetWidth;this.$backdrop.addClass("in");if(!i)return;s?this.$backdrop.one("bsTransitionEnd",i).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):i()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){n.removeBackdrop();i&&i()};e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):a()}else if(i){i()}};t.prototype.handleUpdate=function(){this.adjustDialog()};t.prototype.adjustDialog=function(){var e=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&e?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!e?this.scrollbarWidth:""})};t.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})};t.prototype.checkScrollbar=function(){var e=window.innerWidth;if(!e){var t=document.documentElement.getBoundingClientRect();e=t.right-Math.abs(t.left)}this.bodyIsOverflowing=document.body.clientWidth<e;this.scrollbarWidth=this.measureScrollbar()};t.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"";if(this.bodyIsOverflowing)this.$body.css("padding-right",e+this.scrollbarWidth)};t.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)};t.prototype.measureScrollbar=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure";this.$body.append(e);var t=e.offsetWidth-e.clientWidth;this.$body[0].removeChild(e);return t};function i(i,n){return this.each(function(){var r=e(this);var s=r.data("bs.modal");var a=e.extend({},t.DEFAULTS,r.data(),typeof i=="object"&&i);if(!s)r.data("bs.modal",s=new t(this,a));if(typeof i=="string")s[i](n);else if(a.show)s.show(n)})}var n=e.fn.modal;e.fn.modal=i;e.fn.modal.Constructor=t;e.fn.modal.noConflict=function(){e.fn.modal=n;return this};e(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var n=e(this);var r=n.attr("href");var s=e(n.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,""));var a=s.data("bs.modal")?"toggle":e.extend({remote:!/#/.test(r)&&r},s.data(),n.data());if(n.is("a"))t.preventDefault();s.one("show.bs.modal",function(e){if(e.isDefaultPrevented())return;s.one("hidden.bs.modal",function(){n.is(":visible")&&n.trigger("focus")})});i.call(s,a,this)})}(jQuery);+function(e){"use strict";var t=function(e,t){this.type=null;this.options=null;this.enabled=null;this.timeout=null;this.hoverState=null;this.$element=null;this.inState=null;this.init("tooltip",e,t)};t.VERSION="3.3.7";t.TRANSITION_DURATION=150;t.DEFAULTS={animation:true,placement:"top",selector:false,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:false,container:false,viewport:{selector:"body",padding:0}};t.prototype.init=function(t,i,n){this.enabled=true;this.type=t;this.$element=e(i);this.options=this.getOptions(n);this.$viewport=this.options.viewport&&e(e.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport);this.inState={click:false,hover:false,focus:false};if(this.$element[0]instanceof document.constructor&&!this.options.selector){throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!")}var r=this.options.trigger.split(" ");for(var s=r.length;s--;){var a=r[s];if(a=="click"){this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this))}else if(a!="manual"){var o=a=="hover"?"mouseenter":"focusin";var l=a=="hover"?"mouseleave":"focusout";this.$element.on(o+"."+this.type,this.options.selector,e.proxy(this.enter,this));this.$element.on(l+"."+this.type,this.options.selector,e.proxy(this.leave,this))}}this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()};t.prototype.getDefaults=function(){return t.DEFAULTS};t.prototype.getOptions=function(t){t=e.extend({},this.getDefaults(),this.$element.data(),t);if(t.delay&&typeof t.delay=="number"){t.delay={show:t.delay,hide:t.delay}}return t};t.prototype.getDelegateOptions=function(){var t={};var i=this.getDefaults();this._options&&e.each(this._options,function(e,n){if(i[e]!=n)t[e]=n});return t};t.prototype.enter=function(t){var i=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);if(!i){i=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,i)}if(t instanceof e.Event){i.inState[t.type=="focusin"?"focus":"hover"]=true}if(i.tip().hasClass("in")||i.hoverState=="in"){i.hoverState="in";return}clearTimeout(i.timeout);i.hoverState="in";if(!i.options.delay||!i.options.delay.show)return i.show();i.timeout=setTimeout(function(){if(i.hoverState=="in")i.show()},i.options.delay.show)};t.prototype.isInStateTrue=function(){for(var e in this.inState){if(this.inState[e])return true}return false};t.prototype.leave=function(t){var i=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);if(!i){i=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,i)}if(t instanceof e.Event){i.inState[t.type=="focusout"?"focus":"hover"]=false}if(i.isInStateTrue())return;clearTimeout(i.timeout);i.hoverState="out";if(!i.options.delay||!i.options.delay.hide)return i.hide();i.timeout=setTimeout(function(){if(i.hoverState=="out")i.hide()},i.options.delay.hide)};t.prototype.show=function(){var i=e.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(i);var n=e.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(i.isDefaultPrevented()||!n)return;var r=this;var s=this.tip();var a=this.getUID(this.type);this.setContent();s.attr("id",a);this.$element.attr("aria-describedby",a);if(this.options.animation)s.addClass("fade");var o=typeof this.options.placement=="function"?this.options.placement.call(this,s[0],this.$element[0]):this.options.placement;var l=/\s?auto?\s?/i;var u=l.test(o);if(u)o=o.replace(l,"")||"top";s.detach().css({top:0,left:0,display:"block"}).addClass(o).data("bs."+this.type,this);this.options.container?s.appendTo(this.options.container):s.insertAfter(this.$element);this.$element.trigger("inserted.bs."+this.type);var f=this.getPosition();var c=s[0].offsetWidth;var d=s[0].offsetHeight;if(u){var h=o;var p=this.getPosition(this.$viewport);o=o=="bottom"&&f.bottom+d>p.bottom?"top":o=="top"&&f.top-d<p.top?"bottom":o=="right"&&f.right+c>p.width?"left":o=="left"&&f.left-c<p.left?"right":o;s.removeClass(h).addClass(o)}var m=this.getCalculatedOffset(o,f,c,d);this.applyPlacement(m,o);var g=function(){var e=r.hoverState;r.$element.trigger("shown.bs."+r.type);r.hoverState=null;if(e=="out")r.leave(r)};e.support.transition&&this.$tip.hasClass("fade")?s.one("bsTransitionEnd",g).emulateTransitionEnd(t.TRANSITION_DURATION):g()}};t.prototype.applyPlacement=function(t,i){var n=this.tip();var r=n[0].offsetWidth;var s=n[0].offsetHeight;var a=parseInt(n.css("margin-top"),10);var o=parseInt(n.css("margin-left"),10);if(isNaN(a))a=0;if(isNaN(o))o=0;t.top+=a;t.left+=o;e.offset.setOffset(n[0],e.extend({using:function(e){n.css({top:Math.round(e.top),left:Math.round(e.left)})}},t),0);n.addClass("in");var l=n[0].offsetWidth;var u=n[0].offsetHeight;if(i=="top"&&u!=s){t.top=t.top+s-u}var f=this.getViewportAdjustedDelta(i,t,l,u);if(f.left)t.left+=f.left;else t.top+=f.top;var c=/top|bottom/.test(i);var d=c?f.left*2-r+l:f.top*2-s+u;var h=c?"offsetWidth":"offsetHeight";n.offset(t);this.replaceArrow(d,n[0][h],c)};t.prototype.replaceArrow=function(e,t,i){this.arrow().css(i?"left":"top",50*(1-e/t)+"%").css(i?"top":"left","")};t.prototype.setContent=function(){var e=this.tip();var t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t);e.removeClass("fade in top bottom left right")};t.prototype.hide=function(i){var n=this;var r=e(this.$tip);var s=e.Event("hide.bs."+this.type);function a(){if(n.hoverState!="in")r.detach();if(n.$element){n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type)}i&&i()}this.$element.trigger(s);if(s.isDefaultPrevented())return;r.removeClass("in");e.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",a).emulateTransitionEnd(t.TRANSITION_DURATION):a();this.hoverState=null;return this};t.prototype.fixTitle=function(){var e=this.$element;if(e.attr("title")||typeof e.attr("data-original-title")!="string"){e.attr("data-original-title",e.attr("title")||"").attr("title","")}};t.prototype.hasContent=function(){return this.getTitle()};t.prototype.getPosition=function(t){t=t||this.$element;var i=t[0];var n=i.tagName=="BODY";var r=i.getBoundingClientRect();if(r.width==null){r=e.extend({},r,{width:r.right-r.left,height:r.bottom-r.top})}var s=window.SVGElement&&i instanceof window.SVGElement;var a=n?{top:0,left:0}:s?null:t.offset();var o={scroll:n?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop()};var l=n?{width:e(window).width(),height:e(window).height()}:null;return e.extend({},r,o,l,a)};t.prototype.getCalculatedOffset=function(e,t,i,n){return e=="bottom"?{top:t.top+t.height,left:t.left+t.width/2-i/2}:e=="top"?{top:t.top-n,left:t.left+t.width/2-i/2}:e=="left"?{top:t.top+t.height/2-n/2,left:t.left-i}:{top:t.top+t.height/2-n/2,left:t.left+t.width}};t.prototype.getViewportAdjustedDelta=function(e,t,i,n){var r={top:0,left:0};if(!this.$viewport)return r;var s=this.options.viewport&&this.options.viewport.padding||0;var a=this.getPosition(this.$viewport);if(/right|left/.test(e)){var o=t.top-s-a.scroll;var l=t.top+s-a.scroll+n;if(o<a.top){r.top=a.top-o}else if(l>a.top+a.height){r.top=a.top+a.height-l}}else{var u=t.left-s;var f=t.left+s+i;if(u<a.left){r.left=a.left-u}else if(f>a.right){r.left=a.left+a.width-f}}return r};t.prototype.getTitle=function(){var e;var t=this.$element;var i=this.options;e=t.attr("data-original-title")||(typeof i.title=="function"?i.title.call(t[0]):i.title);return e};t.prototype.getUID=function(e){do{e+=~~(Math.random()*1e6)}while(document.getElementById(e));return e};t.prototype.tip=function(){if(!this.$tip){this.$tip=e(this.options.template);if(this.$tip.length!=1){throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!")}}return this.$tip};t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")};t.prototype.enable=function(){this.enabled=true};t.prototype.disable=function(){this.enabled=false};t.prototype.toggleEnabled=function(){this.enabled=!this.enabled};t.prototype.toggle=function(t){var i=this;if(t){i=e(t.currentTarget).data("bs."+this.type);if(!i){i=new this.constructor(t.currentTarget,this.getDelegateOptions());e(t.currentTarget).data("bs."+this.type,i)}}if(t){i.inState.click=!i.inState.click;if(i.isInStateTrue())i.enter(i);else i.leave(i)}else{i.tip().hasClass("in")?i.leave(i):i.enter(i)}};t.prototype.destroy=function(){var e=this;clearTimeout(this.timeout);this.hide(function(){e.$element.off("."+e.type).removeData("bs."+e.type);if(e.$tip){e.$tip.detach()}e.$tip=null;e.$arrow=null;e.$viewport=null;e.$element=null})};function i(i){return this.each(function(){var n=e(this);var r=n.data("bs.tooltip");var s=typeof i=="object"&&i;if(!r&&/destroy|hide/.test(i))return;if(!r)n.data("bs.tooltip",r=new t(this,s));if(typeof i=="string")r[i]()})}var n=e.fn.tooltip;e.fn.tooltip=i;e.fn.tooltip.Constructor=t;e.fn.tooltip.noConflict=function(){e.fn.tooltip=n;return this}}(jQuery);+function(e){"use strict";var t=function(e,t){this.init("popover",e,t)};if(!e.fn.tooltip)throw new Error("Popover requires tooltip.js");t.VERSION="3.3.7";t.DEFAULTS=e.extend({},e.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'});t.prototype=e.extend({},e.fn.tooltip.Constructor.prototype);t.prototype.constructor=t;t.prototype.getDefaults=function(){return t.DEFAULTS};t.prototype.setContent=function(){var e=this.tip();var t=this.getTitle();var i=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t);e.find(".popover-content").children().detach().end()[this.options.html?typeof i=="string"?"html":"append":"text"](i);e.removeClass("fade top bottom left right in");if(!e.find(".popover-title").html())e.find(".popover-title").hide()};t.prototype.hasContent=function(){return this.getTitle()||this.getContent()};t.prototype.getContent=function(){var e=this.$element;var t=this.options;return e.attr("data-content")||(typeof t.content=="function"?t.content.call(e[0]):t.content)};t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};function i(i){return this.each(function(){var n=e(this);var r=n.data("bs.popover");var s=typeof i=="object"&&i;if(!r&&/destroy|hide/.test(i))return;if(!r)n.data("bs.popover",r=new t(this,s));if(typeof i=="string")r[i]()})}var n=e.fn.popover;e.fn.popover=i;e.fn.popover.Constructor=t;e.fn.popover.noConflict=function(){e.fn.popover=n;return this}}(jQuery);+function(e){"use strict";function t(i,n){this.$body=e(document.body);this.$scrollElement=e(i).is(document.body)?e(window):e(i);this.options=e.extend({},t.DEFAULTS,n);this.selector=(this.options.target||"")+" .nav li > a";this.offsets=[];this.targets=[];this.activeTarget=null;this.scrollHeight=0;this.$scrollElement.on("scroll.bs.scrollspy",e.proxy(this.process,this));this.refresh();this.process()}t.VERSION="3.3.7";t.DEFAULTS={offset:10};t.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)};t.prototype.refresh=function(){var t=this;var i="offset";var n=0;this.offsets=[];this.targets=[];this.scrollHeight=this.getScrollHeight();if(!e.isWindow(this.$scrollElement[0])){i="position";n=this.$scrollElement.scrollTop()}this.$body.find(this.selector).map(function(){var t=e(this);var r=t.data("target")||t.attr("href");var s=/^#./.test(r)&&e(r);return s&&s.length&&s.is(":visible")&&[[s[i]().top+n,r]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){t.offsets.push(this[0]);t.targets.push(this[1])})};t.prototype.process=function(){var e=this.$scrollElement.scrollTop()+this.options.offset;var t=this.getScrollHeight();var i=this.options.offset+t-this.$scrollElement.height();var n=this.offsets;var r=this.targets;var s=this.activeTarget;var a;if(this.scrollHeight!=t){this.refresh()}if(e>=i){return s!=(a=r[r.length-1])&&this.activate(a)}if(s&&e<n[0]){this.activeTarget=null;return this.clear()}for(a=n.length;a--;){s!=r[a]&&e>=n[a]&&(n[a+1]===undefined||e<n[a+1])&&this.activate(r[a])}};t.prototype.activate=function(t){this.activeTarget=t;this.clear();var i=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]';var n=e(i).parents("li").addClass("active");if(n.parent(".dropdown-menu").length){n=n.closest("li.dropdown").addClass("active")}n.trigger("activate.bs.scrollspy")};t.prototype.clear=function(){e(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};function i(i){return this.each(function(){var n=e(this);var r=n.data("bs.scrollspy");var s=typeof i=="object"&&i;if(!r)n.data("bs.scrollspy",r=new t(this,s));if(typeof i=="string")r[i]()})}var n=e.fn.scrollspy;e.fn.scrollspy=i;e.fn.scrollspy.Constructor=t;e.fn.scrollspy.noConflict=function(){e.fn.scrollspy=n;return this};e(window).on("load.bs.scrollspy.data-api",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);i.call(t,t.data())})})}(jQuery);+function(e){"use strict";var t=function(t){this.element=e(t)};t.VERSION="3.3.7";t.TRANSITION_DURATION=150;t.prototype.show=function(){var t=this.element;var i=t.closest("ul:not(.dropdown-menu)");var n=t.data("target");if(!n){n=t.attr("href");n=n&&n.replace(/.*(?=#[^\s]*$)/,"")}if(t.parent("li").hasClass("active"))return;var r=i.find(".active:last a");var s=e.Event("hide.bs.tab",{relatedTarget:t[0]});var a=e.Event("show.bs.tab",{relatedTarget:r[0]});r.trigger(s);t.trigger(a);if(a.isDefaultPrevented()||s.isDefaultPrevented())return;var o=e(n);this.activate(t.closest("li"),i);this.activate(o,o.parent(),function(){r.trigger({type:"hidden.bs.tab",relatedTarget:t[0]});t.trigger({type:"shown.bs.tab",relatedTarget:r[0]})})};t.prototype.activate=function(i,n,r){var s=n.find("> .active");var a=r&&e.support.transition&&(s.length&&s.hasClass("fade")||!!n.find("> .fade").length);function o(){s.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",false);i.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",true);if(a){i[0].offsetWidth;i.addClass("in")}else{i.removeClass("fade")}if(i.parent(".dropdown-menu").length){i.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",true)}r&&r()}s.length&&a?s.one("bsTransitionEnd",o).emulateTransitionEnd(t.TRANSITION_DURATION):o();s.removeClass("in")};function i(i){return this.each(function(){var n=e(this);var r=n.data("bs.tab");if(!r)n.data("bs.tab",r=new t(this));if(typeof i=="string")r[i]()})}var n=e.fn.tab;e.fn.tab=i;e.fn.tab.Constructor=t;e.fn.tab.noConflict=function(){e.fn.tab=n;return this};var r=function(t){t.preventDefault();i.call(e(this),"show")};e(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',r).on("click.bs.tab.data-api",'[data-toggle="pill"]',r)}(jQuery);+function(e){"use strict";var t=function(i,n){this.options=e.extend({},t.DEFAULTS,n);this.$target=e(this.options.target).on("scroll.bs.affix.data-api",e.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",e.proxy(this.checkPositionWithEventLoop,this));this.$element=e(i);this.affixed=null;this.unpin=null;this.pinnedOffset=null;this.checkPosition()};t.VERSION="3.3.7";t.RESET="affix affix-top affix-bottom";t.DEFAULTS={offset:0,target:window};t.prototype.getState=function(e,t,i,n){var r=this.$target.scrollTop();var s=this.$element.offset();var a=this.$target.height();if(i!=null&&this.affixed=="top")return r<i?"top":false;if(this.affixed=="bottom"){if(i!=null)return r+this.unpin<=s.top?false:"bottom";return r+a<=e-n?false:"bottom"}var o=this.affixed==null;var l=o?r:s.top;var u=o?a:t;if(i!=null&&r<=i)return"top";if(n!=null&&l+u>=e-n)return"bottom";return false};t.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(t.RESET).addClass("affix");var e=this.$target.scrollTop();var i=this.$element.offset();return this.pinnedOffset=i.top-e};t.prototype.checkPositionWithEventLoop=function(){setTimeout(e.proxy(this.checkPosition,this),1)};t.prototype.checkPosition=function(){if(!this.$element.is(":visible"))return;var i=this.$element.height();var n=this.options.offset;var r=n.top;var s=n.bottom;var a=Math.max(e(document).height(),e(document.body).height());if(typeof n!="object")s=r=n;if(typeof r=="function")r=n.top(this.$element);if(typeof s=="function")s=n.bottom(this.$element);var o=this.getState(a,i,r,s);if(this.affixed!=o){if(this.unpin!=null)this.$element.css("top","");var l="affix"+(o?"-"+o:"");var u=e.Event(l+".bs.affix");this.$element.trigger(u);if(u.isDefaultPrevented())return;this.affixed=o;this.unpin=o=="bottom"?this.getPinnedOffset():null;this.$element.removeClass(t.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}if(o=="bottom"){this.$element.offset({top:a-i-s})}};function i(i){return this.each(function(){var n=e(this);var r=n.data("bs.affix");var s=typeof i=="object"&&i;if(!r)n.data("bs.affix",r=new t(this,s));if(typeof i=="string")r[i]()})}var n=e.fn.affix;e.fn.affix=i;e.fn.affix.Constructor=t;e.fn.affix.noConflict=function(){e.fn.affix=n;return this};e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var t=e(this);var n=t.data();n.offset=n.offset||{};if(n.offsetBottom!=null)n.offset.bottom=n.offsetBottom;if(n.offsetTop!=null)n.offset.top=n.offsetTop;i.call(t,n)})})}(jQuery);(function(e){if(typeof define==="function"&&define.amd){define(["jquery"],e)}else if(typeof module==="object"&&module.exports){module.exports=function(t,i){if(i===undefined){if(typeof window!=="undefined"){i=require("jquery")}else{i=require("jquery")(t)}}e(i);return i}}else{e(jQuery)}})(function(e){var t=function(){if(e&&e.fn&&e.fn.select2&&e.fn.select2.amd){var t=e.fn.select2.amd}var t;(function(){if(!t||!t.requirejs){if(!t){t={}}else{i=t}var e,i,n;(function(t){var r,s,a,o,l={},u={},f={},c={},d=Object.prototype.hasOwnProperty,h=[].slice,p=/\.js$/;function m(e,t){return d.call(e,t)}function g(e,t){var i,n,r,s,a,o,l,u,c,d,h,m,g=t&&t.split("/"),v=f.map,y=v&&v["*"]||{};if(e){e=e.split("/");a=e.length-1;if(f.nodeIdCompat&&p.test(e[a])){e[a]=e[a].replace(p,"")}if(e[0].charAt(0)==="."&&g){m=g.slice(0,g.length-1);e=m.concat(e)}for(c=0;c<e.length;c++){h=e[c];if(h==="."){e.splice(c,1);c-=1}else if(h===".."){if(c===0||c===1&&e[2]===".."||e[c-1]===".."){continue}else if(c>0){e.splice(c-1,2);c-=2}}}e=e.join("/")}if((g||y)&&v){i=e.split("/");for(c=i.length;c>0;c-=1){n=i.slice(0,c).join("/");if(g){for(d=g.length;d>0;d-=1){r=v[g.slice(0,d).join("/")];if(r){r=r[n];if(r){s=r;o=c;break}}}}if(s){break}if(!l&&y&&y[n]){l=y[n];u=c}}if(!s&&l){s=l;o=u}if(s){i.splice(0,o,s);e=i.join("/")}}return e}function v(e,i){return function(){var n=h.call(arguments,0);if(typeof n[0]!=="string"&&n.length===1){n.push(null)}return s.apply(t,n.concat([e,i]))}}function y(e){return function(t){return g(t,e)}}function b(e){return function(t){l[e]=t}}function w(e){if(m(u,e)){var i=u[e];delete u[e];c[e]=true;r.apply(t,i)}if(!m(l,e)&&!m(c,e)){throw new Error("No "+e)}return l[e]}function x(e){var t,i=e?e.indexOf("!"):-1;if(i>-1){t=e.substring(0,i);e=e.substring(i+1,e.length)}return[t,e]}function C(e){return e?x(e):[]}a=function(e,t){var i,n=x(e),r=n[0],s=t[1];e=n[1];if(r){r=g(r,s);i=w(r)}if(r){if(i&&i.normalize){e=i.normalize(e,y(s))}else{e=g(e,s)}}else{e=g(e,s);n=x(e);r=n[0];e=n[1];if(r){i=w(r)}}return{f:r?r+"!"+e:e,n:e,pr:r,p:i}};function T(e){return function(){return f&&f.config&&f.config[e]||{}}}o={require:function(e){return v(e)},exports:function(e){var t=l[e];if(typeof t!=="undefined"){return t}else{return l[e]={}}},module:function(e){return{id:e,uri:"",exports:l[e],config:T(e)}}};r=function(e,i,n,r){var s,f,d,h,p,g,y=[],x=typeof n,T;r=r||e;g=C(r);if(x==="undefined"||x==="function"){i=!i.length&&n.length?["require","exports","module"]:i;for(p=0;p<i.length;p+=1){h=a(i[p],g);f=h.f;if(f==="require"){y[p]=o.require(e)}else if(f==="exports"){y[p]=o.exports(e);T=true}else if(f==="module"){s=y[p]=o.module(e)}else if(m(l,f)||m(u,f)||m(c,f)){y[p]=w(f)}else if(h.p){h.p.load(h.n,v(r,true),b(f),{});y[p]=l[f]}else{throw new Error(e+" missing "+f)}}d=n?n.apply(l[e],y):undefined;if(e){if(s&&s.exports!==t&&s.exports!==l[e]){l[e]=s.exports}else if(d!==t||!T){l[e]=d}}}else if(e){l[e]=n}};e=i=s=function(e,i,n,l,u){if(typeof e==="string"){if(o[e]){return o[e](i)}return w(a(e,C(i)).f)}else if(!e.splice){f=e;if(f.deps){s(f.deps,f.callback)}if(!i){return}if(i.splice){e=i;i=n;n=null}else{e=t}}i=i||function(){};if(typeof n==="function"){n=l;l=u}if(l){r(t,e,i,n)}else{setTimeout(function(){r(t,e,i,n)},4)}return s};s.config=function(e){return s(e)};e._defined=l;n=function(e,t,i){if(typeof e!=="string"){throw new Error("See almond README: incorrect module build, no module name")}if(!t.splice){i=t;t=[]}if(!m(l,e)&&!m(u,e)){u[e]=[e,t,i]}};n.amd={jQuery:true}})();t.requirejs=e;t.require=i;t.define=n}})();t.define("almond",function(){});t.define("jquery",[],function(){var t=e||$;if(t==null&&console&&console.error){console.error("Select2: An instance of jQuery or a jQuery-compatible library was not "+"found. Make sure that you are including jQuery before Select2 on your "+"web page.")}return t});t.define("select2/utils",["jquery"],function(e){var t={};t.Extend=function(e,t){var i={}.hasOwnProperty;function n(){this.constructor=e}for(var r in t){if(i.call(t,r)){e[r]=t[r]}}n.prototype=t.prototype;e.prototype=new n;e.__super__=t.prototype;return e};function i(e){var t=e.prototype;var i=[];for(var n in t){var r=t[n];if(typeof r!=="function"){continue}if(n==="constructor"){continue}i.push(n)}return i}t.Decorate=function(e,t){var n=i(t);var r=i(e);function s(){var i=Array.prototype.unshift;var n=t.prototype.constructor.length;var r=e.prototype.constructor;if(n>0){i.call(arguments,e.prototype.constructor);r=t.prototype.constructor}r.apply(this,arguments)}t.displayName=e.displayName;function a(){this.constructor=s}s.prototype=new a;for(var o=0;o<r.length;o++){var l=r[o];s.prototype[l]=e.prototype[l]}var u=function(e){var i=function(){};if(e in s.prototype){i=s.prototype[e]}var n=t.prototype[e];return function(){var e=Array.prototype.unshift;e.call(arguments,i);return n.apply(this,arguments)}};for(var f=0;f<n.length;f++){var c=n[f];s.prototype[c]=u(c)}return s};var n=function(){this.listeners={}};n.prototype.on=function(e,t){this.listeners=this.listeners||{};if(e in this.listeners){this.listeners[e].push(t)}else{this.listeners[e]=[t]}};n.prototype.trigger=function(e){var t=Array.prototype.slice;var i=t.call(arguments,1);this.listeners=this.listeners||{};if(i==null){i=[]}if(i.length===0){i.push({})}i[0]._type=e;if(e in this.listeners){this.invoke(this.listeners[e],t.call(arguments,1))}if("*"in this.listeners){this.invoke(this.listeners["*"],arguments)}};n.prototype.invoke=function(e,t){for(var i=0,n=e.length;i<n;i++){e[i].apply(this,t)}};t.Observable=n;t.generateChars=function(e){var t="";for(var i=0;i<e;i++){var n=Math.floor(Math.random()*36);t+=n.toString(36)}return t};t.bind=function(e,t){return function(){e.apply(t,arguments)}};t._convertData=function(e){for(var t in e){var i=t.split("-");var n=e;if(i.length===1){continue}for(var r=0;r<i.length;r++){var s=i[r];s=s.substring(0,1).toLowerCase()+s.substring(1);if(!(s in n)){n[s]={}}if(r==i.length-1){n[s]=e[t]}n=n[s]}delete e[t]}return e};t.hasScroll=function(t,i){var n=e(i);var r=i.style.overflowX;var s=i.style.overflowY;if(r===s&&(s==="hidden"||s==="visible")){return false}if(r==="scroll"||s==="scroll"){return true}return n.innerHeight()<i.scrollHeight||n.innerWidth()<i.scrollWidth};t.escapeMarkup=function(e){var t={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};if(typeof e!=="string"){return e}return String(e).replace(/[&<>"'\/\\]/g,function(e){return t[e]})};t.appendMany=function(t,i){if(e.fn.jquery.substr(0,3)==="1.7"){var n=e();e.map(i,function(e){n=n.add(e)});i=n}t.append(i)};return t});t.define("select2/results",["jquery","./utils"],function(e,t){function i(e,t,n){this.$element=e;this.data=n;this.options=t;i.__super__.constructor.call(this)}t.Extend(i,t.Observable);i.prototype.render=function(){var t=e('<ul class="select2-results__options" role="tree"></ul>');if(this.options.get("multiple")){t.attr("aria-multiselectable","true")}this.$results=t;return t};i.prototype.clear=function(){this.$results.empty()};i.prototype.displayMessage=function(t){var i=this.options.get("escapeMarkup");this.clear();this.hideLoading();var n=e('<li role="treeitem" aria-live="assertive"'+' class="select2-results__option"></li>');var r=this.options.get("translations").get(t.message);n.append(i(r(t.args)));n[0].className+=" select2-results__message";this.$results.append(n)};i.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()};i.prototype.append=function(e){this.hideLoading();var t=[];if(e.results==null||e.results.length===0){if(this.$results.children().length===0){this.trigger("results:message",{message:"noResults"})}return}e.results=this.sort(e.results);for(var i=0;i<e.results.length;i++){var n=e.results[i];var r=this.option(n);t.push(r)}this.$results.append(t)};i.prototype.position=function(e,t){var i=t.find(".select2-results");i.append(e)};i.prototype.sort=function(e){var t=this.options.get("sorter");return t(e)};i.prototype.highlightFirstItem=function(){var e=this.$results.find(".select2-results__option[aria-selected]");var t=e.filter("[aria-selected=true]");if(t.length>0){t.first().trigger("mouseenter")}else{e.first().trigger("mouseenter")}this.ensureHighlightVisible()};i.prototype.setClasses=function(){var t=this;this.data.current(function(i){var n=e.map(i,function(e){return e.id.toString()});var r=t.$results.find(".select2-results__option[aria-selected]");r.each(function(){var t=e(this);var i=e.data(this,"data");var r=""+i.id;if(i.element!=null&&i.element.selected||i.element==null&&e.inArray(r,n)>-1){t.attr("aria-selected","true")}else{t.attr("aria-selected","false")}})})};i.prototype.showLoading=function(e){this.hideLoading();var t=this.options.get("translations").get("searching");var i={disabled:true,loading:true,text:t(e)};var n=this.option(i);n.className+=" loading-results";this.$results.prepend(n)};i.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()};i.prototype.option=function(t){var i=document.createElement("li");i.className="select2-results__option";var n={role:"treeitem","aria-selected":"false"};if(t.disabled){delete n["aria-selected"];n["aria-disabled"]="true"}if(t.id==null){delete n["aria-selected"]}if(t._resultId!=null){i.id=t._resultId}if(t.title){i.title=t.title}if(t.children){n.role="group";n["aria-label"]=t.text;delete n["aria-selected"]}for(var r in n){var s=n[r];i.setAttribute(r,s)}if(t.children){var a=e(i);var o=document.createElement("strong");o.className="select2-results__group";var l=e(o);this.template(t,o);var u=[];for(var f=0;f<t.children.length;f++){var c=t.children[f];var d=this.option(c);u.push(d)}var h=e("<ul></ul>",{class:"select2-results__options select2-results__options--nested"});h.append(u);a.append(o);a.append(h)}else{this.template(t,i)}e.data(i,"data",t);return i};i.prototype.bind=function(t,i){var n=this;var r=t.id+"-results";this.$results.attr("id",r);t.on("results:all",function(e){n.clear();n.append(e.data);if(t.isOpen()){n.setClasses();n.highlightFirstItem()}});t.on("results:append",function(e){n.append(e.data);if(t.isOpen()){n.setClasses()}});t.on("query",function(e){n.hideMessages();n.showLoading(e)});t.on("select",function(){if(!t.isOpen()){return}n.setClasses();n.highlightFirstItem()});t.on("unselect",function(){if(!t.isOpen()){return}n.setClasses();n.highlightFirstItem()});t.on("open",function(){n.$results.attr("aria-expanded","true");n.$results.attr("aria-hidden","false");n.setClasses();n.ensureHighlightVisible()});t.on("close",function(){n.$results.attr("aria-expanded","false");n.$results.attr("aria-hidden","true");n.$results.removeAttr("aria-activedescendant")});t.on("results:toggle",function(){var e=n.getHighlightedResults();if(e.length===0){return}e.trigger("mouseup")});t.on("results:select",function(){var e=n.getHighlightedResults();if(e.length===0){return}var t=e.data("data");if(e.attr("aria-selected")=="true"){n.trigger("close",{})}else{n.trigger("select",{data:t})}});t.on("results:previous",function(){var e=n.getHighlightedResults();var t=n.$results.find("[aria-selected]");var i=t.index(e);if(i===0){return}var r=i-1;if(e.length===0){r=0}var s=t.eq(r);s.trigger("mouseenter");var a=n.$results.offset().top;var o=s.offset().top;var l=n.$results.scrollTop()+(o-a);if(r===0){n.$results.scrollTop(0)}else if(o-a<0){n.$results.scrollTop(l)}});t.on("results:next",function(){var e=n.getHighlightedResults();var t=n.$results.find("[aria-selected]");var i=t.index(e);var r=i+1;if(r>=t.length){return}var s=t.eq(r);s.trigger("mouseenter");var a=n.$results.offset().top+n.$results.outerHeight(false);var o=s.offset().top+s.outerHeight(false);var l=n.$results.scrollTop()+o-a;if(r===0){n.$results.scrollTop(0)}else if(o>a){n.$results.scrollTop(l)}});t.on("results:focus",function(e){e.element.addClass("select2-results__option--highlighted")});t.on("results:message",function(e){n.displayMessage(e)});if(e.fn.mousewheel){this.$results.on("mousewheel",function(e){var t=n.$results.scrollTop();var i=n.$results.get(0).scrollHeight-t+e.deltaY;var r=e.deltaY>0&&t-e.deltaY<=0;var s=e.deltaY<0&&i<=n.$results.height();if(r){n.$results.scrollTop(0);e.preventDefault();e.stopPropagation()}else if(s){n.$results.scrollTop(n.$results.get(0).scrollHeight-n.$results.height());e.preventDefault();e.stopPropagation()}})}this.$results.on("mouseup",".select2-results__option[aria-selected]",function(t){var i=e(this);var r=i.data("data");if(i.attr("aria-selected")==="true"){if(n.options.get("multiple")){n.trigger("unselect",{originalEvent:t,data:r})}else{n.trigger("close",{})}return}n.trigger("select",{originalEvent:t,data:r})});this.$results.on("mouseenter",".select2-results__option[aria-selected]",function(t){var i=e(this).data("data");n.getHighlightedResults().removeClass("select2-results__option--highlighted");n.trigger("results:focus",{data:i,element:e(this)})})};i.prototype.getHighlightedResults=function(){var e=this.$results.find(".select2-results__option--highlighted");return e};i.prototype.destroy=function(){this.$results.remove()};i.prototype.ensureHighlightVisible=function(){var e=this.getHighlightedResults();if(e.length===0){return}var t=this.$results.find("[aria-selected]");var i=t.index(e);var n=this.$results.offset().top;var r=e.offset().top;var s=this.$results.scrollTop()+(r-n);var a=r-n;s-=e.outerHeight(false)*2;if(i<=2){this.$results.scrollTop(0)}else if(a>this.$results.outerHeight()||a<0){this.$results.scrollTop(s)}};i.prototype.template=function(t,i){var n=this.options.get("templateResult");var r=this.options.get("escapeMarkup");var s=n(t,i);if(s==null){i.style.display="none"}else if(typeof s==="string"){i.innerHTML=r(s)}else{e(i).append(s)}};return i});t.define("select2/keys",[],function(){var e={BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46};return e});t.define("select2/selection/base",["jquery","../utils","../keys"],function(e,t,i){function n(e,t){this.$element=e;this.options=t;n.__super__.constructor.call(this)}t.Extend(n,t.Observable);n.prototype.render=function(){var t=e('<span class="select2-selection" role="combobox" '+' aria-haspopup="true" aria-expanded="false">'+"</span>");this._tabindex=0;if(this.$element.data("old-tabindex")!=null){this._tabindex=this.$element.data("old-tabindex")}else if(this.$element.attr("tabindex")!=null){this._tabindex=this.$element.attr("tabindex")}t.attr("title",this.$element.attr("title"));t.attr("tabindex",this._tabindex);this.$selection=t;return t};n.prototype.bind=function(e,t){var n=this;var r=e.id+"-container";var s=e.id+"-results";this.container=e;this.$selection.on("focus",function(e){n.trigger("focus",e)});this.$selection.on("blur",function(e){n._handleBlur(e)});this.$selection.on("keydown",function(e){n.trigger("keypress",e);if(e.which===i.SPACE){e.preventDefault()}});e.on("results:focus",function(e){n.$selection.attr("aria-activedescendant",e.data._resultId)});e.on("selection:update",function(e){n.update(e.data)});e.on("open",function(){n.$selection.attr("aria-expanded","true");n.$selection.attr("aria-owns",s);n._attachCloseHandler(e)});e.on("close",function(){n.$selection.attr("aria-expanded","false");n.$selection.removeAttr("aria-activedescendant");n.$selection.removeAttr("aria-owns");n.$selection.focus();n._detachCloseHandler(e)});e.on("enable",function(){n.$selection.attr("tabindex",n._tabindex)});e.on("disable",function(){n.$selection.attr("tabindex","-1")})};n.prototype._handleBlur=function(t){var i=this;window.setTimeout(function(){if(document.activeElement==i.$selection[0]||e.contains(i.$selection[0],document.activeElement)){return}i.trigger("blur",t)},1)};n.prototype._attachCloseHandler=function(t){var i=this;e(document.body).on("mousedown.select2."+t.id,function(t){var i=e(t.target);var n=i.closest(".select2");var r=e(".select2.select2-container--open");r.each(function(){var t=e(this);if(this==n[0]){return}var i=t.data("element");i.select2("close")})})};n.prototype._detachCloseHandler=function(t){e(document.body).off("mousedown.select2."+t.id)};n.prototype.position=function(e,t){var i=t.find(".selection");i.append(e)};n.prototype.destroy=function(){this._detachCloseHandler(this.container)};n.prototype.update=function(e){throw new Error("The `update` method must be defined in child classes.")};return n});t.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(e,t,i,n){function r(){r.__super__.constructor.apply(this,arguments)}i.Extend(r,t);r.prototype.render=function(){var e=r.__super__.render.call(this);e.addClass("select2-selection--single");e.html('<span class="select2-selection__rendered"></span>'+'<span class="select2-selection__arrow" role="presentation">'+'<b role="presentation"></b>'+"</span>");return e};r.prototype.bind=function(e,t){var i=this;r.__super__.bind.apply(this,arguments);var n=e.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",n);this.$selection.attr("aria-labelledby",n);this.$selection.on("mousedown",function(e){if(e.which!==1){return}i.trigger("toggle",{originalEvent:e})});this.$selection.on("focus",function(e){});this.$selection.on("blur",function(e){});e.on("focus",function(t){if(!e.isOpen()){i.$selection.focus()}});e.on("selection:update",function(e){i.update(e.data)})};r.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()};r.prototype.display=function(e,t){var i=this.options.get("templateSelection");var n=this.options.get("escapeMarkup");return n(i(e,t))};r.prototype.selectionContainer=function(){return e("<span></span>")};r.prototype.update=function(e){if(e.length===0){this.clear();return}var t=e[0];var i=this.$selection.find(".select2-selection__rendered");var n=this.display(t,i);i.empty().append(n);i.prop("title",t.title||t.text)};return r});t.define("select2/selection/multiple",["jquery","./base","../utils"],function(e,t,i){function n(e,t){n.__super__.constructor.apply(this,arguments)}i.Extend(n,t);n.prototype.render=function(){var e=n.__super__.render.call(this);e.addClass("select2-selection--multiple");e.html('<ul class="select2-selection__rendered"></ul>');return e};n.prototype.bind=function(t,i){var r=this;n.__super__.bind.apply(this,arguments);this.$selection.on("click",function(e){r.trigger("toggle",{originalEvent:e})});this.$selection.on("click",".select2-selection__choice__remove",function(t){if(r.options.get("disabled")){return}var i=e(this);var n=i.parent();var s=n.data("data");r.trigger("unselect",{originalEvent:t,data:s})})};n.prototype.clear=function(){this.$selection.find(".select2-selection__rendered").empty()};n.prototype.display=function(e,t){var i=this.options.get("templateSelection");var n=this.options.get("escapeMarkup");return n(i(e,t))};n.prototype.selectionContainer=function(){var t=e('<li class="select2-selection__choice">'+'<span class="select2-selection__choice__remove" role="presentation">'+"&times;"+"</span>"+"</li>");return t};n.prototype.update=function(e){this.clear();if(e.length===0){return}var t=[];for(var n=0;n<e.length;n++){var r=e[n];var s=this.selectionContainer();var a=this.display(r,s);s.append(a);s.prop("title",r.title||r.text);s.data("data",r);t.push(s)}var o=this.$selection.find(".select2-selection__rendered");i.appendMany(o,t)};return n});t.define("select2/selection/placeholder",["../utils"],function(e){function t(e,t,i){this.placeholder=this.normalizePlaceholder(i.get("placeholder"));e.call(this,t,i)}t.prototype.normalizePlaceholder=function(e,t){if(typeof t==="string"){t={id:"",text:t}}return t};t.prototype.createPlaceholder=function(e,t){var i=this.selectionContainer();i.html(this.display(t));i.addClass("select2-selection__placeholder").removeClass("select2-selection__choice");return i};t.prototype.update=function(e,t){var i=t.length==1&&t[0].id!=this.placeholder.id;var n=t.length>1;if(n||i){return e.call(this,t)}this.clear();var r=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(r)};return t});t.define("select2/selection/allowClear",["jquery","../keys"],function(e,t){function i(){}i.prototype.bind=function(e,t,i){var n=this;e.call(this,t,i);if(this.placeholder==null){if(this.options.get("debug")&&window.console&&console.error){console.error("Select2: The `allowClear` option should be used in combination "+"with the `placeholder` option.")}}this.$selection.on("mousedown",".select2-selection__clear",function(e){n._handleClear(e)});t.on("keypress",function(e){n._handleKeyboardClear(e,t)})};i.prototype._handleClear=function(e,t){if(this.options.get("disabled")){return}var i=this.$selection.find(".select2-selection__clear");if(i.length===0){return}t.stopPropagation();var n=i.data("data");for(var r=0;r<n.length;r++){var s={data:n[r]};this.trigger("unselect",s);if(s.prevented){return}}this.$element.val(this.placeholder.id).trigger("change");this.trigger("toggle",{})};i.prototype._handleKeyboardClear=function(e,i,n){if(n.isOpen()){return}if(i.which==t.DELETE||i.which==t.BACKSPACE){this._handleClear(i)}};i.prototype.update=function(t,i){t.call(this,i);if(this.$selection.find(".select2-selection__placeholder").length>0||i.length===0){return}var n=e('<span class="select2-selection__clear">'+"&times;"+"</span>");n.data("data",i);this.$selection.find(".select2-selection__rendered").prepend(n)};return i});t.define("select2/selection/search",["jquery","../utils","../keys"],function(e,t,i){function n(e,t,i){e.call(this,t,i)}n.prototype.render=function(t){var i=e('<li class="select2-search select2-search--inline">'+'<input class="select2-search__field" type="search" tabindex="-1"'+' autocomplete="off" autocorrect="off" autocapitalize="none"'+' spellcheck="false" role="textbox" aria-autocomplete="list" />'+"</li>");this.$searchContainer=i;this.$search=i.find("input");var n=t.call(this);this._transferTabIndex();return n};n.prototype.bind=function(e,t,n){var r=this;e.call(this,t,n);t.on("open",function(){r.$search.trigger("focus")});t.on("close",function(){r.$search.val("");r.$search.removeAttr("aria-activedescendant");r.$search.trigger("focus")});t.on("enable",function(){r.$search.prop("disabled",false);r._transferTabIndex()});t.on("disable",function(){r.$search.prop("disabled",true)});t.on("focus",function(e){r.$search.trigger("focus")});t.on("results:focus",function(e){r.$search.attr("aria-activedescendant",e.id)});this.$selection.on("focusin",".select2-search--inline",function(e){r.trigger("focus",e)});this.$selection.on("focusout",".select2-search--inline",function(e){r._handleBlur(e)});this.$selection.on("keydown",".select2-search--inline",function(e){e.stopPropagation();r.trigger("keypress",e);r._keyUpPrevented=e.isDefaultPrevented();var t=e.which;if(t===i.BACKSPACE&&r.$search.val()===""){var n=r.$searchContainer.prev(".select2-selection__choice");if(n.length>0){var s=n.data("data");r.searchRemoveChoice(s);e.preventDefault()}}});var s=document.documentMode;var a=s&&s<=11;this.$selection.on("input.searchcheck",".select2-search--inline",function(e){if(a){r.$selection.off("input.search input.searchcheck");return}r.$selection.off("keyup.search")});this.$selection.on("keyup.search input.search",".select2-search--inline",function(e){if(a&&e.type==="input"){r.$selection.off("input.search input.searchcheck");return}var t=e.which;if(t==i.SHIFT||t==i.CTRL||t==i.ALT){return}if(t==i.TAB){return}r.handleSearch(e)})};n.prototype._transferTabIndex=function(e){this.$search.attr("tabindex",this.$selection.attr("tabindex"));this.$selection.attr("tabindex","-1")};n.prototype.createPlaceholder=function(e,t){this.$search.attr("placeholder",t.text)};n.prototype.update=function(e,t){var i=this.$search[0]==document.activeElement;this.$search.attr("placeholder","");e.call(this,t);this.$selection.find(".select2-selection__rendered").append(this.$searchContainer);this.resizeSearch();if(i){this.$search.focus()}};n.prototype.handleSearch=function(){this.resizeSearch();if(!this._keyUpPrevented){var e=this.$search.val();this.trigger("query",{term:e})}this._keyUpPrevented=false};n.prototype.searchRemoveChoice=function(e,t){this.trigger("unselect",{data:t});this.$search.val(t.text);this.handleSearch()};n.prototype.resizeSearch=function(){this.$search.css("width","25px");var e="";if(this.$search.attr("placeholder")!==""){e=this.$selection.find(".select2-selection__rendered").innerWidth()}else{var t=this.$search.val().length+1;e=t*.75+"em"}this.$search.css("width",e)};return n});t.define("select2/selection/eventRelay",["jquery"],function(e){function t(){}t.prototype.bind=function(t,i,n){var r=this;var s=["open","opening","close","closing","select","selecting","unselect","unselecting"];var a=["opening","closing","selecting","unselecting"];t.call(this,i,n);i.on("*",function(t,i){if(e.inArray(t,s)===-1){return}i=i||{};var n=e.Event("select2:"+t,{params:i});r.$element.trigger(n);if(e.inArray(t,a)===-1){return}i.prevented=n.isDefaultPrevented()})};return t});t.define("select2/translation",["jquery","require"],function(e,t){function i(e){this.dict=e||{}}i.prototype.all=function(){return this.dict};i.prototype.get=function(e){return this.dict[e]};i.prototype.extend=function(t){this.dict=e.extend({},t.all(),this.dict)};i._cache={};i.loadPath=function(e){if(!(e in i._cache)){var n=t(e);i._cache[e]=n}return new i(i._cache[e])};return i});t.define("select2/diacritics",[],function(){var e={"â¶":"A","ï¼¡":"A","Ã":"A","Ã":"A","Ã":"A","áº¦":"A","áº¤":"A","áºª":"A","áº¨":"A","Ã":"A","Ä":"A","Ä":"A","áº°":"A","áº®":"A","áº´":"A","áº²":"A","È¦":"A","Ç ":"A","Ã":"A","Ç":"A","áº¢":"A","Ã":"A","Çº":"A","Ç":"A","È":"A","È":"A","áº ":"A","áº¬":"A","áº¶":"A","á¸":"A","Ä":"A","Èº":"A","â±¯":"A","ê²":"AA","Ã":"AE","Ç¼":"AE","Ç¢":"AE","ê´":"AO","ê¶":"AU","ê¸":"AV","êº":"AV","ê¼":"AY","â·":"B","ï¼¢":"B","á¸":"B","á¸":"B","á¸":"B","É":"B","Æ":"B","Æ":"B","â¸":"C","ï¼£":"C","Ä":"C","Ä":"C","Ä":"C","Ä":"C","Ã":"C","á¸":"C","Æ":"C","È»":"C","ê¾":"C","â¹":"D","ï¼¤":"D","á¸":"D","Ä":"D","á¸":"D","á¸":"D","á¸":"D","á¸":"D","Ä":"D","Æ":"D","Æ":"D","Æ":"D","ê¹":"D","Ç±":"DZ","Ç":"DZ","Ç²":"Dz","Ç":"Dz","âº":"E","ï¼¥":"E","Ã":"E","Ã":"E","Ã":"E","á»":"E","áº¾":"E","á»":"E","á»":"E","áº¼":"E","Ä":"E","á¸":"E","á¸":"E","Ä":"E","Ä":"E","Ã":"E","áºº":"E","Ä":"E","È":"E","È":"E","áº¸":"E","á»":"E","È¨":"E","á¸":"E","Ä":"E","á¸":"E","á¸":"E","Æ":"E","Æ":"E","â»":"F","ï¼¦":"F","á¸":"F","Æ":"F","ê»":"F","â¼":"G","ï¼§":"G","Ç´":"G","Ä":"G","á¸ ":"G","Ä":"G","Ä ":"G","Ç¦":"G","Ä¢":"G","Ç¤":"G","Æ":"G","ê ":"G","ê½":"G","ê¾":"G","â½":"H","ï¼¨":"H","Ä¤":"H","á¸¢":"H","á¸¦":"H","È":"H","á¸¤":"H","á¸¨":"H","á¸ª":"H","Ä¦":"H","â±§":"H","â±µ":"H","ê":"H","â¾":"I","ï¼©":"I","Ã":"I","Ã":"I","Ã":"I","Ä¨":"I","Äª":"I","Ä¬":"I","Ä°":"I","Ã":"I","á¸®":"I","á»":"I","Ç":"I","È":"I","È":"I","á»":"I","Ä®":"I","á¸¬":"I","Æ":"I","â¿":"J","ï¼ª":"J","Ä´":"J","É":"J","â":"K","ï¼«":"K","á¸°":"K","Ç¨":"K","á¸²":"K","Ä¶":"K","á¸´":"K","Æ":"K","â±©":"K","ê":"K","ê":"K","ê":"K","ê¢":"K","â":"L","ï¼¬":"L","Ä¿":"L","Ä¹":"L","Ä½":"L","á¸¶":"L","á¸¸":"L","Ä»":"L","á¸¼":"L","á¸º":"L","Å":"L","È½":"L","â±¢":"L","â± ":"L","ê":"L","ê":"L","ê":"L","Ç":"LJ","Ç":"Lj","â":"M","ï¼­":"M","á¸¾":"M","á¹":"M","á¹":"M","â±®":"M","Æ":"M","â":"N","ï¼®":"N","Ç¸":"N","Å":"N","Ã":"N","á¹":"N","Å":"N","á¹":"N","Å":"N","á¹":"N","á¹":"N","È ":"N","Æ":"N","ê":"N","ê¤":"N","Ç":"NJ","Ç":"Nj","â":"O","ï¼¯":"O","Ã":"O","Ã":"O","Ã":"O","á»":"O","á»":"O","á»":"O","á»":"O","Ã":"O","á¹":"O","È¬":"O","á¹":"O","Å":"O","á¹":"O","á¹":"O","Å":"O","È®":"O","È°":"O","Ã":"O","Èª":"O","á»":"O","Å":"O","Ç":"O","È":"O","È":"O","Æ ":"O","á»":"O","á»":"O","á» ":"O","á»":"O","á»¢":"O","á»":"O","á»":"O","Çª":"O","Ç¬":"O","Ã":"O","Ç¾":"O","Æ":"O","Æ":"O","ê":"O","ê":"O","Æ¢":"OI","ê":"OO","È¢":"OU","â":"P","ï¼°":"P","á¹":"P","á¹":"P","Æ¤":"P","â±£":"P","ê":"P","ê":"P","ê":"P","â":"Q","ï¼±":"Q","ê":"Q","ê":"Q","É":"Q","â":"R","ï¼²":"R","Å":"R","á¹":"R","Å":"R","È":"R","È":"R","á¹":"R","á¹":"R","Å":"R","á¹":"R","É":"R","â±¤":"R","ê":"R","ê¦":"R","ê":"R","â":"S","ï¼³":"S","áº":"S","Å":"S","á¹¤":"S","Å":"S","á¹ ":"S","Å ":"S","á¹¦":"S","á¹¢":"S","á¹¨":"S","È":"S","Å":"S","â±¾":"S","ê¨":"S","ê":"S","â":"T","ï¼´":"T","á¹ª":"T","Å¤":"T","á¹¬":"T","È":"T","Å¢":"T","á¹°":"T","á¹®":"T","Å¦":"T","Æ¬":"T","Æ®":"T","È¾":"T","ê":"T","ê¨":"TZ","â":"U","ï¼µ":"U","Ã":"U","Ã":"U","Ã":"U","Å¨":"U","á¹¸":"U","Åª":"U","á¹º":"U","Å¬":"U","Ã":"U","Ç":"U","Ç":"U","Ç":"U","Ç":"U","á»¦":"U","Å®":"U","Å°":"U","Ç":"U","È":"U","È":"U","Æ¯":"U","á»ª":"U","á»¨":"U","á»®":"U","á»¬":"U","á»°":"U","á»¤":"U","á¹²":"U","Å²":"U","á¹¶":"U","á¹´":"U","É":"U","â":"V","ï¼¶":"V","á¹¼":"V","á¹¾":"V","Æ²":"V","ê":"V","É":"V","ê ":"VY","â":"W","ï¼·":"W","áº":"W","áº":"W","Å´":"W","áº":"W","áº":"W","áº":"W","â±²":"W","â":"X","ï¼¸":"X","áº":"X","áº":"X","â":"Y","ï¼¹":"Y","á»²":"Y","Ã":"Y","Å¶":"Y","á»¸":"Y","È²":"Y","áº":"Y","Å¸":"Y","á»¶":"Y","á»´":"Y","Æ³":"Y","É":"Y","á»¾":"Y","â":"Z","ï¼º":"Z","Å¹":"Z","áº":"Z","Å»":"Z","Å½":"Z","áº":"Z","áº":"Z","Æµ":"Z","È¤":"Z","â±¿":"Z","â±«":"Z","ê¢":"Z","â":"a","ï½":"a","áº":"a","Ã ":"a","Ã¡":"a","Ã¢":"a","áº§":"a","áº¥":"a","áº«":"a","áº©":"a","Ã£":"a","Ä":"a","Ä":"a","áº±":"a","áº¯":"a","áºµ":"a","áº³":"a","È§":"a","Ç¡":"a","Ã¤":"a","Ç":"a","áº£":"a","Ã¥":"a","Ç»":"a","Ç":"a","È":"a","È":"a","áº¡":"a","áº­":"a","áº·":"a","á¸":"a","Ä":"a","â±¥":"a","É":"a","ê³":"aa","Ã¦":"ae","Ç½":"ae","Ç£":"ae","êµ":"ao","ê·":"au","ê¹":"av","ê»":"av","ê½":"ay","â":"b","ï½":"b","á¸":"b","á¸":"b","á¸":"b","Æ":"b","Æ":"b","É":"b","â":"c","ï½":"c","Ä":"c","Ä":"c","Ä":"c","Ä":"c","Ã§":"c","á¸":"c","Æ":"c","È¼":"c","ê¿":"c","â":"c","â":"d","ï½":"d","á¸":"d","Ä":"d","á¸":"d","á¸":"d","á¸":"d","á¸":"d","Ä":"d","Æ":"d","É":"d","É":"d","êº":"d","Ç³":"dz","Ç":"dz","â":"e","ï½":"e","Ã¨":"e","Ã©":"e","Ãª":"e","á»":"e","áº¿":"e","á»":"e","á»":"e","áº½":"e","Ä":"e","á¸":"e","á¸":"e","Ä":"e","Ä":"e","Ã«":"e","áº»":"e","Ä":"e","È":"e","È":"e","áº¹":"e","á»":"e","È©":"e","á¸":"e","Ä":"e","á¸":"e","á¸":"e","É":"e","É":"e","Ç":"e","â":"f","ï½":"f","á¸":"f","Æ":"f","ê¼":"f","â":"g","ï½":"g","Çµ":"g","Ä":"g","á¸¡":"g","Ä":"g","Ä¡":"g","Ç§":"g","Ä£":"g","Ç¥":"g","É ":"g","ê¡":"g","áµ¹":"g","ê¿":"g","â":"h","ï½":"h","Ä¥":"h","á¸£":"h","á¸§":"h","È":"h","á¸¥":"h","á¸©":"h","á¸«":"h","áº":"h","Ä§":"h","â±¨":"h","â±¶":"h","É¥":"h","Æ":"hv","â":"i","ï½":"i","Ã¬":"i","Ã­":"i","Ã®":"i","Ä©":"i","Ä«":"i","Ä­":"i","Ã¯":"i","á¸¯":"i","á»":"i","Ç":"i","È":"i","È":"i","á»":"i","Ä¯":"i","á¸­":"i","É¨":"i","Ä±":"i","â":"j","ï½":"j","Äµ":"j","Ç°":"j","É":"j","â":"k","ï½":"k","á¸±":"k","Ç©":"k","á¸³":"k","Ä·":"k","á¸µ":"k","Æ":"k","â±ª":"k","ê":"k","ê":"k","ê":"k","ê£":"k","â":"l","ï½":"l","Å":"l","Äº":"l","Ä¾":"l","á¸·":"l","á¸¹":"l","Ä¼":"l","á¸½":"l","á¸»":"l","Å¿":"l","Å":"l","Æ":"l","É«":"l","â±¡":"l","ê":"l","ê":"l","ê":"l","Ç":"lj","â":"m","ï½":"m","á¸¿":"m","á¹":"m","á¹":"m","É±":"m","É¯":"m","â":"n","ï½":"n","Ç¹":"n","Å":"n","Ã±":"n","á¹":"n","Å":"n","á¹":"n","Å":"n","á¹":"n","á¹":"n","Æ":"n","É²":"n","Å":"n","ê":"n","ê¥":"n","Ç":"nj","â":"o","ï½":"o","Ã²":"o","Ã³":"o","Ã´":"o","á»":"o","á»":"o","á»":"o","á»":"o","Ãµ":"o","á¹":"o","È­":"o","á¹":"o","Å":"o","á¹":"o","á¹":"o","Å":"o","È¯":"o","È±":"o","Ã¶":"o","È«":"o","á»":"o","Å":"o","Ç":"o","È":"o","È":"o","Æ¡":"o","á»":"o","á»":"o","á»¡":"o","á»":"o","á»£":"o","á»":"o","á»":"o","Ç«":"o","Ç­":"o","Ã¸":"o","Ç¿":"o","É":"o","ê":"o","ê":"o","Éµ":"o","Æ£":"oi","È£":"ou","ê":"oo","â":"p","ï½":"p","á¹":"p","á¹":"p","Æ¥":"p","áµ½":"p","ê":"p","ê":"p","ê":"p","â ":"q","ï½":"q","É":"q","ê":"q","ê":"q","â¡":"r","ï½":"r","Å":"r","á¹":"r","Å":"r","È":"r","È":"r","á¹":"r","á¹":"r","Å":"r","á¹":"r","É":"r","É½":"r","ê":"r","ê§":"r","ê":"r","â¢":"s","ï½":"s","Ã":"s","Å":"s","á¹¥":"s","Å":"s","á¹¡":"s","Å¡":"s","á¹§":"s","á¹£":"s","á¹©":"s","È":"s","Å":"s","È¿":"s","ê©":"s","ê":"s","áº":"s","â£":"t","ï½":"t","á¹«":"t","áº":"t","Å¥":"t","á¹­":"t","È":"t","Å£":"t","á¹±":"t","á¹¯":"t","Å§":"t","Æ­":"t","Ê":"t","â±¦":"t","ê":"t","ê©":"tz","â¤":"u","ï½":"u","Ã¹":"u","Ãº":"u","Ã»":"u","Å©":"u","á¹¹":"u","Å«":"u","á¹»":"u","Å­":"u","Ã¼":"u","Ç":"u","Ç":"u","Ç":"u","Ç":"u","á»§":"u","Å¯":"u","Å±":"u","Ç":"u","È":"u","È":"u","Æ°":"u","á»«":"u","á»©":"u","á»¯":"u","á»­":"u","á»±":"u","á»¥":"u","á¹³":"u","Å³":"u","á¹·":"u","á¹µ":"u","Ê":"u","â¥":"v","ï½":"v","á¹½":"v","á¹¿":"v","Ê":"v","ê":"v","Ê":"v","ê¡":"vy","â¦":"w","ï½":"w","áº":"w","áº":"w","Åµ":"w","áº":"w","áº":"w","áº":"w","áº":"w","â±³":"w","â§":"x","ï½":"x","áº":"x","áº":"x","â¨":"y","ï½":"y","á»³":"y","Ã½":"y","Å·":"y","á»¹":"y","È³":"y","áº":"y","Ã¿":"y","á»·":"y","áº":"y","á»µ":"y","Æ´":"y","É":"y","á»¿":"y","â©":"z","ï½":"z","Åº":"z","áº":"z","Å¼":"z","Å¾":"z","áº":"z","áº":"z","Æ¶":"z","È¥":"z","É":"z","â±¬":"z","ê£":"z","Î":"Î","Î":"Î","Î":"Î","Î":"Î","Îª":"Î","Î":"Î","Î":"Î¥","Î«":"Î¥","Î":"Î©","Î¬":"Î±","Î­":"Îµ","Î®":"Î·","Î¯":"Î¹","Ï":"Î¹","Î":"Î¹","Ï":"Î¿","Ï":"Ï","Ï":"Ï","Î°":"Ï","Ï":"Ï","Ï":"Ï"};return e});t.define("select2/data/base",["../utils"],function(e){function t(e,i){t.__super__.constructor.call(this)}e.Extend(t,e.Observable);t.prototype.current=function(e){throw new Error("The `current` method must be defined in child classes.")};t.prototype.query=function(e,t){throw new Error("The `query` method must be defined in child classes.")};t.prototype.bind=function(e,t){};t.prototype.destroy=function(){};t.prototype.generateResultId=function(t,i){var n=t.id+"-result-";n+=e.generateChars(4);if(i.id!=null){n+="-"+i.id.toString()}else{n+="-"+e.generateChars(4)}return n};return t});t.define("select2/data/select",["./base","../utils","jquery"],function(e,t,i){function n(e,t){this.$element=e;this.options=t;n.__super__.constructor.call(this)}t.Extend(n,e);n.prototype.current=function(e){var t=[];var n=this;this.$element.find(":selected").each(function(){var e=i(this);var r=n.item(e);t.push(r)});e(t)};n.prototype.select=function(e){var t=this;e.selected=true;if(i(e.element).is("option")){e.element.selected=true;this.$element.trigger("change");return}if(this.$element.prop("multiple")){this.current(function(n){var r=[];e=[e];e.push.apply(e,n);for(var s=0;s<e.length;s++){var a=e[s].id;if(i.inArray(a,r)===-1){r.push(a)}}t.$element.val(r);t.$element.trigger("change")})}else{var n=e.id;this.$element.val(n);this.$element.trigger("change")}};n.prototype.unselect=function(e){var t=this;if(!this.$element.prop("multiple")){return}e.selected=false;if(i(e.element).is("option")){e.element.selected=false;this.$element.trigger("change");return}this.current(function(n){var r=[];for(var s=0;s<n.length;s++){var a=n[s].id;if(a!==e.id&&i.inArray(a,r)===-1){r.push(a)}}t.$element.val(r);t.$element.trigger("change")})};n.prototype.bind=function(e,t){var i=this;this.container=e;e.on("select",function(e){i.select(e.data)});e.on("unselect",function(e){i.unselect(e.data)})};n.prototype.destroy=function(){this.$element.find("*").each(function(){i.removeData(this,"data")})};n.prototype.query=function(e,t){var n=[];var r=this;var s=this.$element.children();s.each(function(){var t=i(this);if(!t.is("option")&&!t.is("optgroup")){return}var s=r.item(t);var a=r.matches(e,s);if(a!==null){n.push(a)}});t({results:n})};n.prototype.addOptions=function(e){t.appendMany(this.$element,e)};n.prototype.option=function(e){var t;if(e.children){t=document.createElement("optgroup");t.label=e.text}else{t=document.createElement("option");if(t.textContent!==undefined){t.textContent=e.text}else{t.innerText=e.text}}if(e.id!==undefined){t.value=e.id}if(e.disabled){t.disabled=true}if(e.selected){t.selected=true}if(e.title){t.title=e.title}var n=i(t);var r=this._normalizeItem(e);r.element=t;i.data(t,"data",r);return n};n.prototype.item=function(e){var t={};t=i.data(e[0],"data");if(t!=null){return t}if(e.is("option")){t={id:e.val(),text:e.text(),disabled:e.prop("disabled"),selected:e.prop("selected"),title:e.prop("title")}}else if(e.is("optgroup")){t={text:e.prop("label"),children:[],title:e.prop("title")};var n=e.children("option");var r=[];for(var s=0;s<n.length;s++){var a=i(n[s]);var o=this.item(a);r.push(o)}t.children=r}t=this._normalizeItem(t);t.element=e[0];i.data(e[0],"data",t);return t};n.prototype._normalizeItem=function(e){if(!i.isPlainObject(e)){e={id:e,text:e}}e=i.extend({},{text:""},e);var t={selected:false,disabled:false};if(e.id!=null){e.id=e.id.toString()}if(e.text!=null){e.text=e.text.toString()}if(e._resultId==null&&e.id&&this.container!=null){e._resultId=this.generateResultId(this.container,e)}return i.extend({},t,e)};n.prototype.matches=function(e,t){var i=this.options.get("matcher");return i(e,t)};return n});t.define("select2/data/array",["./select","../utils","jquery"],function(e,t,i){function n(e,t){var i=t.get("data")||[];n.__super__.constructor.call(this,e,t);this.addOptions(this.convertToOptions(i))}t.Extend(n,e);n.prototype.select=function(e){var t=this.$element.find("option").filter(function(t,i){return i.value==e.id.toString()});if(t.length===0){t=this.option(e);this.addOptions(t)}n.__super__.select.call(this,e)};n.prototype.convertToOptions=function(e){var n=this;var r=this.$element.find("option");var s=r.map(function(){return n.item(i(this)).id}).get();var a=[];function o(e){return function(){return i(this).val()==e.id}}for(var l=0;l<e.length;l++){var u=this._normalizeItem(e[l]);if(i.inArray(u.id,s)>=0){var f=r.filter(o(u));var c=this.item(f);var d=i.extend(true,{},u,c);var h=this.option(d);f.replaceWith(h);continue}var p=this.option(u);if(u.children){var m=this.convertToOptions(u.children);t.appendMany(p,m)}a.push(p)}return a};return n});t.define("select2/data/ajax",["./array","../utils","jquery"],function(e,t,i){function n(e,t){this.ajaxOptions=this._applyDefaults(t.get("ajax"));if(this.ajaxOptions.processResults!=null){this.processResults=this.ajaxOptions.processResults}n.__super__.constructor.call(this,e,t)}t.Extend(n,e);n.prototype._applyDefaults=function(e){var t={data:function(e){return i.extend({},e,{q:e.term})},transport:function(e,t,n){var r=i.ajax(e);r.then(t);r.fail(n);return r}};return i.extend({},t,e,true)};n.prototype.processResults=function(e){return e};n.prototype.query=function(e,t){var n=[];var r=this;if(this._request!=null){if(i.isFunction(this._request.abort)){this._request.abort()}this._request=null}var s=i.extend({type:"GET"},this.ajaxOptions);if(typeof s.url==="function"){s.url=s.url.call(this.$element,e)}if(typeof s.data==="function"){s.data=s.data.call(this.$element,e)}function a(){var n=s.transport(s,function(n){var s=r.processResults(n,e);if(r.options.get("debug")&&window.console&&console.error){if(!s||!s.results||!i.isArray(s.results)){console.error("Select2: The AJAX results did not return an array in the "+"`results` key of the response.")}}t(s)},function(){if(n.status&&n.status==="0"){return}r.trigger("results:message",{message:"errorLoading"})});r._request=n}if(this.ajaxOptions.delay&&e.term!=null){if(this._queryTimeout){window.clearTimeout(this._queryTimeout)}this._queryTimeout=window.setTimeout(a,this.ajaxOptions.delay)}else{a()}};return n});t.define("select2/data/tags",["jquery"],function(e){function t(t,i,n){var r=n.get("tags");var s=n.get("createTag");if(s!==undefined){this.createTag=s}var a=n.get("insertTag");if(a!==undefined){this.insertTag=a}t.call(this,i,n);if(e.isArray(r)){for(var o=0;o<r.length;o++){var l=r[o];var u=this._normalizeItem(l);var f=this.option(u);this.$element.append(f)}}}t.prototype.query=function(e,t,i){var n=this;this._removeOldTags();if(t.term==null||t.page!=null){e.call(this,t,i);return}function r(e,s){var a=e.results;for(var o=0;o<a.length;o++){var l=a[o];var u=l.children!=null&&!r({results:l.children},true);var f=(l.text||"").toUpperCase();var c=(t.term||"").toUpperCase();var d=f===c;if(d||u){if(s){return false}e.data=a;i(e);return}}if(s){return true}var h=n.createTag(t);if(h!=null){var p=n.option(h);p.attr("data-select2-tag",true);n.addOptions([p]);n.insertTag(a,h)}e.results=a;i(e)}e.call(this,t,r)};t.prototype.createTag=function(t,i){var n=e.trim(i.term);if(n===""){return null}return{id:n,text:n}};t.prototype.insertTag=function(e,t,i){t.unshift(i)};t.prototype._removeOldTags=function(t){var i=this._lastTag;var n=this.$element.find("option[data-select2-tag]");n.each(function(){if(this.selected){return}e(this).remove()})};return t});t.define("select2/data/tokenizer",["jquery"],function(e){function t(e,t,i){var n=i.get("tokenizer");if(n!==undefined){this.tokenizer=n}e.call(this,t,i)}t.prototype.bind=function(e,t,i){e.call(this,t,i);this.$search=t.dropdown.$search||t.selection.$search||i.find(".select2-search__field")};t.prototype.query=function(t,i,n){var r=this;function s(t){var i=r._normalizeItem(t);var n=r.$element.find("option").filter(function(){return e(this).val()===i.id});if(!n.length){var s=r.option(i);s.attr("data-select2-tag",true);r._removeOldTags();r.addOptions([s])}a(i)}function a(e){r.trigger("select",{data:e})}i.term=i.term||"";var o=this.tokenizer(i,this.options,s);if(o.term!==i.term){if(this.$search.length){this.$search.val(o.term);this.$search.focus()}i.term=o.term}t.call(this,i,n)};t.prototype.tokenizer=function(t,i,n,r){var s=n.get("tokenSeparators")||[];var a=i.term;var o=0;var l=this.createTag||function(e){return{id:e.term,text:e.term}};while(o<a.length){var u=a[o];if(e.inArray(u,s)===-1){o++;continue}var f=a.substr(0,o);var c=e.extend({},i,{term:f});var d=l(c);if(d==null){o++;continue}r(d);a=a.substr(o+1)||"";o=0}return{term:a}};return t});t.define("select2/data/minimumInputLength",[],function(){function e(e,t,i){this.minimumInputLength=i.get("minimumInputLength");e.call(this,t,i)}e.prototype.query=function(e,t,i){t.term=t.term||"";if(t.term.length<this.minimumInputLength){this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:t.term,params:t}});return}e.call(this,t,i)};return e});t.define("select2/data/maximumInputLength",[],function(){function e(e,t,i){this.maximumInputLength=i.get("maximumInputLength");e.call(this,t,i)}e.prototype.query=function(e,t,i){t.term=t.term||"";if(this.maximumInputLength>0&&t.term.length>this.maximumInputLength){this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:t.term,params:t}});return}e.call(this,t,i)};return e});t.define("select2/data/maximumSelectionLength",[],function(){function e(e,t,i){this.maximumSelectionLength=i.get("maximumSelectionLength");e.call(this,t,i)}e.prototype.query=function(e,t,i){var n=this;this.current(function(r){var s=r!=null?r.length:0;if(n.maximumSelectionLength>0&&s>=n.maximumSelectionLength){n.trigger("results:message",{message:"maximumSelected",args:{maximum:n.maximumSelectionLength}});return}e.call(n,t,i)})};return e});t.define("select2/dropdown",["jquery","./utils"],function(e,t){function i(e,t){this.$element=e;this.options=t;i.__super__.constructor.call(this)}t.Extend(i,t.Observable);i.prototype.render=function(){var t=e('<span class="select2-dropdown">'+'<span class="select2-results"></span>'+"</span>");t.attr("dir",this.options.get("dir"));this.$dropdown=t;return t};i.prototype.bind=function(){};i.prototype.position=function(e,t){};i.prototype.destroy=function(){this.$dropdown.remove()};return i});t.define("select2/dropdown/search",["jquery","../utils"],function(e,t){function i(){}i.prototype.render=function(t){var i=t.call(this);var n=e('<span class="select2-search select2-search--dropdown">'+'<input class="select2-search__field" type="search" tabindex="-1"'+' autocomplete="off" autocorrect="off" autocapitalize="none"'+' spellcheck="false" role="textbox" />'+"</span>");this.$searchContainer=n;this.$search=n.find("input");i.prepend(n);return i};i.prototype.bind=function(t,i,n){var r=this;t.call(this,i,n);this.$search.on("keydown",function(e){r.trigger("keypress",e);r._keyUpPrevented=e.isDefaultPrevented()});this.$search.on("input",function(t){e(this).off("keyup")});this.$search.on("keyup input",function(e){r.handleSearch(e)});i.on("open",function(){r.$search.attr("tabindex",0);r.$search.focus();window.setTimeout(function(){r.$search.focus()},0)});i.on("close",function(){r.$search.attr("tabindex",-1);r.$search.val("")});i.on("focus",function(){if(!i.isOpen()){r.$search.focus()}});i.on("results:all",function(e){if(e.query.term==null||e.query.term===""){var t=r.showSearch(e);if(t){r.$searchContainer.removeClass("select2-search--hide")}else{r.$searchContainer.addClass("select2-search--hide")}}})};i.prototype.handleSearch=function(e){if(!this._keyUpPrevented){var t=this.$search.val();this.trigger("query",{term:t})}this._keyUpPrevented=false};i.prototype.showSearch=function(e,t){return true};return i});t.define("select2/dropdown/hidePlaceholder",[],function(){function e(e,t,i,n){this.placeholder=this.normalizePlaceholder(i.get("placeholder"));e.call(this,t,i,n)}e.prototype.append=function(e,t){t.results=this.removePlaceholder(t.results);e.call(this,t)};e.prototype.normalizePlaceholder=function(e,t){if(typeof t==="string"){t={id:"",text:t}}return t};e.prototype.removePlaceholder=function(e,t){var i=t.slice(0);for(var n=t.length-1;n>=0;n--){var r=t[n];if(this.placeholder.id===r.id){i.splice(n,1)}}return i};return e});t.define("select2/dropdown/infiniteScroll",["jquery"],function(e){function t(e,t,i,n){this.lastParams={};e.call(this,t,i,n);this.$loadingMore=this.createLoadingMore();this.loading=false}t.prototype.append=function(e,t){this.$loadingMore.remove();this.loading=false;e.call(this,t);if(this.showLoadingMore(t)){this.$results.append(this.$loadingMore)}};t.prototype.bind=function(t,i,n){var r=this;t.call(this,i,n);i.on("query",function(e){r.lastParams=e;r.loading=true});i.on("query:append",function(e){r.lastParams=e;r.loading=true});this.$results.on("scroll",function(){var t=e.contains(document.documentElement,r.$loadingMore[0]);if(r.loading||!t){return}var i=r.$results.offset().top+r.$results.outerHeight(false);var n=r.$loadingMore.offset().top+r.$loadingMore.outerHeight(false);if(i+50>=n){r.loadMore()}})};t.prototype.loadMore=function(){this.loading=true;var t=e.extend({},{page:1},this.lastParams);t.page++;this.trigger("query:append",t)};t.prototype.showLoadingMore=function(e,t){return t.pagination&&t.pagination.more};t.prototype.createLoadingMore=function(){var t=e("<li "+'class="select2-results__option select2-results__option--load-more"'+'role="treeitem" aria-disabled="true"></li>');var i=this.options.get("translations").get("loadingMore");t.html(i(this.lastParams));return t};return t});t.define("select2/dropdown/attachBody",["jquery","../utils"],function(e,t){function i(t,i,n){this.$dropdownParent=n.get("dropdownParent")||e(document.body);t.call(this,i,n)}i.prototype.bind=function(e,t,i){var n=this;var r=false;e.call(this,t,i);t.on("open",function(){n._showDropdown();n._attachPositioningHandler(t);if(!r){r=true;t.on("results:all",function(){n._positionDropdown();n._resizeDropdown()});t.on("results:append",function(){n._positionDropdown();n._resizeDropdown()})}});t.on("close",function(){n._hideDropdown();n._detachPositioningHandler(t)});this.$dropdownContainer.on("mousedown",function(e){e.stopPropagation()})};i.prototype.destroy=function(e){e.call(this);this.$dropdownContainer.remove()};i.prototype.position=function(e,t,i){t.attr("class",i.attr("class"));t.removeClass("select2");t.addClass("select2-container--open");t.css({position:"absolute",top:-999999});this.$container=i};i.prototype.render=function(t){var i=e("<span></span>");var n=t.call(this);i.append(n);this.$dropdownContainer=i;return i};i.prototype._hideDropdown=function(e){this.$dropdownContainer.detach()};i.prototype._attachPositioningHandler=function(i,n){var r=this;var s="scroll.select2."+n.id;var a="resize.select2."+n.id;var o="orientationchange.select2."+n.id;var l=this.$container.parents().filter(t.hasScroll);l.each(function(){e(this).data("select2-scroll-position",{x:e(this).scrollLeft(),y:e(this).scrollTop()})});l.on(s,function(t){var i=e(this).data("select2-scroll-position");e(this).scrollTop(i.y)});e(window).on(s+" "+a+" "+o,function(e){r._positionDropdown();r._resizeDropdown()})};i.prototype._detachPositioningHandler=function(i,n){var r="scroll.select2."+n.id;var s="resize.select2."+n.id;var a="orientationchange.select2."+n.id;var o=this.$container.parents().filter(t.hasScroll);o.off(r);e(window).off(r+" "+s+" "+a)};i.prototype._positionDropdown=function(){var t=e(window);var i=this.$dropdown.hasClass("select2-dropdown--above");var n=this.$dropdown.hasClass("select2-dropdown--below");var r=null;var s=this.$container.offset();s.bottom=s.top+this.$container.outerHeight(false);var a={height:this.$container.outerHeight(false)};a.top=s.top;a.bottom=s.top+a.height;var o={height:this.$dropdown.outerHeight(false)};var l={top:t.scrollTop(),bottom:t.scrollTop()+t.height()};var u=l.top<s.top-o.height;var f=l.bottom>s.bottom+o.height;var c={left:s.left,top:a.bottom};var d=this.$dropdownParent;if(d.css("position")==="static"){d=d.offsetParent()}var h=d.offset();c.top-=h.top;c.left-=h.left;if(!i&&!n){r="below"}if(!f&&u&&!i){r="above"}else if(!u&&f&&i){r="below"}if(r=="above"||i&&r!=="below"){c.top=a.top-h.top-o.height}if(r!=null){this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+r);this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+r)}this.$dropdownContainer.css(c)};i.prototype._resizeDropdown=function(){var e={width:this.$container.outerWidth(false)+"px"};if(this.options.get("dropdownAutoWidth")){e.minWidth=e.width;e.position="relative";e.width="auto"}this.$dropdown.css(e)};i.prototype._showDropdown=function(e){this.$dropdownContainer.appendTo(this.$dropdownParent);this._positionDropdown();this._resizeDropdown()};return i});t.define("select2/dropdown/minimumResultsForSearch",[],function(){function e(t){var i=0;for(var n=0;n<t.length;n++){var r=t[n];if(r.children){i+=e(r.children)}else{i++}}return i}function t(e,t,i,n){this.minimumResultsForSearch=i.get("minimumResultsForSearch");if(this.minimumResultsForSearch<0){this.minimumResultsForSearch=Infinity}e.call(this,t,i,n)}t.prototype.showSearch=function(t,i){if(e(i.data.results)<this.minimumResultsForSearch){return false}return t.call(this,i)};return t});t.define("select2/dropdown/selectOnClose",[],function(){function e(){}e.prototype.bind=function(e,t,i){var n=this;e.call(this,t,i);t.on("close",function(e){n._handleSelectOnClose(e)})};e.prototype._handleSelectOnClose=function(e,t){if(t&&t.originalSelect2Event!=null){var i=t.originalSelect2Event;if(i._type==="select"||i._type==="unselect"){return}}var n=this.getHighlightedResults();if(n.length<1){return}var r=n.data("data");if(r.element!=null&&r.element.selected||r.element==null&&r.selected){return}this.trigger("select",{data:r})};return e});t.define("select2/dropdown/closeOnSelect",[],function(){function e(){}e.prototype.bind=function(e,t,i){var n=this;e.call(this,t,i);t.on("select",function(e){n._selectTriggered(e)});t.on("unselect",function(e){n._selectTriggered(e)})};e.prototype._selectTriggered=function(e,t){var i=t.originalEvent;if(i&&i.ctrlKey){return}this.trigger("close",{originalEvent:i,originalSelect2Event:t})};return e});t.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(e){var t=e.input.length-e.maximum;var i="Please delete "+t+" character";if(t!=1){i+="s"}return i},inputTooShort:function(e){var t=e.minimum-e.input.length;var i="Please enter "+t+" or more characters";return i},loadingMore:function(){return"Loading more resultsâ¦"},maximumSelected:function(e){var t="You can only select "+e.maximum+" item";if(e.maximum!=1){t+="s"}return t},noResults:function(){return"No results found"},searching:function(){return"Searchingâ¦"}}});t.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],function(e,t,i,n,r,s,a,o,l,u,f,c,d,h,p,m,g,v,y,b,w,x,C,T,_,k,D,S,$){function A(){this.reset()}A.prototype.apply=function(c){c=e.extend(true,{},this.defaults,c);if(c.dataAdapter==null){if(c.ajax!=null){c.dataAdapter=p}else if(c.data!=null){c.dataAdapter=h}else{c.dataAdapter=d}if(c.minimumInputLength>0){c.dataAdapter=u.Decorate(c.dataAdapter,v)}if(c.maximumInputLength>0){c.dataAdapter=u.Decorate(c.dataAdapter,y)}if(c.maximumSelectionLength>0){c.dataAdapter=u.Decorate(c.dataAdapter,b)}if(c.tags){c.dataAdapter=u.Decorate(c.dataAdapter,m)}if(c.tokenSeparators!=null||c.tokenizer!=null){c.dataAdapter=u.Decorate(c.dataAdapter,g)}if(c.query!=null){var $=t(c.amdBase+"compat/query");c.dataAdapter=u.Decorate(c.dataAdapter,$)}if(c.initSelection!=null){var A=t(c.amdBase+"compat/initSelection");c.dataAdapter=u.Decorate(c.dataAdapter,A)}}if(c.resultsAdapter==null){c.resultsAdapter=i;if(c.ajax!=null){c.resultsAdapter=u.Decorate(c.resultsAdapter,T)}if(c.placeholder!=null){c.resultsAdapter=u.Decorate(c.resultsAdapter,C)}if(c.selectOnClose){c.resultsAdapter=u.Decorate(c.resultsAdapter,D)}}if(c.dropdownAdapter==null){if(c.multiple){c.dropdownAdapter=w}else{var E=u.Decorate(w,x);c.dropdownAdapter=E}if(c.minimumResultsForSearch!==0){c.dropdownAdapter=u.Decorate(c.dropdownAdapter,k)}if(c.closeOnSelect){c.dropdownAdapter=u.Decorate(c.dropdownAdapter,S)}if(c.dropdownCssClass!=null||c.dropdownCss!=null||c.adaptDropdownCssClass!=null){var M=t(c.amdBase+"compat/dropdownCss");c.dropdownAdapter=u.Decorate(c.dropdownAdapter,M)}c.dropdownAdapter=u.Decorate(c.dropdownAdapter,_)}if(c.selectionAdapter==null){if(c.multiple){c.selectionAdapter=r}else{c.selectionAdapter=n}if(c.placeholder!=null){c.selectionAdapter=u.Decorate(c.selectionAdapter,s)}if(c.allowClear){c.selectionAdapter=u.Decorate(c.selectionAdapter,a)}if(c.multiple){c.selectionAdapter=u.Decorate(c.selectionAdapter,o)}if(c.containerCssClass!=null||c.containerCss!=null||c.adaptContainerCssClass!=null){var P=t(c.amdBase+"compat/containerCss");c.selectionAdapter=u.Decorate(c.selectionAdapter,P)}c.selectionAdapter=u.Decorate(c.selectionAdapter,l)}if(typeof c.language==="string"){if(c.language.indexOf("-")>0){var O=c.language.split("-");var I=O[0];c.language=[c.language,I]}else{c.language=[c.language]}}if(e.isArray(c.language)){var F=new f;c.language.push("en");var N=c.language;for(var j=0;j<N.length;j++){var U=N[j];var L={};try{L=f.loadPath(U)}catch(e){try{U=this.defaults.amdLanguageBase+U;L=f.loadPath(U)}catch(e){if(c.debug&&window.console&&console.warn){console.warn('Select2: The language file for "'+U+'" could not be '+"automatically loaded. A fallback will be used instead.")}continue}}F.extend(L)}c.translations=F}else{var R=f.loadPath(this.defaults.amdLanguageBase+"en");var H=new f(c.language);H.extend(R);c.translations=H}return c};A.prototype.reset=function(){function t(e){function t(e){return c[e]||e}return e.replace(/[^\u0000-\u007E]/g,t)}function i(n,r){if(e.trim(n.term)===""){return r}if(r.children&&r.children.length>0){var s=e.extend(true,{},r);for(var a=r.children.length-1;a>=0;a--){var o=r.children[a];var l=i(n,o);if(l==null){s.children.splice(a,1)}}if(s.children.length>0){return s}return i(n,s)}var u=t(r.text).toUpperCase();var f=t(n.term).toUpperCase();if(u.indexOf(f)>-1){return r}return null}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:true,debug:false,dropdownAutoWidth:false,escapeMarkup:u.escapeMarkup,language:$,matcher:i,minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:false,sorter:function(e){return e},templateResult:function(e){return e.text},templateSelection:function(e){return e.text},theme:"default",width:"resolve"}};A.prototype.set=function(t,i){var n=e.camelCase(t);var r={};r[n]=i;var s=u._convertData(r);e.extend(this.defaults,s)};var E=new A;return E});t.define("select2/options",["require","jquery","./defaults","./utils"],function(e,t,i,n){function r(t,r){this.options=t;if(r!=null){this.fromElement(r)}this.options=i.apply(this.options);if(r&&r.is("input")){var s=e(this.get("amdBase")+"compat/inputData");this.options.dataAdapter=n.Decorate(this.options.dataAdapter,s)}}r.prototype.fromElement=function(e){var i=["select2"];if(this.options.multiple==null){this.options.multiple=e.prop("multiple")}if(this.options.disabled==null){this.options.disabled=e.prop("disabled")}if(this.options.language==null){if(e.prop("lang")){this.options.language=e.prop("lang").toLowerCase()}else if(e.closest("[lang]").prop("lang")){this.options.language=e.closest("[lang]").prop("lang")}}if(this.options.dir==null){if(e.prop("dir")){this.options.dir=e.prop("dir")}else if(e.closest("[dir]").prop("dir")){this.options.dir=e.closest("[dir]").prop("dir")}else{this.options.dir="ltr"}}e.prop("disabled",this.options.disabled);e.prop("multiple",this.options.multiple);if(e.data("select2Tags")){if(this.options.debug&&window.console&&console.warn){console.warn("Select2: The `data-select2-tags` attribute has been changed to "+'use the `data-data` and `data-tags="true"` attributes and will be '+"removed in future versions of Select2.")}e.data("data",e.data("select2Tags"));e.data("tags",true)}if(e.data("ajaxUrl")){if(this.options.debug&&window.console&&console.warn){console.warn("Select2: The `data-ajax-url` attribute has been changed to "+"`data-ajax--url` and support for the old attribute will be removed"+" in future versions of Select2.")}e.attr("ajax--url",e.data("ajaxUrl"));e.data("ajax--url",e.data("ajaxUrl"))}var r={};if(t.fn.jquery&&t.fn.jquery.substr(0,2)=="1."&&e[0].dataset){r=t.extend(true,{},e[0].dataset,e.data())}else{r=e.data()}var s=t.extend(true,{},r);s=n._convertData(s);for(var a in s){if(t.inArray(a,i)>-1){continue}if(t.isPlainObject(this.options[a])){t.extend(this.options[a],s[a])}else{this.options[a]=s[a]}}return this};r.prototype.get=function(e){return this.options[e]};r.prototype.set=function(e,t){this.options[e]=t};return r});t.define("select2/core",["jquery","./options","./utils","./keys"],function(e,t,i,n){var r=function(e,i){if(e.data("select2")!=null){e.data("select2").destroy()}this.$element=e;this.id=this._generateId(e);i=i||{};this.options=new t(i,e);r.__super__.constructor.call(this);var n=e.attr("tabindex")||0;e.data("old-tabindex",n);e.attr("tabindex","-1");var s=this.options.get("dataAdapter");this.dataAdapter=new s(e,this.options);var a=this.render();this._placeContainer(a);var o=this.options.get("selectionAdapter");this.selection=new o(e,this.options);this.$selection=this.selection.render();this.selection.position(this.$selection,a);var l=this.options.get("dropdownAdapter");this.dropdown=new l(e,this.options);this.$dropdown=this.dropdown.render();this.dropdown.position(this.$dropdown,a);var u=this.options.get("resultsAdapter");this.results=new u(e,this.options,this.dataAdapter);this.$results=this.results.render();this.results.position(this.$results,this.$dropdown);var f=this;this._bindAdapters();this._registerDomEvents();this._registerDataEvents();this._registerSelectionEvents();this._registerDropdownEvents();this._registerResultsEvents();this._registerEvents();this.dataAdapter.current(function(e){f.trigger("selection:update",{data:e})});e.addClass("select2-hidden-accessible");e.attr("aria-hidden","true");this._syncAttributes();e.data("select2",this)};i.Extend(r,i.Observable);r.prototype._generateId=function(e){var t="";if(e.attr("id")!=null){t=e.attr("id")}else if(e.attr("name")!=null){t=e.attr("name")+"-"+i.generateChars(2)}else{t=i.generateChars(4)}t=t.replace(/(:|\.|\[|\]|,)/g,"");t="select2-"+t;return t};r.prototype._placeContainer=function(e){e.insertAfter(this.$element);var t=this._resolveWidth(this.$element,this.options.get("width"));if(t!=null){e.css("width",t)}};r.prototype._resolveWidth=function(e,t){var i=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if(t=="resolve"){var n=this._resolveWidth(e,"style");if(n!=null){return n}return this._resolveWidth(e,"element")}if(t=="element"){var r=e.outerWidth(false);if(r<=0){return"auto"}return r+"px"}if(t=="style"){var s=e.attr("style");if(typeof s!=="string"){return null}var a=s.split(";");for(var o=0,l=a.length;o<l;o=o+1){var u=a[o].replace(/\s/g,"");var f=u.match(i);if(f!==null&&f.length>=1){return f[1]}}return null}return t};r.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container);this.selection.bind(this,this.$container);this.dropdown.bind(this,this.$container);this.results.bind(this,this.$container)};r.prototype._registerDomEvents=function(){var t=this;this.$element.on("change.select2",function(){t.dataAdapter.current(function(e){t.trigger("selection:update",{data:e})})});this.$element.on("focus.select2",function(e){t.trigger("focus",e)});this._syncA=i.bind(this._syncAttributes,this);this._syncS=i.bind(this._syncSubtree,this);if(this.$element[0].attachEvent){this.$element[0].attachEvent("onpropertychange",this._syncA)}var n=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;if(n!=null){this._observer=new n(function(i){e.each(i,t._syncA);e.each(i,t._syncS)});this._observer.observe(this.$element[0],{attributes:true,childList:true,subtree:false})}else if(this.$element[0].addEventListener){this.$element[0].addEventListener("DOMAttrModified",t._syncA,false);this.$element[0].addEventListener("DOMNodeInserted",t._syncS,false);this.$element[0].addEventListener("DOMNodeRemoved",t._syncS,false)}};r.prototype._registerDataEvents=function(){var e=this;this.dataAdapter.on("*",function(t,i){e.trigger(t,i)})};r.prototype._registerSelectionEvents=function(){var t=this;var i=["toggle","focus"];this.selection.on("toggle",function(){t.toggleDropdown()});this.selection.on("focus",function(e){t.focus(e)});this.selection.on("*",function(n,r){if(e.inArray(n,i)!==-1){return}t.trigger(n,r)})};r.prototype._registerDropdownEvents=function(){var e=this;this.dropdown.on("*",function(t,i){e.trigger(t,i)})};r.prototype._registerResultsEvents=function(){var e=this;this.results.on("*",function(t,i){e.trigger(t,i)})};r.prototype._registerEvents=function(){var e=this;this.on("open",function(){e.$container.addClass("select2-container--open")});this.on("close",function(){e.$container.removeClass("select2-container--open")});this.on("enable",function(){e.$container.removeClass("select2-container--disabled")});this.on("disable",function(){e.$container.addClass("select2-container--disabled")});this.on("blur",function(){e.$container.removeClass("select2-container--focus")});this.on("query",function(t){if(!e.isOpen()){e.trigger("open",{})}this.dataAdapter.query(t,function(i){e.trigger("results:all",{data:i,query:t})})});this.on("query:append",function(t){this.dataAdapter.query(t,function(i){e.trigger("results:append",{data:i,query:t})})});this.on("keypress",function(t){var i=t.which;if(e.isOpen()){if(i===n.ESC||i===n.TAB||i===n.UP&&t.altKey){e.close();t.preventDefault()}else if(i===n.ENTER){e.trigger("results:select",{});t.preventDefault()}else if(i===n.SPACE&&t.ctrlKey){e.trigger("results:toggle",{});t.preventDefault()}else if(i===n.UP){e.trigger("results:previous",{});t.preventDefault()}else if(i===n.DOWN){e.trigger("results:next",{});t.preventDefault()}}else{if(i===n.ENTER||i===n.SPACE||i===n.DOWN&&t.altKey){e.open();t.preventDefault()}}})};r.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled"));if(this.options.get("disabled")){if(this.isOpen()){this.close()}this.trigger("disable",{})}else{this.trigger("enable",{})}};r.prototype._syncSubtree=function(e,t){var i=false;var n=this;if(e&&e.target&&(e.target.nodeName!=="OPTION"&&e.target.nodeName!=="OPTGROUP")){return}if(!t){i=true}else if(t.addedNodes&&t.addedNodes.length>0){for(var r=0;r<t.addedNodes.length;r++){var s=t.addedNodes[r];if(s.selected){i=true}}}else if(t.removedNodes&&t.removedNodes.length>0){i=true}if(i){this.dataAdapter.current(function(e){n.trigger("selection:update",{data:e})})}};r.prototype.trigger=function(e,t){var i=r.__super__.trigger;var n={open:"opening",close:"closing",select:"selecting",unselect:"unselecting"};if(t===undefined){t={}}if(e in n){var s=n[e];var a={prevented:false,name:e,args:t};i.call(this,s,a);if(a.prevented){t.prevented=true;return}}i.call(this,e,t)};r.prototype.toggleDropdown=function(){if(this.options.get("disabled")){return}if(this.isOpen()){this.close()}else{this.open()}};r.prototype.open=function(){if(this.isOpen()){return}this.trigger("query",{})};r.prototype.close=function(){if(!this.isOpen()){return}this.trigger("close",{})};r.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")};r.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")};r.prototype.focus=function(e){if(this.hasFocus()){return}this.$container.addClass("select2-container--focus");this.trigger("focus",{})};r.prototype.enable=function(e){if(this.options.get("debug")&&window.console&&console.warn){console.warn('Select2: The `select2("enable")` method has been deprecated and will'+' be removed in later Select2 versions. Use $element.prop("disabled")'+" instead.")}if(e==null||e.length===0){e=[true]}var t=!e[0];this.$element.prop("disabled",t)};r.prototype.data=function(){if(this.options.get("debug")&&arguments.length>0&&window.console&&console.warn){console.warn('Select2: Data can no longer be set using `select2("data")`. You '+"should consider setting the value instead using `$element.val()`.")}var e=[];this.dataAdapter.current(function(t){e=t});return e};r.prototype.val=function(t){if(this.options.get("debug")&&window.console&&console.warn){console.warn('Select2: The `select2("val")` method has been deprecated and will be'+" removed in later Select2 versions. Use $element.val() instead.")}if(t==null||t.length===0){return this.$element.val()}var i=t[0];if(e.isArray(i)){i=e.map(i,function(e){return e.toString()})}this.$element.val(i).trigger("change")};r.prototype.destroy=function(){this.$container.remove();if(this.$element[0].detachEvent){this.$element[0].detachEvent("onpropertychange",this._syncA)}if(this._observer!=null){this._observer.disconnect();this._observer=null}else if(this.$element[0].removeEventListener){this.$element[0].removeEventListener("DOMAttrModified",this._syncA,false);this.$element[0].removeEventListener("DOMNodeInserted",this._syncS,false);this.$element[0].removeEventListener("DOMNodeRemoved",this._syncS,false)}this._syncA=null;this._syncS=null;this.$element.off(".select2");this.$element.attr("tabindex",this.$element.data("old-tabindex"));this.$element.removeClass("select2-hidden-accessible");this.$element.attr("aria-hidden","false");this.$element.removeData("select2");this.dataAdapter.destroy();this.selection.destroy();this.dropdown.destroy();this.results.destroy();this.dataAdapter=null;this.selection=null;this.dropdown=null;this.results=null};r.prototype.render=function(){var t=e('<span class="select2 select2-container">'+'<span class="selection"></span>'+'<span class="dropdown-wrapper" aria-hidden="true"></span>'+"</span>");t.attr("dir",this.options.get("dir"));this.$container=t;this.$container.addClass("select2-container--"+this.options.get("theme"));t.data("element",this.$element);return t};return r});t.define("jquery-mousewheel",["jquery"],function(e){return e});t.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults"],function(e,t,i,n){if(e.fn.select2==null){var r=["open","close","destroy"];e.fn.select2=function(t){t=t||{};if(typeof t==="object"){this.each(function(){var n=e.extend(true,{},t);var r=new i(e(this),n)});return this}else if(typeof t==="string"){var n;var s=Array.prototype.slice.call(arguments,1);this.each(function(){var i=e(this).data("select2");if(i==null&&window.console&&console.error){console.error("The select2('"+t+"') method was called on an "+"element that is not using Select2.")}n=i[t].apply(i,s)});if(e.inArray(t,r)>-1){return this}return n}else{throw new Error("Invalid arguments for Select2: "+t)}}}if(e.fn.select2.defaults==null){e.fn.select2.defaults=n}return i});return{define:t.define,require:t.require}}();var i=t.require("jquery.select2");e.fn.select2.amd=t;return i});var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(e,t,i){e instanceof String&&(e=String(e));for(var n=e.length,r=0;r<n;r++){var s=e[r];if(t.call(i,s,r,e))return{i:r,v:s}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,i){e!=Array.prototype&&e!=Object.prototype&&(e[t]=i.value)};$jscomp.getGlobal=function(e){return"undefined"!=typeof window&&window===e?e:"undefined"!=typeof global&&null!=global?global:e};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(e,t,i,n){if(t){i=$jscomp.global;e=e.split(".");for(n=0;n<e.length-1;n++){var r=e[n];r in i||(i[r]={});i=i[r]}e=e[e.length-1];n=i[e];t=t(n);t!=n&&null!=t&&$jscomp.defineProperty(i,e,{configurable:!0,writable:!0,value:t})}};$jscomp.polyfill("Array.prototype.find",function(e){return e?e:function(e,t){return $jscomp.findInternal(this,e,t).v}},"es6","es3");(function(e){e.fn.extend({tableExport:function(t){function i(t){var i=[];n(t,"tbody").each(function(){i.push.apply(i,r(e(this),M.tbodySelector))});M.tfootSelector.length&&n(t,"tfoot").each(function(){i.push.apply(i,r(e(this),M.tfootSelector))});return i}function n(t,i){var n=t.parents("table").length;return t.find(i).filter(function(){return e(this).closest("table").parents("table").length===n})}function r(t,i){return t.find(i).filter(function(){return 0===e(this).find("table").length&&1===e(this).parents("table").length})}function s(t){var i=[];e(t).find("thead").first().find("th").each(function(t,n){void 0!==e(n).attr("data-field")?i[t]=e(n).attr("data-field"):i[t]=t.toString()});return i}function a(t){var i="undefined"!==typeof t[0].cellIndex,n="undefined"!==typeof t[0].rowIndex,r=i||n?o(t):t.is(":visible"),s=t.data("tableexport-display");i&&"none"!=s&&"always"!=s&&(t=e(t[0].parentNode),n="undefined"!==typeof t[0].rowIndex,s=t.data("tableexport-display"));n&&"none"!=s&&"always"!=s&&(s=t.closest("table").data("tableexport-display"));return"none"!==s&&(1==r||"always"==s)}function o(e){var t=[];H&&(t=R.filter(function(){var t=!1;this.nodeType==e[0].nodeType&&("undefined"!==typeof this.rowIndex&&this.rowIndex==e[0].rowIndex?t=!0:"undefined"!==typeof this.cellIndex&&this.cellIndex==e[0].cellIndex&&"undefined"!==typeof this.parentNode.rowIndex&&"undefined"!==typeof e[0].parentNode.rowIndex&&this.parentNode.rowIndex==e[0].parentNode.rowIndex&&(t=!0));return t}));return 0==H||0==t.length}function l(t,i,n){var r=!1;a(t)?0<M.ignoreColumn.length&&(-1!=e.inArray(n,M.ignoreColumn)||-1!=e.inArray(n-i,M.ignoreColumn)||U.length>n&&"undefined"!=typeof U[n]&&-1!=e.inArray(U[n],M.ignoreColumn))&&(r=!0):r=!0;return r}function u(t,i,n,r,s){if("function"===typeof s){var o=!1;"function"===typeof M.onIgnoreRow&&(o=M.onIgnoreRow(e(t),n));if(!1===o&&-1==e.inArray(n,M.ignoreRow)&&-1==e.inArray(n-r,M.ignoreRow)&&a(e(t))){var u=e(t).find(i),f=0;u.each(function(t){var i=e(this),r,a=parseInt(this.getAttribute("colspan")),o=parseInt(this.getAttribute("rowspan"));L.forEach(function(e){if(n>=e.s.r&&n<=e.e.r&&f>=e.s.c&&f<=e.e.c)for(r=0;r<=e.e.c-e.s.c;++r)s(null,n,f++)});if(!1===l(i,u.length,t)){if(o||a)a=a||1,L.push({s:{r:n,c:f},e:{r:n+(o||1)-1,c:f+a-1}});s(this,n,f++)}if(a)for(r=0;r<a-1;++r)s(null,n,f++)});L.forEach(function(e){if(n>=e.s.r&&n<=e.e.r&&f>=e.s.c&&f<=e.e.c)for(ne=0;ne<=e.e.c-e.s.c;++ne)s(null,n,f++)})}}}function f(e,t){!0===M.consoleLog&&console.log(e.output());if("string"===M.outputMode)return e.output();if("base64"===M.outputMode)return E(e.output());if("window"===M.outputMode)window.URL=window.URL||window.webkitURL,window.open(window.URL.createObjectURL(e.output("blob")));else try{var i=e.output("blob");saveAs(i,M.fileName+".pdf")}catch(i){A(M.fileName+".pdf","data:application/pdf"+(t?"":";base64")+",",t?e.output("blob"):e.output())}}function c(e,t,i){var n=0;"undefined"!==typeof i&&(n=i.colspan);if(0<=n){for(var r=e.width,s=e.textPos.x,a=t.table.columns.indexOf(t.column),o=1;o<n;o++)r+=t.table.columns[a+o].width;1<n&&("right"===e.styles.halign?s=e.textPos.x+r-e.width:"center"===e.styles.halign&&(s=e.textPos.x+(r-e.width)/2));e.width=r;e.textPos.x=s;"undefined"!==typeof i&&1<i.rowspan&&(e.height*=i.rowspan);if("middle"===e.styles.valign||"bottom"===e.styles.valign)i=("string"===typeof e.text?e.text.split(/\r\n|\r|\n/g):e.text).length||1,2<i&&(e.textPos.y-=(2-1.15)/2*t.row.styles.fontSize*(i-2)/3);return!0}return!1}function d(t,i,n){"undefined"!=typeof n.images&&i.each(function(){var i=e(this).children();if(e(this).is("img")){var r=$(this.src);n.images[r]={url:this.src,src:this.src}}"undefined"!=typeof i&&0<i.length&&d(t,i,n)})}function h(e,t){function i(e){if(e.url){var i=new Image;r=++s;i.crossOrigin="Anonymous";i.onerror=i.onload=function(){if(i.complete&&(0===i.src.indexOf("data:image/")&&(i.width=e.width||i.width||0,i.height=e.height||i.height||0),i.width+i.height)){var n=document.createElement("canvas"),a=n.getContext("2d");n.width=i.width;n.height=i.height;a.drawImage(i,0,0);e.src=n.toDataURL("image/jpeg")}--s||t(r)};i.src=e.url}}var n,r=0,s=0;if("undefined"!=typeof e.images)for(n in e.images)e.images.hasOwnProperty(n)&&i(e.images[n]);(e=s)||(t(r),e=void 0);return e}function p(t,i,n){i.each(function(){var i=e(this).children(),r=0;if(e(this).is("div")){var s=x(T(this,"background-color"),[255,255,255]),a=x(T(this,"border-top-color"),[0,0,0]),o=_(this,"border-top-width",M.jspdf.unit),l=this.getBoundingClientRect(),u=this.offsetLeft*n.dw;r=this.offsetTop*n.dh;var f=l.width*n.dw;l=l.height*n.dh;n.doc.setDrawColor.apply(void 0,a);n.doc.setFillColor.apply(void 0,s);n.doc.setLineWidth(o);n.doc.rect(t.x+u,t.y+r,f,l,o?"FD":"F")}else if(e(this).is("img")&&"undefined"!=typeof n.images&&(s=$(this.src),s=n.images[s],"undefined"!=typeof s)){a=t.width/t.height;o=this.width/this.height;u=t.width;f=t.height;l=19.049976/25.4;o<=a?(f=Math.min(t.height,this.height),u=this.width*f/this.height):o>a&&(u=Math.min(t.width,this.width),f=this.height*u/this.width);u*=l;f*=l;f<t.height&&(r=(t.height-f)/2);try{n.doc.addImage(s.src,t.textPos.x,t.y+r,u,f)}catch(e){}t.textPos.x+=u}"undefined"!=typeof i&&0<i.length&&p(t,i,n)})}function m(t,i,n){if("function"===typeof n.onAutotableText)n.onAutotableText(n.doc,t,i);else{var r=t.textPos.x,s=t.textPos.y,a={halign:t.styles.halign,valign:t.styles.valign};if(i.length){for(i=i[0];i.previousSibling;)i=i.previousSibling;for(var o=!1,l=!1;i;){var u=i.innerText||i.textContent||"";u=(u.length&&" "==u[0]?" ":"")+e.trim(u)+(1<u.length&&" "==u[u.length-1]?" ":"");e(i).is("br")&&(r=t.textPos.x,s+=n.doc.internal.getFontSize());e(i).is("b")?o=!0:e(i).is("i")&&(l=!0);(o||l)&&n.doc.setFontType(o&&l?"bolditalic":o?"bold":"italic");var f=n.doc.getStringUnitWidth(u)*n.doc.internal.getFontSize();if(f){if("linebreak"===t.styles.overflow&&r>t.textPos.x&&r+f>t.textPos.x+t.width){if(0<=".,!%*;:=-".indexOf(u.charAt(0))){var c=u.charAt(0);f=n.doc.getStringUnitWidth(c)*n.doc.internal.getFontSize();r+f<=t.textPos.x+t.width&&(n.doc.autoTableText(c,r,s,a),u=u.substring(1,u.length));f=n.doc.getStringUnitWidth(u)*n.doc.internal.getFontSize()}r=t.textPos.x;s+=n.doc.internal.getFontSize()}for(;u.length&&r+f>t.textPos.x+t.width;)u=u.substring(0,u.length-1),f=n.doc.getStringUnitWidth(u)*n.doc.internal.getFontSize();n.doc.autoTableText(u,r,s,a);r+=f}if(o||l)e(i).is("b")?o=!1:e(i).is("i")&&(l=!1),n.doc.setFontType(o||l?o?"bold":"italic":"normal");i=i.nextSibling}t.textPos.x=r;t.textPos.y=s}else n.doc.autoTableText(t.text,t.textPos.x,t.textPos.y,a)}}function g(e,t,i){return e.replace(new RegExp(t.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1"),"g"),i)}function v(e){e=g(e||"0",M.numbers.html.thousandsSeparator,"");e=g(e,M.numbers.html.decimalMark,".");return"number"===typeof e||!1!==jQuery.isNumeric(e)?e:!1}function y(e){-1<e.indexOf("%")?(e=v(e.replace(/%/g,"")),!1!==e&&(e/=100)):e=!1;return e}function b(t,i,n){var r="";if(null!==t){var s=e(t);if(s[0].hasAttribute("data-tableexport-value"))var a=(a=s.data("tableexport-value"))?a+"":"";else if(a=s.html(),"function"===typeof M.onCellHtmlData)a=M.onCellHtmlData(s,i,n,a);else if(""!=a){var o=e.parseHTML(a),l=0,u=0;a="";e.each(o,function(){if(e(this).is("input"))a+=s.find("input").eq(l++).val();else if(e(this).is("select"))a+=s.find("select option:selected").eq(u++).text();else if("undefined"===typeof e(this).html())a+=e(this).text();else if(void 0===jQuery().bootstrapTable||!0!==e(this).hasClass("filterControl")&&0===e(t).parents(".detail-view").length)a+=e(this).html()})}if(!0===M.htmlContent)r=e.trim(a);else if(a&&""!=a)if(""!=e(t).data("tableexport-cellformat")){var f=a.replace(/\n/g,"\u2028").replace(/<br\s*[\/]?>/gi,"â "),c=e("<div/>").html(f).contents();o=!1;f="";e.each(c.text().split("\u2028"),function(t,i){0<t&&(f+=" ");f+=e.trim(i)});e.each(f.split("â "),function(t,i){0<t&&(r+="\n");r+=e.trim(i).replace(/\u00AD/g,"")});if("json"==M.type||"excel"===M.type&&"xmlss"===M.excelFileFormat||!1===M.numbers.output)o=v(r),!1!==o&&(r=Number(o));else if(M.numbers.html.decimalMark!=M.numbers.output.decimalMark||M.numbers.html.thousandsSeparator!=M.numbers.output.thousandsSeparator)if(o=v(r),!1!==o){c=(""+o.substr(0>o?1:0)).split(".");1==c.length&&(c[1]="");var d=3<c[0].length?c[0].length%3:0;r=(0>o?"-":"")+(M.numbers.output.thousandsSeparator?(d?c[0].substr(0,d)+M.numbers.output.thousandsSeparator:"")+c[0].substr(d).replace(/(\d{3})(?=\d)/g,"$1"+M.numbers.output.thousandsSeparator):c[0])+(c[1].length?M.numbers.output.decimalMark+c[1]:"")}}else r=a;!0===M.escape&&(r=escape(r));"function"===typeof M.onCellData&&(r=M.onCellData(s,i,n,r))}return r}function w(e,t,i){return t+"-"+i.toLowerCase()}function x(e,t){(e=/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/.exec(e))&&(t=[parseInt(e[1]),parseInt(e[2]),parseInt(e[3])]);return t}function C(t){var i=T(t,"text-align"),n=T(t,"font-weight"),r=T(t,"font-style"),s="";"start"==i&&(i="rtl"==T(t,"direction")?"right":"left");700<=n&&(s="bold");"italic"==r&&(s+=r);""===s&&(s="normal");i={style:{align:i,bcolor:x(T(t,"background-color"),[255,255,255]),color:x(T(t,"color"),[0,0,0]),fstyle:s},colspan:parseInt(e(t).attr("colspan"))||0,rowspan:parseInt(e(t).attr("rowspan"))||0};null!==t&&(t=t.getBoundingClientRect(),i.rect={width:t.width,height:t.height});return i}function T(e,t){try{return window.getComputedStyle?(t=t.replace(/([a-z])([A-Z])/,w),window.getComputedStyle(e,null).getPropertyValue(t)):e.currentStyle?e.currentStyle[t]:e.style[t]}catch(e){}return""}function _(e,t,i){t=T(e,t).match(/\d+/);if(null!==t){t=t[0];e=e.parentElement;var n=document.createElement("div");n.style.overflow="hidden";n.style.visibility="hidden";e.appendChild(n);n.style.width=100+i;i=100/n.offsetWidth;e.removeChild(n);return t*i}return 0}function k(){if(!(this instanceof k))return new k;this.SheetNames=[];this.Sheets={}}function D(e){for(var t=new ArrayBuffer(e.length),i=new Uint8Array(t),n=0;n!=e.length;++n)i[n]=e.charCodeAt(n)&255;return t}function S(e){for(var t={},i={s:{c:1e7,r:1e7},e:{c:0,r:0}},n=0;n!=e.length;++n)for(var r=0;r!=e[n].length;++r){i.s.r>n&&(i.s.r=n);i.s.c>r&&(i.s.c=r);i.e.r<n&&(i.e.r=n);i.e.c<r&&(i.e.c=r);var s={v:e[n][r]};if(null!==s.v){var a=XLSX.utils.encode_cell({c:r,r:n});if("number"===typeof s.v)s.t="n";else if("boolean"===typeof s.v)s.t="b";else if(s.v instanceof Date){s.t="n";s.z=XLSX.SSF._table[14];var o=s;var l=(Date.parse(s.v)-new Date(Date.UTC(1899,11,30)))/864e5;o.v=l}else s.t="s";t[a]=s}}1e7>i.s.c&&(t["!ref"]=XLSX.utils.encode_range(i));return t}function $(e){var t=0,i;if(0===e.length)return t;var n=0;for(i=e.length;n<i;n++){var r=e.charCodeAt(n);t=(t<<5)-t+r;t|=0}return t}function A(e,t,i){var n=window.navigator.userAgent;if(!1!==e&&window.navigator.msSaveOrOpenBlob)window.navigator.msSaveOrOpenBlob(new Blob([i]),e);else if(!1!==e&&(0<n.indexOf("MSIE ")||n.match(/Trident.*rv\:11\./))){if(t=document.createElement("iframe"))document.body.appendChild(t),t.setAttribute("style","display:none"),t.contentDocument.open("txt/html","replace"),t.contentDocument.write(i),t.contentDocument.close(),t.focus(),t.contentDocument.execCommand("SaveAs",!0,e),document.body.removeChild(t)}else{var r=document.createElement("a");if(r){var s=null;r.style.display="none";!1!==e?r.download=e:r.target="_blank";"object"==typeof i?(window.URL=window.URL||window.webkitURL,s=window.URL.createObjectURL(i),r.href=s):0<=t.toLowerCase().indexOf("base64,")?r.href=t+E(i):r.href=t+encodeURIComponent(i);document.body.appendChild(r);if(document.createEvent)null===O&&(O=document.createEvent("MouseEvents")),O.initEvent("click",!0,!1),r.dispatchEvent(O);else if(document.createEventObject)r.fireEvent("onclick");else if("function"==typeof r.onclick)r.onclick();setTimeout(function(){s&&window.URL.revokeObjectURL(s);document.body.removeChild(r)},100)}}}function E(e){var t,i="",n=0;if("string"===typeof e){e=e.replace(/\x0d\x0a/g,"\n");var r="";for(t=0;t<e.length;t++){var s=e.charCodeAt(t);128>s?r+=String.fromCharCode(s):(127<s&&2048>s?r+=String.fromCharCode(s>>6|192):(r+=String.fromCharCode(s>>12|224),r+=String.fromCharCode(s>>6&63|128)),r+=String.fromCharCode(s&63|128))}e=r}for(;n<e.length;){var a=e.charCodeAt(n++);r=e.charCodeAt(n++);t=e.charCodeAt(n++);s=a>>2;a=(a&3)<<4|r>>4;var o=(r&15)<<2|t>>6;var l=t&63;isNaN(r)?o=l=64:isNaN(t)&&(l=64);i=i+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(s)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(o)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(l)}return i}var M={consoleLog:!1,csvEnclosure:'"',csvSeparator:",",csvUseBOM:!0,displayTableName:!1,escape:!1,excelFileFormat:"xlshtml",excelRTL:!1,excelstyles:[],exportHiddenCells:!1,fileName:"tableExport",htmlContent:!1,ignoreColumn:[],ignoreRow:[],jsonScope:"all",jspdf:{orientation:"p",unit:"pt",format:"a4",margins:{left:20,right:10,top:10,bottom:10},onDocCreated:null,autotable:{styles:{cellPadding:2,rowHeight:12,fontSize:8,fillColor:255,textColor:50,fontStyle:"normal",overflow:"ellipsize",halign:"left",valign:"middle"},headerStyles:{fillColor:[52,73,94],textColor:255,fontStyle:"bold",halign:"center"},alternateRowStyles:{fillColor:245},tableExport:{doc:null,onAfterAutotable:null,onBeforeAutotable:null,onAutotableText:null,onTable:null,outputImages:!0}}},numbers:{html:{decimalMark:".",thousandsSeparator:","},output:{decimalMark:".",thousandsSeparator:","}},onCellData:null,onCellHtmlData:null,onIgnoreRow:null,onMsoNumberFormat:null,outputMode:"file",pdfmake:{enabled:!1,docDefinition:{pageOrientation:"portrait",defaultStyle:{font:"Roboto"}},fonts:{}},tbodySelector:"tr",tfootSelector:"tr",theadSelector:"tr",tableName:"Table",type:"csv",worksheetName:""},P=this,O=null,I=[],F=[],N=0,j="",U=[],L=[],R=[],H=!1;e.extend(!0,M,t);U=s(P);if("csv"==M.type||"tsv"==M.type||"txt"==M.type){var z="",Y=0;L=[];N=0;var V=function(t,i,n){t.each(function(){j="";u(this,i,N,n+t.length,function(e,t,i){var n=j,r="";if(null!==e)if(e=b(e,t,i),t=null===e||""===e?"":e.toString(),"tsv"==M.type)e instanceof Date&&e.toLocaleString(),r=g(t,"\t"," ");else if(e instanceof Date)r=M.csvEnclosure+e.toLocaleString()+M.csvEnclosure;else if(r=g(t,M.csvEnclosure,M.csvEnclosure+M.csvEnclosure),0<=r.indexOf(M.csvSeparator)||/[\r\n ]/g.test(r))r=M.csvEnclosure+r+M.csvEnclosure;j=n+(r+("tsv"==M.type?"\t":M.csvSeparator))});j=e.trim(j).substring(0,j.length-1);0<j.length&&(0<z.length&&(z+="\n"),z+=j);N++});return t.length};Y+=V(e(P).find("thead").first().find(M.theadSelector),"th,td",Y);n(e(P),"tbody").each(function(){Y+=V(r(e(this),M.tbodySelector),"td,th",Y)});M.tfootSelector.length&&V(e(P).find("tfoot").first().find(M.tfootSelector),"td,th",Y);z+="\n";!0===M.consoleLog&&console.log(z);if("string"===M.outputMode)return z;if("base64"===M.outputMode)return E(z);if("window"===M.outputMode){A(!1,"data:text/"+("csv"==M.type?"csv":"plain")+";charset=utf-8,",z);return}try{var B=new Blob([z],{type:"text/"+("csv"==M.type?"csv":"plain")+";charset=utf-8"});saveAs(B,M.fileName+"."+M.type,"csv"!=M.type||!1===M.csvUseBOM)}catch(e){A(M.fileName+"."+M.type,"data:text/"+("csv"==M.type?"csv":"plain")+";charset=utf-8,"+("csv"==M.type&&M.csvUseBOM?"\ufeff":""),z)}}else if("sql"==M.type){N=0;L=[];var W="INSERT INTO `"+M.tableName+"` (";I=e(P).find("thead").first().find(M.theadSelector);I.each(function(){u(this,"th,td",N,I.length,function(e,t,i){W+="'"+b(e,t,i)+"',"});N++;W=e.trim(W);W=e.trim(W).substring(0,W.length-1)});W+=") VALUES ";F=i(e(P));e(F).each(function(){j="";u(this,"td,th",N,I.length+F.length,function(e,t,i){j+="'"+b(e,t,i)+"',"});3<j.length&&(W+="("+j,W=e.trim(W).substring(0,W.length-1),W+="),");N++});W=e.trim(W).substring(0,W.length-1);W+=";";!0===M.consoleLog&&console.log(W);if("string"===M.outputMode)return W;if("base64"===M.outputMode)return E(W);try{B=new Blob([W],{type:"text/plain;charset=utf-8"}),saveAs(B,M.fileName+".sql")}catch(e){A(M.fileName+".sql","data:application/sql;charset=utf-8,",W)}}else if("json"==M.type){var q=[];L=[];I=e(P).find("thead").first().find(M.theadSelector);I.each(function(){var e=[];u(this,"th,td",N,I.length,function(t,i,n){e.push(b(t,i,n))});q.push(e)});var Z=[];F=i(e(P));e(F).each(function(){var t={},i=0;u(this,"td,th",N,I.length+F.length,function(e,n,r){q.length?t[q[q.length-1][i]]=b(e,n,r):t[i]=b(e,n,r);i++});!1===e.isEmptyObject(t)&&Z.push(t);N++});t="";t="head"==M.jsonScope?JSON.stringify(q):"data"==M.jsonScope?JSON.stringify(Z):JSON.stringify({header:q,data:Z});!0===M.consoleLog&&console.log(t);if("string"===M.outputMode)return t;if("base64"===M.outputMode)return E(t);try{B=new Blob([t],{type:"application/json;charset=utf-8"}),saveAs(B,M.fileName+".json")}catch(e){A(M.fileName+".json","data:application/json;charset=utf-8;base64,",t)}}else if("xml"===M.type){N=0;L=[];var G='<?xml version="1.0" encoding="utf-8"?>';G+="<tabledata><fields>";I=e(P).find("thead").first().find(M.theadSelector);I.each(function(){u(this,"th,td",N,I.length,function(e,t,i){G+="<field>"+b(e,t,i)+"</field>"});N++});G+="</fields><data>";var Q=1;F=i(e(P));e(F).each(function(){var e=1;j="";u(this,"td,th",N,I.length+F.length,function(t,i,n){j+="<column-"+e+">"+b(t,i,n)+"</column-"+e+">";e++});0<j.length&&"<column-1></column-1>"!=j&&(G+='<row id="'+Q+'">'+j+"</row>",Q++);N++});G+="</data></tabledata>";!0===M.consoleLog&&console.log(G);if("string"===M.outputMode)return G;if("base64"===M.outputMode)return E(G);try{B=new Blob([G],{type:"application/xml;charset=utf-8"}),saveAs(B,M.fileName+".xml")}catch(e){A(M.fileName+".xml","data:application/xml;charset=utf-8;base64,",G)}}else if("excel"===M.type&&"xmlss"===M.excelFileFormat){var X=[],K=[];e(P).filter(function(){return a(e(this))}).each(function(){function t(t,i,n){var r=[];e(t).each(function(){var i=0,s=0;j="";u(this,"td,th",N,n+t.length,function(t,n,a){if(null!==t){var o="";n=b(t,n,a);a="String";if(!1!==jQuery.isNumeric(n))a="Number";else{var l=y(n);!1!==l&&(n=l,a="Number",o+=' ss:StyleID="pct1"')}"Number"!==a&&(n=n.replace(/\n/g,"<br>"));l=parseInt(t.getAttribute("colspan"));t=parseInt(t.getAttribute("rowspan"));r.forEach(function(e){if(N>=e.s.r&&N<=e.e.r&&s>=e.s.c&&s<=e.e.c)for(var t=0;t<=e.e.c-e.s.c;++t)s++,i++});if(t||l)t=t||1,l=l||1,r.push({s:{r:N,c:s},e:{r:N+t-1,c:s+l-1}});1<l&&(o+=' ss:MergeAcross="'+(l-1)+'"',s+=l-1);1<t&&(o+=' ss:MergeDown="'+(t-1)+'" ss:StyleID="rsp1"');0<i&&(o+=' ss:Index="'+(s+1)+'"',i=0);j+="<Cell"+o+'><Data ss:Type="'+a+'">'+e("<div />").text(n).html()+"</Data></Cell>\r";s++}});0<j.length&&(re+='<Row ss:AutoFitHeight="0">\r'+j+"</Row>\r");N++});return t.length}var n=e(this),r="";"string"===typeof M.worksheetName&&M.worksheetName.length?r=M.worksheetName+" "+(K.length+1):"undefined"!==typeof M.worksheetName[K.length]&&(r=M.worksheetName[K.length]);r.length||(r=n.find("caption").text()||"");r.length||(r="Table "+(K.length+1));r=r.replace(/[\\\/[\]*:?'"]/g,"").substring(0,31).trim();K.push(e("<div />").text(r).html());!1===M.exportHiddenCells&&(R=n.find("tr, th, td").filter(":hidden"),H=0<R.length);N=0;U=s(this);re="<Table>\r";r=0;r+=t(n.find("thead").first().find(M.theadSelector),"th,td",r);t(i(n),"td,th",r);re+="</Table>\r";X.push(re);!0===M.consoleLog&&console.log(re)});t={};for(var J={},ee,te,ie=0,ne=K.length;ie<ne;ie++)ee=K[ie],te=t[ee],te=t[ee]=null==te?1:te+1,2==te&&(K[J[ee]]=K[J[ee]].substring(0,29)+"-1"),1<t[ee]?K[ie]=K[ie].substring(0,29)+"-"+t[ee]:J[ee]=ie;t='<?xml version="1.0" encoding="UTF-8"?>\r<?mso-application progid="Excel.Sheet"?>\r<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"\r xmlns:o="urn:schemas-microsoft-com:office:office"\r xmlns:x="urn:schemas-microsoft-com:office:excel"\r xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"\r xmlns:html="http://www.w3.org/TR/REC-html40">\r<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">\r  <Created>'+(new Date).toISOString()+'</Created>\r</DocumentProperties>\r<OfficeDocumentSettings xmlns="urn:schemas-microsoft-com:office:office">\r  <AllowPNG/>\r</OfficeDocumentSettings>\r<ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel">\r  <WindowHeight>9000</WindowHeight>\r  <WindowWidth>13860</WindowWidth>\r  <WindowTopX>0</WindowTopX>\r  <WindowTopY>0</WindowTopY>\r  <ProtectStructure>False</ProtectStructure>\r  <ProtectWindows>False</ProtectWindows>\r</ExcelWorkbook>\r<Styles>\r  <Style ss:ID="Default" ss:Name="Normal">\r    <Alignment ss:Vertical="Bottom"/>\r    <Borders/>\r    <Font/>\r    <Interior/>\r    <NumberFormat/>\r    <Protection/>\r  </Style>\r  <Style ss:ID="rsp1">\r    <Alignment ss:Vertical="Center"/>\r  </Style>\r  <Style ss:ID="pct1">\r    <NumberFormat ss:Format="Percent"/>\r  </Style>\r</Styles>\r';for(J=0;J<X.length;J++)t+='<Worksheet ss:Name="'+K[J]+'" ss:RightToLeft="'+(M.excelRTL?"1":"0")+'">\r'+X[J],t=M.excelRTL?t+'<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">\r<DisplayRightToLeft/>\r</WorksheetOptions>\r':t+'<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel"/>\r',t+="</Worksheet>\r";t+="</Workbook>\r";!0===M.consoleLog&&console.log(t);if("string"===M.outputMode)return t;if("base64"===M.outputMode)return E(t);try{B=new Blob([t],{type:"application/xml;charset=utf-8"}),saveAs(B,M.fileName+".xml")}catch(e){A(M.fileName+".xml","data:application/xml;charset=utf-8;base64,",t)}}else if("excel"==M.type||"xls"==M.type||"word"==M.type||"doc"==M.type){t="excel"==M.type||"xls"==M.type?"excel":"word";J="excel"==t?"xls":"doc";ee='xmlns:x="urn:schemas-microsoft-com:office:'+t+'"';var re="",se="";e(P).filter(function(){return a(e(this))}).each(function(){var t=e(this);""===se&&(se=M.worksheetName||t.find("caption").text()||"Table",se=se.replace(/[\\\/[\]*:?'"]/g,"").substring(0,31).trim());!1===M.exportHiddenCells&&(R=t.find("tr, th, td").filter(":hidden"),H=0<R.length);N=0;L=[];U=s(this);re+="<table><thead>";I=t.find("thead").first().find(M.theadSelector);I.each(function(){j="";u(this,"th,td",N,I.length,function(t,i,n){if(null!==t){var r="";j+="<th";for(var s in M.excelstyles)if(M.excelstyles.hasOwnProperty(s)){var a=e(t).css(M.excelstyles[s]);""!==a&&"0px none rgb(0, 0, 0)"!=a&&"rgba(0, 0, 0, 0)"!=a&&(r+=""===r?'style="':";",r+=M.excelstyles[s]+":"+a)}""!==r&&(j+=" "+r+'"');e(t).is("[colspan]")&&(j+=' colspan="'+e(t).attr("colspan")+'"');e(t).is("[rowspan]")&&(j+=' rowspan="'+e(t).attr("rowspan")+'"');j+=">"+b(t,i,n)+"</th>"}});0<j.length&&(re+="<tr>"+j+"</tr>");N++});re+="</thead><tbody>";F=i(t);e(F).each(function(){var t=e(this);j="";u(this,"td,th",N,I.length+F.length,function(i,n,r){if(null!==i){var s=b(i,n,r),a="",o=e(i).data("tableexport-msonumberformat");"undefined"==typeof o&&"function"===typeof M.onMsoNumberFormat&&(o=M.onMsoNumberFormat(i,n,r));"undefined"!=typeof o&&""!==o&&(a="style=\"mso-number-format:'"+o+"'");for(var l in M.excelstyles)M.excelstyles.hasOwnProperty(l)&&(o=e(i).css(M.excelstyles[l]),""===o&&(o=t.css(M.excelstyles[l])),""!==o&&"0px none rgb(0, 0, 0)"!=o&&"rgba(0, 0, 0, 0)"!=o&&(a+=""===a?'style="':";",a+=M.excelstyles[l]+":"+o));j+="<td";""!==a&&(j+=" "+a+'"');e(i).is("[colspan]")&&(j+=' colspan="'+e(i).attr("colspan")+'"');e(i).is("[rowspan]")&&(j+=' rowspan="'+e(i).attr("rowspan")+'"');"string"===typeof s&&""!=s&&(s=s.replace(/\n/g,"<br>"));j+=">"+s+"</td>"}});0<j.length&&(re+="<tr>"+j+"</tr>");N++});M.displayTableName&&(re+="<tr><td></td></tr><tr><td></td></tr><tr><td>"+b(e("<p>"+M.tableName+"</p>"))+"</td></tr>");re+="</tbody></table>";!0===M.consoleLog&&console.log(re)});ee='<html xmlns:o="urn:schemas-microsoft-com:office:office" '+ee+' xmlns="http://www.w3.org/TR/REC-html40">'+('<meta http-equiv="content-type" content="application/vnd.ms-'+t+'; charset=UTF-8">')+"<head>";"excel"===t&&(ee+="\x3c!--[if gte mso 9]>",ee+="<xml>",ee+="<x:ExcelWorkbook>",ee+="<x:ExcelWorksheets>",ee+="<x:ExcelWorksheet>",ee+="<x:Name>",ee+=se,ee+="</x:Name>",ee+="<x:WorksheetOptions>",ee+="<x:DisplayGridlines/>",M.excelRTL&&(ee+="<x:DisplayRightToLeft/>"),ee+="</x:WorksheetOptions>",ee+="</x:ExcelWorksheet>",ee+="</x:ExcelWorksheets>",ee+="</x:ExcelWorkbook>",ee+="</xml>",ee+="<![endif]--\x3e");ee+="<style>br {mso-data-placement:same-cell;}</style>";ee+="</head>";ee+="<body>";ee+=re;ee+="</body>";ee+="</html>";!0===M.consoleLog&&console.log(ee);if("string"===M.outputMode)return ee;if("base64"===M.outputMode)return E(ee);try{B=new Blob([ee],{type:"application/vnd.ms-"+M.type}),saveAs(B,M.fileName+"."+J)}catch(e){A(M.fileName+"."+J,"data:application/vnd.ms-"+t+";base64,",ee)}}else if("xlsx"==M.type){var ae=[],oe=[];N=0;F=e(P).find("thead").first().find(M.theadSelector);F.push.apply(F,i(e(P)));e(F).each(function(){var e=[];u(this,"th,td",N,F.length,function(t,i,n){if("undefined"!==typeof t&&null!==t){n=b(t,i,n);i=parseInt(t.getAttribute("colspan"));t=parseInt(t.getAttribute("rowspan"));oe.forEach(function(t){if(N>=t.s.r&&N<=t.e.r&&e.length>=t.s.c&&e.length<=t.e.c)for(var i=0;i<=t.e.c-t.s.c;++i)e.push(null)});if(t||i)i=i||1,oe.push({s:{r:N,c:e.length},e:{r:N+(t||1)-1,c:e.length+i-1}});"function"!==typeof M.onCellData&&""!==n&&n==+n&&(n=+n);e.push(""!==n?n:null);if(i)for(t=0;t<i-1;++t)e.push(null)}});ae.push(e);N++});t=new k;J=S(ae);J["!merges"]=oe;t.SheetNames.push(M.worksheetName);t.Sheets[M.worksheetName]=J;t=XLSX.write(t,{bookType:M.type,bookSST:!1,type:"binary"});try{B=new Blob([D(t)],{type:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8"}),saveAs(B,M.fileName+"."+M.type)}catch(e){A(M.fileName+"."+M.type,"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8,",D(t))}}else if("png"==M.type)html2canvas(e(P)[0]).then(function(e){e=e.toDataURL();for(var t=atob(e.substring(22)),i=new ArrayBuffer(t.length),n=new Uint8Array(i),r=0;r<t.length;r++)n[r]=t.charCodeAt(r);!0===M.consoleLog&&console.log(t);if("string"===M.outputMode)return t;if("base64"===M.outputMode)return E(e);if("window"===M.outputMode)window.open(e);else try{B=new Blob([i],{type:"image/png"}),saveAs(B,M.fileName+".png")}catch(e){A(M.fileName+".png","data:image/png,",B)}});else if("pdf"==M.type)if(!0===M.pdfmake.enabled){t=[];var le=[];N=0;L=[];J=function(t,i,n){var r=0;e(t).each(function(){var e=[];u(this,i,N,n,function(t,i,n){if("undefined"!==typeof t&&null!==t){var r=parseInt(t.getAttribute("colspan")),s=parseInt(t.getAttribute("rowspan"));t=b(t,i,n)||" ";1<r||1<s?e.push({colSpan:r||1,rowSpan:s||1,text:t}):e.push(t)}else e.push(" ")});e.length&&le.push(e);r<e.length&&(r=e.length);N++});return r};I=e(this).find("thead").first().find(M.theadSelector);ee=J(I,"th,td",I.length);for(te=t.length;te<ee;te++)t.push("*");F=i(e(this));J(F,"th,td",I.length+F.length);t={content:[{table:{headerRows:I.length,widths:t,body:le}}]};e.extend(!0,t,M.pdfmake.docDefinition);pdfMake.fonts={Roboto:{normal:"Roboto-Regular.ttf",bold:"Roboto-Medium.ttf",italics:"Roboto-Italic.ttf",bolditalics:"Roboto-MediumItalic.ttf"}};e.extend(!0,pdfMake.fonts,M.pdfmake.fonts);pdfMake.createPdf(t).getBuffer(function(e){try{var t=new Blob([e],{type:"application/pdf"});saveAs(t,M.fileName+".pdf")}catch(t){A(M.fileName+".pdf","data:application/pdf;base64,",e)}})}else if(!1===M.jspdf.autotable){t={dim:{w:_(e(P).first().get(0),"width","mm"),h:_(e(P).first().get(0),"height","mm")},pagesplit:!1};var ue=new jsPDF(M.jspdf.orientation,M.jspdf.unit,M.jspdf.format);ue.addHTML(e(P).first(),M.jspdf.margins.left,M.jspdf.margins.top,t,function(){f(ue,!1)})}else{var fe=M.jspdf.autotable.tableExport;if("string"===typeof M.jspdf.format&&"bestfit"===M.jspdf.format.toLowerCase()){var ce={a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89]},de="",he="",pe=0;e(P).each(function(){if(a(e(this))){var t=_(e(this).get(0),"width","pt");if(t>pe){t>ce.a0[0]&&(de="a0",he="l");for(var i in ce)ce.hasOwnProperty(i)&&ce[i][1]>t&&(de=i,he="l",ce[i][0]>t&&(he="p"));pe=t}}});M.jspdf.format=""===de?"a4":de;M.jspdf.orientation=""===he?"w":he}if(null==fe.doc&&(fe.doc=new jsPDF(M.jspdf.orientation,M.jspdf.unit,M.jspdf.format),"function"===typeof M.jspdf.onDocCreated))M.jspdf.onDocCreated(fe.doc);!0===fe.outputImages&&(fe.images={});"undefined"!=typeof fe.images&&(e(P).filter(function(){return a(e(this))}).each(function(){var t=0;L=[];!1===M.exportHiddenCells&&(R=e(this).find("tr, th, td").filter(":hidden"),H=0<R.length);I=e(this).find("thead").find(M.theadSelector);F=i(e(this));e(F).each(function(){u(this,"td,th",I.length+t,I.length+F.length,function(t){if("undefined"!==typeof t&&null!==t){var i=e(t).children();"undefined"!=typeof i&&0<i.length&&d(t,i,fe)}});t++})}),I=[],F=[]);h(fe,function(){e(P).filter(function(){return a(e(this))}).each(function(){var t;N=0;L=[];!1===M.exportHiddenCells&&(R=e(this).find("tr, th, td").filter(":hidden"),H=0<R.length);U=s(this);fe.columns=[];fe.rows=[];fe.rowoptions={};if("function"===typeof fe.onTable&&!1===fe.onTable(e(this),M))return!0;M.jspdf.autotable.tableExport=null;var n=e.extend(!0,{},M.jspdf.autotable);M.jspdf.autotable.tableExport=fe;n.margin={};e.extend(!0,n.margin,M.jspdf.margins);n.tableExport=fe;"function"!==typeof n.beforePageContent&&(n.beforePageContent=function(e){1==e.pageCount&&e.table.rows.concat(e.table.headerRow).forEach(function(t){0<t.height&&(t.height+=(2-1.15)/2*t.styles.fontSize,e.table.height+=(2-1.15)/2*t.styles.fontSize)})});"function"!==typeof n.createdHeaderCell&&(n.createdHeaderCell=function(t,i){t.styles=e.extend({},i.row.styles);if("undefined"!=typeof fe.columns[i.column.dataKey]){var r=fe.columns[i.column.dataKey];if("undefined"!=typeof r.rect){t.contentWidth=r.rect.width;if("undefined"==typeof fe.heightRatio||0===fe.heightRatio){var s=i.row.raw[i.column.dataKey].rowspan?i.row.raw[i.column.dataKey].rect.height/i.row.raw[i.column.dataKey].rowspan:i.row.raw[i.column.dataKey].rect.height;fe.heightRatio=t.styles.rowHeight/s}s=i.row.raw[i.column.dataKey].rect.height*fe.heightRatio;s>t.styles.rowHeight&&(t.styles.rowHeight=s)}"undefined"!=typeof r.style&&!0!==r.style.hidden&&(t.styles.halign=r.style.align,"inherit"===n.styles.fillColor&&(t.styles.fillColor=r.style.bcolor),"inherit"===n.styles.textColor&&(t.styles.textColor=r.style.color),"inherit"===n.styles.fontStyle&&(t.styles.fontStyle=r.style.fstyle))}});"function"!==typeof n.createdCell&&(n.createdCell=function(e,t){t=fe.rowoptions[t.row.index+":"+t.column.dataKey];"undefined"!=typeof t&&"undefined"!=typeof t.style&&!0!==t.style.hidden&&(e.styles.halign=t.style.align,"inherit"===n.styles.fillColor&&(e.styles.fillColor=t.style.bcolor),"inherit"===n.styles.textColor&&(e.styles.textColor=t.style.color),"inherit"===n.styles.fontStyle&&(e.styles.fontStyle=t.style.fstyle))});"function"!==typeof n.drawHeaderCell&&(n.drawHeaderCell=function(e,t){var i=fe.columns[t.column.dataKey];return(!0!==i.style.hasOwnProperty("hidden")||!0!==i.style.hidden)&&0<=i.rowIndex?c(e,t,i):!1});"function"!==typeof n.drawCell&&(n.drawCell=function(e,t){var i=fe.rowoptions[t.row.index+":"+t.column.dataKey];if(c(e,t,i))if(fe.doc.rect(e.x,e.y,e.width,e.height,e.styles.fillStyle),"undefined"!=typeof i&&"undefined"!=typeof i.kids&&0<i.kids.length){t=e.height/i.rect.height;if(t>fe.dh||"undefined"==typeof fe.dh)fe.dh=t;fe.dw=e.width/i.rect.width;t=e.textPos.y;p(e,i.kids,fe);e.textPos.y=t;m(e,i.kids,fe)}else m(e,{},fe);return!1});fe.headerrows=[];I=e(this).find("thead").find(M.theadSelector);I.each(function(){t=0;fe.headerrows[N]=[];u(this,"th,td",N,I.length,function(e,i,n){var r=C(e);r.title=b(e,i,n);r.key=t++;r.rowIndex=N;fe.headerrows[N].push(r)});N++});if(0<N)for(var r=N-1;0<=r;)e.each(fe.headerrows[r],function(){var e=this;0<r&&null===this.rect&&(e=fe.headerrows[r-1][this.key]);null!==e&&0<=e.rowIndex&&(!0!==e.style.hasOwnProperty("hidden")||!0!==e.style.hidden)&&fe.columns.push(e)}),r=0<fe.columns.length?-1:r-1;var a=0;F=[];F=i(e(this));e(F).each(function(){var i=[];t=0;u(this,"td,th",N,I.length+F.length,function(n,r,s){if("undefined"===typeof fe.columns[t]){var o={title:"",key:t,style:{hidden:!0}};fe.columns.push(o)}"undefined"!==typeof n&&null!==n?(o=C(n),o.kids=e(n).children()):(o=e.extend(!0,{},fe.rowoptions[a+":"+(t-1)]),o.colspan=-1);fe.rowoptions[a+":"+t++]=o;i.push(b(n,r,s))});i.length&&(fe.rows.push(i),a++);N++});if("function"===typeof fe.onBeforeAutotable)fe.onBeforeAutotable(e(this),fe.columns,fe.rows,n);fe.doc.autoTable(fe.columns,fe.rows,n);if("function"===typeof fe.onAfterAutotable)fe.onAfterAutotable(e(this),n);M.jspdf.autotable.startY=fe.doc.autoTableEndPosY()+n.margin.top});f(fe.doc,"undefined"!=typeof fe.images&&!1===jQuery.isEmptyObject(fe.images));"undefined"!=typeof fe.headerrows&&(fe.headerrows.length=0);"undefined"!=typeof fe.columns&&(fe.columns.length=0);"undefined"!=typeof fe.rows&&(fe.rows.length=0);delete fe.doc;fe.doc=null})}return this}})})(jQuery);(function(e,t){typeof exports==="object"&&typeof module!=="undefined"?module.exports=t():typeof define==="function"&&define.amd?define(t):e.moment=t()})(this,function(){"use strict";var e;function t(){return e.apply(null,arguments)}function i(t){e=t}function n(e){return e instanceof Array||Object.prototype.toString.call(e)==="[object Array]"}function r(e){return e!=null&&Object.prototype.toString.call(e)==="[object Object]"}function s(e){if(Object.getOwnPropertyNames){return Object.getOwnPropertyNames(e).length===0}else{var t;for(t in e){if(e.hasOwnProperty(t)){return false}}return true}}function a(e){return e===void 0}function o(e){return typeof e==="number"||Object.prototype.toString.call(e)==="[object Number]"}function l(e){return e instanceof Date||Object.prototype.toString.call(e)==="[object Date]"}function u(e,t){var i=[],n;for(n=0;n<e.length;++n){i.push(t(e[n],n))}return i}function f(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function c(e,t){for(var i in t){if(f(t,i)){e[i]=t[i]}}if(f(t,"toString")){e.toString=t.toString}if(f(t,"valueOf")){e.valueOf=t.valueOf}return e}function d(e,t,i,n){return Vi(e,t,i,n,true).utc()}function h(){return{empty:false,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:false,invalidMonth:null,invalidFormat:false,userInvalidated:false,iso:false,parsedDateParts:[],meridiem:null,rfc2822:false,weekdayMismatch:false}}function p(e){if(e._pf==null){e._pf=h()}return e._pf}var m;if(Array.prototype.some){m=Array.prototype.some}else{m=function(e){var t=Object(this);var i=t.length>>>0;for(var n=0;n<i;n++){if(n in t&&e.call(this,t[n],n,t)){return true}}return false}}function g(e){if(e._isValid==null){var t=p(e);var i=m.call(t.parsedDateParts,function(e){return e!=null});var n=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&i);if(e._strict){n=n&&t.charsLeftOver===0&&t.unusedTokens.length===0&&t.bigHour===undefined}if(Object.isFrozen==null||!Object.isFrozen(e)){e._isValid=n}else{return n}}return e._isValid}function v(e){var t=d(NaN);if(e!=null){c(p(t),e)}else{p(t).userInvalidated=true}return t}var y=t.momentProperties=[];function b(e,t){var i,n,r;if(!a(t._isAMomentObject)){e._isAMomentObject=t._isAMomentObject}if(!a(t._i)){e._i=t._i}if(!a(t._f)){e._f=t._f}if(!a(t._l)){e._l=t._l}if(!a(t._strict)){e._strict=t._strict}if(!a(t._tzm)){e._tzm=t._tzm}if(!a(t._isUTC)){e._isUTC=t._isUTC}if(!a(t._offset)){e._offset=t._offset}if(!a(t._pf)){e._pf=p(t)}if(!a(t._locale)){e._locale=t._locale}if(y.length>0){for(i=0;i<y.length;i++){n=y[i];r=t[n];if(!a(r)){e[n]=r}}}return e}var w=false;function x(e){b(this,e);this._d=new Date(e._d!=null?e._d.getTime():NaN);if(!this.isValid()){this._d=new Date(NaN)}if(w===false){w=true;t.updateOffset(this);w=false}}function C(e){return e instanceof x||e!=null&&e._isAMomentObject!=null}function T(e){if(e<0){return Math.ceil(e)||0}else{return Math.floor(e)}}function _(e){var t=+e,i=0;if(t!==0&&isFinite(t)){i=T(t)}return i}function k(e,t,i){var n=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),s=0,a;for(a=0;a<n;a++){if(i&&e[a]!==t[a]||!i&&_(e[a])!==_(t[a])){s++}}return s+r}function D(e){if(t.suppressDeprecationWarnings===false&&typeof console!=="undefined"&&console.warn){console.warn("Deprecation warning: "+e)}}function S(e,i){var n=true;return c(function(){if(t.deprecationHandler!=null){t.deprecationHandler(null,e)}if(n){var r=[];var s;for(var a=0;a<arguments.length;a++){s="";if(typeof arguments[a]==="object"){s+="\n["+a+"] ";for(var o in arguments[0]){s+=o+": "+arguments[0][o]+", "}s=s.slice(0,-2)}else{s=arguments[a]}r.push(s)}D(e+"\nArguments: "+Array.prototype.slice.call(r).join("")+"\n"+(new Error).stack);n=false}return i.apply(this,arguments)},i)}var $={};function A(e,i){if(t.deprecationHandler!=null){t.deprecationHandler(e,i)}if(!$[e]){D(i);$[e]=true}}t.suppressDeprecationWarnings=false;t.deprecationHandler=null;function E(e){return e instanceof Function||Object.prototype.toString.call(e)==="[object Function]"}function M(e){var t,i;for(i in e){t=e[i];if(E(t)){this[i]=t}else{this["_"+i]=t}}this._config=e;this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function P(e,t){var i=c({},e),n;for(n in t){if(f(t,n)){if(r(e[n])&&r(t[n])){i[n]={};c(i[n],e[n]);c(i[n],t[n])}else if(t[n]!=null){i[n]=t[n]}else{delete i[n]}}}for(n in e){if(f(e,n)&&!f(t,n)&&r(e[n])){i[n]=c({},i[n])}}return i}function O(e){if(e!=null){this.set(e)}}var I;if(Object.keys){I=Object.keys}else{I=function(e){var t,i=[];for(t in e){if(f(e,t)){i.push(t)}}return i}}var F={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"};function N(e,t,i){var n=this._calendar[e]||this._calendar["sameElse"];return E(n)?n.call(t,i):n}var j={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};function U(e){var t=this._longDateFormat[e],i=this._longDateFormat[e.toUpperCase()];if(t||!i){return t}this._longDateFormat[e]=i.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)});return this._longDateFormat[e]}var L="Invalid date";function R(){return this._invalidDate}var H="%d";var z=/\d{1,2}/;function Y(e){return this._ordinal.replace("%d",e)}var V={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function B(e,t,i,n){var r=this._relativeTime[i];return E(r)?r(e,t,i,n):r.replace(/%d/i,e)}function W(e,t){var i=this._relativeTime[e>0?"future":"past"];return E(i)?i(t):i.replace(/%s/i,t)}var q={};function Z(e,t){var i=e.toLowerCase();q[i]=q[i+"s"]=q[t]=e}function G(e){return typeof e==="string"?q[e]||q[e.toLowerCase()]:undefined}function Q(e){var t={},i,n;for(n in e){if(f(e,n)){i=G(n);if(i){t[i]=e[n]}}}return t}var X={};function K(e,t){X[e]=t}function J(e){var t=[];for(var i in e){t.push({unit:i,priority:X[i]})}t.sort(function(e,t){return e.priority-t.priority});return t}function ee(e,t,i){var n=""+Math.abs(e),r=t-n.length,s=e>=0;return(s?i?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+n}var te=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;var ie=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;var ne={};var re={};function se(e,t,i,n){var r=n;if(typeof n==="string"){r=function(){return this[n]()}}if(e){re[e]=r}if(t){re[t[0]]=function(){return ee(r.apply(this,arguments),t[1],t[2])}}if(i){re[i]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)}}}function ae(e){if(e.match(/\[[\s\S]/)){return e.replace(/^\[|\]$/g,"")}return e.replace(/\\/g,"")}function oe(e){var t=e.match(te),i,n;for(i=0,n=t.length;i<n;i++){if(re[t[i]]){t[i]=re[t[i]]}else{t[i]=ae(t[i])}}return function(i){var r="",s;for(s=0;s<n;s++){r+=E(t[s])?t[s].call(i,e):t[s]}return r}}function le(e,t){if(!e.isValid()){return e.localeData().invalidDate()}t=ue(t,e.localeData());ne[t]=ne[t]||oe(t);return ne[t](e)}function ue(e,t){var i=5;function n(e){return t.longDateFormat(e)||e}ie.lastIndex=0;while(i>=0&&ie.test(e)){e=e.replace(ie,n);ie.lastIndex=0;i-=1}return e}var fe=/\d/;var ce=/\d\d/;var de=/\d{3}/;var he=/\d{4}/;var pe=/[+-]?\d{6}/;var me=/\d\d?/;var ge=/\d\d\d\d?/;var ve=/\d\d\d\d\d\d?/;var ye=/\d{1,3}/;var be=/\d{1,4}/;var we=/[+-]?\d{1,6}/;var xe=/\d+/;var Ce=/[+-]?\d+/;var Te=/Z|[+-]\d\d:?\d\d/gi;var _e=/Z|[+-]\d\d(?::?\d\d)?/gi;var ke=/[+-]?\d+(\.\d{1,3})?/;var De=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;var Se={};function $e(e,t,i){Se[e]=E(t)?t:function(e,n){return e&&i?i:t}}function Ae(e,t){if(!f(Se,e)){return new RegExp(Ee(e))}return Se[e](t._strict,t._locale)}function Ee(e){return Me(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,i,n,r){return t||i||n||r}))}function Me(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var Pe={};function Oe(e,t){var i,n=t;if(typeof e==="string"){e=[e]}if(o(t)){n=function(e,i){i[t]=_(e)}}for(i=0;i<e.length;i++){Pe[e[i]]=n}}function Ie(e,t){Oe(e,function(e,i,n,r){n._w=n._w||{};t(e,n._w,n,r)})}function Fe(e,t,i){if(t!=null&&f(Pe,e)){Pe[e](t,i._a,i,e)}}var Ne=0;var je=1;var Ue=2;var Le=3;var Re=4;var He=5;var ze=6;var Ye=7;var Ve=8;se("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e});se(0,["YY",2],0,function(){return this.year()%100});se(0,["YYYY",4],0,"year");se(0,["YYYYY",5],0,"year");se(0,["YYYYYY",6,true],0,"year");Z("year","y");K("year",1);$e("Y",Ce);$e("YY",me,ce);$e("YYYY",be,he);$e("YYYYY",we,pe);$e("YYYYYY",we,pe);Oe(["YYYYY","YYYYYY"],Ne);Oe("YYYY",function(e,i){i[Ne]=e.length===2?t.parseTwoDigitYear(e):_(e)});Oe("YY",function(e,i){i[Ne]=t.parseTwoDigitYear(e)});Oe("Y",function(e,t){t[Ne]=parseInt(e,10)});function Be(e){return We(e)?366:365}function We(e){return e%4===0&&e%100!==0||e%400===0}t.parseTwoDigitYear=function(e){return _(e)+(_(e)>68?1900:2e3)};var qe=Ge("FullYear",true);function Ze(){return We(this.year())}function Ge(e,i){return function(n){if(n!=null){Xe(this,e,n);t.updateOffset(this,i);return this}else{return Qe(this,e)}}}function Qe(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Xe(e,t,i){if(e.isValid()&&!isNaN(i)){if(t==="FullYear"&&We(e.year())&&e.month()===1&&e.date()===29){e._d["set"+(e._isUTC?"UTC":"")+t](i,e.month(),it(i,e.month()))}else{e._d["set"+(e._isUTC?"UTC":"")+t](i)}}}function Ke(e){e=G(e);if(E(this[e])){return this[e]()}return this}function Je(e,t){if(typeof e==="object"){e=Q(e);var i=J(e);for(var n=0;n<i.length;n++){this[i[n].unit](e[i[n].unit])}}else{e=G(e);if(E(this[e])){return this[e](t)}}return this}function et(e,t){return(e%t+t)%t}var tt;if(Array.prototype.indexOf){tt=Array.prototype.indexOf}else{tt=function(e){var t;for(t=0;t<this.length;++t){if(this[t]===e){return t}}return-1}}function it(e,t){if(isNaN(e)||isNaN(t)){return NaN}var i=et(t,12);e+=(t-i)/12;return i===1?We(e)?29:28:31-i%7%2}se("M",["MM",2],"Mo",function(){return this.month()+1});se("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)});se("MMMM",0,0,function(e){return this.localeData().months(this,e)});Z("month","M");K("month",8);$e("M",me);$e("MM",me,ce);$e("MMM",function(e,t){return t.monthsShortRegex(e)});$e("MMMM",function(e,t){return t.monthsRegex(e)});Oe(["M","MM"],function(e,t){t[je]=_(e)-1});Oe(["MMM","MMMM"],function(e,t,i,n){var r=i._locale.monthsParse(e,n,i._strict);if(r!=null){t[je]=r}else{p(i).invalidMonth=e}});var nt=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;var rt="January_February_March_April_May_June_July_August_September_October_November_December".split("_");function st(e,t){if(!e){return n(this._months)?this._months:this._months["standalone"]}return n(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||nt).test(t)?"format":"standalone"][e.month()]}var at="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function ot(e,t){if(!e){return n(this._monthsShort)?this._monthsShort:this._monthsShort["standalone"]}return n(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[nt.test(t)?"format":"standalone"][e.month()]}function lt(e,t,i){var n,r,s,a=e.toLocaleLowerCase();if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[];for(n=0;n<12;++n){s=d([2e3,n]);this._shortMonthsParse[n]=this.monthsShort(s,"").toLocaleLowerCase();this._longMonthsParse[n]=this.months(s,"").toLocaleLowerCase()}}if(i){if(t==="MMM"){r=tt.call(this._shortMonthsParse,a);return r!==-1?r:null}else{r=tt.call(this._longMonthsParse,a);return r!==-1?r:null}}else{if(t==="MMM"){r=tt.call(this._shortMonthsParse,a);if(r!==-1){return r}r=tt.call(this._longMonthsParse,a);return r!==-1?r:null}else{r=tt.call(this._longMonthsParse,a);if(r!==-1){return r}r=tt.call(this._shortMonthsParse,a);return r!==-1?r:null}}}function ut(e,t,i){var n,r,s;if(this._monthsParseExact){return lt.call(this,e,t,i)}if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[]}for(n=0;n<12;n++){r=d([2e3,n]);if(i&&!this._longMonthsParse[n]){this._longMonthsParse[n]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i");this._shortMonthsParse[n]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")}if(!i&&!this._monthsParse[n]){s="^"+this.months(r,"")+"|^"+this.monthsShort(r,"");this._monthsParse[n]=new RegExp(s.replace(".",""),"i")}if(i&&t==="MMMM"&&this._longMonthsParse[n].test(e)){return n}else if(i&&t==="MMM"&&this._shortMonthsParse[n].test(e)){return n}else if(!i&&this._monthsParse[n].test(e)){return n}}}function ft(e,t){var i;if(!e.isValid()){return e}if(typeof t==="string"){if(/^\d+$/.test(t)){t=_(t)}else{t=e.localeData().monthsParse(t);if(!o(t)){return e}}}i=Math.min(e.date(),it(e.year(),t));e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,i);return e}function ct(e){if(e!=null){ft(this,e);t.updateOffset(this,true);return this}else{return Qe(this,"Month")}}function dt(){return it(this.year(),this.month())}var ht=De;function pt(e){if(this._monthsParseExact){if(!f(this,"_monthsRegex")){vt.call(this)}if(e){return this._monthsShortStrictRegex}else{return this._monthsShortRegex}}else{if(!f(this,"_monthsShortRegex")){this._monthsShortRegex=ht}return this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex}}var mt=De;function gt(e){if(this._monthsParseExact){if(!f(this,"_monthsRegex")){vt.call(this)}if(e){return this._monthsStrictRegex}else{return this._monthsRegex}}else{if(!f(this,"_monthsRegex")){this._monthsRegex=mt}return this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex}}function vt(){function e(e,t){return t.length-e.length}var t=[],i=[],n=[],r,s;for(r=0;r<12;r++){s=d([2e3,r]);t.push(this.monthsShort(s,""));i.push(this.months(s,""));n.push(this.months(s,""));n.push(this.monthsShort(s,""))}t.sort(e);i.sort(e);n.sort(e);for(r=0;r<12;r++){t[r]=Me(t[r]);i[r]=Me(i[r])}for(r=0;r<24;r++){n[r]=Me(n[r])}this._monthsRegex=new RegExp("^("+n.join("|")+")","i");this._monthsShortRegex=this._monthsRegex;this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i");this._monthsShortStrictRegex=new RegExp("^("+t.join("|")+")","i")}function yt(e,t,i,n,r,s,a){var o=new Date(e,t,i,n,r,s,a);if(e<100&&e>=0&&isFinite(o.getFullYear())){o.setFullYear(e)}return o}function bt(e){var t=new Date(Date.UTC.apply(null,arguments));if(e<100&&e>=0&&isFinite(t.getUTCFullYear())){t.setUTCFullYear(e)}return t}function wt(e,t,i){var n=7+t-i,r=(7+bt(e,0,n).getUTCDay()-t)%7;return-r+n-1}function xt(e,t,i,n,r){var s=(7+i-n)%7,a=wt(e,n,r),o=1+7*(t-1)+s+a,l,u;if(o<=0){l=e-1;u=Be(l)+o}else if(o>Be(e)){l=e+1;u=o-Be(e)}else{l=e;u=o}return{year:l,dayOfYear:u}}function Ct(e,t,i){var n=wt(e.year(),t,i),r=Math.floor((e.dayOfYear()-n-1)/7)+1,s,a;if(r<1){a=e.year()-1;s=r+Tt(a,t,i)}else if(r>Tt(e.year(),t,i)){s=r-Tt(e.year(),t,i);a=e.year()+1}else{a=e.year();s=r}return{week:s,year:a}}function Tt(e,t,i){var n=wt(e,t,i),r=wt(e+1,t,i);return(Be(e)-n+r)/7}se("w",["ww",2],"wo","week");se("W",["WW",2],"Wo","isoWeek");Z("week","w");Z("isoWeek","W");K("week",5);K("isoWeek",5);$e("w",me);$e("ww",me,ce);$e("W",me);$e("WW",me,ce);Ie(["w","ww","W","WW"],function(e,t,i,n){t[n.substr(0,1)]=_(e)});function _t(e){return Ct(e,this._week.dow,this._week.doy).week}var kt={dow:0,doy:6};function Dt(){return this._week.dow}function St(){return this._week.doy}function $t(e){var t=this.localeData().week(this);return e==null?t:this.add((e-t)*7,"d")}function At(e){var t=Ct(this,1,4).week;return e==null?t:this.add((e-t)*7,"d")}se("d",0,"do","day");se("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)});se("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)});se("dddd",0,0,function(e){return this.localeData().weekdays(this,e)});se("e",0,0,"weekday");se("E",0,0,"isoWeekday");Z("day","d");Z("weekday","e");Z("isoWeekday","E");K("day",11);K("weekday",11);K("isoWeekday",11);$e("d",me);$e("e",me);$e("E",me);$e("dd",function(e,t){return t.weekdaysMinRegex(e)});$e("ddd",function(e,t){return t.weekdaysShortRegex(e)});$e("dddd",function(e,t){return t.weekdaysRegex(e)});Ie(["dd","ddd","dddd"],function(e,t,i,n){var r=i._locale.weekdaysParse(e,n,i._strict);if(r!=null){t.d=r}else{p(i).invalidWeekday=e}});Ie(["d","e","E"],function(e,t,i,n){t[n]=_(e)});function Et(e,t){if(typeof e!=="string"){return e}if(!isNaN(e)){return parseInt(e,10)}e=t.weekdaysParse(e);if(typeof e==="number"){return e}return null}function Mt(e,t){if(typeof e==="string"){return t.weekdaysParse(e)%7||7}return isNaN(e)?null:e}var Pt="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");function Ot(e,t){if(!e){return n(this._weekdays)?this._weekdays:this._weekdays["standalone"]}return n(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]}var It="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");function Ft(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort}var Nt="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function jt(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin}function Ut(e,t,i){var n,r,s,a=e.toLocaleLowerCase();if(!this._weekdaysParse){this._weekdaysParse=[];this._shortWeekdaysParse=[];this._minWeekdaysParse=[];for(n=0;n<7;++n){s=d([2e3,1]).day(n);this._minWeekdaysParse[n]=this.weekdaysMin(s,"").toLocaleLowerCase();this._shortWeekdaysParse[n]=this.weekdaysShort(s,"").toLocaleLowerCase();this._weekdaysParse[n]=this.weekdays(s,"").toLocaleLowerCase()}}if(i){if(t==="dddd"){r=tt.call(this._weekdaysParse,a);return r!==-1?r:null}else if(t==="ddd"){r=tt.call(this._shortWeekdaysParse,a);return r!==-1?r:null}else{r=tt.call(this._minWeekdaysParse,a);return r!==-1?r:null}}else{if(t==="dddd"){r=tt.call(this._weekdaysParse,a);if(r!==-1){return r}r=tt.call(this._shortWeekdaysParse,a);if(r!==-1){return r}r=tt.call(this._minWeekdaysParse,a);return r!==-1?r:null}else if(t==="ddd"){r=tt.call(this._shortWeekdaysParse,a);if(r!==-1){return r}r=tt.call(this._weekdaysParse,a);if(r!==-1){return r}r=tt.call(this._minWeekdaysParse,a);return r!==-1?r:null}else{r=tt.call(this._minWeekdaysParse,a);if(r!==-1){return r}r=tt.call(this._weekdaysParse,a);if(r!==-1){return r}r=tt.call(this._shortWeekdaysParse,a);return r!==-1?r:null}}}function Lt(e,t,i){var n,r,s;if(this._weekdaysParseExact){return Ut.call(this,e,t,i)}if(!this._weekdaysParse){this._weekdaysParse=[];this._minWeekdaysParse=[];this._shortWeekdaysParse=[];this._fullWeekdaysParse=[]}for(n=0;n<7;n++){r=d([2e3,1]).day(n);if(i&&!this._fullWeekdaysParse[n]){this._fullWeekdaysParse[n]=new RegExp("^"+this.weekdays(r,"").replace(".",".?")+"$","i");this._shortWeekdaysParse[n]=new RegExp("^"+this.weekdaysShort(r,"").replace(".",".?")+"$","i");this._minWeekdaysParse[n]=new RegExp("^"+this.weekdaysMin(r,"").replace(".",".?")+"$","i")}if(!this._weekdaysParse[n]){s="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,"");this._weekdaysParse[n]=new RegExp(s.replace(".",""),"i")}if(i&&t==="dddd"&&this._fullWeekdaysParse[n].test(e)){return n}else if(i&&t==="ddd"&&this._shortWeekdaysParse[n].test(e)){return n}else if(i&&t==="dd"&&this._minWeekdaysParse[n].test(e)){return n}else if(!i&&this._weekdaysParse[n].test(e)){return n}}}function Rt(e){if(!this.isValid()){return e!=null?this:NaN}var t=this._isUTC?this._d.getUTCDay():this._d.getDay();if(e!=null){e=Et(e,this.localeData());return this.add(e-t,"d")}else{return t}}function Ht(e){if(!this.isValid()){return e!=null?this:NaN}var t=(this.day()+7-this.localeData()._week.dow)%7;return e==null?t:this.add(e-t,"d")}function zt(e){if(!this.isValid()){return e!=null?this:NaN}if(e!=null){var t=Mt(e,this.localeData());return this.day(this.day()%7?t:t-7)}else{return this.day()||7}}var Yt=De;function Vt(e){if(this._weekdaysParseExact){if(!f(this,"_weekdaysRegex")){Gt.call(this)}if(e){return this._weekdaysStrictRegex}else{return this._weekdaysRegex}}else{if(!f(this,"_weekdaysRegex")){this._weekdaysRegex=Yt}return this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex}}var Bt=De;function Wt(e){if(this._weekdaysParseExact){if(!f(this,"_weekdaysRegex")){Gt.call(this)}if(e){return this._weekdaysShortStrictRegex}else{return this._weekdaysShortRegex}}else{if(!f(this,"_weekdaysShortRegex")){this._weekdaysShortRegex=Bt}return this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex}}var qt=De;function Zt(e){if(this._weekdaysParseExact){if(!f(this,"_weekdaysRegex")){Gt.call(this)}if(e){return this._weekdaysMinStrictRegex}else{return this._weekdaysMinRegex}}else{if(!f(this,"_weekdaysMinRegex")){this._weekdaysMinRegex=qt}return this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex}}function Gt(){function e(e,t){return t.length-e.length}var t=[],i=[],n=[],r=[],s,a,o,l,u;for(s=0;s<7;s++){a=d([2e3,1]).day(s);o=this.weekdaysMin(a,"");l=this.weekdaysShort(a,"");u=this.weekdays(a,"");t.push(o);i.push(l);n.push(u);r.push(o);r.push(l);r.push(u)}t.sort(e);i.sort(e);n.sort(e);r.sort(e);for(s=0;s<7;s++){i[s]=Me(i[s]);n[s]=Me(n[s]);r[s]=Me(r[s])}this._weekdaysRegex=new RegExp("^("+r.join("|")+")","i");this._weekdaysShortRegex=this._weekdaysRegex;this._weekdaysMinRegex=this._weekdaysRegex;this._weekdaysStrictRegex=new RegExp("^("+n.join("|")+")","i");this._weekdaysShortStrictRegex=new RegExp("^("+i.join("|")+")","i");this._weekdaysMinStrictRegex=new RegExp("^("+t.join("|")+")","i")}function Qt(){return this.hours()%12||12}function Xt(){return this.hours()||24}se("H",["HH",2],0,"hour");se("h",["hh",2],0,Qt);se("k",["kk",2],0,Xt);se("hmm",0,0,function(){return""+Qt.apply(this)+ee(this.minutes(),2)});se("hmmss",0,0,function(){return""+Qt.apply(this)+ee(this.minutes(),2)+ee(this.seconds(),2)});se("Hmm",0,0,function(){return""+this.hours()+ee(this.minutes(),2)});se("Hmmss",0,0,function(){return""+this.hours()+ee(this.minutes(),2)+ee(this.seconds(),2)});function Kt(e,t){se(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}Kt("a",true);Kt("A",false);Z("hour","h");K("hour",13);function Jt(e,t){return t._meridiemParse}$e("a",Jt);$e("A",Jt);$e("H",me);$e("h",me);$e("k",me);$e("HH",me,ce);$e("hh",me,ce);$e("kk",me,ce);$e("hmm",ge);$e("hmmss",ve);$e("Hmm",ge);$e("Hmmss",ve);Oe(["H","HH"],Le);Oe(["k","kk"],function(e,t,i){var n=_(e);t[Le]=n===24?0:n});Oe(["a","A"],function(e,t,i){i._isPm=i._locale.isPM(e);i._meridiem=e});Oe(["h","hh"],function(e,t,i){t[Le]=_(e);p(i).bigHour=true});Oe("hmm",function(e,t,i){var n=e.length-2;t[Le]=_(e.substr(0,n));t[Re]=_(e.substr(n));p(i).bigHour=true});Oe("hmmss",function(e,t,i){var n=e.length-4;var r=e.length-2;t[Le]=_(e.substr(0,n));t[Re]=_(e.substr(n,2));t[He]=_(e.substr(r));p(i).bigHour=true});Oe("Hmm",function(e,t,i){var n=e.length-2;t[Le]=_(e.substr(0,n));t[Re]=_(e.substr(n))});Oe("Hmmss",function(e,t,i){var n=e.length-4;var r=e.length-2;t[Le]=_(e.substr(0,n));t[Re]=_(e.substr(n,2));t[He]=_(e.substr(r))});function ei(e){return(e+"").toLowerCase().charAt(0)==="p"}var ti=/[ap]\.?m?\.?/i;function ii(e,t,i){if(e>11){return i?"pm":"PM"}else{return i?"am":"AM"}}var ni=Ge("Hours",true);var ri={calendar:F,longDateFormat:j,invalidDate:L,ordinal:H,dayOfMonthOrdinalParse:z,relativeTime:V,months:rt,monthsShort:at,week:kt,weekdays:Pt,weekdaysMin:Nt,weekdaysShort:It,meridiemParse:ti};var si={};var ai={};var oi;function li(e){return e?e.toLowerCase().replace("_","-"):e}function ui(e){var t=0,i,n,r,s;while(t<e.length){s=li(e[t]).split("-");i=s.length;n=li(e[t+1]);n=n?n.split("-"):null;while(i>0){r=fi(s.slice(0,i).join("-"));if(r){return r}if(n&&n.length>=i&&k(s,n,true)>=i-1){break}i--}t++}return null}function fi(e){var t=null;if(!si[e]&&typeof module!=="undefined"&&module&&module.exports){try{t=oi._abbr;var i=require;i("./locale/"+e);ci(t)}catch(e){}}return si[e]}function ci(e,t){var i;if(e){if(a(t)){i=pi(e)}else{i=di(e,t)}if(i){oi=i}}return oi._abbr}function di(e,t){if(t!==null){var i=ri;t.abbr=e;if(si[e]!=null){A("defineLocaleOverride","use moment.updateLocale(localeName, config) to change "+"an existing locale. moment.defineLocale(localeName, "+"config) should only be used for creating a new locale "+"See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");i=si[e]._config}else if(t.parentLocale!=null){if(si[t.parentLocale]!=null){i=si[t.parentLocale]._config}else{if(!ai[t.parentLocale]){ai[t.parentLocale]=[]}ai[t.parentLocale].push({name:e,config:t});return null}}si[e]=new O(P(i,t));if(ai[e]){ai[e].forEach(function(e){di(e.name,e.config)})}ci(e);return si[e]}else{delete si[e];return null}}function hi(e,t){if(t!=null){var i,n,r=ri;n=fi(e);if(n!=null){r=n._config}t=P(r,t);i=new O(t);i.parentLocale=si[e];si[e]=i;ci(e)}else{if(si[e]!=null){if(si[e].parentLocale!=null){si[e]=si[e].parentLocale}else if(si[e]!=null){delete si[e]}}}return si[e]}function pi(e){var t;if(e&&e._locale&&e._locale._abbr){e=e._locale._abbr}if(!e){return oi}if(!n(e)){t=fi(e);if(t){return t}e=[e]}return ui(e)}function mi(){return I(si)}function gi(e){var t;var i=e._a;if(i&&p(e).overflow===-2){t=i[je]<0||i[je]>11?je:i[Ue]<1||i[Ue]>it(i[Ne],i[je])?Ue:i[Le]<0||i[Le]>24||i[Le]===24&&(i[Re]!==0||i[He]!==0||i[ze]!==0)?Le:i[Re]<0||i[Re]>59?Re:i[He]<0||i[He]>59?He:i[ze]<0||i[ze]>999?ze:-1;if(p(e)._overflowDayOfYear&&(t<Ne||t>Ue)){t=Ue}if(p(e)._overflowWeeks&&t===-1){t=Ye}if(p(e)._overflowWeekday&&t===-1){t=Ve}p(e).overflow=t}return e}function vi(e,t,i){if(e!=null){return e}if(t!=null){return t}return i}function yi(e){var i=new Date(t.now());if(e._useUTC){return[i.getUTCFullYear(),i.getUTCMonth(),i.getUTCDate()]}return[i.getFullYear(),i.getMonth(),i.getDate()]}function bi(e){var t,i,n=[],r,s,a;if(e._d){return}r=yi(e);if(e._w&&e._a[Ue]==null&&e._a[je]==null){wi(e)}if(e._dayOfYear!=null){a=vi(e._a[Ne],r[Ne]);if(e._dayOfYear>Be(a)||e._dayOfYear===0){p(e)._overflowDayOfYear=true}i=bt(a,0,e._dayOfYear);e._a[je]=i.getUTCMonth();e._a[Ue]=i.getUTCDate()}for(t=0;t<3&&e._a[t]==null;++t){e._a[t]=n[t]=r[t]}for(;t<7;t++){e._a[t]=n[t]=e._a[t]==null?t===2?1:0:e._a[t]}if(e._a[Le]===24&&e._a[Re]===0&&e._a[He]===0&&e._a[ze]===0){e._nextDay=true;e._a[Le]=0}e._d=(e._useUTC?bt:yt).apply(null,n);s=e._useUTC?e._d.getUTCDay():e._d.getDay();if(e._tzm!=null){e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm)}if(e._nextDay){e._a[Le]=24}if(e._w&&typeof e._w.d!=="undefined"&&e._w.d!==s){p(e).weekdayMismatch=true}}function wi(e){var t,i,n,r,s,a,o,l;t=e._w;if(t.GG!=null||t.W!=null||t.E!=null){s=1;a=4;i=vi(t.GG,e._a[Ne],Ct(Bi(),1,4).year);n=vi(t.W,1);r=vi(t.E,1);if(r<1||r>7){l=true}}else{s=e._locale._week.dow;a=e._locale._week.doy;var u=Ct(Bi(),s,a);i=vi(t.gg,e._a[Ne],u.year);n=vi(t.w,u.week);if(t.d!=null){r=t.d;if(r<0||r>6){l=true}}else if(t.e!=null){r=t.e+s;if(t.e<0||t.e>6){l=true}}else{r=s}}if(n<1||n>Tt(i,s,a)){p(e)._overflowWeeks=true}else if(l!=null){p(e)._overflowWeekday=true}else{o=xt(i,n,r,s,a);e._a[Ne]=o.year;e._dayOfYear=o.dayOfYear}}var xi=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;var Ci=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;var Ti=/Z|[+-]\d\d(?::?\d\d)?/;var _i=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,false],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,false],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,false],["YYYYDDD",/\d{7}/]];var ki=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]];var Di=/^\/?Date\((\-?\d+)/i;function Si(e){var t,i,n=e._i,r=xi.exec(n)||Ci.exec(n),s,a,o,l;if(r){p(e).iso=true;for(t=0,i=_i.length;t<i;t++){if(_i[t][1].exec(r[1])){a=_i[t][0];s=_i[t][2]!==false;break}}if(a==null){e._isValid=false;return}if(r[3]){for(t=0,i=ki.length;t<i;t++){if(ki[t][1].exec(r[3])){o=(r[2]||" ")+ki[t][0];break}}if(o==null){e._isValid=false;return}}if(!s&&o!=null){e._isValid=false;return}if(r[4]){if(Ti.exec(r[4])){l="Z"}else{e._isValid=false;return}}e._f=a+(o||"")+(l||"");ji(e)}else{e._isValid=false}}var $i=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function Ai(e,t,i,n,r,s){var a=[Ei(e),at.indexOf(t),parseInt(i,10),parseInt(n,10),parseInt(r,10)];if(s){a.push(parseInt(s,10))}return a}function Ei(e){var t=parseInt(e,10);if(t<=49){return 2e3+t}else if(t<=999){return 1900+t}return t}function Mi(e){return e.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}function Pi(e,t,i){if(e){var n=It.indexOf(e),r=new Date(t[0],t[1],t[2]).getDay();if(n!==r){p(i).weekdayMismatch=true;i._isValid=false;return false}}return true}var Oi={UT:0,GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};function Ii(e,t,i){if(e){return Oi[e]}else if(t){return 0}else{var n=parseInt(i,10);var r=n%100,s=(n-r)/100;return s*60+r}}function Fi(e){var t=$i.exec(Mi(e._i));if(t){var i=Ai(t[4],t[3],t[2],t[5],t[6],t[7]);if(!Pi(t[1],i,e)){return}e._a=i;e._tzm=Ii(t[8],t[9],t[10]);e._d=bt.apply(null,e._a);e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm);p(e).rfc2822=true}else{e._isValid=false}}function Ni(e){var i=Di.exec(e._i);if(i!==null){e._d=new Date(+i[1]);return}Si(e);if(e._isValid===false){delete e._isValid}else{return}Fi(e);if(e._isValid===false){delete e._isValid}else{return}t.createFromInputFallback(e)}t.createFromInputFallback=S("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), "+"which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are "+"discouraged and will be removed in an upcoming major release. Please refer to "+"http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))});t.ISO_8601=function(){};t.RFC_2822=function(){};function ji(e){if(e._f===t.ISO_8601){Si(e);return}if(e._f===t.RFC_2822){Fi(e);return}e._a=[];p(e).empty=true;var i=""+e._i,n,r,s,a,o,l=i.length,u=0;s=ue(e._f,e._locale).match(te)||[];for(n=0;n<s.length;n++){a=s[n];r=(i.match(Ae(a,e))||[])[0];if(r){o=i.substr(0,i.indexOf(r));if(o.length>0){p(e).unusedInput.push(o)}i=i.slice(i.indexOf(r)+r.length);u+=r.length}if(re[a]){if(r){p(e).empty=false}else{p(e).unusedTokens.push(a)}Fe(a,r,e)}else if(e._strict&&!r){p(e).unusedTokens.push(a)}}p(e).charsLeftOver=l-u;if(i.length>0){p(e).unusedInput.push(i)}if(e._a[Le]<=12&&p(e).bigHour===true&&e._a[Le]>0){p(e).bigHour=undefined}p(e).parsedDateParts=e._a.slice(0);p(e).meridiem=e._meridiem;e._a[Le]=Ui(e._locale,e._a[Le],e._meridiem);bi(e);gi(e)}function Ui(e,t,i){var n;if(i==null){return t}if(e.meridiemHour!=null){return e.meridiemHour(t,i)}else if(e.isPM!=null){n=e.isPM(i);if(n&&t<12){t+=12}if(!n&&t===12){t=0}return t}else{return t}}function Li(e){var t,i,n,r,s;if(e._f.length===0){p(e).invalidFormat=true;e._d=new Date(NaN);return}for(r=0;r<e._f.length;r++){s=0;t=b({},e);if(e._useUTC!=null){t._useUTC=e._useUTC}t._f=e._f[r];ji(t);if(!g(t)){continue}s+=p(t).charsLeftOver;s+=p(t).unusedTokens.length*10;p(t).score=s;if(n==null||s<n){n=s;i=t}}c(e,i||t)}function Ri(e){if(e._d){return}var t=Q(e._i);e._a=u([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)});bi(e)}function Hi(e){var t=new x(gi(zi(e)));if(t._nextDay){t.add(1,"d");t._nextDay=undefined}return t}function zi(e){var t=e._i,i=e._f;e._locale=e._locale||pi(e._l);if(t===null||i===undefined&&t===""){return v({nullInput:true})}if(typeof t==="string"){e._i=t=e._locale.preparse(t)}if(C(t)){return new x(gi(t))}else if(l(t)){e._d=t}else if(n(i)){Li(e)}else if(i){ji(e)}else{Yi(e)}if(!g(e)){e._d=null}return e}function Yi(e){var i=e._i;if(a(i)){e._d=new Date(t.now())}else if(l(i)){e._d=new Date(i.valueOf())}else if(typeof i==="string"){Ni(e)}else if(n(i)){e._a=u(i.slice(0),function(e){return parseInt(e,10)});bi(e)}else if(r(i)){Ri(e)}else if(o(i)){e._d=new Date(i)}else{t.createFromInputFallback(e)}}function Vi(e,t,i,a,o){var l={};if(i===true||i===false){a=i;i=undefined}if(r(e)&&s(e)||n(e)&&e.length===0){e=undefined}l._isAMomentObject=true;l._useUTC=l._isUTC=o;l._l=i;l._i=e;l._f=t;l._strict=a;return Hi(l)}function Bi(e,t,i,n){return Vi(e,t,i,n,false)}var Wi=S("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Bi.apply(null,arguments);if(this.isValid()&&e.isValid()){return e<this?this:e}else{return v()}});var qi=S("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Bi.apply(null,arguments);if(this.isValid()&&e.isValid()){return e>this?this:e}else{return v()}});function Zi(e,t){var i,r;if(t.length===1&&n(t[0])){t=t[0]}if(!t.length){return Bi()}i=t[0];for(r=1;r<t.length;++r){if(!t[r].isValid()||t[r][e](i)){i=t[r]}}return i}function Gi(){var e=[].slice.call(arguments,0);return Zi("isBefore",e)}function Qi(){var e=[].slice.call(arguments,0);return Zi("isAfter",e)}var Xi=function(){return Date.now?Date.now():+new Date};var Ki=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ji(e){for(var t in e){if(!(tt.call(Ki,t)!==-1&&(e[t]==null||!isNaN(e[t])))){return false}}var i=false;for(var n=0;n<Ki.length;++n){if(e[Ki[n]]){if(i){return false}if(parseFloat(e[Ki[n]])!==_(e[Ki[n]])){i=true}}}return true}function en(){return this._isValid}function tn(){return _n(NaN)}function nn(e){var t=Q(e),i=t.year||0,n=t.quarter||0,r=t.month||0,s=t.week||0,a=t.day||0,o=t.hour||0,l=t.minute||0,u=t.second||0,f=t.millisecond||0;this._isValid=Ji(t);this._milliseconds=+f+u*1e3+l*6e4+o*1e3*60*60;this._days=+a+s*7;this._months=+r+n*3+i*12;this._data={};this._locale=pi();this._bubble()}function rn(e){return e instanceof nn}function sn(e){if(e<0){return Math.round(-1*e)*-1}else{return Math.round(e)}}function an(e,t){se(e,0,0,function(){var e=this.utcOffset();var i="+";if(e<0){e=-e;i="-"}return i+ee(~~(e/60),2)+t+ee(~~e%60,2)})}an("Z",":");an("ZZ","");$e("Z",_e);$e("ZZ",_e);Oe(["Z","ZZ"],function(e,t,i){i._useUTC=true;i._tzm=ln(_e,e)});var on=/([\+\-]|\d\d)/gi;function ln(e,t){var i=(t||"").match(e);if(i===null){return null}var n=i[i.length-1]||[];var r=(n+"").match(on)||["-",0,0];var s=+(r[1]*60)+_(r[2]);return s===0?0:r[0]==="+"?s:-s}function un(e,i){var n,r;if(i._isUTC){n=i.clone();r=(C(e)||l(e)?e.valueOf():Bi(e).valueOf())-n.valueOf();n._d.setTime(n._d.valueOf()+r);t.updateOffset(n,false);return n}else{return Bi(e).local()}}function fn(e){return-Math.round(e._d.getTimezoneOffset()/15)*15}t.updateOffset=function(){};function cn(e,i,n){var r=this._offset||0,s;if(!this.isValid()){return e!=null?this:NaN}if(e!=null){if(typeof e==="string"){e=ln(_e,e);if(e===null){return this}}else if(Math.abs(e)<16&&!n){e=e*60}if(!this._isUTC&&i){s=fn(this)}this._offset=e;this._isUTC=true;if(s!=null){this.add(s,"m")}if(r!==e){if(!i||this._changeInProgress){An(this,_n(e-r,"m"),1,false)}else if(!this._changeInProgress){this._changeInProgress=true;t.updateOffset(this,true);this._changeInProgress=null}}return this}else{return this._isUTC?r:fn(this)}}function dn(e,t){if(e!=null){if(typeof e!=="string"){e=-e}this.utcOffset(e,t);return this}else{return-this.utcOffset()}}function hn(e){return this.utcOffset(0,e)}function pn(e){if(this._isUTC){this.utcOffset(0,e);this._isUTC=false;if(e){this.subtract(fn(this),"m")}}return this}function mn(){if(this._tzm!=null){this.utcOffset(this._tzm,false,true)}else if(typeof this._i==="string"){var e=ln(Te,this._i);if(e!=null){this.utcOffset(e)}else{this.utcOffset(0,true)}}return this}function gn(e){if(!this.isValid()){return false}e=e?Bi(e).utcOffset():0;return(this.utcOffset()-e)%60===0}function vn(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function yn(){if(!a(this._isDSTShifted)){return this._isDSTShifted}var e={};b(e,this);e=zi(e);if(e._a){var t=e._isUTC?d(e._a):Bi(e._a);this._isDSTShifted=this.isValid()&&k(e._a,t.toArray())>0}else{this._isDSTShifted=false}return this._isDSTShifted}function bn(){return this.isValid()?!this._isUTC:false}function wn(){return this.isValid()?this._isUTC:false}function xn(){return this.isValid()?this._isUTC&&this._offset===0:false}var Cn=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;var Tn=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function _n(e,t){var i=e,n=null,r,s,a;if(rn(e)){i={ms:e._milliseconds,d:e._days,M:e._months}}else if(o(e)){i={};if(t){i[t]=e}else{i.milliseconds=e}}else if(!!(n=Cn.exec(e))){r=n[1]==="-"?-1:1;i={y:0,d:_(n[Ue])*r,h:_(n[Le])*r,m:_(n[Re])*r,s:_(n[He])*r,ms:_(sn(n[ze]*1e3))*r}}else if(!!(n=Tn.exec(e))){r=n[1]==="-"?-1:n[1]==="+"?1:1;i={y:kn(n[2],r),M:kn(n[3],r),w:kn(n[4],r),d:kn(n[5],r),h:kn(n[6],r),m:kn(n[7],r),s:kn(n[8],r)}}else if(i==null){i={}}else if(typeof i==="object"&&("from"in i||"to"in i)){a=Sn(Bi(i.from),Bi(i.to));i={};i.ms=a.milliseconds;i.M=a.months}s=new nn(i);if(rn(e)&&f(e,"_locale")){s._locale=e._locale}return s}_n.fn=nn.prototype;_n.invalid=tn;function kn(e,t){var i=e&&parseFloat(e.replace(",","."));return(isNaN(i)?0:i)*t}function Dn(e,t){var i={milliseconds:0,months:0};i.months=t.month()-e.month()+(t.year()-e.year())*12;if(e.clone().add(i.months,"M").isAfter(t)){--i.months}i.milliseconds=+t-+e.clone().add(i.months,"M");return i}function Sn(e,t){var i;if(!(e.isValid()&&t.isValid())){return{milliseconds:0,months:0}}t=un(t,e);if(e.isBefore(t)){i=Dn(e,t)}else{i=Dn(t,e);i.milliseconds=-i.milliseconds;i.months=-i.months}return i}function $n(e,t){return function(i,n){var r,s;if(n!==null&&!isNaN(+n)){A(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). "+"See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");s=i;i=n;n=s}i=typeof i==="string"?+i:i;r=_n(i,n);An(this,r,e);return this}}function An(e,i,n,r){var s=i._milliseconds,a=sn(i._days),o=sn(i._months);if(!e.isValid()){return}r=r==null?true:r;if(o){ft(e,Qe(e,"Month")+o*n)}if(a){Xe(e,"Date",Qe(e,"Date")+a*n)}if(s){e._d.setTime(e._d.valueOf()+s*n)}if(r){t.updateOffset(e,a||o)}}var En=$n(1,"add");var Mn=$n(-1,"subtract");function Pn(e,t){var i=e.diff(t,"days",true);return i<-6?"sameElse":i<-1?"lastWeek":i<0?"lastDay":i<1?"sameDay":i<2?"nextDay":i<7?"nextWeek":"sameElse"}function On(e,i){var n=e||Bi(),r=un(n,this).startOf("day"),s=t.calendarFormat(this,r)||"sameElse";var a=i&&(E(i[s])?i[s].call(this,n):i[s]);return this.format(a||this.localeData().calendar(s,this,Bi(n)))}function In(){return new x(this)}function Fn(e,t){var i=C(e)?e:Bi(e);if(!(this.isValid()&&i.isValid())){return false}t=G(!a(t)?t:"millisecond");if(t==="millisecond"){return this.valueOf()>i.valueOf()}else{return i.valueOf()<this.clone().startOf(t).valueOf()}}function Nn(e,t){var i=C(e)?e:Bi(e);if(!(this.isValid()&&i.isValid())){return false}t=G(!a(t)?t:"millisecond");if(t==="millisecond"){return this.valueOf()<i.valueOf()}else{return this.clone().endOf(t).valueOf()<i.valueOf()}}function jn(e,t,i,n){n=n||"()";return(n[0]==="("?this.isAfter(e,i):!this.isBefore(e,i))&&(n[1]===")"?this.isBefore(t,i):!this.isAfter(t,i))}function Un(e,t){var i=C(e)?e:Bi(e),n;if(!(this.isValid()&&i.isValid())){return false}t=G(t||"millisecond");if(t==="millisecond"){return this.valueOf()===i.valueOf()}else{n=i.valueOf();return this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()}}function Ln(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function Rn(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function Hn(e,t,i){var n,r,s,a;if(!this.isValid()){return NaN}n=un(e,this);if(!n.isValid()){return NaN}r=(n.utcOffset()-this.utcOffset())*6e4;t=G(t);switch(t){case"year":a=zn(this,n)/12;break;case"month":a=zn(this,n);break;case"quarter":a=zn(this,n)/3;break;case"second":a=(this-n)/1e3;break;case"minute":a=(this-n)/6e4;break;case"hour":a=(this-n)/36e5;break;case"day":a=(this-n-r)/864e5;break;case"week":a=(this-n-r)/6048e5;break;default:a=this-n}return i?a:T(a)}function zn(e,t){var i=(t.year()-e.year())*12+(t.month()-e.month()),n=e.clone().add(i,"months"),r,s;if(t-n<0){r=e.clone().add(i-1,"months");s=(t-n)/(n-r)}else{r=e.clone().add(i+1,"months");s=(t-n)/(r-n)}return-(i+s)||0}t.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";t.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";function Yn(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function Vn(e){if(!this.isValid()){return null}var t=e!==true;var i=t?this.clone().utc():this;if(i.year()<0||i.year()>9999){return le(i,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ")}if(E(Date.prototype.toISOString)){if(t){return this.toDate().toISOString()}else{return new Date(this._d.valueOf()).toISOString().replace("Z",le(i,"Z"))}}return le(i,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")}function Bn(){if(!this.isValid()){return"moment.invalid(/* "+this._i+" */)"}var e="moment";var t="";if(!this.isLocal()){e=this.utcOffset()===0?"moment.utc":"moment.parseZone";t="Z"}var i="["+e+'("]';var n=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY";var r="-MM-DD[T]HH:mm:ss.SSS";var s=t+'[")]';return this.format(i+n+r+s)}function Wn(e){if(!e){e=this.isUtc()?t.defaultFormatUtc:t.defaultFormat}var i=le(this,e);return this.localeData().postformat(i)}function qn(e,t){if(this.isValid()&&(C(e)&&e.isValid()||Bi(e).isValid())){return _n({to:this,from:e}).locale(this.locale()).humanize(!t)}else{return this.localeData().invalidDate()}}function Zn(e){return this.from(Bi(),e)}function Gn(e,t){if(this.isValid()&&(C(e)&&e.isValid()||Bi(e).isValid())){return _n({from:this,to:e}).locale(this.locale()).humanize(!t)}else{return this.localeData().invalidDate()}}function Qn(e){return this.to(Bi(),e)}function Xn(e){var t;if(e===undefined){return this._locale._abbr}else{t=pi(e);if(t!=null){this._locale=t}return this}}var Kn=S("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){if(e===undefined){return this.localeData()}else{return this.locale(e)}});function Jn(){return this._locale}function er(e){e=G(e);switch(e){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}if(e==="week"){this.weekday(0)}if(e==="isoWeek"){this.isoWeekday(1)}if(e==="quarter"){this.month(Math.floor(this.month()/3)*3)}return this}function tr(e){e=G(e);if(e===undefined||e==="millisecond"){return this}if(e==="date"){e="day"}return this.startOf(e).add(1,e==="isoWeek"?"week":e).subtract(1,"ms")}function ir(){return this._d.valueOf()-(this._offset||0)*6e4}function nr(){return Math.floor(this.valueOf()/1e3)}function rr(){return new Date(this.valueOf())}function sr(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function ar(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function or(){return this.isValid()?this.toISOString():null}function lr(){return g(this)}function ur(){return c({},p(this))}function fr(){return p(this).overflow}function cr(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}se(0,["gg",2],0,function(){return this.weekYear()%100});se(0,["GG",2],0,function(){return this.isoWeekYear()%100});function dr(e,t){se(0,[e,e.length],0,t)}dr("gggg","weekYear");dr("ggggg","weekYear");dr("GGGG","isoWeekYear");dr("GGGGG","isoWeekYear");Z("weekYear","gg");Z("isoWeekYear","GG");K("weekYear",1);K("isoWeekYear",1);$e("G",Ce);$e("g",Ce);$e("GG",me,ce);$e("gg",me,ce);$e("GGGG",be,he);$e("gggg",be,he);$e("GGGGG",we,pe);$e("ggggg",we,pe);Ie(["gggg","ggggg","GGGG","GGGGG"],function(e,t,i,n){t[n.substr(0,2)]=_(e)});Ie(["gg","GG"],function(e,i,n,r){i[r]=t.parseTwoDigitYear(e)});function hr(e){return vr.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function pr(e){return vr.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function mr(){return Tt(this.year(),1,4)}function gr(){var e=this.localeData()._week;return Tt(this.year(),e.dow,e.doy)}function vr(e,t,i,n,r){var s;if(e==null){return Ct(this,n,r).year}else{s=Tt(e,n,r);if(t>s){t=s}return yr.call(this,e,t,i,n,r)}}function yr(e,t,i,n,r){var s=xt(e,t,i,n,r),a=bt(s.year,0,s.dayOfYear);this.year(a.getUTCFullYear());this.month(a.getUTCMonth());this.date(a.getUTCDate());return this}se("Q",0,"Qo","quarter");Z("quarter","Q");K("quarter",7);$e("Q",fe);Oe("Q",function(e,t){t[je]=(_(e)-1)*3});function br(e){return e==null?Math.ceil((this.month()+1)/3):this.month((e-1)*3+this.month()%3)}se("D",["DD",2],"Do","date");Z("date","D");K("date",9);$e("D",me);$e("DD",me,ce);$e("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient});Oe(["D","DD"],Ue);Oe("Do",function(e,t){t[Ue]=_(e.match(me)[0])});var wr=Ge("Date",true);se("DDD",["DDDD",3],"DDDo","dayOfYear");Z("dayOfYear","DDD");K("dayOfYear",4);$e("DDD",ye);$e("DDDD",de);Oe(["DDD","DDDD"],function(e,t,i){i._dayOfYear=_(e)});function xr(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return e==null?t:this.add(e-t,"d")}se("m",["mm",2],0,"minute");Z("minute","m");K("minute",14);$e("m",me);$e("mm",me,ce);Oe(["m","mm"],Re);var Cr=Ge("Minutes",false);se("s",["ss",2],0,"second");Z("second","s");K("second",15);$e("s",me);$e("ss",me,ce);Oe(["s","ss"],He);var Tr=Ge("Seconds",false);se("S",0,0,function(){return~~(this.millisecond()/100)});se(0,["SS",2],0,function(){return~~(this.millisecond()/10)});se(0,["SSS",3],0,"millisecond");se(0,["SSSS",4],0,function(){return this.millisecond()*10});se(0,["SSSSS",5],0,function(){return this.millisecond()*100});se(0,["SSSSSS",6],0,function(){return this.millisecond()*1e3});se(0,["SSSSSSS",7],0,function(){return this.millisecond()*1e4});se(0,["SSSSSSSS",8],0,function(){return this.millisecond()*1e5});se(0,["SSSSSSSSS",9],0,function(){return this.millisecond()*1e6});Z("millisecond","ms");K("millisecond",16);$e("S",ye,fe);$e("SS",ye,ce);$e("SSS",ye,de);var _r;for(_r="SSSS";_r.length<=9;_r+="S"){$e(_r,xe)}function kr(e,t){t[ze]=_(("0."+e)*1e3)}for(_r="S";_r.length<=9;_r+="S"){Oe(_r,kr)}var Dr=Ge("Milliseconds",false);se("z",0,0,"zoneAbbr");se("zz",0,0,"zoneName");function Sr(){return this._isUTC?"UTC":""}function $r(){return this._isUTC?"Coordinated Universal Time":""}var Ar=x.prototype;Ar.add=En;Ar.calendar=On;Ar.clone=In;Ar.diff=Hn;Ar.endOf=tr;Ar.format=Wn;Ar.from=qn;Ar.fromNow=Zn;Ar.to=Gn;Ar.toNow=Qn;Ar.get=Ke;Ar.invalidAt=fr;Ar.isAfter=Fn;Ar.isBefore=Nn;Ar.isBetween=jn;Ar.isSame=Un;Ar.isSameOrAfter=Ln;Ar.isSameOrBefore=Rn;Ar.isValid=lr;Ar.lang=Kn;Ar.locale=Xn;Ar.localeData=Jn;Ar.max=qi;Ar.min=Wi;Ar.parsingFlags=ur;Ar.set=Je;Ar.startOf=er;Ar.subtract=Mn;Ar.toArray=sr;Ar.toObject=ar;Ar.toDate=rr;Ar.toISOString=Vn;Ar.inspect=Bn;Ar.toJSON=or;Ar.toString=Yn;Ar.unix=nr;Ar.valueOf=ir;Ar.creationData=cr;Ar.year=qe;Ar.isLeapYear=Ze;Ar.weekYear=hr;Ar.isoWeekYear=pr;Ar.quarter=Ar.quarters=br;Ar.month=ct;Ar.daysInMonth=dt;Ar.week=Ar.weeks=$t;Ar.isoWeek=Ar.isoWeeks=At;Ar.weeksInYear=gr;Ar.isoWeeksInYear=mr;Ar.date=wr;Ar.day=Ar.days=Rt;Ar.weekday=Ht;Ar.isoWeekday=zt;Ar.dayOfYear=xr;Ar.hour=Ar.hours=ni;Ar.minute=Ar.minutes=Cr;Ar.second=Ar.seconds=Tr;Ar.millisecond=Ar.milliseconds=Dr;Ar.utcOffset=cn;Ar.utc=hn;Ar.local=pn;Ar.parseZone=mn;Ar.hasAlignedHourOffset=gn;Ar.isDST=vn;Ar.isLocal=bn;Ar.isUtcOffset=wn;Ar.isUtc=xn;Ar.isUTC=xn;Ar.zoneAbbr=Sr;Ar.zoneName=$r;Ar.dates=S("dates accessor is deprecated. Use date instead.",wr);Ar.months=S("months accessor is deprecated. Use month instead",ct);Ar.years=S("years accessor is deprecated. Use year instead",qe);Ar.zone=S("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",dn);Ar.isDSTShifted=S("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",yn);function Er(e){return Bi(e*1e3)}function Mr(){return Bi.apply(null,arguments).parseZone()}function Pr(e){return e}var Or=O.prototype;Or.calendar=N;Or.longDateFormat=U;Or.invalidDate=R;Or.ordinal=Y;Or.preparse=Pr;Or.postformat=Pr;Or.relativeTime=B;Or.pastFuture=W;Or.set=M;Or.months=st;Or.monthsShort=ot;Or.monthsParse=ut;Or.monthsRegex=gt;Or.monthsShortRegex=pt;Or.week=_t;Or.firstDayOfYear=St;Or.firstDayOfWeek=Dt;Or.weekdays=Ot;Or.weekdaysMin=jt;Or.weekdaysShort=Ft;Or.weekdaysParse=Lt;Or.weekdaysRegex=Vt;Or.weekdaysShortRegex=Wt;Or.weekdaysMinRegex=Zt;Or.isPM=ei;Or.meridiem=ii;function Ir(e,t,i,n){var r=pi();var s=d().set(n,t);return r[i](s,e)}function Fr(e,t,i){if(o(e)){t=e;e=undefined}e=e||"";if(t!=null){return Ir(e,t,i,"month")}var n;var r=[];for(n=0;n<12;n++){r[n]=Ir(e,n,i,"month")}return r}function Nr(e,t,i,n){if(typeof e==="boolean"){if(o(t)){i=t;t=undefined}t=t||""}else{t=e;i=t;e=false;if(o(t)){i=t;t=undefined}t=t||""}var r=pi(),s=e?r._week.dow:0;if(i!=null){return Ir(t,(i+s)%7,n,"day")}var a;var l=[];for(a=0;a<7;a++){l[a]=Ir(t,(a+s)%7,n,"day")}return l}function jr(e,t){return Fr(e,t,"months")}function Ur(e,t){return Fr(e,t,"monthsShort")}function Lr(e,t,i){return Nr(e,t,i,"weekdays")}function Rr(e,t,i){return Nr(e,t,i,"weekdaysShort")}function Hr(e,t,i){return Nr(e,t,i,"weekdaysMin")}ci("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,i=_(e%100/10)===1?"th":t===1?"st":t===2?"nd":t===3?"rd":"th";return e+i}});t.lang=S("moment.lang is deprecated. Use moment.locale instead.",ci);t.langData=S("moment.langData is deprecated. Use moment.localeData instead.",pi);var zr=Math.abs;function Yr(){var e=this._data;this._milliseconds=zr(this._milliseconds);this._days=zr(this._days);this._months=zr(this._months);e.milliseconds=zr(e.milliseconds);e.seconds=zr(e.seconds);e.minutes=zr(e.minutes);e.hours=zr(e.hours);e.months=zr(e.months);e.years=zr(e.years);return this}function Vr(e,t,i,n){var r=_n(t,i);e._milliseconds+=n*r._milliseconds;e._days+=n*r._days;e._months+=n*r._months;return e._bubble()}function Br(e,t){return Vr(this,e,t,1)}function Wr(e,t){return Vr(this,e,t,-1)}function qr(e){if(e<0){return Math.floor(e)}else{return Math.ceil(e)}}function Zr(){var e=this._milliseconds;var t=this._days;var i=this._months;var n=this._data;var r,s,a,o,l;if(!(e>=0&&t>=0&&i>=0||e<=0&&t<=0&&i<=0)){e+=qr(Qr(i)+t)*864e5;t=0;i=0}n.milliseconds=e%1e3;r=T(e/1e3);n.seconds=r%60;s=T(r/60);n.minutes=s%60;a=T(s/60);n.hours=a%24;t+=T(a/24);l=T(Gr(t));i+=l;t-=qr(Qr(l));o=T(i/12);i%=12;n.days=t;n.months=i;n.years=o;return this}function Gr(e){return e*4800/146097}function Qr(e){return e*146097/4800}function Xr(e){if(!this.isValid()){return NaN}var t;var i;var n=this._milliseconds;e=G(e);if(e==="month"||e==="year"){t=this._days+n/864e5;i=this._months+Gr(t);return e==="month"?i:i/12}else{t=this._days+Math.round(Qr(this._months));switch(e){case"week":return t/7+n/6048e5;case"day":return t+n/864e5;case"hour":return t*24+n/36e5;case"minute":return t*1440+n/6e4;case"second":return t*86400+n/1e3;case"millisecond":return Math.floor(t*864e5)+n;default:throw new Error("Unknown unit "+e)}}}function Kr(){if(!this.isValid()){return NaN}return this._milliseconds+this._days*864e5+this._months%12*2592e6+_(this._months/12)*31536e6}function Jr(e){return function(){return this.as(e)}}var es=Jr("ms");var ts=Jr("s");var is=Jr("m");var ns=Jr("h");var rs=Jr("d");var ss=Jr("w");var as=Jr("M");var os=Jr("y");function ls(){return _n(this)}function us(e){e=G(e);return this.isValid()?this[e+"s"]():NaN}function fs(e){return function(){return this.isValid()?this._data[e]:NaN}}var cs=fs("milliseconds");var ds=fs("seconds");var hs=fs("minutes");var ps=fs("hours");var ms=fs("days");var gs=fs("months");var vs=fs("years");function ys(){return T(this.days()/7)}var bs=Math.round;var ws={ss:44,s:45,m:45,h:22,d:26,M:11};function xs(e,t,i,n,r){return r.relativeTime(t||1,!!i,e,n)}function Cs(e,t,i){var n=_n(e).abs();var r=bs(n.as("s"));var s=bs(n.as("m"));var a=bs(n.as("h"));var o=bs(n.as("d"));var l=bs(n.as("M"));var u=bs(n.as("y"));var f=r<=ws.ss&&["s",r]||r<ws.s&&["ss",r]||s<=1&&["m"]||s<ws.m&&["mm",s]||a<=1&&["h"]||a<ws.h&&["hh",a]||o<=1&&["d"]||o<ws.d&&["dd",o]||l<=1&&["M"]||l<ws.M&&["MM",l]||u<=1&&["y"]||["yy",u];f[2]=t;f[3]=+e>0;f[4]=i;return xs.apply(null,f)}function Ts(e){if(e===undefined){return bs}if(typeof e==="function"){bs=e;return true}return false}function _s(e,t){if(ws[e]===undefined){return false}if(t===undefined){return ws[e]}ws[e]=t;if(e==="s"){ws.ss=t-1}return true}function ks(e){if(!this.isValid()){return this.localeData().invalidDate()}var t=this.localeData();var i=Cs(this,!e,t);if(e){i=t.pastFuture(+this,i)}return t.postformat(i)}var Ds=Math.abs;function Ss(e){return(e>0)-(e<0)||+e}function $s(){if(!this.isValid()){return this.localeData().invalidDate()}var e=Ds(this._milliseconds)/1e3;var t=Ds(this._days);var i=Ds(this._months);var n,r,s;n=T(e/60);r=T(n/60);e%=60;n%=60;s=T(i/12);i%=12;var a=s;var o=i;var l=t;var u=r;var f=n;var c=e?e.toFixed(3).replace(/\.?0+$/,""):"";var d=this.asSeconds();if(!d){return"P0D"}var h=d<0?"-":"";var p=Ss(this._months)!==Ss(d)?"-":"";var m=Ss(this._days)!==Ss(d)?"-":"";var g=Ss(this._milliseconds)!==Ss(d)?"-":"";return h+"P"+(a?p+a+"Y":"")+(o?p+o+"M":"")+(l?m+l+"D":"")+(u||f||c?"T":"")+(u?g+u+"H":"")+(f?g+f+"M":"")+(c?g+c+"S":"")}var As=nn.prototype;As.isValid=en;As.abs=Yr;As.add=Br;As.subtract=Wr;As.as=Xr;As.asMilliseconds=es;As.asSeconds=ts;As.asMinutes=is;As.asHours=ns;As.asDays=rs;As.asWeeks=ss;As.asMonths=as;As.asYears=os;As.valueOf=Kr;As._bubble=Zr;As.clone=ls;As.get=us;As.milliseconds=cs;As.seconds=ds;As.minutes=hs;As.hours=ps;As.days=ms;As.weeks=ys;As.months=gs;As.years=vs;As.humanize=ks;As.toISOString=$s;As.toString=$s;As.toJSON=$s;As.locale=Xn;As.localeData=Jn;As.toIsoString=S("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",$s);As.lang=Kn;se("X",0,0,"unix");se("x",0,0,"valueOf");$e("x",Ce);$e("X",ke);Oe("X",function(e,t,i){i._d=new Date(parseFloat(e,10)*1e3)});Oe("x",function(e,t,i){i._d=new Date(_(e))});t.version="2.20.1";i(Bi);t.fn=Ar;t.min=Gi;t.max=Qi;t.now=Xi;t.utc=d;t.unix=Er;t.months=jr;t.isDate=l;t.locale=ci;t.invalid=v;t.duration=_n;t.isMoment=C;t.weekdays=Lr;t.parseZone=Mr;t.localeData=pi;t.isDuration=rn;t.monthsShort=Ur;t.weekdaysMin=Hr;t.defineLocale=di;t.updateLocale=hi;t.locales=mi;t.weekdaysShort=Rr;t.normalizeUnits=G;t.relativeTimeRounding=Ts;t.relativeTimeThreshold=_s;t.calendarFormat=Pn;t.prototype=Ar;t.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"YYYY-[W]WW",MONTH:"YYYY-MM"};return t});(function(e){"use strict";var t=typeof window==="undefined"?null:window;if(typeof define==="function"&&define.amd){define(function(){return e(t)})}else if(typeof module!=="undefined"){module.exports=e(t)}else{t.DOMPurify=e(t)}})(function e(t){"use strict";var i=function(t){return e(t)};i.version="0.7.4";if(!t||!t.document||t.document.nodeType!==9){i.isSupported=false;return i}var n=t.document;var r=n;var s=t.DocumentFragment;var a=t.HTMLTemplateElement;var o=t.NodeFilter;var l=t.NamedNodeMap||t.MozNamedAttrMap;var u=t.Text;var f=t.Comment;var c=t.DOMParser;if(typeof a==="function"){var d=n.createElement("template");if(d.content&&d.content.ownerDocument){n=d.content.ownerDocument}}var h=n.implementation;var p=n.createNodeIterator;var m=n.getElementsByTagName;var g=n.createDocumentFragment;var v=r.importNode;var y={};i.isSupported=typeof h.createHTMLDocument!=="undefined"&&n.documentMode!==9;var b=function(e,t){var i=t.length;while(i--){if(typeof t[i]==="string"){t[i]=t[i].toLowerCase()}e[t[i]]=true}return e};var w=function(e){var t={};var i;for(i in e){if(e.hasOwnProperty(i)){t[i]=e[i]}}return t};var x=null;var C=b({},["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr","svg","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","switch","symbol","text","textpath","title","tref","tspan","view","vkern","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feMerge","feMergeNode","feMorphology","feOffset","feSpecularLighting","feTile","feTurbulence","math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmuliscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mpspace","msqrt","mystyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover","#text"]);var T=null;var _=b({},["accept","action","align","alt","autocomplete","background","bgcolor","border","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","coords","datetime","default","dir","disabled","download","enctype","face","for","headers","height","hidden","high","href","hreflang","id","ismap","label","lang","list","loop","low","max","maxlength","media","method","min","multiple","name","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","rows","rowspan","spellcheck","scope","selected","shape","size","span","srclang","start","src","step","style","summary","tabindex","title","type","usemap","valign","value","width","xmlns","accent-height","accumulate","additivive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","clip","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","mode","min","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","surfacescale","targetx","targety","transform","text-anchor","text-decoration","text-rendering","textlength","u1","u2","unicode","values","viewbox","visibility","vert-adv-y","vert-origin-x","vert-origin-y","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","y","y1","y2","z","zoomandpan","accent","accentunder","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","display","displaystyle","fence","frame","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]);var k=null;var D=null;var S=true;var $=false;var A=false;var E=false;var M=/\{\{[\s\S]*|[\s\S]*\}\}/gm;var P=/<%[\s\S]*|[\s\S]*%>/gm;var O=false;var I=false;var F=false;var N=false;var j=true;var U=true;var L=b({},["audio","head","math","script","style","svg","video"]);var R=b({},["audio","video","img","source"]);var H=b({},["alt","class","for","id","label","name","pattern","placeholder","summary","title","value","style","xmlns"]);var z=null;var Y=n.createElement("form");var V=function(e){if(typeof e!=="object"){e={}}x="ALLOWED_TAGS"in e?b({},e.ALLOWED_TAGS):C;T="ALLOWED_ATTR"in e?b({},e.ALLOWED_ATTR):_;k="FORBID_TAGS"in e?b({},e.FORBID_TAGS):{};D="FORBID_ATTR"in e?b({},e.FORBID_ATTR):{};S=e.ALLOW_DATA_ATTR!==false;$=e.ALLOW_UNKNOWN_PROTOCOLS||false;A=e.SAFE_FOR_JQUERY||false;E=e.SAFE_FOR_TEMPLATES||false;O=e.WHOLE_DOCUMENT||false;I=e.RETURN_DOM||false;F=e.RETURN_DOM_FRAGMENT||false;N=e.RETURN_DOM_IMPORT||false;j=e.SANITIZE_DOM!==false;U=e.KEEP_CONTENT!==false;if(E){S=false}if(F){I=true}if(e.ADD_TAGS){if(x===C){x=w(x)}b(x,e.ADD_TAGS)}if(e.ADD_ATTR){if(T===_){T=w(T)}b(T,e.ADD_ATTR)}if(U){x["#text"]=true}if(Object&&"freeze"in Object){Object.freeze(e)}z=e};var B=function(e){try{e.parentNode.removeChild(e)}catch(t){e.outerHTML=""}};var W=function(e){var t,i;try{t=(new c).parseFromString(e,"text/html")}catch(e){}if(!t){t=h.createHTMLDocument("");i=t.body;i.parentNode.removeChild(i.parentNode.firstElementChild);i.outerHTML=e}if(typeof t.getElementsByTagName==="function"){return t.getElementsByTagName(O?"html":"body")[0]}return m.call(t,O?"html":"body")[0]};var q=function(e){return p.call(e.ownerDocument||e,e,o.SHOW_ELEMENT|o.SHOW_COMMENT|o.SHOW_TEXT,function(){return o.FILTER_ACCEPT},false)};var Z=function(e){if(e instanceof u||e instanceof f){return false}if(typeof e.nodeName!=="string"||typeof e.textContent!=="string"||typeof e.removeChild!=="function"||!(e.attributes instanceof l)||typeof e.removeAttribute!=="function"||typeof e.setAttribute!=="function"){return true}return false};var G=function(e){var t,i;ie("beforeSanitizeElements",e,null);if(Z(e)){B(e);return true}t=e.nodeName.toLowerCase();ie("uponSanitizeElement",e,{tagName:t});if(!x[t]||k[t]){if(U&&!L[t]&&typeof e.insertAdjacentHTML==="function"){try{e.insertAdjacentHTML("AfterEnd",e.innerHTML)}catch(e){}}B(e);return true}if(A&&!e.firstElementChild&&(!e.content||!e.content.firstElementChild)){e.innerHTML=e.textContent.replace(/</g,"&lt;")}if(E&&e.nodeType===3){i=e.textContent;i=i.replace(M," ");i=i.replace(P," ");e.textContent=i}ie("afterSanitizeElements",e,null);return false};var Q=/^data-[\w.\u00B7-\uFFFF-]/;var X=/^(?:(?:(?:f|ht)tps?|mailto|tel):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i;var K=/^(?:\w+script|data):/i;var J=/[\x00-\x20\xA0\u1680\u180E\u2000-\u2029\u205f\u3000]/g;var ee=function(e){var i,r,s,a,o,l,u,f;ie("beforeSanitizeAttributes",e,null);l=e.attributes;if(!l){return}u={attrName:"",attrValue:"",keepAttr:true};f=l.length;while(f--){i=l[f];r=i.name;s=i.value;a=r.toLowerCase();u.attrName=a;u.attrValue=s;u.keepAttr=true;ie("uponSanitizeAttribute",e,u);s=u.attrValue;if(a==="name"&&e.nodeName==="IMG"&&l.id){o=l.id;l=Array.prototype.slice.apply(l);e.removeAttribute("id");e.removeAttribute(r);if(l.indexOf(o)>f){e.setAttribute("id",o.value)}}else{if(r==="id"){e.setAttribute(r,"")}e.removeAttribute(r)}if(!u.keepAttr){continue}if(j&&(a==="id"||a==="name")&&(s in t||s in n||s in Y)){continue}if(E){s=s.replace(M," ");s=s.replace(P," ")}if(T[a]&&!D[a]&&(H[a]||X.test(s.replace(J,""))||a==="src"&&s.indexOf("data:")===0&&R[e.nodeName.toLowerCase()])||S&&Q.test(a)||$&&!K.test(s.replace(J,""))){try{e.setAttribute(r,s)}catch(e){}}}ie("afterSanitizeAttributes",e,null)};var te=function(e){var t;var i=q(e);ie("beforeSanitizeShadowDOM",e,null);while(t=i.nextNode()){ie("uponSanitizeShadowNode",t,null);if(G(t)){continue}if(t.content instanceof s){te(t.content)}ee(t)}ie("afterSanitizeShadowDOM",e,null)};var ie=function(e,t,n){if(!y[e]){return}y[e].forEach(function(e){e.call(i,t,n,z)})};i.sanitize=function(e,n){var a,o,l,u,f;if(!e){e=""}if(typeof e!=="string"){if(typeof e.toString!=="function"){throw new TypeError("toString is not a function")}else{e=e.toString()}}if(!i.isSupported){if(typeof t.toStaticHTML==="object"||typeof t.toStaticHTML==="function"){return t.toStaticHTML(e)}return e}V(n);if(!I&&!O&&e.indexOf("<")===-1){return e}a=W(e);if(!a){return I?null:""}u=q(a);while(o=u.nextNode()){if(o.nodeType===3&&o===l){continue}if(G(o)){continue}if(o.content instanceof s){te(o.content)}ee(o);l=o}if(I){if(F){f=g.call(a.ownerDocument);while(a.firstChild){f.appendChild(a.firstChild)}}else{f=a}if(N){f=v.call(r,f,true)}return f}return O?a.outerHTML:a.innerHTML};i.addHook=function(e,t){if(typeof t!=="function"){return}y[e]=y[e]||[];y[e].push(t)};i.removeHook=function(e){if(y[e]){y[e].pop()}};i.removeHooks=function(e){if(y[e]){y[e]=[]}};i.removeAllHooks=function(){y=[]};return i});(function e(t){"use strict";if(typeof define==="function"&&define.amd){define(t)}else if(typeof module!="undefined"&&typeof module.exports!="undefined"){module.exports=t()}else{window["KvSortable"]=t()}})(function e(){"use strict";if(typeof window==="undefined"||!window.document){return function e(){throw new Error("KvSortable.js requires a window with a document")}}var t,i,n,r,s,a,o,l,u,f,c,d,h,p,m,g,v,y={},b,w,x,C=/\s+/g,T=/left|right|inline/,_="KvSortable"+(new Date).getTime(),k=window,D=k.document,S=k.parseInt,$=k.setTimeout,A=k.jQuery||k.Zepto,E=k.Polymer,M=false,P=false,O="draggable"in D.createElement("div"),I=function(e){if(!!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\.|msie)/i)){return false}e=D.createElement("x");e.style.cssText="pointer-events:auto";return e.style.pointerEvents==="auto"}(),F=false,N=Math.abs,j=Math.min,U=[],L=[],R=ae(function(e,t,i){if(i&&t.scroll){var n=i[_],r,s,a=t.scrollSensitivity,o=t.scrollSpeed,c=e.clientX,d=e.clientY,h=window.innerWidth,p=window.innerHeight,m,g,v,b;if(u!==i){l=t.scroll;u=i;f=t.scrollFn;if(l===true){l=i;do{if(l.offsetWidth<l.scrollWidth||l.offsetHeight<l.scrollHeight){break}}while(l=l.parentNode)}}if(l){r=l;s=l.getBoundingClientRect();m=(N(s.right-c)<=a)-(N(s.left-c)<=a);g=(N(s.bottom-d)<=a)-(N(s.top-d)<=a)}if(!(m||g)){m=(h-c<=a)-(c<=a);g=(p-d<=a)-(d<=a);(m||g)&&(r=k)}if(y.vx!==m||y.vy!==g||y.el!==r){y.el=r;y.vx=m;y.vy=g;clearInterval(y.pid);if(r){y.pid=setInterval(function(){b=g?g*o:0;v=m?m*o:0;if("function"===typeof f){return f.call(n,v,b,e)}if(r===k){k.scrollTo(k.pageXOffset+v,k.pageYOffset+b)}else{r.scrollTop+=b;r.scrollLeft+=v}},24)}}}},30),H=function(e){function t(e,t){if(e===void 0||e===true){e=i.name}if(typeof e==="function"){return e}else{return function(i,n){var r=n.options.group.name;return t?e:e&&(e.join?e.indexOf(r)>-1:r==e)}}}var i={};var n=e.group;if(!n||typeof n!="object"){n={name:n}}i.name=n.name;i.checkPull=t(n.pull,true);i.checkPut=t(n.put);i.revertClone=n.revertClone;e.group=i};try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){P=false;M={capture:false,passive:P}}}))}catch(e){}function z(e,t){if(!(e&&e.nodeType&&e.nodeType===1)){throw"KvSortable: `el` must be HTMLElement, and not "+{}.toString.call(e)}this.el=e;this.options=t=oe({},t);e[_]=this;var i={group:Math.random(),sort:true,disabled:false,store:null,handle:null,scroll:true,scrollSensitivity:30,scrollSpeed:10,draggable:/[uo]l/i.test(e.nodeName)?"li":">*",ghostClass:"kvsortable-ghost",chosenClass:"kvsortable-chosen",dragClass:"kvsortable-drag",ignore:"a, img",filter:null,preventOnFilter:true,animation:0,setData:function(e,t){e.setData("Text",t.textContent)},dropBubble:false,dragoverBubble:false,dataIdAttr:"data-id",delay:0,forceFallback:false,fallbackClass:"kvsortable-fallback",fallbackOnBody:false,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:z.supportPointer!==false};for(var n in i){!(n in t)&&(t[n]=i[n])}H(t);for(var r in this){if(r.charAt(0)==="_"&&typeof this[r]==="function"){this[r]=this[r].bind(this)}}this.nativeDraggable=t.forceFallback?false:O;q(e,"mousedown",this._onTapStart);q(e,"touchstart",this._onTapStart);t.supportPointer&&q(e,"pointerdown",this._onTapStart);if(this.nativeDraggable){q(e,"dragover",this);q(e,"dragenter",this)}L.push(this._onDragOver);t.store&&this.sort(t.store.get(this))}z.prototype={constructor:z,_onTapStart:function(e){var i=this,n=this.el,r=this.options,s=r.preventOnFilter,a=e.type,l=e.touches&&e.touches[0],u=(l||e).target,f=e.target.shadowRoot&&(e.path&&e.path[0])||u,c=r.filter,d;ue(n);if(t){return}if(/mousedown|pointerdown/.test(a)&&e.button!==0||r.disabled){return}if(f.isContentEditable){return}u=V(u,r.draggable,n);if(!u){return}if(o===u){return}d=re(u,r.draggable);if(typeof c==="function"){if(c.call(this,e,u,this)){K(i,f,"filter",u,n,n,d);s&&e.preventDefault();return}}else if(c){c=c.split(",").some(function(e){e=V(f,e.trim(),n);if(e){K(i,e,"filter",u,n,n,d);return true}});if(c){s&&e.preventDefault();return}}if(r.handle&&!V(f,r.handle,n)){return}this._prepareDragStart(e,l,u,d)},_prepareDragStart:function(e,n,r,l){var u=this,f=u.el,c=u.options,d=f.ownerDocument,h;if(r&&!t&&r.parentNode===f){b=e;s=f;t=r;i=t.parentNode;a=t.nextSibling;o=r;g=c.group;p=l;this._lastX=(n||e).clientX;this._lastY=(n||e).clientY;t.style["will-change"]="all";h=function(){u._disableDelayedDrag();t.draggable=u.nativeDraggable;G(t,c.chosenClass,true);u._triggerDragStart(e,n);K(u,s,"choose",t,s,s,p)};c.ignore.split(",").forEach(function(e){X(t,e.trim(),ee)});q(d,"mouseup",u._onDrop);q(d,"touchend",u._onDrop);q(d,"touchcancel",u._onDrop);q(d,"selectstart",u);c.supportPointer&&q(d,"pointercancel",u._onDrop);if(c.delay){q(d,"mouseup",u._disableDelayedDrag);q(d,"touchend",u._disableDelayedDrag);q(d,"touchcancel",u._disableDelayedDrag);q(d,"mousemove",u._disableDelayedDrag);q(d,"touchmove",u._disableDelayedDrag);c.supportPointer&&q(d,"pointermove",u._disableDelayedDrag);u._dragStartTimer=$(h,c.delay)}else{h()}}},_disableDelayedDrag:function(){var e=this.el.ownerDocument;clearTimeout(this._dragStartTimer);Z(e,"mouseup",this._disableDelayedDrag);Z(e,"touchend",this._disableDelayedDrag);Z(e,"touchcancel",this._disableDelayedDrag);Z(e,"mousemove",this._disableDelayedDrag);Z(e,"touchmove",this._disableDelayedDrag);Z(e,"pointermove",this._disableDelayedDrag)},_triggerDragStart:function(e,i){i=i||(e.pointerType=="touch"?e:null);if(i){b={target:t,clientX:i.clientX,clientY:i.clientY};this._onDragStart(b,"touch")}else if(!this.nativeDraggable){this._onDragStart(b,true)}else{q(t,"dragend",this);q(s,"dragstart",this._onDragStart)}try{if(D.selection){fe(function(){D.selection.empty()})}else{window.getSelection().removeAllRanges()}}catch(e){}},_dragStarted:function(){if(s&&t){var e=this.options;G(t,e.ghostClass,true);G(t,e.dragClass,false);z.active=this;K(this,s,"start",t,s,s,p)}else{this._nulling()}},_emulateDragOver:function(){if(w){if(this._lastX===w.clientX&&this._lastY===w.clientY){return}this._lastX=w.clientX;this._lastY=w.clientY;if(!I){Q(n,"display","none")}var e=D.elementFromPoint(w.clientX,w.clientY);var t=e;var i=L.length;if(e&&e.shadowRoot){e=e.shadowRoot.elementFromPoint(w.clientX,w.clientY);t=e}if(t){do{if(t[_]){while(i--){L[i]({clientX:w.clientX,clientY:w.clientY,target:e,rootEl:t})}break}e=t}while(t=t.parentNode)}if(!I){Q(n,"display","")}}},_onTouchMove:function(e){if(b){var t=this.options,i=t.fallbackTolerance,r=t.fallbackOffset,s=e.touches?e.touches[0]:e,a=s.clientX-b.clientX+r.x,o=s.clientY-b.clientY+r.y,l=e.touches?"translate3d("+a+"px,"+o+"px,0)":"translate("+a+"px,"+o+"px)";if(!z.active){if(i&&j(N(s.clientX-this._lastX),N(s.clientY-this._lastY))<i){return}this._dragStarted()}this._appendGhost();x=true;w=s;Q(n,"webkitTransform",l);Q(n,"mozTransform",l);Q(n,"msTransform",l);Q(n,"transform",l);e.preventDefault()}},_appendGhost:function(){if(!n){var e=t.getBoundingClientRect(),i=Q(t),r=this.options,a;n=t.cloneNode(true);G(n,r.ghostClass,false);G(n,r.fallbackClass,true);G(n,r.dragClass,true);Q(n,"top",e.top-S(i.marginTop,10));Q(n,"left",e.left-S(i.marginLeft,10));Q(n,"width",e.width);Q(n,"height",e.height);Q(n,"opacity","0.8");Q(n,"position","fixed");Q(n,"zIndex","100000");Q(n,"pointerEvents","none");r.fallbackOnBody&&D.body.appendChild(n)||s.appendChild(n);a=n.getBoundingClientRect();Q(n,"width",e.width*2-a.width);Q(n,"height",e.height*2-a.height)}},_onDragStart:function(e,i){var n=this;var a=e.dataTransfer;var o=n.options;n._offUpEvents();if(g.checkPull(n,n,t,e)){r=le(t);r.draggable=false;r.style["will-change"]="";Q(r,"display","none");G(r,n.options.chosenClass,false);n._cloneId=fe(function(){s.insertBefore(r,t);K(n,s,"clone",t)})}G(t,o.dragClass,true);if(i){if(i==="touch"){q(D,"touchmove",n._onTouchMove);q(D,"touchend",n._onDrop);q(D,"touchcancel",n._onDrop);if(o.supportPointer){q(D,"pointermove",n._onTouchMove);q(D,"pointerup",n._onDrop)}}else{q(D,"mousemove",n._onTouchMove);q(D,"mouseup",n._onDrop)}n._loopId=setInterval(n._emulateDragOver,50)}else{if(a){a.effectAllowed="move";o.setData&&o.setData.call(n,a,t)}q(D,"drop",n);n._dragStartId=fe(n._dragStarted)}},_onDragOver:function(e){var o=this.el,l,u,f,p,m=this.options,y=m.group,b=z.active,w=g===y,C=false,k=m.sort;if(e.preventDefault!==void 0){e.preventDefault();!m.dragoverBubble&&e.stopPropagation()}if(t.animated){return}x=true;if(b&&!m.disabled&&(w?k||(p=!s.contains(t)):v===this||(b.lastPullMode=g.checkPull(this,b,t,e))&&y.checkPut(this,b,t,e))&&(e.rootEl===void 0||e.rootEl===this.el)){R(e,m,this.el);if(F){return}l=V(e.target,m.draggable,o);u=t.getBoundingClientRect();if(v!==this){v=this;C=true}if(p){Y(b,true);i=s;if(r||a){s.insertBefore(t,r||a)}else if(!k){s.appendChild(t)}return}if(o.children.length===0||o.children[0]===n||o===e.target&&ie(o,e)){if(o.children.length!==0&&o.children[0]!==n&&o===e.target){l=o.lastElementChild}if(l){if(l.animated){return}f=l.getBoundingClientRect()}Y(b,w);if(J(s,o,t,u,l,f,e)!==false){if(!t.contains(o)){o.appendChild(t);i=o}this._animate(u,t);l&&this._animate(f,l)}}else if(l&&!l.animated&&l!==t&&l.parentNode[_]!==void 0){if(c!==l){c=l;d=Q(l);h=Q(l.parentNode)}f=l.getBoundingClientRect();var D=f.right-f.left,S=f.bottom-f.top,A=T.test(d.cssFloat+d.display)||h.display=="flex"&&h["flex-direction"].indexOf("row")===0,E=l.offsetWidth>t.offsetWidth,M=l.offsetHeight>t.offsetHeight,P=(A?(e.clientX-f.left)/D:(e.clientY-f.top)/S)>.5,O=l.nextElementSibling,I=false;if(A){var N=t.offsetTop,j=l.offsetTop;if(N===j){I=l.previousElementSibling===t&&!E||P&&E}else if(l.previousElementSibling===t||t.previousElementSibling===l){I=(e.clientY-f.top)/S>.5}else{I=j>N}}else if(!C){I=O!==t&&!M||P&&M}var U=J(s,o,t,u,l,f,e,I);if(U!==false){if(U===1||U===-1){I=U===1}F=true;$(te,30);Y(b,w);if(!t.contains(o)){if(I&&!O){o.appendChild(t)}else{l.parentNode.insertBefore(t,I?O:l)}}i=t.parentNode;this._animate(u,t);this._animate(f,l)}}}},_animate:function(e,t){var i=this.options.animation;if(i){var n=t.getBoundingClientRect();if(e.nodeType===1){e=e.getBoundingClientRect()}Q(t,"transition","none");Q(t,"transform","translate3d("+(e.left-n.left)+"px,"+(e.top-n.top)+"px,0)");t.offsetWidth;Q(t,"transition","all "+i+"ms");Q(t,"transform","translate3d(0,0,0)");clearTimeout(t.animated);t.animated=$(function(){Q(t,"transition","");Q(t,"transform","");t.animated=false},i)}},_offUpEvents:function(){var e=this.el.ownerDocument;Z(D,"touchmove",this._onTouchMove);Z(D,"pointermove",this._onTouchMove);Z(e,"mouseup",this._onDrop);Z(e,"touchend",this._onDrop);Z(e,"pointerup",this._onDrop);Z(e,"touchcancel",this._onDrop);Z(e,"pointercancel",this._onDrop);Z(e,"selectstart",this)},_onDrop:function(e){var o=this.el,l=this.options;clearInterval(this._loopId);clearInterval(y.pid);clearTimeout(this._dragStartTimer);ce(this._cloneId);ce(this._dragStartId);Z(D,"mouseover",this);Z(D,"mousemove",this._onTouchMove);if(this.nativeDraggable){Z(D,"drop",this);Z(o,"dragstart",this._onDragStart)}this._offUpEvents();if(e){if(x){e.preventDefault();!l.dropBubble&&e.stopPropagation()}n&&n.parentNode&&n.parentNode.removeChild(n);if(s===i||z.active.lastPullMode!=="clone"){r&&r.parentNode&&r.parentNode.removeChild(r)}if(t){if(this.nativeDraggable){Z(t,"dragend",this)}ee(t);t.style["will-change"]="";G(t,this.options.ghostClass,false);G(t,this.options.chosenClass,false);K(this,s,"unchoose",t,i,s,p);if(s!==i){m=re(t,l.draggable);if(m>=0){K(null,i,"add",t,i,s,p,m);K(this,s,"remove",t,i,s,p,m);K(null,i,"sort",t,i,s,p,m);K(this,s,"sort",t,i,s,p,m)}}else{if(t.nextSibling!==a){m=re(t,l.draggable);if(m>=0){K(this,s,"update",t,i,s,p,m);K(this,s,"sort",t,i,s,p,m)}}}if(z.active){if(m==null||m===-1){m=p}K(this,s,"end",t,i,s,p,m);this.save()}}}this._nulling()},_nulling:function(){s=t=i=n=a=r=o=l=u=b=w=x=m=c=d=v=g=z.active=null;U.forEach(function(e){e.checked=true});U.length=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragover":case"dragenter":if(t){this._onDragOver(e);W(e)}break;case"mouseover":this._onDrop(e);break;case"selectstart":e.preventDefault();break}},toArray:function(){var e=[],t,i=this.el.children,n=0,r=i.length,s=this.options;for(;n<r;n++){t=i[n];if(V(t,s.draggable,this.el)){e.push(t.getAttribute(s.dataIdAttr)||ne(t))}}return e},sort:function(e){var t={},i=this.el;this.toArray().forEach(function(e,n){var r=i.children[n];if(V(r,this.options.draggable,i)){t[e]=r}},this);e.forEach(function(e){if(t[e]){i.removeChild(t[e]);i.appendChild(t[e])}})},save:function(){var e=this.options.store;e&&e.set(this)},closest:function(e,t){return V(e,t||this.options.draggable,this.el)},option:function(e,t){var i=this.options;if(t===void 0){return i[e]}else{i[e]=t;if(e==="group"){H(i)}}},destroy:function(){var e=this.el;e[_]=null;Z(e,"mousedown",this._onTapStart);Z(e,"touchstart",this._onTapStart);Z(e,"pointerdown",this._onTapStart);if(this.nativeDraggable){Z(e,"dragover",this);Z(e,"dragenter",this)}Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),function(e){e.removeAttribute("draggable")});L.splice(L.indexOf(this._onDragOver),1);this._onDrop();this.el=e=null}};function Y(e,i){if(e.lastPullMode!=="clone"){i=true}if(r&&r.state!==i){Q(r,"display",i?"none":"");if(!i){if(r.state){if(e.options.group.revertClone){s.insertBefore(r,a);e._animate(t,r)}else{s.insertBefore(r,t)}}}r.state=i}}function V(e,t,i){if(e){i=i||D;do{if(t===">*"&&e.parentNode===i||se(e,t)){return e}}while(e=B(e))}return null}function B(e){var t=e.host;return t&&t.nodeType?t:e.parentNode}function W(e){if(e.dataTransfer){e.dataTransfer.dropEffect="move"}e.preventDefault()}function q(e,t,i){e.addEventListener(t,i,M)}function Z(e,t,i){e.removeEventListener(t,i,M)}function G(e,t,i){if(e){if(e.classList){e.classList[i?"add":"remove"](t)}else{var n=(" "+e.className+" ").replace(C," ").replace(" "+t+" "," ");e.className=(n+(i?" "+t:"")).replace(C," ")}}}function Q(e,t,i){var n=e&&e.style;if(n){if(i===void 0){if(D.defaultView&&D.defaultView.getComputedStyle){i=D.defaultView.getComputedStyle(e,"")}else if(e.currentStyle){i=e.currentStyle}return t===void 0?i:i[t]}else{if(!(t in n)){t="-webkit-"+t}n[t]=i+(typeof i==="string"?"":"px")}}}function X(e,t,i){if(e){var n=e.getElementsByTagName(t),r=0,s=n.length;if(i){for(;r<s;r++){i(n[r],r)}}return n}return[]}function K(e,t,i,n,s,a,o,l){e=e||t[_];var u=D.createEvent("Event"),f=e.options,c="on"+i.charAt(0).toUpperCase()+i.substr(1);u.initEvent(i,true,true);u.to=s||t;u.from=a||t;u.item=n||t;u.clone=r;u.oldIndex=o;u.newIndex=l;t.dispatchEvent(u);if(f[c]){f[c].call(e,u)}}function J(e,t,i,n,r,s,a,o){var l,u=e[_],f=u.options.onMove,c;l=D.createEvent("Event");l.initEvent("move",true,true);l.to=t;l.from=e;l.dragged=i;l.draggedRect=n;l.related=r||t;l.relatedRect=s||t.getBoundingClientRect();l.willInsertAfter=o;e.dispatchEvent(l);if(f){c=f.call(u,l,a)}return c}function ee(e){e.draggable=false}function te(){F=false}function ie(e,t){var i=e.lastElementChild,n=i.getBoundingClientRect();return t.clientY-(n.top+n.height)>5||t.clientX-(n.left+n.width)>5}function ne(e){var t=e.tagName+e.className+e.src+e.href+e.textContent,i=t.length,n=0;while(i--){n+=t.charCodeAt(i)}return n.toString(36)}function re(e,t){var i=0;if(!e||!e.parentNode){return-1}while(e&&(e=e.previousElementSibling)){if(e.nodeName.toUpperCase()!=="TEMPLATE"&&(t===">*"||se(e,t))){i++}}return i}function se(e,t){if(e){t=t.split(".");var i=t.shift().toUpperCase(),n=new RegExp("\\s("+t.join("|")+")(?=\\s)","g");return(i===""||e.nodeName.toUpperCase()==i)&&(!t.length||((" "+e.className+" ").match(n)||[]).length==t.length)}return false}function ae(e,t){var i,n;return function(){if(i===void 0){i=arguments;n=this;$(function(){if(i.length===1){e.call(n,i[0])}else{e.apply(n,i)}i=void 0},t)}}}function oe(e,t){if(e&&t){for(var i in t){if(t.hasOwnProperty(i)){e[i]=t[i]}}}return e}function le(e){if(E&&E.dom){return E.dom(e).cloneNode(true)}else if(A){return A(e).clone(true)[0]}else{return e.cloneNode(true)}}function ue(e){var t=e.getElementsByTagName("input");var i=t.length;while(i--){var n=t[i];n.checked&&U.push(n)}}function fe(e){return $(e,0)}function ce(e){return clearTimeout(e)}q(D,"touchmove",function(e){if(z.active){e.preventDefault()}});z.utils={on:q,off:Z,css:Q,find:X,is:function(e,t){return!!V(e,t,e)},extend:oe,throttle:ae,closest:V,toggleClass:G,clone:le,index:re,nextTick:fe,cancelNextTick:ce};z.create=function(e,t){return new z(e,t)};z.version="1.7.0";return z});(function(e){"use strict";if(typeof define==="function"&&define.amd){define(["jquery"],e)}else{e(jQuery)}})(function(e){"use strict";e.fn.kvsortable=function(t){var i,n=arguments;this.each(function(){var r=e(this),s=r.data("kvsortable");if(!s&&(t instanceof Object||!t)){s=new KvSortable(this,t);r.data("kvsortable",s)}if(s){if(t==="widget"){i=s}else if(t==="destroy"){s.destroy();r.removeData("kvsortable")}else if(typeof s[t]==="function"){i=s[t].apply(s,[].slice.call(n,1))}else if(t in s.options){i=s.option.apply(s,n)}}});return i===void 0?this:i}});(function(e){"use strict";if(typeof define==="function"&&define.amd){define(["jquery"],e)}else{if(typeof module==="object"&&module.exports){module.exports=e(require("jquery"))}else{e(window.jQuery)}}})(function(e){"use strict";e.fn.fileinputLocales={};e.fn.fileinputThemes={};String.prototype.setTokens=function(e){var t=this.toString(),i,n;for(i in e){if(e.hasOwnProperty(i)){n=new RegExp("{"+i+"}","g");t=t.replace(n,e[i])}}return t};var t,i;t={FRAMES:".kv-preview-thumb",SORT_CSS:"file-sortable",OBJECT_PARAMS:'<param name="controller" value="true" />\n'+'<param name="allowFullScreen" value="true" />\n'+'<param name="allowScriptAccess" value="always" />\n'+'<param name="autoPlay" value="false" />\n'+'<param name="autoStart" value="false" />\n'+'<param name="quality" value="high" />\n',DEFAULT_PREVIEW:'<div class="file-preview-other">\n'+'<span class="{previewFileIconClass}">{previewFileIcon}</span>\n'+"</div>",MODAL_ID:"kvFileinputModal",MODAL_EVENTS:["show","shown","hide","hidden","loaded"],objUrl:window.URL||window.webkitURL,compare:function(e,t,i){return e!==undefined&&(i?e===t:e.match(t))},isIE:function(e){if(navigator.appName!=="Microsoft Internet Explorer"){return false}if(e===10){return new RegExp("msie\\s"+e,"i").test(navigator.userAgent)}var t=document.createElement("div"),i;t.innerHTML="\x3c!--[if IE "+e+"]> <i></i> <![endif]--\x3e";i=t.getElementsByTagName("i").length;document.body.appendChild(t);t.parentNode.removeChild(t);return i},initModal:function(t){var i=e("body");if(i.length){t.appendTo(i)}},isEmpty:function(t,i){return t===undefined||t===null||t.length===0||i&&e.trim(t)===""},isArray:function(e){return Array.isArray(e)||Object.prototype.toString.call(e)==="[object Array]"},ifSet:function(e,t,i){i=i||"";return t&&typeof t==="object"&&e in t?t[e]:i},cleanArray:function(e){if(!(e instanceof Array)){e=[]}return e.filter(function(e){return e!==undefined&&e!==null})},spliceArray:function(e,t){var i,n=0,r=[];if(!(e instanceof Array)){return[]}for(i=0;i<e.length;i++){if(i!==t){r[n]=e[i];n++}}return r},getNum:function(e,t){t=t||0;if(typeof e==="number"){return e}if(typeof e==="string"){e=parseFloat(e)}return isNaN(e)?t:e},hasFileAPISupport:function(){return!!(window.File&&window.FileReader)},hasDragDropSupport:function(){var e=document.createElement("div");return!t.isIE(9)&&(e.draggable!==undefined||e.ondragstart!==undefined&&e.ondrop!==undefined)},hasFileUploadSupport:function(){return t.hasFileAPISupport()&&window.FormData},hasBlobSupport:function(){try{return!!window.Blob&&Boolean(new Blob)}catch(e){return false}},hasArrayBufferViewSupport:function(){try{return new Blob([new Uint8Array(100)]).size===100}catch(e){return false}},dataURI2Blob:function(e){var i=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,n=t.hasBlobSupport(),r,s,a,o,l,u,f=(n||i)&&window.atob&&window.ArrayBuffer&&window.Uint8Array;if(!f){return null}if(e.split(",")[0].indexOf("base64")>=0){r=atob(e.split(",")[1])}else{r=decodeURIComponent(e.split(",")[1])}s=new ArrayBuffer(r.length);a=new Uint8Array(s);for(o=0;o<r.length;o+=1){a[o]=r.charCodeAt(o)}l=e.split(",")[0].split(":")[1].split(";")[0];if(n){return new Blob([t.hasArrayBufferViewSupport()?a:s],{type:l})}u=new i;u.append(s);return u.getBlob(l)},arrayBuffer2String:function(e){if(window.TextDecoder){return new TextDecoder("utf-8").decode(e)}var t=Array.prototype.slice.apply(new Uint8Array(e)),i="",n=0,r,s,a,o;r=t.length;while(n<r){s=t[n++];switch(s>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:i+=String.fromCharCode(s);break;case 12:case 13:a=t[n++];i+=String.fromCharCode((s&31)<<6|a&63);break;case 14:a=t[n++];o=t[n++];i+=String.fromCharCode((s&15)<<12|(a&63)<<6|(o&63)<<0);break}}return i},isHtml:function(e){var t=document.createElement("div");t.innerHTML=e;for(var i=t.childNodes,n=i.length;n--;){if(i[n].nodeType===1){return true}}return false},isSvg:function(e){return e.match(/^\s*<\?xml/i)&&(e.match(/<!DOCTYPE svg/i)||e.match(/<svg/i))},getMimeType:function(e,t,i){switch(e){case"ffd8ffe0":case"ffd8ffe1":case"ffd8ffe2":return"image/jpeg";case"89504E47":return"image/png";case"47494638":return"image/gif";case"49492a00":return"image/tiff";case"52494646":return"image/webp";case"66747970":return"video/3gp";case"4f676753":return"video/ogg";case"1a45dfa3":return"video/mkv";case"000001ba":case"000001b3":return"video/mpeg";case"3026b275":return"video/wmv";case"25504446":return"application/pdf";case"25215053":return"application/ps";case"504b0304":case"504b0506":case"504b0508":return"application/zip";case"377abcaf":return"application/7z";case"75737461":return"application/tar";case"7801730d":return"application/dmg";default:switch(e.substring(0,6)){case"435753":return"application/x-shockwave-flash";case"494433":return"audio/mp3";case"425a68":return"application/bzip";default:switch(e.substring(0,4)){case"424d":return"image/bmp";case"fffb":return"audio/mp3";case"4d5a":return"application/exe";case"1f9d":case"1fa0":return"application/zip";case"1f8b":return"application/gzip";default:return t&&!t.match(/[^\u0000-\u007f]/)?"application/text-plain":i}}}},addCss:function(e,t){e.removeClass(t).addClass(t)},getElement:function(i,n,r){return t.isEmpty(i)||t.isEmpty(i[n])?r:e(i[n])},uniqId:function(){return Math.round((new Date).getTime())+"_"+Math.round(Math.random()*100)},htmlEncode:function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")},replaceTags:function(t,i){var n=t;if(!i){return n}e.each(i,function(e,t){if(typeof t==="function"){t=t()}n=n.split(e).join(t)});return n},cleanMemory:function(e){var i=e.is("img")?e.attr("src"):e.find("source").attr("src");t.objUrl.revokeObjectURL(i)},findFileName:function(e){var t=e.lastIndexOf("/");if(t===-1){t=e.lastIndexOf("\\")}return e.split(e.substring(t,t+1)).pop()},checkFullScreen:function(){return document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement||document.msFullscreenElement},toggleFullScreen:function(e){var i=document,n=i.documentElement;if(n&&e&&!t.checkFullScreen()){if(n.requestFullscreen){n.requestFullscreen()}else if(n.msRequestFullscreen){n.msRequestFullscreen()}else if(n.mozRequestFullScreen){n.mozRequestFullScreen()}else if(n.webkitRequestFullscreen){n.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)}}else{if(i.exitFullscreen){i.exitFullscreen()}else if(i.msExitFullscreen){i.msExitFullscreen()}else if(i.mozCancelFullScreen){i.mozCancelFullScreen()}else if(i.webkitExitFullscreen){i.webkitExitFullscreen()}}},moveArray:function(e,t,i){if(i>=e.length){var n=i-e.length;while(n--+1){e.push(undefined)}}e.splice(i,0,e.splice(t,1)[0]);return e},cleanZoomCache:function(e){var t=e.closest(".kv-zoom-cache-theme");if(!t.length){t=e.closest(".kv-zoom-cache")}t.remove()},setOrientation:function(e,t){var i=new DataView(e),n=0,r=1,s,a,o;if(i.getUint16(n)!==65496||e.length<2){if(t){t()}return}n+=2;s=i.byteLength;while(n<s-2){a=i.getUint16(n);n+=2;switch(a){case 65505:o=i.getUint16(n);s=o-n;n+=2;break;case 274:r=i.getUint16(n+6,false);s=0;break}}if(t){t(r)}},validateOrientation:function(e,i){if(!window.FileReader||!window.DataView){return}var n=new FileReader,r;n.onloadend=function(){r=n.result;t.setOrientation(r,i)};n.readAsArrayBuffer(e)},adjustOrientedImage:function(e,t){var i,n,r;if(!e.hasClass("is-portrait-gt4")){return}if(t){e.css({width:e.parent().height()});return}else{e.css({height:"auto",width:e.height()})}i=e.parent().offset().top;n=e.offset().top;r=i-n;e.css("margin-top",r)},closeButton:function(e){e=e?"close "+e:"close";return'<button type="button" class="'+e+'" aria-label="Close">\n'+'  <span aria-hidden="true">&times;</span>\n'+"</button>"}};i=function(i,n){var r=this;r.$element=e(i);r.$parent=r.$element.parent();if(!r._validate()){return}r.isPreviewable=t.hasFileAPISupport();r.isIE9=t.isIE(9);r.isIE10=t.isIE(10);if(r.isPreviewable||r.isIE9){r._init(n);r._listen()}r.$element.removeClass("file-loading")};i.prototype={constructor:i,_cleanup:function(){var e=this;e.reader=null;e.formdata={};e.uploadCount=0;e.uploadStatus={};e.uploadLog=[];e.uploadAsyncCount=0;e.loadedImages=[];e.totalImagesCount=0;e.ajaxRequests=[];e.clearStack();e.fileInputCleared=false;e.fileBatchCompleted=true;if(!e.isPreviewable){e.showPreview=false}e.isError=false;e.ajaxAborted=false;e.cancelling=false},_init:function(i,n){var r=this,s,a=r.$element,o,l,u;r.options=i;e.each(i,function(e,i){switch(e){case"minFileCount":case"maxFileCount":case"minFileSize":case"maxFileSize":case"maxFilePreviewSize":case"resizeImageQuality":case"resizeIfSizeMoreThan":case"progressUploadThreshold":case"initialPreviewCount":case"zoomModalHeight":case"minImageHeight":case"maxImageHeight":case"minImageWidth":case"maxImageWidth":r[e]=t.getNum(i);break;default:r[e]=i;break}});if(r.rtl){u=r.previewZoomButtonIcons.prev;r.previewZoomButtonIcons.prev=r.previewZoomButtonIcons.next;r.previewZoomButtonIcons.next=u}if(!n){r._cleanup()}r.$form=a.closest("form");r._initTemplateDefaults();r.uploadFileAttr=!t.isEmpty(a.attr("name"))?a.attr("name"):"file_data";l=r._getLayoutTemplate("progress");r.progressTemplate=l.replace("{class}",r.progressClass);r.progressCompleteTemplate=l.replace("{class}",r.progressCompleteClass);r.progressErrorTemplate=l.replace("{class}",r.progressErrorClass);r.dropZoneEnabled=t.hasDragDropSupport()&&r.dropZoneEnabled;r.isDisabled=a.attr("disabled")||a.attr("readonly");if(r.isDisabled){a.attr("disabled",true)}r.isAjaxUpload=t.hasFileUploadSupport()&&!t.isEmpty(r.uploadUrl);r.isClickable=r.browseOnZoneClick&&r.showPreview&&(r.isAjaxUpload&&r.dropZoneEnabled||!t.isEmpty(r.defaultPreviewContent));r.slug=typeof i.slugCallback==="function"?i.slugCallback:r._slugDefault;r.mainTemplate=r.showCaption?r._getLayoutTemplate("main1"):r._getLayoutTemplate("main2");r.captionTemplate=r._getLayoutTemplate("caption");r.previewGenericTemplate=r._getPreviewTemplate("generic");if(!r.imageCanvas&&r.resizeImage&&(r.maxImageWidth||r.maxImageHeight)){r.imageCanvas=document.createElement("canvas");r.imageCanvasContext=r.imageCanvas.getContext("2d")}if(t.isEmpty(a.attr("id"))){a.attr("id",t.uniqId())}r.namespace=".fileinput_"+a.attr("id").replace(/-/g,"_");if(r.$container===undefined){r.$container=r._createContainer()}else{r._refreshContainer()}o=r.$container;r.$dropZone=o.find(".file-drop-zone");r.$progress=o.find(".kv-upload-progress");r.$btnUpload=o.find(".fileinput-upload");r.$captionContainer=t.getElement(i,"elCaptionContainer",o.find(".file-caption"));r.$caption=t.getElement(i,"elCaptionText",o.find(".file-caption-name"));if(!t.isEmpty(r.msgPlaceholder)){s=a.attr("multiple")?r.filePlural:r.fileSingle;r.$caption.attr("placeholder",r.msgPlaceholder.replace("{files}",s))}r.$captionIcon=r.$captionContainer.find(".file-caption-icon");r.$previewContainer=t.getElement(i,"elPreviewContainer",o.find(".file-preview"));r.$preview=t.getElement(i,"elPreviewImage",o.find(".file-preview-thumbnails"));r.$previewStatus=t.getElement(i,"elPreviewStatus",o.find(".file-preview-status"));r.$errorContainer=t.getElement(i,"elErrorContainer",r.$previewContainer.find(".kv-fileinput-error"));r._validateDisabled();if(!t.isEmpty(r.msgErrorClass)){t.addCss(r.$errorContainer,r.msgErrorClass)}if(!n){r.$errorContainer.hide();r.previewInitId="preview-"+t.uniqId();r._initPreviewCache();r._initPreview(true);r._initPreviewActions();r._setFileDropZoneTitle();if(r.$parent.hasClass("file-loading")){r.$container.insertBefore(r.$parent);r.$parent.remove()}}if(a.attr("disabled")){r.disable()}r._initZoom();if(r.hideThumbnailContent){t.addCss(r.$preview,"hide-content")}},_initTemplateDefaults:function(){var i=this,n,r,s,a,o,l,u,f,c,d,h,p,m,g,v,y,b,w,x,C,T,_,k,D,S,$,A,E,M,P,O,I,F,N,j,U,L,R;n="{preview}\n"+'<div class="kv-upload-progress kv-hidden"></div><div class="clearfix"></div>\n'+'<div class="input-group {class}">\n'+"  {caption}\n"+'<div class="input-group-btn input-group-append">\n'+"      {remove}\n"+"      {cancel}\n"+"      {upload}\n"+"      {browse}\n"+"    </div>\n"+"</div>";r='{preview}\n<div class="kv-upload-progress kv-hidden"></div>\n<div class="clearfix"></div>\n{remove}\n{cancel}\n{upload}\n{browse}\n';s='<div class="file-preview {class}">\n'+"    {close}"+'    <div class="{dropClass}">\n'+'    <div class="file-preview-thumbnails">\n'+"    </div>\n"+'    <div class="clearfix"></div>'+'    <div class="file-preview-status text-center text-success"></div>\n'+'    <div class="kv-fileinput-error"></div>\n'+"    </div>\n"+"</div>";o=t.closeButton("fileinput-remove");a='<i class="glyphicon glyphicon-file"></i>';l='<div class="file-caption form-control {class}" tabindex="500">\n'+'  <span class="file-caption-icon"></span>\n'+'  <input class="file-caption-name" onkeydown="return false;" onpaste="return false;">\n'+"</div>";u='<button type="{type}" tabindex="500" title="{title}" class="{css}" '+"{status}>{icon} {label}</button>";f='<a href="{href}" tabindex="500" title="{title}" class="{css}" {status}>{icon} {label}</a>';c='<div tabindex="500" class="{css}" {status}>{icon} {label}</div>';d='<div id="'+t.MODAL_ID+'" class="file-zoom-dialog modal fade" '+'tabindex="-1" aria-labelledby="'+t.MODAL_ID+'Label"></div>';h='<div class="modal-dialog modal-lg{rtl}" role="document">\n'+'  <div class="modal-content">\n'+'    <div class="modal-header">\n'+'      <h5 class="modal-title">{heading}</h5>\n'+'      <span class="kv-zoom-title"></span>\n'+'      <div class="kv-zoom-actions">{toggleheader}{fullscreen}{borderless}{close}</div>\n'+"    </div>\n"+'    <div class="modal-body">\n'+'      <div class="floating-buttons"></div>\n'+'      <div class="kv-zoom-body file-zoom-content {zoomFrameClass}"></div>\n'+"{prev} {next}\n"+"    </div>\n"+"  </div>\n"+"</div>\n";p='<div class="progress">\n'+'    <div class="{class}" role="progressbar"'+' aria-valuenow="{percent}" aria-valuemin="0" aria-valuemax="100" style="width:{percent}%;">\n'+"        {status}\n"+"     </div>\n"+"</div>";m=" <samp>({sizeText})</samp>";g='<div class="file-thumbnail-footer">\n'+'    <div class="file-footer-caption" title="{caption}">\n'+'        <div class="file-caption-info">{caption}</div>\n'+'        <div class="file-size-info">{size}</div>\n'+"    </div>\n"+"    {progress}\n{indicator}\n{actions}\n"+"</div>";v='<div class="file-actions">\n'+'    <div class="file-footer-buttons">\n'+"        {download} {upload} {delete} {zoom} {other}"+"    </div>\n"+"</div>\n"+"{drag}\n"+'<div class="clearfix"></div>';y='<button type="button" class="kv-file-remove {removeClass}" '+'title="{removeTitle}" {dataUrl}{dataKey}>{removeIcon}</button>\n';b='<button type="button" class="kv-file-upload {uploadClass}" title="{uploadTitle}">'+"{uploadIcon}</button>";w='<a class="kv-file-download {downloadClass}" title="{downloadTitle}" '+'href="{downloadUrl}" download="{caption}" target="_blank">{downloadIcon}</a>';x='<button type="button" class="kv-file-zoom {zoomClass}" '+'title="{zoomTitle}">{zoomIcon}</button>';C='<span class="file-drag-handle {dragClass}" title="{dragTitle}">{dragIcon}</span>';T='<div class="file-upload-indicator" title="{indicatorTitle}">{indicator}</div>';_='<div class="file-preview-frame {frameClass}" id="{previewId}" data-fileindex="{fileindex}"'+' data-template="{template}"';k=_+'><div class="kv-file-content">\n';D=_+' title="{caption}"><div class="kv-file-content">\n';S="</div>{footer}\n</div>\n";$="{content}\n";A='<div class="kv-preview-data file-preview-html" title="{caption}" {style}>{data}</div>\n';E='<img src="{data}" class="file-preview-image kv-preview-data" title="{caption}" '+'alt="{caption}" {style}>\n';M='<textarea class="kv-preview-data file-preview-text" title="{caption}" readonly {style}>'+"{data}</textarea>\n";P='<iframe class="kv-preview-data file-preview-office" '+'src="https://docs.google.com/gview?url={data}&embedded=true" {style}></iframe>';O='<video class="kv-preview-data file-preview-video" controls {style}>\n'+'<source src="{data}" type="{type}">\n'+t.DEFAULT_PREVIEW+"\n</video>\n";I='<audio class="kv-preview-data file-preview-audio" controls {style}>\n<source src="{data}" '+'type="{type}">\n'+t.DEFAULT_PREVIEW+"\n</audio>\n";F='<embed class="kv-preview-data file-preview-flash" src="{data}" type="application/x-shockwave-flash" {style}>\n';j='<embed class="kv-preview-data file-preview-pdf" src="{data}" type="application/pdf" {style}>\n';N='<object class="kv-preview-data file-preview-object file-object {typeCss}" '+'data="{data}" type="{type}" {style}>\n'+'<param name="movie" value="{caption}" />\n'+t.OBJECT_PARAMS+" "+t.DEFAULT_PREVIEW+"\n</object>\n";U='<div class="kv-preview-data file-preview-other-frame" {style}>\n'+t.DEFAULT_PREVIEW+"\n</div>\n";L='<div class="kv-zoom-cache" style="display:none">{zoomContent}</div>';R={width:"100%",height:"100%","min-height":"480px"};i.defaults={layoutTemplates:{main1:n,main2:r,preview:s,close:o,fileIcon:a,caption:l,modalMain:d,modal:h,progress:p,size:m,footer:g,indicator:T,actions:v,actionDelete:y,actionUpload:b,actionDownload:w,actionZoom:x,actionDrag:C,btnDefault:u,btnLink:f,btnBrowse:c,zoomCache:L},previewMarkupTags:{tagBefore1:k,tagBefore2:D,tagAfter:S},previewContentTemplates:{generic:$,html:A,image:E,text:M,office:P,video:O,audio:I,flash:F,object:N,pdf:j,other:U},allowedPreviewTypes:["image","html","text","video","audio","flash","pdf","object"],previewTemplates:{},previewSettings:{image:{width:"auto",height:"auto","max-width":"100%","max-height":"100%"},html:{width:"213px",height:"160px"},text:{width:"213px",height:"160px"},office:{width:"213px",height:"160px"},video:{width:"213px",height:"160px"},audio:{width:"100%",height:"30px"},flash:{width:"213px",height:"160px"},object:{width:"213px",height:"160px"},pdf:{width:"213px",height:"160px"},other:{width:"213px",height:"160px"}},previewSettingsSmall:{image:{width:"auto",height:"auto","max-width":"100%","max-height":"100%"},html:{width:"100%",height:"160px"},text:{width:"100%",height:"160px"},office:{width:"100%",height:"160px"},video:{width:"100%",height:"auto"},audio:{width:"100%",height:"30px"},flash:{width:"100%",height:"auto"},object:{width:"100%",height:"auto"},pdf:{width:"100%",height:"160px"},other:{width:"100%",height:"160px"}},previewZoomSettings:{image:{width:"auto",height:"auto","max-width":"100%","max-height":"100%"},html:R,text:R,office:{width:"100%",height:"100%","max-width":"100%","min-height":"480px"},video:{width:"auto",height:"100%","max-width":"100%"},audio:{width:"100%",height:"30px"},flash:{width:"auto",height:"480px"},object:{width:"auto",height:"100%","max-width":"100%","min-height":"480px"},pdf:R,other:{width:"auto",height:"100%","min-height":"480px"}},fileTypeSettings:{image:function(e,i){return t.compare(e,"image.*")&&!t.compare(e,/(tiff?|wmf)$/i)||t.compare(i,/\.(gif|png|jpe?g)$/i)},html:function(e,i){return t.compare(e,"text/html")||t.compare(i,/\.(htm|html)$/i)},office:function(e,i){return t.compare(e,/(word|excel|powerpoint|office|iwork-pages|tiff?)$/i)||t.compare(i,/\.(rtf|docx?|xlsx?|pptx?|pps|potx?|ods|odt|pages|ai|dxf|ttf|tiff?|wmf|e?ps)$/i)},text:function(e,i){return t.compare(e,"text.*")||t.compare(i,/\.(xml|javascript)$/i)||t.compare(i,/\.(txt|md|csv|nfo|ini|json|php|js|css)$/i)},video:function(e,i){return t.compare(e,"video.*")&&(t.compare(e,/(ogg|mp4|mp?g|mov|webm|3gp)$/i)||t.compare(i,/\.(og?|mp4|webm|mp?g|mov|3gp)$/i))},audio:function(e,i){return t.compare(e,"audio.*")&&(t.compare(i,/(ogg|mp3|mp?g|wav)$/i)||t.compare(i,/\.(og?|mp3|mp?g|wav)$/i))},flash:function(e,i){return t.compare(e,"application/x-shockwave-flash",true)||t.compare(i,/\.(swf)$/i)},pdf:function(e,i){return t.compare(e,"application/pdf",true)||t.compare(i,/\.(pdf)$/i)},object:function(){return true},other:function(){return true}},fileActionSettings:{showRemove:true,showUpload:true,showDownload:true,showZoom:true,showDrag:true,removeIcon:'<i class="glyphicon glyphicon-trash"></i>',removeClass:"btn btn-kv btn-default btn-outline-secondary",removeErrorClass:"btn btn-kv btn-danger",removeTitle:"Remove file",uploadIcon:'<i class="glyphicon glyphicon-upload"></i>',uploadClass:"btn btn-kv btn-default btn-outline-secondary",uploadTitle:"Upload file",uploadRetryIcon:'<i class="glyphicon glyphicon-repeat"></i>',uploadRetryTitle:"Retry upload",downloadIcon:'<i class="glyphicon glyphicon-download"></i>',downloadClass:"btn btn-kv btn-default btn-outline-secondary",downloadTitle:"Download file",zoomIcon:'<i class="glyphicon glyphicon-zoom-in"></i>',zoomClass:"btn btn-kv btn-default btn-outline-secondary",zoomTitle:"View Details",dragIcon:'<i class="glyphicon glyphicon-move"></i>',dragClass:"text-info",dragTitle:"Move / Rearrange",dragSettings:{},indicatorNew:'<i class="glyphicon glyphicon-plus-sign text-warning"></i>',indicatorSuccess:'<i class="glyphicon glyphicon-ok-sign text-success"></i>',indicatorError:'<i class="glyphicon glyphicon-exclamation-sign text-danger"></i>',indicatorLoading:'<i class="glyphicon glyphicon-hourglass text-muted"></i>',indicatorNewTitle:"Not uploaded yet",indicatorSuccessTitle:"Uploaded",indicatorErrorTitle:"Upload Error",indicatorLoadingTitle:"Uploading ..."}};e.each(i.defaults,function(t,n){if(t==="allowedPreviewTypes"){if(i.allowedPreviewTypes===undefined){i.allowedPreviewTypes=n}return}i[t]=e.extend(true,{},n,i[t])});i._initPreviewTemplates()},_initPreviewTemplates:function(){var i=this,n=i.defaults,r=i.previewMarkupTags,s,a=r.tagAfter;e.each(n.previewContentTemplates,function(e,n){if(t.isEmpty(i.previewTemplates[e])){s=r.tagBefore2;if(e==="generic"||e==="image"||e==="html"||e==="text"){s=r.tagBefore1}i.previewTemplates[e]=s+n+a}})},_initPreviewCache:function(){var i=this;i.previewCache={data:{},init:function(){var e=i.initialPreview;if(e.length>0&&!t.isArray(e)){e=e.split(i.initialPreviewDelimiter)}i.previewCache.data={content:e,config:i.initialPreviewConfig,tags:i.initialPreviewThumbTags}},count:function(){return!!i.previewCache.data&&!!i.previewCache.data.content?i.previewCache.data.content.length:0},get:function(n,r){var s="init_"+n,a=i.previewCache.data,o=a.config[n],l=a.content[n],u=i.previewInitId+"-"+s,f,c,d,h,p,m,g,v=t.ifSet("previewAsData",o,i.initialPreviewAsData),y=function(e,n,r,s,a,o,l,u,f){u=" file-preview-initial "+t.SORT_CSS+(u?" "+u:"");return i._generatePreviewTemplate(e,n,r,s,a,false,null,u,o,l,f)};if(!l){return""}r=r===undefined?true:r;d=t.ifSet("type",o,i.initialPreviewFileType||"generic");p=t.ifSet("filename",o,t.ifSet("caption",o));m=t.ifSet("filetype",o,d);h=i.previewCache.footer(n,r,o&&o.size||null);g=t.ifSet("frameClass",o);if(v){f=y(d,l,p,m,u,h,s,g)}else{f=y("generic",l,p,m,u,h,s,g,d).setTokens({content:a.content[n]})}if(a.tags.length&&a.tags[n]){f=t.replaceTags(f,a.tags[n])}if(!t.isEmpty(o)&&!t.isEmpty(o.frameAttr)){c=e(document.createElement("div")).html(f);c.find(".file-preview-initial").attr(o.frameAttr);f=c.html();c.remove()}return f},add:function(e,n,r,s){var a=i.previewCache.data,o;if(!t.isArray(e)){e=e.split(i.initialPreviewDelimiter)}if(s){o=a.content.push(e)-1;a.config[o]=n;a.tags[o]=r}else{o=e.length-1;a.content=e;a.config=n;a.tags=r}i.previewCache.data=a;return o},set:function(e,n,r,s){var a=i.previewCache.data,o,l;if(!e||!e.length){return}if(!t.isArray(e)){e=e.split(i.initialPreviewDelimiter)}l=e.filter(function(e){return e!==null});if(!l.length){return}if(a.content===undefined){a.content=[]}if(a.config===undefined){a.config=[]}if(a.tags===undefined){a.tags=[]}if(s){for(o=0;o<e.length;o++){if(e[o]){a.content.push(e[o])}}for(o=0;o<n.length;o++){if(n[o]){a.config.push(n[o])}}for(o=0;o<r.length;o++){if(r[o]){a.tags.push(r[o])}}}else{a.content=e;a.config=n;a.tags=r}i.previewCache.data=a},unset:function(e){var n=i.previewCache.count();if(!n){return}if(n===1){i.previewCache.data.content=[];i.previewCache.data.config=[];i.previewCache.data.tags=[];i.initialPreview=[];i.initialPreviewConfig=[];i.initialPreviewThumbTags=[];return}i.previewCache.data.content=t.spliceArray(i.previewCache.data.content,e);i.previewCache.data.config=t.spliceArray(i.previewCache.data.config,e);i.previewCache.data.tags=t.spliceArray(i.previewCache.data.tags,e)},out:function(){var e="",t,n=i.previewCache.count(),r;if(n===0){return{content:"",caption:""}}for(r=0;r<n;r++){e+=i.previewCache.get(r)}t=i._getMsgSelected(n);return{content:e,caption:t}},footer:function(e,n,r){var s=i.previewCache.data||{};if(t.isEmpty(s.content)){return""}if(t.isEmpty(s.config)||t.isEmpty(s.config[e])){s.config[e]={}}n=n===undefined?true:n;var a=s.config[e],o=t.ifSet("caption",a),l,u=t.ifSet("width",a,"auto"),f=t.ifSet("url",a,false),c=t.ifSet("key",a,null),d=i.fileActionSettings,h=i.initialPreviewShowDelete||false,p=a.downloadUrl||i.initialPreviewDownloadUrl||"",m=a.filename||a.caption||"",g=!!p,v=t.ifSet("showDelete",a,t.ifSet("showDelete",d,h)),y=t.ifSet("showDownload",a,t.ifSet("showDownload",d,g)),b=t.ifSet("showZoom",a,t.ifSet("showZoom",d,true)),w=t.ifSet("showDrag",a,t.ifSet("showDrag",d,true)),x=f===false&&n;y=y&&a.downloadUrl!==false&&!!p;l=i._renderFileActions(false,y,v,b,w,x,f,c,true,p,m);return i._getLayoutTemplate("footer").setTokens({progress:i._renderThumbProgress(),actions:l,caption:o,size:i._getSize(r),width:u,indicator:""})}};i.previewCache.init()},_handler:function(e,t,i){var n=this,r=n.namespace,s=t.split(" ").join(r+" ")+r;if(!e||!e.length){return}e.off(s).on(s,i)},_log:function(e){var t=this,i=t.$element.attr("id");if(i){e='"'+i+'": '+e}if(typeof window.console.log!=="undefined"){window.console.log(e)}else{window.alert(e)}},_validate:function(){var e=this,t=e.$element.attr("type")==="file";if(!t){e._log('The input "type" must be set to "file" for initializing the "bootstrap-fileinput" plugin.')}return t},_errorsExist:function(){var t=this,i,n=t.$errorContainer.find("li");if(n.length){return true}i=e(document.createElement("div")).html(t.$errorContainer.html());i.find(".kv-error-close").remove();i.find("ul").remove();return!!e.trim(i.text()).length},_errorHandler:function(e,t){var i=this,n=e.target.error,r=function(e){i._showError(e.replace("{name}",t))};if(n.code===n.NOT_FOUND_ERR){r(i.msgFileNotFound)}else if(n.code===n.SECURITY_ERR){r(i.msgFileSecured)}else if(n.code===n.NOT_READABLE_ERR){r(i.msgFileNotReadable)}else if(n.code===n.ABORT_ERR){r(i.msgFilePreviewAborted)}else{r(i.msgFilePreviewError)}},_addError:function(e){var t=this,i=t.$errorContainer;if(e&&i.length){i.html(t.errorCloseButton+e);t._handler(i.find(".kv-error-close"),"click",function(){setTimeout(function(){if(t.showPreview&&!t.getFrames().length){t.clear()}i.fadeOut("slow")},10)})}},_setValidationError:function(e){var i=this;e=(e?e+" ":"")+"has-error";i.$container.removeClass(e).addClass("has-error");t.addCss(i.$captionContainer,"is-invalid")},_resetErrors:function(e){var t=this,i=t.$errorContainer;t.isError=false;t.$container.removeClass("has-error");t.$captionContainer.removeClass("is-invalid");i.html("");if(e){i.fadeOut("slow")}else{i.hide()}},_showFolderError:function(e){var t=this,i=t.$errorContainer,n;if(!e){return}n=t.msgFoldersNotAllowed.replace("{n}",e);t._addError(n);t._setValidationError();i.fadeIn(800);t._raise("filefoldererror",[e,n])},_showUploadError:function(e,t,i){var n=this,r=n.$errorContainer,s=i||"fileuploaderror",a=t&&t.id?'<li data-file-id="'+t.id+'">'+e+"</li>":"<li>"+e+"</li>";if(r.find("ul").length===0){n._addError("<ul>"+a+"</ul>")}else{r.find("ul").append(a)}r.fadeIn(800);n._raise(s,[t,e]);n._setValidationError("file-input-new");return true},_showError:function(e,t,i){var n=this,r=n.$errorContainer,s=i||"fileerror";t=t||{};t.reader=n.reader;n._addError(e);r.fadeIn(800);n._raise(s,[t,e]);if(!n.isAjaxUpload){n._clearFileInput()}n._setValidationError("file-input-new");n.$btnUpload.attr("disabled",true);return true},_noFilesError:function(e){var t=this,i=t.minFileCount>1?t.filePlural:t.fileSingle,n=t.msgFilesTooLess.replace("{n}",t.minFileCount).replace("{files}",i),r=t.$errorContainer;t._addError(n);t.isError=true;t._updateFileDetails(0);r.fadeIn(800);t._raise("fileerror",[e,n]);t._clearFileInput();t._setValidationError()},_parseError:function(t,i,n,r){var s=this,a=e.trim(n+""),o,l=i.responseJSON!==undefined&&i.responseJSON.error!==undefined?i.responseJSON.error:i.responseText;if(s.cancelling&&s.msgUploadAborted){a=s.msgUploadAborted}if(s.showAjaxErrorDetails&&l){l=e.trim(l.replace(/\n\s*\n/g,"\n"));o=l.length?"<pre>"+l+"</pre>":"";a+=a?o:l}if(!a){a=s.msgAjaxError.replace("{operation}",t)}s.cancelling=false;return r?"<b>"+r+": </b>"+a:a},_parseFileType:function(e,i){var n=this,r,s,a,o,l=n.allowedPreviewTypes||[];if(e==="application/text-plain"){return"text"}for(o=0;o<l.length;o++){a=l[o];r=n.fileTypeSettings[a];s=r(e,i)?a:"";if(!t.isEmpty(s)){return s}}return"other"},_getPreviewIcon:function(t){var i=this,n,r=null;if(t&&t.indexOf(".")>-1){n=t.split(".").pop();if(i.previewFileIconSettings){r=i.previewFileIconSettings[n]||i.previewFileIconSettings[n.toLowerCase()]||null}if(i.previewFileExtSettings){e.each(i.previewFileExtSettings,function(e,t){if(i.previewFileIconSettings[e]&&t(n)){r=i.previewFileIconSettings[e];return}})}}return r},_parseFilePreviewIcon:function(e,t){var i=this,n=i._getPreviewIcon(t)||i.previewFileIcon,r=e;if(r.indexOf("{previewFileIcon}")>-1){r=r.setTokens({previewFileIconClass:i.previewFileIconClass,previewFileIcon:n})}return r},_raise:function(t,i){var n=this,r=e.Event(t);if(i!==undefined){n.$element.trigger(r,i)}else{n.$element.trigger(r)}if(r.isDefaultPrevented()||r.result===false){return false}switch(t){case"filebatchuploadcomplete":case"filebatchuploadsuccess":case"fileuploaded":case"fileclear":case"filecleared":case"filereset":case"fileerror":case"filefoldererror":case"fileuploaderror":case"filebatchuploaderror":case"filedeleteerror":case"filecustomerror":case"filesuccessremove":break;default:if(!n.ajaxAborted){n.ajaxAborted=r.result}break}return true},_listenFullScreen:function(e){var t=this,i=t.$modal,n,r;if(!i||!i.length){return}n=i&&i.find(".btn-fullscreen");r=i&&i.find(".btn-borderless");if(!n.length||!r.length){return}n.removeClass("active").attr("aria-pressed","false");r.removeClass("active").attr("aria-pressed","false");if(e){n.addClass("active").attr("aria-pressed","true")}else{r.addClass("active").attr("aria-pressed","true")}if(i.hasClass("file-zoom-fullscreen")){t._maximizeZoomDialog()}else{if(e){t._maximizeZoomDialog()}else{r.removeClass("active").attr("aria-pressed","false")}}},_listen:function(){var i=this,n=i.$element,r=i.$form,s=i.$container,a;i._handler(n,"change",e.proxy(i._change,i));if(i.showBrowse){i._handler(i.$btnFile,"click",e.proxy(i._browse,i))}i._handler(s.find(".fileinput-remove:not([disabled])"),"click",e.proxy(i.clear,i));i._handler(s.find(".fileinput-cancel"),"click",e.proxy(i.cancel,i));i._initDragDrop();i._handler(r,"reset",e.proxy(i.clear,i));if(!i.isAjaxUpload){i._handler(r,"submit",e.proxy(i._submitForm,i))}i._handler(i.$container.find(".fileinput-upload"),"click",e.proxy(i._uploadClick,i));i._handler(e(window),"resize",function(){i._listenFullScreen(screen.width===window.innerWidth&&screen.height===window.innerHeight)});a="webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange";i._handler(e(document),a,function(){i._listenFullScreen(t.checkFullScreen())});i._autoFitContent();i._initClickable()},_autoFitContent:function(){var t=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,i=this,n=t<400?i.previewSettingsSmall||i.defaults.previewSettingsSmall:i.previewSettings||i.defaults.previewSettings,r;e.each(n,function(e,t){r=".file-preview-frame .file-preview-"+e;i.$preview.find(r+".kv-preview-data,"+r+" .kv-preview-data").css(t)})},_initClickable:function(){var i=this,n;if(!i.isClickable){return}n=i.isAjaxUpload?i.$dropZone:i.$preview.find(".file-default-preview");t.addCss(n,"clickable");n.attr("tabindex",-1);i._handler(n,"click",function(t){var r=e(t.target);if(!n.find(".kv-fileinput-error:visible").length&&(!r.parents(".file-preview-thumbnails").length||r.parents(".file-default-preview").length)){i.$element.trigger("click");n.blur()}})},_initDragDrop:function(){var t=this,i=t.$dropZone;if(t.isAjaxUpload&&t.dropZoneEnabled&&t.showPreview){t._handler(i,"dragenter dragover",e.proxy(t._zoneDragEnter,t));t._handler(i,"dragleave",e.proxy(t._zoneDragLeave,t));t._handler(i,"drop",e.proxy(t._zoneDrop,t));t._handler(e(document),"dragenter dragover drop",t._zoneDragDropInit)}},_zoneDragDropInit:function(e){e.stopPropagation();e.preventDefault()},_zoneDragEnter:function(i){var n=this,r=e.inArray("Files",i.originalEvent.dataTransfer.types)>-1;n._zoneDragDropInit(i);if(n.isDisabled||!r){i.originalEvent.dataTransfer.effectAllowed="none";i.originalEvent.dataTransfer.dropEffect="none";return}t.addCss(n.$dropZone,"file-highlighted")},_zoneDragLeave:function(e){var t=this;t._zoneDragDropInit(e);if(t.isDisabled){return}t.$dropZone.removeClass("file-highlighted")},_zoneDrop:function(e){var i=this;e.preventDefault();if(i.isDisabled||t.isEmpty(e.originalEvent.dataTransfer.files)){return}i._change(e,"dragdrop");i.$dropZone.removeClass("file-highlighted")},_uploadClick:function(e){var i=this,n=i.$container.find(".fileinput-upload"),r,s=!n.hasClass("disabled")&&t.isEmpty(n.attr("disabled"));if(e&&e.isDefaultPrevented()){return}if(!i.isAjaxUpload){if(s&&n.attr("type")!=="submit"){r=n.closest("form");if(r.length){r.trigger("submit")}e.preventDefault()}return}e.preventDefault();if(s){i.upload()}},_submitForm:function(){var e=this;return e._isFileSelectionValid()&&!e._abort({})},_clearPreview:function(){var i=this,n=i.$preview,r=i.showUploadedThumbs?i.getFrames(":not(.file-preview-success)"):i.getFrames();r.each(function(){var i=e(this);i.remove();t.cleanZoomCache(n.find("#zoom-"+i.attr("id")))});if(!i.getFrames().length||!i.showPreview){i._resetUpload()}i._validateDefaultPreview()},_initSortable:function(){var i=this,n=i.$preview,r,s="."+t.SORT_CSS;if(!window.KvSortable||n.find(s).length===0){return}r={handle:".drag-handle-init",dataIdAttr:"data-preview-id",scroll:false,draggable:s,onSort:function(n){var r=n.oldIndex,s=n.newIndex,a,o,l=0;i.initialPreview=t.moveArray(i.initialPreview,r,s);i.initialPreviewConfig=t.moveArray(i.initialPreviewConfig,r,s);i.previewCache.init();i.getFrames(".file-preview-initial").each(function(){e(this).attr("data-fileindex","init_"+l);l++});i._raise("filesorted",{previewId:e(n.item).attr("id"),oldIndex:r,newIndex:s,stack:i.initialPreviewConfig})}};if(n.data("kvsortable")){n.kvsortable("destroy")}e.extend(true,r,i.fileActionSettings.dragSettings);n.kvsortable(r)},_setPreviewContent:function(e){var t=this;t.$preview.html(e);t._autoFitContent()},_initPreview:function(e){var i=this,n=i.initialCaption||"",r;if(!i.previewCache.count()){i._clearPreview();if(e){i._setCaption(n)}else{i._initCaption()}return}r=i.previewCache.out();n=e&&i.initialCaption?i.initialCaption:r.caption;i._setPreviewContent(r.content);i._setInitThumbAttr();i._setCaption(n);i._initSortable();if(!t.isEmpty(r.content)){i.$container.removeClass("file-input-new")}},_getZoomButton:function(e){var t=this,i=t.previewZoomButtonIcons[e],n=t.previewZoomButtonClasses[e],r=' title="'+(t.previewZoomButtonTitles[e]||"")+'" ',s=r+(e==="close"?' data-dismiss="modal" aria-hidden="true"':"");if(e==="fullscreen"||e==="borderless"||e==="toggleheader"){s+=' data-toggle="button" aria-pressed="false" autocomplete="off"'}return'<button type="button" class="'+n+" btn-"+e+'"'+s+">"+i+"</button>"},_getModalContent:function(){var e=this;return e._getLayoutTemplate("modal").setTokens({rtl:e.rtl?" kv-rtl":"",zoomFrameClass:e.frameClass,heading:e.msgZoomModalHeading,prev:e._getZoomButton("prev"),next:e._getZoomButton("next"),toggleheader:e._getZoomButton("toggleheader"),fullscreen:e._getZoomButton("fullscreen"),borderless:e._getZoomButton("borderless"),close:e._getZoomButton("close")})},_listenModalEvent:function(e){var i=this,n=i.$modal,r=function(e){return{sourceEvent:e,previewId:n.data("previewId"),modal:n}};n.on(e+".bs.modal",function(s){var a=n.find(".btn-fullscreen"),o=n.find(".btn-borderless");i._raise("filezoom"+e,r(s));if(e==="shown"){o.removeClass("active").attr("aria-pressed","false");a.removeClass("active").attr("aria-pressed","false");if(n.hasClass("file-zoom-fullscreen")){i._maximizeZoomDialog();if(t.checkFullScreen()){a.addClass("active").attr("aria-pressed","true")}else{o.addClass("active").attr("aria-pressed","true")}}}})},_initZoom:function(){var i=this,n,r=i._getLayoutTemplate("modalMain"),s="#"+t.MODAL_ID;if(!i.showPreview){return}i.$modal=e(s);if(!i.$modal||!i.$modal.length){n=e(document.createElement("div")).html(r).insertAfter(i.$container);i.$modal=e(s).insertBefore(n);n.remove()}t.initModal(i.$modal);i.$modal.html(i._getModalContent());e.each(t.MODAL_EVENTS,function(e,t){i._listenModalEvent(t)})},_initZoomButtons:function(){var t=this,i=t.$modal.data("previewId")||"",n,r,s=t.getFrames().toArray(),a=s.length,o=t.$modal.find(".btn-prev"),l=t.$modal.find(".btn-next");if(s.length<2){o.hide();l.hide();return}else{o.show();l.show()}if(!a){return}n=e(s[0]);r=e(s[a-1]);o.removeAttr("disabled");l.removeAttr("disabled");if(n.length&&n.attr("id")===i){o.attr("disabled",true)}if(r.length&&r.attr("id")===i){l.attr("disabled",true)}},_maximizeZoomDialog:function(){var t=this,i=t.$modal,n=i.find(".modal-header:visible"),r=i.find(".modal-footer:visible"),s=i.find(".modal-body"),a=e(window).height(),o=0;i.addClass("file-zoom-fullscreen");if(n&&n.length){a-=n.outerHeight(true)}if(r&&r.length){a-=r.outerHeight(true)}if(s&&s.length){o=s.outerHeight(true)-s.height();a-=o}i.find(".kv-zoom-body").height(a)},_resizeZoomDialog:function(e){var i=this,n=i.$modal,r=n.find(".btn-fullscreen"),s=n.find(".btn-borderless");if(n.hasClass("file-zoom-fullscreen")){t.toggleFullScreen(false);if(!e){if(!r.hasClass("active")){n.removeClass("file-zoom-fullscreen");i.$modal.find(".kv-zoom-body").css("height",i.zoomModalHeight)}else{r.removeClass("active").attr("aria-pressed","false")}}else{if(!r.hasClass("active")){n.removeClass("file-zoom-fullscreen");i._resizeZoomDialog(true);if(s.hasClass("active")){s.removeClass("active").attr("aria-pressed","false")}}}}else{if(!e){i._maximizeZoomDialog();return}t.toggleFullScreen(true)}n.focus()},_setZoomContent:function(i,n){var r=this,s,a,o,l,u,f,c,d=i.attr("id"),h=r.$modal,p=h.find(".btn-prev"),m=h.find(".btn-next"),g,v=h.find(".btn-fullscreen"),y=h.find(".btn-borderless"),b,w,x=h.find(".btn-toggleheader"),C=r.$preview.find("#zoom-"+d);a=C.attr("data-template")||"generic";s=C.find(".kv-file-content");o=s.length?s.html():"";b=i.data("caption")||"";w=i.data("size")||"";l=b+" "+w;h.find(".kv-zoom-title").attr("title",e("<div/>").html(l).text()).html(l);u=h.find(".kv-zoom-body");h.removeClass("kv-single-content");if(n){g=u.addClass("file-thumb-loading").clone().insertAfter(u);u.html(o).hide();g.fadeOut("fast",function(){u.fadeIn("fast",function(){u.removeClass("file-thumb-loading")});g.remove()})}else{u.html(o)}c=r.previewZoomSettings[a];if(c){f=u.find(".kv-preview-data");t.addCss(f,"file-zoom-detail");e.each(c,function(e,t){f.css(e,t);if(f.attr("width")&&e==="width"||f.attr("height")&&e==="height"){f.removeAttr(e)}})}h.data("previewId",d);var T=u.find("img");if(T.length){t.adjustOrientedImage(T,true)}r._handler(p,"click",function(){r._zoomSlideShow("prev",d)});r._handler(m,"click",function(){r._zoomSlideShow("next",d)});r._handler(v,"click",function(){r._resizeZoomDialog(true)});r._handler(y,"click",function(){r._resizeZoomDialog(false)});r._handler(x,"click",function(){var e=h.find(".modal-header"),t=h.find(".modal-body .floating-buttons"),i,n=e.find(".kv-zoom-actions"),s=function(t){var i=r.$modal.find(".kv-zoom-body"),n=r.zoomModalHeight;if(h.hasClass("file-zoom-fullscreen")){n=i.outerHeight(true);if(!t){n=n-e.outerHeight(true)}}i.css("height",t?n+t:n)};if(e.is(":visible")){i=e.outerHeight(true);e.slideUp("slow",function(){n.find(".btn").appendTo(t);s(i)})}else{t.find(".btn").appendTo(n);e.slideDown("slow",function(){s()})}h.focus()});r._handler(h,"keydown",function(e){var t=e.which||e.keyCode;if(t===37&&!p.attr("disabled")){r._zoomSlideShow("prev",d)}if(t===39&&!m.attr("disabled")){r._zoomSlideShow("next",d)}})},_zoomPreview:function(e){var i=this,n,r=i.$modal;if(!e.length){throw"Cannot zoom to detailed preview!"}t.initModal(r);r.html(i._getModalContent());n=e.closest(t.FRAMES);i._setZoomContent(n);r.modal("show");i._initZoomButtons()},_zoomSlideShow:function(t,i){var n=this,r=n.$modal.find(".kv-zoom-actions .btn-"+t),s,a,o=n.getFrames().toArray(),l=o.length,u;if(r.attr("disabled")){return}for(a=0;a<l;a++){if(e(o[a]).attr("id")===i){u=t==="prev"?a-1:a+1;break}}if(u<0||u>=l||!o[u]){return}s=e(o[u]);if(s.length){n._setZoomContent(s,true)}n._initZoomButtons();n._raise("filezoom"+t,{previewId:i,modal:n.$modal})},_initZoomButton:function(){var t=this;t.$preview.find(".kv-file-zoom").each(function(){var i=e(this);t._handler(i,"click",function(){t._zoomPreview(i)})})},_clearObjects:function(t){t.find("video audio").each(function(){this.pause();e(this).remove()});t.find("img object div").each(function(){e(this).remove()})},_clearFileInput:function(){var i=this,n=i.$element,r,s,a;i.fileInputCleared=true;if(t.isEmpty(n.val())){return}if(i.isIE9||i.isIE10){r=n.closest("form");s=e(document.createElement("form"));a=e(document.createElement("div"));n.before(a);if(r.length){r.after(s)}else{a.after(s)}s.append(n).trigger("reset");a.before(n).remove();s.remove()}else{n.val("")}},_resetUpload:function(){var e=this;e.uploadCache={content:[],config:[],tags:[],append:true};e.uploadCount=0;e.uploadStatus={};e.uploadLog=[];e.uploadAsyncCount=0;e.loadedImages=[];e.totalImagesCount=0;e.$btnUpload.removeAttr("disabled");e._setProgress(0);e.$progress.hide();e._resetErrors(false);e.ajaxAborted=false;e.ajaxRequests=[];e._resetCanvas();e.cacheInitialPreview={};if(e.overwriteInitial){e.initialPreview=[];e.initialPreviewConfig=[];e.initialPreviewThumbTags=[];e.previewCache.data={content:[],config:[],tags:[]}}},_resetCanvas:function(){var e=this;if(e.canvas&&e.imageCanvasContext){e.imageCanvasContext.clearRect(0,0,e.canvas.width,e.canvas.height)}},_hasInitialPreview:function(){var e=this;return!e.overwriteInitial&&e.previewCache.count()},_resetPreview:function(){var e=this,t,i;if(e.previewCache.count()){t=e.previewCache.out();e._setPreviewContent(t.content);e._setInitThumbAttr();i=e.initialCaption?e.initialCaption:t.caption;e._setCaption(i)}else{e._clearPreview();e._initCaption()}if(e.showPreview){e._initZoom();e._initSortable()}},_clearDefaultPreview:function(){var e=this;e.$preview.find(".file-default-preview").remove()},_validateDefaultPreview:function(){var e=this;if(!e.showPreview||t.isEmpty(e.defaultPreviewContent)){return}e._setPreviewContent('<div class="file-default-preview">'+e.defaultPreviewContent+"</div>");e.$container.removeClass("file-input-new");e._initClickable()},_resetPreviewThumbs:function(e){var t=this,i;if(e){t._clearPreview();t.clearStack();return}if(t._hasInitialPreview()){i=t.previewCache.out();t._setPreviewContent(i.content);t._setInitThumbAttr();t._setCaption(i.caption);t._initPreviewActions()}else{t._clearPreview()}},_getLayoutTemplate:function(e){var i=this,n=i.layoutTemplates[e];if(t.isEmpty(i.customLayoutTags)){return n}return t.replaceTags(n,i.customLayoutTags)},_getPreviewTemplate:function(e){var i=this,n=i.previewTemplates[e];if(t.isEmpty(i.customPreviewTags)){return n}return t.replaceTags(n,i.customPreviewTags)},_getOutData:function(e,t,i){var n=this;e=e||{};t=t||{};i=i||n.filestack.slice(0)||{};return{form:n.formdata,files:i,filenames:n.filenames,filescount:n.getFilesCount(),extra:n._getExtraData(),response:t,reader:n.reader,jqXHR:e}},_getMsgSelected:function(e){var t=this,i=e===1?t.fileSingle:t.filePlural;return e>0?t.msgSelected.replace("{n}",e).replace("{files}",i):t.msgNoFilesSelected},_getFrame:function(t){var i=this,n=e("#"+t);if(!n.length){i._log('Invalid thumb frame with id: "'+t+'".');return null}return n},_getThumbs:function(e){e=e||"";return this.getFrames(":not(.file-preview-initial)"+e)},_getExtraData:function(e,t){var i=this,n=i.uploadExtraData;if(typeof i.uploadExtraData==="function"){n=i.uploadExtraData(e,t)}return n},_initXhr:function(e,t,i){var n=this;if(e.upload){e.upload.addEventListener("progress",function(e){var r=0,s=e.total,a=e.loaded||e.position;if(e.lengthComputable){r=Math.floor(a/s*100)}if(t){n._setAsyncUploadStatus(t,r,i)}else{n._setProgress(r)}},false)}return e},_mergeAjaxCallback:function(e,t,i){var n=this,r=n.ajaxSettings,s=n.mergeAjaxCallbacks,a;if(i==="delete"){r=n.ajaxDeleteSettings;s=n.mergeAjaxDeleteCallbacks}a=r[e];if(s&&typeof a==="function"){if(s==="before"){r[e]=function(){a.apply(this,arguments);t.apply(this,arguments)}}else{r[e]=function(){t.apply(this,arguments);a.apply(this,arguments)}}}else{r[e]=t}if(i==="delete"){n.ajaxDeleteSettings=r}else{n.ajaxSettings=r}},_ajaxSubmit:function(t,i,n,r,s,a){var o=this,l;if(!o._raise("filepreajax",[s,a])){return}o._uploadExtra(s,a);o._mergeAjaxCallback("beforeSend",t);o._mergeAjaxCallback("success",i);o._mergeAjaxCallback("complete",n);o._mergeAjaxCallback("error",r);l=e.extend(true,{},{xhr:function(){var t=e.ajaxSettings.xhr();return o._initXhr(t,s,o.getFileStack().length)},url:a&&o.uploadUrlThumb?o.uploadUrlThumb:o.uploadUrl,type:"POST",dataType:"json",data:o.formdata,cache:false,processData:false,contentType:false},o.ajaxSettings);o.ajaxRequests.push(e.ajax(l))},_mergeArray:function(e,i){var n=this,r=t.cleanArray(n[e]),s=t.cleanArray(i);n[e]=r.concat(s)},_initUploadSuccess:function(i,n,r){var s=this,a,o,l,u,f,c,d,h,p;if(!s.showPreview||typeof i!=="object"||e.isEmptyObject(i)){return}if(i.initialPreview!==undefined&&i.initialPreview.length>0){s.hasInitData=true;c=i.initialPreview||[];d=i.initialPreviewConfig||[];h=i.initialPreviewThumbTags||[];a=i.append===undefined||i.append;if(c.length>0&&!t.isArray(c)){c=c.split(s.initialPreviewDelimiter)}s._mergeArray("initialPreview",c);s._mergeArray("initialPreviewConfig",d);s._mergeArray("initialPreviewThumbTags",h);if(n!==undefined){if(!r){l=s.previewCache.add(c,d[0],h[0],a);o=s.previewCache.get(l,false);u=e(document.createElement("div")).html(o).hide().insertAfter(n);f=u.find(".kv-zoom-cache");if(f&&f.length){f.insertAfter(n)}n.fadeOut("slow",function(){var e=u.find(".file-preview-frame");if(e&&e.length){e.insertBefore(n).fadeIn("slow").css("display:inline-block")}s._initPreviewActions();s._clearFileInput();t.cleanZoomCache(s.$preview.find("#zoom-"+n.attr("id")));n.remove();u.remove();s._initSortable()})}else{p=n.attr("data-fileindex");s.uploadCache.content[p]=c[0];s.uploadCache.config[p]=d[0]||[];s.uploadCache.tags[p]=h[0]||[];s.uploadCache.append=a}}else{s.previewCache.set(c,d,h,a);s._initPreview();s._initPreviewActions()}}},_initSuccessThumbs:function(){var i=this;if(!i.showPreview){return}i._getThumbs(t.FRAMES+".file-preview-success").each(function(){var n=e(this),r=i.$preview,s=n.find(".kv-file-remove");s.removeAttr("disabled");i._handler(s,"click",function(){var e=n.attr("id"),s=i._raise("filesuccessremove",[e,n.attr("data-fileindex")]);t.cleanMemory(n);if(s===false){return}n.fadeOut("slow",function(){t.cleanZoomCache(r.find("#zoom-"+e));n.remove();if(!i.getFrames().length){i.reset()}})})})},_checkAsyncComplete:function(){var t=this,i,n;for(n=0;n<t.filestack.length;n++){if(t.filestack[n]){i=t.previewInitId+"-"+n;if(e.inArray(i,t.uploadLog)===-1){return false}}}return t.uploadAsyncCount===t.uploadLog.length},_uploadExtra:function(t,i){var n=this,r=n._getExtraData(t,i);if(r.length===0){return}e.each(r,function(e,t){n.formdata.append(e,t)})},_uploadSingle:function(i,n){var r=this,s=r.getFileStack().length,a=new FormData,o,l=r.previewInitId+"-"+i,u,f,c,d,h=r.filestack.length>0||!e.isEmptyObject(r.uploadExtraData),p,m=e("#"+l).find(".file-thumb-progress"),g,v,y,b,w,x={id:l,index:i};r.formdata=a;if(r.showPreview){u=e("#"+l+":not(.file-preview-initial)");c=u.find(".kv-file-upload");d=u.find(".kv-file-remove");m.show()}if(s===0||!h||c&&c.hasClass("disabled")||r._abort(x)){return}w=function(e,t){if(!p){r.updateStack(e,undefined)}r.uploadLog.push(t);if(r._checkAsyncComplete()){r.fileBatchCompleted=true}};f=function(){var e=r.uploadCache,i,n,s,a=0,o=r.cacheInitialPreview;if(!r.fileBatchCompleted){return}if(o&&o.content){a=o.content.length}setTimeout(function(){var l=r.getFileStack(true).length===0;if(r.showPreview){r.previewCache.set(e.content,e.config,e.tags,e.append);if(a){for(n=0;n<e.content.length;n++){s=n+a;o.content[s]=e.content[n];if(o.config.length){o.config[s]=e.config[n]}if(o.tags.length){o.tags[s]=e.tags[n]}}r.initialPreview=t.cleanArray(o.content);r.initialPreviewConfig=t.cleanArray(o.config);r.initialPreviewThumbTags=t.cleanArray(o.tags)}else{r.initialPreview=e.content;r.initialPreviewConfig=e.config;r.initialPreviewThumbTags=e.tags}r.cacheInitialPreview={};if(r.hasInitData){r._initPreview();r._initPreviewActions()}}r.unlock(l);if(l){r._clearFileInput()}i=r.$preview.find(".file-preview-initial");if(r.uploadAsync&&i.length){t.addCss(i,t.SORT_CSS);r._initSortable()}r._raise("filebatchuploadcomplete",[r.filestack,r._getExtraData()]);r.uploadCount=0;r.uploadStatus={};r.uploadLog=[];r._setProgress(101);r.ajaxAborted=false},100)};g=function(s){o=r._getOutData(s);r.fileBatchCompleted=false;if(!n){r.ajaxAborted=false}if(r.showPreview){if(!u.hasClass("file-preview-success")){r._setThumbStatus(u,"Loading");t.addCss(u,"file-uploading")}c.attr("disabled",true);d.attr("disabled",true)}if(!n){r.lock()}r._raise("filepreupload",[o,l,i]);e.extend(true,x,o);if(r._abort(x)){s.abort();if(!n){r._setThumbStatus(u,"New");u.removeClass("file-uploading");c.removeAttr("disabled");d.removeAttr("disabled");r.unlock()}r._setProgressCancelled()}};v=function(s,a,f){var d=r.showPreview&&u.attr("id")?u.attr("id"):l;o=r._getOutData(f,s);e.extend(true,x,o);setTimeout(function(){if(t.isEmpty(s)||t.isEmpty(s.error)){if(r.showPreview){r._setThumbStatus(u,"Success");c.hide();r._initUploadSuccess(s,u,n);r._setProgress(101,m)}r._raise("fileuploaded",[o,d,i]);if(!n){r.updateStack(i,undefined)}else{w(i,d)}}else{p=true;r._showUploadError(s.error,x);r._setPreviewError(u,i,r.filestack[i],r.retryErrorUploads);if(!r.retryErrorUploads){c.hide()}if(n){w(i,d)}r._setProgress(101,e("#"+d).find(".file-thumb-progress"),r.msgUploadError)}},100)};y=function(){setTimeout(function(){if(r.showPreview){c.removeAttr("disabled");d.removeAttr("disabled");u.removeClass("file-uploading")}if(!n){r.unlock(false);r._clearFileInput()}else{f()}r._initSuccessThumbs()},100)};b=function(t,s,a){var o=r.ajaxOperations.uploadThumb,f=r._parseError(o,t,a,n&&r.filestack[i].name?r.filestack[i].name:null);p=true;setTimeout(function(){if(n){w(i,l)}r.uploadStatus[l]=100;r._setPreviewError(u,i,r.filestack[i],r.retryErrorUploads);if(!r.retryErrorUploads){c.hide()}e.extend(true,x,r._getOutData(t));r._setProgress(101,m,r.msgAjaxProgressError.replace("{operation}",o));r._setProgress(101,e("#"+l).find(".file-thumb-progress"),r.msgUploadError);r._showUploadError(f,x)},100)};a.append(r.uploadFileAttr,r.filestack[i],r.filenames[i]);a.append("file_id",i);r._ajaxSubmit(g,v,y,b,l,i)},_uploadBatch:function(){var i=this,n=i.filestack,r=n.length,s={},a,o,l,u,f=i.filestack.length>0||!e.isEmptyObject(i.uploadExtraData),c;i.formdata=new FormData;if(r===0||!f||i._abort(s)){return}c=function(){e.each(n,function(e){i.updateStack(e,undefined)});i._clearFileInput()};a=function(n){i.lock();var r=i._getOutData(n);i.ajaxAborted=false;if(i.showPreview){i._getThumbs().each(function(){var n=e(this),r=n.find(".kv-file-upload"),s=n.find(".kv-file-remove");if(!n.hasClass("file-preview-success")){i._setThumbStatus(n,"Loading");t.addCss(n,"file-uploading")}r.attr("disabled",true);s.attr("disabled",true)})}i._raise("filebatchpreupload",[r]);if(i._abort(r)){n.abort();i._getThumbs().each(function(){var t=e(this),n=t.find(".kv-file-upload"),r=t.find(".kv-file-remove");if(t.hasClass("file-preview-loading")){i._setThumbStatus(t,"New");t.removeClass("file-uploading")}n.removeAttr("disabled");r.removeAttr("disabled")});i._setProgressCancelled()}};o=function(n,r,s){var a=i._getOutData(s,n),o=0,l=i._getThumbs(":not(.file-preview-success)"),u=t.isEmpty(n)||t.isEmpty(n.errorkeys)?[]:n.errorkeys;if(t.isEmpty(n)||t.isEmpty(n.error)){i._raise("filebatchuploadsuccess",[a]);c();if(i.showPreview){l.each(function(){var t=e(this);i._setThumbStatus(t,"Success");t.removeClass("file-uploading");t.find(".kv-file-upload").hide().removeAttr("disabled")});i._initUploadSuccess(n)}else{i.reset()}i._setProgress(101)}else{if(i.showPreview){l.each(function(){var t=e(this),n=t.attr("data-fileindex");t.removeClass("file-uploading");t.find(".kv-file-upload").removeAttr("disabled");t.find(".kv-file-remove").removeAttr("disabled");if(u.length===0||e.inArray(o,u)!==-1){i._setPreviewError(t,n,i.filestack[n],i.retryErrorUploads);if(!i.retryErrorUploads){t.find(".kv-file-upload").hide();i.updateStack(n,undefined)}}else{t.find(".kv-file-upload").hide();i._setThumbStatus(t,"Success");i.updateStack(n,undefined)}if(!t.hasClass("file-preview-error")||i.retryErrorUploads){o++}});i._initUploadSuccess(n)}i._showUploadError(n.error,a,"filebatchuploaderror");i._setProgress(101,i.$progress,i.msgUploadError)}};u=function(){i.unlock();i._initSuccessThumbs();i._clearFileInput();i._raise("filebatchuploadcomplete",[i.filestack,i._getExtraData()])};l=function(t,n,s){var a=i._getOutData(t),o=i.ajaxOperations.uploadBatch,l=i._parseError(o,t,s);i._showUploadError(l,a,"filebatchuploaderror");i.uploadFileCount=r-1;if(!i.showPreview){return}i._getThumbs().each(function(){var t=e(this),n=t.attr("data-fileindex");t.removeClass("file-uploading");if(i.filestack[n]!==undefined){i._setPreviewError(t)}});i._getThumbs().removeClass("file-uploading");i._getThumbs(" .kv-file-upload").removeAttr("disabled");i._getThumbs(" .kv-file-delete").removeAttr("disabled");i._setProgress(101,i.$progress,i.msgAjaxProgressError.replace("{operation}",o))};e.each(n,function(e,r){if(!t.isEmpty(n[e])){i.formdata.append(i.uploadFileAttr,r,i.filenames[e])}});i._ajaxSubmit(a,o,u,l)},_uploadExtraOnly:function(){var e=this,i={},n,r,s,a;e.formdata=new FormData;if(e._abort(i)){return}n=function(t){e.lock();var n=e._getOutData(t);e._raise("filebatchpreupload",[n]);e._setProgress(50);i.data=n;i.xhr=t;if(e._abort(i)){t.abort();e._setProgressCancelled()}};r=function(i,n,r){var s=e._getOutData(r,i);if(t.isEmpty(i)||t.isEmpty(i.error)){e._raise("filebatchuploadsuccess",[s]);e._clearFileInput();e._initUploadSuccess(i);e._setProgress(101)}else{e._showUploadError(i.error,s,"filebatchuploaderror")}};s=function(){e.unlock();e._clearFileInput();e._raise("filebatchuploadcomplete",[e.filestack,e._getExtraData()])};a=function(t,n,r){var s=e._getOutData(t),a=e.ajaxOperations.uploadExtra,o=e._parseError(a,t,r);i.data=s;e._showUploadError(o,s,"filebatchuploaderror");e._setProgress(101,e.$progress,e.msgAjaxProgressError.replace("{operation}",a))};e._ajaxSubmit(n,r,s,a)},_deleteFileIndex:function(i){var n=this,r=i.attr("data-fileindex");if(r.substring(0,5)==="init_"){r=parseInt(r.replace("init_",""));n.initialPreview=t.spliceArray(n.initialPreview,r);n.initialPreviewConfig=t.spliceArray(n.initialPreviewConfig,r);n.initialPreviewThumbTags=t.spliceArray(n.initialPreviewThumbTags,r);n.getFrames().each(function(){var t=e(this),i=t.attr("data-fileindex");if(i.substring(0,5)==="init_"){i=parseInt(i.replace("init_",""));if(i>r){i--;t.attr("data-fileindex","init_"+i)}}});if(n.uploadAsync){n.cacheInitialPreview=n.getPreview()}}},_initFileActions:function(){var i=this,n=i.$preview;if(!i.showPreview){return}i._initZoomButton();i.getFrames(" .kv-file-remove").each(function(){var r=e(this),s=r.closest(t.FRAMES),a,o=s.attr("id"),l=s.attr("data-fileindex"),u,f,c;i._handler(r,"click",function(){c=i._raise("filepreremove",[o,l]);if(c===false||!i._validateMinCount()){return false}a=s.hasClass("file-preview-error");t.cleanMemory(s);s.fadeOut("slow",function(){t.cleanZoomCache(n.find("#zoom-"+o));i.updateStack(l,undefined);i._clearObjects(s);s.remove();if(o&&a){i.$errorContainer.find('li[data-file-id="'+o+'"]').fadeOut("fast",function(){e(this).remove();if(!i._errorsExist()){i._resetErrors()}})}i._clearFileInput();var r=i.getFileStack(true),c=i.previewCache.count(),d=r.length,h=i.showPreview&&i.getFrames().length;if(d===0&&c===0&&!h){i.reset()}else{u=c+d;f=u>1?i._getMsgSelected(u):r[0]?i._getFileNames()[0]:"";i._setCaption(f)}i._raise("fileremoved",[o,l])})})});i.getFrames(" .kv-file-upload").each(function(){var n=e(this);i._handler(n,"click",function(){var e=n.closest(t.FRAMES),r=e.attr("data-fileindex");i.$progress.hide();if(e.hasClass("file-preview-error")&&!i.retryErrorUploads){return}i._uploadSingle(r,false)})})},_initPreviewActions:function(){var i=this,n=i.$preview,r=i.deleteExtraData||{},s=t.FRAMES+" .kv-file-remove",a=i.fileActionSettings,o=a.removeClass,l=a.removeErrorClass,u=function(){var e=i.isAjaxUpload?i.previewCache.count():i.$element.get(0).files.length;if(!n.find(t.FRAMES).length&&!e){i._setCaption("");i.reset();i.initialCaption=""}};i._initZoomButton();n.find(s).each(function(){var s=e(this),a=s.data("url")||i.deleteUrl,f=s.data("key"),c,d,h;if(t.isEmpty(a)||f===undefined){return}var p=s.closest(t.FRAMES),m=i.previewCache.data,g,v,y=p.attr("data-fileindex"),b,w;y=parseInt(y.replace("init_",""));b=t.isEmpty(m.config)&&t.isEmpty(m.config[y])?null:m.config[y];w=t.isEmpty(b)||t.isEmpty(b.extra)?r:b.extra;if(typeof w==="function"){w=w()}v={id:s.attr("id"),key:f,extra:w};c=function(e){i.ajaxAborted=false;i._raise("filepredelete",[f,e,w]);if(i._abort()){e.abort()}else{s.removeClass(l);t.addCss(p,"file-uploading");t.addCss(s,"disabled "+o)}};d=function(e,r,a){var c,d;if(!t.isEmpty(e)&&!t.isEmpty(e.error)){v.jqXHR=a;v.response=e;i._showError(e.error,v,"filedeleteerror");p.removeClass("file-uploading");s.removeClass("disabled "+o).addClass(l);u();return}p.removeClass("file-uploading").addClass("file-deleted");p.fadeOut("slow",function(){y=parseInt(p.attr("data-fileindex").replace("init_",""));i.previewCache.unset(y);i._deleteFileIndex(p);c=i.previewCache.count();d=c>0?i._getMsgSelected(c):"";i._setCaption(d);i._raise("filedeleted",[f,a,w]);t.cleanZoomCache(n.find("#zoom-"+p.attr("id")));i._clearObjects(p);p.remove();u()})};h=function(e,t,n){var r=i.ajaxOperations.deleteThumb,a=i._parseError(r,e,n);v.jqXHR=e;v.response={};i._showError(a,v,"filedeleteerror");p.removeClass("file-uploading");s.removeClass("disabled "+o).addClass(l);u()};i._mergeAjaxCallback("beforeSend",c,"delete");i._mergeAjaxCallback("success",d,"delete");i._mergeAjaxCallback("error",h,"delete");g=e.extend(true,{},{url:a,type:"POST",dataType:"json",data:e.extend(true,{},{key:f},w)},i.ajaxDeleteSettings);i._handler(s,"click",function(){if(!i._validateMinCount()){return false}i.ajaxAborted=false;i._raise("filebeforedelete",[f,w]);if(i.ajaxAborted instanceof Promise){i.ajaxAborted.then(function(t){if(!t){e.ajax(g)}})}else{if(!i.ajaxAborted){e.ajax(g)}}})})},_hideFileIcon:function(){var e=this;if(e.overwriteInitial){e.$captionContainer.removeClass("icon-visible")}},_showFileIcon:function(){var e=this;t.addCss(e.$captionContainer,"icon-visible")},_getSize:function(t){var i=this,n=parseFloat(t),r,s=i.fileSizeGetter,a,o;if(!e.isNumeric(t)||!e.isNumeric(n)){return""}if(typeof s==="function"){o=s(n)}else{if(n===0){o="0.00 B"}else{r=Math.floor(Math.log(n)/Math.log(1024));a=["B","KB","MB","GB","TB","PB","EB","ZB","YB"];o=(n/Math.pow(1024,r)).toFixed(2)*1+" "+a[r]}}return i._getLayoutTemplate("size").replace("{sizeText}",o)},_generatePreviewTemplate:function(i,n,r,s,a,o,l,u,f,c,d){var h=this,p=h.slug(r),m,g="",v="",y=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,b=y<400?h.previewSettingsSmall[i]||h.defaults.previewSettingsSmall[i]:h.previewSettings[i]||h.defaults.previewSettings[i],w=f||h._renderFileFooter(p,l,"auto",o),x=h._getPreviewIcon(r),C="type-default",T=x&&h.preferIconicPreview,_=x&&h.preferIconicZoomPreview,k;if(b){e.each(b,function(e,t){v+=e+":"+t+";"})}k=function(n,o,l,f){var m=l?"zoom-"+a:a,g=h._getPreviewTemplate(n),y=(u||"")+" "+f;if(h.frameClass){y=h.frameClass+" "+y}if(l){y=y.replace(" "+t.SORT_CSS,"")}g=h._parseFilePreviewIcon(g,r);if(n==="text"){o=t.htmlEncode(o)}if(i==="object"&&!s){e.each(h.defaults.fileTypeSettings,function(e,t){if(e==="object"||e==="other"){return}if(t(r,s)){C="type-"+e}})}return g.setTokens({previewId:m,caption:p,frameClass:y,type:s,fileindex:c,typeCss:C,footer:w,data:o,template:d||i,style:v?'style="'+v+'"':""})};c=c||a.slice(a.lastIndexOf("-")+1);if(h.fileActionSettings.showZoom){g=k(_?"other":i,n,true,"kv-zoom-thumb")}g="\n"+h._getLayoutTemplate("zoomCache").replace("{zoomContent}",g);m=k(T?"other":i,n,false,"kv-preview-thumb");return m+g},_previewDefault:function(i,n,r){var s=this,a=s.$preview;if(!s.showPreview){return}var o=i?i.name:"",l=i?i.type:"",u,f=i.size||0,c=s.slug(o),d=r===true&&!s.isAjaxUpload,h=t.objUrl.createObjectURL(i);s._clearDefaultPreview();u=s._generatePreviewTemplate("other",h,o,l,n,d,f);a.append("\n"+u);s._setThumbAttr(n,c,f);if(r===true&&s.isAjaxUpload){s._setThumbStatus(e("#"+n),"Error")}},_previewFile:function(e,i,n,r,s,a){if(!this.showPreview){return}var o=this,l=i?i.name:"",u=a.type,f=a.name,c=o._parseFileType(u,l),d=o.allowedPreviewTypes,h,p=o.allowedPreviewMimeTypes,m=o.$preview,g=i.size||0,v=d&&d.indexOf(c)>=0,y=p&&p.indexOf(u)!==-1,b=c==="text"||c==="html"||c==="image"?n.target.result:s;if(c==="html"&&o.purifyHtml&&window.DOMPurify){b=window.DOMPurify.sanitize(b)}if(v||y){h=o._generatePreviewTemplate(c,b,l,u,r,false,g);o._clearDefaultPreview();m.append("\n"+h);var w=m.find("#"+r+" img");if(w.length&&o.autoOrientImage){t.validateOrientation(i,function(e){if(!e){o._validateImage(r,f,u,g,b);return}var n=m.find("#zoom-"+r+" img"),s="rotate-"+e;if(e>4){s+=w.width()>w.height()?" is-portrait-gt4":" is-landscape-gt4"}t.addCss(w,s);t.addCss(n,s);o._raise("fileimageoriented",{$img:w,file:i});o._validateImage(r,f,u,g,b);t.adjustOrientedImage(w)})}else{o._validateImage(r,f,u,g,b)}}else{o._previewDefault(i,r)}o._setThumbAttr(r,f,g);o._initSortable()},_setThumbAttr:function(t,i,n){var r=this,s=e("#"+t);if(s.length){n=n&&n>0?r._getSize(n):"";s.data({caption:i,size:n})}},_setInitThumbAttr:function(){var e=this,i=e.previewCache.data,n=e.previewCache.count(),r,s,a,o;if(n===0){return}for(var l=0;l<n;l++){r=i.config[l];o=e.previewInitId+"-"+"init_"+l;s=t.ifSet("caption",r,t.ifSet("filename",r));a=t.ifSet("size",r);e._setThumbAttr(o,s,a)}},_slugDefault:function(e){return t.isEmpty(e)?"":String(e).replace(/[\[\]\/\{}:;#%=\(\)\*\+\?\\\^\$\|<>&"']/g,"_")},_updateFileDetails:function(e){var i=this,n=i.$element,r=i.getFileStack(),s=t.isIE(9)&&t.findFileName(n.val())||n[0].files[0]&&n[0].files[0].name||r.length&&r[0].name||"",a=i.slug(s),o=i.isAjaxUpload?r.length:e,l=i.previewCache.count()+o,u=o===1?a:i._getMsgSelected(l);if(i.isError){i.$previewContainer.removeClass("file-thumb-loading");i.$previewStatus.html("");i.$captionContainer.removeClass("icon-visible")}else{i._showFileIcon()}i._setCaption(u,i.isError);i.$container.removeClass("file-input-new file-input-ajax-new");if(arguments.length===1){i._raise("fileselect",[e,a])}if(i.previewCache.count()){i._initPreviewActions()}},_setThumbStatus:function(e,t){var i=this;if(!i.showPreview){return}var n="indicator"+t,r=n+"Title",s="file-preview-"+t.toLowerCase(),a=e.find(".file-upload-indicator"),o=i.fileActionSettings;e.removeClass("file-preview-success file-preview-error file-preview-loading");if(t==="Success"){e.find(".file-drag-handle").remove()}a.html(o[n]);a.attr("title",o[r]);e.addClass(s);if(t==="Error"&&!i.retryErrorUploads){e.find(".kv-file-upload").attr("disabled",true)}},_setProgressCancelled:function(){var e=this;e._setProgress(101,e.$progress,e.msgCancelled)},_setProgress:function(e,i,n){var r=this,s=Math.min(e,100),a,o=r.progressUploadThreshold,l=e<=100?r.progressTemplate:r.progressCompleteTemplate,u=s<100?r.progressTemplate:n?r.progressErrorTemplate:l;i=i||r.$progress;if(!t.isEmpty(u)){if(o&&s>o&&e<=100){a=u.setTokens({percent:o,status:r.msgUploadThreshold})}else{a=u.setTokens({percent:s,status:e>100?r.msgUploadEnd:s+"%"})}i.html(a);if(n){i.find('[role="progressbar"]').html(n)}}},_setFileDropZoneTitle:function(){var e=this,i=e.$container.find(".file-drop-zone"),n=e.dropZoneTitle,r;if(e.isClickable){r=t.isEmpty(e.$element.attr("multiple"))?e.fileSingle:e.filePlural;n+=e.dropZoneClickTitle.replace("{files}",r)}i.find("."+e.dropZoneTitleClass).remove();if(!e.isAjaxUpload||!e.showPreview||i.length===0||e.getFileStack().length>0||!e.dropZoneEnabled){return}if(i.find(t.FRAMES).length===0&&t.isEmpty(e.defaultPreviewContent)){i.prepend('<div class="'+e.dropZoneTitleClass+'">'+n+"</div>")}e.$container.removeClass("file-input-new");t.addCss(e.$container,"file-input-ajax-new")},_setAsyncUploadStatus:function(t,i,n){var r=this,s=0;r._setProgress(i,e("#"+t).find(".file-thumb-progress"));r.uploadStatus[t]=i;e.each(r.uploadStatus,function(e,t){s+=t});r._setProgress(Math.floor(s/n))},_validateMinCount:function(){var e=this,t=e.isAjaxUpload?e.getFileStack().length:e.$element.get(0).files.length;if(e.validateInitialCount&&e.minFileCount>0&&e._getFileCount(t-1)<e.minFileCount){e._noFilesError({});return false}return true},_getFileCount:function(e){var t=this,i=0;if(t.validateInitialCount&&!t.overwriteInitial){i=t.previewCache.count();e+=i}return e},_getFileId:function(e){var t=this,i=t.generateFileId,n;if(typeof i==="function"){return i(e,event)}if(!e){return null}n=String(e.webkitRelativePath||e.fileName||e.name||null);if(!n){return null}return e.size+"-"+n.replace(/[^0-9a-zA-Z_-]/gim,"")},_getFileName:function(e){return e&&e.name?this.slug(e.name):undefined},_getFileIds:function(e){var t=this;return t.fileids.filter(function(t){return e?t!==undefined:t!==undefined&&t!==null})},_getFileNames:function(e){var t=this;return t.filenames.filter(function(t){return e?t!==undefined:t!==undefined&&t!==null})},_setPreviewError:function(e,t,i,n){var r=this;if(t!==undefined){r.updateStack(t,i)}if(!r.showPreview){return}if(r.removeFromPreviewOnError&&!n){e.remove();return}else{r._setThumbStatus(e,"Error")}r._refreshUploadButton(e,n)},_refreshUploadButton:function(e,t){var i=this,n=e.find(".kv-file-upload"),r=i.fileActionSettings,s=r.uploadIcon,a=r.uploadTitle;if(!n.length){return}if(t){s=r.uploadRetryIcon;a=r.uploadRetryTitle}n.attr("title",a).html(s)},_checkDimensions:function(e,i,n,r,s,a,o){var l=this,u,f,c=i==="Small"?"min":"max",d=l[c+"Image"+a],h,p;if(t.isEmpty(d)||!n.length){return}h=n[0];f=a==="Width"?h.naturalWidth||h.width:h.naturalHeight||h.height;p=i==="Small"?f>=d:f<=d;if(p){return}u=l["msgImage"+a+i].setTokens({name:s,size:d});l._showUploadError(u,o);l._setPreviewError(r,e,null)},_validateImage:function(t,i,n,r,s){var a=this,o=a.$preview,l,u,f,c=o.find("#"+t),d=c.attr("data-fileindex"),h=c.find("img"),p;i=i||"Untitled";h.one("load",function(){u=c.width();f=o.width();if(u>f){h.css("width","100%")}l={ind:d,id:t};a._checkDimensions(d,"Small",h,c,i,"Width",l);a._checkDimensions(d,"Small",h,c,i,"Height",l);if(!a.resizeImage){a._checkDimensions(d,"Large",h,c,i,"Width",l);a._checkDimensions(d,"Large",h,c,i,"Height",l)}a._raise("fileimageloaded",[t]);try{p=window.piexif?window.piexif.load(s):null}catch(e){p=null}a.loadedImages.push({ind:d,img:h,thumb:c,pid:t,typ:n,siz:r,validated:false,imgData:s,exifObj:p});c.data("exif",p);a._validateAllImages()}).one("error",function(){a._raise("fileimageloaderror",[t])}).each(function(){if(this.complete){e(this).trigger("load")}else{if(this.error){e(this).trigger("error")}}})},_validateAllImages:function(){var e=this,t,i={val:0},n=e.loadedImages.length,r,s,a=e.resizeIfSizeMoreThan;if(n!==e.totalImagesCount){return}e._raise("fileimagesloaded");if(!e.resizeImage){return}for(t=0;t<e.loadedImages.length;t++){r=e.loadedImages[t];if(r.validated){continue}s=r.siz;if(s&&s>a*1e3){e._getResizedImage(r,i,n)}e.loadedImages[t].validated=true}},_getResizedImage:function(i,n,r){var s=this,a=e(i.img)[0],o=a.naturalWidth,l=a.naturalHeight,u,f=1,c=s.maxImageWidth||o,d=s.maxImageHeight||l,h=!!(o&&l),p,m,g=s.imageCanvas,v,y=s.imageCanvasContext,b=i.typ,w=i.pid,x=i.ind,C=i.thumb,T,_,k=i.exifObj,D;T=function(e,t,i){if(s.isAjaxUpload){s._showUploadError(e,t,i)}else{s._showError(e,t,i)}s._setPreviewError(C,x)};if(!s.filestack[x]||!h||o<=c&&l<=d){if(h&&s.filestack[x]){s._raise("fileimageresized",[w,x])}n.val++;if(n.val===r){s._raise("fileimagesresized")}if(!h){T(s.msgImageResizeError,{id:w,index:x},"fileimageresizeerror");return}}b=b||s.resizeDefaultImageType;p=o>c;m=l>d;if(s.resizePreference==="width"){f=p?c/o:m?d/l:1}else{f=m?d/l:p?c/o:1}s._resetCanvas();o*=f;l*=f;g.width=o;g.height=l;try{y.drawImage(a,0,0,o,l);v=g.toDataURL(b,s.resizeQuality);if(k){D=window.piexif.dump(k);v=window.piexif.insert(D,v)}u=t.dataURI2Blob(v);s.filestack[x]=u;s._raise("fileimageresized",[w,x]);n.val++;if(n.val===r){s._raise("fileimagesresized",[undefined,undefined])}if(!(u instanceof Blob)){T(s.msgImageResizeError,{id:w,index:x},"fileimageresizeerror")}}catch(e){n.val++;if(n.val===r){s._raise("fileimagesresized",[undefined,undefined])}_=s.msgImageResizeException.replace("{errors}",e.message);T(_,{id:w,index:x},"fileimageresizeexception")}},_initBrowse:function(e){var t=this;if(t.showBrowse){t.$btnFile=e.find(".btn-file");t.$btnFile.append(t.$element)}else{t.$element.hide()}},_initCaption:function(){var e=this,i=e.initialCaption||"";if(e.overwriteInitial||t.isEmpty(i)){e.$caption.val("");return false}e._setCaption(i);return true},_setCaption:function(i,n){var r=this,s,a,o,l,u,f=r.getFileStack();if(!r.$caption.length){return}r.$captionContainer.removeClass("icon-visible");if(n){s=e("<div>"+r.msgValidationError+"</div>").text();l=f.length;if(l){u=l===1&&f[0]?r._getFileNames()[0]:r._getMsgSelected(l)}else{u=r._getMsgSelected(r.msgNo)}a=t.isEmpty(i)?u:i;o='<span class="'+r.msgValidationErrorClass+'">'+r.msgValidationErrorIcon+"</span>"}else{if(t.isEmpty(i)){return}s=e("<div>"+i+"</div>").text();a=s;o=r._getLayoutTemplate("fileIcon")}r.$captionContainer.addClass("icon-visible");r.$caption.attr("title",s).val(a);r.$captionIcon.html(o)},_createContainer:function(){var t=this,i={class:"file-input file-input-new"+(t.rtl?" kv-rtl":"")},n=e(document.createElement("div")).attr(i).html(t._renderMain());t.$element.before(n);t._initBrowse(n);if(t.theme){n.addClass("theme-"+t.theme)}return n},_refreshContainer:function(){var e=this,t=e.$container;t.before(e.$element);t.html(e._renderMain());e._initBrowse(t);e._validateDisabled()},_validateDisabled:function(){var e=this;e.$caption.attr({readonly:e.isDisabled})},_renderMain:function(){var e=this,t=e.isAjaxUpload&&e.dropZoneEnabled?" file-drop-zone":"file-drop-disabled",i=!e.showClose?"":e._getLayoutTemplate("close"),n=!e.showPreview?"":e._getLayoutTemplate("preview").setTokens({class:e.previewClass,dropClass:t}),r=e.isDisabled?e.captionClass+" file-caption-disabled":e.captionClass,s=e.captionTemplate.setTokens({class:r+" kv-fileinput-caption"});return e.mainTemplate.setTokens({class:e.mainClass+(!e.showBrowse&&e.showCaption?" no-browse":""),preview:n,close:i,caption:s,upload:e._renderButton("upload"),remove:e._renderButton("remove"),cancel:e._renderButton("cancel"),browse:e._renderButton("browse")})},_renderButton:function(e){var i=this,n=i._getLayoutTemplate("btnDefault"),r=i[e+"Class"],s=i[e+"Title"],a=i[e+"Icon"],o=i[e+"Label"],l=i.isDisabled?" disabled":"",u="button";switch(e){case"remove":if(!i.showRemove){return""}break;case"cancel":if(!i.showCancel){return""}r+=" kv-hidden";break;case"upload":if(!i.showUpload){return""}if(i.isAjaxUpload&&!i.isDisabled){n=i._getLayoutTemplate("btnLink").replace("{href}",i.uploadUrl)}else{u="submit"}break;case"browse":if(!i.showBrowse){return""}n=i._getLayoutTemplate("btnBrowse");break;default:return""}r+=e==="browse"?" btn-file":" fileinput-"+e+" fileinput-"+e+"-button";if(!t.isEmpty(o)){o=' <span class="'+i.buttonLabelClass+'">'+o+"</span>"}return n.setTokens({type:u,css:r,title:s,status:l,icon:a,label:o})},_renderThumbProgress:function(){var e=this;return'<div class="file-thumb-progress kv-hidden">'+e.progressTemplate.setTokens({percent:"0",status:e.msgUploadBegin})+"</div>"},_renderFileFooter:function(e,i,n,r){var s=this,a=s.fileActionSettings,o=a.showRemove,l=a.showDrag,u=a.showUpload,f=a.showZoom,c,d=s._getLayoutTemplate("footer"),h=s._getLayoutTemplate("indicator"),p=r?a.indicatorError:a.indicatorNew,m=r?a.indicatorErrorTitle:a.indicatorNewTitle,g=h.setTokens({indicator:p,indicatorTitle:m});i=s._getSize(i);if(s.isAjaxUpload){c=d.setTokens({actions:s._renderFileActions(u,false,o,f,l,false,false,false),caption:e,size:i,width:n,progress:s._renderThumbProgress(),indicator:g})}else{c=d.setTokens({actions:s._renderFileActions(false,false,false,f,l,false,false,false),caption:e,size:i,width:n,progress:"",indicator:g})}c=t.replaceTags(c,s.previewThumbTags);return c},_renderFileActions:function(e,t,i,n,r,s,a,o,l,u,f){if(!e&&!t&&!i&&!n&&!r){return""}var c=this,d=a===false?"":' data-url="'+a+'"',h=o===false?"":' data-key="'+o+'"',p="",m="",g="",v="",y="",b,w=c._getLayoutTemplate("actions"),x=c.fileActionSettings,C=c.otherActionButtons.setTokens({dataKey:h,key:o}),T=s?x.removeClass+" disabled":x.removeClass;if(i){p=c._getLayoutTemplate("actionDelete").setTokens({removeClass:T,removeIcon:x.removeIcon,removeTitle:x.removeTitle,dataUrl:d,dataKey:h,key:o})}if(e){m=c._getLayoutTemplate("actionUpload").setTokens({uploadClass:x.uploadClass,uploadIcon:x.uploadIcon,uploadTitle:x.uploadTitle})}if(t){g=c._getLayoutTemplate("actionDownload").setTokens({downloadClass:x.downloadClass,downloadIcon:x.downloadIcon,downloadTitle:x.downloadTitle,downloadUrl:u||c.initialPreviewDownloadUrl});g=g.setTokens({filename:f,key:o})}if(n){v=c._getLayoutTemplate("actionZoom").setTokens({zoomClass:x.zoomClass,zoomIcon:x.zoomIcon,zoomTitle:x.zoomTitle})}if(r&&l){b="drag-handle-init "+x.dragClass;y=c._getLayoutTemplate("actionDrag").setTokens({dragClass:b,dragTitle:x.dragTitle,dragIcon:x.dragIcon})}return w.setTokens({delete:p,upload:m,download:g,zoom:v,drag:y,other:C})},_browse:function(e){var t=this;t._raise("filebrowse");if(e&&e.isDefaultPrevented()){return}if(t.isError&&!t.isAjaxUpload){t.clear()}t.$captionContainer.focus()},_filterDuplicate:function(e,t,i){var n=this,r=n._getFileId(e);if(r&&i&&i.indexOf(r)>-1){return}if(!i){i=[]}t.push(e);i.push(r)},_change:function(i){var n=this,r=n.$element;if(!n.isAjaxUpload&&t.isEmpty(r.val())&&n.fileInputCleared){n.fileInputCleared=false;return}n.fileInputCleared=false;var s=[],a,o,l=arguments.length>1,u=n.isAjaxUpload,f,c,d=l?i.originalEvent.dataTransfer.files:r.get(0).files,h=n.filestack.length,p=t.isEmpty(r.attr("multiple")),m=p&&h>0,g=0,v=n._getFileIds(),y=function(t,i,r,s){var a=e.extend(true,{},n._getOutData({},{},d),{id:r,index:s}),o={id:r,index:s,file:i,files:d};return n.isAjaxUpload?n._showUploadError(t,a):n._showError(t,o)};n.reader=null;n._resetUpload();n._hideFileIcon();if(n.isAjaxUpload){n.$container.find(".file-drop-zone ."+n.dropZoneTitleClass).remove()}if(l){e.each(d,function(e,t){if(t&&!t.type&&t.size!==undefined&&t.size%4096===0){g++}else{n._filterDuplicate(t,s,v)}})}else{if(i.target&&i.target.files===undefined){d=i.target.value?[{name:i.target.value.replace(/^.+\\/,"")}]:[]}else{d=i.target.files||{}}if(u){e.each(d,function(e,t){n._filterDuplicate(t,s,v)})}else{s=d}}if(t.isEmpty(s)||s.length===0){if(!u){n.clear()}n._showFolderError(g);n._raise("fileselectnone");return}n._resetErrors();c=s.length;o=n._getFileCount(n.isAjaxUpload?n.getFileStack().length+c:c);if(n.maxFileCount>0&&o>n.maxFileCount){if(!n.autoReplace||c>n.maxFileCount){f=n.autoReplace&&c>n.maxFileCount?c:o;a=n.msgFilesTooMany.replace("{m}",n.maxFileCount).replace("{n}",f);n.isError=y(a,null,null,null);n.$captionContainer.removeClass("icon-visible");n._setCaption("",true);n.$container.removeClass("file-input-new file-input-ajax-new");return}if(o>n.maxFileCount){n._resetPreviewThumbs(u)}}else{if(!u||m){n._resetPreviewThumbs(false);if(m){n.clearStack()}}else{if(u&&h===0&&(!n.previewCache.count()||n.overwriteInitial)){n._resetPreviewThumbs(true)}}}if(n.isPreviewable){n.readFiles(s)}else{n._updateFileDetails(1)}n._showFolderError(g)},_abort:function(t){var i=this,n;if(i.ajaxAborted&&typeof i.ajaxAborted==="object"&&i.ajaxAborted.message!==undefined){n=e.extend(true,{},i._getOutData(),t);n.abortData=i.ajaxAborted.data||{};n.abortMessage=i.ajaxAborted.message;i._setProgress(101,i.$progress,i.msgCancelled);i._showUploadError(i.ajaxAborted.message,n,"filecustomerror");i.cancel();return true}return!!i.ajaxAborted},_resetFileStack:function(){var i=this,n=0,r=[],s=[],a=[];i._getThumbs().each(function(){var o=e(this),l=o.attr("data-fileindex"),u=i.filestack[l],f=o.attr("id"),c;if(l==="-1"||l===-1){return}if(u!==undefined){r[n]=u;s[n]=i._getFileName(u);a[n]=i._getFileId(u);o.attr({id:i.previewInitId+"-"+n,"data-fileindex":n});n++}else{c="uploaded-"+t.uniqId();o.attr({id:c,"data-fileindex":"-1"});i.$preview.find("#zoom-"+f).attr("id","zoom-"+c)}});i.filestack=r;i.filenames=s;i.fileids=a},_isFileSelectionValid:function(e){var t=this;e=e||0;if(t.required&&!t.getFilesCount()){t.$errorContainer.html("");t._showUploadError(t.msgFileRequired);return false}if(t.minFileCount>0&&t._getFileCount(e)<t.minFileCount){t._noFilesError({});return false}return true},clearStack:function(){var e=this;e.filestack=[];e.filenames=[];e.fileids=[];return e.$element},updateStack:function(e,t){var i=this;i.filestack[e]=t;i.filenames[e]=i._getFileName(t);i.fileids[e]=t&&i._getFileId(t)||null;return i.$element},addToStack:function(e){var t=this;t.filestack.push(e);t.filenames.push(t._getFileName(e));t.fileids.push(t._getFileId(e));return t.$element},getFileStack:function(e){var t=this;return t.filestack.filter(function(t){return e?t!==undefined:t!==undefined&&t!==null})},getFilesCount:function(){var e=this,t=e.isAjaxUpload?e.getFileStack().length:e.$element.get(0).files.length;return e._getFileCount(t)},readFiles:function(i){this.reader=new FileReader;var n=this,r=n.$element,s=n.$preview,a=n.reader,o=n.$previewContainer,l=n.$previewStatus,u=n.msgLoading,f=n.msgProgress,c=n.previewInitId,d=i.length,h=n.fileTypeSettings,p=n.filestack.length,m,g=n.allowedFileTypes,v=g?g.length:0,y=n.allowedFileExtensions,b=t.isEmpty(y)?"":y.join(", "),w=n.maxFilePreviewSize&&parseFloat(n.maxFilePreviewSize),x=s.length&&(!w||isNaN(w)),C=function(t,r,s,a){var o=e.extend(true,{},n._getOutData({},{},i),{id:s,index:a}),l={id:s,index:a,file:r,files:i},u;n._previewDefault(r,s,true);if(n.isAjaxUpload){n.addToStack(undefined);setTimeout(function(){m(a+1)},100)}else{d=0}n._initFileActions();u=e("#"+s);u.find(".kv-file-upload").hide();if(n.removeFromPreviewOnError){u.remove()}n.isError=n.isAjaxUpload?n._showUploadError(t,o):n._showError(t,l);n._updateFileDetails(d)};n.loadedImages=[];n.totalImagesCount=0;e.each(i,function(e,t){var i=n.fileTypeSettings.image;if(i&&i(t.type)){n.totalImagesCount++}});m=function(T){if(t.isEmpty(r.attr("multiple"))){d=1}if(T>=d){if(n.isAjaxUpload&&n.filestack.length>0){n._raise("filebatchselected",[n.getFileStack()])}else{n._raise("filebatchselected",[i])}o.removeClass("file-thumb-loading");l.html("");return}var _=p+T,k=c+"-"+_,D=i[T],S,$,A,E=h.text,M=h.image,P=h.html,O,I,F,N,j=D.name?n.slug(D.name):"",U=(D.size||0)/1e3,L="",R=t.objUrl.createObjectURL(D),H=0,z="",Y,V=0,B,W,q,Z,G=function(){var e=f.setTokens({index:T+1,files:d,percent:50,name:j});setTimeout(function(){l.html(e);n._updateFileDetails(d);m(T+1)},100);n._raise("fileloaded",[D,k,T,a])};if(v>0){for($=0;$<v;$++){F=g[$];N=n.msgFileTypes[F]||F;z+=$===0?N:", "+N}}if(j===false){m(T+1);return}if(j.length===0){A=n.msgInvalidFileName.replace("{name}",t.htmlEncode(D.name));C(A,D,k,T);return}if(!t.isEmpty(y)){L=new RegExp("\\.("+y.join("|")+")$","i")}S=U.toFixed(2);if(n.maxFileSize>0&&U>n.maxFileSize){A=n.msgSizeTooLarge.setTokens({name:j,size:S,maxSize:n.maxFileSize});C(A,D,k,T);return}if(n.minFileSize!==null&&U<=t.getNum(n.minFileSize)){A=n.msgSizeTooSmall.setTokens({name:j,size:S,minSize:n.minFileSize});C(A,D,k,T);return}if(!t.isEmpty(g)&&t.isArray(g)){for($=0;$<g.length;$+=1){O=g[$];Y=h[O];H+=!Y||typeof Y!=="function"?0:Y(D.type,D.name)?1:0}if(H===0){A=n.msgInvalidFileType.setTokens({name:j,types:z});C(A,D,k,T);return}}if(H===0&&!t.isEmpty(y)&&t.isArray(y)&&!t.isEmpty(L)){I=t.compare(j,L);H+=t.isEmpty(I)?0:I.length;if(H===0){A=n.msgInvalidFileExtension.setTokens({name:j,extensions:b});C(A,D,k,T);return}}if(!n.showPreview){if(n.isAjaxUpload){n.addToStack(D)}setTimeout(function(){m(T+1);n._updateFileDetails(d)},100);n._raise("fileloaded",[D,k,T,a]);return}if(!x&&U>w){n.addToStack(D);o.addClass("file-thumb-loading");n._previewDefault(D,k);n._initFileActions();n._updateFileDetails(d);m(T+1);return}if(s.length&&FileReader!==undefined){B=E(D.type,j);W=P(D.type,j);q=M(D.type,j);l.html(u.replace("{index}",T+1).replace("{files}",d));o.addClass("file-thumb-loading");a.onerror=function(e){n._errorHandler(e,j)};a.onload=function(i){var r,s,o,l,u=[],f,c,d=function(e){var t=new FileReader;t.onerror=function(e){n._errorHandler(e,j)};t.onload=function(e){n._previewFile(T,D,e,k,R,s);n._initFileActions();G()};if(e){t.readAsText(D,n.textEncoding)}else{t.readAsDataURL(D)}};s={name:j,type:D.type};e.each(h,function(e,t){if(e!=="object"&&e!=="other"&&t(D.type,j)){V++}});if(V===0){o=new Uint8Array(i.target.result);for($=0;$<o.length;$++){l=o[$].toString(16);u.push(l)}r=u.join("").toLowerCase().substring(0,8);c=t.getMimeType(r,"","");if(t.isEmpty(c)){f=t.arrayBuffer2String(a.result);c=t.isSvg(f)?"image/svg+xml":t.getMimeType(r,f,D.type)}s={name:j,type:c};B=E(c,"");W=P(c,"");q=M(c,"");Z=B||W;if(Z||q){d(Z);return}}n._previewFile(T,D,i,k,R,s);n._initFileActions();G()};a.onprogress=function(e){if(e.lengthComputable){var t=e.loaded/e.total*100,i=Math.ceil(t);A=f.setTokens({index:T+1,files:d,percent:i,name:j});setTimeout(function(){l.html(A)},100)}};if(B||W){a.readAsText(D,n.textEncoding)}else{if(q){a.readAsDataURL(D)}else{a.readAsArrayBuffer(D)}}}else{n._previewDefault(D,k);setTimeout(function(){m(T+1);n._updateFileDetails(d)},100);n._raise("fileloaded",[D,k,T,a])}n.addToStack(D)};m(0);n._updateFileDetails(d,false)},lock:function(){var e=this;e._resetErrors();e.disable();if(e.showRemove){e.$container.find(".fileinput-remove").hide()}if(e.showCancel){e.$container.find(".fileinput-cancel").show()}e._raise("filelock",[e.filestack,e._getExtraData()]);return e.$element},unlock:function(e){var t=this;if(e===undefined){e=true}t.enable();if(t.showCancel){t.$container.find(".fileinput-cancel").hide()}if(t.showRemove){t.$container.find(".fileinput-remove").show()}if(e){t._resetFileStack()}t._raise("fileunlock",[t.filestack,t._getExtraData()]);return t.$element},cancel:function(){var t=this,i=t.ajaxRequests,n=i.length,r;if(n>0){for(r=0;r<n;r+=1){t.cancelling=true;i[r].abort()}}t._setProgressCancelled();t._getThumbs().each(function(){var i=e(this),n=i.attr("data-fileindex");i.removeClass("file-uploading");if(t.filestack[n]!==undefined){i.find(".kv-file-upload").removeClass("disabled").removeAttr("disabled");i.find(".kv-file-remove").removeClass("disabled").removeAttr("disabled")}t.unlock()});return t.$element},clear:function(){var i=this,n;if(!i._raise("fileclear")){return}i.$btnUpload.removeAttr("disabled");i._getThumbs().find("video,audio,img").each(function(){t.cleanMemory(e(this))});i._resetUpload();i.clearStack();i._clearFileInput();i._resetErrors(true);if(i._hasInitialPreview()){i._showFileIcon();i._resetPreview();i._initPreviewActions();i.$container.removeClass("file-input-new")}else{i._getThumbs().each(function(){i._clearObjects(e(this))});if(i.isAjaxUpload){i.previewCache.data={}}i.$preview.html("");n=!i.overwriteInitial&&i.initialCaption.length>0?i.initialCaption:"";i.$caption.attr("title","").val(n);t.addCss(i.$container,"file-input-new");i._validateDefaultPreview()}if(i.$container.find(t.FRAMES).length===0){if(!i._initCaption()){i.$captionContainer.removeClass("icon-visible")}}i._hideFileIcon();i._raise("filecleared");i.$captionContainer.focus();i._setFileDropZoneTitle();return i.$element},reset:function(){var e=this;if(!e._raise("filereset")){return}e._resetPreview();e.$container.find(".fileinput-filename").text("");t.addCss(e.$container,"file-input-new");if(e.getFrames().length||e.isAjaxUpload&&e.dropZoneEnabled){e.$container.removeClass("file-input-new")}e.clearStack();e.formdata={};e._setFileDropZoneTitle();return e.$element},disable:function(){var e=this;e.isDisabled=true;e._raise("filedisabled");e.$element.attr("disabled","disabled");e.$container.find(".kv-fileinput-caption").addClass("file-caption-disabled");e.$container.find(".fileinput-remove, .fileinput-upload, .file-preview-frame button").attr("disabled",true);t.addCss(e.$container.find(".btn-file"),"disabled");e._initDragDrop();return e.$element},enable:function(){var e=this;e.isDisabled=false;e._raise("fileenabled");e.$element.removeAttr("disabled");e.$container.find(".kv-fileinput-caption").removeClass("file-caption-disabled");e.$container.find(".fileinput-remove, .fileinput-upload, .file-preview-frame button").removeAttr("disabled");e.$container.find(".btn-file").removeClass("disabled");e._initDragDrop();return e.$element},upload:function(){var i=this,n=i.getFileStack().length,r,s,a,o=!e.isEmptyObject(i._getExtraData());if(!i.isAjaxUpload||i.isDisabled||!i._isFileSelectionValid(n)){return}i._resetUpload();if(n===0&&!o){i._showUploadError(i.msgUploadEmpty);return}i.$progress.show();i.uploadCount=0;i.uploadStatus={};i.uploadLog=[];i.lock();i._setProgress(2);if(n===0&&o){i._uploadExtraOnly();return}a=i.filestack.length;i.hasInitData=false;if(i.uploadAsync){s=i._getOutData();i._raise("filebatchpreupload",[s]);i.fileBatchCompleted=false;i.uploadCache={content:[],config:[],tags:[],append:true};i.uploadAsyncCount=i.getFileStack().length;for(r=0;r<a;r++){i.uploadCache.content[r]=null;i.uploadCache.config[r]=null;i.uploadCache.tags[r]=null}i.$preview.find(".file-preview-initial").removeClass(t.SORT_CSS);i._initSortable();i.cacheInitialPreview=i.getPreview();for(r=0;r<a;r++){if(i.filestack[r]){i._uploadSingle(r,true)}}return}i._uploadBatch();return i.$element},destroy:function(){var t=this,i=t.$form,n=t.$container,r=t.$element,s=t.namespace;e(document).off(s);e(window).off(s);if(i&&i.length){i.off(s)}if(t.isAjaxUpload){t._clearFileInput()}t._cleanup();t._initPreviewCache();r.insertBefore(n).off(s).removeData();n.off().remove();return r},refresh:function(i,n){var r=this,s=r.$element;if(typeof i!=="object"||t.isEmpty(i)){i=r.options}else{i=e.extend(true,{},r.options,i)}r._init(i,true);r._listen();if(n){s.trigger("change"+r.namespace)}return s},zoom:function(e){var i=this,n=i._getFrame(e),r=i.$modal;if(!n){return}t.initModal(r);r.html(i._getModalContent());i._setZoomContent(n);r.modal("show");i._initZoomButtons()},getExif:function(e){var t=this,i=t._getFrame(e);return i&&i.data("exif")||null},getFrames:function(e){var i=this;e=e||"";return i.$preview.find(t.FRAMES+e)},getPreview:function(){var e=this;return{content:e.initialPreview,config:e.initialPreviewConfig,tags:e.initialPreviewThumbTags}}};e.fn.fileinput=function(n){if(!t.hasFileAPISupport()&&!t.isIE(9)){return}var r=Array.apply(null,arguments),s=[];r.shift();this.each(function(){var a=e(this),o=a.data("fileinput"),l=typeof n==="object"&&n,u=l.theme||a.data("theme"),f={},c={},d=l.language||a.data("language")||e.fn.fileinput.defaults.language||"en",h;if(!o){if(u){c=e.fn.fileinputThemes[u]||{}}if(d!=="en"&&!t.isEmpty(e.fn.fileinputLocales[d])){f=e.fn.fileinputLocales[d]||{}}h=e.extend(true,{},e.fn.fileinput.defaults,c,e.fn.fileinputLocales.en,f,l,a.data());o=new i(this,h);a.data("fileinput",o)}if(typeof n==="string"){s.push(o[n].apply(o,r))}});switch(s.length){case 0:return this;case 1:return s[0];default:return s}};e.fn.fileinput.defaults={language:"en",showCaption:true,showBrowse:true,showPreview:true,showRemove:true,showUpload:true,showCancel:true,showClose:true,showUploadedThumbs:true,browseOnZoneClick:false,autoReplace:false,autoOrientImage:true,required:false,rtl:false,hideThumbnailContent:false,generateFileId:null,previewClass:"",captionClass:"",frameClass:"krajee-default",mainClass:"file-caption-main",mainTemplate:null,purifyHtml:true,fileSizeGetter:null,initialCaption:"",initialPreview:[],initialPreviewDelimiter:"*$$*",initialPreviewAsData:false,initialPreviewFileType:"image",initialPreviewConfig:[],initialPreviewThumbTags:[],previewThumbTags:{},initialPreviewShowDelete:true,initialPreviewDownloadUrl:"",removeFromPreviewOnError:false,deleteUrl:"",deleteExtraData:{},overwriteInitial:true,previewZoomButtonIcons:{prev:'<i class="glyphicon glyphicon-triangle-left"></i>',next:'<i class="glyphicon glyphicon-triangle-right"></i>',toggleheader:'<i class="glyphicon glyphicon-resize-vertical"></i>',fullscreen:'<i class="glyphicon glyphicon-fullscreen"></i>',borderless:'<i class="glyphicon glyphicon-resize-full"></i>',close:'<i class="glyphicon glyphicon-remove"></i>'},previewZoomButtonClasses:{prev:"btn btn-navigate",next:"btn btn-navigate",toggleheader:"btn btn-kv btn-default btn-outline-secondary",fullscreen:"btn btn-kv btn-default btn-outline-secondary",borderless:"btn btn-kv btn-default btn-outline-secondary",close:"btn btn-kv btn-default btn-outline-secondary"},preferIconicPreview:false,preferIconicZoomPreview:false,allowedPreviewTypes:undefined,allowedPreviewMimeTypes:null,allowedFileTypes:null,allowedFileExtensions:null,defaultPreviewContent:null,customLayoutTags:{},customPreviewTags:{},previewFileIcon:'<i class="glyphicon glyphicon-file"></i>',previewFileIconClass:"file-other-icon",previewFileIconSettings:{},previewFileExtSettings:{},buttonLabelClass:"hidden-xs",browseIcon:'<i class="glyphicon glyphicon-folder-open"></i>&nbsp;',browseClass:"btn btn-primary",removeIcon:'<i class="glyphicon glyphicon-trash"></i>',removeClass:"btn btn-default btn-secondary",cancelIcon:'<i class="glyphicon glyphicon-ban-circle"></i>',cancelClass:"btn btn-default btn-secondary",uploadIcon:'<i class="glyphicon glyphicon-upload"></i>',uploadClass:"btn btn-default btn-secondary",uploadUrl:null,uploadUrlThumb:null,uploadAsync:true,uploadExtraData:{},zoomModalHeight:480,minImageWidth:null,minImageHeight:null,maxImageWidth:null,maxImageHeight:null,resizeImage:false,resizePreference:"width",resizeQuality:.92,resizeDefaultImageType:"image/jpeg",resizeIfSizeMoreThan:0,minFileSize:0,maxFileSize:0,maxFilePreviewSize:25600,minFileCount:0,maxFileCount:0,validateInitialCount:false,msgValidationErrorClass:"text-danger",msgValidationErrorIcon:'<i class="glyphicon glyphicon-exclamation-sign"></i> ',msgErrorClass:"file-error-message",progressThumbClass:"progress-bar bg-success progress-bar-success progress-bar-striped active",progressClass:"progress-bar bg-success progress-bar-success progress-bar-striped active",progressCompleteClass:"progress-bar bg-success progress-bar-success",progressErrorClass:"progress-bar bg-danger progress-bar-danger",progressUploadThreshold:99,previewFileType:"image",elCaptionContainer:null,elCaptionText:null,elPreviewContainer:null,elPreviewImage:null,elPreviewStatus:null,elErrorContainer:null,errorCloseButton:t.closeButton("kv-error-close"),slugCallback:null,dropZoneEnabled:true,dropZoneTitleClass:"file-drop-zone-title",fileActionSettings:{},otherActionButtons:"",textEncoding:"UTF-8",ajaxSettings:{},ajaxDeleteSettings:{},showAjaxErrorDetails:true,mergeAjaxCallbacks:false,mergeAjaxDeleteCallbacks:false,retryErrorUploads:true};e.fn.fileinputLocales.en={fileSingle:"file",filePlural:"files",browseLabel:"Browse &hellip;",removeLabel:"Remove",removeTitle:"Clear selected files",cancelLabel:"Cancel",cancelTitle:"Abort ongoing upload",uploadLabel:"Upload",uploadTitle:"Upload selected files",msgNo:"No",msgNoFilesSelected:"No files selected",msgCancelled:"Cancelled",msgPlaceholder:"Select {files}...",msgZoomModalHeading:"Detailed Preview",msgFileRequired:"You must select a file to upload.",msgSizeTooSmall:'File "{name}" (<b>{size} KB</b>) is too small and must be larger than <b>{minSize} KB</b>.',msgSizeTooLarge:'File "{name}" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>.',msgFilesTooLess:"You must select at least <b>{n}</b> {files} to upload.",msgFilesTooMany:"Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>.",msgFileNotFound:'File "{name}" not found!',msgFileSecured:'Security restrictions prevent reading the file "{name}".',msgFileNotReadable:'File "{name}" is not readable.',msgFilePreviewAborted:'File preview aborted for "{name}".',msgFilePreviewError:'An error occurred while reading the file "{name}".',msgInvalidFileName:'Invalid or unsupported characters in file name "{name}".',msgInvalidFileType:'Invalid type for file "{name}". Only "{types}" files are supported.',msgInvalidFileExtension:'Invalid extension for file "{name}". Only "{extensions}" files are supported.',msgFileTypes:{image:"image",html:"HTML",text:"text",video:"video",audio:"audio",flash:"flash",pdf:"PDF",object:"object"},msgUploadAborted:"The file upload was aborted",msgUploadThreshold:"Processing...",msgUploadBegin:"Initializing...",msgUploadEnd:"Done",msgUploadEmpty:"No valid data available for upload.",msgUploadError:"Error",msgValidationError:"Validation Error",msgLoading:"Loading file {index} of {files} &hellip;",msgProgress:"Loading file {index} of {files} - {name} - {percent}% completed.",msgSelected:"{n} {files} selected",msgFoldersNotAllowed:"Drag & drop files only! {n} folder(s) dropped were skipped.",msgImageWidthSmall:'Width of image file "{name}" must be at least {size} px.',msgImageHeightSmall:'Height of image file "{name}" must be at least {size} px.',msgImageWidthLarge:'Width of image file "{name}" cannot exceed {size} px.',msgImageHeightLarge:'Height of image file "{name}" cannot exceed {size} px.',msgImageResizeError:"Could not get the image dimensions to resize.",msgImageResizeException:"Error while resizing the image.<pre>{errors}</pre>",msgAjaxError:"Something went wrong with the {operation} operation. Please try again later!",msgAjaxProgressError:"{operation} failed",ajaxOperations:{deleteThumb:"file delete",uploadThumb:"file upload",uploadBatch:"batch file upload",uploadExtra:"form data upload"},dropZoneTitle:"Drag & drop files here &hellip;",dropZoneClickTitle:"<br>(or click to select {files})",previewZoomButtonTitles:{prev:"View previous file",next:"View next file",toggleheader:"Toggle header",fullscreen:"Toggle full screen",borderless:"Toggle borderless mode",close:"Close detailed preview"}};e.fn.fileinput.Constructor=i;e(document).ready(function(){var t=e("input.file[type=file]");if(t.length){t.fileinput()}})});(function(e){"use strict";e.fn.fileinputThemes.gly={fileActionSettings:{removeIcon:'<i class="glyphicon glyphicon-trash"></i>',uploadIcon:'<i class="glyphicon glyphicon-upload"></i>',zoomIcon:'<i class="glyphicon glyphicon-zoom-in"></i>',dragIcon:'<i class="glyphicon glyphicon-move"></i>',indicatorNew:'<i class="glyphicon glyphicon-plus-sign text-warning"></i>',indicatorSuccess:'<i class="glyphicon glyphicon-ok-sign text-success"></i>',indicatorError:'<i class="glyphicon glyphicon-exclamation-sign text-danger"></i>',indicatorLoading:'<i class="glyphicon glyphicon-hourglass text-muted"></i>'},layoutTemplates:{fileIcon:'<i class="glyphicon glyphicon-file kv-caption-icon"></i>'},previewZoomButtonIcons:{prev:'<i class="glyphicon glyphicon-triangle-left"></i>',next:'<i class="glyphicon glyphicon-triangle-right"></i>',toggleheader:'<i class="glyphicon glyphicon-resize-vertical"></i>',fullscreen:'<i class="glyphicon glyphicon-fullscreen"></i>',borderless:'<i class="glyphicon glyphicon-resize-full"></i>',close:'<i class="glyphicon glyphicon-remove"></i>'},previewFileIcon:'<i class="glyphicon glyphicon-file"></i>',browseIcon:'<i class="glyphicon glyphicon-folder-open"></i>&nbsp;',removeIcon:'<i class="glyphicon glyphicon-trash"></i>',cancelIcon:'<i class="glyphicon glyphicon-ban-circle"></i>',uploadIcon:'<i class="glyphicon glyphicon-upload"></i>',msgValidationErrorIcon:'<i class="glyphicon glyphicon-exclamation-sign"></i> '}})(window.jQuery);(function(e){if(typeof define==="function"&&define.amd)define(["jquery"],e);else if(typeof exports==="object")e(require("jquery"));else e(jQuery)})(function(e,t){if(!("indexOf"in Array.prototype)){Array.prototype.indexOf=function(e,i){if(i===t)i=0;if(i<0)i+=this.length;if(i<0)i=0;for(var n=this.length;i<n;i++){if(i in this&&this[i]===e){return i}}return-1}}function i(){var e,t,i,n,r,s,a,o;t=(new Date).toString();i=((a=t.split("(")[1])!=null?a.slice(0,-1):0)||t.split(" ");if(i instanceof Array){s=[];for(var n=0,r=i.length;n<r;n++){o=i[n];if((e=(a=o.match(/\b[A-Z]+\b/))!==null)?a[0]:0){s.push(e)}}i=s.pop()}return i}function n(){return new Date(Date.UTC.apply(Date,arguments))}var r=function(n,r){var s=this;this.element=e(n);this.container=r.container||"body";this.language=r.language||this.element.data("date-language")||"en";this.language=this.language in a?this.language:this.language.split("-")[0];this.language=this.language in a?this.language:"en";this.isRTL=a[this.language].rtl||false;this.formatType=r.formatType||this.element.data("format-type")||"standard";this.format=o.parseFormat(r.format||this.element.data("date-format")||a[this.language].format||o.getDefaultFormat(this.formatType,"input"),this.formatType);this.isInline=false;this.isVisible=false;this.isInput=this.element.is("input");this.fontAwesome=r.fontAwesome||this.element.data("font-awesome")||false;this.bootcssVer=r.bootcssVer||(this.isInput?this.element.is(".form-control")?3:2:this.bootcssVer=this.element.is(".input-group")?3:2);this.component=this.element.is(".date")?this.bootcssVer===3?this.element.find(".input-group-addon .glyphicon-th, .input-group-addon .glyphicon-time, .input-group-addon .glyphicon-remove, .input-group-addon .glyphicon-calendar, .input-group-addon .fa-calendar, .input-group-addon .fa-clock-o").parent():this.element.find(".add-on .icon-th, .add-on .icon-time, .add-on .icon-calendar, .add-on .fa-calendar, .add-on .fa-clock-o").parent():false;this.componentReset=this.element.is(".date")?this.bootcssVer===3?this.element.find(".input-group-addon .glyphicon-remove, .input-group-addon .fa-times").parent():this.element.find(".add-on .icon-remove, .add-on .fa-times").parent():false;this.hasInput=this.component&&this.element.find("input").length;if(this.component&&this.component.length===0){this.component=false}this.linkField=r.linkField||this.element.data("link-field")||false;this.linkFormat=o.parseFormat(r.linkFormat||this.element.data("link-format")||o.getDefaultFormat(this.formatType,"link"),this.formatType);this.minuteStep=r.minuteStep||this.element.data("minute-step")||5;this.pickerPosition=r.pickerPosition||this.element.data("picker-position")||"bottom-right";this.showMeridian=r.showMeridian||this.element.data("show-meridian")||false;this.initialDate=r.initialDate||new Date;this.zIndex=r.zIndex||this.element.data("z-index")||t;this.title=typeof r.title==="undefined"?false:r.title;this.timezone=r.timezone||i();this.icons={leftArrow:this.fontAwesome?"fa-arrow-left":this.bootcssVer===3?"glyphicon-arrow-left":"icon-arrow-left",rightArrow:this.fontAwesome?"fa-arrow-right":this.bootcssVer===3?"glyphicon-arrow-right":"icon-arrow-right"};this.icontype=this.fontAwesome?"fa":"glyphicon";this._attachEvents();this.clickedOutside=function(t){if(e(t.target).closest(".datetimepicker").length===0){s.hide()}};this.formatViewType="datetime";if("formatViewType"in r){this.formatViewType=r.formatViewType}else if("formatViewType"in this.element.data()){this.formatViewType=this.element.data("formatViewType")}this.minView=0;if("minView"in r){this.minView=r.minView}else if("minView"in this.element.data()){this.minView=this.element.data("min-view")}this.minView=o.convertViewMode(this.minView);this.maxView=o.modes.length-1;if("maxView"in r){this.maxView=r.maxView}else if("maxView"in this.element.data()){this.maxView=this.element.data("max-view")}this.maxView=o.convertViewMode(this.maxView);this.wheelViewModeNavigation=false;if("wheelViewModeNavigation"in r){this.wheelViewModeNavigation=r.wheelViewModeNavigation}else if("wheelViewModeNavigation"in this.element.data()){this.wheelViewModeNavigation=this.element.data("view-mode-wheel-navigation")}this.wheelViewModeNavigationInverseDirection=false;if("wheelViewModeNavigationInverseDirection"in r){this.wheelViewModeNavigationInverseDirection=r.wheelViewModeNavigationInverseDirection}else if("wheelViewModeNavigationInverseDirection"in this.element.data()){this.wheelViewModeNavigationInverseDirection=this.element.data("view-mode-wheel-navigation-inverse-dir")}this.wheelViewModeNavigationDelay=100;if("wheelViewModeNavigationDelay"in r){this.wheelViewModeNavigationDelay=r.wheelViewModeNavigationDelay}else if("wheelViewModeNavigationDelay"in this.element.data()){this.wheelViewModeNavigationDelay=this.element.data("view-mode-wheel-navigation-delay")}this.startViewMode=2;if("startView"in r){this.startViewMode=r.startView}else if("startView"in this.element.data()){this.startViewMode=this.element.data("start-view")}this.startViewMode=o.convertViewMode(this.startViewMode);this.viewMode=this.startViewMode;this.viewSelect=this.minView;if("viewSelect"in r){this.viewSelect=r.viewSelect}else if("viewSelect"in this.element.data()){this.viewSelect=this.element.data("view-select")}this.viewSelect=o.convertViewMode(this.viewSelect);this.forceParse=true;if("forceParse"in r){this.forceParse=r.forceParse}else if("dateForceParse"in this.element.data()){this.forceParse=this.element.data("date-force-parse")}var l=this.bootcssVer===3?o.templateV3:o.template;while(l.indexOf("{iconType}")!==-1){l=l.replace("{iconType}",this.icontype)}while(l.indexOf("{leftArrow}")!==-1){l=l.replace("{leftArrow}",this.icons.leftArrow)}while(l.indexOf("{rightArrow}")!==-1){l=l.replace("{rightArrow}",this.icons.rightArrow)}this.picker=e(l).appendTo(this.isInline?this.element:this.container).on({click:e.proxy(this.click,this),mousedown:e.proxy(this.mousedown,this)});if(this.wheelViewModeNavigation){if(e.fn.mousewheel){this.picker.on({mousewheel:e.proxy(this.mousewheel,this)})}else{console.log("Mouse Wheel event is not supported. Please include the jQuery Mouse Wheel plugin before enabling this option")}}if(this.isInline){this.picker.addClass("datetimepicker-inline")}else{this.picker.addClass("datetimepicker-dropdown-"+this.pickerPosition+" dropdown-menu")}if(this.isRTL){this.picker.addClass("datetimepicker-rtl");var u=this.bootcssVer===3?".prev span, .next span":".prev i, .next i";this.picker.find(u).toggleClass(this.icons.leftArrow+" "+this.icons.rightArrow)}e(document).on("mousedown touchend",this.clickedOutside);this.autoclose=false;if("autoclose"in r){this.autoclose=r.autoclose}else if("dateAutoclose"in this.element.data()){this.autoclose=this.element.data("date-autoclose")}this.keyboardNavigation=true;if("keyboardNavigation"in r){this.keyboardNavigation=r.keyboardNavigation}else if("dateKeyboardNavigation"in this.element.data()){this.keyboardNavigation=this.element.data("date-keyboard-navigation")}this.todayBtn=r.todayBtn||this.element.data("date-today-btn")||false;this.clearBtn=r.clearBtn||this.element.data("date-clear-btn")||false;this.todayHighlight=r.todayHighlight||this.element.data("date-today-highlight")||false;this.weekStart=0;if(typeof r.weekStart!=="undefined"){this.weekStart=r.weekStart}else if(typeof this.element.data("date-weekstart")!=="undefined"){this.weekStart=this.element.data("date-weekstart")}else if(typeof a[this.language].weekStart!=="undefined"){this.weekStart=a[this.language].weekStart}this.weekStart=this.weekStart%7;this.weekEnd=(this.weekStart+6)%7;this.onRenderDay=function(e){var t=(r.onRenderDay||function(){return[]})(e);if(typeof t==="string"){t=[t]}var i=["day"];return i.concat(t?t:[])};this.onRenderHour=function(e){var t=(r.onRenderHour||function(){return[]})(e);var i=["hour"];if(typeof t==="string"){t=[t]}return i.concat(t?t:[])};this.onRenderMinute=function(e){var t=(r.onRenderMinute||function(){return[]})(e);var i=["minute"];if(typeof t==="string"){t=[t]}if(e<this.startDate||e>this.endDate){i.push("disabled")}else if(Math.floor(this.date.getUTCMinutes()/this.minuteStep)===Math.floor(e.getUTCMinutes()/this.minuteStep)){i.push("active")}return i.concat(t?t:[])};this.onRenderYear=function(e){var t=(r.onRenderYear||function(){return[]})(e);var i=["year"];if(typeof t==="string"){t=[t]}if(this.date.getUTCFullYear()===e.getUTCFullYear()){i.push("active")}var n=e.getUTCFullYear();var s=this.endDate.getUTCFullYear();if(e<this.startDate||n>s){i.push("disabled")}return i.concat(t?t:[])};this.onRenderMonth=function(e){var t=(r.onRenderMonth||function(){return[]})(e);var i=["month"];if(typeof t==="string"){t=[t]}return i.concat(t?t:[])};this.startDate=new Date(-8639968443048e3);this.endDate=new Date(8639968443048e3);this.datesDisabled=[];this.daysOfWeekDisabled=[];this.setStartDate(r.startDate||this.element.data("date-startdate"));this.setEndDate(r.endDate||this.element.data("date-enddate"));this.setDatesDisabled(r.datesDisabled||this.element.data("date-dates-disabled"));this.setDaysOfWeekDisabled(r.daysOfWeekDisabled||this.element.data("date-days-of-week-disabled"));this.setMinutesDisabled(r.minutesDisabled||this.element.data("date-minute-disabled"));this.setHoursDisabled(r.hoursDisabled||this.element.data("date-hour-disabled"));this.fillDow();this.fillMonths();this.update();this.showMode();if(this.isInline){this.show()}};r.prototype={constructor:r,_events:[],_attachEvents:function(){this._detachEvents();if(this.isInput){this._events=[[this.element,{focus:e.proxy(this.show,this),keyup:e.proxy(this.update,this),keydown:e.proxy(this.keydown,this)}]]}else if(this.component&&this.hasInput){this._events=[[this.element.find("input"),{focus:e.proxy(this.show,this),keyup:e.proxy(this.update,this),keydown:e.proxy(this.keydown,this)}],[this.component,{click:e.proxy(this.show,this)}]];if(this.componentReset){this._events.push([this.componentReset,{click:e.proxy(this.reset,this)}])}}else if(this.element.is("div")){this.isInline=true}else{this._events=[[this.element,{click:e.proxy(this.show,this)}]]}for(var t=0,i,n;t<this._events.length;t++){i=this._events[t][0];n=this._events[t][1];i.on(n)}},_detachEvents:function(){for(var e=0,t,i;e<this._events.length;e++){t=this._events[e][0];i=this._events[e][1];t.off(i)}this._events=[]},show:function(t){this.picker.show();this.height=this.component?this.component.outerHeight():this.element.outerHeight();if(this.forceParse){this.update()}this.place();e(window).on("resize",e.proxy(this.place,this));if(t){t.stopPropagation();t.preventDefault()}this.isVisible=true;this.element.trigger({type:"show",date:this.date})},hide:function(){if(!this.isVisible)return;if(this.isInline)return;this.picker.hide();e(window).off("resize",this.place);this.viewMode=this.startViewMode;this.showMode();if(!this.isInput){e(document).off("mousedown",this.hide)}if(this.forceParse&&(this.isInput&&this.element.val()||this.hasInput&&this.element.find("input").val()))this.setValue();this.isVisible=false;this.element.trigger({type:"hide",date:this.date})},remove:function(){this._detachEvents();e(document).off("mousedown",this.clickedOutside);this.picker.remove();delete this.picker;delete this.element.data().datetimepicker},getDate:function(){var e=this.getUTCDate();if(e===null){return null}return new Date(e.getTime()+e.getTimezoneOffset()*6e4)},getUTCDate:function(){return this.date},getInitialDate:function(){return this.initialDate},setInitialDate:function(e){this.initialDate=e},setDate:function(e){this.setUTCDate(new Date(e.getTime()-e.getTimezoneOffset()*6e4))},setUTCDate:function(e){if(e>=this.startDate&&e<=this.endDate){this.date=e;this.setValue();this.viewDate=this.date;this.fill()}else{this.element.trigger({type:"outOfRange",date:e,startDate:this.startDate,endDate:this.endDate})}},setFormat:function(e){this.format=o.parseFormat(e,this.formatType);var t;if(this.isInput){t=this.element}else if(this.component){t=this.element.find("input")}if(t&&t.val()){this.setValue()}},setValue:function(){var t=this.getFormattedDate();if(!this.isInput){if(this.component){this.element.find("input").val(t)}this.element.data("date",t)}else{this.element.val(t)}if(this.linkField){e("#"+this.linkField).val(this.getFormattedDate(this.linkFormat))}},getFormattedDate:function(e){e=e||this.format;return o.formatDate(this.date,e,this.language,this.formatType,this.timezone)},setStartDate:function(e){this.startDate=e||this.startDate;if(this.startDate.valueOf()!==8639968443048e3){this.startDate=o.parseDate(this.startDate,this.format,this.language,this.formatType,this.timezone)}this.update();this.updateNavArrows()},setEndDate:function(e){this.endDate=e||this.endDate;if(this.endDate.valueOf()!==8639968443048e3){this.endDate=o.parseDate(this.endDate,this.format,this.language,this.formatType,this.timezone)}this.update();this.updateNavArrows()},setDatesDisabled:function(t){this.datesDisabled=t||[];if(!e.isArray(this.datesDisabled)){this.datesDisabled=this.datesDisabled.split(/,\s*/)}var i=this;this.datesDisabled=e.map(this.datesDisabled,function(e){return o.parseDate(e,i.format,i.language,i.formatType,i.timezone).toDateString()});this.update();this.updateNavArrows()},setTitle:function(e,t){return this.picker.find(e).find("th:eq(1)").text(this.title===false?t:this.title)},setDaysOfWeekDisabled:function(t){this.daysOfWeekDisabled=t||[];if(!e.isArray(this.daysOfWeekDisabled)){this.daysOfWeekDisabled=this.daysOfWeekDisabled.split(/,\s*/)}this.daysOfWeekDisabled=e.map(this.daysOfWeekDisabled,function(e){return parseInt(e,10)});this.update();this.updateNavArrows()},setMinutesDisabled:function(t){this.minutesDisabled=t||[];if(!e.isArray(this.minutesDisabled)){this.minutesDisabled=this.minutesDisabled.split(/,\s*/)}this.minutesDisabled=e.map(this.minutesDisabled,function(e){return parseInt(e,10)});this.update();this.updateNavArrows()},setHoursDisabled:function(t){this.hoursDisabled=t||[];if(!e.isArray(this.hoursDisabled)){this.hoursDisabled=this.hoursDisabled.split(/,\s*/)}this.hoursDisabled=e.map(this.hoursDisabled,function(e){return parseInt(e,10)});this.update();this.updateNavArrows()},place:function(){if(this.isInline)return;if(!this.zIndex){var t=0;e("div").each(function(){var i=parseInt(e(this).css("zIndex"),10);if(i>t){t=i}});this.zIndex=t+10}var i,n,r,s;if(this.container instanceof e){s=this.container.offset()}else{s=e(this.container).offset()}if(this.component){i=this.component.offset();r=i.left;if(this.pickerPosition==="bottom-left"||this.pickerPosition==="top-left"){r+=this.component.outerWidth()-this.picker.outerWidth()}}else{i=this.element.offset();r=i.left;if(this.pickerPosition==="bottom-left"||this.pickerPosition==="top-left"){r+=this.element.outerWidth()-this.picker.outerWidth()}}var a=document.body.clientWidth||window.innerWidth;if(r+220>a){r=a-220}if(this.pickerPosition==="top-left"||this.pickerPosition==="top-right"){n=i.top-this.picker.outerHeight()}else{n=i.top+this.height}n=n-s.top;r=r-s.left;this.picker.css({top:n,left:r,zIndex:this.zIndex})},hour_minute:"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]",update:function(){var e,t=false;if(arguments&&arguments.length&&(typeof arguments[0]==="string"||arguments[0]instanceof Date)){e=arguments[0];t=true}else{e=(this.isInput?this.element.val():this.element.find("input").val())||this.element.data("date")||this.initialDate;if(typeof e==="string"){e=e.replace(/^\s+|\s+$/g,"")}}if(!e){e=new Date;t=false}if(typeof e==="string"){if(new RegExp(this.hour_minute).test(e)||new RegExp(this.hour_minute+":[0-5][0-9]").test(e)){e=this.getDate()}}this.date=o.parseDate(e,this.format,this.language,this.formatType,this.timezone);if(t)this.setValue();if(this.date<this.startDate){this.viewDate=new Date(this.startDate)}else if(this.date>this.endDate){this.viewDate=new Date(this.endDate)}else{this.viewDate=new Date(this.date)}this.fill()},fillDow:function(){var e=this.weekStart,t="<tr>";while(e<this.weekStart+7){t+='<th class="dow">'+a[this.language].daysMin[e++%7]+"</th>"}t+="</tr>";this.picker.find(".datetimepicker-days thead").append(t)},fillMonths:function(){var e="";var t=new Date(this.viewDate);for(var i=0;i<12;i++){t.setUTCMonth(i);var n=this.onRenderMonth(t);e+='<span class="'+n.join(" ")+'">'+a[this.language].monthsShort[i]+"</span>"}this.picker.find(".datetimepicker-months td").html(e)},fill:function(){if(!this.date||!this.viewDate){return}var t=new Date(this.viewDate),i=t.getUTCFullYear(),r=t.getUTCMonth(),l=t.getUTCDate(),u=t.getUTCHours(),f=this.startDate.getUTCFullYear(),c=this.startDate.getUTCMonth(),d=this.endDate.getUTCFullYear(),h=this.endDate.getUTCMonth()+1,p=new n(this.date.getUTCFullYear(),this.date.getUTCMonth(),this.date.getUTCDate()).valueOf(),m=new Date;this.setTitle(".datetimepicker-days",a[this.language].months[r]+" "+i);if(this.formatViewType==="time"){var g=this.getFormattedDate();this.setTitle(".datetimepicker-hours",g);this.setTitle(".datetimepicker-minutes",g)}else{this.setTitle(".datetimepicker-hours",l+" "+a[this.language].months[r]+" "+i);this.setTitle(".datetimepicker-minutes",l+" "+a[this.language].months[r]+" "+i)}this.picker.find("tfoot th.today").text(a[this.language].today||a["en"].today).toggle(this.todayBtn!==false);this.picker.find("tfoot th.clear").text(a[this.language].clear||a["en"].clear).toggle(this.clearBtn!==false);this.updateNavArrows();this.fillMonths();var v=n(i,r-1,28,0,0,0,0),y=o.getDaysInMonth(v.getUTCFullYear(),v.getUTCMonth());v.setUTCDate(y);v.setUTCDate(y-(v.getUTCDay()-this.weekStart+7)%7);var b=new Date(v);b.setUTCDate(b.getUTCDate()+42);b=b.valueOf();var w=[];var x;while(v.valueOf()<b){if(v.getUTCDay()===this.weekStart){w.push("<tr>")}x=this.onRenderDay(v);if(v.getUTCFullYear()<i||v.getUTCFullYear()===i&&v.getUTCMonth()<r){x.push("old")}else if(v.getUTCFullYear()>i||v.getUTCFullYear()===i&&v.getUTCMonth()>r){x.push("new")}if(this.todayHighlight&&v.getUTCFullYear()===m.getFullYear()&&v.getUTCMonth()===m.getMonth()&&v.getUTCDate()===m.getDate()){x.push("today")}if(v.valueOf()===p){x.push("active")}if(v.valueOf()+864e5<=this.startDate||v.valueOf()>this.endDate||e.inArray(v.getUTCDay(),this.daysOfWeekDisabled)!==-1||e.inArray(v.toDateString(),this.datesDisabled)!==-1){x.push("disabled")}w.push('<td class="'+x.join(" ")+'">'+v.getUTCDate()+"</td>");if(v.getUTCDay()===this.weekEnd){w.push("</tr>")}v.setUTCDate(v.getUTCDate()+1)}this.picker.find(".datetimepicker-days tbody").empty().append(w.join(""));w=[];var C="",T="",_="";var k=this.hoursDisabled||[];t=new Date(this.viewDate);for(var D=0;D<24;D++){t.setUTCHours(D);x=this.onRenderHour(t);if(k.indexOf(D)!==-1){x.push("disabled")}var S=n(i,r,l,D);if(S.valueOf()+36e5<=this.startDate||S.valueOf()>this.endDate){x.push("disabled")}else if(u===D){x.push("active")}if(this.showMeridian&&a[this.language].meridiem.length===2){T=D<12?a[this.language].meridiem[0]:a[this.language].meridiem[1];if(T!==_){if(_!==""){w.push("</fieldset>")}w.push('<fieldset class="hour"><legend>'+T.toUpperCase()+"</legend>")}_=T;C=D%12?D%12:12;if(D<12){x.push("hour_am")}else{x.push("hour_pm")}w.push('<span class="'+x.join(" ")+'">'+C+"</span>");if(D===23){w.push("</fieldset>")}}else{C=D+":00";w.push('<span class="'+x.join(" ")+'">'+C+"</span>")}}this.picker.find(".datetimepicker-hours td").html(w.join(""));w=[];C="";T="";_="";var $=this.minutesDisabled||[];t=new Date(this.viewDate);for(var D=0;D<60;D+=this.minuteStep){if($.indexOf(D)!==-1)continue;t.setUTCMinutes(D);t.setUTCSeconds(0);x=this.onRenderMinute(t);if(this.showMeridian&&a[this.language].meridiem.length===2){T=u<12?a[this.language].meridiem[0]:a[this.language].meridiem[1];if(T!==_){if(_!==""){w.push("</fieldset>")}w.push('<fieldset class="minute"><legend>'+T.toUpperCase()+"</legend>")}_=T;C=u%12?u%12:12;w.push('<span class="'+x.join(" ")+'">'+C+":"+(D<10?"0"+D:D)+"</span>");if(D===59){w.push("</fieldset>")}}else{C=D+":00";w.push('<span class="'+x.join(" ")+'">'+u+":"+(D<10?"0"+D:D)+"</span>")}}this.picker.find(".datetimepicker-minutes td").html(w.join(""));var A=this.date.getUTCFullYear();var E=this.setTitle(".datetimepicker-months",i).end().find(".month").removeClass("active");if(A===i){E.eq(this.date.getUTCMonth()).addClass("active")}if(i<f||i>d){E.addClass("disabled")}if(i===f){E.slice(0,c).addClass("disabled")}if(i===d){E.slice(h).addClass("disabled")}w="";i=parseInt(i/10,10)*10;var M=this.setTitle(".datetimepicker-years",i+"-"+(i+9)).end().find("td");i-=1;t=new Date(this.viewDate);for(var D=-1;D<11;D++){t.setUTCFullYear(i);x=this.onRenderYear(t);if(D===-1||D===10){x.push(s)}w+='<span class="'+x.join(" ")+'">'+i+"</span>";i+=1}M.html(w);this.place()},updateNavArrows:function(){var e=new Date(this.viewDate),t=e.getUTCFullYear(),i=e.getUTCMonth(),n=e.getUTCDate(),r=e.getUTCHours();switch(this.viewMode){case 0:if(t<=this.startDate.getUTCFullYear()&&i<=this.startDate.getUTCMonth()&&n<=this.startDate.getUTCDate()&&r<=this.startDate.getUTCHours()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(t>=this.endDate.getUTCFullYear()&&i>=this.endDate.getUTCMonth()&&n>=this.endDate.getUTCDate()&&r>=this.endDate.getUTCHours()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break;case 1:if(t<=this.startDate.getUTCFullYear()&&i<=this.startDate.getUTCMonth()&&n<=this.startDate.getUTCDate()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(t>=this.endDate.getUTCFullYear()&&i>=this.endDate.getUTCMonth()&&n>=this.endDate.getUTCDate()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break;case 2:if(t<=this.startDate.getUTCFullYear()&&i<=this.startDate.getUTCMonth()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(t>=this.endDate.getUTCFullYear()&&i>=this.endDate.getUTCMonth()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break;case 3:case 4:if(t<=this.startDate.getUTCFullYear()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(t>=this.endDate.getUTCFullYear()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break}},mousewheel:function(t){t.preventDefault();t.stopPropagation();if(this.wheelPause){return}this.wheelPause=true;var i=t.originalEvent;var n=i.wheelDelta;var r=n>0?1:n===0?0:-1;if(this.wheelViewModeNavigationInverseDirection){r=-r}this.showMode(r);setTimeout(e.proxy(function(){this.wheelPause=false},this),this.wheelViewModeNavigationDelay)},click:function(t){t.stopPropagation();t.preventDefault();var i=e(t.target).closest("span, td, th, legend");if(i.is("."+this.icontype)){i=e(i).parent().closest("span, td, th, legend")}if(i.length===1){if(i.is(".disabled")){this.element.trigger({type:"outOfRange",date:this.viewDate,startDate:this.startDate,endDate:this.endDate});return}switch(i[0].nodeName.toLowerCase()){case"th":switch(i[0].className){case"switch":this.showMode(1);break;case"prev":case"next":var r=o.modes[this.viewMode].navStep*(i[0].className==="prev"?-1:1);switch(this.viewMode){case 0:this.viewDate=this.moveHour(this.viewDate,r);break;case 1:this.viewDate=this.moveDate(this.viewDate,r);break;case 2:this.viewDate=this.moveMonth(this.viewDate,r);break;case 3:case 4:this.viewDate=this.moveYear(this.viewDate,r);break}this.fill();this.element.trigger({type:i[0].className+":"+this.convertViewModeText(this.viewMode),date:this.viewDate,startDate:this.startDate,endDate:this.endDate});break;case"clear":this.reset();if(this.autoclose){this.hide()}break;case"today":var s=new Date;s=n(s.getFullYear(),s.getMonth(),s.getDate(),s.getHours(),s.getMinutes(),s.getSeconds(),0);if(s<this.startDate)s=this.startDate;else if(s>this.endDate)s=this.endDate;this.viewMode=this.startViewMode;this.showMode(0);this._setDate(s);this.fill();if(this.autoclose){this.hide()}break}break;case"span":if(!i.is(".disabled")){var a=this.viewDate.getUTCFullYear(),l=this.viewDate.getUTCMonth(),u=this.viewDate.getUTCDate(),f=this.viewDate.getUTCHours(),c=this.viewDate.getUTCMinutes(),d=this.viewDate.getUTCSeconds();if(i.is(".month")){this.viewDate.setUTCDate(1);l=i.parent().find("span").index(i);u=this.viewDate.getUTCDate();this.viewDate.setUTCMonth(l);this.element.trigger({type:"changeMonth",date:this.viewDate});if(this.viewSelect>=3){this._setDate(n(a,l,u,f,c,d,0))}}else if(i.is(".year")){this.viewDate.setUTCDate(1);a=parseInt(i.text(),10)||0;this.viewDate.setUTCFullYear(a);this.element.trigger({type:"changeYear",date:this.viewDate});if(this.viewSelect>=4){this._setDate(n(a,l,u,f,c,d,0))}}else if(i.is(".hour")){f=parseInt(i.text(),10)||0;if(i.hasClass("hour_am")||i.hasClass("hour_pm")){if(f===12&&i.hasClass("hour_am")){f=0}else if(f!==12&&i.hasClass("hour_pm")){f+=12}}this.viewDate.setUTCHours(f);this.element.trigger({type:"changeHour",date:this.viewDate});if(this.viewSelect>=1){this._setDate(n(a,l,u,f,c,d,0))}}else if(i.is(".minute")){c=parseInt(i.text().substr(i.text().indexOf(":")+1),10)||0;this.viewDate.setUTCMinutes(c);this.element.trigger({type:"changeMinute",date:this.viewDate});if(this.viewSelect>=0){this._setDate(n(a,l,u,f,c,d,0))}}if(this.viewMode!==0){var h=this.viewMode;this.showMode(-1);this.fill();if(h===this.viewMode&&this.autoclose){this.hide()}}else{this.fill();if(this.autoclose){this.hide()}}}break;case"td":if(i.is(".day")&&!i.is(".disabled")){var u=parseInt(i.text(),10)||1;var a=this.viewDate.getUTCFullYear(),l=this.viewDate.getUTCMonth(),f=this.viewDate.getUTCHours(),c=this.viewDate.getUTCMinutes(),d=this.viewDate.getUTCSeconds();if(i.is(".old")){if(l===0){l=11;a-=1}else{l-=1}}else if(i.is(".new")){if(l===11){l=0;a+=1}else{l+=1}}this.viewDate.setUTCFullYear(a);this.viewDate.setUTCMonth(l,u);this.element.trigger({type:"changeDay",date:this.viewDate});if(this.viewSelect>=2){this._setDate(n(a,l,u,f,c,d,0))}}var h=this.viewMode;this.showMode(-1);this.fill();if(h===this.viewMode&&this.autoclose){this.hide()}break}}},_setDate:function(e,t){if(!t||t==="date")this.date=e;if(!t||t==="view")this.viewDate=e;this.fill();this.setValue();var i;if(this.isInput){i=this.element}else if(this.component){i=this.element.find("input")}if(i){i.change()}this.element.trigger({type:"changeDate",date:this.getDate()});if(e===null)this.date=this.viewDate},moveMinute:function(e,t){if(!t)return e;var i=new Date(e.valueOf());i.setUTCMinutes(i.getUTCMinutes()+t*this.minuteStep);return i},moveHour:function(e,t){if(!t)return e;var i=new Date(e.valueOf());i.setUTCHours(i.getUTCHours()+t);return i},moveDate:function(e,t){if(!t)return e;var i=new Date(e.valueOf());i.setUTCDate(i.getUTCDate()+t);return i},moveMonth:function(e,t){if(!t)return e;var i=new Date(e.valueOf()),n=i.getUTCDate(),r=i.getUTCMonth(),s=Math.abs(t),a,o;t=t>0?1:-1;if(s===1){o=t===-1?function(){return i.getUTCMonth()===r}:function(){return i.getUTCMonth()!==a};a=r+t;i.setUTCMonth(a);if(a<0||a>11)a=(a+12)%12}else{for(var l=0;l<s;l++)i=this.moveMonth(i,t);a=i.getUTCMonth();i.setUTCDate(n);o=function(){return a!==i.getUTCMonth()}}while(o()){i.setUTCDate(--n);i.setUTCMonth(a)}return i},moveYear:function(e,t){return this.moveMonth(e,t*12)},dateWithinRange:function(e){return e>=this.startDate&&e<=this.endDate},keydown:function(e){if(this.picker.is(":not(:visible)")){if(e.keyCode===27)this.show();return}var t=false,i,n,r;switch(e.keyCode){case 27:this.hide();e.preventDefault();break;case 37:case 39:if(!this.keyboardNavigation)break;i=e.keyCode===37?-1:1;var s=this.viewMode;if(e.ctrlKey){s+=2}else if(e.shiftKey){s+=1}if(s===4){n=this.moveYear(this.date,i);r=this.moveYear(this.viewDate,i)}else if(s===3){n=this.moveMonth(this.date,i);r=this.moveMonth(this.viewDate,i)}else if(s===2){n=this.moveDate(this.date,i);r=this.moveDate(this.viewDate,i)}else if(s===1){n=this.moveHour(this.date,i);r=this.moveHour(this.viewDate,i)}else if(s===0){n=this.moveMinute(this.date,i);r=this.moveMinute(this.viewDate,i)}if(this.dateWithinRange(n)){this.date=n;this.viewDate=r;this.setValue();this.update();e.preventDefault();t=true}break;case 38:case 40:if(!this.keyboardNavigation)break;i=e.keyCode===38?-1:1;s=this.viewMode;if(e.ctrlKey){s+=2}else if(e.shiftKey){s+=1}if(s===4){n=this.moveYear(this.date,i);r=this.moveYear(this.viewDate,i)}else if(s===3){n=this.moveMonth(this.date,i);r=this.moveMonth(this.viewDate,i)}else if(s===2){n=this.moveDate(this.date,i*7);r=this.moveDate(this.viewDate,i*7)}else if(s===1){if(this.showMeridian){n=this.moveHour(this.date,i*6);r=this.moveHour(this.viewDate,i*6)}else{n=this.moveHour(this.date,i*4);r=this.moveHour(this.viewDate,i*4)}}else if(s===0){n=this.moveMinute(this.date,i*4);r=this.moveMinute(this.viewDate,i*4)}if(this.dateWithinRange(n)){this.date=n;this.viewDate=r;this.setValue();this.update();e.preventDefault();t=true}break;case 13:if(this.viewMode!==0){var a=this.viewMode;this.showMode(-1);this.fill();if(a===this.viewMode&&this.autoclose){this.hide()}}else{this.fill();if(this.autoclose){this.hide()}}e.preventDefault();break;case 9:this.hide();break}if(t){var o;if(this.isInput){o=this.element}else if(this.component){o=this.element.find("input")}if(o){o.change()}this.element.trigger({type:"changeDate",date:this.getDate()})}},showMode:function(e){if(e){var t=Math.max(0,Math.min(o.modes.length-1,this.viewMode+e));if(t>=this.minView&&t<=this.maxView){this.element.trigger({type:"changeMode",date:this.viewDate,oldViewMode:this.viewMode,newViewMode:t});this.viewMode=t}}this.picker.find(">div").hide().filter(".datetimepicker-"+o.modes[this.viewMode].clsName).css("display","block");this.updateNavArrows()},reset:function(){this._setDate(null,"date")},convertViewModeText:function(e){switch(e){case 4:return"decade";case 3:return"year";case 2:return"month";case 1:return"day";case 0:return"hour"}}};var s=e.fn.datetimepicker;e.fn.datetimepicker=function(i){var n=Array.apply(null,arguments);n.shift();var s;this.each(function(){var a=e(this),o=a.data("datetimepicker"),l=typeof i==="object"&&i;if(!o){a.data("datetimepicker",o=new r(this,e.extend({},e.fn.datetimepicker.defaults,l)))}if(typeof i==="string"&&typeof o[i]==="function"){s=o[i].apply(o,n);if(s!==t){return false}}});if(s!==t)return s;else return this};e.fn.datetimepicker.defaults={};e.fn.datetimepicker.Constructor=r;var a=e.fn.datetimepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sun"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa","Su"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],meridiem:["am","pm"],suffix:["st","nd","rd","th"],today:"Today",clear:"Clear"}};var o={modes:[{clsName:"minutes",navFnc:"Hours",navStep:1},{clsName:"hours",navFnc:"Date",navStep:1},{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10}],isLeapYear:function(e){return e%4===0&&e%100!==0||e%400===0},getDaysInMonth:function(e,t){return[31,o.isLeapYear(e)?29:28,31,30,31,30,31,31,30,31,30,31][t]},getDefaultFormat:function(e,t){if(e==="standard"){if(t==="input")return"yyyy-mm-dd hh:ii";else return"yyyy-mm-dd hh:ii:ss"}else if(e==="php"){if(t==="input")return"Y-m-d H:i";else return"Y-m-d H:i:s"}else{throw new Error("Invalid format type.")}},validParts:function(e){if(e==="standard"){return/t|hh?|HH?|p|P|z|Z|ii?|ss?|dd?|DD?|mm?|MM?|yy(?:yy)?/g}else if(e==="php"){return/[dDjlNwzFmMnStyYaABgGhHis]/g}else{throw new Error("Invalid format type.")}},nonpunctuation:/[^ -\/:-@\[-`{-~\t\n\rTZ]+/g,parseFormat:function(e,t){var i=e.replace(this.validParts(t),"\0").split("\0"),n=e.match(this.validParts(t));if(!i||!i.length||!n||n.length===0){throw new Error("Invalid date format.")}return{separators:i,parts:n}},parseDate:function(t,i,s,o,l){if(t instanceof Date){var u=new Date(t.valueOf()-t.getTimezoneOffset()*6e4);u.setMilliseconds(0);return u}if(/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(t)){i=this.parseFormat("yyyy-mm-dd",o)}if(/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(t)){i=this.parseFormat("yyyy-mm-dd hh:ii",o)}if(/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(t)){i=this.parseFormat("yyyy-mm-dd hh:ii:ss",o)}if(/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(t)){var f=/([-+]\d+)([dmwy])/,c=t.match(/([-+]\d+)([dmwy])/g),d,h;t=new Date;for(var p=0;p<c.length;p++){d=f.exec(c[p]);h=parseInt(d[1]);switch(d[2]){case"d":t.setUTCDate(t.getUTCDate()+h);break;case"m":t=r.prototype.moveMonth.call(r.prototype,t,h);break;case"w":t.setUTCDate(t.getUTCDate()+h*7);break;case"y":t=r.prototype.moveYear.call(r.prototype,t,h);break}}return n(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),0)}var c=t&&t.toString().match(this.nonpunctuation)||[],t=new Date(0,0,0,0,0,0,0),m={},g=["hh","h","ii","i","ss","s","yyyy","yy","M","MM","m","mm","D","DD","d","dd","H","HH","p","P","z","Z"],v={hh:function(e,t){return e.setUTCHours(t)},h:function(e,t){return e.setUTCHours(t)},HH:function(e,t){return e.setUTCHours(t===12?0:t)},H:function(e,t){return e.setUTCHours(t===12?0:t)},ii:function(e,t){return e.setUTCMinutes(t)},i:function(e,t){return e.setUTCMinutes(t)},ss:function(e,t){return e.setUTCSeconds(t)},s:function(e,t){return e.setUTCSeconds(t)},yyyy:function(e,t){return e.setUTCFullYear(t)},yy:function(e,t){return e.setUTCFullYear(2e3+t)},m:function(e,t){t-=1;while(t<0)t+=12;t%=12;e.setUTCMonth(t);while(e.getUTCMonth()!==t)if(isNaN(e.getUTCMonth()))return e;else e.setUTCDate(e.getUTCDate()-1);return e},d:function(e,t){return e.setUTCDate(t)},p:function(e,t){return e.setUTCHours(t===1?e.getUTCHours()+12:e.getUTCHours())},z:function(){return l}},y,b,d;v["M"]=v["MM"]=v["mm"]=v["m"];v["dd"]=v["d"];v["P"]=v["p"];v["Z"]=v["z"];t=n(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds());if(c.length===i.parts.length){for(var p=0,w=i.parts.length;p<w;p++){y=parseInt(c[p],10);d=i.parts[p];if(isNaN(y)){switch(d){case"MM":b=e(a[s].months).filter(function(){var e=this.slice(0,c[p].length),t=c[p].slice(0,e.length);return e===t});y=e.inArray(b[0],a[s].months)+1;break;case"M":b=e(a[s].monthsShort).filter(function(){var e=this.slice(0,c[p].length),t=c[p].slice(0,e.length);return e.toLowerCase()===t.toLowerCase()});y=e.inArray(b[0],a[s].monthsShort)+1;break;case"p":case"P":y=e.inArray(c[p].toLowerCase(),a[s].meridiem);break;case"z":case"Z":l;break}}m[d]=y}for(var p=0,x;p<g.length;p++){x=g[p];if(x in m&&!isNaN(m[x]))v[x](t,m[x])}}return t},formatDate:function(t,i,n,r,s){if(t===null){return""}var l;if(r==="standard"){l={t:t.getTime(),yy:t.getUTCFullYear().toString().substring(2),yyyy:t.getUTCFullYear(),m:t.getUTCMonth()+1,M:a[n].monthsShort[t.getUTCMonth()],MM:a[n].months[t.getUTCMonth()],d:t.getUTCDate(),D:a[n].daysShort[t.getUTCDay()],DD:a[n].days[t.getUTCDay()],p:a[n].meridiem.length===2?a[n].meridiem[t.getUTCHours()<12?0:1]:"",h:t.getUTCHours(),i:t.getUTCMinutes(),s:t.getUTCSeconds(),z:s};if(a[n].meridiem.length===2){l.H=l.h%12===0?12:l.h%12}else{l.H=l.h}l.HH=(l.H<10?"0":"")+l.H;l.P=l.p.toUpperCase();l.Z=l.z;l.hh=(l.h<10?"0":"")+l.h;l.ii=(l.i<10?"0":"")+l.i;l.ss=(l.s<10?"0":"")+l.s;l.dd=(l.d<10?"0":"")+l.d;l.mm=(l.m<10?"0":"")+l.m}else if(r==="php"){l={y:t.getUTCFullYear().toString().substring(2),Y:t.getUTCFullYear(),F:a[n].months[t.getUTCMonth()],M:a[n].monthsShort[t.getUTCMonth()],n:t.getUTCMonth()+1,t:o.getDaysInMonth(t.getUTCFullYear(),t.getUTCMonth()),j:t.getUTCDate(),l:a[n].days[t.getUTCDay()],D:a[n].daysShort[t.getUTCDay()],w:t.getUTCDay(),N:t.getUTCDay()===0?7:t.getUTCDay(),S:t.getUTCDate()%10<=a[n].suffix.length?a[n].suffix[t.getUTCDate()%10-1]:"",a:a[n].meridiem.length===2?a[n].meridiem[t.getUTCHours()<12?0:1]:"",g:t.getUTCHours()%12===0?12:t.getUTCHours()%12,G:t.getUTCHours(),i:t.getUTCMinutes(),s:t.getUTCSeconds()};l.m=(l.n<10?"0":"")+l.n;l.d=(l.j<10?"0":"")+l.j;l.A=l.a.toString().toUpperCase();l.h=(l.g<10?"0":"")+l.g;l.H=(l.G<10?"0":"")+l.G;l.i=(l.i<10?"0":"")+l.i;l.s=(l.s<10?"0":"")+l.s}else{throw new Error("Invalid format type.")}var t=[],u=e.extend([],i.separators);for(var f=0,c=i.parts.length;f<c;f++){if(u.length){t.push(u.shift())}t.push(l[i.parts[f]])}if(u.length){t.push(u.shift())}return t.join("")},convertViewMode:function(e){switch(e){case 4:case"decade":e=4;break;case 3:case"year":e=3;break;case 2:case"month":e=2;break;case 1:case"day":e=1;break;case 0:case"hour":e=0;break}return e},headTemplate:"<thead>"+"<tr>"+'<th class="prev"><i class="{iconType} {leftArrow}"/></th>'+'<th colspan="5" class="switch"></th>'+'<th class="next"><i class="{iconType} {rightArrow}"/></th>'+"</tr>"+"</thead>",headTemplateV3:"<thead>"+"<tr>"+'<th class="prev"><span class="{iconType} {leftArrow}"></span> </th>'+'<th colspan="5" class="switch"></th>'+'<th class="next"><span class="{iconType} {rightArrow}"></span> </th>'+"</tr>"+"</thead>",contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:"<tfoot>"+'<tr><th colspan="7" class="today"></th></tr>'+'<tr><th colspan="7" class="clear"></th></tr>'+"</tfoot>"};o.template='<div class="datetimepicker">'+'<div class="datetimepicker-minutes">'+'<table class=" table-condensed">'+o.headTemplate+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-hours">'+'<table class=" table-condensed">'+o.headTemplate+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-days">'+'<table class=" table-condensed">'+o.headTemplate+"<tbody></tbody>"+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-months">'+'<table class="table-condensed">'+o.headTemplate+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-years">'+'<table class="table-condensed">'+o.headTemplate+o.contTemplate+o.footTemplate+"</table>"+"</div>"+"</div>";o.templateV3='<div class="datetimepicker">'+'<div class="datetimepicker-minutes">'+'<table class=" table-condensed">'+o.headTemplateV3+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-hours">'+'<table class=" table-condensed">'+o.headTemplateV3+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-days">'+'<table class=" table-condensed">'+o.headTemplateV3+"<tbody></tbody>"+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-months">'+'<table class="table-condensed">'+o.headTemplateV3+o.contTemplate+o.footTemplate+"</table>"+"</div>"+'<div class="datetimepicker-years">'+'<table class="table-condensed">'+o.headTemplateV3+o.contTemplate+o.footTemplate+"</table>"+"</div>"+"</div>";e.fn.datetimepicker.DPGlobal=o;e.fn.datetimepicker.noConflict=function(){e.fn.datetimepicker=s;return this};e(document).on("focus.datetimepicker.data-api click.datetimepicker.data-api",'[data-provide="datetimepicker"]',function(t){var i=e(this);if(i.data("datetimepicker"))return;t.preventDefault();i.datetimepicker("show")});e(function(){e('[data-provide="datetimepicker-inline"]').datetimepicker()})});(function(e){"use strict";var t=function(t,i){this.options=e.extend({},e.fn.editableform.defaults,i);this.$div=e(t);if(!this.options.scope){this.options.scope=this}};t.prototype={constructor:t,initInput:function(){this.input=this.options.input;this.value=this.input.str2value(this.options.value);this.input.prerender()},initTemplate:function(){this.$form=e(e.fn.editableform.template)},initButtons:function(){var t=this.$form.find(".editable-buttons");t.append(e.fn.editableform.buttons);if(this.options.showbuttons==="bottom"){t.addClass("editable-buttons-bottom")}},render:function(){this.$loading=e(e.fn.editableform.loading);this.$div.empty().append(this.$loading);this.initTemplate();if(this.options.showbuttons){this.initButtons()}else{this.$form.find(".editable-buttons").remove()}this.showLoading();this.isSaving=false;this.$div.triggerHandler("rendering");this.initInput();this.$form.find("div.editable-input").append(this.input.$tpl);this.$div.append(this.$form);e.when(this.input.render()).then(e.proxy(function(){if(!this.options.showbuttons){this.input.autosubmit()}this.$form.find(".editable-cancel").click(e.proxy(this.cancel,this));if(this.input.error){this.error(this.input.error);this.$form.find(".editable-submit").attr("disabled",true);this.input.$input.attr("disabled",true);this.$form.submit(function(e){e.preventDefault()})}else{this.error(false);this.input.$input.removeAttr("disabled");this.$form.find(".editable-submit").removeAttr("disabled");var t=this.value===null||this.value===undefined||this.value===""?this.options.defaultValue:this.value;this.input.value2input(t);this.$form.submit(e.proxy(this.submit,this))}this.$div.triggerHandler("rendered");this.showForm();if(this.input.postrender){this.input.postrender()}},this))},cancel:function(){this.$div.triggerHandler("cancel")},showLoading:function(){var e,t;if(this.$form){e=this.$form.outerWidth();t=this.$form.outerHeight();if(e){this.$loading.width(e)}if(t){this.$loading.height(t)}this.$form.hide()}else{e=this.$loading.parent().width();if(e){this.$loading.width(e)}}this.$loading.show()},showForm:function(e){this.$loading.hide();this.$form.show();if(e!==false){this.input.activate()}this.$div.triggerHandler("show")},error:function(t){var i=this.$form.find(".control-group"),n=this.$form.find(".editable-error-block"),r;if(t===false){i.removeClass(e.fn.editableform.errorGroupClass);n.removeClass(e.fn.editableform.errorBlockClass).empty().hide()}else{if(t){r=(""+t).split("\n");for(var s=0;s<r.length;s++){r[s]=e("<div>").text(r[s]).html()}t=r.join("<br>")}i.addClass(e.fn.editableform.errorGroupClass);n.addClass(e.fn.editableform.errorBlockClass).html(t).show()}},submit:function(t){t.stopPropagation();t.preventDefault();var i=this.input.input2value();var n=this.validate(i);if(e.type(n)==="object"&&n.newValue!==undefined){i=n.newValue;this.input.value2input(i);if(typeof n.msg==="string"){this.error(n.msg);this.showForm();return}}else if(n){this.error(n);this.showForm();return}if(!this.options.savenochange&&this.input.value2str(i)==this.input.value2str(this.value)){this.$div.triggerHandler("nochange");return}var r=this.input.value2submit(i);this.isSaving=true;e.when(this.save(r)).done(e.proxy(function(e){this.isSaving=false;var t=typeof this.options.success==="function"?this.options.success.call(this.options.scope,e,i):null;if(t===false){this.error(false);this.showForm(false);return}if(typeof t==="string"){this.error(t);this.showForm();return}if(t&&typeof t==="object"&&t.hasOwnProperty("newValue")){i=t.newValue}this.error(false);this.value=i;this.$div.triggerHandler("save",{newValue:i,submitValue:r,response:e})},this)).fail(e.proxy(function(e){this.isSaving=false;var t;if(typeof this.options.error==="function"){t=this.options.error.call(this.options.scope,e,i)}else{t=typeof e==="string"?e:e.responseText||e.statusText||"Unknown error!"}this.error(t);this.showForm()},this))},save:function(t){this.options.pk=e.fn.editableutils.tryParseJson(this.options.pk,true);var i=typeof this.options.pk==="function"?this.options.pk.call(this.options.scope):this.options.pk,n=!!(typeof this.options.url==="function"||this.options.url&&(this.options.send==="always"||this.options.send==="auto"&&i!==null&&i!==undefined)),r;if(n){this.showLoading();r={name:this.options.name||"",value:t,pk:i};if(typeof this.options.params==="function"){r=this.options.params.call(this.options.scope,r)}else{this.options.params=e.fn.editableutils.tryParseJson(this.options.params,true);e.extend(r,this.options.params)}if(typeof this.options.url==="function"){return this.options.url.call(this.options.scope,r)}else{return e.ajax(e.extend({url:this.options.url,data:r,type:"POST"},this.options.ajaxOptions))}}},validate:function(e){if(e===undefined){e=this.value}if(typeof this.options.validate==="function"){return this.options.validate.call(this.options.scope,e)}},option:function(e,t){if(e in this.options){this.options[e]=t}if(e==="value"){this.setValue(t)}},setValue:function(e,t){if(t){this.value=this.input.str2value(e)}else{this.value=e}if(this.$form&&this.$form.is(":visible")){this.input.value2input(this.value)}}};e.fn.editableform=function(i){var n=arguments;return this.each(function(){var r=e(this),s=r.data("editableform"),a=typeof i==="object"&&i;if(!s){r.data("editableform",s=new t(this,a))}if(typeof i==="string"){s[i].apply(s,Array.prototype.slice.call(n,1))}})};e.fn.editableform.Constructor=t;e.fn.editableform.defaults={type:"text",url:null,params:null,name:null,pk:null,value:null,defaultValue:null,send:"auto",validate:null,success:null,error:null,ajaxOptions:null,showbuttons:true,scope:null,savenochange:false};e.fn.editableform.template='<form class="form-inline editableform">'+'<div class="control-group">'+'<div><div class="editable-input"></div><div class="editable-buttons"></div></div>'+'<div class="editable-error-block"></div>'+"</div>"+"</form>";e.fn.editableform.loading='<div class="editableform-loading"></div>';e.fn.editableform.buttons='<button type="submit" class="editable-submit">ok</button>'+'<button type="button" class="editable-cancel">cancel</button>';e.fn.editableform.errorGroupClass=null;e.fn.editableform.errorBlockClass="editable-error";e.fn.editableform.engine="jquery"})(window.jQuery);(function(e){"use strict";e.fn.editableutils={inherit:function(e,t){var i=function(){};i.prototype=t.prototype;e.prototype=new i;e.prototype.constructor=e;e.superclass=t.prototype},setCursorPosition:function(e,t){if(e.setSelectionRange){e.setSelectionRange(t,t)}else if(e.createTextRange){var i=e.createTextRange();i.collapse(true);i.moveEnd("character",t);i.moveStart("character",t);i.select()}},tryParseJson:function(e,t){if(typeof e==="string"&&e.length&&e.match(/^[\{\[].*[\}\]]$/)){if(t){try{e=new Function("return "+e)()}catch(e){}finally{return e}}else{e=new Function("return "+e)()}}return e},sliceObj:function(t,i,n){var r,s,a={};if(!e.isArray(i)||!i.length){return a}for(var o=0;o<i.length;o++){r=i[o];if(t.hasOwnProperty(r)){a[r]=t[r]}if(n===true){continue}s=r.toLowerCase();if(t.hasOwnProperty(s)){a[r]=t[s]}}return a},getConfigData:function(t){var i={};e.each(t.data(),function(e,t){if(typeof t!=="object"||t&&typeof t==="object"&&(t.constructor===Object||t.constructor===Array)){i[e]=t}});return i},objectKeys:function(e){if(Object.keys){return Object.keys(e)}else{if(e!==Object(e)){throw new TypeError("Object.keys called on a non-object")}var t=[],i;for(i in e){if(Object.prototype.hasOwnProperty.call(e,i)){t.push(i)}}return t}},escape:function(t){return e("<div>").text(t).html()},itemsByValue:function(t,i,n){if(!i||t===null){return[]}if(typeof n!=="function"){var r=n||"value";n=function(e){return e[r]}}var s=e.isArray(t),a=[],o=this;e.each(i,function(i,r){if(r.children){a=a.concat(o.itemsByValue(t,r.children,n))}else{if(s){if(e.grep(t,function(e){return e==(r&&typeof r==="object"?n(r):r)}).length){a.push(r)}}else{var l=r&&typeof r==="object"?n(r):r;if(t==l){a.push(r)}}}});return a},createInput:function(t){var i,n,r,s=t.type;if(s==="date"){if(t.mode==="inline"){if(e.fn.editabletypes.datefield){s="datefield"}else if(e.fn.editabletypes.dateuifield){s="dateuifield"}}else{if(e.fn.editabletypes.date){s="date"}else if(e.fn.editabletypes.dateui){s="dateui"}}if(s==="date"&&!e.fn.editabletypes.date){s="combodate"}}if(s==="datetime"&&t.mode==="inline"){s="datetimefield"}if(s==="wysihtml5"&&!e.fn.editabletypes[s]){s="textarea"}if(typeof e.fn.editabletypes[s]==="function"){i=e.fn.editabletypes[s];n=this.sliceObj(t,this.objectKeys(i.defaults));r=new i(n);return r}else{e.error("Unknown type: "+s);return false}},supportsTransitions:function(){var e=document.body||document.documentElement,t=e.style,i="transition",n=["Moz","Webkit","Khtml","O","ms"];if(typeof t[i]==="string"){return true}i=i.charAt(0).toUpperCase()+i.substr(1);for(var r=0;r<n.length;r++){if(typeof t[n[r]+i]==="string"){return true}}return false}}})(window.jQuery);(function(e){"use strict";var t=function(e,t){this.init(e,t)};var i=function(e,t){this.init(e,t)};t.prototype={containerName:null,containerDataName:null,innerCss:null,containerClass:"editable-container editable-popup",defaults:{},init:function(i,n){this.$element=e(i);this.options=e.extend({},e.fn.editableContainer.defaults,n);this.splitOptions();this.formOptions.scope=this.$element[0];this.initContainer();this.delayedHide=false;this.$element.on("destroyed",e.proxy(function(){this.destroy()},this));if(!e(document).data("editable-handlers-attached")){e(document).on("keyup.editable",function(t){if(t.which===27){e(".editable-open").editableContainer("hide")}});e(document).on("click.editable",function(i){var n=e(i.target),r,s=[".editable-container",".ui-datepicker-header",".datepicker",".modal-backdrop",".bootstrap-wysihtml5-insert-image-modal",".bootstrap-wysihtml5-insert-link-modal"];if(!e.contains(document.documentElement,i.target)){return}if(n.is(document)){return}for(r=0;r<s.length;r++){if(n.is(s[r])||n.parents(s[r]).length){return}}t.prototype.closeOthers(i.target)});e(document).data("editable-handlers-attached",true)}},splitOptions:function(){this.containerOptions={};this.formOptions={};if(!e.fn[this.containerName]){throw new Error(this.containerName+" not found. Have you included corresponding js file?")}for(var t in this.options){if(t in this.defaults){this.containerOptions[t]=this.options[t]}else{this.formOptions[t]=this.options[t]}}},tip:function(){return this.container()?this.container().$tip:null},container:function(){var e;if(this.containerDataName){if(e=this.$element.data(this.containerDataName)){return e}}e=this.$element.data(this.containerName);return e},call:function(){this.$element[this.containerName].apply(this.$element,arguments)},initContainer:function(){this.call(this.containerOptions)},renderForm:function(){this.$form.editableform(this.formOptions).on({save:e.proxy(this.save,this),nochange:e.proxy(function(){this.hide("nochange")},this),cancel:e.proxy(function(){this.hide("cancel")},this),show:e.proxy(function(){if(this.delayedHide){this.hide(this.delayedHide.reason);this.delayedHide=false}else{this.setPosition()}},this),rendering:e.proxy(this.setPosition,this),resize:e.proxy(this.setPosition,this),rendered:e.proxy(function(){this.$element.triggerHandler("shown",e(this.options.scope).data("editable"))},this)}).editableform("render")},show:function(t){this.$element.addClass("editable-open");if(t!==false){this.closeOthers(this.$element[0])}this.innerShow();this.tip().addClass(this.containerClass);if(this.$form){}this.$form=e("<div>");if(this.tip().is(this.innerCss)){this.tip().append(this.$form)}else{this.tip().find(this.innerCss).append(this.$form)}this.renderForm()},hide:function(e){if(!this.tip()||!this.tip().is(":visible")||!this.$element.hasClass("editable-open")){return}if(this.$form.data("editableform").isSaving){this.delayedHide={reason:e};return}else{this.delayedHide=false}this.$element.removeClass("editable-open");this.innerHide();this.$element.triggerHandler("hidden",e||"manual")},innerShow:function(){},innerHide:function(){},toggle:function(e){if(this.container()&&this.tip()&&this.tip().is(":visible")){this.hide()}else{this.show(e)}},setPosition:function(){},save:function(e,t){this.$element.triggerHandler("save",t);this.hide("save")},option:function(e,t){this.options[e]=t;if(e in this.containerOptions){this.containerOptions[e]=t;this.setContainerOption(e,t)}else{this.formOptions[e]=t;if(this.$form){this.$form.editableform("option",e,t)}}},setContainerOption:function(e,t){this.call("option",e,t)},destroy:function(){this.hide();this.innerDestroy();this.$element.off("destroyed");this.$element.removeData("editableContainer")},innerDestroy:function(){},closeOthers:function(t){e(".editable-open").each(function(i,n){if(n===t||e(n).find(t).length){return}var r=e(n),s=r.data("editableContainer");if(!s){return}if(s.options.onblur==="cancel"){r.data("editableContainer").hide("onblur")}else if(s.options.onblur==="submit"){r.data("editableContainer").tip().find("form").submit()}})},activate:function(){if(this.tip&&this.tip().is(":visible")&&this.$form){this.$form.data("editableform").input.activate()}}};e.fn.editableContainer=function(n){var r=arguments;return this.each(function(){var s=e(this),a="editableContainer",o=s.data(a),l=typeof n==="object"&&n,u=l.mode==="inline"?i:t;if(!o){s.data(a,o=new u(this,l))}if(typeof n==="string"){o[n].apply(o,Array.prototype.slice.call(r,1))}})};e.fn.editableContainer.Popup=t;e.fn.editableContainer.Inline=i;e.fn.editableContainer.defaults={value:null,placement:"top",autohide:true,onblur:"cancel",anim:false,mode:"popup"};jQuery.event.special.destroyed={remove:function(e){if(e.handler){e.handler()}}}})(window.jQuery);(function(e){"use strict";e.extend(e.fn.editableContainer.Inline.prototype,e.fn.editableContainer.Popup.prototype,{containerName:"editableform",innerCss:".editable-inline",containerClass:"editable-container editable-inline",initContainer:function(){this.$tip=e("<span></span>");if(!this.options.anim){this.options.anim=0}},splitOptions:function(){this.containerOptions={};this.formOptions=this.options},tip:function(){return this.$tip},innerShow:function(){this.$element.hide();this.tip().insertAfter(this.$element).show()},innerHide:function(){this.$tip.hide(this.options.anim,e.proxy(function(){this.$element.show();this.innerDestroy()},this))},innerDestroy:function(){if(this.tip()){this.tip().empty().remove()}}})})(window.jQuery);(function(e){"use strict";var t=function(t,i){this.$element=e(t);this.options=e.extend({},e.fn.editable.defaults,i,e.fn.editableutils.getConfigData(this.$element));if(this.options.selector){this.initLive()}else{this.init()}if(this.options.highlight&&!e.fn.editableutils.supportsTransitions()){this.options.highlight=false}};t.prototype={constructor:t,init:function(){var t=false,i,n;this.options.name=this.options.name||this.$element.attr("id");this.options.scope=this.$element[0];this.input=e.fn.editableutils.createInput(this.options);if(!this.input){return}if(this.options.value===undefined||this.options.value===null){this.value=this.input.html2value(e.trim(this.$element.html()));t=true}else{this.options.value=e.fn.editableutils.tryParseJson(this.options.value,true);if(typeof this.options.value==="string"){this.value=this.input.str2value(this.options.value)}else{this.value=this.options.value}}this.$element.addClass("editable");if(this.input.type==="textarea"){this.$element.addClass("editable-pre-wrapped")}if(this.options.toggle!=="manual"){this.$element.addClass("editable-click");this.$element.on(this.options.toggle+".editable",e.proxy(function(e){if(!this.options.disabled){e.preventDefault()}if(this.options.toggle==="mouseenter"){this.show()}else{var t=this.options.toggle!=="click";this.toggle(t)}},this))}else{this.$element.attr("tabindex",-1)}if(typeof this.options.display==="function"){this.options.autotext="always"}switch(this.options.autotext){case"always":i=true;break;case"auto":i=!e.trim(this.$element.text()).length&&this.value!==null&&this.value!==undefined&&!t;break;default:i=false}e.when(i?this.render():true).then(e.proxy(function(){if(this.options.disabled){this.disable()}else{this.enable()}this.$element.triggerHandler("init",this)},this))},initLive:function(){var t=this.options.selector;this.options.selector=false;this.options.autotext="never";this.$element.on(this.options.toggle+".editable",t,e.proxy(function(t){var i=e(t.target);if(!i.data("editable")){if(i.hasClass(this.options.emptyclass)){i.empty()}i.editable(this.options).trigger(t)}},this))},render:function(e){if(this.options.display===false){return}if(this.input.value2htmlFinal){return this.input.value2html(this.value,this.$element[0],this.options.display,e)}else if(typeof this.options.display==="function"){return this.options.display.call(this.$element[0],this.value,e)}else{return this.input.value2html(this.value,this.$element[0])}},enable:function(){this.options.disabled=false;this.$element.removeClass("editable-disabled");this.handleEmpty(this.isEmpty);if(this.options.toggle!=="manual"){if(this.$element.attr("tabindex")==="-1"){this.$element.removeAttr("tabindex")}}},disable:function(){this.options.disabled=true;this.hide();this.$element.addClass("editable-disabled");this.handleEmpty(this.isEmpty);this.$element.attr("tabindex",-1)},toggleDisabled:function(){if(this.options.disabled){this.enable()}else{this.disable()}},option:function(t,i){if(t&&typeof t==="object"){e.each(t,e.proxy(function(t,i){this.option(e.trim(t),i)},this));return}this.options[t]=i;if(t==="disabled"){return i?this.disable():this.enable()}if(t==="value"){this.setValue(i)}if(this.container){this.container.option(t,i)}if(this.input.option){this.input.option(t,i)}},handleEmpty:function(t){if(this.options.display===false){return}if(t!==undefined){this.isEmpty=t}else{if(typeof this.input.isEmpty==="function"){this.isEmpty=this.input.isEmpty(this.$element)}else{this.isEmpty=e.trim(this.$element.html())===""}}if(!this.options.disabled){if(this.isEmpty){this.$element.html(this.options.emptytext);if(this.options.emptyclass){this.$element.addClass(this.options.emptyclass)}}else if(this.options.emptyclass){this.$element.removeClass(this.options.emptyclass)}}else{if(this.isEmpty){this.$element.empty();if(this.options.emptyclass){this.$element.removeClass(this.options.emptyclass)}}}},show:function(t){if(this.options.disabled){return}if(!this.container){var i=e.extend({},this.options,{value:this.value,input:this.input});this.$element.editableContainer(i);this.$element.on("save.internal",e.proxy(this.save,this));this.container=this.$element.data("editableContainer")}else if(this.container.tip().is(":visible")){return}this.container.show(t)},hide:function(){if(this.container){this.container.hide()}},toggle:function(e){if(this.container&&this.container.tip().is(":visible")){this.hide()}else{this.show(e)}},save:function(e,t){if(this.options.unsavedclass){var i=false;i=i||typeof this.options.url==="function";i=i||this.options.display===false;i=i||t.response!==undefined;i=i||this.options.savenochange&&this.input.value2str(this.value)!==this.input.value2str(t.newValue);if(i){this.$element.removeClass(this.options.unsavedclass)}else{this.$element.addClass(this.options.unsavedclass)}}if(this.options.highlight){var n=this.$element,r=n.css("background-color");n.css("background-color",this.options.highlight);setTimeout(function(){if(r==="transparent"){r=""}n.css("background-color",r);n.addClass("editable-bg-transition");setTimeout(function(){n.removeClass("editable-bg-transition")},1700)},10)}this.setValue(t.newValue,false,t.response)},validate:function(){if(typeof this.options.validate==="function"){return this.options.validate.call(this,this.value)}},setValue:function(t,i,n){if(i){this.value=this.input.str2value(t)}else{this.value=t}if(this.container){this.container.option("value",this.value)}e.when(this.render(n)).then(e.proxy(function(){this.handleEmpty()},this))},activate:function(){if(this.container){this.container.activate()}},destroy:function(){this.disable();if(this.container){this.container.destroy()}this.input.destroy();if(this.options.toggle!=="manual"){this.$element.removeClass("editable-click");this.$element.off(this.options.toggle+".editable")}this.$element.off("save.internal");this.$element.removeClass("editable editable-open editable-disabled");this.$element.removeData("editable")}};e.fn.editable=function(i){var n={},r=arguments,s="editable";switch(i){case"validate":this.each(function(){var t=e(this),i=t.data(s),r;if(i&&(r=i.validate())){n[i.options.name]=r}});return n;case"getValue":if(arguments.length===2&&arguments[1]===true){n=this.eq(0).data(s).value}else{this.each(function(){var t=e(this),i=t.data(s);if(i&&i.value!==undefined&&i.value!==null){n[i.options.name]=i.input.value2submit(i.value)}})}return n;case"submit":var a=arguments[1]||{},o=this,l=this.editable("validate");if(e.isEmptyObject(l)){var u={};if(o.length===1){var f=o.data("editable");var c={name:f.options.name||"",value:f.input.value2submit(f.value),pk:typeof f.options.pk==="function"?f.options.pk.call(f.options.scope):f.options.pk};if(typeof f.options.params==="function"){c=f.options.params.call(f.options.scope,c)}else{f.options.params=e.fn.editableutils.tryParseJson(f.options.params,true);e.extend(c,f.options.params)}u={url:f.options.url,data:c,type:"POST"};a.success=a.success||f.options.success;a.error=a.error||f.options.error}else{var d=this.editable("getValue");u={url:a.url,data:d,type:"POST"}}u.success=typeof a.success==="function"?function(e){a.success.call(o,e,a)}:e.noop;u.error=typeof a.error==="function"?function(){a.error.apply(o,arguments)}:e.noop;if(a.ajaxOptions){e.extend(u,a.ajaxOptions)}if(a.data){e.extend(u.data,a.data)}e.ajax(u)}else{if(typeof a.error==="function"){a.error.call(o,l)}}return this}return this.each(function(){var n=e(this),a=n.data(s),o=typeof i==="object"&&i;if(o&&o.selector){a=new t(this,o);return}if(!a){n.data(s,a=new t(this,o))}if(typeof i==="string"){a[i].apply(a,Array.prototype.slice.call(r,1))}})};e.fn.editable.defaults={type:"text",disabled:false,toggle:"click",emptytext:"Empty",autotext:"auto",value:null,display:null,emptyclass:"editable-empty",unsavedclass:"editable-unsaved",selector:null,highlight:"#FFFF80"}})(window.jQuery);(function(e){"use strict";e.fn.editabletypes={};var t=function(){};t.prototype={init:function(t,i,n){this.type=t;this.options=e.extend({},n,i)},prerender:function(){this.$tpl=e(this.options.tpl);this.$input=this.$tpl;this.$clear=null;this.error=null},render:function(){},value2html:function(t,i){e(i)[this.options.escape?"text":"html"](e.trim(t))},html2value:function(t){return e("<div>").html(t).text()},value2str:function(e){return e},str2value:function(e){return e},value2submit:function(e){return e},value2input:function(e){this.$input.val(e)},input2value:function(){return this.$input.val()},activate:function(){if(this.$input.is(":visible")){this.$input.focus()}},clear:function(){this.$input.val(null)},escape:function(t){return e("<div>").text(t).html()},autosubmit:function(){},destroy:function(){},setClass:function(){if(this.options.inputclass){this.$input.addClass(this.options.inputclass)}},setAttr:function(e){if(this.options[e]!==undefined&&this.options[e]!==null){this.$input.attr(e,this.options[e])}},option:function(e,t){this.options[e]=t}};t.defaults={tpl:"",inputclass:null,escape:true,scope:null,showbuttons:true};e.extend(e.fn.editabletypes,{abstractinput:t})})(window.jQuery);(function(e){"use strict";var t=function(e){};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){var t=e.Deferred();this.error=null;this.onSourceReady(function(){this.renderList();t.resolve()},function(){this.error=this.options.sourceError;t.resolve()});return t.promise()},html2value:function(e){return null},value2html:function(t,i,n,r){var s=e.Deferred(),a=function(){if(typeof n==="function"){n.call(i,t,this.sourceData,r)}else{this.value2htmlFinal(t,i)}s.resolve()};if(t===null){a.call(this)}else{this.onSourceReady(a,function(){s.resolve()})}return s.promise()},onSourceReady:function(t,i){var n;if(e.isFunction(this.options.source)){n=this.options.source.call(this.options.scope);this.sourceData=null}else{n=this.options.source}if(this.options.sourceCache&&e.isArray(this.sourceData)){t.call(this);return}try{n=e.fn.editableutils.tryParseJson(n,false)}catch(e){i.call(this);return}if(typeof n==="string"){if(this.options.sourceCache){var r=n,s;if(!e(document).data(r)){e(document).data(r,{})}s=e(document).data(r);if(s.loading===false&&s.sourceData){this.sourceData=s.sourceData;this.doPrepend();t.call(this);return}else if(s.loading===true){s.callbacks.push(e.proxy(function(){this.sourceData=s.sourceData;this.doPrepend();t.call(this)},this));s.err_callbacks.push(e.proxy(i,this));return}else{s.loading=true;s.callbacks=[];s.err_callbacks=[]}}var a=e.extend({url:n,type:"get",cache:false,dataType:"json",success:e.proxy(function(n){if(s){s.loading=false}this.sourceData=this.makeArray(n);if(e.isArray(this.sourceData)){if(s){s.sourceData=this.sourceData;e.each(s.callbacks,function(){this.call()})}this.doPrepend();t.call(this)}else{i.call(this);if(s){e.each(s.err_callbacks,function(){this.call()})}}},this),error:e.proxy(function(){i.call(this);if(s){s.loading=false;e.each(s.err_callbacks,function(){this.call()})}},this)},this.options.sourceOptions);e.ajax(a)}else{this.sourceData=this.makeArray(n);if(e.isArray(this.sourceData)){this.doPrepend();t.call(this)}else{i.call(this)}}},doPrepend:function(){if(this.options.prepend===null||this.options.prepend===undefined){return}if(!e.isArray(this.prependData)){if(e.isFunction(this.options.prepend)){this.options.prepend=this.options.prepend.call(this.options.scope)}this.options.prepend=e.fn.editableutils.tryParseJson(this.options.prepend,true);if(typeof this.options.prepend==="string"){this.options.prepend={"":this.options.prepend}}this.prependData=this.makeArray(this.options.prepend)}if(e.isArray(this.prependData)&&e.isArray(this.sourceData)){this.sourceData=this.prependData.concat(this.sourceData)}},renderList:function(){},value2htmlFinal:function(e,t){},makeArray:function(t){var i,n,r=[],s,a;if(!t||typeof t==="string"){return null}if(e.isArray(t)){a=function(e,t){n={value:e,text:t};if(i++>=2){return false}};for(var o=0;o<t.length;o++){s=t[o];if(typeof s==="object"){i=0;e.each(s,a);if(i===1){r.push(n)}else if(i>1){if(s.children){s.children=this.makeArray(s.children)}r.push(s)}}else{r.push({value:s,text:s})}}}else{e.each(t,function(e,t){r.push({value:e,text:t})})}return r},option:function(e,t){this.options[e]=t;if(e==="source"){this.sourceData=null}if(e==="prepend"){this.prependData=null}}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{source:null,prepend:false,sourceError:"Error when loading list",sourceCache:true,sourceOptions:null});e.fn.editabletypes.list=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("text",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){this.renderClear();this.setClass();this.setAttr("placeholder")},activate:function(){if(this.$input.is(":visible")){this.$input.focus();e.fn.editableutils.setCursorPosition(this.$input.get(0),this.$input.val().length);if(this.toggleClear){this.toggleClear()}}},renderClear:function(){if(this.options.clear){this.$clear=e('<span class="editable-clear-x"></span>');this.$input.after(this.$clear).css("padding-right",24).keyup(e.proxy(function(t){if(~e.inArray(t.keyCode,[40,38,9,13,27])){return}clearTimeout(this.t);var i=this;this.t=setTimeout(function(){i.toggleClear(t)},100)},this)).parent().css("position","relative");this.$clear.click(e.proxy(this.clear,this))}},postrender:function(){},toggleClear:function(e){if(!this.$clear){return}var t=this.$input.val().length,i=this.$clear.is(":visible");if(t&&!i){this.$clear.show()}if(!t&&i){this.$clear.hide()}},clear:function(){this.$clear.hide();this.$input.val("").focus()}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="text">',placeholder:null,clear:true});e.fn.editabletypes.text=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("textarea",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){this.setClass();this.setAttr("placeholder");this.setAttr("rows");this.$input.keydown(function(t){if(t.ctrlKey&&t.which===13){e(this).closest("form").submit()}})},activate:function(){e.fn.editabletypes.text.prototype.activate.call(this)}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:"<textarea></textarea>",inputclass:"input-large",placeholder:null,rows:7});e.fn.editabletypes.textarea=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("select",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.list);e.extend(t.prototype,{renderList:function(){this.$input.empty();var t=function(i,n){var r;if(e.isArray(n)){for(var s=0;s<n.length;s++){r={};if(n[s].children){r.label=n[s].text;i.append(t(e("<optgroup>",r),n[s].children))}else{r.value=n[s].value;if(n[s].disabled){r.disabled=true}i.append(e("<option>",r).text(n[s].text))}}}return i};t(this.$input,this.sourceData);this.setClass();this.$input.on("keydown.editable",function(t){if(t.which===13){e(this).closest("form").submit()}})},value2htmlFinal:function(t,i){var n="",r=e.fn.editableutils.itemsByValue(t,this.sourceData);if(r.length){n=r[0].text}e.fn.editabletypes.abstractinput.prototype.value2html.call(this,n,i)},autosubmit:function(){this.$input.off("keydown.editable").on("change.editable",function(){e(this).closest("form").submit()})}});t.defaults=e.extend({},e.fn.editabletypes.list.defaults,{tpl:"<select></select>"});e.fn.editabletypes.select=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("checklist",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.list);e.extend(t.prototype,{renderList:function(){var t,i;this.$tpl.empty();if(!e.isArray(this.sourceData)){return}for(var n=0;n<this.sourceData.length;n++){t=e("<label>").append(e("<input>",{type:"checkbox",value:this.sourceData[n].value})).append(e("<span>").text(" "+this.sourceData[n].text));e("<div>").append(t).appendTo(this.$tpl)}this.$input=this.$tpl.find('input[type="checkbox"]');this.setClass()},value2str:function(t){return e.isArray(t)?t.sort().join(e.trim(this.options.separator)):""},str2value:function(t){var i,n=null;if(typeof t==="string"&&t.length){i=new RegExp("\\s*"+e.trim(this.options.separator)+"\\s*");n=t.split(i)}else if(e.isArray(t)){n=t}else{n=[t]}return n},value2input:function(t){this.$input.prop("checked",false);if(e.isArray(t)&&t.length){this.$input.each(function(i,n){var r=e(n);e.each(t,function(e,t){if(r.val()==t){r.prop("checked",true)}})})}},input2value:function(){var t=[];this.$input.filter(":checked").each(function(i,n){t.push(e(n).val())});return t},value2htmlFinal:function(t,i){var n=[],r=e.fn.editableutils.itemsByValue(t,this.sourceData),s=this.options.escape;if(r.length){e.each(r,function(t,i){var r=s?e.fn.editableutils.escape(i.text):i.text;n.push(r)});e(i).html(n.join("<br>"))}else{e(i).empty()}},activate:function(){this.$input.first().focus()},autosubmit:function(){this.$input.on("keydown",function(t){if(t.which===13){e(this).closest("form").submit()}})}});t.defaults=e.extend({},e.fn.editabletypes.list.defaults,{tpl:'<div class="editable-checklist"></div>',inputclass:null,separator:","});e.fn.editabletypes.checklist=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("password",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.text);e.extend(t.prototype,{value2html:function(t,i){if(t){e(i).text("[hidden]")}else{e(i).empty()}},html2value:function(e){return null}});t.defaults=e.extend({},e.fn.editabletypes.text.defaults,{tpl:'<input type="password">'});e.fn.editabletypes.password=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("email",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.text);t.defaults=e.extend({},e.fn.editabletypes.text.defaults,{tpl:'<input type="email">'});e.fn.editabletypes.email=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("url",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.text);t.defaults=e.extend({},e.fn.editabletypes.text.defaults,{tpl:'<input type="url">'});e.fn.editabletypes.url=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("tel",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.text);t.defaults=e.extend({},e.fn.editabletypes.text.defaults,{tpl:'<input type="tel">'});e.fn.editabletypes.tel=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("number",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.text);e.extend(t.prototype,{render:function(){t.superclass.render.call(this);this.setAttr("min");this.setAttr("max");this.setAttr("step")},postrender:function(){if(this.$clear){this.$clear.css({right:24})}}});t.defaults=e.extend({},e.fn.editabletypes.text.defaults,{tpl:'<input type="number">',inputclass:"input-mini",min:null,max:null,step:null});e.fn.editabletypes.number=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("range",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.number);e.extend(t.prototype,{render:function(){this.$input=this.$tpl.filter("input");this.setClass();this.setAttr("min");this.setAttr("max");this.setAttr("step");this.$input.on("input",function(){e(this).siblings("output").text(e(this).val())})},activate:function(){this.$input.focus()}});t.defaults=e.extend({},e.fn.editabletypes.number.defaults,{tpl:'<input type="range"><output style="width: 30px; display: inline-block"></output>',inputclass:"input-medium"});e.fn.editabletypes.range=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("time",e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){this.setClass()}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="time">'});e.fn.editabletypes.time=t})(window.jQuery);(function(e){"use strict";var t=function(i){this.init("select2",i,t.defaults);i.select2=i.select2||{};this.sourceData=null;if(i.placeholder){i.select2.placeholder=i.placeholder}if(!i.select2.tags&&i.source){var n=i.source;if(e.isFunction(i.source)){n=i.source.call(i.scope)}if(typeof n==="string"){i.select2.ajax=i.select2.ajax||{};if(!i.select2.ajax.data){i.select2.ajax.data=function(e){return{query:e}}}if(!i.select2.ajax.results){i.select2.ajax.results=function(e){return{results:e}}}i.select2.ajax.url=n}else{this.sourceData=this.convertSource(n);i.select2.data=this.sourceData}}this.options.select2=e.extend({},t.defaults.select2,i.select2);this.isMultiple=this.options.select2.tags||this.options.select2.multiple;this.isRemote="ajax"in this.options.select2;this.idFunc=this.options.select2.id;if(typeof this.idFunc!=="function"){var r=this.idFunc||"id";this.idFunc=function(e){return e[r]}}this.formatSelection=this.options.select2.formatSelection;if(typeof this.formatSelection!=="function"){this.formatSelection=function(e){return e.text}}};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){this.setClass();if(this.isRemote){this.$input.on("select2-loaded",e.proxy(function(e){this.sourceData=e.items.results},this))}if(this.isMultiple){this.$input.on("change",function(){e(this).closest("form").parent().triggerHandler("resize")})}},value2html:function(i,n){var r="",s,a=this;if(this.options.select2.tags){s=i}else if(this.sourceData){s=e.fn.editableutils.itemsByValue(i,this.sourceData,this.idFunc)}else{}if(e.isArray(s)){r=[];e.each(s,function(e,t){r.push(t&&typeof t==="object"?a.formatSelection(t):t)})}else if(s){r=a.formatSelection(s)}r=e.isArray(r)?r.join(this.options.viewseparator):r;t.superclass.value2html.call(this,r,n)},html2value:function(e){return this.options.select2.tags?this.str2value(e,this.options.viewseparator):null},value2input:function(t){if(e.isArray(t)){t=t.join(this.getSeparator())}if(!this.$input.data("select2")){this.$input.val(t);this.$input.select2(this.options.select2)}else{this.$input.val(t).trigger("change",true)}if(this.isRemote&&!this.isMultiple&&!this.options.select2.initSelection){var i=this.options.select2.id,n=this.options.select2.formatSelection;if(!i&&!n){var r=e(this.options.scope);if(!r.data("editable").isEmpty){var s={id:t,text:r.text()};this.$input.select2("data",s)}}}},input2value:function(){return this.$input.select2("val")},str2value:function(t,i){if(typeof t!=="string"||!this.isMultiple){return t}i=i||this.getSeparator();var n,r,s;if(t===null||t.length<1){return null}n=t.split(i);for(r=0,s=n.length;r<s;r=r+1){n[r]=e.trim(n[r])}return n},autosubmit:function(){this.$input.on("change",function(t,i){if(!i){e(this).closest("form").submit()}})},getSeparator:function(){return this.options.select2.separator||e.fn.select2.defaults.separator},convertSource:function(t){if(e.isArray(t)&&t.length&&t[0].value!==undefined){for(var i=0;i<t.length;i++){if(t[i].value!==undefined){t[i].id=t[i].value;delete t[i].value}}}return t},destroy:function(){if(this.$input.data("select2")){this.$input.select2("destroy")}}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="hidden">',select2:null,placeholder:null,source:null,viewseparator:", "});e.fn.editabletypes.select2=t})(window.jQuery);(function(e){var t=function(t,i){this.$element=e(t);if(!this.$element.is("input")){e.error("Combodate should be applied to INPUT element");return}this.options=e.extend({},e.fn.combodate.defaults,i,this.$element.data());this.init()};t.prototype={constructor:t,init:function(){this.map={day:["D","date"],month:["M","month"],year:["Y","year"],hour:["[Hh]","hours"],minute:["m","minutes"],second:["s","seconds"],ampm:["[Aa]",""]};this.$widget=e('<span class="combodate"></span>').html(this.getTemplate());this.initCombos();this.$widget.on("change","select",e.proxy(function(t){this.$element.val(this.getValue()).change();if(this.options.smartDays){if(e(t.target).is(".month")||e(t.target).is(".year")){this.fillCombo("day")}}},this));this.$widget.find("select").css("width","auto");this.$element.hide().after(this.$widget);this.setValue(this.$element.val()||this.options.value)},getTemplate:function(){var t=this.options.template;e.each(this.map,function(e,i){i=i[0];var n=new RegExp(i+"+"),r=i.length>1?i.substring(1,2):i;t=t.replace(n,"{"+r+"}")});t=t.replace(/ /g,"&nbsp;");e.each(this.map,function(e,i){i=i[0];var n=i.length>1?i.substring(1,2):i;t=t.replace("{"+n+"}",'<select class="'+e+'"></select>')});return t},initCombos:function(){for(var e in this.map){var t=this.$widget.find("."+e);this["$"+e]=t.length?t:null;this.fillCombo(e)}},fillCombo:function(e){var t=this["$"+e];if(!t){return}var i="fill"+e.charAt(0).toUpperCase()+e.slice(1);var n=this[i]();var r=t.val();t.empty();for(var s=0;s<n.length;s++){t.append('<option value="'+n[s][0]+'">'+n[s][1]+"</option>")}t.val(r)},fillCommon:function(e){var t=[],i;if(this.options.firstItem==="name"){i=moment.relativeTime||moment.langData()._relativeTime;var n=typeof i[e]==="function"?i[e](1,true,e,false):i[e];n=n.split(" ").reverse()[0];t.push(["",n])}else if(this.options.firstItem==="empty"){t.push(["",""])}return t},fillDay:function(){var e=this.fillCommon("d"),t,i,n=this.options.template.indexOf("DD")!==-1,r=31;if(this.options.smartDays&&this.$month&&this.$year){var s=parseInt(this.$month.val(),10);var a=parseInt(this.$year.val(),10);if(!isNaN(s)&&!isNaN(a)){r=moment([a,s]).daysInMonth()}}for(i=1;i<=r;i++){t=n?this.leadZero(i):i;e.push([i,t])}return e},fillMonth:function(){var e=this.fillCommon("M"),t,i,n=this.options.template.indexOf("MMMM")!==-1,r=this.options.template.indexOf("MMM")!==-1,s=this.options.template.indexOf("MM")!==-1;for(i=0;i<=11;i++){if(n){t=moment().date(1).month(i).format("MMMM")}else if(r){t=moment().date(1).month(i).format("MMM")}else if(s){t=this.leadZero(i+1)}else{t=i+1}e.push([i,t])}return e},fillYear:function(){var e=[],t,i,n=this.options.template.indexOf("YYYY")!==-1;for(i=this.options.maxYear;i>=this.options.minYear;i--){t=n?i:(i+"").substring(2);e[this.options.yearDescending?"push":"unshift"]([i,t])}e=this.fillCommon("y").concat(e);return e},fillHour:function(){var e=this.fillCommon("h"),t,i,n=this.options.template.indexOf("h")!==-1,r=this.options.template.indexOf("H")!==-1,s=this.options.template.toLowerCase().indexOf("hh")!==-1,a=n?1:0,o=n?12:23;for(i=a;i<=o;i++){t=s?this.leadZero(i):i;e.push([i,t])}return e},fillMinute:function(){var e=this.fillCommon("m"),t,i,n=this.options.template.indexOf("mm")!==-1;for(i=0;i<=59;i+=this.options.minuteStep){t=n?this.leadZero(i):i;e.push([i,t])}return e},fillSecond:function(){var e=this.fillCommon("s"),t,i,n=this.options.template.indexOf("ss")!==-1;for(i=0;i<=59;i+=this.options.secondStep){t=n?this.leadZero(i):i;e.push([i,t])}return e},fillAmpm:function(){var e=this.options.template.indexOf("a")!==-1,t=this.options.template.indexOf("A")!==-1,i=[["am",e?"am":"AM"],["pm",e?"pm":"PM"]];return i},getValue:function(t){var i,n={},r=this,s=false;e.each(this.map,function(e,t){if(e==="ampm"){return}var i=e==="day"?1:0;n[e]=r["$"+e]?parseInt(r["$"+e].val(),10):i;if(isNaN(n[e])){s=true;return false}});if(s){return""}if(this.$ampm){if(n.hour===12){n.hour=this.$ampm.val()==="am"?0:12}else{n.hour=this.$ampm.val()==="am"?n.hour:n.hour+12}}i=moment([n.year,n.month,n.day,n.hour,n.minute,n.second]);this.highlight(i);t=t===undefined?this.options.format:t;if(t===null){return i.isValid()?i:null}else{return i.isValid()?i.format(t):""}},setValue:function(t){if(!t){return}var i=typeof t==="string"?moment(t,this.options.format):moment(t),n=this,r={};function s(t,i){var n={};t.children("option").each(function(t,r){var s=e(r).attr("value"),a;if(s==="")return;a=Math.abs(s-i);if(typeof n.distance==="undefined"||a<n.distance){n={value:s,distance:a}}});return n.value}if(i.isValid()){e.each(this.map,function(e,t){if(e==="ampm"){return}r[e]=i[t[1]]()});if(this.$ampm){if(r.hour>=12){r.ampm="pm";if(r.hour>12){r.hour-=12}}else{r.ampm="am";if(r.hour===0){r.hour=12}}}e.each(r,function(e,t){if(n["$"+e]){if(e==="minute"&&n.options.minuteStep>1&&n.options.roundTime){t=s(n["$"+e],t)}if(e==="second"&&n.options.secondStep>1&&n.options.roundTime){t=s(n["$"+e],t)}n["$"+e].val(t)}});if(this.options.smartDays){this.fillCombo("day")}this.$element.val(i.format(this.options.format)).change()}},highlight:function(e){if(!e.isValid()){if(this.options.errorClass){this.$widget.addClass(this.options.errorClass)}else{if(!this.borderColor){this.borderColor=this.$widget.find("select").css("border-color")}this.$widget.find("select").css("border-color","red")}}else{if(this.options.errorClass){this.$widget.removeClass(this.options.errorClass)}else{this.$widget.find("select").css("border-color",this.borderColor)}}},leadZero:function(e){return e<=9?"0"+e:e},destroy:function(){this.$widget.remove();this.$element.removeData("combodate").show()}};e.fn.combodate=function(i){var n,r=Array.apply(null,arguments);r.shift();if(i==="getValue"&&this.length&&(n=this.eq(0).data("combodate"))){return n.getValue.apply(n,r)}return this.each(function(){var n=e(this),s=n.data("combodate"),a=typeof i=="object"&&i;if(!s){n.data("combodate",s=new t(this,a))}if(typeof i=="string"&&typeof s[i]=="function"){s[i].apply(s,r)}})};e.fn.combodate.defaults={format:"DD-MM-YYYY HH:mm",template:"D / MMM / YYYY   H : mm",value:null,minYear:1970,maxYear:2015,yearDescending:true,minuteStep:5,secondStep:1,firstItem:"empty",errorClass:null,roundTime:true,smartDays:false}})(window.jQuery);(function(e){"use strict";var t=function(i){this.init("combodate",i,t.defaults);if(!this.options.viewformat){this.options.viewformat=this.options.format}i.combodate=e.fn.editableutils.tryParseJson(i.combodate,true);this.options.combodate=e.extend({},t.defaults.combodate,i.combodate,{format:this.options.format,template:this.options.template})};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{render:function(){this.$input.combodate(this.options.combodate);if(e.fn.editableform.engine==="bs3"){this.$input.siblings().find("select").addClass("form-control")}if(this.options.inputclass){this.$input.siblings().find("select").addClass(this.options.inputclass)}},value2html:function(e,i){var n=e?e.format(this.options.viewformat):"";t.superclass.value2html.call(this,n,i)},html2value:function(e){return e?moment(e,this.options.viewformat):null},value2str:function(e){return e?e.format(this.options.format):""},str2value:function(e){return e?moment(e,this.options.format):null},value2submit:function(e){return this.value2str(e)},value2input:function(e){this.$input.combodate("setValue",e)},input2value:function(){return this.$input.combodate("getValue",null)},activate:function(){this.$input.siblings(".combodate").find("select").eq(0).focus()},autosubmit:function(){}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<input type="text">',inputclass:null,format:"YYYY-MM-DD",viewformat:null,template:"D / MMM / YYYY",combodate:null});e.fn.editabletypes.combodate=t})(window.jQuery);(function(e){"use strict";var t=e.fn.editableform.Constructor.prototype.initInput;e.extend(e.fn.editableform.Constructor.prototype,{initTemplate:function(){this.$form=e(e.fn.editableform.template);this.$form.find(".control-group").addClass("form-group");this.$form.find(".editable-error-block").addClass("help-block")},initInput:function(){t.apply(this);var i=this.input.options.inputclass===null||this.input.options.inputclass===false;var n="input-sm";var r="text,select,textarea,password,email,url,tel,number,range,time,typeaheadjs".split(",");if(~e.inArray(this.input.type,r)){this.input.$input.addClass("form-control");if(i){this.input.options.inputclass=n;this.input.$input.addClass(n)}}var s=this.$form.find(".editable-buttons");var a=i?[n]:this.input.options.inputclass.split(" ");for(var o=0;o<a.length;o++){if(a[o].toLowerCase()==="input-lg"){s.find("button").removeClass("btn-sm").addClass("btn-lg")}}}});e.fn.editableform.buttons='<button type="submit" class="btn btn-primary btn-sm editable-submit">'+'<i class="glyphicon glyphicon-ok"></i>'+"</button>"+'<button type="button" class="btn btn-default btn-sm editable-cancel">'+'<i class="glyphicon glyphicon-remove"></i>'+"</button>";e.fn.editableform.errorGroupClass="has-error";e.fn.editableform.errorBlockClass=null;e.fn.editableform.engine="bs3"})(window.jQuery);(function(e){"use strict";e.extend(e.fn.editableContainer.Popup.prototype,{containerName:"popover",containerDataName:"bs.popover",innerCss:".popover-content",defaults:e.fn.popover.Constructor.DEFAULTS,initContainer:function(){e.extend(this.containerOptions,{trigger:"manual",selector:false,content:" ",template:this.defaults.template});var t;if(this.$element.data("template")){t=this.$element.data("template");this.$element.removeData("template")}this.call(this.containerOptions);if(t){this.$element.data("template",t)}},innerShow:function(){this.call("show")},innerHide:function(){this.call("hide")},innerDestroy:function(){this.call("destroy")},setContainerOption:function(e,t){this.container().options[e]=t},setPosition:function(){(function(){var e=this.tip();var t=typeof this.options.placement=="function"?this.options.placement.call(this,e[0],this.$element[0]):this.options.placement;var i=/\s?auto?\s?/i;var n=i.test(t);if(n){t=t.replace(i,"")||"top"}var r=this.getPosition();var s=e[0].offsetWidth;var a=e[0].offsetHeight;if(n){var o=this.$element.parent();var l=t;var u=document.documentElement.scrollTop||document.body.scrollTop;var f=this.options.container=="body"?window.innerWidth:o.outerWidth();var c=this.options.container=="body"?window.innerHeight:o.outerHeight();var d=this.options.container=="body"?0:o.offset().left;t=t=="bottom"&&r.top+r.height+a-u>c?"top":t=="top"&&r.top-u-a<0?"bottom":t=="right"&&r.right+s>f?"left":t=="left"&&r.left-s<d?"right":t;e.removeClass(l).addClass(t)}var h=this.getCalculatedOffset(t,r,s,a);this.applyPlacement(h,t)}).call(this.container())}})})(window.jQuery);(function(e){function t(){return new Date(Date.UTC.apply(Date,arguments))}function i(){var e=new Date;return t(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate())}var n=function(t,i){var n=this;this._process_options(i);this.element=e(t);this.isInline=false;this.isInput=this.element.is("input");this.component=this.element.is(".date")?this.element.find(".add-on, .btn"):false;this.hasInput=this.component&&this.element.find("input").length;if(this.component&&this.component.length===0)this.component=false;this.picker=e(d.template);this._buildEvents();this._attachEvents();if(this.isInline){this.picker.addClass("datepicker-inline").appendTo(this.element)}else{this.picker.addClass("datepicker-dropdown dropdown-menu")}if(this.o.rtl){this.picker.addClass("datepicker-rtl");this.picker.find(".prev i, .next i").toggleClass("icon-arrow-left icon-arrow-right")}this.viewMode=this.o.startView;if(this.o.calendarWeeks)this.picker.find("tfoot th.today").attr("colspan",function(e,t){return parseInt(t)+1});this._allow_update=false;this.setStartDate(this.o.startDate);this.setEndDate(this.o.endDate);this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);this.fillDow();this.fillMonths();this._allow_update=true;this.update();this.showMode();if(this.isInline){this.show()}};n.prototype={constructor:n,_process_options:function(t){this._o=e.extend({},this._o,t);var i=this.o=e.extend({},this._o);var n=i.language;if(!c[n]){n=n.split("-")[0];if(!c[n])n=u.language}i.language=n;switch(i.startView){case 2:case"decade":i.startView=2;break;case 1:case"year":i.startView=1;break;default:i.startView=0}switch(i.minViewMode){case 1:case"months":i.minViewMode=1;break;case 2:case"years":i.minViewMode=2;break;default:i.minViewMode=0}i.startView=Math.max(i.startView,i.minViewMode);i.weekStart%=7;i.weekEnd=(i.weekStart+6)%7;var r=d.parseFormat(i.format);if(i.startDate!==-Infinity){i.startDate=d.parseDate(i.startDate,r,i.language)}if(i.endDate!==Infinity){i.endDate=d.parseDate(i.endDate,r,i.language)}i.daysOfWeekDisabled=i.daysOfWeekDisabled||[];if(!e.isArray(i.daysOfWeekDisabled))i.daysOfWeekDisabled=i.daysOfWeekDisabled.split(/[,\s]*/);i.daysOfWeekDisabled=e.map(i.daysOfWeekDisabled,function(e){return parseInt(e,10)})},_events:[],_secondaryEvents:[],_applyEvents:function(e){for(var t=0,i,n;t<e.length;t++){i=e[t][0];n=e[t][1];i.on(n)}},_unapplyEvents:function(e){for(var t=0,i,n;t<e.length;t++){i=e[t][0];n=e[t][1];i.off(n)}},_buildEvents:function(){if(this.isInput){this._events=[[this.element,{focus:e.proxy(this.show,this),keyup:e.proxy(this.update,this),keydown:e.proxy(this.keydown,this)}]]}else if(this.component&&this.hasInput){this._events=[[this.element.find("input"),{focus:e.proxy(this.show,this),keyup:e.proxy(this.update,this),keydown:e.proxy(this.keydown,this)}],[this.component,{click:e.proxy(this.show,this)}]]}else if(this.element.is("div")){this.isInline=true}else{this._events=[[this.element,{click:e.proxy(this.show,this)}]]}this._secondaryEvents=[[this.picker,{click:e.proxy(this.click,this)}],[e(window),{resize:e.proxy(this.place,this)}],[e(document),{mousedown:e.proxy(function(e){if(!(this.element.is(e.target)||this.element.find(e.target).size()||this.picker.is(e.target)||this.picker.find(e.target).size())){this.hide()}},this)}]]},_attachEvents:function(){this._detachEvents();this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents();this._applyEvents(this._secondaryEvents)},_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents)},_trigger:function(t,i){var n=i||this.date,r=new Date(n.getTime()+n.getTimezoneOffset()*6e4);this.element.trigger({type:t,date:r,format:e.proxy(function(e){var t=e||this.o.format;return d.formatDate(n,t,this.o.language)},this)})},show:function(e){if(!this.isInline)this.picker.appendTo("body");this.picker.show();this.height=this.component?this.component.outerHeight():this.element.outerHeight();this.place();this._attachSecondaryEvents();if(e){e.preventDefault()}this._trigger("show")},hide:function(e){if(this.isInline)return;if(!this.picker.is(":visible"))return;this.picker.hide().detach();this._detachSecondaryEvents();this.viewMode=this.o.startView;this.showMode();if(this.o.forceParse&&(this.isInput&&this.element.val()||this.hasInput&&this.element.find("input").val()))this.setValue();this._trigger("hide")},remove:function(){this.hide();this._detachEvents();this._detachSecondaryEvents();this.picker.remove();delete this.element.data().datepicker;if(!this.isInput){delete this.element.data().date}},getDate:function(){var e=this.getUTCDate();return new Date(e.getTime()+e.getTimezoneOffset()*6e4)},getUTCDate:function(){return this.date},setDate:function(e){this.setUTCDate(new Date(e.getTime()-e.getTimezoneOffset()*6e4))},setUTCDate:function(e){this.date=e;this.setValue()},setValue:function(){var e=this.getFormattedDate();if(!this.isInput){if(this.component){this.element.find("input").val(e)}}else{this.element.val(e)}},getFormattedDate:function(e){if(e===undefined)e=this.o.format;return d.formatDate(this.date,e,this.o.language)},setStartDate:function(e){this._process_options({startDate:e});this.update();this.updateNavArrows()},setEndDate:function(e){this._process_options({endDate:e});this.update();this.updateNavArrows()},setDaysOfWeekDisabled:function(e){this._process_options({daysOfWeekDisabled:e});this.update();this.updateNavArrows()},place:function(){if(this.isInline)return;var t=parseInt(this.element.parents().filter(function(){return e(this).css("z-index")!="auto"}).first().css("z-index"))+10;var i=this.component?this.component.parent().offset():this.element.offset();var n=this.component?this.component.outerHeight(true):this.element.outerHeight(true);this.picker.css({top:i.top+n,left:i.left,zIndex:t})},_allow_update:true,update:function(){if(!this._allow_update)return;var e,t=false;if(arguments&&arguments.length&&(typeof arguments[0]==="string"||arguments[0]instanceof Date)){e=arguments[0];t=true}else{e=this.isInput?this.element.val():this.element.data("date")||this.element.find("input").val();delete this.element.data().date}this.date=d.parseDate(e,this.o.format,this.o.language);if(t)this.setValue();if(this.date<this.o.startDate){this.viewDate=new Date(this.o.startDate)}else if(this.date>this.o.endDate){this.viewDate=new Date(this.o.endDate)}else{this.viewDate=new Date(this.date)}this.fill()},fillDow:function(){var e=this.o.weekStart,t="<tr>";if(this.o.calendarWeeks){var i='<th class="cw">&nbsp;</th>';t+=i;this.picker.find(".datepicker-days thead tr:first-child").prepend(i)}while(e<this.o.weekStart+7){t+='<th class="dow">'+c[this.o.language].daysMin[e++%7]+"</th>"}t+="</tr>";this.picker.find(".datepicker-days thead").append(t)},fillMonths:function(){var e="",t=0;while(t<12){e+='<span class="month">'+c[this.o.language].monthsShort[t++]+"</span>"}this.picker.find(".datepicker-months td").html(e)},setRange:function(t){if(!t||!t.length)delete this.range;else this.range=e.map(t,function(e){return e.valueOf()});this.fill()},getClassNames:function(t){var i=[],n=this.viewDate.getUTCFullYear(),r=this.viewDate.getUTCMonth(),s=this.date.valueOf(),a=new Date;if(t.getUTCFullYear()<n||t.getUTCFullYear()==n&&t.getUTCMonth()<r){i.push("old")}else if(t.getUTCFullYear()>n||t.getUTCFullYear()==n&&t.getUTCMonth()>r){i.push("new")}if(this.o.todayHighlight&&t.getUTCFullYear()==a.getFullYear()&&t.getUTCMonth()==a.getMonth()&&t.getUTCDate()==a.getDate()){i.push("today")}if(s&&t.valueOf()==s){i.push("active")}if(t.valueOf()<this.o.startDate||t.valueOf()>this.o.endDate||e.inArray(t.getUTCDay(),this.o.daysOfWeekDisabled)!==-1){i.push("disabled")}if(this.range){if(t>this.range[0]&&t<this.range[this.range.length-1]){i.push("range")}if(e.inArray(t.valueOf(),this.range)!=-1){i.push("selected")}}return i},fill:function(){var i=new Date(this.viewDate),n=i.getUTCFullYear(),r=i.getUTCMonth(),s=this.o.startDate!==-Infinity?this.o.startDate.getUTCFullYear():-Infinity,a=this.o.startDate!==-Infinity?this.o.startDate.getUTCMonth():-Infinity,o=this.o.endDate!==Infinity?this.o.endDate.getUTCFullYear():Infinity,l=this.o.endDate!==Infinity?this.o.endDate.getUTCMonth():Infinity,u=this.date&&this.date.valueOf(),f;this.picker.find(".datepicker-days thead th.datepicker-switch").text(c[this.o.language].months[r]+" "+n);this.picker.find("tfoot th.today").text(c[this.o.language].today).toggle(this.o.todayBtn!==false);this.picker.find("tfoot th.clear").text(c[this.o.language].clear).toggle(this.o.clearBtn!==false);this.updateNavArrows();this.fillMonths();var h=t(n,r-1,28,0,0,0,0),p=d.getDaysInMonth(h.getUTCFullYear(),h.getUTCMonth());h.setUTCDate(p);h.setUTCDate(p-(h.getUTCDay()-this.o.weekStart+7)%7);var m=new Date(h);m.setUTCDate(m.getUTCDate()+42);m=m.valueOf();var g=[];var v;while(h.valueOf()<m){if(h.getUTCDay()==this.o.weekStart){g.push("<tr>");if(this.o.calendarWeeks){var y=new Date(+h+(this.o.weekStart-h.getUTCDay()-7)%7*864e5),b=new Date(+y+(7+4-y.getUTCDay())%7*864e5),w=new Date(+(w=t(b.getUTCFullYear(),0,1))+(7+4-w.getUTCDay())%7*864e5),x=(b-w)/864e5/7+1;g.push('<td class="cw">'+x+"</td>")}}v=this.getClassNames(h);v.push("day");var C=this.o.beforeShowDay(h);if(C===undefined)C={};else if(typeof C==="boolean")C={enabled:C};else if(typeof C==="string")C={classes:C};if(C.enabled===false)v.push("disabled");if(C.classes)v=v.concat(C.classes.split(/\s+/));if(C.tooltip)f=C.tooltip;v=e.unique(v);g.push('<td class="'+v.join(" ")+'"'+(f?' title="'+f+'"':"")+">"+h.getUTCDate()+"</td>");if(h.getUTCDay()==this.o.weekEnd){g.push("</tr>")}h.setUTCDate(h.getUTCDate()+1)}this.picker.find(".datepicker-days tbody").empty().append(g.join(""));var T=this.date&&this.date.getUTCFullYear();var _=this.picker.find(".datepicker-months").find("th:eq(1)").text(n).end().find("span").removeClass("active");if(T&&T==n){_.eq(this.date.getUTCMonth()).addClass("active")}if(n<s||n>o){_.addClass("disabled")}if(n==s){_.slice(0,a).addClass("disabled")}if(n==o){_.slice(l+1).addClass("disabled")}g="";n=parseInt(n/10,10)*10;var k=this.picker.find(".datepicker-years").find("th:eq(1)").text(n+"-"+(n+9)).end().find("td");n-=1;for(var D=-1;D<11;D++){g+='<span class="year'+(D==-1?" old":D==10?" new":"")+(T==n?" active":"")+(n<s||n>o?" disabled":"")+'">'+n+"</span>";n+=1}k.html(g)},updateNavArrows:function(){if(!this._allow_update)return;var e=new Date(this.viewDate),t=e.getUTCFullYear(),i=e.getUTCMonth();switch(this.viewMode){case 0:if(this.o.startDate!==-Infinity&&t<=this.o.startDate.getUTCFullYear()&&i<=this.o.startDate.getUTCMonth()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(this.o.endDate!==Infinity&&t>=this.o.endDate.getUTCFullYear()&&i>=this.o.endDate.getUTCMonth()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break;case 1:case 2:if(this.o.startDate!==-Infinity&&t<=this.o.startDate.getUTCFullYear()){this.picker.find(".prev").css({visibility:"hidden"})}else{this.picker.find(".prev").css({visibility:"visible"})}if(this.o.endDate!==Infinity&&t>=this.o.endDate.getUTCFullYear()){this.picker.find(".next").css({visibility:"hidden"})}else{this.picker.find(".next").css({visibility:"visible"})}break}},click:function(i){i.preventDefault();var n=e(i.target).closest("span, td, th");if(n.length==1){switch(n[0].nodeName.toLowerCase()){case"th":switch(n[0].className){case"datepicker-switch":this.showMode(1);break;case"prev":case"next":var r=d.modes[this.viewMode].navStep*(n[0].className=="prev"?-1:1);switch(this.viewMode){case 0:this.viewDate=this.moveMonth(this.viewDate,r);break;case 1:case 2:this.viewDate=this.moveYear(this.viewDate,r);break}this.fill();break;case"today":var s=new Date;s=t(s.getFullYear(),s.getMonth(),s.getDate(),0,0,0);this.showMode(-2);var a=this.o.todayBtn=="linked"?null:"view";this._setDate(s,a);break;case"clear":var o;if(this.isInput)o=this.element;else if(this.component)o=this.element.find("input");if(o)o.val("").change();this._trigger("changeDate");this.update();if(this.o.autoclose)this.hide();break}break;case"span":if(!n.is(".disabled")){this.viewDate.setUTCDate(1);if(n.is(".month")){var l=1;var u=n.parent().find("span").index(n);var f=this.viewDate.getUTCFullYear();this.viewDate.setUTCMonth(u);this._trigger("changeMonth",this.viewDate);if(this.o.minViewMode===1){this._setDate(t(f,u,l,0,0,0,0))}}else{var f=parseInt(n.text(),10)||0;var l=1;var u=0;this.viewDate.setUTCFullYear(f);this._trigger("changeYear",this.viewDate);if(this.o.minViewMode===2){this._setDate(t(f,u,l,0,0,0,0))}}this.showMode(-1);this.fill()}break;case"td":if(n.is(".day")&&!n.is(".disabled")){var l=parseInt(n.text(),10)||1;var f=this.viewDate.getUTCFullYear(),u=this.viewDate.getUTCMonth();if(n.is(".old")){if(u===0){u=11;f-=1}else{u-=1}}else if(n.is(".new")){if(u==11){u=0;f+=1}else{u+=1}}this._setDate(t(f,u,l,0,0,0,0))}break}}},_setDate:function(e,t){if(!t||t=="date")this.date=new Date(e);if(!t||t=="view")this.viewDate=new Date(e);this.fill();this.setValue();this._trigger("changeDate");var i;if(this.isInput){i=this.element}else if(this.component){i=this.element.find("input")}if(i){i.change();if(this.o.autoclose&&(!t||t=="date")){this.hide()}}},moveMonth:function(e,t){if(!t)return e;var i=new Date(e.valueOf()),n=i.getUTCDate(),r=i.getUTCMonth(),s=Math.abs(t),a,o;t=t>0?1:-1;if(s==1){o=t==-1?function(){return i.getUTCMonth()==r}:function(){return i.getUTCMonth()!=a};a=r+t;i.setUTCMonth(a);if(a<0||a>11)a=(a+12)%12}else{for(var l=0;l<s;l++)i=this.moveMonth(i,t);a=i.getUTCMonth();i.setUTCDate(n);o=function(){return a!=i.getUTCMonth()}}while(o()){i.setUTCDate(--n);i.setUTCMonth(a)}return i},moveYear:function(e,t){return this.moveMonth(e,t*12)},dateWithinRange:function(e){return e>=this.o.startDate&&e<=this.o.endDate},keydown:function(e){if(this.picker.is(":not(:visible)")){if(e.keyCode==27)this.show();return}var t=false,i,n,r,s,a;switch(e.keyCode){case 27:this.hide();e.preventDefault();break;case 37:case 39:if(!this.o.keyboardNavigation)break;i=e.keyCode==37?-1:1;if(e.ctrlKey){s=this.moveYear(this.date,i);a=this.moveYear(this.viewDate,i)}else if(e.shiftKey){s=this.moveMonth(this.date,i);a=this.moveMonth(this.viewDate,i)}else{s=new Date(this.date);s.setUTCDate(this.date.getUTCDate()+i);a=new Date(this.viewDate);a.setUTCDate(this.viewDate.getUTCDate()+i)}if(this.dateWithinRange(s)){this.date=s;this.viewDate=a;this.setValue();this.update();e.preventDefault();t=true}break;case 38:case 40:if(!this.o.keyboardNavigation)break;i=e.keyCode==38?-1:1;if(e.ctrlKey){s=this.moveYear(this.date,i);a=this.moveYear(this.viewDate,i)}else if(e.shiftKey){s=this.moveMonth(this.date,i);a=this.moveMonth(this.viewDate,i)}else{s=new Date(this.date);s.setUTCDate(this.date.getUTCDate()+i*7);a=new Date(this.viewDate);a.setUTCDate(this.viewDate.getUTCDate()+i*7)}if(this.dateWithinRange(s)){this.date=s;this.viewDate=a;this.setValue();this.update();e.preventDefault();t=true}break;case 13:this.hide();e.preventDefault();break;case 9:this.hide();break}if(t){this._trigger("changeDate");var o;if(this.isInput){o=this.element}else if(this.component){o=this.element.find("input")}if(o){o.change()}}},showMode:function(e){if(e){this.viewMode=Math.max(this.o.minViewMode,Math.min(2,this.viewMode+e))}this.picker.find(">div").hide().filter(".datepicker-"+d.modes[this.viewMode].clsName).css("display","block");this.updateNavArrows()}};var r=function(t,i){this.element=e(t);this.inputs=e.map(i.inputs,function(e){return e.jquery?e[0]:e});delete i.inputs;e(this.inputs).datepicker(i).bind("changeDate",e.proxy(this.dateUpdated,this));this.pickers=e.map(this.inputs,function(t){return e(t).data("datepicker")});this.updateDates()};r.prototype={updateDates:function(){this.dates=e.map(this.pickers,function(e){return e.date});this.updateRanges()},updateRanges:function(){var t=e.map(this.dates,function(e){return e.valueOf()});e.each(this.pickers,function(e,i){i.setRange(t)})},dateUpdated:function(t){var i=e(t.target).data("datepicker"),n=i.getUTCDate(),r=e.inArray(t.target,this.inputs),s=this.inputs.length;if(r==-1)return;if(n<this.dates[r]){while(r>=0&&n<this.dates[r]){this.pickers[r--].setUTCDate(n)}}else if(n>this.dates[r]){while(r<s&&n>this.dates[r]){this.pickers[r++].setUTCDate(n)}}this.updateDates()},remove:function(){e.map(this.pickers,function(e){e.remove()});delete this.element.data().datepicker}};function s(t,i){var n=e(t).data(),r={},s,a=new RegExp("^"+i.toLowerCase()+"([A-Z])"),i=new RegExp("^"+i.toLowerCase());for(var o in n)if(i.test(o)){s=o.replace(a,function(e,t){return t.toLowerCase()});r[s]=n[o]}return r}function a(t){var i={};if(!c[t]){t=t.split("-")[0];if(!c[t])return}var n=c[t];e.each(f,function(e,t){if(t in n)i[t]=n[t]});return i}var o=e.fn.datepicker;var l=e.fn.datepicker=function(t){var i=Array.apply(null,arguments);i.shift();var o,l;this.each(function(){var l=e(this),f=l.data("datepicker"),c=typeof t=="object"&&t;if(!f){var d=s(this,"date"),h=e.extend({},u,d,c),p=a(h.language),m=e.extend({},u,p,d,c);if(l.is(".input-daterange")||m.inputs){var g={inputs:m.inputs||l.find("input").toArray()};l.data("datepicker",f=new r(this,e.extend(m,g)))}else{l.data("datepicker",f=new n(this,m))}}if(typeof t=="string"&&typeof f[t]=="function"){o=f[t].apply(f,i);if(o!==undefined)return false}});if(o!==undefined)return o;else return this};var u=e.fn.datepicker.defaults={autoclose:false,beforeShowDay:e.noop,calendarWeeks:false,clearBtn:false,daysOfWeekDisabled:[],endDate:Infinity,forceParse:true,format:"mm/dd/yyyy",keyboardNavigation:true,language:"en",minViewMode:0,rtl:false,startDate:-Infinity,startView:0,todayBtn:false,todayHighlight:false,weekStart:0};var f=e.fn.datepicker.locale_opts=["format","rtl","weekStart"];e.fn.datepicker.Constructor=n;var c=e.fn.datepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sun"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa","Su"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear"}};var d={modes:[{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10}],isLeapYear:function(e){return e%4===0&&e%100!==0||e%400===0},getDaysInMonth:function(e,t){return[31,d.isLeapYear(e)?29:28,31,30,31,30,31,31,30,31,30,31][t]},validParts:/dd?|DD?|mm?|MM?|yy(?:yy)?/g,nonpunctuation:/[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,parseFormat:function(e){var t=e.replace(this.validParts,"\0").split("\0"),i=e.match(this.validParts);if(!t||!t.length||!i||i.length===0){throw new Error("Invalid date format.")}return{separators:t,parts:i}},parseDate:function(i,r,s){if(i instanceof Date)return i;if(typeof r==="string")r=d.parseFormat(r);if(/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(i)){var a=/([\-+]\d+)([dmwy])/,o=i.match(/([\-+]\d+)([dmwy])/g),l,u;i=new Date;for(var f=0;f<o.length;f++){l=a.exec(o[f]);u=parseInt(l[1]);switch(l[2]){case"d":i.setUTCDate(i.getUTCDate()+u);break;case"m":i=n.prototype.moveMonth.call(n.prototype,i,u);break;case"w":i.setUTCDate(i.getUTCDate()+u*7);break;case"y":i=n.prototype.moveYear.call(n.prototype,i,u);break}}return t(i.getUTCFullYear(),i.getUTCMonth(),i.getUTCDate(),0,0,0)}var o=i&&i.match(this.nonpunctuation)||[],i=new Date,h={},p=["yyyy","yy","M","MM","m","mm","d","dd"],m={yyyy:function(e,t){return e.setUTCFullYear(t)},yy:function(e,t){return e.setUTCFullYear(2e3+t)},m:function(e,t){t-=1;while(t<0)t+=12;t%=12;e.setUTCMonth(t);while(e.getUTCMonth()!=t)e.setUTCDate(e.getUTCDate()-1);return e},d:function(e,t){return e.setUTCDate(t)}},g,v,l;m["M"]=m["MM"]=m["mm"]=m["m"];m["dd"]=m["d"];i=t(i.getFullYear(),i.getMonth(),i.getDate(),0,0,0);var y=r.parts.slice();if(o.length!=y.length){y=e(y).filter(function(t,i){return e.inArray(i,p)!==-1}).toArray()}if(o.length==y.length){for(var f=0,b=y.length;f<b;f++){g=parseInt(o[f],10);l=y[f];if(isNaN(g)){switch(l){case"MM":v=e(c[s].months).filter(function(){var e=this.slice(0,o[f].length),t=o[f].slice(0,e.length);return e==t});g=e.inArray(v[0],c[s].months)+1;break;case"M":v=e(c[s].monthsShort).filter(function(){var e=this.slice(0,o[f].length),t=o[f].slice(0,e.length);return e==t});g=e.inArray(v[0],c[s].monthsShort)+1;break}}h[l]=g}for(var f=0,w;f<p.length;f++){w=p[f];if(w in h&&!isNaN(h[w]))m[w](i,h[w])}}return i},formatDate:function(t,i,n){if(typeof i==="string")i=d.parseFormat(i);var r={d:t.getUTCDate(),D:c[n].daysShort[t.getUTCDay()],DD:c[n].days[t.getUTCDay()],m:t.getUTCMonth()+1,M:c[n].monthsShort[t.getUTCMonth()],MM:c[n].months[t.getUTCMonth()],yy:t.getUTCFullYear().toString().substring(2),yyyy:t.getUTCFullYear()};r.dd=(r.d<10?"0":"")+r.d;r.mm=(r.m<10?"0":"")+r.m;var t=[],s=e.extend([],i.separators);for(var a=0,o=i.parts.length;a<=o;a++){if(s.length)t.push(s.shift());t.push(r[i.parts[a]])}return t.join("")},headTemplate:"<thead>"+"<tr>"+'<th class="prev"><i class="icon-arrow-left"/></th>'+'<th colspan="5" class="datepicker-switch"></th>'+'<th class="next"><i class="icon-arrow-right"/></th>'+"</tr>"+"</thead>",contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'};d.template='<div class="datepicker">'+'<div class="datepicker-days">'+'<table class=" table-condensed">'+d.headTemplate+"<tbody></tbody>"+d.footTemplate+"</table>"+"</div>"+'<div class="datepicker-months">'+'<table class="table-condensed">'+d.headTemplate+d.contTemplate+d.footTemplate+"</table>"+"</div>"+'<div class="datepicker-years">'+'<table class="table-condensed">'+d.headTemplate+d.contTemplate+d.footTemplate+"</table>"+"</div>"+"</div>";e.fn.datepicker.DPGlobal=d;e.fn.datepicker.noConflict=function(){e.fn.datepicker=o;return this};e(document).on("focus.datepicker.data-api click.datepicker.data-api",'[data-provide="datepicker"]',function(t){var i=e(this);if(i.data("datepicker"))return;t.preventDefault();l.call(i,"show")});e(function(){l.call(e('[data-provide="datepicker-inline"]'))})})(window.jQuery);(function(e){"use strict";e.fn.bdatepicker=e.fn.datepicker.noConflict();if(!e.fn.datepicker){e.fn.datepicker=e.fn.bdatepicker}var t=function(e){this.init("date",e,t.defaults);this.initPicker(e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{initPicker:function(t,i){if(!this.options.viewformat){this.options.viewformat=this.options.format}t.datepicker=e.fn.editableutils.tryParseJson(t.datepicker,true);this.options.datepicker=e.extend({},i.datepicker,t.datepicker,{format:this.options.viewformat});this.options.datepicker.language=this.options.datepicker.language||"en";this.dpg=e.fn.bdatepicker.DPGlobal;this.parsedFormat=this.dpg.parseFormat(this.options.format);this.parsedViewFormat=this.dpg.parseFormat(this.options.viewformat)},render:function(){this.$input.bdatepicker(this.options.datepicker);if(this.options.clear){this.$clear=e('<a href="#"></a>').html(this.options.clear).click(e.proxy(function(e){e.preventDefault();e.stopPropagation();this.clear()},this));this.$tpl.parent().append(e('<div class="editable-clear">').append(this.$clear))}},value2html:function(e,i){var n=e?this.dpg.formatDate(e,this.parsedViewFormat,this.options.datepicker.language):"";t.superclass.value2html.call(this,n,i)},html2value:function(e){return this.parseDate(e,this.parsedViewFormat)},value2str:function(e){return e?this.dpg.formatDate(e,this.parsedFormat,this.options.datepicker.language):""},str2value:function(e){return this.parseDate(e,this.parsedFormat)},value2submit:function(e){return this.value2str(e)},value2input:function(e){this.$input.bdatepicker("update",e)},input2value:function(){return this.$input.data("datepicker").date},activate:function(){},clear:function(){this.$input.data("datepicker").date=null;this.$input.find(".active").removeClass("active");if(!this.options.showbuttons){this.$input.closest("form").submit()}},autosubmit:function(){this.$input.on("mouseup",".day",function(t){if(e(t.currentTarget).is(".old")||e(t.currentTarget).is(".new")){return}var i=e(this).closest("form");setTimeout(function(){i.submit()},200)})},parseDate:function(e,t){var i=null,n;if(e){i=this.dpg.parseDate(e,t,this.options.datepicker.language);if(typeof e==="string"){n=this.dpg.formatDate(i,t,this.options.datepicker.language);if(e!==n){i=null}}}return i}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<div class="editable-date well"></div>',inputclass:null,format:"yyyy-mm-dd",viewformat:null,datepicker:{weekStart:0,startView:0,minViewMode:0,autoclose:false},clear:"&times; clear"});e.fn.editabletypes.date=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("datefield",e,t.defaults);this.initPicker(e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.date);e.extend(t.prototype,{render:function(){this.$input=this.$tpl.find("input");this.setClass();this.setAttr("placeholder");this.$tpl.bdatepicker(this.options.datepicker);this.$input.off("focus keydown");this.$input.keyup(e.proxy(function(){this.$tpl.removeData("date");this.$tpl.bdatepicker("update")},this))},value2input:function(e){this.$input.val(e?this.dpg.formatDate(e,this.parsedViewFormat,this.options.datepicker.language):"");this.$tpl.bdatepicker("update")},input2value:function(){return this.html2value(this.$input.val())},activate:function(){e.fn.editabletypes.text.prototype.activate.call(this)},autosubmit:function(){}});t.defaults=e.extend({},e.fn.editabletypes.date.defaults,{tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',inputclass:"input-small",datepicker:{weekStart:0,startView:0,minViewMode:0,autoclose:true}});e.fn.editabletypes.datefield=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("datetime",e,t.defaults);this.initPicker(e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.abstractinput);e.extend(t.prototype,{initPicker:function(t,i){if(!this.options.viewformat){this.options.viewformat=this.options.format}t.datetimepicker=e.fn.editableutils.tryParseJson(t.datetimepicker,true);this.options.datetimepicker=e.extend({},i.datetimepicker,t.datetimepicker,{format:this.options.viewformat});this.options.datetimepicker.language=this.options.datetimepicker.language||"en";this.dpg=e.fn.datetimepicker.DPGlobal;this.parsedFormat=this.dpg.parseFormat(this.options.format,this.options.formatType);this.parsedViewFormat=this.dpg.parseFormat(this.options.viewformat,this.options.formatType)},render:function(){this.$input.datetimepicker(this.options.datetimepicker);this.$input.on("changeMode",function(t){var i=e(this).closest("form").parent();setTimeout(function(){i.triggerHandler("resize")},0)});if(this.options.clear){this.$clear=e('<a href="#"></a>').html(this.options.clear).click(e.proxy(function(e){e.preventDefault();e.stopPropagation();this.clear()},this));this.$tpl.parent().append(e('<div class="editable-clear">').append(this.$clear))}},value2html:function(e,i){var n=e?this.dpg.formatDate(this.toUTC(e),this.parsedViewFormat,this.options.datetimepicker.language,this.options.formatType):"";if(i){t.superclass.value2html.call(this,n,i)}else{return n}},html2value:function(e){var t=this.parseDate(e,this.parsedViewFormat);return t?this.fromUTC(t):null},value2str:function(e){return e?this.dpg.formatDate(this.toUTC(e),this.parsedFormat,this.options.datetimepicker.language,this.options.formatType):""},str2value:function(e){var t=this.parseDate(e,this.parsedFormat);return t?this.fromUTC(t):null},value2submit:function(e){return this.value2str(e)},value2input:function(e){if(e){this.$input.data("datetimepicker").setDate(e)}},input2value:function(){var e=this.$input.data("datetimepicker");return e.date?e.getDate():null},activate:function(){},clear:function(){this.$input.data("datetimepicker").date=null;this.$input.find(".active").removeClass("active");if(!this.options.showbuttons){this.$input.closest("form").submit()}},autosubmit:function(){this.$input.on("mouseup",".minute",function(t){var i=e(this).closest("form");setTimeout(function(){i.submit()},200)})},toUTC:function(e){return e?new Date(e.valueOf()-e.getTimezoneOffset()*6e4):e},fromUTC:function(e){return e?new Date(e.valueOf()+e.getTimezoneOffset()*6e4):e},parseDate:function(e,t){var i=null,n;if(e){i=this.dpg.parseDate(e,t,this.options.datetimepicker.language,this.options.formatType);if(typeof e==="string"){n=this.dpg.formatDate(i,t,this.options.datetimepicker.language,this.options.formatType);if(e!==n){i=null}}}return i}});t.defaults=e.extend({},e.fn.editabletypes.abstractinput.defaults,{tpl:'<div class="editable-date well"></div>',inputclass:null,format:"yyyy-mm-dd hh:ii",formatType:"standard",viewformat:null,datetimepicker:{todayHighlight:false,autoclose:false},clear:"&times; clear"});e.fn.editabletypes.datetime=t})(window.jQuery);(function(e){"use strict";var t=function(e){this.init("datetimefield",e,t.defaults);this.initPicker(e,t.defaults)};e.fn.editableutils.inherit(t,e.fn.editabletypes.datetime);e.extend(t.prototype,{render:function(){this.$input=this.$tpl.find("input");this.setClass();this.setAttr("placeholder");this.$tpl.datetimepicker(this.options.datetimepicker);this.$input.off("focus keydown");this.$input.keyup(e.proxy(function(){this.$tpl.removeData("date");this.$tpl.datetimepicker("update")},this))},value2input:function(e){this.$input.val(this.value2html(e));this.$tpl.datetimepicker("update")},input2value:function(){return this.html2value(this.$input.val())},activate:function(){e.fn.editabletypes.text.prototype.activate.call(this)},autosubmit:function(){}});t.defaults=e.extend({},e.fn.editabletypes.datetime.defaults,{tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',inputclass:"input-medium",datetimepicker:{todayHighlight:false,autoclose:true}});e.fn.editabletypes.datetimefield=t})(window.jQuery);(function(e){"use strict";var t=null;var i=function(e){var t=arguments,i=true,n=1;e=e.replace(/%s/g,function(){var e=t[n++];if(typeof e==="undefined"){i=false;return""}return e});return i?e:""};var n=function(t,i,n,r){var s="";e.each(t,function(e,t){if(t[i]===r){s=t[n];return false}return true});return s};var r=function(t,i){var n=-1;e.each(t,function(e,t){if(t.field===i){n=e;return false}return true});return n};var s=function(t){var i,n,r,s=0,a=[];for(i=0;i<t[0].length;i++){s+=t[0][i].colspan||1}for(i=0;i<t.length;i++){a[i]=[];for(n=0;n<s;n++){a[i][n]=false}}for(i=0;i<t.length;i++){for(n=0;n<t[i].length;n++){var o=t[i][n],l=o.rowspan||1,u=o.colspan||1,f=e.inArray(false,a[i]);if(u===1){o.fieldIndex=f;if(typeof o.field==="undefined"){o.field=f}}for(r=0;r<l;r++){a[i+r][f]=true}for(r=0;r<u;r++){a[i][f+r]=true}}}};var a=function(){if(t===null){var i=e("<p/>").addClass("fixed-table-scroll-inner"),n=e("<div/>").addClass("fixed-table-scroll-outer"),r,s;n.append(i);e("body").append(n);r=i[0].offsetWidth;n.css("overflow","scroll");s=i[0].offsetWidth;if(r===s){s=n[0].clientWidth}n.remove();t=r-s}return t};var o=function(t,n,r,s){var a=n;if(typeof n==="string"){var o=n.split(".");if(o.length>1){a=window;e.each(o,function(e,t){a=a[t]})}else{a=window[n]}}if(typeof a==="object"){return a}if(typeof a==="function"){return a.apply(t,r||[])}if(!a&&typeof n==="string"&&i.apply(this,[n].concat(r))){return i.apply(this,[n].concat(r))}return s};var l=function(t,i,n){var r=Object.getOwnPropertyNames(t),s=Object.getOwnPropertyNames(i),a="";if(n){if(r.length!==s.length){return false}}for(var o=0;o<r.length;o++){a=r[o];if(e.inArray(a,s)>-1){if(t[a]!==i[a]){return false}}}return true};var u=function(e){if(typeof e==="string"){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;").replace(/`/g,"&#x60;")}return e};var f=function(e){for(var t in e){var i=t.split(/(?=[A-Z])/).join("-").toLowerCase();if(i!==t){e[i]=e[t];delete e[t]}}return e};var c=function(e,t,i){var n=e;if(typeof t!=="string"||e.hasOwnProperty(t)){return i?u(e[t]):e[t]}var r=t.split(".");for(var s in r){if(r.hasOwnProperty(s)){n=n&&n[r[s]]}}return i?u(n):n};var d=function(){return!!(navigator.userAgent.indexOf("MSIE ")>0||!!navigator.userAgent.match(/Trident.*rv\:11\./))};var h=function(){if(!Object.keys){Object.keys=function(){var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),i=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],n=i.length;return function(r){if(typeof r!=="object"&&(typeof r!=="function"||r===null)){throw new TypeError("Object.keys called on non-object")}var s=[],a,o;for(a in r){if(e.call(r,a)){s.push(a)}}if(t){for(o=0;o<n;o++){if(e.call(r,i[o])){s.push(i[o])}}}return s}}()}};var p=function(t,i){this.options=i;this.$el=e(t);this.$el_=this.$el.clone();this.timeoutId_=0;this.timeoutFooter_=0;this.init()};p.DEFAULTS={classes:"table table-hover",sortClass:undefined,locale:undefined,height:undefined,undefinedText:"-",sortName:undefined,sortOrder:"asc",sortStable:false,striped:false,columns:[[]],data:[],totalField:"total",dataField:"rows",method:"get",url:undefined,ajax:undefined,cache:true,contentType:"application/json",dataType:"json",ajaxOptions:{},queryParams:function(e){return e},queryParamsType:"limit",responseHandler:function(e){return e},pagination:false,onlyInfoPagination:false,paginationLoop:true,sidePagination:"client",totalRows:0,pageNumber:1,pageSize:10,pageList:[10,25,50,100],paginationHAlign:"right",paginationVAlign:"bottom",paginationDetailHAlign:"left",paginationPreText:"&lsaquo;",paginationNextText:"&rsaquo;",search:false,searchOnEnterKey:false,strictSearch:false,searchAlign:"right",selectItemName:"btSelectItem",showHeader:true,showFooter:false,showColumns:false,showPaginationSwitch:false,showRefresh:false,showToggle:false,buttonsAlign:"right",smartDisplay:true,escape:false,minimumCountColumns:1,idField:undefined,uniqueId:undefined,cardView:false,detailView:false,detailFormatter:function(e,t){return""},trimOnSearch:true,clickToSelect:false,singleSelect:false,toolbar:undefined,toolbarAlign:"left",checkboxHeader:true,sortable:true,silentSort:true,maintainSelected:false,searchTimeOut:500,searchText:"",iconSize:undefined,buttonsClass:"default",iconsPrefix:"glyphicon",icons:{paginationSwitchDown:"glyphicon-collapse-down icon-chevron-down",paginationSwitchUp:"glyphicon-collapse-up icon-chevron-up",refresh:"glyphicon-refresh icon-refresh",toggle:"glyphicon-list-alt icon-list-alt",columns:"glyphicon-th icon-th",detailOpen:"glyphicon-plus icon-plus",detailClose:"glyphicon-minus icon-minus"},customSearch:e.noop,customSort:e.noop,rowStyle:function(e,t){return{}},rowAttributes:function(e,t){return{}},footerStyle:function(e,t){return{}},onAll:function(e,t){return false},onClickCell:function(e,t,i,n){return false},onDblClickCell:function(e,t,i,n){return false},onClickRow:function(e,t){return false},onDblClickRow:function(e,t){return false},onSort:function(e,t){return false},onCheck:function(e){return false},onUncheck:function(e){return false},onCheckAll:function(e){return false},onUncheckAll:function(e){return false},onCheckSome:function(e){return false},onUncheckSome:function(e){return false},onLoadSuccess:function(e){return false},onLoadError:function(e){return false},onColumnSwitch:function(e,t){return false},onPageChange:function(e,t){return false},onSearch:function(e){return false},onToggle:function(e){return false},onPreBody:function(e){return false},onPostBody:function(){return false},onPostHeader:function(){return false},onExpandRow:function(e,t,i){return false},onCollapseRow:function(e,t){return false},onRefreshOptions:function(e){return false},onRefresh:function(e){return false},onResetView:function(){return false}};p.LOCALES={};p.LOCALES["en-US"]=p.LOCALES.en={formatLoadingMessage:function(){return"Loading, please wait..."},formatRecordsPerPage:function(e){return i("%s rows per page",e)},formatShowingRows:function(e,t,n){return i("Showing %s to %s of %s rows",e,t,n)},formatDetailPagination:function(e){return i("Showing %s rows",e)},formatSearch:function(){return"Search"},formatNoMatches:function(){return"No matching records found"},formatPaginationSwitch:function(){return"Hide/Show pagination"},formatRefresh:function(){return"Refresh"},formatToggle:function(){return"Toggle"},formatColumns:function(){return"Columns"},formatAllRows:function(){return"All"}};e.extend(p.DEFAULTS,p.LOCALES["en-US"]);p.COLUMN_DEFAULTS={radio:false,checkbox:false,checkboxEnabled:true,field:undefined,title:undefined,titleTooltip:undefined,class:undefined,align:undefined,halign:undefined,falign:undefined,valign:undefined,width:undefined,sortable:false,order:"asc",visible:true,switchable:true,clickToSelect:true,formatter:undefined,footerFormatter:undefined,events:undefined,sorter:undefined,sortName:undefined,cellStyle:undefined,searchable:true,searchFormatter:true,cardVisible:true,escape:false};p.EVENTS={"all.bs.table":"onAll","click-cell.bs.table":"onClickCell","dbl-click-cell.bs.table":"onDblClickCell","click-row.bs.table":"onClickRow","dbl-click-row.bs.table":"onDblClickRow","sort.bs.table":"onSort","check.bs.table":"onCheck","uncheck.bs.table":"onUncheck","check-all.bs.table":"onCheckAll","uncheck-all.bs.table":"onUncheckAll","check-some.bs.table":"onCheckSome","uncheck-some.bs.table":"onUncheckSome","load-success.bs.table":"onLoadSuccess","load-error.bs.table":"onLoadError","column-switch.bs.table":"onColumnSwitch","page-change.bs.table":"onPageChange","search.bs.table":"onSearch","toggle.bs.table":"onToggle","pre-body.bs.table":"onPreBody","post-body.bs.table":"onPostBody","post-header.bs.table":"onPostHeader","expand-row.bs.table":"onExpandRow","collapse-row.bs.table":"onCollapseRow","refresh-options.bs.table":"onRefreshOptions","reset-view.bs.table":"onResetView","refresh.bs.table":"onRefresh"};p.prototype.init=function(){this.initLocale();this.initContainer();this.initTable();this.initHeader();this.initData();this.initHiddenRows();this.initFooter();this.initToolbar();this.initPagination();this.initBody();this.initSearchText();this.initServer()};p.prototype.initLocale=function(){if(this.options.locale){var t=this.options.locale.split(/-|_/);t[0].toLowerCase();if(t[1])t[1].toUpperCase();if(e.fn.bootstrapTable.locales[this.options.locale]){e.extend(this.options,e.fn.bootstrapTable.locales[this.options.locale])}else if(e.fn.bootstrapTable.locales[t.join("-")]){e.extend(this.options,e.fn.bootstrapTable.locales[t.join("-")])}else if(e.fn.bootstrapTable.locales[t[0]]){e.extend(this.options,e.fn.bootstrapTable.locales[t[0]])}}};p.prototype.initContainer=function(){this.$container=e(['<div class="bootstrap-table">','<div class="fixed-table-toolbar"></div>',this.options.paginationVAlign==="top"||this.options.paginationVAlign==="both"?'<div class="fixed-table-pagination" style="clear: both;"></div>':"",'<div class="fixed-table-container">','<div class="fixed-table-header"><table></table></div>','<div class="fixed-table-body">','<div class="fixed-table-loading">',this.options.formatLoadingMessage(),"</div>","</div>",'<div class="fixed-table-footer"><table><tr></tr></table></div>',this.options.paginationVAlign==="bottom"||this.options.paginationVAlign==="both"?'<div class="fixed-table-pagination"></div>':"","</div>","</div>"].join(""));this.$container.insertAfter(this.$el);this.$tableContainer=this.$container.find(".fixed-table-container");this.$tableHeader=this.$container.find(".fixed-table-header");this.$tableBody=this.$container.find(".fixed-table-body");this.$tableLoading=this.$container.find(".fixed-table-loading");this.$tableFooter=this.$container.find(".fixed-table-footer");this.$toolbar=this.$container.find(".fixed-table-toolbar");this.$pagination=this.$container.find(".fixed-table-pagination");this.$tableBody.append(this.$el);this.$container.after('<div class="clearfix"></div>');this.$el.addClass(this.options.classes);if(this.options.striped){this.$el.addClass("table-striped")}if(e.inArray("table-no-bordered",this.options.classes.split(" "))!==-1){this.$tableContainer.addClass("table-no-bordered")}};p.prototype.initTable=function(){var t=this,i=[],n=[];this.$header=this.$el.find(">thead");if(!this.$header.length){this.$header=e("<thead></thead>").appendTo(this.$el)}this.$header.find("tr").each(function(){var t=[];e(this).find("th").each(function(){if(typeof e(this).data("field")!=="undefined"){e(this).data("field",e(this).data("field")+"")}t.push(e.extend({},{title:e(this).html(),class:e(this).attr("class"),titleTooltip:e(this).attr("title"),rowspan:e(this).attr("rowspan")?+e(this).attr("rowspan"):undefined,colspan:e(this).attr("colspan")?+e(this).attr("colspan"):undefined},e(this).data()))});i.push(t)});if(!e.isArray(this.options.columns[0])){this.options.columns=[this.options.columns]}this.options.columns=e.extend(true,[],i,this.options.columns);this.columns=[];s(this.options.columns);e.each(this.options.columns,function(i,n){e.each(n,function(n,r){r=e.extend({},p.COLUMN_DEFAULTS,r);if(typeof r.fieldIndex!=="undefined"){t.columns[r.fieldIndex]=r}t.options.columns[i][n]=r})});if(this.options.data.length){return}var r=[];this.$el.find(">tbody>tr").each(function(i){var s={};s._id=e(this).attr("id");s._class=e(this).attr("class");s._data=f(e(this).data());e(this).find(">td").each(function(n){var a=e(this),o=+a.attr("colspan")||1,l=+a.attr("rowspan")||1,u,c;for(;r[i]&&r[i][n];n++);for(u=n;u<n+o;u++){for(c=i;c<i+l;c++){if(!r[c]){r[c]=[]}r[c][u]=true}}var d=t.columns[n].field;s[d]=e(this).html();s["_"+d+"_id"]=e(this).attr("id");s["_"+d+"_class"]=e(this).attr("class");s["_"+d+"_rowspan"]=e(this).attr("rowspan");s["_"+d+"_colspan"]=e(this).attr("colspan");s["_"+d+"_title"]=e(this).attr("title");s["_"+d+"_data"]=f(e(this).data())});n.push(s)});this.options.data=n;if(n.length)this.fromHtml=true};p.prototype.initHeader=function(){var t=this,n={},r=[];this.header={fields:[],styles:[],classes:[],formatters:[],events:[],sorters:[],sortNames:[],cellStyles:[],searchables:[]};e.each(this.options.columns,function(s,a){r.push("<tr>");if(s===0&&!t.options.cardView&&t.options.detailView){r.push(i('<th class="detail" rowspan="%s"><div class="fht-cell"></div></th>',t.options.columns.length))}e.each(a,function(e,s){var a="",o="",l="",f="",c=i(' class="%s"',s["class"]),d=t.options.sortOrder||s.order,h="px",p=s.width;if(s.width!==undefined&&!t.options.cardView){if(typeof s.width==="string"){if(s.width.indexOf("%")!==-1){h="%"}}}if(s.width&&typeof s.width==="string"){p=s.width.replace("%","").replace("px","")}o=i("text-align: %s; ",s.halign?s.halign:s.align);l=i("text-align: %s; ",s.align);f=i("vertical-align: %s; ",s.valign);f+=i("width: %s; ",(s.checkbox||s.radio)&&!p?"36px":p?p+h:undefined);if(typeof s.fieldIndex!=="undefined"){t.header.fields[s.fieldIndex]=s.field;t.header.styles[s.fieldIndex]=l+f;t.header.classes[s.fieldIndex]=c;t.header.formatters[s.fieldIndex]=s.formatter;t.header.events[s.fieldIndex]=s.events;t.header.sorters[s.fieldIndex]=s.sorter;t.header.sortNames[s.fieldIndex]=s.sortName;t.header.cellStyles[s.fieldIndex]=s.cellStyle;t.header.searchables[s.fieldIndex]=s.searchable;if(!s.visible){return}if(t.options.cardView&&!s.cardVisible){return}n[s.field]=s}r.push("<th"+i(' title="%s"',s.titleTooltip),s.checkbox||s.radio?i(' class="bs-checkbox %s"',s["class"]||""):c,i(' style="%s"',o+f),i(' rowspan="%s"',s.rowspan),i(' colspan="%s"',s.colspan),i(' data-field="%s"',s.field),">");r.push(i('<div class="th-inner %s">',t.options.sortable&&s.sortable?"sortable both":""));a=t.options.escape?u(s.title):s.title;if(s.checkbox){if(!t.options.singleSelect&&t.options.checkboxHeader){a='<input name="btSelectAll" type="checkbox" />'}t.header.stateField=s.field}if(s.radio){a="";t.header.stateField=s.field;t.options.singleSelect=true}r.push(a);r.push("</div>");r.push('<div class="fht-cell"></div>');r.push("</div>");r.push("</th>")});r.push("</tr>")});this.$header.html(r.join(""));this.$header.find("th[data-field]").each(function(t){e(this).data(n[e(this).data("field")])});this.$container.off("click",".th-inner").on("click",".th-inner",function(i){var n=e(this);if(t.options.detailView){if(n.closest(".bootstrap-table")[0]!==t.$container[0])return false}if(t.options.sortable&&n.parent().data().sortable){t.onSort(i)}});this.$header.children().children().off("keypress").on("keypress",function(i){if(t.options.sortable&&e(this).data().sortable){var n=i.keyCode||i.which;if(n==13){t.onSort(i)}}});e(window).off("resize.bootstrap-table");if(!this.options.showHeader||this.options.cardView){this.$header.hide();this.$tableHeader.hide();this.$tableLoading.css("top",0)}else{this.$header.show();this.$tableHeader.show();this.$tableLoading.css("top",this.$header.outerHeight()+1);this.getCaret();e(window).on("resize.bootstrap-table",e.proxy(this.resetWidth,this))}this.$selectAll=this.$header.find('[name="btSelectAll"]');this.$selectAll.off("click").on("click",function(){var i=e(this).prop("checked");t[i?"checkAll":"uncheckAll"]();t.updateSelected()})};p.prototype.initFooter=function(){if(!this.options.showFooter||this.options.cardView){this.$tableFooter.hide()}else{this.$tableFooter.show()}};p.prototype.initData=function(e,t){if(t==="append"){this.data=this.data.concat(e)}else if(t==="prepend"){this.data=[].concat(e).concat(this.data)}else{this.data=e||this.options.data}if(t==="append"){this.options.data=this.options.data.concat(e)}else if(t==="prepend"){this.options.data=[].concat(e).concat(this.options.data)}else{this.options.data=this.data}if(this.options.sidePagination==="server"){return}this.initSort()};p.prototype.initSort=function(){var t=this,n=this.options.sortName,r=this.options.sortOrder==="desc"?-1:1,s=e.inArray(this.options.sortName,this.header.fields),a=0;if(this.options.customSort!==e.noop){this.options.customSort.apply(this,[this.options.sortName,this.options.sortOrder]);return}if(s!==-1){if(this.options.sortStable){e.each(this.data,function(e,t){if(!t.hasOwnProperty("_position"))t._position=e})}this.data.sort(function(i,a){if(t.header.sortNames[s]){n=t.header.sortNames[s]}var l=c(i,n,t.options.escape),u=c(a,n,t.options.escape),f=o(t.header,t.header.sorters[s],[l,u]);if(f!==undefined){return r*f}if(l===undefined||l===null){l=""}if(u===undefined||u===null){u=""}if(t.options.sortStable&&l===u){l=i._position;u=a._position}if(e.isNumeric(l)&&e.isNumeric(u)){l=parseFloat(l);u=parseFloat(u);if(l<u){return r*-1}return r}if(l===u){return 0}if(typeof l!=="string"){l=l.toString()}if(l.localeCompare(u)===-1){return r*-1}return r});if(this.options.sortClass!==undefined){clearTimeout(a);a=setTimeout(function(){t.$el.removeClass(t.options.sortClass);var e=t.$header.find(i('[data-field="%s"]',t.options.sortName).index()+1);t.$el.find(i("tr td:nth-child(%s)",e)).addClass(t.options.sortClass)},250)}}};p.prototype.onSort=function(t){var i=t.type==="keypress"?e(t.currentTarget):e(t.currentTarget).parent(),n=this.$header.find("th").eq(i.index());this.$header.add(this.$header_).find("span.order").remove();if(this.options.sortName===i.data("field")){this.options.sortOrder=this.options.sortOrder==="asc"?"desc":"asc"}else{this.options.sortName=i.data("field");this.options.sortOrder=i.data("order")==="asc"?"desc":"asc"}this.trigger("sort",this.options.sortName,this.options.sortOrder);i.add(n).data("order",this.options.sortOrder);this.getCaret();if(this.options.sidePagination==="server"){this.initServer(this.options.silentSort);return}this.initSort();this.initBody()};p.prototype.initToolbar=function(){var t=this,n=[],r=0,s,a,l=0;if(this.$toolbar.find(".bs-bars").children().length){e("body").append(e(this.options.toolbar))}this.$toolbar.html("");if(typeof this.options.toolbar==="string"||typeof this.options.toolbar==="object"){e(i('<div class="bs-bars pull-%s"></div>',this.options.toolbarAlign)).appendTo(this.$toolbar).append(e(this.options.toolbar))}n=[i('<div class="columns columns-%s btn-group pull-%s">',this.options.buttonsAlign,this.options.buttonsAlign)];if(typeof this.options.icons==="string"){this.options.icons=o(null,this.options.icons)}if(this.options.showPaginationSwitch){n.push(i('<button class="btn'+i(" btn-%s",this.options.buttonsClass)+i(" btn-%s",this.options.iconSize)+'" type="button" name="paginationSwitch" aria-label="pagination Switch" title="%s">',this.options.formatPaginationSwitch()),i('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.paginationSwitchDown),"</button>")}if(this.options.showRefresh){n.push(i('<button class="btn'+i(" btn-%s",this.options.buttonsClass)+i(" btn-%s",this.options.iconSize)+'" type="button" name="refresh" aria-label="refresh" title="%s">',this.options.formatRefresh()),i('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.refresh),"</button>")}if(this.options.showToggle){n.push(i('<button class="btn'+i(" btn-%s",this.options.buttonsClass)+i(" btn-%s",this.options.iconSize)+'" type="button" name="toggle" aria-label="toggle" title="%s">',this.options.formatToggle()),i('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.toggle),"</button>")}if(this.options.showColumns){n.push(i('<div class="keep-open btn-group" title="%s">',this.options.formatColumns()),'<button type="button" aria-label="columns" class="btn'+i(" btn-%s",this.options.buttonsClass)+i(" btn-%s",this.options.iconSize)+' dropdown-toggle" data-toggle="dropdown">',i('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.columns),' <span class="caret"></span>',"</button>",'<ul class="dropdown-menu" role="menu">');e.each(this.columns,function(e,r){if(r.radio||r.checkbox){return}if(t.options.cardView&&!r.cardVisible){return}var s=r.visible?' checked="checked"':"";if(r.switchable){n.push(i('<li role="menuitem">'+'<label><input type="checkbox" data-field="%s" value="%s"%s> %s</label>'+"</li>",r.field,e,s,r.title));l++}});n.push("</ul>","</div>")}n.push("</div>");if(this.showToolbar||n.length>2){this.$toolbar.append(n.join(""))}if(this.options.showPaginationSwitch){this.$toolbar.find('button[name="paginationSwitch"]').off("click").on("click",e.proxy(this.togglePagination,this))}if(this.options.showRefresh){this.$toolbar.find('button[name="refresh"]').off("click").on("click",e.proxy(this.refresh,this))}if(this.options.showToggle){this.$toolbar.find('button[name="toggle"]').off("click").on("click",function(){t.toggleView()})}if(this.options.showColumns){s=this.$toolbar.find(".keep-open");if(l<=this.options.minimumCountColumns){s.find("input").prop("disabled",true)}s.find("li").off("click").on("click",function(e){e.stopImmediatePropagation()});s.find("input").off("click").on("click",function(){var i=e(this);t.toggleColumn(e(this).val(),i.prop("checked"),false);t.trigger("column-switch",e(this).data("field"),i.prop("checked"))})}if(this.options.search){n=[];n.push('<div class="pull-'+this.options.searchAlign+' search">',i('<input class="form-control'+i(" input-%s",this.options.iconSize)+'" type="text" placeholder="%s">',this.options.formatSearch()),"</div>");this.$toolbar.append(n.join(""));a=this.$toolbar.find(".search input");a.off("keyup drop blur").on("keyup drop blur",function(i){if(t.options.searchOnEnterKey&&i.keyCode!==13){return}if(e.inArray(i.keyCode,[37,38,39,40])>-1){return}clearTimeout(r);r=setTimeout(function(){t.onSearch(i)},t.options.searchTimeOut)});if(d()){a.off("mouseup").on("mouseup",function(e){clearTimeout(r);r=setTimeout(function(){t.onSearch(e)},t.options.searchTimeOut)})}}};p.prototype.onSearch=function(t){var i=e.trim(e(t.currentTarget).val());if(this.options.trimOnSearch&&e(t.currentTarget).val()!==i){e(t.currentTarget).val(i)}if(i===this.searchText){return}this.searchText=i;this.options.searchText=i;this.options.pageNumber=1;this.initSearch();this.updatePagination();this.trigger("search",i)};p.prototype.initSearch=function(){var t=this;if(this.options.sidePagination!=="server"){if(this.options.customSearch!==e.noop){this.options.customSearch.apply(this,[this.searchText]);return}var i=this.searchText&&(this.options.escape?u(this.searchText):this.searchText).toLowerCase();var n=e.isEmptyObject(this.filterColumns)?null:this.filterColumns;this.data=n?e.grep(this.options.data,function(t,i){for(var r in n){if(e.isArray(n[r])&&e.inArray(t[r],n[r])===-1||!e.isArray(n[r])&&t[r]!==n[r]){return false}}return true}):this.options.data;this.data=i?e.grep(this.data,function(n,s){for(var a=0;a<t.header.fields.length;a++){if(!t.header.searchables[a]){continue}var l=e.isNumeric(t.header.fields[a])?parseInt(t.header.fields[a],10):t.header.fields[a];var u=t.columns[r(t.columns,l)];var f;if(typeof l==="string"){f=n;var c=l.split(".");for(var d=0;d<c.length;d++){f=f[c[d]]}if(u&&u.searchFormatter){f=o(u,t.header.formatters[a],[f,n,s],f)}}else{f=n[l]}if(typeof f==="string"||typeof f==="number"){if(t.options.strictSearch){if((f+"").toLowerCase()===i){return true}}else{if((f+"").toLowerCase().indexOf(i)!==-1){return true}}}}return false}):this.data}};p.prototype.initPagination=function(){if(!this.options.pagination){this.$pagination.hide();return}else{this.$pagination.show()}var t=this,n=[],r=false,s,a,o,l,u,f,c,d,h,p=this.getData(),m=this.options.pageList;if(this.options.sidePagination!=="server"){this.options.totalRows=p.length}this.totalPages=0;if(this.options.totalRows){if(this.options.pageSize===this.options.formatAllRows()){this.options.pageSize=this.options.totalRows;r=true}else if(this.options.pageSize===this.options.totalRows){var g=typeof this.options.pageList==="string"?this.options.pageList.replace("[","").replace("]","").replace(/ /g,"").toLowerCase().split(","):this.options.pageList;if(e.inArray(this.options.formatAllRows().toLowerCase(),g)>-1){r=true}}this.totalPages=~~((this.options.totalRows-1)/this.options.pageSize)+1;this.options.totalPages=this.totalPages}if(this.totalPages>0&&this.options.pageNumber>this.totalPages){this.options.pageNumber=this.totalPages}this.pageFrom=(this.options.pageNumber-1)*this.options.pageSize+1;this.pageTo=this.options.pageNumber*this.options.pageSize;if(this.pageTo>this.options.totalRows){this.pageTo=this.options.totalRows}n.push('<div class="pull-'+this.options.paginationDetailHAlign+' pagination-detail">','<span class="pagination-info">',this.options.onlyInfoPagination?this.options.formatDetailPagination(this.options.totalRows):this.options.formatShowingRows(this.pageFrom,this.pageTo,this.options.totalRows),"</span>");if(!this.options.onlyInfoPagination){n.push('<span class="page-list">');var v=[i('<span class="btn-group %s">',this.options.paginationVAlign==="top"||this.options.paginationVAlign==="both"?"dropdown":"dropup"),'<button type="button" class="btn'+i(" btn-%s",this.options.buttonsClass)+i(" btn-%s",this.options.iconSize)+' dropdown-toggle" data-toggle="dropdown">','<span class="page-size">',r?this.options.formatAllRows():this.options.pageSize,"</span>",' <span class="caret"></span>',"</button>",'<ul class="dropdown-menu" role="menu">'];if(typeof this.options.pageList==="string"){var y=this.options.pageList.replace("[","").replace("]","").replace(/ /g,"").split(",");m=[];e.each(y,function(e,i){m.push(i.toUpperCase()===t.options.formatAllRows().toUpperCase()?t.options.formatAllRows():+i)})}e.each(m,function(e,n){if(!t.options.smartDisplay||e===0||m[e-1]<t.options.totalRows){var s;if(r){s=n===t.options.formatAllRows()?' class="active"':""}else{s=n===t.options.pageSize?' class="active"':""}v.push(i('<li role="menuitem"%s><a href="#">%s</a></li>',s,n))}});v.push("</ul></span>");n.push(this.options.formatRecordsPerPage(v.join("")));n.push("</span>");n.push("</div>",'<div class="pull-'+this.options.paginationHAlign+' pagination">','<ul class="pagination'+i(" pagination-%s",this.options.iconSize)+'">','<li class="page-pre"><a href="#">'+this.options.paginationPreText+"</a></li>");if(this.totalPages<5){a=1;o=this.totalPages}else{a=this.options.pageNumber-2;o=a+4;if(a<1){a=1;o=5}if(o>this.totalPages){o=this.totalPages;a=o-4}}if(this.totalPages>=6){if(this.options.pageNumber>=3){n.push('<li class="page-first'+(1===this.options.pageNumber?" active":"")+'">','<a href="#">',1,"</a>","</li>");a++}if(this.options.pageNumber>=4){if(this.options.pageNumber==4||this.totalPages==6||this.totalPages==7){a--}else{n.push('<li class="page-first-separator disabled">','<a href="#">...</a>',"</li>")}o--}}if(this.totalPages>=7){if(this.options.pageNumber>=this.totalPages-2){a--}}if(this.totalPages==6){if(this.options.pageNumber>=this.totalPages-2){o++}}else if(this.totalPages>=7){if(this.totalPages==7||this.options.pageNumber>=this.totalPages-3){o++}}for(s=a;s<=o;s++){n.push('<li class="page-number'+(s===this.options.pageNumber?" active":"")+'">','<a href="#">',s,"</a>","</li>")}if(this.totalPages>=8){if(this.options.pageNumber<=this.totalPages-4){n.push('<li class="page-last-separator disabled">','<a href="#">...</a>',"</li>")}}if(this.totalPages>=6){if(this.options.pageNumber<=this.totalPages-3){n.push('<li class="page-last'+(this.totalPages===this.options.pageNumber?" active":"")+'">','<a href="#">',this.totalPages,"</a>","</li>")}}n.push('<li class="page-next"><a href="#">'+this.options.paginationNextText+"</a></li>","</ul>","</div>")}this.$pagination.html(n.join(""));if(!this.options.onlyInfoPagination){l=this.$pagination.find(".page-list a");u=this.$pagination.find(".page-first");f=this.$pagination.find(".page-pre");c=this.$pagination.find(".page-next");d=this.$pagination.find(".page-last");h=this.$pagination.find(".page-number");if(this.options.smartDisplay){if(this.totalPages<=1){this.$pagination.find("div.pagination").hide()}if(m.length<2||this.options.totalRows<=m[0]){this.$pagination.find("span.page-list").hide()}this.$pagination[this.getData().length?"show":"hide"]()}if(!this.options.paginationLoop){if(this.options.pageNumber===1){f.addClass("disabled")}if(this.options.pageNumber===this.totalPages){c.addClass("disabled")}}if(r){this.options.pageSize=this.options.formatAllRows()}l.off("click").on("click",e.proxy(this.onPageListChange,this));u.off("click").on("click",e.proxy(this.onPageFirst,this));f.off("click").on("click",e.proxy(this.onPagePre,this));c.off("click").on("click",e.proxy(this.onPageNext,this));d.off("click").on("click",e.proxy(this.onPageLast,this));h.off("click").on("click",e.proxy(this.onPageNumber,this))}};p.prototype.updatePagination=function(t){if(t&&e(t.currentTarget).hasClass("disabled")){return}if(!this.options.maintainSelected){this.resetRows()}this.initPagination();if(this.options.sidePagination==="server"){this.initServer()}else{this.initBody()}this.trigger("page-change",this.options.pageNumber,this.options.pageSize)};p.prototype.onPageListChange=function(t){var i=e(t.currentTarget);i.parent().addClass("active").siblings().removeClass("active");this.options.pageSize=i.text().toUpperCase()===this.options.formatAllRows().toUpperCase()?this.options.formatAllRows():+i.text();this.$toolbar.find(".page-size").text(this.options.pageSize);this.updatePagination(t);return false};p.prototype.onPageFirst=function(e){this.options.pageNumber=1;this.updatePagination(e);return false};p.prototype.onPagePre=function(e){if(this.options.pageNumber-1===0){this.options.pageNumber=this.options.totalPages}else{this.options.pageNumber--}this.updatePagination(e);return false};p.prototype.onPageNext=function(e){if(this.options.pageNumber+1>this.options.totalPages){this.options.pageNumber=1}else{this.options.pageNumber++}this.updatePagination(e);return false};p.prototype.onPageLast=function(e){this.options.pageNumber=this.totalPages;this.updatePagination(e);return false};p.prototype.onPageNumber=function(t){if(this.options.pageNumber===+e(t.currentTarget).text()){return}this.options.pageNumber=+e(t.currentTarget).text();this.updatePagination(t);return false};p.prototype.initRow=function(t,r,s,a){var l=this,f,d=[],h={},p=[],m="",g={},v=[];if(e.inArray(t,this.hiddenRows)>-1){return}h=o(this.options,this.options.rowStyle,[t,r],h);if(h&&h.css){for(f in h.css){p.push(f+": "+h.css[f])}}g=o(this.options,this.options.rowAttributes,[t,r],g);if(g){for(f in g){v.push(i('%s="%s"',f,u(g[f])))}}if(t._data&&!e.isEmptyObject(t._data)){e.each(t._data,function(e,t){if(e==="index"){return}m+=i(' data-%s="%s"',e,t)})}d.push("<tr",i(" %s",v.join(" ")),i(' id="%s"',e.isArray(t)?undefined:t._id),i(' class="%s"',h.classes||(e.isArray(t)?undefined:t._class)),i(' data-index="%s"',r),i(' data-uniqueid="%s"',t[this.options.uniqueId]),i("%s",m),">");if(this.options.cardView){d.push(i('<td colspan="%s"><div class="card-views">',this.header.fields.length))}if(!this.options.cardView&&this.options.detailView){d.push("<td>",'<a class="detail-icon" href="#">',i('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.detailOpen),"</a>","</td>")}e.each(this.header.fields,function(s,a){var f="",m=c(t,a,l.options.escape),g="",v="",y={},b="",w=l.header.classes[s],x="",C="",T="",_="",k=l.columns[s];if(l.fromHtml&&typeof m==="undefined"){return}if(!k.visible){return}if(l.options.cardView&&!k.cardVisible){return}if(k.escape){m=u(m)}h=i('style="%s"',p.concat(l.header.styles[s]).join("; "));if(t["_"+a+"_id"]){b=i(' id="%s"',t["_"+a+"_id"])}if(t["_"+a+"_class"]){w=i(' class="%s"',t["_"+a+"_class"])}if(t["_"+a+"_rowspan"]){C=i(' rowspan="%s"',t["_"+a+"_rowspan"])}if(t["_"+a+"_colspan"]){T=i(' colspan="%s"',t["_"+a+"_colspan"])}if(t["_"+a+"_title"]){_=i(' title="%s"',t["_"+a+"_title"])}y=o(l.header,l.header.cellStyles[s],[m,t,r,a],y);if(y.classes){w=i(' class="%s"',y.classes)}if(y.css){var D=[];for(var S in y.css){D.push(S+": "+y.css[S])}h=i('style="%s"',D.concat(l.header.styles[s]).join("; "))}g=o(k,l.header.formatters[s],[m,t,r],m);if(t["_"+a+"_data"]&&!e.isEmptyObject(t["_"+a+"_data"])){e.each(t["_"+a+"_data"],function(e,t){if(e==="index"){return}x+=i(' data-%s="%s"',e,t)})}if(k.checkbox||k.radio){v=k.checkbox?"checkbox":v;v=k.radio?"radio":v;f=[i(l.options.cardView?'<div class="card-view %s">':'<td class="bs-checkbox %s">',k["class"]||""),"<input"+i(' data-index="%s"',r)+i(' name="%s"',l.options.selectItemName)+i(' type="%s"',v)+i(' value="%s"',t[l.options.idField])+i(' checked="%s"',g===true||(m||g&&g.checked)?"checked":undefined)+i(' disabled="%s"',!k.checkboxEnabled||g&&g.disabled?"disabled":undefined)+" />",l.header.formatters[s]&&typeof g==="string"?g:"",l.options.cardView?"</div>":"</td>"].join("");t[l.header.stateField]=g===true||g&&g.checked}else{g=typeof g==="undefined"||g===null?l.options.undefinedText:g;f=l.options.cardView?['<div class="card-view">',l.options.showHeader?i('<span class="title" %s>%s</span>',h,n(l.columns,"field","title",a)):"",i('<span class="value">%s</span>',g),"</div>"].join(""):[i("<td%s %s %s %s %s %s %s>",b,w,h,x,C,T,_),g,"</td>"].join("");if(l.options.cardView&&l.options.smartDisplay&&g===""){f='<div class="card-view"></div>'}}d.push(f)});if(this.options.cardView){d.push("</div></td>")}d.push("</tr>");return d.join(" ")};p.prototype.initBody=function(t){var n=this,s=[],a=this.getData();this.trigger("pre-body",a);this.$body=this.$el.find(">tbody");if(!this.$body.length){this.$body=e("<tbody></tbody>").appendTo(this.$el)}if(!this.options.pagination||this.options.sidePagination==="server"){this.pageFrom=1;this.pageTo=a.length}var l=e(document.createDocumentFragment());var u;for(var f=this.pageFrom-1;f<this.pageTo;f++){var d=a[f];var h=this.initRow(d,f,a,l);u=u||!!h;if(h&&h!==true){l.append(h)}}if(!u){l.append('<tr class="no-records-found">'+i('<td colspan="%s">%s</td>',this.$header.find("th").length,this.options.formatNoMatches())+"</tr>")}this.$body.html(l);if(!t){this.scrollTo(0)}this.$body.find("> tr[data-index] > td").off("click dblclick").on("click dblclick",function(t){var s=e(this),a=s.parent(),o=n.data[a.data("index")],l=s[0].cellIndex,u=n.getVisibleFields(),f=u[n.options.detailView&&!n.options.cardView?l-1:l],d=n.columns[r(n.columns,f)],h=c(o,f,n.options.escape);if(s.find(".detail-icon").length){return}n.trigger(t.type==="click"?"click-cell":"dbl-click-cell",f,h,o,s);n.trigger(t.type==="click"?"click-row":"dbl-click-row",o,a,f);if(t.type==="click"&&n.options.clickToSelect&&d.clickToSelect){var p=a.find(i('[name="%s"]',n.options.selectItemName));if(p.length){p[0].click()}}});this.$body.find("> tr[data-index] > td > .detail-icon").off("click").on("click",function(){var t=e(this),r=t.parent().parent(),s=r.data("index"),l=a[s];if(r.next().is("tr.detail-view")){t.find("i").attr("class",i("%s %s",n.options.iconsPrefix,n.options.icons.detailOpen));n.trigger("collapse-row",s,l);r.next().remove()}else{t.find("i").attr("class",i("%s %s",n.options.iconsPrefix,n.options.icons.detailClose));r.after(i('<tr class="detail-view"><td colspan="%s"></td></tr>',r.find("td").length));var u=r.next().find("td");var f=o(n.options,n.options.detailFormatter,[s,l,u],"");if(u.length===1){u.append(f)}n.trigger("expand-row",s,l,u)}n.resetView();return false});this.$selectItem=this.$body.find(i('[name="%s"]',this.options.selectItemName));this.$selectItem.off("click").on("click",function(t){t.stopImmediatePropagation();var i=e(this),r=i.prop("checked"),s=n.data[i.data("index")];if(n.options.maintainSelected&&e(this).is(":radio")){e.each(n.options.data,function(e,t){t[n.header.stateField]=false})}s[n.header.stateField]=r;if(n.options.singleSelect){n.$selectItem.not(this).each(function(){n.data[e(this).data("index")][n.header.stateField]=false});n.$selectItem.filter(":checked").not(this).prop("checked",false)}n.updateSelected();n.trigger(r?"check":"uncheck",s,i)});e.each(this.header.events,function(t,i){if(!i){return}if(typeof i==="string"){i=o(null,i)}var r=n.header.fields[t],s=e.inArray(r,n.getVisibleFields());if(n.options.detailView&&!n.options.cardView){s+=1}for(var a in i){n.$body.find(">tr:not(.no-records-found)").each(function(){var t=e(this),o=t.find(n.options.cardView?".card-view":"td").eq(s),l=a.indexOf(" "),u=a.substring(0,l),f=a.substring(l+1),c=i[a];o.find(f).off(u).on(u,function(e){var i=t.data("index"),s=n.data[i],a=s[r];c.apply(this,[e,a,s,i])})})}});this.updateSelected();this.resetView();this.trigger("post-body",a)};p.prototype.initServer=function(t,i,n){var r=this,s={},a={searchText:this.searchText,sortName:this.options.sortName,sortOrder:this.options.sortOrder},l;if(this.options.pagination){a.pageSize=this.options.pageSize===this.options.formatAllRows()?this.options.totalRows:this.options.pageSize;a.pageNumber=this.options.pageNumber}if(!(n||this.options.url)&&!this.options.ajax){return}if(this.options.queryParamsType==="limit"){a={search:a.searchText,sort:a.sortName,order:a.sortOrder};if(this.options.pagination){a.offset=this.options.pageSize===this.options.formatAllRows()?0:this.options.pageSize*(this.options.pageNumber-1);a.limit=this.options.pageSize===this.options.formatAllRows()?this.options.totalRows:this.options.pageSize}}if(!e.isEmptyObject(this.filterColumnsPartial)){a.filter=JSON.stringify(this.filterColumnsPartial,null)}s=o(this.options,this.options.queryParams,[a],s);e.extend(s,i||{});if(s===false){return}if(!t){this.$tableLoading.show()}l=e.extend({},o(null,this.options.ajaxOptions),{type:this.options.method,url:n||this.options.url,data:this.options.contentType==="application/json"&&this.options.method==="post"?JSON.stringify(s):s,cache:this.options.cache,contentType:this.options.contentType,dataType:this.options.dataType,success:function(e){e=o(r.options,r.options.responseHandler,[e],e);r.load(e);r.trigger("load-success",e);if(!t)r.$tableLoading.hide()},error:function(e){r.trigger("load-error",e.status,e);if(!t)r.$tableLoading.hide()}});if(this.options.ajax){o(this,this.options.ajax,[l],null)}else{if(this._xhr&&this._xhr.readyState!==4){this._xhr.abort()}this._xhr=e.ajax(l)}};p.prototype.initSearchText=function(){if(this.options.search){if(this.options.searchText!==""){var e=this.$toolbar.find(".search input");e.val(this.options.searchText);this.onSearch({currentTarget:e})}}};p.prototype.getCaret=function(){var t=this;e.each(this.$header.find("th"),function(i,n){e(n).find(".sortable").removeClass("desc asc").addClass(e(n).data("field")===t.options.sortName?t.options.sortOrder:"both")})};p.prototype.updateSelected=function(){var t=this.$selectItem.filter(":enabled").length&&this.$selectItem.filter(":enabled").length===this.$selectItem.filter(":enabled").filter(":checked").length;this.$selectAll.add(this.$selectAll_).prop("checked",t);this.$selectItem.each(function(){e(this).closest("tr")[e(this).prop("checked")?"addClass":"removeClass"]("selected")})};p.prototype.updateRows=function(){var t=this;this.$selectItem.each(function(){t.data[e(this).data("index")][t.header.stateField]=e(this).prop("checked")})};p.prototype.resetRows=function(){var t=this;e.each(this.data,function(e,i){t.$selectAll.prop("checked",false);t.$selectItem.prop("checked",false);if(t.header.stateField){i[t.header.stateField]=false}});this.initHiddenRows()};p.prototype.trigger=function(t){var i=Array.prototype.slice.call(arguments,1);t+=".bs.table";this.options[p.EVENTS[t]].apply(this.options,i);this.$el.trigger(e.Event(t),i);this.options.onAll(t,i);this.$el.trigger(e.Event("all.bs.table"),[t,i])};p.prototype.resetHeader=function(){clearTimeout(this.timeoutId_);this.timeoutId_=setTimeout(e.proxy(this.fitHeader,this),this.$el.is(":hidden")?100:0)};p.prototype.fitHeader=function(){var t=this,n,r,s,o;if(t.$el.is(":hidden")){t.timeoutId_=setTimeout(e.proxy(t.fitHeader,t),100);return}n=this.$tableBody.get(0);r=n.scrollWidth>n.clientWidth&&n.scrollHeight>n.clientHeight+this.$header.outerHeight()?a():0;this.$el.css("margin-top",-this.$header.outerHeight());s=e(":focus");if(s.length>0){var l=s.parents("th");if(l.length>0){var u=l.attr("data-field");if(u!==undefined){var f=this.$header.find("[data-field='"+u+"']");if(f.length>0){f.find(":input").addClass("focus-temp")}}}}this.$header_=this.$header.clone(true,true);this.$selectAll_=this.$header_.find('[name="btSelectAll"]');this.$tableHeader.css({"margin-right":r}).find("table").css("width",this.$el.outerWidth()).html("").attr("class",this.$el.attr("class")).append(this.$header_);o=e(".focus-temp:visible:eq(0)");if(o.length>0){o.focus();this.$header.find(".focus-temp").removeClass("focus-temp")}this.$header.find("th[data-field]").each(function(n){t.$header_.find(i('th[data-field="%s"]',e(this).data("field"))).data(e(this).data())});var c=this.getVisibleFields(),d=this.$header_.find("th");this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function(n){var r=e(this),s=n;if(t.options.detailView&&!t.options.cardView){if(n===0){t.$header_.find("th.detail").find(".fht-cell").width(r.innerWidth())}s=n-1}var a=t.$header_.find(i('th[data-field="%s"]',c[s]));if(a.length>1){a=e(d[r[0].cellIndex])}a.find(".fht-cell").width(r.innerWidth())});this.$tableBody.off("scroll").on("scroll",function(){t.$tableHeader.scrollLeft(e(this).scrollLeft());if(t.options.showFooter&&!t.options.cardView){t.$tableFooter.scrollLeft(e(this).scrollLeft())}});t.trigger("post-header")};p.prototype.resetFooter=function(){var t=this,n=t.getData(),r=[];if(!this.options.showFooter||this.options.cardView){return}if(!this.options.cardView&&this.options.detailView){r.push('<td><div class="th-inner">&nbsp;</div><div class="fht-cell"></div></td>')}e.each(this.columns,function(e,s){var a,l="",u="",f=[],c={},d=i(' class="%s"',s["class"]);if(!s.visible){return}if(t.options.cardView&&!s.cardVisible){return}l=i("text-align: %s; ",s.falign?s.falign:s.align);u=i("vertical-align: %s; ",s.valign);c=o(null,t.options.footerStyle);if(c&&c.css){for(a in c.css){f.push(a+": "+c.css[a])}}r.push("<td",d,i(' style="%s"',l+u+f.concat().join("; ")),">");r.push('<div class="th-inner">');r.push(o(s,s.footerFormatter,[n],"&nbsp;")||"&nbsp;");r.push("</div>");r.push('<div class="fht-cell"></div>');r.push("</div>");r.push("</td>")});this.$tableFooter.find("tr").html(r.join(""));this.$tableFooter.show();clearTimeout(this.timeoutFooter_);this.timeoutFooter_=setTimeout(e.proxy(this.fitFooter,this),this.$el.is(":hidden")?100:0)};p.prototype.fitFooter=function(){var t=this,i,n,r;clearTimeout(this.timeoutFooter_);if(this.$el.is(":hidden")){this.timeoutFooter_=setTimeout(e.proxy(this.fitFooter,this),100);return}n=this.$el.css("width");r=n>this.$tableBody.width()?a():0;this.$tableFooter.css({"margin-right":r}).find("table").css("width",n).attr("class",this.$el.attr("class"));i=this.$tableFooter.find("td");this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function(t){var n=e(this);i.eq(t).find(".fht-cell").width(n.innerWidth())})};p.prototype.toggleColumn=function(e,t,n){if(e===-1){return}this.columns[e].visible=t;this.initHeader();this.initSearch();this.initPagination();this.initBody();if(this.options.showColumns){var r=this.$toolbar.find(".keep-open input").prop("disabled",false);if(n){r.filter(i('[value="%s"]',e)).prop("checked",t)}if(r.filter(":checked").length<=this.options.minimumCountColumns){r.filter(":checked").prop("disabled",true)}}};p.prototype.getVisibleFields=function(){var t=this,i=[];e.each(this.header.fields,function(e,n){var s=t.columns[r(t.columns,n)];if(!s.visible){return}i.push(n)});return i};p.prototype.resetView=function(e){var t=0;if(e&&e.height){this.options.height=e.height}this.$selectAll.prop("checked",this.$selectItem.length>0&&this.$selectItem.length===this.$selectItem.filter(":checked").length);if(this.options.height){var i=this.$toolbar.outerHeight(true),n=this.$pagination.outerHeight(true),r=this.options.height-i-n;this.$tableContainer.css("height",r+"px")}if(this.options.cardView){this.$el.css("margin-top","0");this.$tableContainer.css("padding-bottom","0");this.$tableFooter.hide();return}if(this.options.showHeader&&this.options.height){this.$tableHeader.show();this.resetHeader();t+=this.$header.outerHeight()}else{this.$tableHeader.hide();this.trigger("post-header")}if(this.options.showFooter){this.resetFooter();if(this.options.height){t+=this.$tableFooter.outerHeight()+1}}this.getCaret();this.$tableContainer.css("padding-bottom",t+"px");this.trigger("reset-view")};p.prototype.getData=function(t){return this.searchText||!e.isEmptyObject(this.filterColumns)||!e.isEmptyObject(this.filterColumnsPartial)?t?this.data.slice(this.pageFrom-1,this.pageTo):this.data:t?this.options.data.slice(this.pageFrom-1,this.pageTo):this.options.data};p.prototype.load=function(t){var i=false;if(this.options.sidePagination==="server"){this.options.totalRows=t[this.options.totalField];i=t.fixedScroll;t=t[this.options.dataField]}else if(!e.isArray(t)){i=t.fixedScroll;t=t.data}this.initData(t);this.initSearch();this.initPagination();this.initBody(i)};p.prototype.append=function(e){this.initData(e,"append");this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.prepend=function(e){this.initData(e,"prepend");this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.remove=function(t){var i=this.options.data.length,n,r;if(!t.hasOwnProperty("field")||!t.hasOwnProperty("values")){return}for(n=i-1;n>=0;n--){r=this.options.data[n];if(!r.hasOwnProperty(t.field)){continue}if(e.inArray(r[t.field],t.values)!==-1){this.options.data.splice(n,1);if(this.options.sidePagination==="server"){this.options.totalRows-=1}}}if(i===this.options.data.length){return}this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.removeAll=function(){if(this.options.data.length>0){this.options.data.splice(0,this.options.data.length);this.initSearch();this.initPagination();this.initBody(true)}};p.prototype.getRowByUniqueId=function(e){var t=this.options.uniqueId,i=this.options.data.length,n=null,r,s,a;for(r=i-1;r>=0;r--){s=this.options.data[r];if(s.hasOwnProperty(t)){a=s[t]}else if(s._data.hasOwnProperty(t)){a=s._data[t]}else{continue}if(typeof a==="string"){e=e.toString()}else if(typeof a==="number"){if(Number(a)===a&&a%1===0){e=parseInt(e)}else if(a===Number(a)&&a!==0){e=parseFloat(e)}}if(a===e){n=s;break}}return n};p.prototype.removeByUniqueId=function(e){var t=this.options.data.length,i=this.getRowByUniqueId(e);if(i){this.options.data.splice(this.options.data.indexOf(i),1)}if(t===this.options.data.length){return}this.initSearch();this.initPagination();this.initBody(true)};p.prototype.updateByUniqueId=function(t){var i=this;var n=e.isArray(t)?t:[t];e.each(n,function(t,n){var r;if(!n.hasOwnProperty("id")||!n.hasOwnProperty("row")){return}r=e.inArray(i.getRowByUniqueId(n.id),i.options.data);if(r===-1){return}e.extend(i.options.data[r],n.row)});this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.insertRow=function(e){if(!e.hasOwnProperty("index")||!e.hasOwnProperty("row")){return}this.data.splice(e.index,0,e.row);this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.updateRow=function(t){var i=this;var n=e.isArray(t)?t:[t];e.each(n,function(t,n){if(!n.hasOwnProperty("index")||!n.hasOwnProperty("row")){return}e.extend(i.options.data[n.index],n.row)});this.initSearch();this.initPagination();this.initSort();this.initBody(true)};p.prototype.initHiddenRows=function(){this.hiddenRows=[]};p.prototype.showRow=function(e){this.toggleRow(e,true)};p.prototype.hideRow=function(e){this.toggleRow(e,false)};p.prototype.toggleRow=function(t,i){var n,r;if(t.hasOwnProperty("index")){n=this.getData()[t.index]}else if(t.hasOwnProperty("uniqueId")){n=this.getRowByUniqueId(t.uniqueId)}if(!n){return}r=e.inArray(n,this.hiddenRows);if(!i&&r===-1){this.hiddenRows.push(n)}else if(i&&r>-1){this.hiddenRows.splice(r,1)}this.initBody(true)};p.prototype.getHiddenRows=function(t){var i=this,n=this.getData(),r=[];e.each(n,function(t,n){if(e.inArray(n,i.hiddenRows)>-1){r.push(n)}});this.hiddenRows=r;return r};p.prototype.mergeCells=function(t){var i=t.index,n=e.inArray(t.field,this.getVisibleFields()),r=t.rowspan||1,s=t.colspan||1,a,o,l=this.$body.find(">tr"),u;if(this.options.detailView&&!this.options.cardView){n+=1}u=l.eq(i).find(">td").eq(n);if(i<0||n<0||i>=this.data.length){return}for(a=i;a<i+r;a++){for(o=n;o<n+s;o++){l.eq(a).find(">td").eq(o).hide()}}u.attr("rowspan",r).attr("colspan",s).show()};p.prototype.updateCell=function(e){if(!e.hasOwnProperty("index")||!e.hasOwnProperty("field")||!e.hasOwnProperty("value")){return}this.data[e.index][e.field]=e.value;if(e.reinit===false){return}this.initSort();this.initBody(true)};p.prototype.getOptions=function(){return this.options};p.prototype.getSelections=function(){var t=this;return e.grep(this.options.data,function(e){return e[t.header.stateField]===true})};p.prototype.getAllSelections=function(){var t=this;return e.grep(this.options.data,function(e){return e[t.header.stateField]})};p.prototype.checkAll=function(){this.checkAll_(true)};p.prototype.uncheckAll=function(){this.checkAll_(false)};p.prototype.checkInvert=function(){var t=this;var i=t.$selectItem.filter(":enabled");var n=i.filter(":checked");i.each(function(){e(this).prop("checked",!e(this).prop("checked"))});t.updateRows();t.updateSelected();t.trigger("uncheck-some",n);n=t.getSelections();t.trigger("check-some",n)};p.prototype.checkAll_=function(e){var t;if(!e){t=this.getSelections()}this.$selectAll.add(this.$selectAll_).prop("checked",e);this.$selectItem.filter(":enabled").prop("checked",e);this.updateRows();if(e){t=this.getSelections()}this.trigger(e?"check-all":"uncheck-all",t)};p.prototype.check=function(e){this.check_(true,e)};p.prototype.uncheck=function(e){this.check_(false,e)};p.prototype.check_=function(e,t){var n=this.$selectItem.filter(i('[data-index="%s"]',t)).prop("checked",e);this.data[t][this.header.stateField]=e;this.updateSelected();this.trigger(e?"check":"uncheck",this.data[t],n)};p.prototype.checkBy=function(e){this.checkBy_(true,e)};p.prototype.uncheckBy=function(e){this.checkBy_(false,e)};p.prototype.checkBy_=function(t,n){if(!n.hasOwnProperty("field")||!n.hasOwnProperty("values")){return}var r=this,s=[];e.each(this.options.data,function(a,o){if(!o.hasOwnProperty(n.field)){return false}if(e.inArray(o[n.field],n.values)!==-1){var l=r.$selectItem.filter(":enabled").filter(i('[data-index="%s"]',a)).prop("checked",t);o[r.header.stateField]=t;s.push(o);r.trigger(t?"check":"uncheck",o,l)}});this.updateSelected();this.trigger(t?"check-some":"uncheck-some",s)};p.prototype.destroy=function(){this.$el.insertBefore(this.$container);e(this.options.toolbar).insertBefore(this.$el);this.$container.next().remove();this.$container.remove();this.$el.html(this.$el_.html()).css("margin-top","0").attr("class",this.$el_.attr("class")||"")};p.prototype.showLoading=function(){this.$tableLoading.show()};p.prototype.hideLoading=function(){this.$tableLoading.hide()};p.prototype.togglePagination=function(){this.options.pagination=!this.options.pagination;var e=this.$toolbar.find('button[name="paginationSwitch"] i');if(this.options.pagination){e.attr("class",this.options.iconsPrefix+" "+this.options.icons.paginationSwitchDown)}else{e.attr("class",this.options.iconsPrefix+" "+this.options.icons.paginationSwitchUp)}this.updatePagination()};p.prototype.refresh=function(e){if(e&&e.url){this.options.url=e.url}if(e&&e.pageNumber){this.options.pageNumber=e.pageNumber}if(e&&e.pageSize){this.options.pageSize=e.pageSize}this.initServer(e&&e.silent,e&&e.query,e&&e.url);this.trigger("refresh",e)};p.prototype.resetWidth=function(){if(this.options.showHeader&&this.options.height){this.fitHeader()}if(this.options.showFooter){this.fitFooter()}};p.prototype.showColumn=function(e){this.toggleColumn(r(this.columns,e),true,true)};p.prototype.hideColumn=function(e){this.toggleColumn(r(this.columns,e),false,true)};p.prototype.getHiddenColumns=function(){return e.grep(this.columns,function(e){return!e.visible})};p.prototype.getVisibleColumns=function(){return e.grep(this.columns,function(e){return e.visible})};p.prototype.toggleAllColumns=function(t){e.each(this.columns,function(e,i){this.columns[e].visible=t});this.initHeader();this.initSearch();this.initPagination();this.initBody();if(this.options.showColumns){var i=this.$toolbar.find(".keep-open input").prop("disabled",false);if(i.filter(":checked").length<=this.options.minimumCountColumns){i.filter(":checked").prop("disabled",true)}}};p.prototype.showAllColumns=function(){this.toggleAllColumns(true)};p.prototype.hideAllColumns=function(){this.toggleAllColumns(false)};p.prototype.filterBy=function(t){this.filterColumns=e.isEmptyObject(t)?{}:t;this.options.pageNumber=1;this.initSearch();this.updatePagination()};p.prototype.scrollTo=function(e){if(typeof e==="string"){e=e==="bottom"?this.$tableBody[0].scrollHeight:0}if(typeof e==="number"){this.$tableBody.scrollTop(e)}if(typeof e==="undefined"){return this.$tableBody.scrollTop()}};p.prototype.getScrollPosition=function(){return this.scrollTo()};p.prototype.selectPage=function(e){if(e>0&&e<=this.options.totalPages){this.options.pageNumber=e;this.updatePagination()}};p.prototype.prevPage=function(){if(this.options.pageNumber>1){this.options.pageNumber--;this.updatePagination()}};p.prototype.nextPage=function(){if(this.options.pageNumber<this.options.totalPages){this.options.pageNumber++;this.updatePagination()}};p.prototype.toggleView=function(){this.options.cardView=!this.options.cardView;this.initHeader();this.initBody();this.trigger("toggle",this.options.cardView)};p.prototype.refreshOptions=function(t){if(l(this.options,t,true)){return}this.options=e.extend(this.options,t);this.trigger("refresh-options",this.options);this.destroy();this.init()};p.prototype.resetSearch=function(e){var t=this.$toolbar.find(".search input");t.val(e||"");this.onSearch({currentTarget:t})};p.prototype.expandRow_=function(e,t){var n=this.$body.find(i('> tr[data-index="%s"]',t));if(n.next().is("tr.detail-view")===(e?false:true)){n.find("> td > .detail-icon").click()}};p.prototype.expandRow=function(e){this.expandRow_(true,e)};p.prototype.collapseRow=function(e){this.expandRow_(false,e)};p.prototype.expandAllRows=function(t){if(t){var n=this.$body.find(i('> tr[data-index="%s"]',0)),r=this,s=null,a=false,o=-1;if(!n.next().is("tr.detail-view")){n.find("> td > .detail-icon").click();a=true}else if(!n.next().next().is("tr.detail-view")){n.next().find(".detail-icon").click();a=true}if(a){try{o=setInterval(function(){s=r.$body.find("tr.detail-view").last().find(".detail-icon");if(s.length>0){s.click()}else{clearInterval(o)}},1)}catch(e){clearInterval(o)}}}else{var l=this.$body.children();for(var u=0;u<l.length;u++){this.expandRow_(true,e(l[u]).data("index"))}}};p.prototype.collapseAllRows=function(t){if(t){this.expandRow_(false,0)}else{var i=this.$body.children();for(var n=0;n<i.length;n++){this.expandRow_(false,e(i[n]).data("index"))}}};p.prototype.updateFormatText=function(e,t){if(this.options[i("format%s",e)]){if(typeof t==="string"){this.options[i("format%s",e)]=function(){return t}}else if(typeof t==="function"){this.options[i("format%s",e)]=t}}this.initToolbar();this.initPagination();this.initBody()};var m=["getOptions","getSelections","getAllSelections","getData","load","append","prepend","remove","removeAll","insertRow","updateRow","updateCell","updateByUniqueId","removeByUniqueId","getRowByUniqueId","showRow","hideRow","getHiddenRows","mergeCells","checkAll","uncheckAll","checkInvert","check","uncheck","checkBy","uncheckBy","refresh","resetView","resetWidth","destroy","showLoading","hideLoading","showColumn","hideColumn","getHiddenColumns","getVisibleColumns","showAllColumns","hideAllColumns","filterBy","scrollTo","getScrollPosition","selectPage","prevPage","nextPage","togglePagination","toggleView","refreshOptions","resetSearch","expandRow","collapseRow","expandAllRows","collapseAllRows","updateFormatText"];e.fn.bootstrapTable=function(t){var i,n=Array.prototype.slice.call(arguments,1);this.each(function(){var r=e(this),s=r.data("bootstrap.table"),a=e.extend({},p.DEFAULTS,r.data(),typeof t==="object"&&t);if(typeof t==="string"){if(e.inArray(t,m)<0){throw new Error("Unknown method: "+t)}if(!s){return}i=s[t].apply(s,n);if(t==="destroy"){r.removeData("bootstrap.table")}}if(!s){r.data("bootstrap.table",s=new p(this,a))}});return typeof i==="undefined"?this:i};e.fn.bootstrapTable.Constructor=p;e.fn.bootstrapTable.defaults=p.DEFAULTS;e.fn.bootstrapTable.columnDefaults=p.COLUMN_DEFAULTS;e.fn.bootstrapTable.locales=p.LOCALES;e.fn.bootstrapTable.methods=m;e.fn.bootstrapTable.utils={sprintf:i,getFieldIndex:r,compareObjects:l,calculateObjectValue:o,getItemField:c,objectKeys:h,isIEBrowser:d};e(function(){e('[data-toggle="table"]').bootstrapTable()})})(jQuery);!function(e){"use strict";var t={};var i=[{base:"A",letters:"Aâ¶ï¼¡ÃÃÃáº¦áº¤áºªáº¨ÃÄÄáº°áº®áº´áº²È¦Ç ÃÇáº¢ÃÇºÇÈÈáº áº¬áº¶á¸ÄÈºâ±¯"},{base:"AA",letters:"ê²"},{base:"AE",letters:"ÃÇ¼Ç¢"},{base:"AO",letters:"ê´"},{base:"AU",letters:"ê¶"},{base:"AV",letters:"ê¸êº"},{base:"AY",letters:"ê¼"},{base:"B",letters:"Bâ·ï¼¢á¸á¸á¸ÉÆÆ"},{base:"C",letters:"Câ¸ï¼£ÄÄÄÄÃá¸ÆÈ»ê¾"},{base:"D",letters:"Dâ¹ï¼¤á¸Äá¸á¸á¸á¸ÄÆÆÆê¹"},{base:"DZ",letters:"Ç±Ç"},{base:"Dz",letters:"Ç²Ç"},{base:"E",letters:"Eâºï¼¥ÃÃÃá»áº¾á»á»áº¼Äá¸á¸ÄÄÃáººÄÈÈáº¸á»È¨á¸Äá¸á¸ÆÆ"},{base:"F",letters:"Fâ»ï¼¦á¸Æê»"},{base:"G",letters:"Gâ¼ï¼§Ç´Äá¸ ÄÄ Ç¦Ä¢Ç¤Æê ê½ê¾"},{base:"H",letters:"Hâ½ï¼¨Ä¤á¸¢á¸¦Èá¸¤á¸¨á¸ªÄ¦â±§â±µê"},{base:"I",letters:"Iâ¾ï¼©ÃÃÃÄ¨ÄªÄ¬Ä°Ãá¸®á»ÇÈÈá»Ä®á¸¬Æ"},{base:"J",letters:"Jâ¿ï¼ªÄ´É"},{base:"K",letters:"Kâï¼«á¸°Ç¨á¸²Ä¶á¸´Æâ±©êêêê¢"},{base:"L",letters:"Lâï¼¬Ä¿Ä¹Ä½á¸¶á¸¸Ä»á¸¼á¸ºÅÈ½â±¢â± êêê"},{base:"LJ",letters:"Ç"},{base:"Lj",letters:"Ç"},{base:"M",letters:"Mâï¼­á¸¾á¹á¹â±®Æ"},{base:"N",letters:"Nâï¼®Ç¸ÅÃá¹Åá¹Åá¹á¹È Æêê¤"},{base:"NJ",letters:"Ç"},{base:"Nj",letters:"Ç"},{base:"O",letters:"Oâï¼¯ÃÃÃá»á»á»á»Ãá¹È¬á¹Åá¹á¹ÅÈ®È°ÃÈªá»ÅÇÈÈÆ á»á»á» á»á»¢á»á»ÇªÇ¬ÃÇ¾ÆÆêê"},{base:"OI",letters:"Æ¢"},{base:"OO",letters:"ê"},{base:"OU",letters:"È¢"},{base:"OE",letters:"ÂÅ"},{base:"oe",letters:"ÂÅ"},{base:"P",letters:"Pâï¼°á¹á¹Æ¤â±£êêê"},{base:"Q",letters:"Qâï¼±êêÉ"},{base:"R",letters:"Râï¼²Åá¹ÅÈÈá¹á¹Åá¹Éâ±¤êê¦ê"},{base:"S",letters:"Sâï¼³áºÅá¹¤Åá¹ Å á¹¦á¹¢á¹¨ÈÅâ±¾ê¨ê"},{base:"T",letters:"Tâï¼´á¹ªÅ¤á¹¬ÈÅ¢á¹°á¹®Å¦Æ¬Æ®È¾ê"},{base:"TZ",letters:"ê¨"},{base:"U",letters:"Uâï¼µÃÃÃÅ¨á¹¸Åªá¹ºÅ¬ÃÇÇÇÇá»¦Å®Å°ÇÈÈÆ¯á»ªá»¨á»®á»¬á»°á»¤á¹²Å²á¹¶á¹´É"},{base:"V",letters:"Vâï¼¶á¹¼á¹¾Æ²êÉ"},{base:"VY",letters:"ê "},{base:"W",letters:"Wâï¼·áºáºÅ´áºáºáºâ±²"},{base:"X",letters:"Xâï¼¸áºáº"},{base:"Y",letters:"Yâï¼¹á»²ÃÅ¶á»¸È²áºÅ¸á»¶á»´Æ³Éá»¾"},{base:"Z",letters:"Zâï¼ºÅ¹áºÅ»Å½áºáºÆµÈ¤â±¿â±«ê¢"},{base:"a",letters:"aâï½áºÃ Ã¡Ã¢áº§áº¥áº«áº©Ã£ÄÄáº±áº¯áºµáº³È§Ç¡Ã¤Çáº£Ã¥Ç»ÇÈÈáº¡áº­áº·á¸Äâ±¥É"},{base:"aa",letters:"ê³"},{base:"ae",letters:"Ã¦Ç½Ç£"},{base:"ao",letters:"êµ"},{base:"au",letters:"ê·"},{base:"av",letters:"ê¹ê»"},{base:"ay",letters:"ê½"},{base:"b",letters:"bâï½á¸á¸á¸ÆÆÉ"},{base:"c",letters:"câï½ÄÄÄÄÃ§á¸ÆÈ¼ê¿â"},{base:"d",letters:"dâï½á¸Äá¸á¸á¸á¸ÄÆÉÉêº"},{base:"dz",letters:"Ç³Ç"},{base:"e",letters:"eâï½Ã¨Ã©Ãªá»áº¿á»á»áº½Äá¸á¸ÄÄÃ«áº»ÄÈÈáº¹á»È©á¸Äá¸á¸ÉÉÇ"},{base:"f",letters:"fâï½á¸Æê¼"},{base:"g",letters:"gâï½ÇµÄá¸¡ÄÄ¡Ç§Ä£Ç¥É ê¡áµ¹ê¿"},{base:"h",letters:"hâï½Ä¥á¸£á¸§Èá¸¥á¸©á¸«áºÄ§â±¨â±¶É¥"},{base:"hv",letters:"Æ"},{base:"i",letters:"iâï½Ã¬Ã­Ã®Ä©Ä«Ä­Ã¯á¸¯á»ÇÈÈá»Ä¯á¸­É¨Ä±"},{base:"j",letters:"jâï½ÄµÇ°É"},{base:"k",letters:"kâï½á¸±Ç©á¸³Ä·á¸µÆâ±ªêêêê£"},{base:"l",letters:"lâï½ÅÄºÄ¾á¸·á¸¹Ä¼á¸½á¸»Å¿ÅÆÉ«â±¡êêê"},{base:"lj",letters:"Ç"},{base:"m",letters:"mâï½á¸¿á¹á¹É±É¯"},{base:"n",letters:"nâï½Ç¹ÅÃ±á¹Åá¹Åá¹á¹ÆÉ²Åêê¥"},{base:"nj",letters:"Ç"},{base:"o",letters:"oâï½Ã²Ã³Ã´á»á»á»á»Ãµá¹È­á¹Åá¹á¹ÅÈ¯È±Ã¶È«á»ÅÇÈÈÆ¡á»á»á»¡á»á»£á»á»Ç«Ç­Ã¸Ç¿ÉêêÉµ"},{base:"oi",letters:"Æ£"},{base:"ou",letters:"È£"},{base:"oo",letters:"ê"},{base:"p",letters:"pâï½á¹á¹Æ¥áµ½êêê"},{base:"q",letters:"qâ ï½Éêê"},{base:"r",letters:"râ¡ï½Åá¹ÅÈÈá¹á¹Åá¹ÉÉ½êê§ê"},{base:"s",letters:"sâ¢ï½ÃÅá¹¥Åá¹¡Å¡á¹§á¹£á¹©ÈÅÈ¿ê©êáº"},{base:"t",letters:"tâ£ï½á¹«áºÅ¥á¹­ÈÅ£á¹±á¹¯Å§Æ­Êâ±¦ê"},{base:"tz",letters:"ê©"},{base:"u",letters:"uâ¤ï½Ã¹ÃºÃ»Å©á¹¹Å«á¹»Å­Ã¼ÇÇÇÇá»§Å¯Å±ÇÈÈÆ°á»«á»©á»¯á»­á»±á»¥á¹³Å³á¹·á¹µÊ"},{base:"v",letters:"vâ¥ï½á¹½á¹¿ÊêÊ"},{base:"vy",letters:"ê¡"},{base:"w",letters:"wâ¦ï½áºáºÅµáºáºáºáºâ±³"},{base:"x",letters:"xâ§ï½áºáº"},{base:"y",letters:"yâ¨ï½á»³Ã½Å·á»¹È³áºÃ¿á»·áºá»µÆ´Éá»¿"},{base:"z",letters:"zâ©ï½ÅºáºÅ¼Å¾áºáºÆ¶È¥Éâ±¬ê£"}];var n=function(){for(var e=0;e<i.length;e++){var n=i[e].letters;for(var r=0;r<n.length;r++){t[n[r]]=i[e].base}}};var r=function(e){return e.replace(/[^\u0000-\u007E]/g,function(e){return t[e]||e})};e.extend(e.fn.bootstrapTable.defaults,{searchAccentNeutralise:false});var s=e.fn.bootstrapTable.Constructor,a=s.prototype.init,o=s.prototype.initSearch;s.prototype.init=function(){if(this.options.searchAccentNeutralise){n()}a.apply(this,Array.prototype.slice.apply(arguments))};s.prototype.initSearch=function(){var t=this;if(this.options.sidePagination!=="server"){var i=this.searchText&&this.searchText.toLowerCase();var n=e.isEmptyObject(this.filterColumns)?null:this.filterColumns;this.data=n?e.grep(this.options.data,function(e,t){for(var i in n){if(e[i]!==n[i]){return false}}return true}):this.options.data;this.data=i?e.grep(this.data,function(n,s){for(var a in n){a=e.isNumeric(a)?parseInt(a,10):a;var o=n[a],l=t.columns[e.fn.bootstrapTable.utils.getFieldIndex(t.columns,a)],u=e.inArray(a,t.header.fields);if(l&&l.searchFormatter){o=e.fn.bootstrapTable.utils.calculateObjectValue(l,t.header.formatters[u],[o,n,s],o)}var f=e.inArray(a,t.header.fields);if(f!==-1&&t.header.searchables[f]&&(typeof o==="string"||typeof o==="number")){if(t.options.searchAccentNeutralise){o=r(o);i=r(i)}if(t.options.strictSearch){if((o+"").toLowerCase()===i){return true}}else{if((o+"").toLowerCase().indexOf(i)!==-1){return true}}}}return false}):this.data}}}(jQuery);(function(e){"use strict";var t={sortOrder:"bs.table.sortOrder",sortName:"bs.table.sortName",pageNumber:"bs.table.pageNumber",pageList:"bs.table.pageList",columns:"bs.table.columns",searchText:"bs.table.searchText",filterControl:"bs.table.filterControl"};var i=function(e){var t=e.$header;if(e.options.height){t=e.$tableHeader}return t};var n=function(e){var t="select, input";if(e.options.height){t="table select, table input"}return t};var r=function(){return!!navigator.cookieEnabled};var s=function(e,t){var i=-1;for(var n=0;n<t.length;n++){if(e.toLowerCase()===t[n].toLowerCase()){i=n;break}}return i};var a=function(e,t,i){if(!e.options.cookie||!r()||e.options.cookieIdTable===""){return}if(s(t,e.options.cookiesEnabled)===-1){return}t=e.options.cookieIdTable+"."+t;switch(e.options.cookieStorage){case"cookieStorage":document.cookie=[t,"=",i,"; expires="+e.options.cookieExpire,e.options.cookiePath?"; path="+e.options.cookiePath:"",e.options.cookieDomain?"; domain="+e.options.cookieDomain:"",e.options.cookieSecure?"; secure":""].join("");break;case"localStorage":localStorage.setItem(t,i);break;case"sessionStorage":sessionStorage.setItem(t,i);break;default:return false}return true};var o=function(e,t,i){if(!i){return null}if(s(i,e.options.cookiesEnabled)===-1){return null}i=t+"."+i;switch(e.options.cookieStorage){case"cookieStorage":return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*"+encodeURIComponent(i).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=\\s*([^;]*).*$)|^.*$"),"$1"))||null;case"localStorage":return localStorage.getItem(i);case"sessionStorage":return sessionStorage.getItem(i);default:return null}};var l=function(e,t,i){i=t+"."+i;switch(e.options.cookieStorage){case"cookieStorage":document.cookie=[encodeURIComponent(i),"=","; expires=Thu, 01 Jan 1970 00:00:00 GMT",e.options.cookiePath?"; path="+e.options.cookiePath:"",e.options.cookieDomain?"; domain="+e.options.cookieDomain:""].join("");break;case"localStorage":localStorage.removeItem(i);break;case"sessionStorage":sessionStorage.removeItem(i);break}return true};var u=function(e){var t=e.replace(/[0-9]*/,"");e=e.replace(/[A-Za-z]{1,2}}/,"");switch(t.toLowerCase()){case"s":e=+e;break;case"mi":e=e*60;break;case"h":e=e*60*60;break;case"d":e=e*24*60*60;break;case"m":e=e*30*24*60*60;break;case"y":e=e*365*24*60*60;break;default:e=undefined;break}return e===undefined?"":"; max-age="+e};var f=function(r){setTimeout(function(){var s=JSON.parse(o(r,r.options.cookieIdTable,t.filterControl));if(!r.options.filterControlValuesLoaded&&s){r.options.filterControlValuesLoaded=true;var a={},l=i(r),u=n(r),f=function(t,i){e(i).each(function(i,n){e(t).val(n.text);a[n.field]=n.text})};l.find(u).each(function(){var t=e(this).closest("[data-field]").data("field"),i=e.grep(s,function(e){return e.field===t});f(this,i)});r.initColumnSearch(a)}},250)};e.extend(e.fn.bootstrapTable.defaults,{cookie:false,cookieExpire:"2h",cookiePath:null,cookieDomain:null,cookieSecure:null,cookieIdTable:"",cookiesEnabled:["bs.table.sortOrder","bs.table.sortName","bs.table.pageNumber","bs.table.pageList","bs.table.columns","bs.table.searchText","bs.table.filterControl"],cookieStorage:"cookieStorage",filterControls:[],filterControlValuesLoaded:false});e.fn.bootstrapTable.methods.push("getCookies");e.fn.bootstrapTable.methods.push("deleteCookie");e.extend(e.fn.bootstrapTable.utils,{setCookie:a,getCookie:o});var c=e.fn.bootstrapTable.Constructor,d=c.prototype.init,h=c.prototype.initTable,p=c.prototype.initServer,m=c.prototype.onSort,g=c.prototype.onPageNumber,v=c.prototype.onPageListChange,y=c.prototype.onPageFirst,b=c.prototype.onPagePre,w=c.prototype.onPageNext,x=c.prototype.onPageLast,C=c.prototype.toggleColumn,T=c.prototype.selectPage,_=c.prototype.onSearch;c.prototype.init=function(){var e=0;this.options.filterControls=[];this.options.filterControlValuesLoaded=false;this.options.cookiesEnabled=typeof this.options.cookiesEnabled==="string"?this.options.cookiesEnabled.replace("[","").replace("]","").replace(/ /g,"").toLowerCase().split(","):this.options.cookiesEnabled;if(this.options.filterControl){var i=this;this.$el.on("column-search.bs.table",function(e,n,r){var s=true;for(var o=0;o<i.options.filterControls.length;o++){if(i.options.filterControls[o].field===n){i.options.filterControls[o].text=r;s=false;break}}if(s){i.options.filterControls.push({field:n,text:r})}a(i,t.filterControl,JSON.stringify(i.options.filterControls))}).on("post-body.bs.table",f(i))}d.apply(this,Array.prototype.slice.apply(arguments))};c.prototype.initServer=function(){var i=this,n=[],r=function(e){return e.filterControl&&e.filterControl==="select"},s=function(e){return e.filterData&&e.filterData!=="column"},a=function(){var e=JSON.parse(o(i,i.options.cookieIdTable,t.filterControl));return i.options.cookie&&e};n=e.grep(i.columns,function(e){return r(e)&&!s(e)});c.prototype.initServer=p;if(this.options.filterControl&&a()&&n.length===0){return}p.apply(this,Array.prototype.slice.apply(arguments))};c.prototype.initTable=function(){h.apply(this,Array.prototype.slice.apply(arguments));this.initCookie()};c.prototype.initCookie=function(){if(!this.options.cookie){return}if(this.options.cookieIdTable===""||this.options.cookieExpire===""||!r()){throw new Error("Configuration error. Please review the cookieIdTable, cookieExpire properties, if those properties are ok, then this browser does not support the cookies")}var i=o(this,this.options.cookieIdTable,t.sortOrder),n=o(this,this.options.cookieIdTable,t.sortName),s=o(this,this.options.cookieIdTable,t.pageNumber),a=o(this,this.options.cookieIdTable,t.pageList),l=JSON.parse(o(this,this.options.cookieIdTable,t.columns)),u=o(this,this.options.cookieIdTable,t.searchText);this.options.sortOrder=i?i:this.options.sortOrder;this.options.sortName=n?n:this.options.sortName;this.options.pageNumber=s?+s:this.options.pageNumber;this.options.pageSize=a?a===this.options.formatAllRows()?a:+a:this.options.pageSize;this.options.searchText=u?u:"";if(l){e.each(this.columns,function(t,i){i.visible=e.inArray(i.field,l)!==-1})}};c.prototype.onSort=function(){m.apply(this,Array.prototype.slice.apply(arguments));a(this,t.sortOrder,this.options.sortOrder);a(this,t.sortName,this.options.sortName)};c.prototype.onPageNumber=function(){g.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,this.options.pageNumber)};c.prototype.onPageListChange=function(){v.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageList,this.options.pageSize)};c.prototype.onPageFirst=function(){y.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,this.options.pageNumber)};c.prototype.onPagePre=function(){b.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,this.options.pageNumber)};c.prototype.onPageNext=function(){w.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,this.options.pageNumber)};c.prototype.onPageLast=function(){x.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,this.options.pageNumber)};c.prototype.toggleColumn=function(){C.apply(this,Array.prototype.slice.apply(arguments));var i=[];e.each(this.columns,function(e,t){if(t.visible){i.push(t.field)}});a(this,t.columns,JSON.stringify(i))};c.prototype.selectPage=function(e){T.apply(this,Array.prototype.slice.apply(arguments));a(this,t.pageNumber,e)};c.prototype.onSearch=function(){var i=Array.prototype.slice.apply(arguments);_.apply(this,i);if(e(i[0].currentTarget).parent().hasClass("search")){a(this,t.searchText,this.searchText)}};c.prototype.getCookies=function(){var i=this;var n={};e.each(t,function(e,t){n[e]=o(i,i.options.cookieIdTable,t);if(e==="columns"){n[e]=JSON.parse(n[e])}});return n};c.prototype.deleteCookie=function(e){if(e===""||!r()){return}l(this,this.options.cookieIdTable,t[e])}})(jQuery);!function(e){"use strict";var t=e.fn.bootstrapTable.utils.calculateObjectValue,i=e.fn.bootstrapTable.utils.sprintf;var n=function(t){var i=document.createElement("textarea");e(i).html(t);document.body.appendChild(i);i.select();try{document.execCommand("copy")}catch(e){console.log("Oops, unable to copy")}e(i).remove()};e.extend(e.fn.bootstrapTable.defaults,{copyBtn:false,copyWHiddenBtn:false,copyDelemeter:", "});e.fn.bootstrapTable.methods.push("copyColumnsToClipboard","copyColumnsToClipboardWithHidden");var r=e.fn.bootstrapTable.Constructor,s=r.prototype.initToolbar;r.prototype.initToolbar=function(){s.apply(this,Array.prototype.slice.apply(arguments));var e=this,t=this.$toolbar.find(">.btn-group");if(this.options.clickToSelect||this.options.singleSelect){if(this.options.copyBtn){var i="<button class='btn btn-default' id='copyBtn'><span class='glyphicon glyphicon-copy icon-pencil'></span></button>";t.append(i);t.find("#copyBtn").click(function(){e.copyColumnsToClipboard()})}if(this.options.copyWHiddenBtn){var n="<button class='btn btn-default' id='copyWHiddenBtn'><span class='badge'><span class='glyphicon glyphicon-copy icon-pencil'></span></span></button>";t.append(n);t.find("#copyWHiddenBtn").click(function(){e.copyColumnsToClipboardWithHidden()})}}};r.prototype.copyColumnsToClipboard=function(){var i=this,r="",s=this.options.copyDelemeter;e.each(i.getSelections(),function(n,a){e.each(i.options.columns[0],function(e,o){if(o.field!=="state"&&o.field!=="RowNumber"&&o.visible){if(a[o.field]!==null){r+=t(o,i.header.formatters[e],[a[o.field],a,n],a[o.field])}r+=s}});r+="\r\n"});n(r)};r.prototype.copyColumnsToClipboardWithHidden=function(){var i=this,r="",s=this.options.copyDelemeter;e.each(i.getSelections(),function(n,a){e.each(i.options.columns[0],function(e,o){if(o.field!="state"&&o.field!=="RowNumber"){if(a[o.field]!==null){r+=t(o,i.header.formatters[e],[a[o.field],a,n],a[o.field])}r+=s}});r+="\r\n"});n(r)}}(jQuery);(function(e){"use strict";e.extend(e.fn.bootstrapTable.defaults,{editable:true,onEditableInit:function(){return false},onEditableSave:function(e,t,i,n){return false},onEditableShown:function(e,t,i,n){return false},onEditableHidden:function(e,t,i,n){return false}});e.extend(e.fn.bootstrapTable.Constructor.EVENTS,{"editable-init.bs.table":"onEditableInit","editable-save.bs.table":"onEditableSave","editable-shown.bs.table":"onEditableShown","editable-hidden.bs.table":"onEditableHidden"});var t=e.fn.bootstrapTable.Constructor,i=t.prototype.initTable,n=t.prototype.initBody;t.prototype.initTable=function(){var t=this;i.apply(this,Array.prototype.slice.apply(arguments));if(!this.options.editable){return}e.each(this.columns,function(i,n){if(!n.editable){return}var r={},s=[],a="editable-";var o=function(e,t){var i=e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()});if(i.slice(0,a.length)==a){var n=i.replace(a,"data-");r[n]=t}};e.each(t.options,o);n.formatter=n.formatter||function(e,t,i){return e};n._formatter=n._formatter?n._formatter:n.formatter;n.formatter=function(i,a,l){var u=n._formatter?n._formatter(i,a,l):i;e.each(n,o);e.each(r,function(e,t){s.push(" "+e+'="'+t+'"')});var f=false;if(n.editable.hasOwnProperty("noeditFormatter")){f=n.editable.noeditFormatter(i,a,l)}if(f===false){return['<a href="javascript:void(0)"',' data-name="'+n.field+'"',' data-pk="'+a[t.options.idField]+'"',' data-value="'+u+'"',s.join(""),">"+"</a>"].join("")}else{return f}}})};t.prototype.initBody=function(){var t=this;n.apply(this,Array.prototype.slice.apply(arguments));if(!this.options.editable){return}e.each(this.columns,function(i,n){if(!n.editable){return}t.$body.find('a[data-name="'+n.field+'"]').editable(n.editable).off("save").on("save",function(i,r){var s=t.getData(),a=e(this).parents("tr[data-index]").data("index"),o=s[a],l=o[n.field];e(this).data("value",r.submitValue);o[n.field]=r.submitValue;t.trigger("editable-save",n.field,o,l,e(this));t.resetFooter()});t.$body.find('a[data-name="'+n.field+'"]').editable(n.editable).off("shown").on("shown",function(i,r){var s=t.getData(),a=e(this).parents("tr[data-index]").data("index"),o=s[a];t.trigger("editable-shown",n.field,o,e(this),r)});t.$body.find('a[data-name="'+n.field+'"]').editable(n.editable).off("hidden").on("hidden",function(i,r){var s=t.getData(),a=e(this).parents("tr[data-index]").data("index"),o=s[a];t.trigger("editable-hidden",n.field,o,e(this),r)})});this.trigger("editable-init")}})(jQuery);(function(e){"use strict";var t=e.fn.bootstrapTable.utils.sprintf;var i={json:"JSON",xml:"XML",png:"PNG",csv:"CSV",txt:"TXT",sql:"SQL",doc:"MS-Word",excel:"MS-Excel",xlsx:"MS-Excel (OpenXML)",powerpoint:"MS-Powerpoint",pdf:"PDF"};e.extend(e.fn.bootstrapTable.defaults,{showExport:false,exportDataType:"basic",exportTypes:["json","xml","csv","txt","sql","excel"],exportOptions:{}});e.extend(e.fn.bootstrapTable.defaults.icons,{export:"glyphicon-export icon-share"});e.extend(e.fn.bootstrapTable.locales,{formatExport:function(){return"Export data"}});e.extend(e.fn.bootstrapTable.defaults,e.fn.bootstrapTable.locales);var n=e.fn.bootstrapTable.Constructor,r=n.prototype.initToolbar;n.prototype.initToolbar=function(){this.showToolbar=this.options.showExport;r.apply(this,Array.prototype.slice.apply(arguments));if(this.options.showExport){var n=this,s=this.$toolbar.find(">.btn-group"),a=s.find("div.export");if(!a.length){a=e(['<div class="export btn-group">','<button class="btn'+t(" btn-%s",this.options.buttonsClass)+t(" btn-%s",this.options.iconSize)+' dropdown-toggle" aria-label="export type" '+'title="'+this.options.formatExport()+'" '+'data-toggle="dropdown" type="button">',t('<i class="%s %s"></i> ',this.options.iconsPrefix,this.options.icons.export),'<span class="caret"></span>',"</button>",'<ul class="dropdown-menu" role="menu">',"</ul>","</div>"].join("")).appendTo(s);var o=a.find(".dropdown-menu"),l=this.options.exportTypes;if(typeof this.options.exportTypes==="string"){var u=this.options.exportTypes.slice(1,-1).replace(/ /g,"").split(",");l=[];e.each(u,function(e,t){l.push(t.slice(1,-1))})}e.each(l,function(e,t){if(i.hasOwnProperty(t)){o.append(['<li role="menuitem" data-type="'+t+'">','<a href="javascript:void(0)">',i[t],"</a>","</li>"].join(""))}});o.find("li").click(function(){var t=e(this).data("type"),i=function(){n.$el.tableExport(e.extend({},n.options.exportOptions,{type:t,escape:false}))};if(n.options.exportDataType==="all"&&n.options.pagination){n.$el.one(n.options.sidePagination==="server"?"post-body.bs.table":"page-change.bs.table",function(){i();n.togglePagination()});n.togglePagination()}else if(n.options.exportDataType==="selected"){var r=n.getData(),s=n.getAllSelections();if(n.options.sidePagination==="server"){r={total:n.options.totalRows};r[n.options.dataField]=n.getData();s={total:n.options.totalRows};s[n.options.dataField]=n.getAllSelections()}n.load(s);i();n.load(r)}else{i()}})}}}})(jQuery);(function(e){"use strict";var t=function(t,i){var n={};function r(t,s){if(Object(t)!==t){n[s]=t}else if(e.isArray(t)){for(var a=0,o=t.length;a<o;a++){r(t[a],s?s+i.options.flatSeparator+a:""+a);if(o==0){n[s]=[]}}}else{var l=true;for(var u in t){l=false;r(t[u],s?s+i.options.flatSeparator+u:u)}if(l){n[s]={}}}}r(t,"");return n};var i=function(i,n){var r=[];e.each(!e.isArray(i)?[i]:i,function(e,i){r.push(t(i,n))});return r};e.extend(e.fn.bootstrapTable.defaults,{flat:false,flatSeparator:"."});var n=e.fn.bootstrapTable.Constructor,r=n.prototype.initData;n.prototype.initData=function(e,t){if(this.options.flat){e=i(e?e:this.options.data,this)}r.apply(this,[e,t])}})(jQuery);!function(e){"use strict";e.extend(e.fn.bootstrapTable.defaults,{multipleSearch:false,delimeter:" "});var t=e.fn.bootstrapTable.Constructor,i=t.prototype.initSearch;t.prototype.initSearch=function(){if(this.options.multipleSearch){if(this.searchText===undefined){return}var t=this.searchText.split(this.options.delimeter),n=this,r=e.isEmptyObject(this.filterColumns)?null:this.filterColumns,s=[];if(t.length===1){i.apply(this,Array.prototype.slice.apply(arguments))}else{for(var a=0;a<t.length;a++){var o=t[a].trim();s=o?e.grep(s.length===0?this.options.data:s,function(t,i){for(var r in t){r=e.isNumeric(r)?parseInt(r,10):r;var s=t[r],a=n.columns[e.fn.bootstrapTable.utils.getFieldIndex(n.columns,r)],l=e.inArray(r,n.header.fields);if(a&&a.searchFormatter){s=e.fn.bootstrapTable.utils.calculateObjectValue(a,n.header.formatters[l],[s,t,i],s)}var u=e.inArray(r,n.header.fields);if(u!==-1&&n.header.searchables[u]&&(typeof s==="string"||typeof s==="number")){if(n.options.strictSearch){if((s+"").toLowerCase()===o){return true}}else{if((s+"").toLowerCase().indexOf(o)!==-1){return true}}}}return false}):this.data}this.data=s}}else{i.apply(this,Array.prototype.slice.apply(arguments))}}}(jQuery);(function(e){"use strict";var t=false;var i=function(t){var i=t.$sortModal.selector,n=i.substr(1);if(!e(n).hasClass("modal")){var r='  <div class="modal fade" id="'+n+'" tabindex="-1" role="dialog" aria-labelledby="'+n+'Label" aria-hidden="true">';r+='         <div class="modal-dialog">';r+='             <div class="modal-content">';r+='                 <div class="modal-header">';r+='                     <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>';r+='                     <h4 class="modal-title" id="'+n+'Label">'+t.options.formatMultipleSort()+"</h4>";r+="                 </div>";r+='                 <div class="modal-body">';r+='                     <div class="bootstrap-table">';r+='                         <div class="fixed-table-toolbar">';r+='                             <div class="bars">';r+='                                 <div id="toolbar">';r+='                                     <button id="add" type="button" class="btn btn-default"><i class="'+t.options.iconsPrefix+" "+t.options.icons.plus+'"></i> '+t.options.formatAddLevel()+"</button>";r+='                                     <button id="delete" type="button" class="btn btn-default" disabled><i class="'+t.options.iconsPrefix+" "+t.options.icons.minus+'"></i> '+t.options.formatDeleteLevel()+"</button>";r+="                                 </div>";r+="                             </div>";r+="                         </div>";r+='                         <div class="fixed-table-container">';r+='                             <table id="multi-sort" class="table">';r+="                                 <thead>";r+="                                     <tr>";r+="                                         <th></th>";r+='                                         <th><div class="th-inner">'+t.options.formatColumn()+"</div></th>";r+='                                         <th><div class="th-inner">'+t.options.formatOrder()+"</div></th>";r+="                                     </tr>";r+="                                 </thead>";r+="                                 <tbody></tbody>";r+="                             </table>";r+="                         </div>";r+="                     </div>";r+="                 </div>";r+='                 <div class="modal-footer">';r+='                     <button type="button" class="btn btn-default" data-dismiss="modal">'+t.options.formatCancel()+"</button>";r+='                     <button type="button" class="btn btn-primary">'+t.options.formatSort()+"</button>";r+="                 </div>";r+="             </div>";r+="         </div>";r+="     </div>";e("body").append(e(r));t.$sortModal=e(i);var s=t.$sortModal.find("tbody > tr");t.$sortModal.off("click","#add").on("click","#add",function(){var e=t.$sortModal.find(".multi-sort-name:first option").length,i=t.$sortModal.find("tbody tr").length;if(i<e){i++;t.addLevel();t.setButtonStates()}});t.$sortModal.off("click","#delete").on("click","#delete",function(){var e=t.$sortModal.find(".multi-sort-name:first option").length,i=t.$sortModal.find("tbody tr").length;if(i>1&&i<=e){i--;t.$sortModal.find("tbody tr:last").remove();t.setButtonStates()}});t.$sortModal.off("click",".btn-primary").on("click",".btn-primary",function(){var i=t.$sortModal.find("tbody > tr"),n=t.$sortModal.find("div.alert"),r=[],s=[];t.options.sortPriority=e.map(i,function(t){var i=e(t),n=i.find(".multi-sort-name").val(),s=i.find(".multi-sort-order").val();r.push(n);return{sortName:n,sortOrder:s}});var a=r.sort();for(var o=0;o<r.length-1;o++){if(a[o+1]==a[o]){s.push(a[o])}}if(s.length>0){if(n.length===0){n='<div class="alert alert-danger" role="alert"><strong>'+t.options.formatDuplicateAlertTitle()+"</strong> "+t.options.formatDuplicateAlertDescription()+"</div>";e(n).insertBefore(t.$sortModal.find(".bars"))}}else{if(n.length===1){e(n).remove()}t.$sortModal.modal("hide");t.options.sortName="";if(t.options.sidePagination==="server"){t.options.queryParams=function(e){e.multiSort=t.options.sortPriority;return e};t.initServer(t.options.silentSort);return}t.onMultipleSort()}});if(t.options.sortPriority===null||t.options.sortPriority.length===0){if(t.options.sortName){t.options.sortPriority=[{sortName:t.options.sortName,sortOrder:t.options.sortOrder}]}}if(t.options.sortPriority!==null&&t.options.sortPriority.length>0){if(s.length<t.options.sortPriority.length&&typeof t.options.sortPriority==="object"){for(var a=0;a<t.options.sortPriority.length;a++){t.addLevel(a,t.options.sortPriority[a])}}}else{t.addLevel(0)}t.setButtonStates()}};e.extend(e.fn.bootstrapTable.defaults,{showMultiSort:false,sortPriority:null,onMultipleSort:function(){return false}});e.extend(e.fn.bootstrapTable.defaults.icons,{sort:"glyphicon-sort",plus:"glyphicon-plus",minus:"glyphicon-minus"});e.extend(e.fn.bootstrapTable.Constructor.EVENTS,{"multiple-sort.bs.table":"onMultipleSort"});e.extend(e.fn.bootstrapTable.locales,{formatMultipleSort:function(){return"Multiple Sort"},formatAddLevel:function(){return"Add Level"},formatDeleteLevel:function(){return"Delete Level"},formatColumn:function(){return"Column"},formatOrder:function(){return"Order"},formatSortBy:function(){return"Sort by"},formatThenBy:function(){return"Then by"},formatSort:function(){return"Sort"},formatCancel:function(){return"Cancel"},formatDuplicateAlertTitle:function(){return"Duplicate(s) detected!"},formatDuplicateAlertDescription:function(){return"Please remove or change any duplicate column."},formatSortOrders:function(){return{asc:"Ascending",desc:"Descending"}}});e.extend(e.fn.bootstrapTable.defaults,e.fn.bootstrapTable.locales);var n=e.fn.bootstrapTable.Constructor,r=n.prototype.initToolbar;n.prototype.initToolbar=function(){this.showToolbar=true;var n=this,s="#sortModal_"+this.$el.attr("id");this.$sortModal=e(s);r.apply(this,Array.prototype.slice.apply(arguments));if(this.options.showMultiSort){var a=this.$toolbar.find(">.btn-group").first(),o=this.$toolbar.find("div.multi-sort");if(!o.length){o='  <button class="multi-sort btn btn-default'+(this.options.iconSize===undefined?"":" btn-"+this.options.iconSize)+'" type="button" data-toggle="modal" data-target="'+s+'" title="'+this.options.formatMultipleSort()+'">';o+='     <i class="'+this.options.iconsPrefix+" "+this.options.icons.sort+'"></i>';o+="</button>";a.append(o);i(n)}this.$el.on("sort.bs.table",function(){t=true});this.$el.on("multiple-sort.bs.table",function(){t=false});this.$el.on("load-success.bs.table",function(){if(!t&&n.options.sortPriority!==null&&typeof n.options.sortPriority==="object"&&n.options.sidePagination!=="server"){n.onMultipleSort()}});this.$el.on("column-switch.bs.table",function(e,t){for(var r=0;r<n.options.sortPriority.length;r++){if(n.options.sortPriority[r].sortName===t){n.options.sortPriority.splice(r,1)}}n.assignSortableArrows();n.$sortModal.remove();i(n)});this.$el.on("reset-view.bs.table",function(){if(!t&&n.options.sortPriority!==null&&typeof n.options.sortPriority==="object"){n.assignSortableArrows()}})}};n.prototype.onMultipleSort=function(){var t=this;var i=function(e,t){return e>t?1:e<t?-1:0};var n=function(n,r){var s=[],a=[];for(var o=0;o<t.options.sortPriority.length;o++){var l=t.options.sortPriority[o].sortOrder==="desc"?-1:1,u=n[t.options.sortPriority[o].sortName],f=r[t.options.sortPriority[o].sortName];if(u===undefined||u===null){u=""}if(f===undefined||f===null){f=""}if(e.isNumeric(u)&&e.isNumeric(f)){u=parseFloat(u);f=parseFloat(f)}if(typeof u!=="string"){u=u.toString()}s.push(l*i(u,f));a.push(l*i(f,u))}return i(s,a)};this.data.sort(function(e,t){return n(e,t)});this.initBody();this.assignSortableArrows();this.trigger("multiple-sort")};n.prototype.addLevel=function(t,i){var n=t===0?this.options.formatSortBy():this.options.formatThenBy();this.$sortModal.find("tbody").append(e("<tr>").append(e("<td>").text(n)).append(e("<td>").append(e('<select class="form-control multi-sort-name">'))).append(e("<td>").append(e('<select class="form-control multi-sort-order">'))));var r=this.$sortModal.find(".multi-sort-name").last(),s=this.$sortModal.find(".multi-sort-order").last();e.each(this.columns,function(e,t){if(t.sortable===false||t.visible===false){return true}r.append('<option value="'+t.field+'">'+t.title+"</option>")});e.each(this.options.formatSortOrders(),function(e,t){s.append('<option value="'+e+'">'+t+"</option>")});if(i!==undefined){r.find('option[value="'+i.sortName+'"]').attr("selected",true);s.find('option[value="'+i.sortOrder+'"]').attr("selected",true)}};n.prototype.assignSortableArrows=function(){var t=this,i=t.$header.find("th");for(var n=0;n<i.length;n++){for(var r=0;r<t.options.sortPriority.length;r++){if(e(i[n]).data("field")===t.options.sortPriority[r].sortName){e(i[n]).find(".sortable").removeClass("desc asc").addClass(t.options.sortPriority[r].sortOrder)}}}};n.prototype.setButtonStates=function(){var e=this.$sortModal.find(".multi-sort-name:first option").length,t=this.$sortModal.find("tbody tr").length;if(t==e){this.$sortModal.find("#add").attr("disabled","disabled")}if(t>1){this.$sortModal.find("#delete").removeAttr("disabled")}if(t<e){this.$sortModal.find("#add").removeAttr("disabled")}if(t==1){this.$sortModal.find("#delete").attr("disabled","disabled")}}})(jQuery);function alphanum(e,t){function i(e){var t=[],i=0,n=-1,r=0,s,a;while(s=(a=e.charAt(i++)).charCodeAt(0)){var o=s===46||s>=48&&s<=57;if(o!==r){t[++n]="";r=o}t[n]+=a}return t}function n(e){if(typeof e==="number"){e=""+e}if(!e){e=""}return e}var r=i(n(e));var s=i(n(t));for(x=0;r[x]&&s[x];x++){if(r[x]!==s[x]){var a=Number(r[x]),o=Number(s[x]);if(a==r[x]&&o==s[x]){return a-o}else{return r[x]>s[x]?1:-1}}}return r.length-s.length}function numericOnly(e,t){function i(e){e=e.replace(new RegExp(/[^0-9]/g),"");return parseInt(e,10)}return i(e)-i(t)}!function(e){"use strict";function t(e){var t=e.$header;if(e.options.height){t=e.$tableHeader}return t}function i(e){return t(e).find("[data-filter-field]")}function n(t){var n=i(t);if(!e.isEmptyObject(t.filterColumnsPartial)){n.each(function(i,n){var r=e(n),s=r.attr("data-filter-field"),a=t.filterColumnsPartial[s];if(r.is("select")){r.val(a).trigger("change")}else{r.val(a)}})}}function r(t,i){var n=false,r,s,a=0;e.each(t.columns,function(t,a){r="hidden";s=[];if(!a.visible){return}if(!a.filter){s.push('<div class="no-filter"></div>')}else{var o=a.filter.class?" "+a.filter.class:"";s.push('<div style="margin: 0px 2px 2px 2px;" class="filter'+o+'">');if(a.searchable){n=true;r="visible"}switch(a.filter.type.toLowerCase()){case"input":s.push('<input type="text" data-filter-field="'+a.field+'" style="width: 100%; visibility:'+r+'">');break;case"select":s.push('<select data-filter-field="'+a.field+'" style="width: 100%; visibility:'+r+'"></select>');break}}e.each(i.children().children(),function(t,i){i=e(i);if(i.data("field")===a.field){i.find(".fht-cell").append(s.join(""));return false}})});if(n){var o=i.find("input"),l=i.find("select");if(o.length>0){o.off("keyup").on("keyup",function(e){clearTimeout(a);a=setTimeout(function(){t.onColumnSearch(e)},t.options.searchTimeOut)});o.off("mouseup").on("mouseup",function(i){var n=e(this),r=n.val();if(r===""){return}setTimeout(function(){var e=n.val();if(e===""){clearTimeout(a);a=setTimeout(function(){t.onColumnSearch(i)},t.options.searchTimeOut)}},1)})}if(l.length>0){l.on("select2:select",function(e){t.onColumnSearch(e)})}}else{i.find(".filter").hide()}}function s(i){var n=t(i);e.each(i.columns,function(e,t){if(t.filter&&t.filter.type==="select"){var r=n.find("select[data-filter-field="+t.field+"]");if(r.length>0&&!r.data().select2){t.filter.data.unshift("");var s={placeholder:"",allowClear:true,data:t.filter.data,dropdownParent:i.$el.closest(".bootstrap-table")};r.select2(s);r.on("select2:unselecting",function(e){e.preventDefault();r.val(null).trigger("change");i.searchText=undefined;i.onColumnSearch(e)})}}})}e.extend(e.fn.bootstrapTable.defaults,{filter:false,filterValues:{}});e.extend(e.fn.bootstrapTable.COLUMN_DEFAULTS,{filter:undefined});var a=e.fn.bootstrapTable.Constructor,o=a.prototype.init,l=a.prototype.initHeader,u=a.prototype.initSearch;a.prototype.init=function(){if(this.options.filter){var t=this;if(!e.isEmptyObject(t.options.filterValues)){t.filterColumnsPartial=t.options.filterValues;t.options.filterValues={}}this.$el.on("reset-view.bs.table",function(){if(!t.options.height){return}if(t.$tableHeader.find("select").length>0||t.$tableHeader.find("input").length>0){return}r(t,t.$tableHeader)}).on("post-header.bs.table",function(){var e=0;s(t);clearTimeout(e);e=setTimeout(function(){n(t)},t.options.searchTimeOut-1e3)}).on("column-switch.bs.table",function(e,i){n(t)})}o.apply(this,Array.prototype.slice.apply(arguments))};a.prototype.initHeader=function(){l.apply(this,Array.prototype.slice.apply(arguments));if(this.options.filter){r(this,this.$header)}};a.prototype.initSearch=function(){u.apply(this,Array.prototype.slice.apply(arguments));var t=this,i=t.filterColumnsPartial;if(t.options.sidePagination==="client"){this.data=e.grep(this.data,function(n,r){for(var s in i){var a=t.columns[e.fn.bootstrapTable.utils.getFieldIndex(t.columns,s)],o=i[s].toLowerCase(),l=n[s];l=e.fn.bootstrapTable.utils.calculateObjectValue(t.header,t.header.formatters[e.inArray(s,t.header.fields)],[l,n,r],l);if(a.filterStrictSearch){if(!(e.inArray(s,t.header.fields)!==-1&&(typeof l==="string"||typeof l==="number")&&l.toString().toLowerCase()===o.toString().toLowerCase())){return false}}else{if(!(e.inArray(s,t.header.fields)!==-1&&(typeof l==="string"||typeof l==="number")&&(l+"").toLowerCase().indexOf(o)!==-1)){return false}}}return true})}};a.prototype.onColumnSearch=function(t){var i=e(t.currentTarget).attr("data-filter-field"),n=e.trim(e(t.currentTarget).val());if(e.isEmptyObject(this.filterColumnsPartial)){this.filterColumnsPartial={}}if(n){this.filterColumnsPartial[i]=n}else{delete this.filterColumnsPartial[i]}this.options.pageNumber=1;this.onSearch(t)};a.prototype.setFilterData=function(i,n){var r=this,s=t(r),a=s.find('select[data-filter-field="'+i+'"]');n.unshift("");a.empty();a.select2({data:n,placeholder:"",allowClear:true,dropdownParent:r.$el.closest(".bootstrap-table")});e.each(this.columns,function(e,t){if(t.field===i){t.filter.data=n;return false}})};a.prototype.setFilterValues=function(e){this.filterColumnsPartial=e};e.fn.bootstrapTable.methods.push("setFilterData");e.fn.bootstrapTable.methods.push("setFilterValues")}(jQuery);(function(e){"use strict";var t=e.fn.bootstrapTable.utils.sprintf;e.extend(e.fn.bootstrapTable.defaults,{stickyHeader:false});var i=e.fn.bootstrapTable.Constructor,n=i.prototype.initHeader;i.prototype.initHeader=function(){var i=this;n.apply(this,Array.prototype.slice.apply(arguments));if(!this.options.stickyHeader){return}var r=this.$tableBody.find("table"),s=r.attr("id"),a=r.attr("id")+"-sticky-header",o=a+"-sticky-header-container",l=a+"_sticky_anchor_begin",u=a+"_sticky_anchor_end";r.before(t('<div id="%s" class="hidden"></div>',o));r.before(t('<div id="%s"></div>',l));r.after(t('<div id="%s"></div>',u));r.find("thead").attr("id",a);this.$stickyHeader=e(e("#"+a).clone(true,true));this.$stickyHeader.removeAttr("id");e(window).on("resize."+s,r,f);e(window).on("scroll."+s,r,f);r.closest(".fixed-table-container").find(".fixed-table-body").on("scroll."+s,r,c);this.$el.on("all.bs.table",function(t){i.$stickyHeader=e(e("#"+a).clone(true,true));i.$stickyHeader.removeAttr("id")});function f(t){var n=t.data;var r=n.find("thead").attr("id");if(n.length<1||e("#"+s).length<1){e(window).off("resize."+s);e(window).off("scroll."+s);n.closest(".fixed-table-container").find(".fixed-table-body").off("scroll."+s);return}var a="0";if(i.options.stickyHeaderOffsetY)a=i.options.stickyHeaderOffsetY.replace("px","");var f=e(window).scrollTop();var d=e("#"+l).offset().top-a;var h=e("#"+u).offset().top-a-e("#"+r).css("height").replace("px","");if(f>d&&f<=h){e.each(i.$stickyHeader.find("tr").eq(0).find("th"),function(t,i){e(i).css("min-width",e("#"+r+" tr").eq(0).find("th").eq(t).css("width"))});e("#"+o).removeClass("hidden").addClass("fix-sticky fixed-table-container");e("#"+o).css("top",a+"px");var p=e('<div style="position:absolute;width:100%;overflow-x:hidden;" />');e("#"+o).html(p.append(i.$stickyHeader));c(t)}else{e("#"+o).removeClass("fix-sticky").addClass("hidden")}}function c(t){var i=t.data;var n=i.find("thead").attr("id");e("#"+o).css("width",+i.closest(".fixed-table-body").css("width").replace("px","")+1);e("#"+o+" thead").parent().scrollLeft(Math.abs(e("#"+n).position().left))}}})(jQuery);function setPageAlert(e,t,i){var n=window.translations[t]?window.translations[t]:t;e=e==="error"?"danger":e;$("#alerts").html($('<div class="alert alert-dismissable alert-fadeout fade in alert-'+e+'" role="alert">'+'<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>'+n+"</div>"));if(i!==undefined){window.setTimeout(function(){$(".alert-fadeout").fadeTo(1e3,0).slideUp(1e3,function(){$(this).remove()})},i)}}function clearPageAlert(){$("#alerts").html("")}var FormMapper=function(){var e=function e(t,i){if(t===i.value){i.checked=true}else{t=i.defaultChecked?i.defaultChecked:false}};var t=function e(t,i){if($.type(t)==="undefined"||t===null){t=i.defaultValue?i.defaultValue:""}i.value=new Date(t).toISOString().split("T")[0]};var i=function t(i,n){e(i,n)};var n=function e(t,i){if($.type(t)==="undefined"||t===null){t=i.defaultValue?i.defaultValue:""}t=$.isArray(t)?t:[t];for(var n=0;n<i.options.length;n++){i.options[n].selected|=t.indexOf(i.options[n].value)>-1}$(i).trigger("change")};var r=function e(t,i){if($.type(t)==="undefined"||t===null){t="core.placeholder"}i.value=t.toString()||t;$(i).trigger("change")};var s=function e(t,i){if($.type(t)==="undefined"||t===null||t===""){t="core.placeholder"}if($.type(window.translations)!=="undefined"){t=window.translations[t]?window.translations[t]:t}$("#"+i).html(t)};var a=function e(t,i){if($.type(t)==="undefined"||t===null){i.value=""}else{i.value=t}};var o=function s(o,l){if(!l){return}var u=l.type||l[0].type;switch(u){case"radio":i(o,l);break;case"checkbox":e(o,l);break;case"select-multiple":n(o,l);break;case"select":case"select-one":r(o,l);break;case"date":t(o,l);break;default:a(o,l);break}};var l=function e(t,i){for(var n in t){if(!t.hasOwnProperty(n)){continue}var r=t[n].value;if($.type(r)==="object"){e(r,i)}else if(t[n].name==="static"){s(r,n)}else{var a=i.elements.namedItem(n);o(r,a)}}};return{mapDataToCheckboxField:e,mapDataToDateField:t,mapDataToRadioField:i,mapDataToSelectField:r,mapDataToSelectMultipleField:n,mapDataToTextField:a,mapDataToField:o,mapDataToForm:l}}();$("form").submit(function(){$(".readonly-select").prop("disabled",false);$(".readonly-required").prop("required",true)});var NoteSaveButton=function(e){var t=$.summernote.ui;var i=t.button({contents:'<i class="fa fa-child"/>Save',tooltip:"save",click:function(){var t={route:pageRoute,content:e.invoke("code")};var i=Router.generatePath("dime.api.page.content",{});$.post(i,JSON.stringify(t),function(e){})}});return i.render()};$("#pageedit").on("click",function(){if($(this).hasClass("active")){$(".inlineedit").summernote("destroy")}else{$(".inlineedit").summernote({lang:lang,focus:true,buttons:{save:NoteSaveButton},toolbar:[["style",["style"]],["font",["fontname","fontsize"]],["textstyle",["bold","italic","underline","strikethrough","superscript","subscript","clear"]],["color",["color"]],["para",["ul","ol","paragraph","height"]],["insert",["picture","link","video"]],["table",["table"]],["hr",["hr"]],["view",["fullscreen","codeview"]],["edit",["undo","redo"]],["help",["help"]],["save",["save"]]]})}});var Router=function(){var e="";var t=[];var i=function e(t,i){i=i===undefined?[]:i;this.base=this.base===undefined?"":this.base;var n=this.routes[t];if(n===undefined){return undefined}var r=this.base+n.path;for(var s in i){if(i.hasOwnProperty(s)){r=r.replace("{"+s+"}",i[s])}}return r};var n=function e(t){this.base=t};var r=function e(t){this.routes=t};return{generatePath:i,setBasePath:n,setRoutes:r}}();function debounce(e,t,i){var n;return function(){var r=this,s=arguments;var a=function(){n=null;if(!i){e.apply(r,s)}};var o=i&&!n;clearTimeout(n);n=setTimeout(a,t);if(o){e.apply(r,s)}}}$(document).ready(function(){moment.locale(lang);$.extend($.fn.bootstrapTable.defaults,$.fn.bootstrapTable.locales[lang])});$(document).ready(function(){$.fn.select2.defaults.set("language",lang);$.fn.select2.defaults.set("minimumResultsForSearch",11);$.fn.select2.defaults.set("width","resolve");$("select").select2();$(".select2.select2-container").css("width","100%");$(".datetimepicker-input").datetimepicker({locale:lang,showClear:true,showClose:true,showTodayButton:true,allowInputToggle:true});$(".readonly-required").prop("required",false);$(".readonly-select").prop("disabled",true)});$(document).ready(function(){$(".add-module-selector").on("click",function(){console.log({data:$(this).attr("data-module")});$(".record-add-form").hide();$(".record-add-form").filter("."+$(this).attr("data-module")).show()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
