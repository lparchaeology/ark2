(function(e,t){"use strict";if(typeof module==="object"&&typeof module.exports==="object"){module.exports=e.document?t(e,true):function(e){if(!e.document){throw new Error("jQuery requires a window with a document")}return t(e)}}else{t(e)}})(typeof window!=="undefined"?window:this,function(e,t){"use strict";var n=[];var r=e.document;var i=Object.getPrototypeOf;var a=n.slice;var o=n.concat;var s=n.push;var u=n.indexOf;var f={};var l=f.toString;var c=f.hasOwnProperty;var d=c.toString;var p=d.call(Object);var h={};var m=function e(t){return typeof t==="function"&&typeof t.nodeType!=="number"};var g=function e(t){return t!=null&&t===t.window};var v={type:true,src:true,noModule:true};function y(e,t,n){t=t||r;var i,a=t.createElement("script");a.text=e;if(n){for(i in v){if(n[i]){a[i]=n[i]}}}t.head.appendChild(a).parentNode.removeChild(a)}function x(e){if(e==null){return e+""}return typeof e==="object"||typeof e==="function"?f[l.call(e)]||"object":typeof e}var b="3.3.1",w=function(e,t){return new w.fn.init(e,t)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;w.fn=w.prototype={jquery:b,constructor:w,length:0,toArray:function(){return a.call(this)},get:function(e){if(e==null){return a.call(this)}return e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);t.prevObject=this;return t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice};w.extend=w.fn.extend=function(){var e,t,n,r,i,a,o=arguments[0]||{},s=1,u=arguments.length,f=false;if(typeof o==="boolean"){f=o;o=arguments[s]||{};s++}if(typeof o!=="object"&&!m(o)){o={}}if(s===u){o=this;s--}for(;s<u;s++){if((e=arguments[s])!=null){for(t in e){n=o[t];r=e[t];if(o===r){continue}if(f&&r&&(w.isPlainObject(r)||(i=Array.isArray(r)))){if(i){i=false;a=n&&Array.isArray(n)?n:[]}else{a=n&&w.isPlainObject(n)?n:{}}o[t]=w.extend(f,a,r)}else if(r!==undefined){o[t]=r}}}}return o};w.extend({expando:"jQuery"+(b+Math.random()).replace(/\D/g,""),isReady:true,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;if(!e||l.call(e)!=="[object Object]"){return false}t=i(e);if(!t){return true}n=c.call(t,"constructor")&&t.constructor;return typeof n==="function"&&d.call(n)===p},isEmptyObject:function(e){var t;for(t in e){return false}return true},globalEval:function(e){y(e)},each:function(e,t){var n,r=0;if(k(e)){n=e.length;for(;r<n;r++){if(t.call(e[r],r,e[r])===false){break}}}else{for(r in e){if(t.call(e[r],r,e[r])===false){break}}}return e},trim:function(e){return e==null?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];if(e!=null){if(k(Object(e))){w.merge(n,typeof e==="string"?[e]:e)}else{s.call(n,e)}}return n},inArray:function(e,t,n){return t==null?-1:u.call(t,e,n)},merge:function(e,t){var n=+t.length,r=0,i=e.length;for(;r<n;r++){e[i++]=t[r]}e.length=i;return e},grep:function(e,t,n){var r,i=[],a=0,o=e.length,s=!n;for(;a<o;a++){r=!t(e[a],a);if(r!==s){i.push(e[a])}}return i},map:function(e,t,n){var r,i,a=0,s=[];if(k(e)){r=e.length;for(;a<r;a++){i=t(e[a],a,n);if(i!=null){s.push(i)}}}else{for(a in e){i=t(e[a],a,n);if(i!=null){s.push(i)}}}return o.apply([],s)},guid:1,support:h});if(typeof Symbol==="function"){w.fn[Symbol.iterator]=n[Symbol.iterator]}w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){f["[object "+t+"]"]=t.toLowerCase()});function k(e){var t=!!e&&"length"in e&&e.length,n=x(e);if(m(e)||g(e)){return false}return n==="array"||t===0||typeof t==="number"&&t>0&&t-1 in e}var C=function(e){var t,n,r,i,a,o,s,u,f,l,c,d,p,h,m,g,v,y,x,b="sizzle"+1*new Date,w=e.document,T=0,k=0,C=oe(),S=oe(),j=oe(),E=function(e,t){if(e===t){c=true}return 0},D={}.hasOwnProperty,A=[],N=A.pop,L=A.push,q=A.push,O=A.slice,H=function(e,t){var n=0,r=e.length;for(;n<r;n++){if(e[n]===t){return n}}return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+M+"*("+I+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+M+"*\\]",F=":("+I+")(?:\\(("+"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|"+"((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|"+".*"+")\\)|)",W=new RegExp(M+"+","g"),$=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),B=new RegExp("^"+M+"*,"+M+"*"),_=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),X=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),z=new RegExp(F),U=new RegExp("^"+I+"$"),V={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,r&1023|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){if(t){if(e==="\0"){return"ï¿½"}return e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" "}return"\\"+e},re=function(){d()},ie=ye(function(e){return e.disabled===true&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{q.apply(A=O.call(w.childNodes),w.childNodes);A[w.childNodes.length].nodeType}catch(e){q={apply:A.length?function(e,t){L.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]){}e.length=n-1}}}function ae(e,t,r,i){var a,s,f,l,c,h,v,y=t&&t.ownerDocument,T=t?t.nodeType:9;r=r||[];if(typeof e!=="string"||!e||T!==1&&T!==9&&T!==11){return r}if(!i){if((t?t.ownerDocument||t:w)!==p){d(t)}t=t||p;if(m){if(T!==11&&(c=Q.exec(e))){if(a=c[1]){if(T===9){if(f=t.getElementById(a)){if(f.id===a){r.push(f);return r}}else{return r}}else{if(y&&(f=y.getElementById(a))&&x(t,f)&&f.id===a){r.push(f);return r}}}else if(c[2]){q.apply(r,t.getElementsByTagName(e));return r}else if((a=c[3])&&n.getElementsByClassName&&t.getElementsByClassName){q.apply(r,t.getElementsByClassName(a));return r}}if(n.qsa&&!j[e+" "]&&(!g||!g.test(e))){if(T!==1){y=t;v=e}else if(t.nodeName.toLowerCase()!=="object"){if(l=t.getAttribute("id")){l=l.replace(te,ne)}else{t.setAttribute("id",l=b)}h=o(e);s=h.length;while(s--){h[s]="#"+l+" "+ve(h[s])}v=h.join(",");y=K.test(e)&&me(t.parentNode)||t}if(v){try{q.apply(r,y.querySelectorAll(v));return r}catch(e){}finally{if(l===b){t.removeAttribute("id")}}}}}}return u(e.replace($,"$1"),t,r,i)}function oe(){var e=[];function t(n,i){if(e.push(n+" ")>r.cacheLength){delete t[e.shift()]}return t[n+" "]=i}return t}function se(e){e[b]=true;return e}function ue(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return false}finally{if(t.parentNode){t.parentNode.removeChild(t)}t=null}}function fe(e,t){var n=e.split("|"),i=n.length;while(i--){r.attrHandle[n[i]]=t}}function le(e,t){var n=t&&e,r=n&&e.nodeType===1&&t.nodeType===1&&e.sourceIndex-t.sourceIndex;if(r){return r}if(n){while(n=n.nextSibling){if(n===t){return-1}}}return e?1:-1}function ce(e){return function(t){var n=t.nodeName.toLowerCase();return n==="input"&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return(n==="input"||n==="button")&&t.type===e}}function pe(e){return function(t){if("form"in t){if(t.parentNode&&t.disabled===false){if("label"in t){if("label"in t.parentNode){return t.parentNode.disabled===e}else{return t.disabled===e}}return t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e}return t.disabled===e}else if("label"in t){return t.disabled===e}return false}}function he(e){return se(function(t){t=+t;return se(function(n,r){var i,a=e([],n.length,t),o=a.length;while(o--){if(n[i=a[o]]){n[i]=!(r[i]=n[i])}}})})}function me(e){return e&&typeof e.getElementsByTagName!=="undefined"&&e}n=ae.support={};a=ae.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?t.nodeName!=="HTML":false};d=ae.setDocument=function(e){var t,i,o=e?e.ownerDocument||e:w;if(o===p||o.nodeType!==9||!o.documentElement){return p}p=o;h=p.documentElement;m=!a(p);if(w!==p&&(i=p.defaultView)&&i.top!==i){if(i.addEventListener){i.addEventListener("unload",re,false)}else if(i.attachEvent){i.attachEvent("onunload",re)}}n.attributes=ue(function(e){e.className="i";return!e.getAttribute("className")});n.getElementsByTagName=ue(function(e){e.appendChild(p.createComment(""));return!e.getElementsByTagName("*").length});n.getElementsByClassName=J.test(p.getElementsByClassName);n.getById=ue(function(e){h.appendChild(e).id=b;return!p.getElementsByName||!p.getElementsByName(b).length});if(n.getById){r.filter["ID"]=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}};r.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&m){var n=t.getElementById(e);return n?[n]:[]}}}else{r.filter["ID"]=function(e){var t=e.replace(Z,ee);return function(e){var n=typeof e.getAttributeNode!=="undefined"&&e.getAttributeNode("id");return n&&n.value===t}};r.find["ID"]=function(e,t){if(typeof t.getElementById!=="undefined"&&m){var n,r,i,a=t.getElementById(e);if(a){n=a.getAttributeNode("id");if(n&&n.value===e){return[a]}i=t.getElementsByName(e);r=0;while(a=i[r++]){n=a.getAttributeNode("id");if(n&&n.value===e){return[a]}}}return[]}}}r.find["TAG"]=n.getElementsByTagName?function(e,t){if(typeof t.getElementsByTagName!=="undefined"){return t.getElementsByTagName(e)}else if(n.qsa){return t.querySelectorAll(e)}}:function(e,t){var n,r=[],i=0,a=t.getElementsByTagName(e);if(e==="*"){while(n=a[i++]){if(n.nodeType===1){r.push(n)}}return r}return a};r.find["CLASS"]=n.getElementsByClassName&&function(e,t){if(typeof t.getElementsByClassName!=="undefined"&&m){return t.getElementsByClassName(e)}};v=[];g=[];if(n.qsa=J.test(p.querySelectorAll)){ue(function(e){h.appendChild(e).innerHTML="<a id='"+b+"'></a>"+"<select id='"+b+"-\r\\' msallowcapture=''>"+"<option selected=''></option></select>";if(e.querySelectorAll("[msallowcapture^='']").length){g.push("[*^$]="+M+"*(?:''|\"\")")}if(!e.querySelectorAll("[selected]").length){g.push("\\["+M+"*(?:value|"+P+")")}if(!e.querySelectorAll("[id~="+b+"-]").length){g.push("~=")}if(!e.querySelectorAll(":checked").length){g.push(":checked")}if(!e.querySelectorAll("a#"+b+"+*").length){g.push(".#.+[+~]")}});ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a>"+"<select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden");e.appendChild(t).setAttribute("name","D");if(e.querySelectorAll("[name=d]").length){g.push("name"+M+"*[*^$|!~]?=")}if(e.querySelectorAll(":enabled").length!==2){g.push(":enabled",":disabled")}h.appendChild(e).disabled=true;if(e.querySelectorAll(":disabled").length!==2){g.push(":enabled",":disabled")}e.querySelectorAll("*,:x");g.push(",.*:")})}if(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector)){ue(function(e){n.disconnectedMatch=y.call(e,"*");y.call(e,"[s!='']:x");v.push("!=",F)})}g=g.length&&new RegExp(g.join("|"));v=v.length&&new RegExp(v.join("|"));t=J.test(h.compareDocumentPosition);x=t||J.test(h.contains)?function(e,t){var n=e.nodeType===9?e.documentElement:e,r=t&&t.parentNode;return e===r||!!(r&&r.nodeType===1&&(n.contains?n.contains(r):e.compareDocumentPosition&&e.compareDocumentPosition(r)&16))}:function(e,t){if(t){while(t=t.parentNode){if(t===e){return true}}}return false};E=t?function(e,t){if(e===t){c=true;return 0}var r=!e.compareDocumentPosition-!t.compareDocumentPosition;if(r){return r}r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1;if(r&1||!n.sortDetached&&t.compareDocumentPosition(e)===r){if(e===p||e.ownerDocument===w&&x(w,e)){return-1}if(t===p||t.ownerDocument===w&&x(w,t)){return 1}return l?H(l,e)-H(l,t):0}return r&4?-1:1}:function(e,t){if(e===t){c=true;return 0}var n,r=0,i=e.parentNode,a=t.parentNode,o=[e],s=[t];if(!i||!a){return e===p?-1:t===p?1:i?-1:a?1:l?H(l,e)-H(l,t):0}else if(i===a){return le(e,t)}n=e;while(n=n.parentNode){o.unshift(n)}n=t;while(n=n.parentNode){s.unshift(n)}while(o[r]===s[r]){r++}return r?le(o[r],s[r]):o[r]===w?-1:s[r]===w?1:0};return p};ae.matches=function(e,t){return ae(e,null,null,t)};ae.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p){d(e)}t=t.replace(X,"='$1']");if(n.matchesSelector&&m&&!j[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t))){try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&e.document.nodeType!==11){return r}}catch(e){}}return ae(t,p,null,[e]).length>0};ae.contains=function(e,t){if((e.ownerDocument||e)!==p){d(e)}return x(e,t)};ae.attr=function(e,t){if((e.ownerDocument||e)!==p){d(e)}var i=r.attrHandle[t.toLowerCase()],a=i&&D.call(r.attrHandle,t.toLowerCase())?i(e,t,!m):undefined;return a!==undefined?a:n.attributes||!m?e.getAttribute(t):(a=e.getAttributeNode(t))&&a.specified?a.value:null};ae.escape=function(e){return(e+"").replace(te,ne)};ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)};ae.uniqueSort=function(e){var t,r=[],i=0,a=0;c=!n.detectDuplicates;l=!n.sortStable&&e.slice(0);e.sort(E);if(c){while(t=e[a++]){if(t===e[a]){i=r.push(a)}}while(i--){e.splice(r[i],1)}}l=null;return e};i=ae.getText=function(e){var t,n="",r=0,a=e.nodeType;if(!a){while(t=e[r++]){n+=i(t)}}else if(a===1||a===9||a===11){if(typeof e.textContent==="string"){return e.textContent}else{for(e=e.firstChild;e;e=e.nextSibling){n+=i(e)}}}else if(a===3||a===4){return e.nodeValue}return n};r=ae.selectors={cacheLength:50,createPseudo:se,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){e[1]=e[1].replace(Z,ee);e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee);if(e[2]==="~="){e[3]=" "+e[3]+" "}return e.slice(0,4)},CHILD:function(e){e[1]=e[1].toLowerCase();if(e[1].slice(0,3)==="nth"){if(!e[3]){ae.error(e[0])}e[4]=+(e[4]?e[5]+(e[6]||1):2*(e[3]==="even"||e[3]==="odd"));e[5]=+(e[7]+e[8]||e[3]==="odd")}else if(e[3]){ae.error(e[0])}return e},PSEUDO:function(e){var t,n=!e[6]&&e[2];if(V["CHILD"].test(e[0])){return null}if(e[3]){e[2]=e[4]||e[5]||""}else if(n&&z.test(n)&&(t=o(n,true))&&(t=n.indexOf(")",n.length-t)-n.length)){e[0]=e[0].slice(0,t);e[2]=n.slice(0,t)}return e.slice(0,3)}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return e==="*"?function(){return true}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&C(e,function(e){return t.test(typeof e.className==="string"&&e.className||typeof e.getAttribute!=="undefined"&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=ae.attr(r,e);if(i==null){return t==="!="}if(!t){return true}i+="";return t==="="?i===n:t==="!="?i!==n:t==="^="?n&&i.indexOf(n)===0:t==="*="?n&&i.indexOf(n)>-1:t==="$="?n&&i.slice(-n.length)===n:t==="~="?(" "+i.replace(W," ")+" ").indexOf(n)>-1:t==="|="?i===n||i.slice(0,n.length+1)===n+"-":false}},CHILD:function(e,t,n,r,i){var a=e.slice(0,3)!=="nth",o=e.slice(-4)!=="last",s=t==="of-type";return r===1&&i===0?function(e){return!!e.parentNode}:function(t,n,u){var f,l,c,d,p,h,m=a!==o?"nextSibling":"previousSibling",g=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!u&&!s,x=false;if(g){if(a){while(m){d=t;while(d=d[m]){if(s?d.nodeName.toLowerCase()===v:d.nodeType===1){return false}}h=m=e==="only"&&!h&&"nextSibling"}return true}h=[o?g.firstChild:g.lastChild];if(o&&y){d=g;c=d[b]||(d[b]={});l=c[d.uniqueID]||(c[d.uniqueID]={});f=l[e]||[];p=f[0]===T&&f[1];x=p&&f[2];d=p&&g.childNodes[p];while(d=++p&&d&&d[m]||(x=p=0)||h.pop()){if(d.nodeType===1&&++x&&d===t){l[e]=[T,p,x];break}}}else{if(y){d=t;c=d[b]||(d[b]={});l=c[d.uniqueID]||(c[d.uniqueID]={});f=l[e]||[];p=f[0]===T&&f[1];x=p}if(x===false){while(d=++p&&d&&d[m]||(x=p=0)||h.pop()){if((s?d.nodeName.toLowerCase()===v:d.nodeType===1)&&++x){if(y){c=d[b]||(d[b]={});l=c[d.uniqueID]||(c[d.uniqueID]={});l[e]=[T,x]}if(d===t){break}}}}}x-=i;return x===r||x%r===0&&x/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);if(i[b]){return i(t)}if(i.length>1){n=[e,e,"",t];return r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var r,a=i(e,t),o=a.length;while(o--){r=H(e,a[o]);e[r]=!(n[r]=a[o])}}):function(e){return i(e,0,n)}}return i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace($,"$1"));return r[b]?se(function(e,t,n,i){var a,o=r(e,null,i,[]),s=e.length;while(s--){if(a=o[s]){e[s]=!(t[s]=a)}}}):function(e,i,a){t[0]=e;r(t,null,a,n);t[0]=null;return!n.pop()}}),has:se(function(e){return function(t){return ae(e,t).length>0}}),contains:se(function(e){e=e.replace(Z,ee);return function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){if(!U.test(e||"")){ae.error("unsupported lang: "+e)}e=e.replace(Z,ee).toLowerCase();return function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang")){n=n.toLowerCase();return n===e||n.indexOf(e+"-")===0}}while((t=t.parentNode)&&t.nodeType===1);return false}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(false),disabled:pe(true),checked:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&!!e.checked||t==="option"&&!!e.selected},selected:function(e){if(e.parentNode){e.parentNode.selectedIndex}return e.selected===true},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling){if(e.nodeType<6){return false}}return true},parent:function(e){return!r.pseudos["empty"](e)},header:function(e){return G.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&e.type==="button"||t==="button"},text:function(e){var t;return e.nodeName.toLowerCase()==="input"&&e.type==="text"&&((t=e.getAttribute("type"))==null||t.toLowerCase()==="text")},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){var n=0;for(;n<t;n+=2){e.push(n)}return e}),odd:he(function(e,t){var n=1;for(;n<t;n+=2){e.push(n)}return e}),lt:he(function(e,t,n){var r=n<0?n+t:n;for(;--r>=0;){e.push(r)}return e}),gt:he(function(e,t,n){var r=n<0?n+t:n;for(;++r<t;){e.push(r)}return e})}};r.pseudos["nth"]=r.pseudos["eq"];for(t in{radio:true,checkbox:true,file:true,password:true,image:true}){r.pseudos[t]=ce(t)}for(t in{submit:true,reset:true}){r.pseudos[t]=de(t)}function ge(){}ge.prototype=r.filters=r.pseudos;r.setFilters=new ge;o=ae.tokenize=function(e,t){var n,i,a,o,s,u,f,l=S[e+" "];if(l){return t?0:l.slice(0)}s=e;u=[];f=r.preFilter;while(s){if(!n||(i=B.exec(s))){if(i){s=s.slice(i[0].length)||s}u.push(a=[])}n=false;if(i=_.exec(s)){n=i.shift();a.push({value:n,type:i[0].replace($," ")});s=s.slice(n.length)}for(o in r.filter){if((i=V[o].exec(s))&&(!f[o]||(i=f[o](i)))){n=i.shift();a.push({value:n,type:o,matches:i});s=s.slice(n.length)}}if(!n){break}}return t?s.length:s?ae.error(e):S(e,u).slice(0)};function ve(e){var t=0,n=e.length,r="";for(;t<n;t++){r+=e[t].value}return r}function ye(e,t,n){var r=t.dir,i=t.next,a=i||r,o=n&&a==="parentNode",s=k++;return t.first?function(t,n,i){while(t=t[r]){if(t.nodeType===1||o){return e(t,n,i)}}return false}:function(t,n,u){var f,l,c,d=[T,s];if(u){while(t=t[r]){if(t.nodeType===1||o){if(e(t,n,u)){return true}}}}else{while(t=t[r]){if(t.nodeType===1||o){c=t[b]||(t[b]={});l=c[t.uniqueID]||(c[t.uniqueID]={});if(i&&i===t.nodeName.toLowerCase()){t=t[r]||t}else if((f=l[a])&&f[0]===T&&f[1]===s){return d[2]=f[2]}else{l[a]=d;if(d[2]=e(t,n,u)){return true}}}}}return false}}function xe(e){return e.length>1?function(t,n,r){var i=e.length;while(i--){if(!e[i](t,n,r)){return false}}return true}:e[0]}function be(e,t,n){var r=0,i=t.length;for(;r<i;r++){ae(e,t[r],n)}return n}function we(e,t,n,r,i){var a,o=[],s=0,u=e.length,f=t!=null;for(;s<u;s++){if(a=e[s]){if(!n||n(a,r,i)){o.push(a);if(f){t.push(s)}}}}return o}function Te(e,t,n,r,i,a){if(r&&!r[b]){r=Te(r)}if(i&&!i[b]){i=Te(i,a)}return se(function(a,o,s,u){var f,l,c,d=[],p=[],h=o.length,m=a||be(t||"*",s.nodeType?[s]:s,[]),g=e&&(a||!t)?we(m,d,e,s,u):m,v=n?i||(a?e:h||r)?[]:o:g;if(n){n(g,v,s,u)}if(r){f=we(v,p);r(f,[],s,u);l=f.length;while(l--){if(c=f[l]){v[p[l]]=!(g[p[l]]=c)}}}if(a){if(i||e){if(i){f=[];l=v.length;while(l--){if(c=v[l]){f.push(g[l]=c)}}i(null,v=[],f,u)}l=v.length;while(l--){if((c=v[l])&&(f=i?H(a,c):d[l])>-1){a[f]=!(o[f]=c)}}}}else{v=we(v===o?v.splice(h,v.length):v);if(i){i(null,o,v,u)}else{q.apply(o,v)}}})}function ke(e){var t,n,i,a=e.length,o=r.relative[e[0].type],s=o||r.relative[" "],u=o?1:0,l=ye(function(e){return e===t},s,true),c=ye(function(e){return H(t,e)>-1},s,true),d=[function(e,n,r){var i=!o&&(r||n!==f)||((t=n).nodeType?l(e,n,r):c(e,n,r));t=null;return i}];for(;u<a;u++){if(n=r.relative[e[u].type]){d=[ye(xe(d),n)]}else{n=r.filter[e[u].type].apply(null,e[u].matches);if(n[b]){i=++u;for(;i<a;i++){if(r.relative[e[i].type]){break}}return Te(u>1&&xe(d),u>1&&ve(e.slice(0,u-1).concat({value:e[u-2].type===" "?"*":""})).replace($,"$1"),n,u<i&&ke(e.slice(u,i)),i<a&&ke(e=e.slice(i)),i<a&&ve(e))}d.push(n)}}return xe(d)}function Ce(e,t){var n=t.length>0,i=e.length>0,a=function(a,o,s,u,l){var c,h,g,v=0,y="0",x=a&&[],b=[],w=f,k=a||i&&r.find["TAG"]("*",l),C=T+=w==null?1:Math.random()||.1,S=k.length;if(l){f=o===p||o||l}for(;y!==S&&(c=k[y])!=null;y++){if(i&&c){h=0;if(!o&&c.ownerDocument!==p){d(c);s=!m}while(g=e[h++]){if(g(c,o||p,s)){u.push(c);break}}if(l){T=C}}if(n){if(c=!g&&c){v--}if(a){x.push(c)}}}v+=y;if(n&&y!==v){h=0;while(g=t[h++]){g(x,b,o,s)}if(a){if(v>0){while(y--){if(!(x[y]||b[y])){b[y]=N.call(u)}}}b=we(b)}q.apply(u,b);if(l&&!a&&b.length>0&&v+t.length>1){ae.uniqueSort(u)}}if(l){T=C;f=w}return x};return n?se(a):a}s=ae.compile=function(e,t){var n,r=[],i=[],a=j[e+" "];if(!a){if(!t){t=o(e)}n=t.length;while(n--){a=ke(t[n]);if(a[b]){r.push(a)}else{i.push(a)}}a=j(e,Ce(i,r));a.selector=e}return a};u=ae.select=function(e,t,n,i){var a,u,f,l,c,d=typeof e==="function"&&e,p=!i&&o(e=d.selector||e);n=n||[];if(p.length===1){u=p[0]=p[0].slice(0);if(u.length>2&&(f=u[0]).type==="ID"&&t.nodeType===9&&m&&r.relative[u[1].type]){t=(r.find["ID"](f.matches[0].replace(Z,ee),t)||[])[0];if(!t){return n}else if(d){t=t.parentNode}e=e.slice(u.shift().value.length)}a=V["needsContext"].test(e)?0:u.length;while(a--){f=u[a];if(r.relative[l=f.type]){break}if(c=r.find[l]){if(i=c(f.matches[0].replace(Z,ee),K.test(u[0].type)&&me(t.parentNode)||t)){u.splice(a,1);e=i.length&&ve(u);if(!e){q.apply(n,i);return n}break}}}}(d||s(e,p))(i,t,!m,n,!t||K.test(e)&&me(t.parentNode)||t);return n};n.sortStable=b.split("").sort(E).join("")===b;n.detectDuplicates=!!c;d();n.sortDetached=ue(function(e){return e.compareDocumentPosition(p.createElement("fieldset"))&1});if(!ue(function(e){e.innerHTML="<a href='#'></a>";return e.firstChild.getAttribute("href")==="#"})){fe("type|href|height|width",function(e,t,n){if(!n){return e.getAttribute(t,t.toLowerCase()==="type"?1:2)}})}if(!n.attributes||!ue(function(e){e.innerHTML="<input/>";e.firstChild.setAttribute("value","");return e.firstChild.getAttribute("value")===""})){fe("value",function(e,t,n){if(!n&&e.nodeName.toLowerCase()==="input"){return e.defaultValue}})}if(!ue(function(e){return e.getAttribute("disabled")==null})){fe(P,function(e,t,n){var r;if(!n){return e[t]===true?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}})}return ae}(e);w.find=C;w.expr=C.selectors;w.expr[":"]=w.expr.pseudos;w.uniqueSort=w.unique=C.uniqueSort;w.text=C.getText;w.isXMLDoc=C.isXML;w.contains=C.contains;w.escapeSelector=C.escape;var S=function(e,t,n){var r=[],i=n!==undefined;while((e=e[t])&&e.nodeType!==9){if(e.nodeType===1){if(i&&w(e).is(n)){break}r.push(e)}}return r};var j=function(e,t){var n=[];for(;e;e=e.nextSibling){if(e.nodeType===1&&e!==t){n.push(e)}}return n};var E=w.expr.match.needsContext;function D(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,t,n){if(m(t)){return w.grep(e,function(e,r){return!!t.call(e,r,e)!==n})}if(t.nodeType){return w.grep(e,function(e){return e===t!==n})}if(typeof t!=="string"){return w.grep(e,function(e){return u.call(t,e)>-1!==n})}return w.filter(t,e,n)}w.filter=function(e,t,n){var r=t[0];if(n){e=":not("+e+")"}if(t.length===1&&r.nodeType===1){return w.find.matchesSelector(r,e)?[r]:[]}return w.find.matches(e,w.grep(t,function(e){return e.nodeType===1}))};w.fn.extend({find:function(e){var t,n,r=this.length,i=this;if(typeof e!=="string"){return this.pushStack(w(e).filter(function(){for(t=0;t<r;t++){if(w.contains(i[t],this)){return true}}}))}n=this.pushStack([]);for(t=0;t<r;t++){w.find(e,i[t],n)}return r>1?w.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],false))},not:function(e){return this.pushStack(N(this,e||[],true))},is:function(e){return!!N(this,typeof e==="string"&&E.test(e)?w(e):e||[],false).length}});var L,q=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,O=w.fn.init=function(e,t,n){var i,a;if(!e){return this}n=n||L;if(typeof e==="string"){if(e[0]==="<"&&e[e.length-1]===">"&&e.length>=3){i=[null,e,null]}else{i=q.exec(e)}if(i&&(i[1]||!t)){if(i[1]){t=t instanceof w?t[0]:t;w.merge(this,w.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,true));if(A.test(i[1])&&w.isPlainObject(t)){for(i in t){if(m(this[i])){this[i](t[i])}else{this.attr(i,t[i])}}}return this}else{a=r.getElementById(i[2]);if(a){this[0]=a;this.length=1}return this}}else if(!t||t.jquery){return(t||n).find(e)}else{return this.constructor(t).find(e)}}else if(e.nodeType){this[0]=e;this.length=1;return this}else if(m(e)){return n.ready!==undefined?n.ready(e):e(w)}return w.makeArray(e,this)};O.prototype=w.fn;L=w(r);var H=/^(?:parents|prev(?:Until|All))/,P={children:true,contents:true,next:true,prev:true};w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter(function(){var e=0;for(;e<n;e++){if(w.contains(this,t[e])){return true}}})},closest:function(e,t){var n,r=0,i=this.length,a=[],o=typeof e!=="string"&&w(e);if(!E.test(e)){for(;r<i;r++){for(n=this[r];n&&n!==t;n=n.parentNode){if(n.nodeType<11&&(o?o.index(n)>-1:n.nodeType===1&&w.find.matchesSelector(n,e))){a.push(n);break}}}}return this.pushStack(a.length>1?w.uniqueSort(a):a)},index:function(e){if(!e){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1}if(typeof e==="string"){return u.call(w(e),this[0])}return u.call(this,e.jquery?e[0]:e)},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(e==null?this.prevObject:this.prevObject.filter(e))}});function M(e,t){while((e=e[t])&&e.nodeType!==1){}return e}w.each({parent:function(e){var t=e.parentNode;return t&&t.nodeType!==11?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return j((e.parentNode||{}).firstChild,e)},children:function(e){return j(e.firstChild)},contents:function(e){if(D(e,"iframe")){return e.contentDocument}if(D(e,"template")){e=e.content||e}return w.merge([],e.childNodes)}},function(e,t){w.fn[e]=function(n,r){var i=w.map(this,t,n);if(e.slice(-5)!=="Until"){r=n}if(r&&typeof r==="string"){i=w.filter(r,i)}if(this.length>1){if(!P[e]){w.uniqueSort(i)}if(H.test(e)){i.reverse()}}return this.pushStack(i)}});var I=/[^\x20\t\r\n\f]+/g;function R(e){var t={};w.each(e.match(I)||[],function(e,n){t[n]=true});return t}w.Callbacks=function(e){e=typeof e==="string"?R(e):w.extend({},e);var t,n,r,i,a=[],o=[],s=-1,u=function(){i=i||e.once;r=t=true;for(;o.length;s=-1){n=o.shift();while(++s<a.length){if(a[s].apply(n[0],n[1])===false&&e.stopOnFalse){s=a.length;n=false}}}if(!e.memory){n=false}t=false;if(i){if(n){a=[]}else{a=""}}},f={add:function(){if(a){if(n&&!t){s=a.length-1;o.push(n)}(function t(n){w.each(n,function(n,r){if(m(r)){if(!e.unique||!f.has(r)){a.push(r)}}else if(r&&r.length&&x(r)!=="string"){t(r)}})})(arguments);if(n&&!t){u()}}return this},remove:function(){w.each(arguments,function(e,t){var n;while((n=w.inArray(t,a,n))>-1){a.splice(n,1);if(n<=s){s--}}});return this},has:function(e){return e?w.inArray(e,a)>-1:a.length>0},empty:function(){if(a){a=[]}return this},disable:function(){i=o=[];a=n="";return this},disabled:function(){return!a},lock:function(){i=o=[];if(!n&&!t){a=n=""}return this},locked:function(){return!!i},fireWith:function(e,n){if(!i){n=n||[];n=[e,n.slice?n.slice():n];o.push(n);if(!t){u()}}return this},fire:function(){f.fireWith(this,arguments);return this},fired:function(){return!!r}};return f};function F(e){return e}function W(e){throw e}function $(e,t,n,r){var i;try{if(e&&m(i=e.promise)){i.call(e).done(t).fail(n)}else if(e&&m(i=e.then)){i.call(e,t,n)}else{t.apply(undefined,[e].slice(r))}}catch(e){n.apply(undefined,[e])}}w.extend({Deferred:function(t){var n=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){a.done(arguments).fail(arguments);return this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return w.Deferred(function(t){w.each(n,function(n,r){var i=m(e[r[4]])&&e[r[4]];a[r[1]](function(){var e=i&&i.apply(this,arguments);if(e&&m(e.promise)){e.promise().progress(t.notify).done(t.resolve).fail(t.reject)}else{t[r[0]+"With"](this,i?[e]:arguments)}})});e=null}).promise()},then:function(t,r,i){var a=0;function o(t,n,r,i){return function(){var s=this,u=arguments,f=function(){var e,f;if(t<a){return}e=r.apply(s,u);if(e===n.promise()){throw new TypeError("Thenable self-resolution")}f=e&&(typeof e==="object"||typeof e==="function")&&e.then;if(m(f)){if(i){f.call(e,o(a,n,F,i),o(a,n,W,i))}else{a++;f.call(e,o(a,n,F,i),o(a,n,W,i),o(a,n,F,n.notifyWith))}}else{if(r!==F){s=undefined;u=[e]}(i||n.resolveWith)(s,u)}},l=i?f:function(){try{f()}catch(e){if(w.Deferred.exceptionHook){w.Deferred.exceptionHook(e,l.stackTrace)}if(t+1>=a){if(r!==W){s=undefined;u=[e]}n.rejectWith(s,u)}}};if(t){l()}else{if(w.Deferred.getStackHook){l.stackTrace=w.Deferred.getStackHook()}e.setTimeout(l)}}}return w.Deferred(function(e){n[0][3].add(o(0,e,m(i)?i:F,e.notifyWith));n[1][3].add(o(0,e,m(t)?t:F));n[2][3].add(o(0,e,m(r)?r:W))}).promise()},promise:function(e){return e!=null?w.extend(e,i):i}},a={};w.each(n,function(e,t){var o=t[2],s=t[5];i[t[1]]=o.add;if(s){o.add(function(){r=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock)}o.add(t[3].fire);a[t[0]]=function(){a[t[0]+"With"](this===a?undefined:this,arguments);return this};a[t[0]+"With"]=o.fireWith});i.promise(a);if(t){t.call(a,a)}return a},when:function(e){var t=arguments.length,n=t,r=Array(n),i=a.call(arguments),o=w.Deferred(),s=function(e){return function(n){r[e]=this;i[e]=arguments.length>1?a.call(arguments):n;if(!--t){o.resolveWith(r,i)}}};if(t<=1){$(e,o.done(s(n)).resolve,o.reject,!t);if(o.state()==="pending"||m(i[n]&&i[n].then)){return o.then()}}while(n--){$(i[n],s(n),o.reject)}return o.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;w.Deferred.exceptionHook=function(t,n){if(e.console&&e.console.warn&&t&&B.test(t.name)){e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)}};w.readyException=function(t){e.setTimeout(function(){throw t})};var _=w.Deferred();w.fn.ready=function(e){_.then(e).catch(function(e){w.readyException(e)});return this};w.extend({isReady:false,readyWait:1,ready:function(e){if(e===true?--w.readyWait:w.isReady){return}w.isReady=true;if(e!==true&&--w.readyWait>0){return}_.resolveWith(r,[w])}});w.ready.then=_.then;function X(){r.removeEventListener("DOMContentLoaded",X);e.removeEventListener("load",X);w.ready()}if(r.readyState==="complete"||r.readyState!=="loading"&&!r.documentElement.doScroll){e.setTimeout(w.ready)}else{r.addEventListener("DOMContentLoaded",X);e.addEventListener("load",X)}var z=function(e,t,n,r,i,a,o){var s=0,u=e.length,f=n==null;if(x(n)==="object"){i=true;for(s in n){z(e,t,s,n[s],true,a,o)}}else if(r!==undefined){i=true;if(!m(r)){o=true}if(f){if(o){t.call(e,r);t=null}else{f=t;t=function(e,t,n){return f.call(w(e),n)}}}if(t){for(;s<u;s++){t(e[s],n,o?r:r.call(e[s],s,t(e[s],n)))}}}if(i){return e}if(f){return t.call(e)}return u?t(e[0],n):a};var U=/^-ms-/,V=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function G(e){return e.replace(U,"ms-").replace(V,Y)}var J=function(e){return e.nodeType===1||e.nodeType===9||!+e.nodeType};function Q(){this.expando=w.expando+Q.uid++}Q.uid=1;Q.prototype={cache:function(e){var t=e[this.expando];if(!t){t={};if(J(e)){if(e.nodeType){e[this.expando]=t}else{Object.defineProperty(e,this.expando,{value:t,configurable:true})}}}return t},set:function(e,t,n){var r,i=this.cache(e);if(typeof t==="string"){i[G(t)]=n}else{for(r in t){i[G(r)]=t[r]}}return i},get:function(e,t){return t===undefined?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){if(t===undefined||t&&typeof t==="string"&&n===undefined){return this.get(e,t)}this.set(e,t,n);return n!==undefined?n:t},remove:function(e,t){var n,r=e[this.expando];if(r===undefined){return}if(t!==undefined){if(Array.isArray(t)){t=t.map(G)}else{t=G(t);t=t in r?[t]:t.match(I)||[]}n=t.length;while(n--){delete r[t[n]]}}if(t===undefined||w.isEmptyObject(r)){if(e.nodeType){e[this.expando]=undefined}else{delete e[this.expando]}}},hasData:function(e){var t=e[this.expando];return t!==undefined&&!w.isEmptyObject(t)}};var K=new Q;var Z=new Q;var ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e){if(e==="true"){return true}if(e==="false"){return false}if(e==="null"){return null}if(e===+e+""){return+e}if(ee.test(e)){return JSON.parse(e)}return e}function re(e,t,n){var r;if(n===undefined&&e.nodeType===1){r="data-"+t.replace(te,"-$&").toLowerCase();n=e.getAttribute(r);if(typeof n==="string"){try{n=ne(n)}catch(e){}Z.set(e,t,n)}else{n=undefined}}return n}w.extend({hasData:function(e){return Z.hasData(e)||K.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}});w.fn.extend({data:function(e,t){var n,r,i,a=this[0],o=a&&a.attributes;if(e===undefined){if(this.length){i=Z.get(a);if(a.nodeType===1&&!K.get(a,"hasDataAttrs")){n=o.length;while(n--){if(o[n]){r=o[n].name;if(r.indexOf("data-")===0){r=G(r.slice(5));re(a,r,i[r])}}}K.set(a,"hasDataAttrs",true)}}return i}if(typeof e==="object"){return this.each(function(){Z.set(this,e)})}return z(this,function(t){var n;if(a&&t===undefined){n=Z.get(a,e);if(n!==undefined){return n}n=re(a,e);if(n!==undefined){return n}return}this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,true)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}});w.extend({queue:function(e,t,n){var r;if(e){t=(t||"fx")+"queue";r=K.get(e,t);if(n){if(!r||Array.isArray(n)){r=K.access(e,t,w.makeArray(n))}else{r.push(n)}}return r||[]}},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),r=n.length,i=n.shift(),a=w._queueHooks(e,t),o=function(){w.dequeue(e,t)};if(i==="inprogress"){i=n.shift();r--}if(i){if(t==="fx"){n.unshift("inprogress")}delete a.stop;i.call(e,o,a)}if(!r&&a){a.empty.fire()}},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:w.Callbacks("once memory").add(function(){K.remove(e,[t+"queue",n])})})}});w.fn.extend({queue:function(e,t){var n=2;if(typeof e!=="string"){t=e;e="fx";n--}if(arguments.length<n){return w.queue(this[0],e)}return t===undefined?this:this.each(function(){var n=w.queue(this,e,t);w._queueHooks(this,e);if(e==="fx"&&n[0]!=="inprogress"){w.dequeue(this,e)}})},dequeue:function(e){return this.each(function(){w.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=w.Deferred(),a=this,o=this.length,s=function(){if(!--r){i.resolveWith(a,[a])}};if(typeof e!=="string"){t=e;e=undefined}e=e||"fx";while(o--){n=K.get(a[o],e+"queueHooks");if(n&&n.empty){r++;n.empty.add(s)}}s();return i.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var ae=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i");var oe=["Top","Right","Bottom","Left"];var se=function(e,t){e=t||e;return e.style.display==="none"||e.style.display===""&&w.contains(e.ownerDocument,e)&&w.css(e,"display")==="none"};var ue=function(e,t,n,r){var i,a,o={};for(a in t){o[a]=e.style[a];e.style[a]=t[a]}i=n.apply(e,r||[]);for(a in t){e.style[a]=o[a]}return i};function fe(e,t,n,r){var i,a,o=20,s=r?function(){return r.cur()}:function(){return w.css(e,t,"")},u=s(),f=n&&n[3]||(w.cssNumber[t]?"":"px"),l=(w.cssNumber[t]||f!=="px"&&+u)&&ae.exec(w.css(e,t));if(l&&l[3]!==f){u=u/2;f=f||l[3];l=+u||1;while(o--){w.style(e,t,l+f);if((1-a)*(1-(a=s()/u||.5))<=0){o=0}l=l/a}l=l*2;w.style(e,t,l+f);n=n||[]}if(n){l=+l||+u||0;i=n[1]?l+(n[1]+1)*n[2]:+n[2];if(r){r.unit=f;r.start=l;r.end=i}}return i}var le={};function ce(e){var t,n=e.ownerDocument,r=e.nodeName,i=le[r];if(i){return i}t=n.body.appendChild(n.createElement(r));i=w.css(t,"display");t.parentNode.removeChild(t);if(i==="none"){i="block"}le[r]=i;return i}function de(e,t){var n,r,i=[],a=0,o=e.length;for(;a<o;a++){r=e[a];if(!r.style){continue}n=r.style.display;if(t){if(n==="none"){i[a]=K.get(r,"display")||null;if(!i[a]){r.style.display=""}}if(r.style.display===""&&se(r)){i[a]=ce(r)}}else{if(n!=="none"){i[a]="none";K.set(r,"display",n)}}}for(a=0;a<o;a++){if(i[a]!=null){e[a].style.display=i[a]}}return e}w.fn.extend({show:function(){return de(this,true)},hide:function(){return de(this)},toggle:function(e){if(typeof e==="boolean"){return e?this.show():this.hide()}return this.each(function(){if(se(this)){w(this).show()}else{w(this).hide()}})}});var pe=/^(?:checkbox|radio)$/i;var he=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i;var me=/^$|^module$|\/(?:java|ecma)script/i;var ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ge.optgroup=ge.option;ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead;ge.th=ge.td;function ve(e,t){var n;if(typeof e.getElementsByTagName!=="undefined"){n=e.getElementsByTagName(t||"*")}else if(typeof e.querySelectorAll!=="undefined"){n=e.querySelectorAll(t||"*")}else{n=[]}if(t===undefined||t&&D(e,t)){return w.merge([e],n)}return n}function ye(e,t){var n=0,r=e.length;for(;n<r;n++){K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}}var xe=/<|&#?\w+;/;function be(e,t,n,r,i){var a,o,s,u,f,l,c=t.createDocumentFragment(),d=[],p=0,h=e.length;for(;p<h;p++){a=e[p];if(a||a===0){if(x(a)==="object"){w.merge(d,a.nodeType?[a]:a)}else if(!xe.test(a)){d.push(t.createTextNode(a))}else{o=o||c.appendChild(t.createElement("div"));s=(he.exec(a)||["",""])[1].toLowerCase();u=ge[s]||ge._default;o.innerHTML=u[1]+w.htmlPrefilter(a)+u[2];l=u[0];while(l--){o=o.lastChild}w.merge(d,o.childNodes);o=c.firstChild;o.textContent=""}}}c.textContent="";p=0;while(a=d[p++]){if(r&&w.inArray(a,r)>-1){if(i){i.push(a)}continue}f=w.contains(a.ownerDocument,a);o=ve(c.appendChild(a),"script");if(f){ye(o)}if(n){l=0;while(a=o[l++]){if(me.test(a.type||"")){n.push(a)}}}}return c}(function(){var e=r.createDocumentFragment(),t=e.appendChild(r.createElement("div")),n=r.createElement("input");n.setAttribute("type","radio");n.setAttribute("checked","checked");n.setAttribute("name","t");t.appendChild(n);h.checkClone=t.cloneNode(true).cloneNode(true).lastChild.checked;t.innerHTML="<textarea>x</textarea>";h.noCloneChecked=!!t.cloneNode(true).lastChild.defaultValue})();var we=r.documentElement;var Te=/^key/,ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Se(){return true}function je(){return false}function Ee(){try{return r.activeElement}catch(e){}}function De(e,t,n,r,i,a){var o,s;if(typeof t==="object"){if(typeof n!=="string"){r=r||n;n=undefined}for(s in t){De(e,s,n,r,t[s],a)}return e}if(r==null&&i==null){i=n;r=n=undefined}else if(i==null){if(typeof n==="string"){i=r;r=undefined}else{i=r;r=n;n=undefined}}if(i===false){i=je}else if(!i){return e}if(a===1){o=i;i=function(e){w().off(e);return o.apply(this,arguments)};i.guid=o.guid||(o.guid=w.guid++)}return e.each(function(){w.event.add(this,t,i,r,n)})}w.event={global:{},add:function(e,t,n,r,i){var a,o,s,u,f,l,c,d,p,h,m,g=K.get(e);if(!g){return}if(n.handler){a=n;n=a.handler;i=a.selector}if(i){w.find.matchesSelector(we,i)}if(!n.guid){n.guid=w.guid++}if(!(u=g.events)){u=g.events={}}if(!(o=g.handle)){o=g.handle=function(t){return typeof w!=="undefined"&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):undefined}}t=(t||"").match(I)||[""];f=t.length;while(f--){s=Ce.exec(t[f])||[];p=m=s[1];h=(s[2]||"").split(".").sort();if(!p){continue}c=w.event.special[p]||{};p=(i?c.delegateType:c.bindType)||p;c=w.event.special[p]||{};l=w.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&w.expr.match.needsContext.test(i),namespace:h.join(".")},a);if(!(d=u[p])){d=u[p]=[];d.delegateCount=0;if(!c.setup||c.setup.call(e,r,h,o)===false){if(e.addEventListener){e.addEventListener(p,o)}}}if(c.add){c.add.call(e,l);if(!l.handler.guid){l.handler.guid=n.guid}}if(i){d.splice(d.delegateCount++,0,l)}else{d.push(l)}w.event.global[p]=true}},remove:function(e,t,n,r,i){var a,o,s,u,f,l,c,d,p,h,m,g=K.hasData(e)&&K.get(e);if(!g||!(u=g.events)){return}t=(t||"").match(I)||[""];f=t.length;while(f--){s=Ce.exec(t[f])||[];p=m=s[1];h=(s[2]||"").split(".").sort();if(!p){for(p in u){w.event.remove(e,p+t[f],n,r,true)}continue}c=w.event.special[p]||{};p=(r?c.delegateType:c.bindType)||p;d=u[p]||[];s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)");o=a=d.length;while(a--){l=d[a];if((i||m===l.origType)&&(!n||n.guid===l.guid)&&(!s||s.test(l.namespace))&&(!r||r===l.selector||r==="**"&&l.selector)){d.splice(a,1);if(l.selector){d.delegateCount--}if(c.remove){c.remove.call(e,l)}}}if(o&&!d.length){if(!c.teardown||c.teardown.call(e,h,g.handle)===false){w.removeEvent(e,p,g.handle)}delete u[p]}}if(w.isEmptyObject(u)){K.remove(e,"handle events")}},dispatch:function(e){var t=w.event.fix(e);var n,r,i,a,o,s,u=new Array(arguments.length),f=(K.get(this,"events")||{})[t.type]||[],l=w.event.special[t.type]||{};u[0]=t;for(n=1;n<arguments.length;n++){u[n]=arguments[n]}t.delegateTarget=this;if(l.preDispatch&&l.preDispatch.call(this,t)===false){return}s=w.event.handlers.call(this,t,f);n=0;while((a=s[n++])&&!t.isPropagationStopped()){t.currentTarget=a.elem;r=0;while((o=a.handlers[r++])&&!t.isImmediatePropagationStopped()){if(!t.rnamespace||t.rnamespace.test(o.namespace)){t.handleObj=o;t.data=o.data;i=((w.event.special[o.origType]||{}).handle||o.handler).apply(a.elem,u);if(i!==undefined){if((t.result=i)===false){t.preventDefault();t.stopPropagation()}}}}}if(l.postDispatch){l.postDispatch.call(this,t)}return t.result},handlers:function(e,t){var n,r,i,a,o,s=[],u=t.delegateCount,f=e.target;if(u&&f.nodeType&&!(e.type==="click"&&e.button>=1)){for(;f!==this;f=f.parentNode||this){if(f.nodeType===1&&!(e.type==="click"&&f.disabled===true)){a=[];o={};for(n=0;n<u;n++){r=t[n];i=r.selector+" ";if(o[i]===undefined){o[i]=r.needsContext?w(i,this).index(f)>-1:w.find(i,this,null,[f]).length}if(o[i]){a.push(r)}}if(a.length){s.push({elem:f,handlers:a})}}}}f=this;if(u<t.length){s.push({elem:f,handlers:t.slice(u)})}return s},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:true,configurable:true,get:m(t)?function(){if(this.originalEvent){return t(this.originalEvent)}}:function(){if(this.originalEvent){return this.originalEvent[e]}},set:function(t){Object.defineProperty(this,e,{enumerable:true,configurable:true,writable:true,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:true},focus:{trigger:function(){if(this!==Ee()&&this.focus){this.focus();return false}},delegateType:"focusin"},blur:{trigger:function(){if(this===Ee()&&this.blur){this.blur();return false}},delegateType:"focusout"},click:{trigger:function(){if(this.type==="checkbox"&&this.click&&D(this,"input")){this.click();return false}},_default:function(e){return D(e.target,"a")}},beforeunload:{postDispatch:function(e){if(e.result!==undefined&&e.originalEvent){e.originalEvent.returnValue=e.result}}}}};w.removeEvent=function(e,t,n){if(e.removeEventListener){e.removeEventListener(t,n)}};w.Event=function(e,t){if(!(this instanceof w.Event)){return new w.Event(e,t)}if(e&&e.type){this.originalEvent=e;this.type=e.type;this.isDefaultPrevented=e.defaultPrevented||e.defaultPrevented===undefined&&e.returnValue===false?Se:je;this.target=e.target&&e.target.nodeType===3?e.target.parentNode:e.target;this.currentTarget=e.currentTarget;this.relatedTarget=e.relatedTarget}else{this.type=e}if(t){w.extend(this,t)}this.timeStamp=e&&e.timeStamp||Date.now();this[w.expando]=true};w.Event.prototype={constructor:w.Event,isDefaultPrevented:je,isPropagationStopped:je,isImmediatePropagationStopped:je,isSimulated:false,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se;if(e&&!this.isSimulated){e.preventDefault()}},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se;if(e&&!this.isSimulated){e.stopPropagation()}},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se;if(e&&!this.isSimulated){e.stopImmediatePropagation()}this.stopPropagation()}};w.each({altKey:true,bubbles:true,cancelable:true,changedTouches:true,ctrlKey:true,detail:true,eventPhase:true,metaKey:true,pageX:true,pageY:true,shiftKey:true,view:true,char:true,charCode:true,key:true,keyCode:true,button:true,buttons:true,clientX:true,clientY:true,offsetX:true,offsetY:true,pointerId:true,pointerType:true,screenX:true,screenY:true,targetTouches:true,toElement:true,touches:true,which:function(e){var t=e.button;if(e.which==null&&Te.test(e.type)){return e.charCode!=null?e.charCode:e.keyCode}if(!e.which&&t!==undefined&&ke.test(e.type)){if(t&1){return 1}if(t&2){return 3}if(t&4){return 2}return 0}return e.which}},w.event.addProp);w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,a=e.handleObj;if(!i||i!==r&&!w.contains(r,i)){e.type=a.origType;n=a.handler.apply(this,arguments);e.type=t}return n}}});w.fn.extend({on:function(e,t,n,r){return De(this,e,t,n,r)},one:function(e,t,n,r){return De(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj){r=e.handleObj;w(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler);return this}if(typeof e==="object"){for(i in e){this.off(i,t,e[i])}return this}if(t===false||typeof t==="function"){n=t;t=undefined}if(n===false){n=je}return this.each(function(){w.event.remove(this,e,n,t)})}});var Ae=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ne=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,qe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){if(D(e,"table")&&D(t.nodeType!==11?t:t.firstChild,"tr")){return w(e).children("tbody")[0]||e}return e}function He(e){e.type=(e.getAttribute("type")!==null)+"/"+e.type;return e}function Pe(e){if((e.type||"").slice(0,5)==="true/"){e.type=e.type.slice(5)}else{e.removeAttribute("type")}return e}function Me(e,t){var n,r,i,a,o,s,u,f;if(t.nodeType!==1){return}if(K.hasData(e)){a=K.access(e);o=K.set(t,a);f=a.events;if(f){delete o.handle;o.events={};for(i in f){for(n=0,r=f[i].length;n<r;n++){w.event.add(t,i,f[i][n])}}}}if(Z.hasData(e)){s=Z.access(e);u=w.extend({},s);Z.set(t,u)}}function Ie(e,t){var n=t.nodeName.toLowerCase();if(n==="input"&&pe.test(e.type)){t.checked=e.checked}else if(n==="input"||n==="textarea"){t.defaultValue=e.defaultValue}}function Re(e,t,n,r){t=o.apply([],t);var i,a,s,u,f,l,c=0,d=e.length,p=d-1,g=t[0],v=m(g);if(v||d>1&&typeof g==="string"&&!h.checkClone&&Le.test(g)){return e.each(function(i){var a=e.eq(i);if(v){t[0]=g.call(this,i,a.html())}Re(a,t,n,r)})}if(d){i=be(t,e[0].ownerDocument,false,e,r);a=i.firstChild;if(i.childNodes.length===1){i=a}if(a||r){s=w.map(ve(i,"script"),He);u=s.length;for(;c<d;c++){f=i;if(c!==p){f=w.clone(f,true,true);if(u){w.merge(s,ve(f,"script"))}}n.call(e[c],f,c)}if(u){l=s[s.length-1].ownerDocument;w.map(s,Pe);for(c=0;c<u;c++){f=s[c];if(me.test(f.type||"")&&!K.access(f,"globalEval")&&w.contains(l,f)){if(f.src&&(f.type||"").toLowerCase()!=="module"){if(w._evalUrl){w._evalUrl(f.src)}}else{y(f.textContent.replace(qe,""),l,f)}}}}}}return e}function Fe(e,t,n){var r,i=t?w.filter(t,e):e,a=0;for(;(r=i[a])!=null;a++){if(!n&&r.nodeType===1){w.cleanData(ve(r))}if(r.parentNode){if(n&&w.contains(r.ownerDocument,r)){ye(ve(r,"script"))}r.parentNode.removeChild(r)}}return e}w.extend({htmlPrefilter:function(e){return e.replace(Ae,"<$1></$2>")},clone:function(e,t,n){var r,i,a,o,s=e.cloneNode(true),u=w.contains(e.ownerDocument,e);if(!h.noCloneChecked&&(e.nodeType===1||e.nodeType===11)&&!w.isXMLDoc(e)){o=ve(s);a=ve(e);for(r=0,i=a.length;r<i;r++){Ie(a[r],o[r])}}if(t){if(n){a=a||ve(e);o=o||ve(s);for(r=0,i=a.length;r<i;r++){Me(a[r],o[r])}}else{Me(e,s)}}o=ve(s,"script");if(o.length>0){ye(o,!u&&ve(e,"script"))}return s},cleanData:function(e){var t,n,r,i=w.event.special,a=0;for(;(n=e[a])!==undefined;a++){if(J(n)){if(t=n[K.expando]){if(t.events){for(r in t.events){if(i[r]){w.event.remove(n,r)}else{w.removeEvent(n,r,t.handle)}}}n[K.expando]=undefined}if(n[Z.expando]){n[Z.expando]=undefined}}}}});w.fn.extend({detach:function(e){return Fe(this,e,true)},remove:function(e){return Fe(this,e)},text:function(e){return z(this,function(e){return e===undefined?w.text(this):this.empty().each(function(){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){this.textContent=e}})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Oe(this,e);t.appendChild(e)}})},prepend:function(){return Re(this,arguments,function(e){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this)}})},after:function(){return Re(this,arguments,function(e){if(this.parentNode){this.parentNode.insertBefore(e,this.nextSibling)}})},empty:function(){var e,t=0;for(;(e=this[t])!=null;t++){if(e.nodeType===1){w.cleanData(ve(e,false));e.textContent=""}}return this},clone:function(e,t){e=e==null?false:e;t=t==null?e:t;return this.map(function(){return w.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,r=this.length;if(e===undefined&&t.nodeType===1){return t.innerHTML}if(typeof e==="string"&&!Ne.test(e)&&!ge[(he.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<r;n++){t=this[n]||{};if(t.nodeType===1){w.cleanData(ve(t,false));t.innerHTML=e}}t=0}catch(e){}}if(t){this.empty().append(e)}},null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,function(t){var n=this.parentNode;if(w.inArray(this,e)<0){w.cleanData(ve(this));if(n){n.replaceChild(t,this)}}},e)}});w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){w.fn[e]=function(e){var n,r=[],i=w(e),a=i.length-1,o=0;for(;o<=a;o++){n=o===a?this:this.clone(true);w(i[o])[t](n);s.apply(r,n.get())}return this.pushStack(r)}});var We=new RegExp("^("+ie+")(?!px)[a-z%]+$","i");var $e=function(t){var n=t.ownerDocument.defaultView;if(!n||!n.opener){n=e}return n.getComputedStyle(t)};var Be=new RegExp(oe.join("|"),"i");(function(){function t(){if(!l){return}f.style.cssText="position:absolute;left:-11111px;width:60px;"+"margin-top:1px;padding:0;border:0";l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;"+"margin:auto;border:1px;padding:1px;"+"width:60%;top:1%";we.appendChild(f).appendChild(l);var t=e.getComputedStyle(l);i=t.top!=="1%";u=n(t.marginLeft)===12;l.style.right="60%";s=n(t.right)===36;a=n(t.width)===36;l.style.position="absolute";o=l.offsetWidth===36||"absolute";we.removeChild(f);l=null}function n(e){return Math.round(parseFloat(e))}var i,a,o,s,u,f=r.createElement("div"),l=r.createElement("div");if(!l.style){return}l.style.backgroundClip="content-box";l.cloneNode(true).style.backgroundClip="";h.clearCloneStyle=l.style.backgroundClip==="content-box";w.extend(h,{boxSizingReliable:function(){t();return a},pixelBoxStyles:function(){t();return s},pixelPosition:function(){t();return i},reliableMarginLeft:function(){t();return u},scrollboxSize:function(){t();return o}})})();function _e(e,t,n){var r,i,a,o,s=e.style;n=n||$e(e);if(n){o=n.getPropertyValue(t)||n[t];if(o===""&&!w.contains(e.ownerDocument,e)){o=w.style(e,t)}if(!h.pixelBoxStyles()&&We.test(o)&&Be.test(t)){r=s.width;i=s.minWidth;a=s.maxWidth;s.minWidth=s.maxWidth=s.width=o;o=n.width;s.width=r;s.minWidth=i;s.maxWidth=a}}return o!==undefined?o+"":o}function Xe(e,t){return{get:function(){if(e()){delete this.get;return}return(this.get=t).apply(this,arguments)}}}var ze=/^(none|table(?!-c[ea]).+)/,Ue=/^--/,Ve={position:"absolute",visibility:"hidden",display:"block"},Ye={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Je=r.createElement("div").style;function Qe(e){if(e in Je){return e}var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;while(n--){e=Ge[n]+t;if(e in Je){return e}}}function Ke(e){var t=w.cssProps[e];if(!t){t=w.cssProps[e]=Qe(e)||e}return t}function Ze(e,t,n){var r=ae.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function et(e,t,n,r,i,a){var o=t==="width"?1:0,s=0,u=0;if(n===(r?"border":"content")){return 0}for(;o<4;o+=2){if(n==="margin"){u+=w.css(e,n+oe[o],true,i)}if(!r){u+=w.css(e,"padding"+oe[o],true,i);if(n!=="padding"){u+=w.css(e,"border"+oe[o]+"Width",true,i)}else{s+=w.css(e,"border"+oe[o]+"Width",true,i)}}else{if(n==="content"){u-=w.css(e,"padding"+oe[o],true,i)}if(n!=="margin"){u-=w.css(e,"border"+oe[o]+"Width",true,i)}}}if(!r&&a>=0){u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-u-s-.5))}return u}function tt(e,t,n){var r=$e(e),i=_e(e,t,r),a=w.css(e,"boxSizing",false,r)==="border-box",o=a;if(We.test(i)){if(!n){return i}i="auto"}o=o&&(h.boxSizingReliable()||i===e.style[t]);if(i==="auto"||!parseFloat(i)&&w.css(e,"display",false,r)==="inline"){i=e["offset"+t[0].toUpperCase()+t.slice(1)];o=true}i=parseFloat(i)||0;return i+et(e,t,n||(a?"border":"content"),o,r,i)+"px"}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=_e(e,"opacity");return n===""?"1":n}}}},cssNumber:{animationIterationCount:true,columnCount:true,fillOpacity:true,flexGrow:true,flexShrink:true,fontWeight:true,lineHeight:true,opacity:true,order:true,orphans:true,widows:true,zIndex:true,zoom:true},cssProps:{},style:function(e,t,n,r){if(!e||e.nodeType===3||e.nodeType===8||!e.style){return}var i,a,o,s=G(t),u=Ue.test(t),f=e.style;if(!u){t=Ke(s)}o=w.cssHooks[t]||w.cssHooks[s];if(n!==undefined){a=typeof n;if(a==="string"&&(i=ae.exec(n))&&i[1]){n=fe(e,t,i);a="number"}if(n==null||n!==n){return}if(a==="number"){n+=i&&i[3]||(w.cssNumber[s]?"":"px")}if(!h.clearCloneStyle&&n===""&&t.indexOf("background")===0){f[t]="inherit"}if(!o||!("set"in o)||(n=o.set(e,n,r))!==undefined){if(u){f.setProperty(t,n)}else{f[t]=n}}}else{if(o&&"get"in o&&(i=o.get(e,false,r))!==undefined){return i}return f[t]}},css:function(e,t,n,r){var i,a,o,s=G(t),u=Ue.test(t);if(!u){t=Ke(s)}o=w.cssHooks[t]||w.cssHooks[s];if(o&&"get"in o){i=o.get(e,true,n)}if(i===undefined){i=_e(e,t,r)}if(i==="normal"&&t in Ye){i=Ye[t]}if(n===""||n){a=parseFloat(i);return n===true||isFinite(a)?a||0:i}return i}});w.each(["height","width"],function(e,t){w.cssHooks[t]={get:function(e,n,r){if(n){return ze.test(w.css(e,"display"))&&(!e.getClientRects().length||!e.getBoundingClientRect().width)?ue(e,Ve,function(){return tt(e,t,r)}):tt(e,t,r)}},set:function(e,n,r){var i,a=$e(e),o=w.css(e,"boxSizing",false,a)==="border-box",s=r&&et(e,t,r,o,a);if(o&&h.scrollboxSize()===a.position){s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(a[t])-et(e,t,"border",false,a)-.5)}if(s&&(i=ae.exec(n))&&(i[3]||"px")!=="px"){e.style[t]=n;n=w.css(e,t)}return Ze(e,n,s)}}});w.cssHooks.marginLeft=Xe(h.reliableMarginLeft,function(e,t){if(t){return(parseFloat(_e(e,"marginLeft"))||e.getBoundingClientRect().left-ue(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}});w.each({margin:"",padding:"",border:"Width"},function(e,t){w.cssHooks[e+t]={expand:function(n){var r=0,i={},a=typeof n==="string"?n.split(" "):[n];for(;r<4;r++){i[e+oe[r]+t]=a[r]||a[r-2]||a[0]}return i}};if(e!=="margin"){w.cssHooks[e+t].set=Ze}});w.fn.extend({css:function(e,t){return z(this,function(e,t,n){var r,i,a={},o=0;if(Array.isArray(t)){r=$e(e);i=t.length;for(;o<i;o++){a[t[o]]=w.css(e,t[o],false,r)}return a}return n!==undefined?w.style(e,t,n):w.css(e,t)},e,t,arguments.length>1)}});function nt(e,t,n,r,i){return new nt.prototype.init(e,t,n,r,i)}w.Tween=nt;nt.prototype={constructor:nt,init:function(e,t,n,r,i,a){this.elem=e;this.prop=n;this.easing=i||w.easing._default;this.options=t;this.start=this.now=this.cur();this.end=r;this.unit=a||(w.cssNumber[n]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,n=nt.propHooks[this.prop];if(this.options.duration){this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration)}else{this.pos=t=e}this.now=(this.end-this.start)*t+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this)}if(n&&n.set){n.set(this)}else{nt.propHooks._default.set(this)}return this}};nt.prototype.init.prototype=nt.prototype;nt.propHooks={_default:{get:function(e){var t;if(e.elem.nodeType!==1||e.elem[e.prop]!=null&&e.elem.style[e.prop]==null){return e.elem[e.prop]}t=w.css(e.elem,e.prop,"");return!t||t==="auto"?0:t},set:function(e){if(w.fx.step[e.prop]){w.fx.step[e.prop](e)}else if(e.elem.nodeType===1&&(e.elem.style[w.cssProps[e.prop]]!=null||w.cssHooks[e.prop])){w.style(e.elem,e.prop,e.now+e.unit)}else{e.elem[e.prop]=e.now}}}};nt.propHooks.scrollTop=nt.propHooks.scrollLeft={set:function(e){if(e.elem.nodeType&&e.elem.parentNode){e.elem[e.prop]=e.now}}};w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"};w.fx=nt.prototype.init;w.fx.step={};var rt,it,at=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function st(){if(it){if(r.hidden===false&&e.requestAnimationFrame){e.requestAnimationFrame(st)}else{e.setTimeout(st,w.fx.interval)}w.fx.tick()}}function ut(){e.setTimeout(function(){rt=undefined});return rt=Date.now()}function ft(e,t){var n,r=0,i={height:e};t=t?1:0;for(;r<4;r+=2-t){n=oe[r];i["margin"+n]=i["padding"+n]=e}if(t){i.opacity=i.width=e}return i}function lt(e,t,n){var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),a=0,o=i.length;for(;a<o;a++){if(r=i[a].call(n,t,e)){return r}}}function ct(e,t,n){var r,i,a,o,s,u,f,l,c="width"in t||"height"in t,d=this,p={},h=e.style,m=e.nodeType&&se(e),g=K.get(e,"fxshow");if(!n.queue){o=w._queueHooks(e,"fx");if(o.unqueued==null){o.unqueued=0;s=o.empty.fire;o.empty.fire=function(){if(!o.unqueued){s()}}}o.unqueued++;d.always(function(){d.always(function(){o.unqueued--;if(!w.queue(e,"fx").length){o.empty.fire()}})})}for(r in t){i=t[r];if(at.test(i)){delete t[r];a=a||i==="toggle";if(i===(m?"hide":"show")){if(i==="show"&&g&&g[r]!==undefined){m=true}else{continue}}p[r]=g&&g[r]||w.style(e,r)}}u=!w.isEmptyObject(t);if(!u&&w.isEmptyObject(p)){return}if(c&&e.nodeType===1){n.overflow=[h.overflow,h.overflowX,h.overflowY];f=g&&g.display;if(f==null){f=K.get(e,"display")}l=w.css(e,"display");if(l==="none"){if(f){l=f}else{de([e],true);f=e.style.display||f;l=w.css(e,"display");de([e])}}if(l==="inline"||l==="inline-block"&&f!=null){if(w.css(e,"float")==="none"){if(!u){d.done(function(){h.display=f});if(f==null){l=h.display;f=l==="none"?"":l}}h.display="inline-block"}}}if(n.overflow){h.overflow="hidden";d.always(function(){h.overflow=n.overflow[0];h.overflowX=n.overflow[1];h.overflowY=n.overflow[2]})}u=false;for(r in p){if(!u){if(g){if("hidden"in g){m=g.hidden}}else{g=K.access(e,"fxshow",{display:f})}if(a){g.hidden=!m}if(m){de([e],true)}d.done(function(){if(!m){de([e])}K.remove(e,"fxshow");for(r in p){w.style(e,r,p[r])}})}u=lt(m?g[r]:0,r,d);if(!(r in g)){g[r]=u.start;if(m){u.end=u.start;u.start=0}}}}function dt(e,t){var n,r,i,a,o;for(n in e){r=G(n);i=t[r];a=e[n];if(Array.isArray(a)){i=a[1];a=e[n]=a[0]}if(n!==r){e[r]=a;delete e[n]}o=w.cssHooks[r];if(o&&"expand"in o){a=o.expand(a);delete e[r];for(n in a){if(!(n in e)){e[n]=a[n];t[n]=i}}}else{t[r]=i}}}function pt(e,t,n){var r,i,a=0,o=pt.prefilters.length,s=w.Deferred().always(function(){delete u.elem}),u=function(){if(i){return false}var t=rt||ut(),n=Math.max(0,f.startTime+f.duration-t),r=n/f.duration||0,a=1-r,o=0,u=f.tweens.length;for(;o<u;o++){f.tweens[o].run(a)}s.notifyWith(e,[f,a,n]);if(a<1&&u){return n}if(!u){s.notifyWith(e,[f,1,0])}s.resolveWith(e,[f]);return false},f=s.promise({elem:e,props:w.extend({},t),opts:w.extend(true,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:rt||ut(),duration:n.duration,tweens:[],createTween:function(t,n){var r=w.Tween(e,f.opts,t,n,f.opts.specialEasing[t]||f.opts.easing);f.tweens.push(r);return r},stop:function(t){var n=0,r=t?f.tweens.length:0;if(i){return this}i=true;for(;n<r;n++){f.tweens[n].run(1)}if(t){s.notifyWith(e,[f,1,0]);s.resolveWith(e,[f,t])}else{s.rejectWith(e,[f,t])}return this}}),l=f.props;dt(l,f.opts.specialEasing);for(;a<o;a++){r=pt.prefilters[a].call(f,e,l,f.opts);if(r){if(m(r.stop)){w._queueHooks(f.elem,f.opts.queue).stop=r.stop.bind(r)}return r}}w.map(l,lt,f);if(m(f.opts.start)){f.opts.start.call(e,f)}f.progress(f.opts.progress).done(f.opts.done,f.opts.complete).fail(f.opts.fail).always(f.opts.always);w.fx.timer(w.extend(u,{elem:e,anim:f,queue:f.opts.queue}));return f}w.Animation=w.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);fe(n.elem,e,ae.exec(t),n);return n}]},tweener:function(e,t){if(m(e)){t=e;e=["*"]}else{e=e.match(I)}var n,r=0,i=e.length;for(;r<i;r++){n=e[r];pt.tweeners[n]=pt.tweeners[n]||[];pt.tweeners[n].unshift(t)}},prefilters:[ct],prefilter:function(e,t){if(t){pt.prefilters.unshift(e)}else{pt.prefilters.push(e)}}});w.speed=function(e,t,n){var r=e&&typeof e==="object"?w.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};if(w.fx.off){r.duration=0}else{if(typeof r.duration!=="number"){if(r.duration in w.fx.speeds){r.duration=w.fx.speeds[r.duration]}else{r.duration=w.fx.speeds._default}}}if(r.queue==null||r.queue===true){r.queue="fx"}r.old=r.complete;r.complete=function(){if(m(r.old)){r.old.call(this)}if(r.queue){w.dequeue(this,r.queue)}};return r};w.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=w.isEmptyObject(e),a=w.speed(t,n,r),o=function(){var t=pt(this,w.extend({},e),a);if(i||K.get(this,"finish")){t.stop(true)}};o.finish=o;return i||a.queue===false?this.each(o):this.queue(a.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop;t(n)};if(typeof e!=="string"){n=t;t=e;e=undefined}if(t&&e!==false){this.queue(e||"fx",[])}return this.each(function(){var t=true,i=e!=null&&e+"queueHooks",a=w.timers,o=K.get(this);if(i){if(o[i]&&o[i].stop){r(o[i])}}else{for(i in o){if(o[i]&&o[i].stop&&ot.test(i)){r(o[i])}}}for(i=a.length;i--;){if(a[i].elem===this&&(e==null||a[i].queue===e)){a[i].anim.stop(n);t=false;a.splice(i,1)}}if(t||!n){w.dequeue(this,e)}})},finish:function(e){if(e!==false){e=e||"fx"}return this.each(function(){var t,n=K.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],a=w.timers,o=r?r.length:0;n.finish=true;w.queue(this,e,[]);if(i&&i.stop){i.stop.call(this,true)}for(t=a.length;t--;){if(a[t].elem===this&&a[t].queue===e){a[t].anim.stop(true);a.splice(t,1)}}for(t=0;t<o;t++){if(r[t]&&r[t].finish){r[t].finish.call(this)}}delete n.finish})}});w.each(["toggle","show","hide"],function(e,t){var n=w.fn[t];w.fn[t]=function(e,r,i){return e==null||typeof e==="boolean"?n.apply(this,arguments):this.animate(ft(t,true),e,r,i)}});w.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){w.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}});w.timers=[];w.fx.tick=function(){var e,t=0,n=w.timers;rt=Date.now();for(;t<n.length;t++){e=n[t];if(!e()&&n[t]===e){n.splice(t--,1)}}if(!n.length){w.fx.stop()}rt=undefined};w.fx.timer=function(e){w.timers.push(e);w.fx.start()};w.fx.interval=13;w.fx.start=function(){if(it){return}it=true;st()};w.fx.stop=function(){it=null};w.fx.speeds={slow:600,fast:200,_default:400};w.fn.delay=function(t,n){t=w.fx?w.fx.speeds[t]||t:t;n=n||"fx";return this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})};(function(){var e=r.createElement("input"),t=r.createElement("select"),n=t.appendChild(r.createElement("option"));e.type="checkbox";h.checkOn=e.value!=="";h.optSelected=n.selected;e=r.createElement("input");e.value="t";e.type="radio";h.radioValue=e.value==="t"})();var ht,mt=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return z(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){w.removeAttr(this,e)})}});w.extend({attr:function(e,t,n){var r,i,a=e.nodeType;if(a===3||a===8||a===2){return}if(typeof e.getAttribute==="undefined"){return w.prop(e,t,n)}if(a!==1||!w.isXMLDoc(e)){i=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?ht:undefined)}if(n!==undefined){if(n===null){w.removeAttr(e,t);return}if(i&&"set"in i&&(r=i.set(e,n,t))!==undefined){return r}e.setAttribute(t,n+"");return n}if(i&&"get"in i&&(r=i.get(e,t))!==null){return r}r=w.find.attr(e,t);return r==null?undefined:r},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&t==="radio"&&D(e,"input")){var n=e.value;e.setAttribute("type",t);if(n){e.value=n}return t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(I);if(i&&e.nodeType===1){while(n=i[r++]){e.removeAttribute(n)}}}});ht={set:function(e,t,n){if(t===false){w.removeAttr(e,n)}else{e.setAttribute(n,n)}return n}};w.each(w.expr.match.bool.source.match(/\w+/g),function(e,t){var n=mt[t]||w.find.attr;mt[t]=function(e,t,r){var i,a,o=t.toLowerCase();if(!r){a=mt[o];mt[o]=i;i=n(e,t,r)!=null?o:null;mt[o]=a}return i}});var gt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;w.fn.extend({prop:function(e,t){return z(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[w.propFix[e]||e]})}});w.extend({prop:function(e,t,n){var r,i,a=e.nodeType;if(a===3||a===8||a===2){return}if(a!==1||!w.isXMLDoc(e)){t=w.propFix[t]||t;i=w.propHooks[t]}if(n!==undefined){if(i&&"set"in i&&(r=i.set(e,n,t))!==undefined){return r}return e[t]=n}if(i&&"get"in i&&(r=i.get(e,t))!==null){return r}return e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");if(t){return parseInt(t,10)}if(gt.test(e.nodeName)||vt.test(e.nodeName)&&e.href){return 0}return-1}}},propFix:{for:"htmlFor",class:"className"}});if(!h.optSelected){w.propHooks.selected={get:function(e){var t=e.parentNode;if(t&&t.parentNode){t.parentNode.selectedIndex}return null},set:function(e){var t=e.parentNode;if(t){t.selectedIndex;if(t.parentNode){t.parentNode.selectedIndex}}}}}w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){w.propFix[this.toLowerCase()]=this});function yt(e){var t=e.match(I)||[];return t.join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){if(Array.isArray(e)){return e}if(typeof e==="string"){return e.match(I)||[]}return[]}w.fn.extend({addClass:function(e){var t,n,r,i,a,o,s,u=0;if(m(e)){return this.each(function(t){w(this).addClass(e.call(this,t,xt(this)))})}t=bt(e);if(t.length){while(n=this[u++]){i=xt(n);r=n.nodeType===1&&" "+yt(i)+" ";if(r){o=0;while(a=t[o++]){if(r.indexOf(" "+a+" ")<0){r+=a+" "}}s=yt(r);if(i!==s){n.setAttribute("class",s)}}}}return this},removeClass:function(e){var t,n,r,i,a,o,s,u=0;if(m(e)){return this.each(function(t){w(this).removeClass(e.call(this,t,xt(this)))})}if(!arguments.length){return this.attr("class","")}t=bt(e);if(t.length){while(n=this[u++]){i=xt(n);r=n.nodeType===1&&" "+yt(i)+" ";if(r){o=0;while(a=t[o++]){while(r.indexOf(" "+a+" ")>-1){r=r.replace(" "+a+" "," ")}}s=yt(r);if(i!==s){n.setAttribute("class",s)}}}}return this},toggleClass:function(e,t){var n=typeof e,r=n==="string"||Array.isArray(e);if(typeof t==="boolean"&&r){return t?this.addClass(e):this.removeClass(e)}if(m(e)){return this.each(function(n){w(this).toggleClass(e.call(this,n,xt(this),t),t)})}return this.each(function(){var t,i,a,o;if(r){i=0;a=w(this);o=bt(e);while(t=o[i++]){if(a.hasClass(t)){a.removeClass(t)}else{a.addClass(t)}}}else if(e===undefined||n==="boolean"){t=xt(this);if(t){K.set(this,"__className__",t)}if(this.setAttribute){this.setAttribute("class",t||e===false?"":K.get(this,"__className__")||"")}}})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++]){if(n.nodeType===1&&(" "+yt(xt(n))+" ").indexOf(t)>-1){return true}}return false}});var wt=/\r/g;w.fn.extend({val:function(e){var t,n,r,i=this[0];if(!arguments.length){if(i){t=w.valHooks[i.type]||w.valHooks[i.nodeName.toLowerCase()];if(t&&"get"in t&&(n=t.get(i,"value"))!==undefined){return n}n=i.value;if(typeof n==="string"){return n.replace(wt,"")}return n==null?"":n}return}r=m(e);return this.each(function(n){var i;if(this.nodeType!==1){return}if(r){i=e.call(this,n,w(this).val())}else{i=e}if(i==null){i=""}else if(typeof i==="number"){i+=""}else if(Array.isArray(i)){i=w.map(i,function(e){return e==null?"":e+""})}t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()];if(!t||!("set"in t)||t.set(this,i,"value")===undefined){this.value=i}})}});w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return t!=null?t:yt(w.text(e))}},select:{get:function(e){var t,n,r,i=e.options,a=e.selectedIndex,o=e.type==="select-one",s=o?null:[],u=o?a+1:i.length;if(a<0){r=u}else{r=o?a:0}for(;r<u;r++){n=i[r];if((n.selected||r===a)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){t=w(n).val();if(o){return t}s.push(t)}}return s},set:function(e,t){var n,r,i=e.options,a=w.makeArray(t),o=i.length;while(o--){r=i[o];if(r.selected=w.inArray(w.valHooks.option.get(r),a)>-1){n=true}}if(!n){e.selectedIndex=-1}return a}}}});w.each(["radio","checkbox"],function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t)){return e.checked=w.inArray(w(e).val(),t)>-1}}};if(!h.checkOn){w.valHooks[this].get=function(e){return e.getAttribute("value")===null?"on":e.value}}});h.focusin="onfocusin"in e;var Tt=/^(?:focusinfocus|focusoutblur)$/,kt=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(t,n,i,a){var o,s,u,f,l,d,p,h,v=[i||r],y=c.call(t,"type")?t.type:t,x=c.call(t,"namespace")?t.namespace.split("."):[];s=h=u=i=i||r;if(i.nodeType===3||i.nodeType===8){return}if(Tt.test(y+w.event.triggered)){return}if(y.indexOf(".")>-1){x=y.split(".");y=x.shift();x.sort()}l=y.indexOf(":")<0&&"on"+y;t=t[w.expando]?t:new w.Event(y,typeof t==="object"&&t);t.isTrigger=a?2:3;t.namespace=x.join(".");t.rnamespace=t.namespace?new RegExp("(^|\\.)"+x.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;t.result=undefined;if(!t.target){t.target=i}n=n==null?[t]:w.makeArray(n,[t]);p=w.event.special[y]||{};if(!a&&p.trigger&&p.trigger.apply(i,n)===false){return}if(!a&&!p.noBubble&&!g(i)){f=p.delegateType||y;if(!Tt.test(f+y)){s=s.parentNode}for(;s;s=s.parentNode){v.push(s);u=s}if(u===(i.ownerDocument||r)){v.push(u.defaultView||u.parentWindow||e)}}o=0;while((s=v[o++])&&!t.isPropagationStopped()){h=s;t.type=o>1?f:p.bindType||y;d=(K.get(s,"events")||{})[t.type]&&K.get(s,"handle");if(d){d.apply(s,n)}d=l&&s[l];if(d&&d.apply&&J(s)){t.result=d.apply(s,n);if(t.result===false){t.preventDefault()}}}t.type=y;if(!a&&!t.isDefaultPrevented()){if((!p._default||p._default.apply(v.pop(),n)===false)&&J(i)){if(l&&m(i[y])&&!g(i)){u=i[l];if(u){i[l]=null}w.event.triggered=y;if(t.isPropagationStopped()){h.addEventListener(y,kt)}i[y]();if(t.isPropagationStopped()){h.removeEventListener(y,kt)}w.event.triggered=undefined;if(u){i[l]=u}}}}return t.result},simulate:function(e,t,n){var r=w.extend(new w.Event,n,{type:e,isSimulated:true});w.event.trigger(r,null,t)}});w.fn.extend({trigger:function(e,t){return this.each(function(){w.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n){return w.event.trigger(e,t,n,true)}}});if(!h.focusin){w.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=K.access(r,t);if(!i){r.addEventListener(e,n,true)}K.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=K.access(r,t)-1;if(!i){r.removeEventListener(e,n,true);K.remove(r,t)}else{K.access(r,t,i)}}}})}var Ct=e.location;var St=Date.now();var jt=/\?/;w.parseXML=function(t){var n;if(!t||typeof t!=="string"){return null}try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=undefined}if(!n||n.getElementsByTagName("parsererror").length){w.error("Invalid XML: "+t)}return n};var Et=/\[\]$/,Dt=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function Lt(e,t,n,r){var i;if(Array.isArray(t)){w.each(t,function(t,i){if(n||Et.test(e)){r(e,i)}else{Lt(e+"["+(typeof i==="object"&&i!=null?t:"")+"]",i,n,r)}})}else if(!n&&x(t)==="object"){for(i in t){Lt(e+"["+i+"]",t[i],n,r)}}else{r(e,t)}}w.param=function(e,t){var n,r=[],i=function(e,t){var n=m(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(n==null?"":n)};if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e)){w.each(e,function(){i(this.name,this.value)})}else{for(n in e){Lt(n,e[n],t,i)}}return r.join("&")};w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&Nt.test(this.nodeName)&&!At.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=w(this).val();if(n==null){return null}if(Array.isArray(n)){return w.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}})}return{name:t.name,value:n.replace(Dt,"\r\n")}}).get()}});var qt=/%20/g,Ot=/#.*$/,Ht=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Mt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,It=/^(?:GET|HEAD)$/,Rt=/^\/\//,Ft={},Wt={},$t="*/".concat("*"),Bt=r.createElement("a");Bt.href=Ct.href;function _t(e){return function(t,n){if(typeof t!=="string"){n=t;t="*"}var r,i=0,a=t.toLowerCase().match(I)||[];if(m(n)){while(r=a[i++]){if(r[0]==="+"){r=r.slice(1)||"*";(e[r]=e[r]||[]).unshift(n)}else{(e[r]=e[r]||[]).push(n)}}}}}function Xt(e,t,n,r){var i={},a=e===Wt;function o(s){var u;i[s]=true;w.each(e[s]||[],function(e,s){var f=s(t,n,r);if(typeof f==="string"&&!a&&!i[f]){t.dataTypes.unshift(f);o(f);return false}else if(a){return!(u=f)}});return u}return o(t.dataTypes[0])||!i["*"]&&o("*")}function zt(e,t){var n,r,i=w.ajaxSettings.flatOptions||{};for(n in t){if(t[n]!==undefined){(i[n]?e:r||(r={}))[n]=t[n]}}if(r){w.extend(true,e,r)}return e}function Ut(e,t,n){var r,i,a,o,s=e.contents,u=e.dataTypes;while(u[0]==="*"){u.shift();if(r===undefined){r=e.mimeType||t.getResponseHeader("Content-Type")}}if(r){for(i in s){if(s[i]&&s[i].test(r)){u.unshift(i);break}}}if(u[0]in n){a=u[0]}else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){a=i;break}if(!o){o=i}}a=a||o}if(a){if(a!==u[0]){u.unshift(a)}return n[a]}}function Vt(e,t,n,r){var i,a,o,s,u,f={},l=e.dataTypes.slice();if(l[1]){for(o in e.converters){f[o.toLowerCase()]=e.converters[o]}}a=l.shift();while(a){if(e.responseFields[a]){n[e.responseFields[a]]=t}if(!u&&r&&e.dataFilter){t=e.dataFilter(t,e.dataType)}u=a;a=l.shift();if(a){if(a==="*"){a=u}else if(u!=="*"&&u!==a){o=f[u+" "+a]||f["* "+a];if(!o){for(i in f){s=i.split(" ");if(s[1]===a){o=f[u+" "+s[0]]||f["* "+s[0]];if(o){if(o===true){o=f[i]}else if(f[i]!==true){a=s[0];l.unshift(s[1])}break}}}}if(o!==true){if(o&&e.throws){t=o(t)}else{try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+u+" to "+a}}}}}}}return{state:"success",data:t}}w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:Mt.test(Ct.protocol),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":true,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:true,context:true}},ajaxSetup:function(e,t){return t?zt(zt(e,w.ajaxSettings),t):zt(w.ajaxSettings,e)},ajaxPrefilter:_t(Ft),ajaxTransport:_t(Wt),ajax:function(t,n){if(typeof t==="object"){n=t;t=undefined}n=n||{};var i,a,o,s,u,f,l,c,d,p,h=w.ajaxSetup({},n),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?w(m):w.event,v=w.Deferred(),y=w.Callbacks("once memory"),x=h.statusCode||{},b={},T={},k="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s){s={};while(t=Pt.exec(o)){s[t[1].toLowerCase()]=t[2]}}t=s[e.toLowerCase()]}return t==null?null:t},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(e,t){if(l==null){e=T[e.toLowerCase()]=T[e.toLowerCase()]||e;b[e]=t}return this},overrideMimeType:function(e){if(l==null){h.mimeType=e}return this},statusCode:function(e){var t;if(e){if(l){C.always(e[C.status])}else{for(t in e){x[t]=[x[t],e[t]]}}}return this},abort:function(e){var t=e||k;if(i){i.abort(t)}S(0,t);return this}};v.promise(C);h.url=((t||h.url||Ct.href)+"").replace(Rt,Ct.protocol+"//");h.type=n.method||n.type||h.method||h.type;h.dataTypes=(h.dataType||"*").toLowerCase().match(I)||[""];if(h.crossDomain==null){f=r.createElement("a");try{f.href=h.url;f.href=f.href;h.crossDomain=Bt.protocol+"//"+Bt.host!==f.protocol+"//"+f.host}catch(e){h.crossDomain=true}}if(h.data&&h.processData&&typeof h.data!=="string"){h.data=w.param(h.data,h.traditional)}Xt(Ft,h,n,C);if(l){return C}c=w.event&&h.global;if(c&&w.active++===0){w.event.trigger("ajaxStart")}h.type=h.type.toUpperCase();h.hasContent=!It.test(h.type);a=h.url.replace(Ot,"");if(!h.hasContent){p=h.url.slice(a.length);if(h.data&&(h.processData||typeof h.data==="string")){a+=(jt.test(a)?"&":"?")+h.data;delete h.data}if(h.cache===false){a=a.replace(Ht,"$1");p=(jt.test(a)?"&":"?")+"_="+St+++p}h.url=a+p}else if(h.data&&h.processData&&(h.contentType||"").indexOf("application/x-www-form-urlencoded")===0){h.data=h.data.replace(qt,"+")}if(h.ifModified){if(w.lastModified[a]){C.setRequestHeader("If-Modified-Since",w.lastModified[a])}if(w.etag[a]){C.setRequestHeader("If-None-Match",w.etag[a])}}if(h.data&&h.hasContent&&h.contentType!==false||n.contentType){C.setRequestHeader("Content-Type",h.contentType)}C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+(h.dataTypes[0]!=="*"?", "+$t+"; q=0.01":""):h.accepts["*"]);for(d in h.headers){C.setRequestHeader(d,h.headers[d])}if(h.beforeSend&&(h.beforeSend.call(m,C,h)===false||l)){return C.abort()}k="abort";y.add(h.complete);C.done(h.success);C.fail(h.error);i=Xt(Wt,h,n,C);if(!i){S(-1,"No Transport")}else{C.readyState=1;if(c){g.trigger("ajaxSend",[C,h])}if(l){return C}if(h.async&&h.timeout>0){u=e.setTimeout(function(){C.abort("timeout")},h.timeout)}try{l=false;i.send(b,S)}catch(e){if(l){throw e}S(-1,e)}}function S(t,n,r,s){var f,d,p,b,T,k=n;if(l){return}l=true;if(u){e.clearTimeout(u)}i=undefined;o=s||"";C.readyState=t>0?4:0;f=t>=200&&t<300||t===304;if(r){b=Ut(h,C,r)}b=Vt(h,b,C,f);if(f){if(h.ifModified){T=C.getResponseHeader("Last-Modified");if(T){w.lastModified[a]=T}T=C.getResponseHeader("etag");if(T){w.etag[a]=T}}if(t===204||h.type==="HEAD"){k="nocontent"}else if(t===304){k="notmodified"}else{k=b.state;d=b.data;p=b.error;f=!p}}else{p=k;if(t||!k){k="error";if(t<0){t=0}}}C.status=t;C.statusText=(n||k)+"";if(f){v.resolveWith(m,[d,k,C])}else{v.rejectWith(m,[C,k,p])}C.statusCode(x);x=undefined;if(c){g.trigger(f?"ajaxSuccess":"ajaxError",[C,h,f?d:p])}y.fireWith(m,[C,k]);if(c){g.trigger("ajaxComplete",[C,h]);if(!--w.active){w.event.trigger("ajaxStop")}}}return C},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,undefined,t,"script")}});w.each(["get","post"],function(e,t){w[t]=function(e,n,r,i){if(m(n)){i=i||r;r=n;n=undefined}return w.ajax(w.extend({url:e,type:t,dataType:i,data:n,success:r},w.isPlainObject(e)&&e))}});w._evalUrl=function(e){return w.ajax({url:e,type:"GET",dataType:"script",cache:true,async:false,global:false,throws:true})};w.fn.extend({wrapAll:function(e){var t;if(this[0]){if(m(e)){e=e.call(this[0])}t=w(e,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){t.insertBefore(this[0])}t.map(function(){var e=this;while(e.firstElementChild){e=e.firstElementChild}return e}).append(this)}return this},wrapInner:function(e){if(m(e)){return this.each(function(t){w(this).wrapInner(e.call(this,t))})}return this.each(function(){var t=w(this),n=t.contents();if(n.length){n.wrapAll(e)}else{t.append(e)}})},wrap:function(e){var t=m(e);return this.each(function(n){w(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){this.parent(e).not("body").each(function(){w(this).replaceWith(this.childNodes)});return this}});w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)};w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)};w.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Yt={0:200,1223:204},Gt=w.ajaxSettings.xhr();h.cors=!!Gt&&"withCredentials"in Gt;h.ajax=Gt=!!Gt;w.ajaxTransport(function(t){var n,r;if(h.cors||Gt&&!t.crossDomain){return{send:function(i,a){var o,s=t.xhr();s.open(t.type,t.url,t.async,t.username,t.password);if(t.xhrFields){for(o in t.xhrFields){s[o]=t.xhrFields[o]}}if(t.mimeType&&s.overrideMimeType){s.overrideMimeType(t.mimeType)}if(!t.crossDomain&&!i["X-Requested-With"]){i["X-Requested-With"]="XMLHttpRequest"}for(o in i){s.setRequestHeader(o,i[o])}n=function(e){return function(){if(n){n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null;if(e==="abort"){s.abort()}else if(e==="error"){if(typeof s.status!=="number"){a(0,"error")}else{a(s.status,s.statusText)}}else{a(Yt[s.status]||s.status,s.statusText,(s.responseType||"text")!=="text"||typeof s.responseText!=="string"?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders())}}}};s.onload=n();r=s.onerror=s.ontimeout=n("error");if(s.onabort!==undefined){s.onabort=r}else{s.onreadystatechange=function(){if(s.readyState===4){e.setTimeout(function(){if(n){r()}})}}}n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n){throw e}}},abort:function(){if(n){n()}}}}});w.ajaxPrefilter(function(e){if(e.crossDomain){e.contents.script=false}});w.ajaxSetup({accepts:{script:"text/javascript, application/javascript, "+"application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){w.globalEval(e);return e}}});w.ajaxPrefilter("script",function(e){if(e.cache===undefined){e.cache=false}if(e.crossDomain){e.type="GET"}});w.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,a){t=w("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove();n=null;if(e){a(e.type==="error"?404:200,e.type)}});r.head.appendChild(t[0])},abort:function(){if(n){n()}}}}});var Jt=[],Qt=/(=)\?(?=&|$)|\?\?/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Jt.pop()||w.expando+"_"+St++;this[e]=true;return e}});w.ajaxPrefilter("json jsonp",function(t,n,r){var i,a,o,s=t.jsonp!==false&&(Qt.test(t.url)?"url":typeof t.data==="string"&&(t.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&Qt.test(t.data)&&"data");if(s||t.dataTypes[0]==="jsonp"){i=t.jsonpCallback=m(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback;if(s){t[s]=t[s].replace(Qt,"$1"+i)}else if(t.jsonp!==false){t.url+=(jt.test(t.url)?"&":"?")+t.jsonp+"="+i}t.converters["script json"]=function(){if(!o){w.error(i+" was not called")}return o[0]};t.dataTypes[0]="json";a=e[i];e[i]=function(){o=arguments};r.always(function(){if(a===undefined){w(e).removeProp(i)}else{e[i]=a}if(t[i]){t.jsonpCallback=n.jsonpCallback;Jt.push(i)}if(o&&m(a)){a(o[0])}o=a=undefined});return"script"}});h.createHTMLDocument=function(){var e=r.implementation.createHTMLDocument("").body;e.innerHTML="<form></form><form></form>";return e.childNodes.length===2}();w.parseHTML=function(e,t,n){if(typeof e!=="string"){return[]}if(typeof t==="boolean"){n=t;t=false}var i,a,o;if(!t){if(h.createHTMLDocument){t=r.implementation.createHTMLDocument("");i=t.createElement("base");i.href=r.location.href;t.head.appendChild(i)}else{t=r}}a=A.exec(e);o=!n&&[];if(a){return[t.createElement(a[1])]}a=be([e],t,o);if(o&&o.length){w(o).remove()}return w.merge([],a.childNodes)};w.fn.load=function(e,t,n){var r,i,a,o=this,s=e.indexOf(" ");if(s>-1){r=yt(e.slice(s));e=e.slice(0,s)}if(m(t)){n=t;t=undefined}else if(t&&typeof t==="object"){i="POST"}if(o.length>0){w.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){a=arguments;o.html(r?w("<div>").append(w.parseHTML(e)).find(r):e)}).always(n&&function(e,t){o.each(function(){n.apply(this,a||[e.responseText,t,e])})})}return this};w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){w.fn[t]=function(e){return this.on(t,e)}});w.expr.pseudos.animated=function(e){return w.grep(w.timers,function(t){return e===t.elem}).length};w.offset={setOffset:function(e,t,n){var r,i,a,o,s,u,f,l=w.css(e,"position"),c=w(e),d={};if(l==="static"){e.style.position="relative"}s=c.offset();a=w.css(e,"top");u=w.css(e,"left");f=(l==="absolute"||l==="fixed")&&(a+u).indexOf("auto")>-1;if(f){r=c.position();o=r.top;i=r.left}else{o=parseFloat(a)||0;i=parseFloat(u)||0}if(m(t)){t=t.call(e,n,w.extend({},s))}if(t.top!=null){d.top=t.top-s.top+o}if(t.left!=null){d.left=t.left-s.left+i}if("using"in t){t.using.call(e,d)}else{c.css(d)}}};w.fn.extend({offset:function(e){if(arguments.length){return e===undefined?this:this.each(function(t){w.offset.setOffset(this,e,t)})}var t,n,r=this[0];if(!r){return}if(!r.getClientRects().length){return{top:0,left:0}}t=r.getBoundingClientRect();n=r.ownerDocument.defaultView;return{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}},position:function(){if(!this[0]){return}var e,t,n,r=this[0],i={top:0,left:0};if(w.css(r,"position")==="fixed"){t=r.getBoundingClientRect()}else{t=this.offset();n=r.ownerDocument;e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&w.css(e,"position")==="static"){e=e.parentNode}if(e&&e!==r&&e.nodeType===1){i=w(e).offset();i.top+=w.css(e,"borderTopWidth",true);i.left+=w.css(e,"borderLeftWidth",true)}}return{top:t.top-i.top-w.css(r,"marginTop",true),left:t.left-i.left-w.css(r,"marginLeft",true)}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&w.css(e,"position")==="static"){e=e.offsetParent}return e||we})}});w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;w.fn[e]=function(r){return z(this,function(e,r,i){var a;if(g(e)){a=e}else if(e.nodeType===9){a=e.defaultView}if(i===undefined){return a?a[t]:e[r]}if(a){a.scrollTo(!n?i:a.pageXOffset,n?i:a.pageYOffset)}else{e[r]=i}},e,r,arguments.length)}});w.each(["top","left"],function(e,t){w.cssHooks[t]=Xe(h.pixelPosition,function(e,n){if(n){n=_e(e,t);return We.test(n)?w(e).position()[t]+"px":n}})});w.each({Height:"height",Width:"width"},function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){w.fn[r]=function(i,a){var o=arguments.length&&(n||typeof i!=="boolean"),s=n||(i===true||a===true?"margin":"border");return z(this,function(t,n,i){var a;if(g(t)){return r.indexOf("outer")===0?t["inner"+e]:t.document.documentElement["client"+e]}if(t.nodeType===9){a=t.documentElement;return Math.max(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])}return i===undefined?w.css(t,n,s):w.style(t,n,i,s)},t,o?i:undefined,o)}})});w.each(("blur focus focusin focusout resize scroll click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select submit keydown keypress keyup contextmenu").split(" "),function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}});w.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return arguments.length===1?this.off(e,"**"):this.off(t,e||"**",n)}});w.proxy=function(e,t){var n,r,i;if(typeof t==="string"){n=e[t];t=e;e=n}if(!m(e)){return undefined}r=a.call(arguments,2);i=function(){return e.apply(t||this,r.concat(a.call(arguments)))};i.guid=e.guid=e.guid||w.guid++;return i};w.holdReady=function(e){if(e){w.readyWait++}else{w.ready(true)}};w.isArray=Array.isArray;w.parseJSON=JSON.parse;w.nodeName=D;w.isFunction=m;w.isWindow=g;w.camelCase=G;w.type=x;w.now=Date.now;w.isNumeric=function(e){var t=w.type(e);return(t==="number"||t==="string")&&!isNaN(e-parseFloat(e))};if(typeof define==="function"&&define.amd){define("jquery",[],function(){return w})}var Kt=e.jQuery,Zt=e.$;w.noConflict=function(t){if(e.$===w){e.$=Zt}if(t&&e.jQuery===w){e.jQuery=Kt}return w};if(!t){e.jQuery=e.$=w}return w});(function(e){if(typeof define==="function"&&define.amd){define(["jquery"],e)}else if(typeof module==="object"&&module.exports){module.exports=function(t,n){if(typeof n==="undefined"){if(typeof window!=="undefined"){n=require("jquery")}else{n=require("jquery")(t)}}e(n);return n}}else{e(jQuery)}})(function(e){"use strict";var t=/\r?\n/g;var n={};n.fileapi=e('<input type="file">').get(0).files!==undefined;n.formdata=typeof window.FormData!=="undefined";var r=!!e.fn.prop;e.fn.attr2=function(){if(!r){return this.attr.apply(this,arguments)}var e=this.prop.apply(this,arguments);if(e&&e.jquery||typeof e==="string"){return e}return this.attr.apply(this,arguments)};e.fn.ajaxSubmit=function(t,i,a,s){if(!this.length){o("ajaxSubmit: skipping submit process - no element selected");return this}var u,f,l,c=this;if(typeof t==="function"){t={success:t}}else if(typeof t==="string"||t===false&&arguments.length>0){t={url:t,data:i,dataType:a};if(typeof s==="function"){t.success=s}}else if(typeof t==="undefined"){t={}}u=t.method||t.type||this.attr2("method");f=t.url||this.attr2("action");l=typeof f==="string"?e.trim(f):"";l=l||window.location.href||"";if(l){l=(l.match(/^([^#]+)/)||[])[1]}t=e.extend(true,{url:l,success:e.ajaxSettings.success,type:u||e.ajaxSettings.type,iframeSrc:/^https/i.test(window.location.href||"")?"javascript:false":"about:blank"},t);var d={};this.trigger("form-pre-serialize",[this,t,d]);if(d.veto){o("ajaxSubmit: submit vetoed via form-pre-serialize trigger");return this}if(t.beforeSerialize&&t.beforeSerialize(this,t)===false){o("ajaxSubmit: submit aborted via beforeSerialize callback");return this}var p=t.traditional;if(typeof p==="undefined"){p=e.ajaxSettings.traditional}var h=[];var m,g=this.formToArray(t.semantic,h,t.filtering);if(t.data){var v=e.isFunction(t.data)?t.data(g):t.data;t.extraData=v;m=e.param(v,p)}if(t.beforeSubmit&&t.beforeSubmit(g,this,t)===false){o("ajaxSubmit: submit aborted via beforeSubmit callback");return this}this.trigger("form-submit-validate",[g,this,t,d]);if(d.veto){o("ajaxSubmit: submit vetoed via form-submit-validate trigger");return this}var y=e.param(g,p);if(m){y=y?y+"&"+m:m}if(t.type.toUpperCase()==="GET"){t.url+=(t.url.indexOf("?")>=0?"&":"?")+y;t.data=null}else{t.data=y}var x=[];if(t.resetForm){x.push(function(){c.resetForm()})}if(t.clearForm){x.push(function(){c.clearForm(t.includeHidden)})}if(!t.dataType&&t.target){var b=t.success||function(){};x.push(function(n,r,i){var a=arguments,o=t.replaceTarget?"replaceWith":"html";e(t.target)[o](n).each(function(){b.apply(this,a)})})}else if(t.success){if(e.isArray(t.success)){e.merge(x,t.success)}else{x.push(t.success)}}t.success=function(e,n,r){var i=t.context||this;for(var a=0,o=x.length;a<o;a++){x[a].apply(i,[e,n,r||c,c])}};if(t.error){var w=t.error;t.error=function(e,n,r){var i=t.context||this;w.apply(i,[e,n,r,c])}}if(t.complete){var T=t.complete;t.complete=function(e,n){var r=t.context||this;T.apply(r,[e,n,c])}}var k=e("input[type=file]:enabled",this).filter(function(){return e(this).val()!==""});var C=k.length>0;var S="multipart/form-data";var j=c.attr("enctype")===S||c.attr("encoding")===S;var E=n.fileapi&&n.formdata;o("fileAPI :"+E);var D=(C||j)&&!E;var A;if(t.iframe!==false&&(t.iframe||D)){if(t.closeKeepAlive){e.get(t.closeKeepAlive,function(){A=O(g)})}else{A=O(g)}}else if((C||j)&&E){A=q(g)}else{A=e.ajax(t)}c.removeData("jqxhr").data("jqxhr",A);for(var N=0;N<h.length;N++){h[N]=null}this.trigger("form-submit-notify",[this,t]);return this;function L(n){var r=e.param(n,t.traditional).split("&");var i=r.length;var a=[];var o,s;for(o=0;o<i;o++){r[o]=r[o].replace(/\+/g," ");s=r[o].split("=");a.push([decodeURIComponent(s[0]),decodeURIComponent(s[1])])}return a}function q(n){var r=new FormData;for(var i=0;i<n.length;i++){r.append(n[i].name,n[i].value)}if(t.extraData){var a=L(t.extraData);for(i=0;i<a.length;i++){if(a[i]){r.append(a[i][0],a[i][1])}}}t.data=null;var o=e.extend(true,{},e.ajaxSettings,t,{contentType:false,processData:false,cache:false,type:u||"POST"});if(t.uploadProgress){o.xhr=function(){var n=e.ajaxSettings.xhr();if(n.upload){n.upload.addEventListener("progress",function(e){var n=0;var r=e.loaded||e.position;var i=e.total;if(e.lengthComputable){n=Math.ceil(r/i*100)}t.uploadProgress(e,r,i,n)},false)}return n}}o.data=null;var s=o.beforeSend;o.beforeSend=function(e,n){if(t.formData){n.data=t.formData}else{n.data=r}if(s){s.call(this,e,n)}};return e.ajax(o)}function O(n){var i=c[0],a,s,f,l,d,p,m,g,v,y,x,b;var w=e.Deferred();w.abort=function(e){g.abort(e)};if(n){for(s=0;s<h.length;s++){a=e(h[s]);if(r){a.prop("disabled",false)}else{a.removeAttr("disabled")}}}f=e.extend(true,{},e.ajaxSettings,t);f.context=f.context||f;d="jqFormIO"+(new Date).getTime();var T=i.ownerDocument;var k=c.closest("body");if(f.iframeTarget){p=e(f.iframeTarget,T);y=p.attr2("name");if(!y){p.attr2("name",d)}else{d=y}}else{p=e('<iframe name="'+d+'" src="'+f.iframeSrc+'" />',T);p.css({position:"absolute",top:"-1000px",left:"-1000px"})}m=p[0];g={aborted:0,responseText:null,responseXML:null,status:0,statusText:"n/a",getAllResponseHeaders:function(){},getResponseHeader:function(){},setRequestHeader:function(){},abort:function(t){var n=t==="timeout"?"timeout":"aborted";o("aborting upload... "+n);this.aborted=1;try{if(m.contentWindow.document.execCommand){m.contentWindow.document.execCommand("Stop")}}catch(e){}p.attr("src",f.iframeSrc);g.error=n;if(f.error){f.error.call(f.context,g,n,t)}if(l){e.event.trigger("ajaxError",[g,f,n])}if(f.complete){f.complete.call(f.context,g,n)}}};l=f.global;if(l&&e.active++===0){e.event.trigger("ajaxStart")}if(l){e.event.trigger("ajaxSend",[g,f])}if(f.beforeSend&&f.beforeSend.call(f.context,g,f)===false){if(f.global){e.active--}w.reject();return w}if(g.aborted){w.reject();return w}v=i.clk;if(v){y=v.name;if(y&&!v.disabled){f.extraData=f.extraData||{};f.extraData[y]=v.value;if(v.type==="image"){f.extraData[y+".x"]=i.clk_x;f.extraData[y+".y"]=i.clk_y}}}var C=1;var S=2;function j(e){var t=null;try{if(e.contentWindow){t=e.contentWindow.document}}catch(e){o("cannot get iframe.contentWindow document: "+e)}if(t){return t}try{t=e.contentDocument?e.contentDocument:e.document}catch(n){o("cannot get iframe.contentDocument: "+n);t=e.document}return t}var E=e("meta[name=csrf-token]").attr("content");var D=e("meta[name=csrf-param]").attr("content");if(D&&E){f.extraData=f.extraData||{};f.extraData[D]=E}function A(){var t=c.attr2("target"),n=c.attr2("action"),r="multipart/form-data",a=c.attr("enctype")||c.attr("encoding")||r;i.setAttribute("target",d);if(!u||/post/i.test(u)){i.setAttribute("method","POST")}if(n!==f.url){i.setAttribute("action",f.url)}if(!f.skipEncodingOverride&&(!u||/post/i.test(u))){c.attr({encoding:"multipart/form-data",enctype:"multipart/form-data"})}if(f.timeout){b=setTimeout(function(){x=true;H(C)},f.timeout)}function s(){try{var e=j(m).readyState;o("state = "+e);if(e&&e.toLowerCase()==="uninitialized"){setTimeout(s,50)}}catch(e){o("Server abort: ",e," (",e.name,")");H(S);if(b){clearTimeout(b)}b=undefined}}var l=[];try{if(f.extraData){for(var h in f.extraData){if(f.extraData.hasOwnProperty(h)){if(e.isPlainObject(f.extraData[h])&&f.extraData[h].hasOwnProperty("name")&&f.extraData[h].hasOwnProperty("value")){l.push(e('<input type="hidden" name="'+f.extraData[h].name+'">',T).val(f.extraData[h].value).appendTo(i)[0])}else{l.push(e('<input type="hidden" name="'+h+'">',T).val(f.extraData[h]).appendTo(i)[0])}}}}if(!f.iframeTarget){p.appendTo(k)}if(m.attachEvent){m.attachEvent("onload",H)}else{m.addEventListener("load",H,false)}setTimeout(s,15);try{i.submit()}catch(e){var g=document.createElement("form").submit;g.apply(i)}}finally{i.setAttribute("action",n);i.setAttribute("enctype",a);if(t){i.setAttribute("target",t)}else{c.removeAttr("target")}e(l).remove()}}if(f.forceSync){A()}else{setTimeout(A,10)}var N,L,q=50,O;function H(t){if(g.aborted||O){return}L=j(m);if(!L){o("cannot access response document");t=S}if(t===C&&g){g.abort("timeout");w.reject(g,"timeout");return}else if(t===S&&g){g.abort("server abort");w.reject(g,"error","server abort");return}if(!L||L.location.href===f.iframeSrc){if(!x){return}}if(m.detachEvent){m.detachEvent("onload",H)}else{m.removeEventListener("load",H,false)}var n="success",r;try{if(x){throw"timeout"}var i=f.dataType==="xml"||L.XMLDocument||e.isXMLDoc(L);o("isXml="+i);if(!i&&window.opera&&(L.body===null||!L.body.innerHTML)){if(--q){o("requeing onLoad callback, DOM not available");setTimeout(H,250);return}}var a=L.body?L.body:L.documentElement;g.responseText=a?a.innerHTML:null;g.responseXML=L.XMLDocument?L.XMLDocument:L;if(i){f.dataType="xml"}g.getResponseHeader=function(e){var t={"content-type":f.dataType};return t[e.toLowerCase()]};if(a){g.status=Number(a.getAttribute("status"))||g.status;g.statusText=a.getAttribute("statusText")||g.statusText}var s=(f.dataType||"").toLowerCase();var u=/(json|script|text)/.test(s);if(u||f.textarea){var c=L.getElementsByTagName("textarea")[0];if(c){g.responseText=c.value;g.status=Number(c.getAttribute("status"))||g.status;g.statusText=c.getAttribute("statusText")||g.statusText}else if(u){var d=L.getElementsByTagName("pre")[0];var h=L.getElementsByTagName("body")[0];if(d){g.responseText=d.textContent?d.textContent:d.innerText}else if(h){g.responseText=h.textContent?h.textContent:h.innerText}}}else if(s==="xml"&&!g.responseXML&&g.responseText){g.responseXML=P(g.responseText)}try{N=I(g,s,f)}catch(e){n="parsererror";g.error=r=e||n}}catch(e){o("error caught: ",e);n="error";g.error=r=e||n}if(g.aborted){o("upload aborted");n=null}if(g.status){n=g.status>=200&&g.status<300||g.status===304?"success":"error"}if(n==="success"){if(f.success){f.success.call(f.context,N,"success",g)}w.resolve(g.responseText,"success",g);if(l){e.event.trigger("ajaxSuccess",[g,f])}}else if(n){if(typeof r==="undefined"){r=g.statusText}if(f.error){f.error.call(f.context,g,n,r)}w.reject(g,"error",r);if(l){e.event.trigger("ajaxError",[g,f,r])}}if(l){e.event.trigger("ajaxComplete",[g,f])}if(l&&!--e.active){e.event.trigger("ajaxStop")}if(f.complete){f.complete.call(f.context,g,n)}O=true;if(f.timeout){clearTimeout(b)}setTimeout(function(){if(!f.iframeTarget){p.remove()}else{p.attr("src",f.iframeSrc)}g.responseXML=null},100)}var P=e.parseXML||function(e,t){if(window.ActiveXObject){t=new ActiveXObject("Microsoft.XMLDOM");t.async="false";t.loadXML(e)}else{t=(new DOMParser).parseFromString(e,"text/xml")}return t&&t.documentElement&&t.documentElement.nodeName!=="parsererror"?t:null};var M=e.parseJSON||function(e){return window["eval"]("("+e+")")};var I=function(t,n,r){var i=t.getResponseHeader("content-type")||"",a=(n==="xml"||!n)&&i.indexOf("xml")>=0,o=a?t.responseXML:t.responseText;if(a&&o.documentElement.nodeName==="parsererror"){if(e.error){e.error("parsererror")}}if(r&&r.dataFilter){o=r.dataFilter(o,n)}if(typeof o==="string"){if((n==="json"||!n)&&i.indexOf("json")>=0){o=M(o)}else if((n==="script"||!n)&&i.indexOf("javascript")>=0){e.globalEval(o)}}return o};return w}};e.fn.ajaxForm=function(t,n,r,s){if(typeof t==="string"||t===false&&arguments.length>0){t={url:t,data:n,dataType:r};if(typeof s==="function"){t.success=s}}t=t||{};t.delegation=t.delegation&&e.isFunction(e.fn.on);if(!t.delegation&&this.length===0){var u={s:this.selector,c:this.context};if(!e.isReady&&u.s){o("DOM not ready, queuing ajaxForm");e(function(){e(u.s,u.c).ajaxForm(t)});return this}o("terminating; zero elements found by selector"+(e.isReady?"":" (DOM not ready)"));return this}if(t.delegation){e(document).off("submit.form-plugin",this.selector,i).off("click.form-plugin",this.selector,a).on("submit.form-plugin",this.selector,t,i).on("click.form-plugin",this.selector,t,a);return this}return this.ajaxFormUnbind().on("submit.form-plugin",t,i).on("click.form-plugin",t,a)};function i(t){var n=t.data;if(!t.isDefaultPrevented()){t.preventDefault();e(t.target).closest("form").ajaxSubmit(n)}}function a(t){var n=t.target;var r=e(n);if(!r.is("[type=submit],[type=image]")){var i=r.closest("[type=submit]");if(i.length===0){return}n=i[0]}var a=n.form;a.clk=n;if(n.type==="image"){if(typeof t.offsetX!=="undefined"){a.clk_x=t.offsetX;a.clk_y=t.offsetY}else if(typeof e.fn.offset==="function"){var o=r.offset();a.clk_x=t.pageX-o.left;a.clk_y=t.pageY-o.top}else{a.clk_x=t.pageX-n.offsetLeft;a.clk_y=t.pageY-n.offsetTop}}setTimeout(function(){a.clk=a.clk_x=a.clk_y=null},100)}e.fn.ajaxFormUnbind=function(){return this.off("submit.form-plugin click.form-plugin")};e.fn.formToArray=function(t,r,i){var a=[];if(this.length===0){return a}var o=this[0];var s=this.attr("id");var u=t||typeof o.elements==="undefined"?o.getElementsByTagName("*"):o.elements;var f;if(u){u=e.makeArray(u)}if(s&&(t||/(Edge|Trident)\//.test(navigator.userAgent))){f=e(':input[form="'+s+'"]').get();if(f.length){u=(u||[]).concat(f)}}if(!u||!u.length){return a}if(e.isFunction(i)){u=e.map(u,i)}var l,c,d,p,h,m,g;for(l=0,m=u.length;l<m;l++){h=u[l];d=h.name;if(!d||h.disabled){continue}if(t&&o.clk&&h.type==="image"){if(o.clk===h){a.push({name:d,value:e(h).val(),type:h.type});a.push({name:d+".x",value:o.clk_x},{name:d+".y",value:o.clk_y})}continue}p=e.fieldValue(h,true);if(p&&p.constructor===Array){if(r){r.push(h)}for(c=0,g=p.length;c<g;c++){a.push({name:d,value:p[c]})}}else if(n.fileapi&&h.type==="file"){if(r){r.push(h)}var v=h.files;if(v.length){for(c=0;c<v.length;c++){a.push({name:d,value:v[c],type:h.type})}}else{a.push({name:d,value:"",type:h.type})}}else if(p!==null&&typeof p!=="undefined"){if(r){r.push(h)}a.push({name:d,value:p,type:h.type,required:h.required})}}if(!t&&o.clk){var y=e(o.clk),x=y[0];d=x.name;if(d&&!x.disabled&&x.type==="image"){a.push({name:d,value:y.val()});a.push({name:d+".x",value:o.clk_x},{name:d+".y",value:o.clk_y})}}return a};e.fn.formSerialize=function(t){return e.param(this.formToArray(t))};e.fn.fieldSerialize=function(t){var n=[];this.each(function(){var r=this.name;if(!r){return}var i=e.fieldValue(this,t);if(i&&i.constructor===Array){for(var a=0,o=i.length;a<o;a++){n.push({name:r,value:i[a]})}}else if(i!==null&&typeof i!=="undefined"){n.push({name:this.name,value:i})}});return e.param(n)};e.fn.fieldValue=function(t){for(var n=[],r=0,i=this.length;r<i;r++){var a=this[r];var o=e.fieldValue(a,t);if(o===null||typeof o==="undefined"||o.constructor===Array&&!o.length){continue}if(o.constructor===Array){e.merge(n,o)}else{n.push(o)}}return n};e.fieldValue=function(n,r){var i=n.name,a=n.type,o=n.tagName.toLowerCase();if(typeof r==="undefined"){r=true}if(r&&(!i||n.disabled||a==="reset"||a==="button"||(a==="checkbox"||a==="radio")&&!n.checked||(a==="submit"||a==="image")&&n.form&&n.form.clk!==n||o==="select"&&n.selectedIndex===-1)){return null}if(o==="select"){var s=n.selectedIndex;if(s<0){return null}var u=[],f=n.options;var l=a==="select-one";var c=l?s+1:f.length;for(var d=l?s:0;d<c;d++){var p=f[d];if(p.selected&&!p.disabled){var h=p.value;if(!h){h=p.attributes&&p.attributes.value&&!p.attributes.value.specified?p.text:p.value}if(l){return h}u.push(h)}}return u}return e(n).val().replace(t,"\r\n")};e.fn.clearForm=function(t){return this.each(function(){e("input,select,textarea",this).clearFields(t)})};e.fn.clearFields=e.fn.clearInputs=function(t){var n=/^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each(function(){var r=this.type,i=this.tagName.toLowerCase();if(n.test(r)||i==="textarea"){this.value=""}else if(r==="checkbox"||r==="radio"){this.checked=false}else if(i==="select"){this.selectedIndex=-1}else if(r==="file"){if(/MSIE/.test(navigator.userAgent)){e(this).replaceWith(e(this).clone(true))}else{e(this).val("")}}else if(t){if(t===true&&/hidden/.test(r)||typeof t==="string"&&e(this).is(t)){this.value=""}}})};e.fn.resetForm=function(){return this.each(function(){var t=e(this);var n=this.tagName.toLowerCase();switch(n){case"input":this.checked=this.defaultChecked;case"textarea":this.value=this.defaultValue;return true;case"option":case"optgroup":var r=t.parents("select");if(r.length&&r[0].multiple){if(n==="option"){this.selected=this.defaultSelected}else{t.find("option").resetForm()}}else{r.resetForm()}return true;case"select":t.find("option").each(function(e){this.selected=this.defaultSelected;if(this.defaultSelected&&!t[0].multiple){t[0].selectedIndex=e;return false}});return true;case"label":var i=e(t.attr("for"));var a=t.find("input,select,textarea");if(i[0]){a.unshift(i[0])}a.resetForm();return true;case"form":if(typeof this.reset==="function"||typeof this.reset==="object"&&!this.reset.nodeType){this.reset()}return true;default:t.find("form,input,label,select,textarea").resetForm();return true}})};e.fn.enable=function(e){if(typeof e==="undefined"){e=true}return this.each(function(){this.disabled=!e})};e.fn.selected=function(t){if(typeof t==="undefined"){t=true}return this.each(function(){var n=this.type;if(n==="checkbox"||n==="radio"){this.checked=t}else if(this.tagName.toLowerCase()==="option"){var r=e(this).parent("select");if(t&&r[0]&&r[0].type==="select-one"){r.find("option").selected(false)}this.selected=t}})};e.fn.ajaxSubmit.debug=false;function o(){if(!e.fn.ajaxSubmit.debug){return}var t="[jquery.form] "+Array.prototype.join.call(arguments,"");if(window.console&&window.console.log){window.console.log(t)}else if(window.opera&&window.opera.postError){window.opera.postError(t)}}});(function(e,t){if(typeof define==="function"&&define.amd){define("Translator",t)}else if(typeof module==="object"&&module.exports){module.exports=t()}else{e.Translator=t()}})(this,function(){"use strict";var e={},t="en",n=[],r=new RegExp(/^\w+\: +(.+)$/),i=new RegExp(/^\s*((\{\s*(\-?\d+[\s*,\s*\-?\d+]*)\s*\})|([\[\]])\s*(-Inf|\-?\d+)\s*,\s*(\+?Inf|\-?\d+)\s*([\[\]]))\s?(.+?)$/),a=new RegExp(/^\s*(\{\s*(\-?\d+[\s*,\s*\-?\d+]*)\s*\})|([\[\]])\s*(-Inf|\-?\d+)\s*,\s*(\+?Inf|\-?\d+)\s*([\[\]])/);var o={locale:h(),fallback:t,placeHolderPrefix:"%",placeHolderSuffix:"%",defaultDomain:"messages",pluralSeparator:"|",add:function(t,r,i,a){var o=a||this.locale||this.fallback,s=i||this.defaultDomain;if(!e[o]){e[o]={}}if(!e[o][s]){e[o][s]={}}e[o][s][t]=r;if(false===p(n,s)){n.push(s)}return this},trans:function(e,t,n,r){var i=u(e,n,r,this.locale,this.fallback);return s(i,t||{})},transChoice:function(e,t,n,r,i){var a=u(e,r,i,this.locale,this.fallback);var o=parseInt(t,10);n=n||{};if(n.count===undefined){n.count=t}if(typeof a!=="undefined"&&!isNaN(o)){a=l(a,o,i||this.locale||this.fallback)}return s(a,n)},fromJSON:function(e){if(typeof e==="string"){e=JSON.parse(e)}if(e.locale){this.locale=e.locale}if(e.fallback){this.fallback=e.fallback}if(e.defaultDomain){this.defaultDomain=e.defaultDomain}if(e.translations){for(var t in e.translations){for(var n in e.translations[t]){for(var r in e.translations[t][n]){this.add(r,e.translations[t][n][r],n,t)}}}}return this},reset:function(){e={};n=[];this.locale=h()}};function s(e,t){var n,r=o.placeHolderPrefix,i=o.placeHolderSuffix;for(n in t){var a=new RegExp(r+n+i,"g");if(a.test(e)){var s=String(t[n]).replace(new RegExp("\\$","g"),"$$$$");e=e.replace(a,s)}}return e}function u(t,r,i,a,o){var s=i||a||o,u=r;var l=s.split("_")[0];if(!(s in e)){if(!(l in e)){if(!(o in e)){return t}s=o}else{s=l}}if(typeof u==="undefined"||null===u){for(var c=0;c<n.length;c++){if(f(s,n[c],t)||f(l,n[c],t)||f(o,n[c],t)){u=n[c];break}}}if(f(s,u,t)){return e[s][u][t]}var d,p,h,m;while(s.length>2){d=s.length;p=s.split(/[\s_]+/);h=p[p.length-1];m=h.length;if(1===p.length){break}s=s.substring(0,d-(m+1));if(f(s,u,t)){return e[s][u][t]}}if(f(o,u,t)){return e[o][u][t]}return t}function f(t,n,r){if(!(t in e)){return false}if(!(n in e[t])){return false}if(!(r in e[t][n])){return false}return true}function l(e,t,n){var s,u,f=[],l=[],p=e.split(o.pluralSeparator),h=[];for(s=0;s<p.length;s++){var m=p[s];if(i.test(m)){h=m.match(i);f[h[0]]=h[h.length-1]}else if(r.test(m)){h=m.match(r);l.push(h[1])}else{l.push(m)}}for(u in f){if(a.test(u)){h=u.match(a);if(h[1]){var g=h[2].split(","),v;for(v in g){if(t==g[v]){return f[u]}}}else{var y=c(h[4]);var x=c(h[5]);if(("["===h[3]?t>=y:t>y)&&("]"===h[6]?t<=x:t<x)){return f[u]}}}}return l[d(t,n)]||l[0]||undefined}function c(e){if("-Inf"===e){return Number.NEGATIVE_INFINITY}else if("+Inf"===e||"Inf"===e){return Number.POSITIVE_INFINITY}return parseInt(e,10)}function d(e,t){var n=t;if("pt_BR"===n){n="xbr"}if(n.length>3){n=n.split("_")[0]}switch(n){case"bo":case"dz":case"id":case"ja":case"jv":case"ka":case"km":case"kn":case"ko":case"ms":case"th":case"tr":case"vi":case"zh":return 0;case"af":case"az":case"bn":case"bg":case"ca":case"da":case"de":case"el":case"en":case"eo":case"es":case"et":case"eu":case"fa":case"fi":case"fo":case"fur":case"fy":case"gl":case"gu":case"ha":case"he":case"hu":case"is":case"it":case"ku":case"lb":case"ml":case"mn":case"mr":case"nah":case"nb":case"ne":case"nl":case"nn":case"no":case"om":case"or":case"pa":case"pap":case"ps":case"pt":case"so":case"sq":case"sv":case"sw":case"ta":case"te":case"tk":case"ur":case"zu":return e==1?0:1;case"am":case"bh":case"fil":case"fr":case"gun":case"hi":case"ln":case"mg":case"nso":case"xbr":case"ti":case"wa":return e===0||e==1?0:1;case"be":case"bs":case"hr":case"ru":case"sr":case"uk":return e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2;case"cs":case"sk":return e==1?0:e>=2&&e<=4?1:2;case"ga":return e==1?0:e==2?1:2;case"lt":return e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2;case"sl":return e%100==1?0:e%100==2?1:e%100==3||e%100==4?2:3;case"mk":return e%10==1?0:1;case"mt":return e==1?0:e===0||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3;case"lv":return e===0?0:e%10==1&&e%100!=11?1:2;case"pl":return e==1?0:e%10>=2&&e%10<=4&&(e%100<12||e%100>14)?1:2;case"cy":return e==1?0:e==2?1:e==8||e==11?2:3;case"ro":return e==1?0:e===0||e%100>0&&e%100<20?1:2;case"ar":return e===0?0:e==1?1:e==2?2:e>=3&&e<=10?3:e>=11&&e<=99?4:5;default:return 0}}function p(e,t){for(var n=0;n<e.length;n++){if(t===e[n]){return true}}return false}function h(){if(typeof document!=="undefined"){return document.documentElement.lang.replace("-","_")}else{return t}}return o});var Router=function(){var e="";var t=[];var n=function e(t,n){n=n===undefined?[]:n;this.base=this.base===undefined?"":this.base;var r=this.routes[t];if(r===undefined){return undefined}var i=this.base+r.path;for(var a in n){if(n.hasOwnProperty(a)){i=i.replace("{"+a+"}",n[a])}}return i};var r=function e(t){this.base=t};var i=function e(t){this.routes=t};return{generatePath:n,setBasePath:r,setRoutes:i}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
